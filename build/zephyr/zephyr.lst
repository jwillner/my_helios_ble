
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	40 93 00 20 d1 87 01 00 6b c6 02 00 89 87 01 00     @.. ....k.......
	while (ad->len > 1) {
  10:	89 87 01 00 89 87 01 00 89 87 01 00 00 00 00 00     ................
	...
			LOG_WRN("malformed advertising data %u / %u",
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  2c:	fd 78 01 00 89 87 01 00 00 00 00 00 a5 78 01 00     .x...........x..
		data.data_len = len - 1;
		data.data = ad->data;

		if (!func(&data, user_data)) {
  3c:	89 87 01 00                                         ....

00000040 <_irq_vector_table>:
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  40:	d5 79 01 00 85 04 03 00 d5 79 01 00 d5 79 01 00     .y.......y...y..
			LOG_WRN("malformed advertising data %u / %u",
  50:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
  60:	4d 04 03 00 d5 79 01 00 d5 79 01 00 6b 04 03 00     M....y...y..k...
  70:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
  80:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
  90:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
  a0:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  b0:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
	}
}
  c0:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
			LOG_WRN("malformed advertising data %u / %u",
  d0:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
  e0:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..
  f0:	d5 79 01 00 d5 79 01 00 d5 79 01 00 d5 79 01 00     .y...y...y...y..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c f8b8 	bl	c294 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	f04c 0601 	orr.w	r6, ip, #1
     6ee:	f08c 0702 	eor.w	r7, ip, #2
     6f2:	eb18 0806 	adds.w	r8, r8, r6
     6f6:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     6fa:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     6fe:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     702:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     706:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     70a:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     70e:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     712:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     716:	eb18 000c 	adds.w	r0, r8, ip
     71a:	eb59 010c 	adcs.w	r1, r9, ip
     71e:	eb5a 020c 	adcs.w	r2, sl, ip
     722:	f15b 0300 	adcs.w	r3, fp, #0
     726:	f154 0400 	adcs.w	r4, r4, #0
     72a:	f155 0500 	adcs.w	r5, r5, #0
     72e:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     732:	eb57 070c 	adcs.w	r7, r7, ip
     736:	4770      	bx	lr

00000738 <ocrypto_mod_p256_mul>:
     738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	b087      	sub	sp, #28
     73e:	f7ff fdaf 	bl	2a0 <ocrypto_mul256_noframe>
     742:	f8dd 8010 	ldr.w	r8, [sp, #16]
     746:	f8dd 9014 	ldr.w	r9, [sp, #20]
     74a:	f8dd a018 	ldr.w	sl, [sp, #24]
     74e:	f7ff ff97 	bl	680 <mul_reduce>
     752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     756:	f7ff ff93 	bl	680 <mul_reduce>
     75a:	b003      	add	sp, #12
     75c:	f85d 8b04 	ldr.w	r8, [sp], #4
     760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000768 <ocrypto_mod_p256_sqr>:
     768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b087      	sub	sp, #28
     76e:	f7ff fe53 	bl	418 <ocrypto_sqr256_noframe>
     772:	f8dd 8010 	ldr.w	r8, [sp, #16]
     776:	f8dd 9014 	ldr.w	r9, [sp, #20]
     77a:	f8dd a018 	ldr.w	sl, [sp, #24]
     77e:	f7ff ff7f 	bl	680 <mul_reduce>
     782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     786:	f7ff ff7b 	bl	680 <mul_reduce>
     78a:	b003      	add	sp, #12
     78c:	f85d 8b04 	ldr.w	r8, [sp], #4
     790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     79a:	4c14      	ldr	r4, [pc, #80]	; (7ec <ocrypto_mod_p256_sqr+0x84>)
     79c:	7a20      	ldrb	r0, [r4, #8]
     79e:	f88d 0001 	strb.w	r0, [sp, #1]
     7a2:	79e0      	ldrb	r0, [r4, #7]
     7a4:	f88d 0000 	strb.w	r0, [sp]
     7a8:	79a0      	ldrb	r0, [r4, #6]
     7aa:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ae:	7960      	ldrb	r0, [r4, #5]
     7b0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7b4:	4668      	mov	r0, sp
     7b6:	f006 f9d5 	bl	6b64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7ba:	b108      	cbz	r0, 7c0 <ocrypto_mod_p256_sqr+0x58>
     7bc:	21ad      	movs	r1, #173	; 0xad
     7be:	e010      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7c0:	68e0      	ldr	r0, [r4, #12]
     7c2:	9002      	str	r0, [sp, #8]
     7c4:	a802      	add	r0, sp, #8
     7c6:	f006 f9e3 	bl	6b90 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ca:	b108      	cbz	r0, 7d0 <ocrypto_mod_p256_sqr+0x68>
     7cc:	21b1      	movs	r1, #177	; 0xb1
     7ce:	e008      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7d0:	4807      	ldr	r0, [pc, #28]	; (7f0 <ocrypto_mod_p256_sqr+0x88>)
     7d2:	6800      	ldr	r0, [r0, #0]
     7d4:	9003      	str	r0, [sp, #12]
     7d6:	a803      	add	r0, sp, #12
     7d8:	f00f f861 	bl	f89e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7dc:	2800      	cmp	r0, #0
     7de:	d003      	beq.n	7e8 <ocrypto_mod_p256_sqr+0x80>
     7e0:	21b5      	movs	r1, #181	; 0xb5
     7e2:	2003      	movs	r0, #3
     7e4:	f000 f8e4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     7ea:	0000      	.short	0x0000
     7ec:	20001290 	.word	0x20001290
     7f0:	00000ab8 	.word	0x00000ab8

000007f4 <sdc_build_revision_get>:
     7f4:	b510      	push	{r4, lr}
     7f6:	b128      	cbz	r0, 804 <CONFIG_ISR_STACK_SIZE+0x4>
     7f8:	2214      	movs	r2, #20
     7fa:	4904      	ldr	r1, [pc, #16]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7fc:	f00f fe8f 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     800:	2000      	movs	r0, #0
     802:	bd10      	pop	{r4, pc}
     804:	f06f 0015 	mvn.w	r0, #21
     808:	bd10      	pop	{r4, pc}
     80a:	0000      	.short	0x0000
     80c:	00000ae0 	.word	0x00000ae0

00000810 <sdc_cfg_set>:
     810:	b570      	push	{r4, r5, r6, lr}
     812:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     816:	bb78      	cbnz	r0, 878 <__z_interrupt_stack_SIZEOF+0x38>
     818:	4c22      	ldr	r4, [pc, #136]	; (8a4 <__z_interrupt_stack_SIZEOF+0x64>)
     81a:	7860      	ldrb	r0, [r4, #1]
     81c:	b108      	cbz	r0, 822 <sdc_cfg_set+0x12>
     81e:	11a8      	asrs	r0, r5, #6
     820:	bd70      	pop	{r4, r5, r6, pc}
     822:	b1f9      	cbz	r1, 864 <__z_interrupt_stack_SIZEOF+0x24>
     824:	f06f 0015 	mvn.w	r0, #21
     828:	2a00      	cmp	r2, #0
     82a:	d0f9      	beq.n	820 <sdc_cfg_set+0x10>
     82c:	4b1e      	ldr	r3, [pc, #120]	; (8a8 <__z_interrupt_stack_SIZEOF+0x68>)
     82e:	1e89      	subs	r1, r1, #2
     830:	2907      	cmp	r1, #7
     832:	d231      	bcs.n	898 <__z_interrupt_stack_SIZEOF+0x58>
     834:	e8df f001 	tbb	[pc, r1]
     838:	1a170704 	.word	0x1a170704
     83c:	00211d30 	.word	0x00211d30
     840:	7810      	ldrb	r0, [r2, #0]
     842:	7058      	strb	r0, [r3, #1]
     844:	e01d      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     846:	7891      	ldrb	r1, [r2, #2]
     848:	2900      	cmp	r1, #0
     84a:	d0e9      	beq.n	820 <sdc_cfg_set+0x10>
     84c:	78d1      	ldrb	r1, [r2, #3]
     84e:	2900      	cmp	r1, #0
     850:	d0e6      	beq.n	820 <sdc_cfg_set+0x10>
     852:	7811      	ldrb	r1, [r2, #0]
     854:	291b      	cmp	r1, #27
     856:	d3e3      	bcc.n	820 <sdc_cfg_set+0x10>
     858:	7851      	ldrb	r1, [r2, #1]
     85a:	291b      	cmp	r1, #27
     85c:	d3e0      	bcc.n	820 <sdc_cfg_set+0x10>
     85e:	6810      	ldr	r0, [r2, #0]
     860:	f8c3 0005 	str.w	r0, [r3, #5]
     864:	e00d      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     866:	6810      	ldr	r0, [r2, #0]
     868:	60d8      	str	r0, [r3, #12]
     86a:	e00a      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     86c:	7810      	ldrb	r0, [r2, #0]
     86e:	7098      	strb	r0, [r3, #2]
     870:	e007      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     872:	8810      	ldrh	r0, [r2, #0]
     874:	8258      	strh	r0, [r3, #18]
     876:	e004      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     878:	e00e      	b.n	898 <__z_interrupt_stack_SIZEOF+0x58>
     87a:	8811      	ldrh	r1, [r2, #0]
     87c:	29ff      	cmp	r1, #255	; 0xff
     87e:	d8cf      	bhi.n	820 <sdc_cfg_set+0x10>
     880:	7519      	strb	r1, [r3, #20]
     882:	2201      	movs	r2, #1
     884:	4908      	ldr	r1, [pc, #32]	; (8a8 <__z_interrupt_stack_SIZEOF+0x68>)
     886:	2000      	movs	r0, #0
     888:	f00b fe54 	bl	c534 <__udivmoddi4+0x2a0>
     88c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     890:	db04      	blt.n	89c <__z_interrupt_stack_SIZEOF+0x5c>
     892:	f06f 000b 	mvn.w	r0, #11
     896:	bd70      	pop	{r4, r5, r6, pc}
     898:	4628      	mov	r0, r5
     89a:	bd70      	pop	{r4, r5, r6, pc}
     89c:	2101      	movs	r1, #1
     89e:	70a1      	strb	r1, [r4, #2]
     8a0:	bd70      	pop	{r4, r5, r6, pc}
     8a2:	0000      	.short	0x0000
     8a4:	20000040 	.word	0x20000040
     8a8:	20001290 	.word	0x20001290

000008ac <sdc_disable>:
     8ac:	b510      	push	{r4, lr}
     8ae:	4c07      	ldr	r4, [pc, #28]	; (8cc <sdc_disable+0x20>)
     8b0:	7860      	ldrb	r0, [r4, #1]
     8b2:	b120      	cbz	r0, 8be <sdc_disable+0x12>
     8b4:	f006 fc52 	bl	715c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     8b8:	7820      	ldrb	r0, [r4, #0]
     8ba:	f00b fc0b 	bl	c0d4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     8be:	f000 fe4d 	bl	155c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     8c2:	f000 ff25 	bl	1710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     8c6:	2000      	movs	r0, #0
     8c8:	7060      	strb	r0, [r4, #1]
     8ca:	bd10      	pop	{r4, pc}
     8cc:	20000040 	.word	0x20000040

000008d0 <sdc_enable>:
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	460c      	mov	r4, r1
     8d4:	0005      	movs	r5, r0
     8d6:	d002      	beq.n	8de <sdc_enable+0xe>
     8d8:	b10c      	cbz	r4, 8de <sdc_enable+0xe>
     8da:	0760      	lsls	r0, r4, #29
     8dc:	d002      	beq.n	8e4 <sdc_enable+0x14>
     8de:	f06f 0015 	mvn.w	r0, #21
     8e2:	bd70      	pop	{r4, r5, r6, pc}
     8e4:	f000 f922 	bl	b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     8e8:	b1a8      	cbz	r0, 916 <__data_size+0x11>
     8ea:	4628      	mov	r0, r5
     8ec:	f00b fbb8 	bl	c060 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     8f0:	4d0a      	ldr	r5, [pc, #40]	; (91c <__data_size+0x17>)
     8f2:	2200      	movs	r2, #0
     8f4:	490a      	ldr	r1, [pc, #40]	; (920 <__data_size+0x1b>)
     8f6:	7028      	strb	r0, [r5, #0]
     8f8:	4620      	mov	r0, r4
     8fa:	f00b fe1b 	bl	c534 <__udivmoddi4+0x2a0>
     8fe:	f00f fbd6 	bl	100ae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     902:	2100      	movs	r1, #0
     904:	7828      	ldrb	r0, [r5, #0]
     906:	f006 fc13 	bl	7130 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     90a:	f7ff ff45 	bl	798 <ocrypto_mod_p256_sqr+0x30>
     90e:	2001      	movs	r0, #1
     910:	7068      	strb	r0, [r5, #1]
     912:	2000      	movs	r0, #0
     914:	bd70      	pop	{r4, r5, r6, pc}
     916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     91a:	bd70      	pop	{r4, r5, r6, pc}
     91c:	20000040 	.word	0x20000040
     920:	20001290 	.word	0x20001290

00000924 <sdc_init>:
     924:	b530      	push	{r4, r5, lr}
     926:	b089      	sub	sp, #36	; 0x24
     928:	0004      	movs	r4, r0
     92a:	d00c      	beq.n	946 <sdc_init+0x22>
     92c:	f00b fb40 	bl	bfb0 <mpsl_is_initialized>
     930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     934:	b120      	cbz	r0, 940 <sdc_init+0x1c>
     936:	f00b f9d3 	bl	bce0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     93a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     93e:	d905      	bls.n	94c <sdc_init+0x28>
     940:	4628      	mov	r0, r5
     942:	b009      	add	sp, #36	; 0x24
     944:	bd30      	pop	{r4, r5, pc}
     946:	f06f 0015 	mvn.w	r0, #21
     94a:	e7fa      	b.n	942 <sdc_init+0x1e>
     94c:	4d13      	ldr	r5, [pc, #76]	; (99c <sdc_init+0x78>)
     94e:	4814      	ldr	r0, [pc, #80]	; (9a0 <sdc_init+0x7c>)
     950:	606c      	str	r4, [r5, #4]
     952:	f000 fa07 	bl	d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     956:	2000      	movs	r0, #0
     958:	7068      	strb	r0, [r5, #1]
     95a:	70a8      	strb	r0, [r5, #2]
     95c:	4601      	mov	r1, r0
     95e:	2224      	movs	r2, #36	; 0x24
     960:	4668      	mov	r0, sp
     962:	f00f fe56 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     966:	2224      	movs	r2, #36	; 0x24
     968:	490e      	ldr	r1, [pc, #56]	; (9a4 <sdc_init+0x80>)
     96a:	4668      	mov	r0, sp
     96c:	f00f fdd7 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     970:	2224      	movs	r2, #36	; 0x24
     972:	4669      	mov	r1, sp
     974:	480c      	ldr	r0, [pc, #48]	; (9a8 <sdc_init+0x84>)
     976:	f00f fdd2 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     97a:	f3ef 8410 	mrs	r4, PRIMASK
     97e:	b672      	cpsid	i
     980:	f000 fdfa 	bl	1578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     984:	4809      	ldr	r0, [pc, #36]	; (9ac <sdc_init+0x88>)
     986:	f000 fecf 	bl	1728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     98a:	b118      	cbz	r0, 994 <sdc_init+0x70>
     98c:	21cb      	movs	r1, #203	; 0xcb
     98e:	2003      	movs	r0, #3
     990:	f000 f80e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     994:	b904      	cbnz	r4, 998 <sdc_init+0x74>
     996:	b662      	cpsie	i
     998:	2000      	movs	r0, #0
     99a:	e7d2      	b.n	942 <sdc_init+0x1e>
     99c:	20000040 	.word	0x20000040
     9a0:	00000799 	.word	0x00000799
     9a4:	00000abc 	.word	0x00000abc
     9a8:	20001290 	.word	0x20001290
     9ac:	00000b59 	.word	0x00000b59

000009b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     9b0:	b50e      	push	{r1, r2, r3, lr}
     9b2:	b672      	cpsid	i
     9b4:	4a15      	ldr	r2, [pc, #84]	; (a0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     9b6:	6855      	ldr	r5, [r2, #4]
     9b8:	b1dd      	cbz	r5, 9f2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     9ba:	2200      	movs	r2, #0
     9bc:	4603      	mov	r3, r0
     9be:	466e      	mov	r6, sp
     9c0:	240a      	movs	r4, #10
     9c2:	e003      	b.n	9cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     9c4:	fbb0 f0f4 	udiv	r0, r0, r4
     9c8:	1c52      	adds	r2, r2, #1
     9ca:	b2d2      	uxtb	r2, r2
     9cc:	2800      	cmp	r0, #0
     9ce:	d1f9      	bne.n	9c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     9d0:	54b0      	strb	r0, [r6, r2]
     9d2:	e00a      	b.n	9ea <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     9d4:	b2d8      	uxtb	r0, r3
     9d6:	fbb0 f7f4 	udiv	r7, r0, r4
     9da:	fbb3 f3f4 	udiv	r3, r3, r4
     9de:	fb04 0017 	mls	r0, r4, r7, r0
     9e2:	1e52      	subs	r2, r2, #1
     9e4:	b2d2      	uxtb	r2, r2
     9e6:	3030      	adds	r0, #48	; 0x30
     9e8:	54b0      	strb	r0, [r6, r2]
     9ea:	2a00      	cmp	r2, #0
     9ec:	d1f2      	bne.n	9d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     9ee:	4630      	mov	r0, r6
     9f0:	47a8      	blx	r5
     9f2:	f3bf 8f4f 	dsb	sy
     9f6:	4806      	ldr	r0, [pc, #24]	; (a10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     9f8:	6801      	ldr	r1, [r0, #0]
     9fa:	4a06      	ldr	r2, [pc, #24]	; (a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     9fc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     a00:	4311      	orrs	r1, r2
     a02:	6001      	str	r1, [r0, #0]
     a04:	f3bf 8f4f 	dsb	sy
     a08:	bf00      	nop
     a0a:	e7fd      	b.n	a08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     a0c:	20000040 	.word	0x20000040
     a10:	e000ed0c 	.word	0xe000ed0c
     a14:	05fa0004 	.word	0x05fa0004

00000a18 <sdc_support_adv>:
     a18:	4806      	ldr	r0, [pc, #24]	; (a34 <sdc_support_adv+0x1c>)
     a1a:	b510      	push	{r4, lr}
     a1c:	7881      	ldrb	r1, [r0, #2]
     a1e:	7840      	ldrb	r0, [r0, #1]
     a20:	4301      	orrs	r1, r0
     a22:	d002      	beq.n	a2a <sdc_support_adv+0x12>
     a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a28:	bd10      	pop	{r4, pc}
     a2a:	f006 fba7 	bl	717c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     a2e:	2000      	movs	r0, #0
     a30:	bd10      	pop	{r4, pc}
     a32:	0000      	.short	0x0000
     a34:	20000040 	.word	0x20000040

00000a38 <sdc_support_dle_peripheral>:
     a38:	4806      	ldr	r0, [pc, #24]	; (a54 <sdc_support_dle_peripheral+0x1c>)
     a3a:	b510      	push	{r4, lr}
     a3c:	7881      	ldrb	r1, [r0, #2]
     a3e:	7840      	ldrb	r0, [r0, #1]
     a40:	4301      	orrs	r1, r0
     a42:	d002      	beq.n	a4a <sdc_support_dle_peripheral+0x12>
     a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a48:	bd10      	pop	{r4, pc}
     a4a:	f006 f9bf 	bl	6dcc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
     a4e:	2000      	movs	r0, #0
     a50:	bd10      	pop	{r4, pc}
     a52:	0000      	.short	0x0000
     a54:	20000040 	.word	0x20000040

00000a58 <sdc_support_le_2m_phy>:
     a58:	4806      	ldr	r0, [pc, #24]	; (a74 <sdc_support_le_2m_phy+0x1c>)
     a5a:	b510      	push	{r4, lr}
     a5c:	7881      	ldrb	r1, [r0, #2]
     a5e:	7840      	ldrb	r0, [r0, #1]
     a60:	4301      	orrs	r1, r0
     a62:	d002      	beq.n	a6a <sdc_support_le_2m_phy+0x12>
     a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a68:	bd10      	pop	{r4, pc}
     a6a:	f00f f8bc 	bl	fbe6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     a6e:	2000      	movs	r0, #0
     a70:	bd10      	pop	{r4, pc}
     a72:	0000      	.short	0x0000
     a74:	20000040 	.word	0x20000040

00000a78 <sdc_support_peripheral>:
     a78:	4806      	ldr	r0, [pc, #24]	; (a94 <sdc_support_peripheral+0x1c>)
     a7a:	b510      	push	{r4, lr}
     a7c:	7881      	ldrb	r1, [r0, #2]
     a7e:	7840      	ldrb	r0, [r0, #1]
     a80:	4301      	orrs	r1, r0
     a82:	d002      	beq.n	a8a <sdc_support_peripheral+0x12>
     a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a88:	bd10      	pop	{r4, pc}
     a8a:	f006 fb89 	bl	71a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
     a8e:	2000      	movs	r0, #0
     a90:	bd10      	pop	{r4, pc}
     a92:	0000      	.short	0x0000
     a94:	20000040 	.word	0x20000040

00000a98 <sdc_support_phy_update_peripheral>:
     a98:	4806      	ldr	r0, [pc, #24]	; (ab4 <sdc_support_phy_update_peripheral+0x1c>)
     a9a:	b510      	push	{r4, lr}
     a9c:	7881      	ldrb	r1, [r0, #2]
     a9e:	7840      	ldrb	r0, [r0, #1]
     aa0:	4301      	orrs	r1, r0
     aa2:	d002      	beq.n	aaa <sdc_support_phy_update_peripheral+0x12>
     aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     aa8:	bd10      	pop	{r4, pc}
     aaa:	f00f f8b0 	bl	fc0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
     aae:	2000      	movs	r0, #0
     ab0:	bd10      	pop	{r4, pc}
     ab2:	0000      	.short	0x0000
     ab4:	20000040 	.word	0x20000040
     ab8:	00000001 	.word	0x00000001
     abc:	00010100 	.word	0x00010100
     ac0:	031b1b00 	.word	0x031b1b00
     ac4:	00000002 	.word	0x00000002
     ac8:	00001d4c 	.word	0x00001d4c
     acc:	001f0000 	.word	0x001f0000
     ad0:	00000008 	.word	0x00000008
	...
     ae0:	c12e7ee0 	.word	0xc12e7ee0
     ae4:	2385055e 	.word	0x2385055e
     ae8:	fadc1546 	.word	0xfadc1546
     aec:	707d298e 	.word	0x707d298e
     af0:	fca59310 	.word	0xfca59310

00000af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     af4:	4a05      	ldr	r2, [pc, #20]	; (b0c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     af6:	b510      	push	{r4, lr}
     af8:	6852      	ldr	r2, [r2, #4]
     afa:	b112      	cbz	r2, b02 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b00:	4710      	bx	r2
     b02:	2192      	movs	r1, #146	; 0x92
     b04:	2004      	movs	r0, #4
     b06:	f7ff ff53 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b0a:	0000      	.short	0x0000
     b0c:	200012b4 	.word	0x200012b4

00000b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     b10:	4a05      	ldr	r2, [pc, #20]	; (b28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     b12:	b510      	push	{r4, lr}
     b14:	6892      	ldr	r2, [r2, #8]
     b16:	b112      	cbz	r2, b1e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b1c:	4710      	bx	r2
     b1e:	2198      	movs	r1, #152	; 0x98
     b20:	2004      	movs	r0, #4
     b22:	f7ff ff45 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b26:	0000      	.short	0x0000
     b28:	200012b4 	.word	0x200012b4

00000b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b2c:	4805      	ldr	r0, [pc, #20]	; (b44 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b2e:	6801      	ldr	r1, [r0, #0]
     b30:	b129      	cbz	r1, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b32:	6841      	ldr	r1, [r0, #4]
     b34:	b119      	cbz	r1, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b36:	6880      	ldr	r0, [r0, #8]
     b38:	b108      	cbz	r0, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b3a:	2001      	movs	r0, #1
     b3c:	4770      	bx	lr
     b3e:	2000      	movs	r0, #0
     b40:	4770      	bx	lr
     b42:	0000      	.short	0x0000
     b44:	200012b4 	.word	0x200012b4

00000b48 <sdc_rand_source_register>:
     b48:	4902      	ldr	r1, [pc, #8]	; (b54 <sdc_rand_source_register+0xc>)
     b4a:	c80d      	ldmia	r0, {r0, r2, r3}
     b4c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     b50:	2000      	movs	r0, #0
     b52:	4770      	bx	lr
     b54:	200012b4 	.word	0x200012b4

00000b58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b5a:	4c12      	ldr	r4, [pc, #72]	; (ba4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     b5c:	2600      	movs	r6, #0
     b5e:	6825      	ldr	r5, [r4, #0]
     b60:	e011      	b.n	b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b62:	9800      	ldr	r0, [sp, #0]
     b64:	2802      	cmp	r0, #2
     b66:	d002      	beq.n	b6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     b68:	2803      	cmp	r0, #3
     b6a:	d10c      	bne.n	b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b6c:	e006      	b.n	b7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     b6e:	6820      	ldr	r0, [r4, #0]
     b70:	b110      	cbz	r0, b78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     b72:	2000      	movs	r0, #0
     b74:	6026      	str	r6, [r4, #0]
     b76:	e005      	b.n	b84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     b78:	2128      	movs	r1, #40	; 0x28
     b7a:	e00c      	b.n	b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     b7c:	6820      	ldr	r0, [r4, #0]
     b7e:	b168      	cbz	r0, b9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     b80:	2001      	movs	r0, #1
     b82:	6026      	str	r6, [r4, #0]
     b84:	47a8      	blx	r5
     b86:	4668      	mov	r0, sp
     b88:	f000 fd94 	bl	16b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     b8c:	2800      	cmp	r0, #0
     b8e:	d0e8      	beq.n	b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     b90:	2805      	cmp	r0, #5
     b92:	d005      	beq.n	ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     b94:	2135      	movs	r1, #53	; 0x35
     b96:	2004      	movs	r0, #4
     b98:	f7ff ff0a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9c:	212d      	movs	r1, #45	; 0x2d
     b9e:	e7fa      	b.n	b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ba2:	0000      	.short	0x0000
     ba4:	20000048 	.word	0x20000048

00000ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     ba8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     bac:	4e28      	ldr	r6, [pc, #160]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bae:	4605      	mov	r5, r0
     bb0:	1d00      	adds	r0, r0, #4
     bb2:	f106 0744 	add.w	r7, r6, #68	; 0x44
     bb6:	6030      	str	r0, [r6, #0]
     bb8:	7838      	ldrb	r0, [r7, #0]
     bba:	b158      	cbz	r0, bd4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     bbc:	78ba      	ldrb	r2, [r7, #2]
     bbe:	463c      	mov	r4, r7
     bc0:	1c79      	adds	r1, r7, #1
     bc2:	4628      	mov	r0, r5
     bc4:	1c92      	adds	r2, r2, #2
     bc6:	f00f fcaa 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     bca:	2000      	movs	r0, #0
     bcc:	7020      	strb	r0, [r4, #0]
     bce:	2004      	movs	r0, #4
     bd0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     bd4:	481e      	ldr	r0, [pc, #120]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bd6:	f001 fe5f 	bl	2898 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     bda:	4604      	mov	r4, r0
     bdc:	2802      	cmp	r0, #2
     bde:	d004      	beq.n	bea <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     be0:	2c04      	cmp	r4, #4
     be2:	d007      	beq.n	bf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     be4:	2c08      	cmp	r4, #8
     be6:	d02c      	beq.n	c42 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
     be8:	e02f      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bea:	4919      	ldr	r1, [pc, #100]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bec:	4628      	mov	r0, r5
     bee:	f00b fd49 	bl	c684 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     bf2:	e02a      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bf4:	7830      	ldrb	r0, [r6, #0]
     bf6:	2808      	cmp	r0, #8
     bf8:	d104      	bne.n	c04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
     bfa:	2105      	movs	r1, #5
     bfc:	203e      	movs	r0, #62	; 0x3e
     bfe:	f00b fd13 	bl	c628 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c02:	b150      	cbz	r0, c1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
     c04:	4912      	ldr	r1, [pc, #72]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c06:	4628      	mov	r0, r5
     c08:	f00b fda1 	bl	c74e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c0c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     c10:	d30e      	bcc.n	c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
     c12:	21c7      	movs	r1, #199	; 0xc7
     c14:	2008      	movs	r0, #8
     c16:	f7ff fecb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c1a:	88b0      	ldrh	r0, [r6, #4]
     c1c:	f8ad 0000 	strh.w	r0, [sp]
     c20:	a901      	add	r1, sp, #4
     c22:	4668      	mov	r0, sp
     c24:	f00b ffff 	bl	cc26 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     c28:	2800      	cmp	r0, #0
     c2a:	d0c5      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c2c:	21a8      	movs	r1, #168	; 0xa8
     c2e:	e7f1      	b.n	c14 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
     c30:	2800      	cmp	r0, #0
     c32:	d0c1      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c34:	78a9      	ldrb	r1, [r5, #2]
     c36:	7828      	ldrb	r0, [r5, #0]
     c38:	f00b fcf6 	bl	c628 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c3c:	2800      	cmp	r0, #0
     c3e:	d0bb      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c40:	e003      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     c42:	4903      	ldr	r1, [pc, #12]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c44:	4628      	mov	r0, r5
     c46:	f00b fd4b 	bl	c6e0 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c4a:	4620      	mov	r0, r4
     c4c:	e7c0      	b.n	bd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c4e:	0000      	.short	0x0000
     c50:	200012c0 	.word	0x200012c0
     c54:	b570      	push	{r4, r5, r6, lr}
     c56:	780a      	ldrb	r2, [r1, #0]
     c58:	7082      	strb	r2, [r0, #2]
     c5a:	b33a      	cbz	r2, cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c5c:	2a01      	cmp	r2, #1
     c5e:	d825      	bhi.n	cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c60:	2313      	movs	r3, #19
     c62:	7003      	strb	r3, [r0, #0]
     c64:	2300      	movs	r3, #0
     c66:	e00a      	b.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
     c68:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     c6c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     c70:	78a6      	ldrb	r6, [r4, #2]
     c72:	70ee      	strb	r6, [r5, #3]
     c74:	8864      	ldrh	r4, [r4, #2]
     c76:	0a24      	lsrs	r4, r4, #8
     c78:	1c5b      	adds	r3, r3, #1
     c7a:	712c      	strb	r4, [r5, #4]
     c7c:	b2db      	uxtb	r3, r3
     c7e:	4293      	cmp	r3, r2
     c80:	d3f2      	bcc.n	c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
     c82:	2300      	movs	r3, #0
     c84:	e00b      	b.n	c9e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
     c86:	bf00      	nop
     c88:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     c8c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     c90:	792e      	ldrb	r6, [r5, #4]
     c92:	7166      	strb	r6, [r4, #5]
     c94:	88ad      	ldrh	r5, [r5, #4]
     c96:	0a2d      	lsrs	r5, r5, #8
     c98:	1c5b      	adds	r3, r3, #1
     c9a:	71a5      	strb	r5, [r4, #6]
     c9c:	b2db      	uxtb	r3, r3
     c9e:	4293      	cmp	r3, r2
     ca0:	d3f2      	bcc.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
     ca2:	2101      	movs	r1, #1
     ca4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     ca8:	b2c0      	uxtb	r0, r0
     caa:	bd70      	pop	{r4, r5, r6, pc}
     cac:	2000      	movs	r0, #0
     cae:	bd70      	pop	{r4, r5, r6, pc}

00000cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     cb0:	2840      	cmp	r0, #64	; 0x40
     cb2:	d203      	bcs.n	cbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     cb4:	1e40      	subs	r0, r0, #1
     cb6:	b2c1      	uxtb	r1, r0
     cb8:	4805      	ldr	r0, [pc, #20]	; (cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cba:	e005      	b.n	cc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     cbc:	28ff      	cmp	r0, #255	; 0xff
     cbe:	d005      	beq.n	ccc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     cc0:	3840      	subs	r0, #64	; 0x40
     cc2:	b2c1      	uxtb	r1, r0
     cc4:	4802      	ldr	r0, [pc, #8]	; (cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cc6:	3008      	adds	r0, #8
     cc8:	f00b bf40 	b.w	cb4c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     ccc:	2001      	movs	r0, #1
     cce:	4770      	bx	lr
     cd0:	2000004c 	.word	0x2000004c

00000cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     cd4:	1e40      	subs	r0, r0, #1
     cd6:	b2c1      	uxtb	r1, r0
     cd8:	4801      	ldr	r0, [pc, #4]	; (ce0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     cda:	f00b bf37 	b.w	cb4c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     cde:	0000      	.short	0x0000
     ce0:	2000005c 	.word	0x2000005c

00000ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     ce4:	4902      	ldr	r1, [pc, #8]	; (cf0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     ce6:	6802      	ldr	r2, [r0, #0]
     ce8:	610a      	str	r2, [r1, #16]
     cea:	6840      	ldr	r0, [r0, #4]
     cec:	6148      	str	r0, [r1, #20]
     cee:	4770      	bx	lr
     cf0:	2000004c 	.word	0x2000004c

00000cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     cf4:	4905      	ldr	r1, [pc, #20]	; (d0c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     cf6:	6802      	ldr	r2, [r0, #0]
     cf8:	600a      	str	r2, [r1, #0]
     cfa:	6840      	ldr	r0, [r0, #4]
     cfc:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     d00:	600a      	str	r2, [r1, #0]
     d02:	4a03      	ldr	r2, [pc, #12]	; (d10 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d04:	4310      	orrs	r0, r2
     d06:	6048      	str	r0, [r1, #4]
     d08:	4770      	bx	lr
     d0a:	0000      	.short	0x0000
     d0c:	2000004c 	.word	0x2000004c
     d10:	024007f8 	.word	0x024007f8

00000d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     d14:	4902      	ldr	r1, [pc, #8]	; (d20 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     d16:	6802      	ldr	r2, [r0, #0]
     d18:	608a      	str	r2, [r1, #8]
     d1a:	6840      	ldr	r0, [r0, #4]
     d1c:	60c8      	str	r0, [r1, #12]
     d1e:	4770      	bx	lr
     d20:	2000004c 	.word	0x2000004c

00000d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d24:	4807      	ldr	r0, [pc, #28]	; (d44 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     d2a:	2200      	movs	r2, #0
     d2c:	6001      	str	r1, [r0, #0]
     d2e:	0cc9      	lsrs	r1, r1, #19
     d30:	6041      	str	r1, [r0, #4]
     d32:	f100 0108 	add.w	r1, r0, #8
     d36:	201f      	movs	r0, #31
     d38:	600a      	str	r2, [r1, #0]
     d3a:	604a      	str	r2, [r1, #4]
     d3c:	3108      	adds	r1, #8
     d3e:	e9c1 0200 	strd	r0, r2, [r1]
     d42:	4770      	bx	lr
     d44:	2000004c 	.word	0x2000004c

00000d48 <sdc_hci_cmd_cb_reset>:
     d48:	b510      	push	{r4, lr}
     d4a:	f7ff ffeb 	bl	d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d4e:	f00e febe 	bl	face <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d52:	4604      	mov	r4, r0
     d54:	4802      	ldr	r0, [pc, #8]	; (d60 <sdc_hci_cmd_cb_reset+0x18>)
     d56:	6800      	ldr	r0, [r0, #0]
     d58:	b100      	cbz	r0, d5c <sdc_hci_cmd_cb_reset+0x14>
     d5a:	4780      	blx	r0
     d5c:	4620      	mov	r0, r4
     d5e:	bd10      	pop	{r4, pc}
     d60:	20000064 	.word	0x20000064

00000d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     d64:	4901      	ldr	r1, [pc, #4]	; (d6c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     d66:	6008      	str	r0, [r1, #0]
     d68:	4770      	bx	lr
     d6a:	0000      	.short	0x0000
     d6c:	20000064 	.word	0x20000064

00000d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d74:	4604      	mov	r4, r0
     d76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     d7a:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     d7e:	4d1f      	ldr	r5, [pc, #124]	; (dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d80:	4e1e      	ldr	r6, [pc, #120]	; (dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d82:	3d10      	subs	r5, #16
     d84:	2210      	movs	r2, #16
     d86:	2100      	movs	r1, #0
     d88:	4620      	mov	r0, r4
     d8a:	f00f fc42 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d8e:	2210      	movs	r2, #16
     d90:	2100      	movs	r1, #0
     d92:	f104 0010 	add.w	r0, r4, #16
     d96:	f00f fc3c 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d9a:	6828      	ldr	r0, [r5, #0]
     d9c:	1c40      	adds	r0, r0, #1
     d9e:	d108      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     da0:	6868      	ldr	r0, [r5, #4]
     da2:	1c40      	adds	r0, r0, #1
     da4:	d105      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     da6:	68a8      	ldr	r0, [r5, #8]
     da8:	1c40      	adds	r0, r0, #1
     daa:	d102      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     dac:	68e8      	ldr	r0, [r5, #12]
     dae:	1c40      	adds	r0, r0, #1
     db0:	d007      	beq.n	dc2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     db2:	6828      	ldr	r0, [r5, #0]
     db4:	686a      	ldr	r2, [r5, #4]
     db6:	68a9      	ldr	r1, [r5, #8]
     db8:	68eb      	ldr	r3, [r5, #12]
     dba:	6120      	str	r0, [r4, #16]
     dbc:	6162      	str	r2, [r4, #20]
     dbe:	61a1      	str	r1, [r4, #24]
     dc0:	61e3      	str	r3, [r4, #28]
     dc2:	2000      	movs	r0, #0
     dc4:	f000 fd84 	bl	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     dc8:	4387      	bics	r7, r0
     dca:	07f8      	lsls	r0, r7, #31
     dcc:	d113      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     dce:	6830      	ldr	r0, [r6, #0]
     dd0:	1c40      	adds	r0, r0, #1
     dd2:	d108      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dd4:	6870      	ldr	r0, [r6, #4]
     dd6:	1c40      	adds	r0, r0, #1
     dd8:	d105      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dda:	68b0      	ldr	r0, [r6, #8]
     ddc:	1c40      	adds	r0, r0, #1
     dde:	d102      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     de0:	68f0      	ldr	r0, [r6, #12]
     de2:	1c40      	adds	r0, r0, #1
     de4:	d007      	beq.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     de6:	6832      	ldr	r2, [r6, #0]
     de8:	6870      	ldr	r0, [r6, #4]
     dea:	68b1      	ldr	r1, [r6, #8]
     dec:	68f3      	ldr	r3, [r6, #12]
     dee:	6022      	str	r2, [r4, #0]
     df0:	6060      	str	r0, [r4, #4]
     df2:	60a1      	str	r1, [r4, #8]
     df4:	60e3      	str	r3, [r4, #12]
     df6:	2000      	movs	r0, #0
     df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dfc:	10000090 	.word	0x10000090

00000e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     e00:	b538      	push	{r3, r4, r5, lr}
     e02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     e06:	4604      	mov	r4, r0
     e08:	4822      	ldr	r0, [pc, #136]	; (e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e0a:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     e0e:	4d21      	ldr	r5, [pc, #132]	; (e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e10:	6802      	ldr	r2, [r0, #0]
     e12:	3d14      	subs	r5, #20
     e14:	1c52      	adds	r2, r2, #1
     e16:	d104      	bne.n	e22 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     e18:	6842      	ldr	r2, [r0, #4]
     e1a:	43d2      	mvns	r2, r2
     e1c:	0412      	lsls	r2, r2, #16
     e1e:	0c12      	lsrs	r2, r2, #16
     e20:	d035      	beq.n	e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e22:	07c9      	lsls	r1, r1, #31
     e24:	d033      	beq.n	e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e26:	6801      	ldr	r1, [r0, #0]
     e28:	6840      	ldr	r0, [r0, #4]
     e2a:	f8ad 0000 	strh.w	r0, [sp]
     e2e:	f8c4 1001 	str.w	r1, [r4, #1]
     e32:	f8bd 0000 	ldrh.w	r0, [sp]
     e36:	f8a4 0005 	strh.w	r0, [r4, #5]
     e3a:	79a0      	ldrb	r0, [r4, #6]
     e3c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     e40:	71a0      	strb	r0, [r4, #6]
     e42:	6828      	ldr	r0, [r5, #0]
     e44:	1c40      	adds	r0, r0, #1
     e46:	d00c      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e48:	6868      	ldr	r0, [r5, #4]
     e4a:	1c40      	adds	r0, r0, #1
     e4c:	d009      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e4e:	68a8      	ldr	r0, [r5, #8]
     e50:	1c40      	adds	r0, r0, #1
     e52:	d006      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e54:	68e8      	ldr	r0, [r5, #12]
     e56:	1c40      	adds	r0, r0, #1
     e58:	d003      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e5a:	2000      	movs	r0, #0
     e5c:	f000 fd38 	bl	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e60:	b140      	cbz	r0, e74 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     e62:	2210      	movs	r2, #16
     e64:	2100      	movs	r1, #0
     e66:	1de0      	adds	r0, r4, #7
     e68:	f00f fbd3 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e6c:	2001      	movs	r0, #1
     e6e:	7020      	strb	r0, [r4, #0]
     e70:	2000      	movs	r0, #0
     e72:	bd38      	pop	{r3, r4, r5, pc}
     e74:	682a      	ldr	r2, [r5, #0]
     e76:	6869      	ldr	r1, [r5, #4]
     e78:	68a8      	ldr	r0, [r5, #8]
     e7a:	68eb      	ldr	r3, [r5, #12]
     e7c:	f8c4 2007 	str.w	r2, [r4, #7]
     e80:	f8c4 100b 	str.w	r1, [r4, #11]
     e84:	f8c4 000f 	str.w	r0, [r4, #15]
     e88:	f8c4 3013 	str.w	r3, [r4, #19]
     e8c:	e7ee      	b.n	e6c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     e8e:	2000      	movs	r0, #0
     e90:	e7ed      	b.n	e6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     e92:	0000      	.short	0x0000
     e94:	100000a4 	.word	0x100000a4

00000e98 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e98:	2102      	movs	r1, #2
     e9a:	8001      	strh	r1, [r0, #0]
     e9c:	8041      	strh	r1, [r0, #2]
     e9e:	2100      	movs	r1, #0
     ea0:	7101      	strb	r1, [r0, #4]
     ea2:	21e0      	movs	r1, #224	; 0xe0
     ea4:	7141      	strb	r1, [r0, #5]
     ea6:	f642 617e 	movw	r1, #11902	; 0x2e7e
     eaa:	80c1      	strh	r1, [r0, #6]
     eac:	4901      	ldr	r1, [pc, #4]	; (eb4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     eae:	6081      	str	r1, [r0, #8]
     eb0:	2000      	movs	r0, #0
     eb2:	4770      	bx	lr
     eb4:	85055ec1 	.word	0x85055ec1
     eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ebc:	798c      	ldrb	r4, [r1, #6]
     ebe:	f8dd e018 	ldr.w	lr, [sp, #24]
     ec2:	2c08      	cmp	r4, #8
     ec4:	d901      	bls.n	eca <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     ec6:	21db      	movs	r1, #219	; 0xdb
     ec8:	e02c      	b.n	f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     eca:	f8df c0a4 	ldr.w	ip, [pc, #164]	; f70 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
     ece:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     ed2:	b10d      	cbz	r5, ed8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     ed4:	21dc      	movs	r1, #220	; 0xdc
     ed6:	e025      	b.n	f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     ed8:	79cd      	ldrb	r5, [r1, #7]
     eda:	2d00      	cmp	r5, #0
     edc:	d045      	beq.n	f6a <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
     ede:	006f      	lsls	r7, r5, #1
     ee0:	370a      	adds	r7, #10
     ee2:	681d      	ldr	r5, [r3, #0]
     ee4:	2c02      	cmp	r4, #2
     ee6:	443d      	add	r5, r7
     ee8:	d901      	bls.n	eee <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     eea:	4626      	mov	r6, r4
     eec:	e001      	b.n	ef2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     eee:	f04f 0602 	mov.w	r6, #2
     ef2:	442e      	add	r6, r5
     ef4:	f1a6 0601 	sub.w	r6, r6, #1
     ef8:	d901      	bls.n	efe <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     efa:	4625      	mov	r5, r4
     efc:	e001      	b.n	f02 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     efe:	f04f 0502 	mov.w	r5, #2
     f02:	f1a5 0501 	sub.w	r5, r5, #1
     f06:	ea26 0605 	bic.w	r6, r6, r5
     f0a:	888d      	ldrh	r5, [r1, #4]
     f0c:	4425      	add	r5, r4
     f0e:	f1a4 0401 	sub.w	r4, r4, #1
     f12:	f1a5 0501 	sub.w	r5, r5, #1
     f16:	ea25 0504 	bic.w	r5, r5, r4
     f1a:	f64f 74ff 	movw	r4, #65535	; 0xffff
     f1e:	42a5      	cmp	r5, r4
     f20:	d303      	bcc.n	f2a <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
     f22:	21e7      	movs	r1, #231	; 0xe7
     f24:	2017      	movs	r0, #23
     f26:	f7ff fd43 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f2a:	f1be 0f00 	cmp.w	lr, #0
     f2e:	d118      	bne.n	f62 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
     f30:	1bf4      	subs	r4, r6, r7
     f32:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     f36:	8025      	strh	r5, [r4, #0]
     f38:	79c8      	ldrb	r0, [r1, #7]
     f3a:	70a0      	strb	r0, [r4, #2]
     f3c:	2001      	movs	r0, #1
     f3e:	70e0      	strb	r0, [r4, #3]
     f40:	7122      	strb	r2, [r4, #4]
     f42:	6808      	ldr	r0, [r1, #0]
     f44:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     f48:	0c00      	lsrs	r0, r0, #16
     f4a:	80e0      	strh	r0, [r4, #6]
     f4c:	8808      	ldrh	r0, [r1, #0]
     f4e:	8120      	strh	r0, [r4, #8]
     f50:	2000      	movs	r0, #0
     f52:	e003      	b.n	f5c <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
     f54:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     f58:	1c40      	adds	r0, r0, #1
     f5a:	817a      	strh	r2, [r7, #10]
     f5c:	79cf      	ldrb	r7, [r1, #7]
     f5e:	4287      	cmp	r7, r0
     f60:	d8f8      	bhi.n	f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
     f62:	79c8      	ldrb	r0, [r1, #7]
     f64:	fb00 6005 	mla	r0, r0, r5, r6
     f68:	6018      	str	r0, [r3, #0]
     f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f6e:	0000      	.short	0x0000
     f70:	20000068 	.word	0x20000068
     f74:	b530      	push	{r4, r5, lr}
     f76:	4603      	mov	r3, r0
     f78:	ea4f 0002 	mov.w	r0, r2
     f7c:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     f80:	8964      	ldrh	r4, [r4, #10]
     f82:	428c      	cmp	r4, r1
     f84:	d009      	beq.n	f9a <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
     f86:	789c      	ldrb	r4, [r3, #2]
     f88:	1c40      	adds	r0, r0, #1
     f8a:	fbb0 f5f4 	udiv	r5, r0, r4
     f8e:	fb04 0015 	mls	r0, r4, r5, r0
     f92:	b2c0      	uxtb	r0, r0
     f94:	4290      	cmp	r0, r2
     f96:	d1f1      	bne.n	f7c <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
     f98:	20ff      	movs	r0, #255	; 0xff
     f9a:	bd30      	pop	{r4, r5, pc}

00000f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	4605      	mov	r5, r0
     fa0:	4819      	ldr	r0, [pc, #100]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fa2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     fa6:	b364      	cbz	r4, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     fa8:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
     fac:	d304      	bcc.n	fb8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
     fae:	f240 2125 	movw	r1, #549	; 0x225
     fb2:	2017      	movs	r0, #23
     fb4:	f7ff fcfc 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fb8:	4629      	mov	r1, r5
     fba:	4620      	mov	r0, r4
     fbc:	f00c f8d4 	bl	d168 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     fc0:	4601      	mov	r1, r0
     fc2:	28ff      	cmp	r0, #255	; 0xff
     fc4:	d004      	beq.n	fd0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
     fc6:	4620      	mov	r0, r4
     fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fcc:	f00c b8e0 	b.w	d190 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     fd0:	78a0      	ldrb	r0, [r4, #2]
     fd2:	fbb5 f1f0 	udiv	r1, r5, r0
     fd6:	fb00 5011 	mls	r0, r0, r1, r5
     fda:	b2c6      	uxtb	r6, r0
     fdc:	4632      	mov	r2, r6
     fde:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     fe2:	4620      	mov	r0, r4
     fe4:	f7ff ffc6 	bl	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
     fe8:	4602      	mov	r2, r0
     fea:	28ff      	cmp	r0, #255	; 0xff
     fec:	d009      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     fee:	42b2      	cmp	r2, r6
     ff0:	d001      	beq.n	ff6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
     ff2:	2000      	movs	r0, #0
     ff4:	70e0      	strb	r0, [r4, #3]
     ff6:	4629      	mov	r1, r5
     ff8:	4620      	mov	r0, r4
     ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     ffe:	f00c b8ad 	b.w	d15c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1002:	2000      	movs	r0, #0
    1004:	bd70      	pop	{r4, r5, r6, pc}
    1006:	0000      	.short	0x0000
    1008:	20000068 	.word	0x20000068

0000100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    100c:	4a08      	ldr	r2, [pc, #32]	; (1030 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    100e:	b510      	push	{r4, lr}
    1010:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    1014:	4601      	mov	r1, r0
    1016:	4620      	mov	r0, r4
    1018:	f00c f8a6 	bl	d168 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    101c:	4601      	mov	r1, r0
    101e:	28ff      	cmp	r0, #255	; 0xff
    1020:	d004      	beq.n	102c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    1022:	4620      	mov	r0, r4
    1024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1028:	f00c b8b2 	b.w	d190 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    102c:	2000      	movs	r0, #0
    102e:	bd10      	pop	{r4, pc}
    1030:	20000068 	.word	0x20000068

00001034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1034:	b5f0      	push	{r4, r5, r6, r7, lr}
    1036:	b089      	sub	sp, #36	; 0x24
    1038:	0004      	movs	r4, r0
    103a:	460e      	mov	r6, r1
    103c:	9406      	str	r4, [sp, #24]
    103e:	d007      	beq.n	1050 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    1040:	2500      	movs	r5, #0
    1042:	0760      	lsls	r0, r4, #29
    1044:	d006      	beq.n	1054 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    1046:	f240 1119 	movw	r1, #281	; 0x119
    104a:	2017      	movs	r0, #23
    104c:	f7ff fcb0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1050:	2501      	movs	r5, #1
    1052:	e7f6      	b.n	1042 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1054:	4814      	ldr	r0, [pc, #80]	; (10a8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    1056:	2200      	movs	r2, #0
    1058:	4f14      	ldr	r7, [pc, #80]	; (10ac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    105a:	6002      	str	r2, [r0, #0]
    105c:	6042      	str	r2, [r0, #4]
    105e:	e9d7 1000 	ldrd	r1, r0, [r7]
    1062:	f896 c000 	ldrb.w	ip, [r6]
    1066:	68bb      	ldr	r3, [r7, #8]
    1068:	f36c 601f 	bfi	r0, ip, #24, #8
    106c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1070:	e9cd 5100 	strd	r5, r1, [sp]
    1074:	ab06      	add	r3, sp, #24
    1076:	a901      	add	r1, sp, #4
    1078:	4610      	mov	r0, r2
    107a:	f7ff ff1d 	bl	eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    107e:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    1082:	7873      	ldrb	r3, [r6, #1]
    1084:	697a      	ldr	r2, [r7, #20]
    1086:	f363 601f 	bfi	r0, r3, #24, #8
    108a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    108e:	e9cd 5100 	strd	r5, r1, [sp]
    1092:	ab06      	add	r3, sp, #24
    1094:	2200      	movs	r2, #0
    1096:	a901      	add	r1, sp, #4
    1098:	2001      	movs	r0, #1
    109a:	f7ff ff0d 	bl	eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    109e:	9806      	ldr	r0, [sp, #24]
    10a0:	b009      	add	sp, #36	; 0x24
    10a2:	1b00      	subs	r0, r0, r4
    10a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10a6:	0000      	.short	0x0000
    10a8:	20000068 	.word	0x20000068
    10ac:	0000119c 	.word	0x0000119c

000010b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    10b0:	b510      	push	{r4, lr}
    10b2:	4604      	mov	r4, r0
    10b4:	7980      	ldrb	r0, [r0, #6]
    10b6:	490e      	ldr	r1, [pc, #56]	; (10f0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    10b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    10bc:	b1a8      	cbz	r0, 10ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10be:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    10c2:	79e1      	ldrb	r1, [r4, #7]
    10c4:	7882      	ldrb	r2, [r0, #2]
    10c6:	4291      	cmp	r1, r2
    10c8:	d20f      	bcs.n	10ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10ca:	1c4a      	adds	r2, r1, #1
    10cc:	71e2      	strb	r2, [r4, #7]
    10ce:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10d2:	8952      	ldrh	r2, [r2, #10]
    10d4:	429a      	cmp	r2, r3
    10d6:	d0f4      	beq.n	10c2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    10d8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10dc:	8952      	ldrh	r2, [r2, #10]
    10de:	80a2      	strh	r2, [r4, #4]
    10e0:	f00c f856 	bl	d190 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10e4:	6020      	str	r0, [r4, #0]
    10e6:	2000      	movs	r0, #0
    10e8:	bd10      	pop	{r4, pc}
    10ea:	2005      	movs	r0, #5
    10ec:	bd10      	pop	{r4, pc}
    10ee:	0000      	.short	0x0000
    10f0:	20000068 	.word	0x20000068

000010f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    10f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10f8:	4607      	mov	r7, r0
    10fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    10fe:	8038      	strh	r0, [r7, #0]
    1100:	4812      	ldr	r0, [pc, #72]	; (114c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    1102:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    1106:	b1ec      	cbz	r4, 1144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1108:	78a5      	ldrb	r5, [r4, #2]
    110a:	7920      	ldrb	r0, [r4, #4]
    110c:	fbb0 f1f5 	udiv	r1, r0, r5
    1110:	fb05 0611 	mls	r6, r5, r1, r0
    1114:	4632      	mov	r2, r6
    1116:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    111a:	4620      	mov	r0, r4
    111c:	f7ff ff2a 	bl	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    1120:	4602      	mov	r2, r0
    1122:	28ff      	cmp	r0, #255	; 0xff
    1124:	d00e      	beq.n	1144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1126:	1ba8      	subs	r0, r5, r6
    1128:	4410      	add	r0, r2
    112a:	fbb0 f1f5 	udiv	r1, r0, r5
    112e:	fb05 0011 	mls	r0, r5, r1, r0
    1132:	7921      	ldrb	r1, [r4, #4]
    1134:	4408      	add	r0, r1
    1136:	b281      	uxth	r1, r0
    1138:	8039      	strh	r1, [r7, #0]
    113a:	4620      	mov	r0, r4
    113c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1140:	f00c b80c 	b.w	d15c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1144:	2000      	movs	r0, #0
    1146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    114a:	0000      	.short	0x0000
    114c:	20000068 	.word	0x20000068

00001150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1154:	4606      	mov	r6, r0
    1156:	4810      	ldr	r0, [pc, #64]	; (1198 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1158:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    115c:	4631      	mov	r1, r6
    115e:	4628      	mov	r0, r5
    1160:	f00c f802 	bl	d168 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1164:	4604      	mov	r4, r0
    1166:	28ff      	cmp	r0, #255	; 0xff
    1168:	d012      	beq.n	1190 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    116a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    116e:	4621      	mov	r1, r4
    1170:	ea4f 4730 	mov.w	r7, r0, ror #16
    1174:	4628      	mov	r0, r5
    1176:	f00c f80b 	bl	d190 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    117a:	4601      	mov	r1, r0
    117c:	4630      	mov	r0, r6
    117e:	47b8      	blx	r7
    1180:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1184:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    1188:	8148      	strh	r0, [r1, #10]
    118a:	2000      	movs	r0, #0
    118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1190:	f243 0002 	movw	r0, #12290	; 0x3002
    1194:	e7fa      	b.n	118c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    1196:	0000      	.short	0x0000
    1198:	20000068 	.word	0x20000068
    119c:	0000ef83 	.word	0x0000ef83
    11a0:	000802f8 	.word	0x000802f8
    11a4:	00000000 	.word	0x00000000
    11a8:	0000e559 	.word	0x0000e559
    11ac:	00080118 	.word	0x00080118
    11b0:	00000000 	.word	0x00000000

000011b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    11b4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b8:	4c24      	ldr	r4, [pc, #144]	; (124c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    11ba:	4606      	mov	r6, r0
    11bc:	b081      	sub	sp, #4
    11be:	6820      	ldr	r0, [r4, #0]
    11c0:	469a      	mov	sl, r3
    11c2:	4693      	mov	fp, r2
    11c4:	b158      	cbz	r0, 11de <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    11c6:	7a01      	ldrb	r1, [r0, #8]
    11c8:	42b1      	cmp	r1, r6
    11ca:	d903      	bls.n	11d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    11cc:	6840      	ldr	r0, [r0, #4]
    11ce:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    11d2:	b140      	cbz	r0, 11e6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    11d4:	f243 0002 	movw	r0, #12290	; 0x3002
    11d8:	b005      	add	sp, #20
    11da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11de:	21a5      	movs	r1, #165	; 0xa5
    11e0:	2018      	movs	r0, #24
    11e2:	f7ff fbe5 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11e6:	4619      	mov	r1, r3
    11e8:	9802      	ldr	r0, [sp, #8]
    11ea:	f00c f80c 	bl	d206 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    11ee:	4680      	mov	r8, r0
    11f0:	4658      	mov	r0, fp
    11f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    11f4:	f00b fffd 	bl	d1f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    11f8:	4605      	mov	r5, r0
    11fa:	eb08 0005 	add.w	r0, r8, r5
    11fe:	1d00      	adds	r0, r0, #4
    1200:	b287      	uxth	r7, r0
    1202:	6820      	ldr	r0, [r4, #0]
    1204:	46a1      	mov	r9, r4
    1206:	4639      	mov	r1, r7
    1208:	6800      	ldr	r0, [r0, #0]
    120a:	f00b ff42 	bl	d092 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    120e:	0004      	movs	r4, r0
    1210:	d01a      	beq.n	1248 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    1212:	8067      	strh	r7, [r4, #2]
    1214:	8025      	strh	r5, [r4, #0]
    1216:	4629      	mov	r1, r5
    1218:	1d20      	adds	r0, r4, #4
    121a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    121c:	4607      	mov	r7, r0
    121e:	465a      	mov	r2, fp
    1220:	2309      	movs	r3, #9
    1222:	9500      	str	r5, [sp, #0]
    1224:	f00b feaf 	bl	cf86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1228:	8820      	ldrh	r0, [r4, #0]
    122a:	4641      	mov	r1, r8
    122c:	4438      	add	r0, r7
    122e:	230a      	movs	r3, #10
    1230:	9a02      	ldr	r2, [sp, #8]
    1232:	f8cd a000 	str.w	sl, [sp]
    1236:	f00b fea6 	bl	cf86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    123a:	f8d9 0000 	ldr.w	r0, [r9]
    123e:	6840      	ldr	r0, [r0, #4]
    1240:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1244:	2000      	movs	r0, #0
    1246:	e7c7      	b.n	11d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1248:	2004      	movs	r0, #4
    124a:	e7c5      	b.n	11d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    124c:	20000070 	.word	0x20000070

00001250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	4c14      	ldr	r4, [pc, #80]	; (12a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1254:	6823      	ldr	r3, [r4, #0]
    1256:	b18b      	cbz	r3, 127c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1258:	7a19      	ldrb	r1, [r3, #8]
    125a:	4281      	cmp	r1, r0
    125c:	d912      	bls.n	1284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    125e:	685a      	ldr	r2, [r3, #4]
    1260:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1264:	b171      	cbz	r1, 1284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1266:	2500      	movs	r5, #0
    1268:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    126c:	884a      	ldrh	r2, [r1, #2]
    126e:	6818      	ldr	r0, [r3, #0]
    1270:	f00b ff67 	bl	d142 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1274:	6821      	ldr	r1, [r4, #0]
    1276:	2000      	movs	r0, #0
    1278:	7a0a      	ldrb	r2, [r1, #8]
    127a:	e00c      	b.n	1296 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    127c:	21c6      	movs	r1, #198	; 0xc6
    127e:	2018      	movs	r0, #24
    1280:	f7ff fb96 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1284:	f243 0002 	movw	r0, #12290	; 0x3002
    1288:	bd70      	pop	{r4, r5, r6, pc}
    128a:	684b      	ldr	r3, [r1, #4]
    128c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1290:	b933      	cbnz	r3, 12a0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1292:	1c40      	adds	r0, r0, #1
    1294:	b2c0      	uxtb	r0, r0
    1296:	4282      	cmp	r2, r0
    1298:	d8f7      	bhi.n	128a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    129a:	6808      	ldr	r0, [r1, #0]
    129c:	f00b ff46 	bl	d12c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    12a0:	2000      	movs	r0, #0
    12a2:	bd70      	pop	{r4, r5, r6, pc}
    12a4:	20000070 	.word	0x20000070

000012a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    12a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12ac:	460d      	mov	r5, r1
    12ae:	0004      	movs	r4, r0
    12b0:	4690      	mov	r8, r2
    12b2:	f04f 0600 	mov.w	r6, #0
    12b6:	d006      	beq.n	12c6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    12b8:	2700      	movs	r7, #0
    12ba:	07a0      	lsls	r0, r4, #30
    12bc:	d005      	beq.n	12ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    12be:	2186      	movs	r1, #134	; 0x86
    12c0:	2018      	movs	r0, #24
    12c2:	f7ff fb75 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12c6:	2701      	movs	r7, #1
    12c8:	e7f7      	b.n	12ba <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    12ca:	b1cd      	cbz	r5, 1300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12cc:	4611      	mov	r1, r2
    12ce:	2000      	movs	r0, #0
    12d0:	f00b ff10 	bl	d0f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12d4:	300c      	adds	r0, #12
    12d6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    12da:	b98f      	cbnz	r7, 1300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12dc:	4f0a      	ldr	r7, [pc, #40]	; (1308 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    12de:	f104 000c 	add.w	r0, r4, #12
    12e2:	00aa      	lsls	r2, r5, #2
    12e4:	603c      	str	r4, [r7, #0]
    12e6:	7225      	strb	r5, [r4, #8]
    12e8:	6060      	str	r0, [r4, #4]
    12ea:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    12ee:	6020      	str	r0, [r4, #0]
    12f0:	2100      	movs	r1, #0
    12f2:	6860      	ldr	r0, [r4, #4]
    12f4:	f00f f98d 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12f8:	4641      	mov	r1, r8
    12fa:	6838      	ldr	r0, [r7, #0]
    12fc:	f00b fefa 	bl	d0f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1300:	4630      	mov	r0, r6
    1302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1306:	0000      	.short	0x0000
    1308:	20000070 	.word	0x20000070

0000130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    130c:	b570      	push	{r4, r5, r6, lr}
    130e:	4d08      	ldr	r5, [pc, #32]	; (1330 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1310:	6828      	ldr	r0, [r5, #0]
    1312:	2800      	cmp	r0, #0
    1314:	d00a      	beq.n	132c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1316:	2400      	movs	r4, #0
    1318:	e004      	b.n	1324 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    131a:	4620      	mov	r0, r4
    131c:	f7ff ff98 	bl	1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1320:	1c64      	adds	r4, r4, #1
    1322:	b2e4      	uxtb	r4, r4
    1324:	6828      	ldr	r0, [r5, #0]
    1326:	7a00      	ldrb	r0, [r0, #8]
    1328:	42a0      	cmp	r0, r4
    132a:	d8f6      	bhi.n	131a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	0000      	.short	0x0000
    1330:	20000070 	.word	0x20000070

00001334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1334:	4909      	ldr	r1, [pc, #36]	; (135c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1336:	b510      	push	{r4, lr}
    1338:	4602      	mov	r2, r0
    133a:	6809      	ldr	r1, [r1, #0]
    133c:	2000      	movs	r0, #0
    133e:	b149      	cbz	r1, 1354 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1340:	7a0b      	ldrb	r3, [r1, #8]
    1342:	4293      	cmp	r3, r2
    1344:	d905      	bls.n	1352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1346:	6849      	ldr	r1, [r1, #4]
    1348:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    134c:	2900      	cmp	r1, #0
    134e:	d000      	beq.n	1352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1350:	1d08      	adds	r0, r1, #4
    1352:	bd10      	pop	{r4, pc}
    1354:	21ec      	movs	r1, #236	; 0xec
    1356:	2018      	movs	r0, #24
    1358:	f7ff fb2a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    135c:	20000070 	.word	0x20000070

00001360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1360:	490a      	ldr	r1, [pc, #40]	; (138c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4>)
    1362:	b510      	push	{r4, lr}
    1364:	4602      	mov	r2, r0
    1366:	6809      	ldr	r1, [r1, #0]
    1368:	2000      	movs	r0, #0
    136a:	b159      	cbz	r1, 1384 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    136c:	7a0b      	ldrb	r3, [r1, #8]
    136e:	4293      	cmp	r3, r2
    1370:	d907      	bls.n	1382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1372:	6849      	ldr	r1, [r1, #4]
    1374:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1378:	2900      	cmp	r1, #0
    137a:	d002      	beq.n	1382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    137c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1380:	4408      	add	r0, r1
    1382:	bd10      	pop	{r4, pc}
    1384:	21fa      	movs	r1, #250	; 0xfa
    1386:	2018      	movs	r0, #24
    1388:	f7ff fb12 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    138c:	20000070 	.word	0x20000070
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	4b1e      	ldr	r3, [pc, #120]	; (140c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x84>)
    1394:	6845      	ldr	r5, [r0, #4]
    1396:	4604      	mov	r4, r0
    1398:	2200      	movs	r2, #0
    139a:	b1a1      	cbz	r1, 13c6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3e>
    139c:	2001      	movs	r0, #1
    139e:	7060      	strb	r0, [r4, #1]
    13a0:	8858      	ldrh	r0, [r3, #2]
    13a2:	0881      	lsrs	r1, r0, #2
    13a4:	f05f 0000 	movs.w	r0, #0
    13a8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    13ac:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    13b0:	831a      	strh	r2, [r3, #24]
    13b2:	8419      	strh	r1, [r3, #32]
    13b4:	fb00 5301 	mla	r3, r0, r1, r5
    13b8:	6073      	str	r3, [r6, #4]
    13ba:	1823      	adds	r3, r4, r0
    13bc:	1c40      	adds	r0, r0, #1
    13be:	751a      	strb	r2, [r3, #20]
    13c0:	2804      	cmp	r0, #4
    13c2:	d3f1      	bcc.n	13a8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20>
    13c4:	bd70      	pop	{r4, r5, r6, pc}
    13c6:	7062      	strb	r2, [r4, #1]
    13c8:	f05f 0000 	movs.w	r0, #0
    13cc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    13d0:	830a      	strh	r2, [r1, #24]
    13d2:	840a      	strh	r2, [r1, #32]
    13d4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    13d8:	604a      	str	r2, [r1, #4]
    13da:	1821      	adds	r1, r4, r0
    13dc:	1c40      	adds	r0, r0, #1
    13de:	750a      	strb	r2, [r1, #20]
    13e0:	2804      	cmp	r0, #4
    13e2:	d3f3      	bcc.n	13cc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x44>
    13e4:	8858      	ldrh	r0, [r3, #2]
    13e6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    13ea:	d201      	bcs.n	13f0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x68>
    13ec:	0846      	lsrs	r6, r0, #1
    13ee:	e000      	b.n	13f2 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6a>
    13f0:	26ff      	movs	r6, #255	; 0xff
    13f2:	f00b ff7c 	bl	d2ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    13f6:	6065      	str	r5, [r4, #4]
    13f8:	8420      	strh	r0, [r4, #32]
    13fa:	1829      	adds	r1, r5, r0
    13fc:	60a1      	str	r1, [r4, #8]
    13fe:	8466      	strh	r6, [r4, #34]	; 0x22
    1400:	60e5      	str	r5, [r4, #12]
    1402:	84a0      	strh	r0, [r4, #36]	; 0x24
    1404:	6121      	str	r1, [r4, #16]
    1406:	84e6      	strh	r6, [r4, #38]	; 0x26
    1408:	bd70      	pop	{r4, r5, r6, pc}
    140a:	0000      	.short	0x0000
    140c:	20000074 	.word	0x20000074

00001410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1414:	b158      	cbz	r0, 142e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1416:	2500      	movs	r5, #0
    1418:	4411      	add	r1, r2
    141a:	4e24      	ldr	r6, [pc, #144]	; (14ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    141c:	b2cc      	uxtb	r4, r1
    141e:	2700      	movs	r7, #0
    1420:	7034      	strb	r4, [r6, #0]
    1422:	0781      	lsls	r1, r0, #30
    1424:	d005      	beq.n	1432 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1426:	214e      	movs	r1, #78	; 0x4e
    1428:	2009      	movs	r0, #9
    142a:	f7ff fac1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    142e:	2501      	movs	r5, #1
    1430:	e7f2      	b.n	1418 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1432:	2b1f      	cmp	r3, #31
    1434:	d804      	bhi.n	1440 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1436:	f64f 71ff 	movw	r1, #65535	; 0xffff
    143a:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    143e:	e009      	b.n	1454 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1440:	0059      	lsls	r1, r3, #1
    1442:	2bff      	cmp	r3, #255	; 0xff
    1444:	d90c      	bls.n	1460 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1446:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    144a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    144e:	d200      	bcs.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1450:	4611      	mov	r1, r2
    1452:	b289      	uxth	r1, r1
    1454:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1458:	1cc9      	adds	r1, r1, #3
    145a:	4011      	ands	r1, r2
    145c:	b135      	cbz	r5, 146c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    145e:	e007      	b.n	1470 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1460:	227c      	movs	r2, #124	; 0x7c
    1462:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1466:	d3f4      	bcc.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1468:	217c      	movs	r1, #124	; 0x7c
    146a:	e7f2      	b.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    146c:	6070      	str	r0, [r6, #4]
    146e:	8071      	strh	r1, [r6, #2]
    1470:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1474:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1478:	2200      	movs	r2, #0
    147a:	6876      	ldr	r6, [r6, #4]
    147c:	f04f 0c01 	mov.w	ip, #1
    1480:	e00d      	b.n	149e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1482:	b94d      	cbnz	r5, 1498 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1484:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1488:	eb00 0e03 	add.w	lr, r0, r3
    148c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1490:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1494:	f8c7 e004 	str.w	lr, [r7, #4]
    1498:	1c52      	adds	r2, r2, #1
    149a:	440b      	add	r3, r1
    149c:	b2d2      	uxtb	r2, r2
    149e:	42a2      	cmp	r2, r4
    14a0:	d3ef      	bcc.n	1482 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    14a2:	1ddb      	adds	r3, r3, #7
    14a4:	f023 0007 	bic.w	r0, r3, #7
    14a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14ac:	20000074 	.word	0x20000074

000014b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    14b0:	b570      	push	{r4, r5, r6, lr}
    14b2:	4a10      	ldr	r2, [pc, #64]	; (14f4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    14b4:	2000      	movs	r0, #0
    14b6:	6851      	ldr	r1, [r2, #4]
    14b8:	7812      	ldrb	r2, [r2, #0]
    14ba:	e014      	b.n	14e6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    14bc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    14c0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    14c4:	b16b      	cbz	r3, 14e2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    14c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    14ca:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    14ce:	d00c      	beq.n	14ea <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    14d0:	2500      	movs	r5, #0
    14d2:	70a5      	strb	r5, [r4, #2]
    14d4:	2101      	movs	r1, #1
    14d6:	4620      	mov	r0, r4
    14d8:	f7ff ff5a 	bl	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    14dc:	7025      	strb	r5, [r4, #0]
    14de:	4620      	mov	r0, r4
    14e0:	bd70      	pop	{r4, r5, r6, pc}
    14e2:	1c40      	adds	r0, r0, #1
    14e4:	b2c0      	uxtb	r0, r0
    14e6:	4290      	cmp	r0, r2
    14e8:	d3e8      	bcc.n	14bc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    14ea:	21a9      	movs	r1, #169	; 0xa9
    14ec:	2009      	movs	r0, #9
    14ee:	f7ff fa5f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f2:	0000      	.short	0x0000
    14f4:	20000074 	.word	0x20000074

000014f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    14f8:	4804      	ldr	r0, [pc, #16]	; (150c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    14fa:	b510      	push	{r4, lr}
    14fc:	8840      	ldrh	r0, [r0, #2]
    14fe:	0884      	lsrs	r4, r0, #2
    1500:	f00b fef5 	bl	d2ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1504:	4284      	cmp	r4, r0
    1506:	d300      	bcc.n	150a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1508:	4620      	mov	r0, r4
    150a:	bd10      	pop	{r4, pc}
    150c:	20000074 	.word	0x20000074
    1510:	b530      	push	{r4, r5, lr}
    1512:	490d      	ldr	r1, [pc, #52]	; (1548 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1514:	2001      	movs	r0, #1
    1516:	6048      	str	r0, [r1, #4]
    1518:	1e82      	subs	r2, r0, #2
    151a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    151e:	490b      	ldr	r1, [pc, #44]	; (154c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1520:	6088      	str	r0, [r1, #8]
    1522:	2300      	movs	r3, #0
    1524:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1528:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    152c:	4c08      	ldr	r4, [pc, #32]	; (1550 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    152e:	6023      	str	r3, [r4, #0]
    1530:	1d25      	adds	r5, r4, #4
    1532:	6028      	str	r0, [r5, #0]
    1534:	6088      	str	r0, [r1, #8]
    1536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    153a:	6023      	str	r3, [r4, #0]
    153c:	6028      	str	r0, [r5, #0]
    153e:	4906      	ldr	r1, [pc, #24]	; (1558 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1540:	4804      	ldr	r0, [pc, #16]	; (1554 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1542:	6008      	str	r0, [r1, #0]
    1544:	bd30      	pop	{r4, r5, pc}
    1546:	0000      	.short	0x0000
    1548:	4000e000 	.word	0x4000e000
    154c:	4000f000 	.word	0x4000f000
    1550:	4000f500 	.word	0x4000f500
    1554:	3ff60000 	.word	0x3ff60000
    1558:	4001f508 	.word	0x4001f508

0000155c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    155c:	b510      	push	{r4, lr}
    155e:	f7ff ffd7 	bl	1510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1562:	f00b ff9b 	bl	d49c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1566:	4903      	ldr	r1, [pc, #12]	; (1574 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1568:	4801      	ldr	r0, [pc, #4]	; (1570 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    156a:	6008      	str	r0, [r1, #0]
    156c:	bd10      	pop	{r4, pc}
    156e:	0000      	.short	0x0000
    1570:	3ff60000 	.word	0x3ff60000
    1574:	4001f508 	.word	0x4001f508

00001578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1578:	b510      	push	{r4, lr}
    157a:	f7ff ffc9 	bl	1510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    157e:	f00b ff8d 	bl	d49c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1582:	f000 f887 	bl	1694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1586:	4905      	ldr	r1, [pc, #20]	; (159c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1588:	4803      	ldr	r0, [pc, #12]	; (1598 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    158a:	6008      	str	r0, [r1, #0]
    158c:	f000 f8b8 	bl	1700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1594:	f000 b8dc 	b.w	1750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1598:	3ff60000 	.word	0x3ff60000
    159c:	4001f508 	.word	0x4001f508
    15a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15a4:	4682      	mov	sl, r0
    15a6:	4838      	ldr	r0, [pc, #224]	; (1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    15a8:	f00e fec8 	bl	1033c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    15ac:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    15b0:	b128      	cbz	r0, 15be <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    15b2:	2601      	movs	r6, #1
    15b4:	f10b 0001 	add.w	r0, fp, #1
    15b8:	21ff      	movs	r1, #255	; 0xff
    15ba:	7001      	strb	r1, [r0, #0]
    15bc:	e000      	b.n	15c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    15be:	2600      	movs	r6, #0
    15c0:	f44f 7580 	mov.w	r5, #256	; 0x100
    15c4:	4c31      	ldr	r4, [pc, #196]	; (168c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    15c6:	f04f 0800 	mov.w	r8, #0
    15ca:	1d2f      	adds	r7, r5, #4
    15cc:	2101      	movs	r1, #1
    15ce:	6061      	str	r1, [r4, #4]
    15d0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    15d4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    15d8:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    15dc:	6021      	str	r1, [r4, #0]
    15de:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1690 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    15e2:	e01c      	b.n	161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15e4:	f8d9 0000 	ldr.w	r0, [r9]
    15e8:	06c0      	lsls	r0, r0, #27
    15ea:	d518      	bpl.n	161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15ec:	200e      	movs	r0, #14
    15ee:	f00b ff64 	bl	d4ba <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    15f2:	f3ef 8010 	mrs	r0, PRIMASK
    15f6:	9000      	str	r0, [sp, #0]
    15f8:	b672      	cpsid	i
    15fa:	2103      	movs	r1, #3
    15fc:	4620      	mov	r0, r4
    15fe:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1602:	4629      	mov	r1, r5
    1604:	f00b ff66 	bl	d4d4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1608:	b930      	cbnz	r0, 1618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    160a:	4639      	mov	r1, r7
    160c:	4620      	mov	r0, r4
    160e:	f00b ff61 	bl	d4d4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1612:	b908      	cbnz	r0, 1618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1614:	f00e ff29 	bl	1046a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1618:	9800      	ldr	r0, [sp, #0]
    161a:	b900      	cbnz	r0, 161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    161c:	b662      	cpsie	i
    161e:	4629      	mov	r1, r5
    1620:	4620      	mov	r0, r4
    1622:	f00b ff57 	bl	d4d4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1626:	b928      	cbnz	r0, 1634 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1628:	4639      	mov	r1, r7
    162a:	4620      	mov	r0, r4
    162c:	f00b ff52 	bl	d4d4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1630:	2800      	cmp	r0, #0
    1632:	d0d7      	beq.n	15e4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1634:	4639      	mov	r1, r7
    1636:	4620      	mov	r0, r4
    1638:	f00b ff4c 	bl	d4d4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    163c:	2800      	cmp	r0, #0
    163e:	d1c5      	bne.n	15cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1640:	bb06      	cbnz	r6, 1684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1642:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1646:	f88d 1000 	strb.w	r1, [sp]
    164a:	9900      	ldr	r1, [sp, #0]
    164c:	9100      	str	r1, [sp, #0]
    164e:	f89d 1000 	ldrb.w	r1, [sp]
    1652:	b109      	cbz	r1, 1658 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1654:	2501      	movs	r5, #1
    1656:	e000      	b.n	165a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1658:	2500      	movs	r5, #0
    165a:	f10b 0001 	add.w	r0, fp, #1
    165e:	f880 8000 	strb.w	r8, [r0]
    1662:	2003      	movs	r0, #3
    1664:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1668:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    166c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1670:	200e      	movs	r0, #14
    1672:	f00b ff22 	bl	d4ba <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1676:	4804      	ldr	r0, [pc, #16]	; (1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1678:	f00e fe77 	bl	1036a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    167c:	b115      	cbz	r5, 1684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    167e:	2011      	movs	r0, #17
    1680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1684:	2000      	movs	r0, #0
    1686:	e7fb      	b.n	1680 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1688:	20000360 	.word	0x20000360
    168c:	4000e000 	.word	0x4000e000
    1690:	e000ed10 	.word	0xe000ed10

00001694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1694:	b510      	push	{r4, lr}
    1696:	4806      	ldr	r0, [pc, #24]	; (16b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1698:	f00e fe63 	bl	10362 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    169c:	b118      	cbz	r0, 16a6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    169e:	2130      	movs	r1, #48	; 0x30
    16a0:	201d      	movs	r0, #29
    16a2:	f7ff f985 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16a6:	4802      	ldr	r0, [pc, #8]	; (16b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    16a8:	2100      	movs	r1, #0
    16aa:	7041      	strb	r1, [r0, #1]
    16ac:	bd10      	pop	{r4, pc}
    16ae:	0000      	.short	0x0000
    16b0:	20000360 	.word	0x20000360

000016b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	4911      	ldr	r1, [pc, #68]	; (16fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    16b8:	680a      	ldr	r2, [r1, #0]
    16ba:	b1ea      	cbz	r2, 16f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    16bc:	2300      	movs	r3, #0
    16be:	461d      	mov	r5, r3
    16c0:	2401      	movs	r4, #1
    16c2:	684a      	ldr	r2, [r1, #4]
    16c4:	1c52      	adds	r2, r2, #1
    16c6:	604a      	str	r2, [r1, #4]
    16c8:	2a09      	cmp	r2, #9
    16ca:	d300      	bcc.n	16ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    16cc:	604d      	str	r5, [r1, #4]
    16ce:	790e      	ldrb	r6, [r1, #4]
    16d0:	fa04 f206 	lsl.w	r2, r4, r6
    16d4:	680e      	ldr	r6, [r1, #0]
    16d6:	4216      	tst	r6, r2
    16d8:	d00b      	beq.n	16f2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    16da:	f3ef 8310 	mrs	r3, PRIMASK
    16de:	b672      	cpsid	i
    16e0:	680c      	ldr	r4, [r1, #0]
    16e2:	4394      	bics	r4, r2
    16e4:	600c      	str	r4, [r1, #0]
    16e6:	b903      	cbnz	r3, 16ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    16e8:	b662      	cpsie	i
    16ea:	6849      	ldr	r1, [r1, #4]
    16ec:	6001      	str	r1, [r0, #0]
    16ee:	2000      	movs	r0, #0
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    16f2:	1c5b      	adds	r3, r3, #1
    16f4:	2b09      	cmp	r3, #9
    16f6:	d3e4      	bcc.n	16c2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    16f8:	2005      	movs	r0, #5
    16fa:	bd70      	pop	{r4, r5, r6, pc}
    16fc:	2000007c 	.word	0x2000007c

00001700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1700:	4802      	ldr	r0, [pc, #8]	; (170c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1702:	2100      	movs	r1, #0
    1704:	6001      	str	r1, [r0, #0]
    1706:	6041      	str	r1, [r0, #4]
    1708:	4770      	bx	lr
    170a:	0000      	.short	0x0000
    170c:	2000007c 	.word	0x2000007c

00001710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1710:	b510      	push	{r4, lr}
    1712:	4c04      	ldr	r4, [pc, #16]	; (1724 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1714:	7820      	ldrb	r0, [r4, #0]
    1716:	28ff      	cmp	r0, #255	; 0xff
    1718:	d003      	beq.n	1722 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    171a:	f00a fcdb 	bl	c0d4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    171e:	20ff      	movs	r0, #255	; 0xff
    1720:	7020      	strb	r0, [r4, #0]
    1722:	bd10      	pop	{r4, pc}
    1724:	20000000 	.word	0x20000000

00001728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1728:	b510      	push	{r4, lr}
    172a:	4c08      	ldr	r4, [pc, #32]	; (174c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    172c:	7861      	ldrb	r1, [r4, #1]
    172e:	b109      	cbz	r1, 1734 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1730:	200f      	movs	r0, #15
    1732:	bd10      	pop	{r4, pc}
    1734:	f00a fc94 	bl	c060 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1738:	7020      	strb	r0, [r4, #0]
    173a:	28ff      	cmp	r0, #255	; 0xff
    173c:	d001      	beq.n	1742 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    173e:	2000      	movs	r0, #0
    1740:	bd10      	pop	{r4, pc}
    1742:	2173      	movs	r1, #115	; 0x73
    1744:	201f      	movs	r0, #31
    1746:	f7ff f933 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    174a:	0000      	.short	0x0000
    174c:	20000000 	.word	0x20000000

00001750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1750:	4901      	ldr	r1, [pc, #4]	; (1758 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1752:	2000      	movs	r0, #0
    1754:	7048      	strb	r0, [r1, #1]
    1756:	4770      	bx	lr
    1758:	20000000 	.word	0x20000000

0000175c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    175c:	4806      	ldr	r0, [pc, #24]	; (1778 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    175e:	4a07      	ldr	r2, [pc, #28]	; (177c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1760:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1762:	8852      	ldrh	r2, [r2, #2]
    1764:	4291      	cmp	r1, r2
    1766:	d104      	bne.n	1772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1768:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    176c:	b108      	cbz	r0, 1772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    176e:	2000      	movs	r0, #0
    1770:	4770      	bx	lr
    1772:	2001      	movs	r0, #1
    1774:	4770      	bx	lr
    1776:	0000      	.short	0x0000
    1778:	200014e0 	.word	0x200014e0
    177c:	20000354 	.word	0x20000354

00001780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1780:	4901      	ldr	r1, [pc, #4]	; (1788 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1782:	8048      	strh	r0, [r1, #2]
    1784:	4770      	bx	lr
    1786:	0000      	.short	0x0000
    1788:	20000354 	.word	0x20000354

0000178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    178c:	4808      	ldr	r0, [pc, #32]	; (17b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    178e:	4a09      	ldr	r2, [pc, #36]	; (17b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1790:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1792:	8852      	ldrh	r2, [r2, #2]
    1794:	4291      	cmp	r1, r2
    1796:	d109      	bne.n	17ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1798:	f64f 71ff 	movw	r1, #65535	; 0xffff
    179c:	8481      	strh	r1, [r0, #36]	; 0x24
    179e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    17a2:	b119      	cbz	r1, 17ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    17a4:	2100      	movs	r1, #0
    17a6:	7001      	strb	r1, [r0, #0]
    17a8:	2001      	movs	r0, #1
    17aa:	4770      	bx	lr
    17ac:	2000      	movs	r0, #0
    17ae:	4770      	bx	lr
    17b0:	200014e0 	.word	0x200014e0
    17b4:	20000354 	.word	0x20000354

000017b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    17b8:	4807      	ldr	r0, [pc, #28]	; (17d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17ba:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    17be:	2901      	cmp	r1, #1
    17c0:	d007      	beq.n	17d2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    17c2:	2101      	movs	r1, #1
    17c4:	7001      	strb	r1, [r0, #0]
    17c6:	4805      	ldr	r0, [pc, #20]	; (17dc <CONFIG_USB_DEVICE_PID+0x2>)
    17c8:	4903      	ldr	r1, [pc, #12]	; (17d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17ca:	8800      	ldrh	r0, [r0, #0]
    17cc:	8488      	strh	r0, [r1, #36]	; 0x24
    17ce:	2001      	movs	r0, #1
    17d0:	4770      	bx	lr
    17d2:	2000      	movs	r0, #0
    17d4:	4770      	bx	lr
    17d6:	0000      	.short	0x0000
    17d8:	200014e0 	.word	0x200014e0
    17dc:	20000354 	.word	0x20000354

000017e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    17e0:	4906      	ldr	r1, [pc, #24]	; (17fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    17e4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17e6:	885b      	ldrh	r3, [r3, #2]
    17e8:	429a      	cmp	r2, r3
    17ea:	d105      	bne.n	17f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17ec:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17f0:	b112      	cbz	r2, 17f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17f2:	6001      	str	r1, [r0, #0]
    17f4:	2001      	movs	r0, #1
    17f6:	4770      	bx	lr
    17f8:	2000      	movs	r0, #0
    17fa:	4770      	bx	lr
    17fc:	200014e0 	.word	0x200014e0
    1800:	20000354 	.word	0x20000354

00001804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1804:	4909      	ldr	r1, [pc, #36]	; (182c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1806:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1808:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    180c:	3bff      	subs	r3, #255	; 0xff
    180e:	d002      	beq.n	1816 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    1810:	2100      	movs	r1, #0
    1812:	6001      	str	r1, [r0, #0]
    1814:	e007      	b.n	1826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1816:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    181a:	4904      	ldr	r1, [pc, #16]	; (182c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    181c:	2a01      	cmp	r2, #1
    181e:	d002      	beq.n	1826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1820:	6001      	str	r1, [r0, #0]
    1822:	2001      	movs	r0, #1
    1824:	4770      	bx	lr
    1826:	2000      	movs	r0, #0
    1828:	4770      	bx	lr
    182a:	0000      	.short	0x0000
    182c:	200014e0 	.word	0x200014e0

00001830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1830:	4901      	ldr	r1, [pc, #4]	; (1838 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1832:	8008      	strh	r0, [r1, #0]
    1834:	4770      	bx	lr
    1836:	0000      	.short	0x0000
    1838:	20000354 	.word	0x20000354

0000183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    183c:	4905      	ldr	r1, [pc, #20]	; (1854 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    183e:	2000      	movs	r0, #0
    1840:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1844:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1848:	8488      	strh	r0, [r1, #36]	; 0x24
    184a:	4903      	ldr	r1, [pc, #12]	; (1858 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    184c:	8008      	strh	r0, [r1, #0]
    184e:	8048      	strh	r0, [r1, #2]
    1850:	4770      	bx	lr
    1852:	0000      	.short	0x0000
    1854:	200014e0 	.word	0x200014e0
    1858:	20000354 	.word	0x20000354
    185c:	4905      	ldr	r1, [pc, #20]	; (1874 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    185e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1860:	4282      	cmp	r2, r0
    1862:	d105      	bne.n	1870 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1864:	2000      	movs	r0, #0
    1866:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    186a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    186e:	8488      	strh	r0, [r1, #36]	; 0x24
    1870:	4770      	bx	lr
    1872:	0000      	.short	0x0000
    1874:	200014e0 	.word	0x200014e0

00001878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1878:	4a0a      	ldr	r2, [pc, #40]	; (18a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    187a:	b110      	cbz	r0, 1882 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    187c:	2801      	cmp	r0, #1
    187e:	d007      	beq.n	1890 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1880:	e00e      	b.n	18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1882:	7850      	ldrb	r0, [r2, #1]
    1884:	b160      	cbz	r0, 18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1886:	f8d2 0002 	ldr.w	r0, [r2, #2]
    188a:	6008      	str	r0, [r1, #0]
    188c:	88d0      	ldrh	r0, [r2, #6]
    188e:	e004      	b.n	189a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1890:	7810      	ldrb	r0, [r2, #0]
    1892:	b128      	cbz	r0, 18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1894:	6890      	ldr	r0, [r2, #8]
    1896:	6008      	str	r0, [r1, #0]
    1898:	8990      	ldrh	r0, [r2, #12]
    189a:	8088      	strh	r0, [r1, #4]
    189c:	2001      	movs	r0, #1
    189e:	4770      	bx	lr
    18a0:	2000      	movs	r0, #0
    18a2:	4770      	bx	lr
    18a4:	20000362 	.word	0x20000362

000018a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    18a8:	4a08      	ldr	r2, [pc, #32]	; (18cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    18aa:	2301      	movs	r3, #1
    18ac:	b138      	cbz	r0, 18be <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    18ae:	2801      	cmp	r0, #1
    18b0:	d104      	bne.n	18bc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    18b2:	7013      	strb	r3, [r2, #0]
    18b4:	6808      	ldr	r0, [r1, #0]
    18b6:	6090      	str	r0, [r2, #8]
    18b8:	8888      	ldrh	r0, [r1, #4]
    18ba:	8190      	strh	r0, [r2, #12]
    18bc:	4770      	bx	lr
    18be:	7053      	strb	r3, [r2, #1]
    18c0:	6808      	ldr	r0, [r1, #0]
    18c2:	f8c2 0002 	str.w	r0, [r2, #2]
    18c6:	8888      	ldrh	r0, [r1, #4]
    18c8:	80d0      	strh	r0, [r2, #6]
    18ca:	4770      	bx	lr
    18cc:	20000362 	.word	0x20000362

000018d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    18d0:	4906      	ldr	r1, [pc, #24]	; (18ec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    18d2:	b110      	cbz	r0, 18da <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    18d4:	2801      	cmp	r0, #1
    18d6:	d002      	beq.n	18de <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    18d8:	e005      	b.n	18e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18da:	7848      	ldrb	r0, [r1, #1]
    18dc:	e000      	b.n	18e0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    18de:	7808      	ldrb	r0, [r1, #0]
    18e0:	b108      	cbz	r0, 18e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18e2:	2001      	movs	r0, #1
    18e4:	4770      	bx	lr
    18e6:	2000      	movs	r0, #0
    18e8:	4770      	bx	lr
    18ea:	0000      	.short	0x0000
    18ec:	20000362 	.word	0x20000362

000018f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    18f0:	4901      	ldr	r1, [pc, #4]	; (18f8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    18f2:	7708      	strb	r0, [r1, #28]
    18f4:	4770      	bx	lr
    18f6:	0000      	.short	0x0000
    18f8:	20000da2 	.word	0x20000da2

000018fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    18fc:	4801      	ldr	r0, [pc, #4]	; (1904 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    18fe:	7880      	ldrb	r0, [r0, #2]
    1900:	4770      	bx	lr
    1902:	0000      	.short	0x0000
    1904:	20000084 	.word	0x20000084

00001908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    1908:	4801      	ldr	r0, [pc, #4]	; (1910 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    190a:	78c0      	ldrb	r0, [r0, #3]
    190c:	4770      	bx	lr
    190e:	0000      	.short	0x0000
    1910:	20000084 	.word	0x20000084

00001914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    1914:	b570      	push	{r4, r5, r6, lr}
    1916:	460c      	mov	r4, r1
    1918:	4605      	mov	r5, r0
    191a:	f000 f91f 	bl	1b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    191e:	b118      	cbz	r0, 1928 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    1920:	21d0      	movs	r1, #208	; 0xd0
    1922:	2027      	movs	r0, #39	; 0x27
    1924:	f7ff f844 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1928:	4803      	ldr	r0, [pc, #12]	; (1938 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    192a:	2101      	movs	r1, #1
    192c:	f00c f9e5 	bl	dcfa <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1930:	4802      	ldr	r0, [pc, #8]	; (193c <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    1932:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    1936:	bd70      	pop	{r4, r5, r6, pc}
    1938:	20000d80 	.word	0x20000d80
    193c:	20000084 	.word	0x20000084

00001940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    1940:	4901      	ldr	r1, [pc, #4]	; (1948 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    1942:	2001      	movs	r0, #1
    1944:	7148      	strb	r0, [r1, #5]
    1946:	4770      	bx	lr
    1948:	20000084 	.word	0x20000084

0000194c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    194c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1950:	4d5b      	ldr	r5, [pc, #364]	; (1ac0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    1952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1954:	782e      	ldrb	r6, [r5, #0]
    1956:	2e00      	cmp	r6, #0
    1958:	d16b      	bne.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    195a:	2a00      	cmp	r2, #0
    195c:	d069      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    195e:	2b00      	cmp	r3, #0
    1960:	d067      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1962:	2c00      	cmp	r4, #0
    1964:	d065      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1966:	f105 0614 	add.w	r6, r5, #20
    196a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    196e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    1972:	2700      	movs	r7, #0
    1974:	716f      	strb	r7, [r5, #5]
    1976:	712f      	strb	r7, [r5, #4]
    1978:	70af      	strb	r7, [r5, #2]
    197a:	706f      	strb	r7, [r5, #1]
    197c:	70ef      	strb	r7, [r5, #3]
    197e:	81af      	strh	r7, [r5, #12]
    1980:	81ef      	strh	r7, [r5, #14]
    1982:	f000 f92f 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1986:	4606      	mov	r6, r0
    1988:	f000 f926 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    198c:	4604      	mov	r4, r0
    198e:	f006 f8c3 	bl	7b18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1992:	f005 fe1b 	bl	75cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1996:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    199a:	f006 f941 	bl	7c20 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    199e:	69e0      	ldr	r0, [r4, #28]
    19a0:	f006 fa24 	bl	7dec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    19a4:	6960      	ldr	r0, [r4, #20]
    19a6:	f006 fa17 	bl	7dd8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    19aa:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    19ae:	f006 fa4d 	bl	7e4c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    19b2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    19b6:	6840      	ldr	r0, [r0, #4]
    19b8:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    19bc:	b108      	cbz	r0, 19c2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    19be:	f006 f825 	bl	7a0c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    19c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    19c6:	2001      	movs	r0, #1
    19c8:	f005 ff64 	bl	7894 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    19cc:	2800      	cmp	r0, #0
    19ce:	d070      	beq.n	1ab2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    19d0:	483c      	ldr	r0, [pc, #240]	; (1ac4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    19d2:	f005 ffcb 	bl	796c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    19d6:	8820      	ldrh	r0, [r4, #0]
    19d8:	f7ff fcc2 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    19dc:	6368      	str	r0, [r5, #52]	; 0x34
    19de:	8820      	ldrh	r0, [r4, #0]
    19e0:	f7ff fca8 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    19e4:	f106 0288 	add.w	r2, r6, #136	; 0x88
    19e8:	63a8      	str	r0, [r5, #56]	; 0x38
    19ea:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    19ee:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    19f2:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    19f6:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    19fa:	f8c9 2019 	str.w	r2, [r9, #25]
    19fe:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    1a02:	f8c9 101d 	str.w	r1, [r9, #29]
    1a06:	f000 f925 	bl	1c54 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    1a0a:	4601      	mov	r1, r0
    1a0c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    1a0e:	f00b fec9 	bl	d7a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a12:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    1a14:	4281      	cmp	r1, r0
    1a16:	d200      	bcs.n	1a1a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    1a18:	4608      	mov	r0, r1
    1a1a:	71a8      	strb	r0, [r5, #6]
    1a1c:	46a8      	mov	r8, r5
    1a1e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1a22:	46ba      	mov	sl, r7
    1a24:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    1a26:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    1a2a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    1a2c:	2908      	cmp	r1, #8
    1a2e:	d104      	bne.n	1a3a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    1a30:	e002      	b.n	1a38 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    1a32:	f240 1145 	movw	r1, #325	; 0x145
    1a36:	e040      	b.n	1aba <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    1a38:	2104      	movs	r1, #4
    1a3a:	f00b feb3 	bl	d7a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a3e:	b90f      	cbnz	r7, 1a44 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    1a40:	1d00      	adds	r0, r0, #4
    1a42:	b280      	uxth	r0, r0
    1a44:	4285      	cmp	r5, r0
    1a46:	d200      	bcs.n	1a4a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    1a48:	4628      	mov	r0, r5
    1a4a:	b2c5      	uxtb	r5, r0
    1a4c:	f888 5007 	strb.w	r5, [r8, #7]
    1a50:	f888 5008 	strb.w	r5, [r8, #8]
    1a54:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1a58:	46d0      	mov	r8, sl
    1a5a:	b190      	cbz	r0, 1a82 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    1a5c:	2701      	movs	r7, #1
    1a5e:	f889 7018 	strb.w	r7, [r9, #24]
    1a62:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    1a66:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1a6a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    1a6e:	f00b fdbd 	bl	d5ec <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1a72:	4603      	mov	r3, r0
    1a74:	462a      	mov	r2, r5
    1a76:	4914      	ldr	r1, [pc, #80]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a78:	4638      	mov	r0, r7
    1a7a:	f8cd 8000 	str.w	r8, [sp]
    1a7e:	f005 fd11 	bl	74a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1a82:	2001      	movs	r0, #1
    1a84:	f000 fb46 	bl	2114 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c8>
    1a88:	4810      	ldr	r0, [pc, #64]	; (1acc <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    1a8a:	6800      	ldr	r0, [r0, #0]
    1a8c:	2803      	cmp	r0, #3
    1a8e:	d012      	beq.n	1ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a90:	280b      	cmp	r0, #11
    1a92:	d010      	beq.n	1ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a94:	480c      	ldr	r0, [pc, #48]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a96:	220e      	movs	r2, #14
    1a98:	2100      	movs	r1, #0
    1a9a:	304a      	adds	r0, #74	; 0x4a
    1a9c:	f00e fdb9 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1aa0:	4809      	ldr	r0, [pc, #36]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1aa2:	8ab1      	ldrh	r1, [r6, #20]
    1aa4:	304a      	adds	r0, #74	; 0x4a
    1aa6:	8041      	strh	r1, [r0, #2]
    1aa8:	8821      	ldrh	r1, [r4, #0]
    1aaa:	8001      	strh	r1, [r0, #0]
    1aac:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    1ab0:	7101      	strb	r1, [r0, #4]
    1ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	f240 2102 	movw	r1, #514	; 0x202
    1aba:	2027      	movs	r0, #39	; 0x27
    1abc:	f7fe ff78 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ac0:	20000084 	.word	0x20000084
    1ac4:	00002318 	.word	0x00002318
    1ac8:	20000d58 	.word	0x20000d58
    1acc:	40001550 	.word	0x40001550

00001ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    1ad0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1ad4:	4688      	mov	r8, r1
    1ad6:	4607      	mov	r7, r0
    1ad8:	f000 f884 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1adc:	4c1a      	ldr	r4, [pc, #104]	; (1b48 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    1ade:	4605      	mov	r5, r0
    1ae0:	07b8      	lsls	r0, r7, #30
    1ae2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ae4:	784e      	ldrb	r6, [r1, #1]
    1ae6:	d516      	bpl.n	1b16 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    1ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1aea:	b330      	cbz	r0, 1b3a <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    1aec:	8962      	ldrh	r2, [r4, #10]
    1aee:	1cd2      	adds	r2, r2, #3
    1af0:	f00e fd15 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1af6:	6260      	str	r0, [r4, #36]	; 0x24
    1af8:	4669      	mov	r1, sp
    1afa:	aa01      	add	r2, sp, #4
    1afc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1afe:	f00b f9bf 	bl	ce80 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    1b02:	9800      	ldr	r0, [sp, #0]
    1b04:	f00b f972 	bl	cdec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1b08:	f8c8 0000 	str.w	r0, [r8]
    1b0c:	4631      	mov	r1, r6
    1b0e:	2201      	movs	r2, #1
    1b10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1b12:	f00b f922 	bl	cd5a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    1b16:	07f8      	lsls	r0, r7, #31
    1b18:	d00d      	beq.n	1b36 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    1b1a:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    1b1e:	3518      	adds	r5, #24
    1b20:	1c40      	adds	r0, r0, #1
    1b22:	f141 0100 	adc.w	r1, r1, #0
    1b26:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    1b2a:	f815 0918 	ldrb.w	r0, [r5], #-24
    1b2e:	2801      	cmp	r0, #1
    1b30:	d008      	beq.n	1b44 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    1b32:	2001      	movs	r0, #1
    1b34:	7628      	strb	r0, [r5, #24]
    1b36:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1b3a:	f240 415c 	movw	r1, #1116	; 0x45c
    1b3e:	2027      	movs	r0, #39	; 0x27
    1b40:	f7fe ff36 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b44:	2000      	movs	r0, #0
    1b46:	e7f5      	b.n	1b34 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    1b48:	20000084 	.word	0x20000084

00001b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    1b4c:	4802      	ldr	r0, [pc, #8]	; (1b58 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    1b4e:	89c0      	ldrh	r0, [r0, #14]
    1b50:	f3c0 2080 	ubfx	r0, r0, #10, #1
    1b54:	4770      	bx	lr
    1b56:	0000      	.short	0x0000
    1b58:	20000084 	.word	0x20000084

00001b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    1b5c:	4804      	ldr	r0, [pc, #16]	; (1b70 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    1b5e:	7800      	ldrb	r0, [r0, #0]
    1b60:	b108      	cbz	r0, 1b66 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    1b62:	200c      	movs	r0, #12
    1b64:	4770      	bx	lr
    1b66:	4903      	ldr	r1, [pc, #12]	; (1b74 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    1b68:	2000      	movs	r0, #0
    1b6a:	7708      	strb	r0, [r1, #28]
    1b6c:	4770      	bx	lr
    1b6e:	0000      	.short	0x0000
    1b70:	20000084 	.word	0x20000084
    1b74:	20000da2 	.word	0x20000da2

00001b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    1b78:	480c      	ldr	r0, [pc, #48]	; (1bac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    1b7a:	b510      	push	{r4, lr}
    1b7c:	7801      	ldrb	r1, [r0, #0]
    1b7e:	b149      	cbz	r1, 1b94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    1b80:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    1b84:	7800      	ldrb	r0, [r0, #0]
    1b86:	2802      	cmp	r0, #2
    1b88:	d008      	beq.n	1b9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    1b8a:	f240 211e 	movw	r1, #542	; 0x21e
    1b8e:	2027      	movs	r0, #39	; 0x27
    1b90:	f7fe ff0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b98:	f000 b9ca 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1b9c:	6848      	ldr	r0, [r1, #4]
    1b9e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    1ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ba6:	f005 bee9 	b.w	797c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    1baa:	0000      	.short	0x0000
    1bac:	20000084 	.word	0x20000084
    1bb0:	4608      	mov	r0, r1
    1bb2:	2100      	movs	r1, #0
    1bb4:	7041      	strb	r1, [r0, #1]
    1bb6:	211d      	movs	r1, #29
    1bb8:	f800 1b04 	strb.w	r1, [r0], #4
    1bbc:	220e      	movs	r2, #14
    1bbe:	4901      	ldr	r1, [pc, #4]	; (1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    1bc0:	f00e bcad 	b.w	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bc4:	20000db0 	.word	0x20000db0
    1bc8:	4a02      	ldr	r2, [pc, #8]	; (1bd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    1bca:	8993      	ldrh	r3, [r2, #12]
    1bcc:	4303      	orrs	r3, r0
    1bce:	8193      	strh	r3, [r2, #12]
    1bd0:	6952      	ldr	r2, [r2, #20]
    1bd2:	4710      	bx	r2
    1bd4:	20000084 	.word	0x20000084
    1bd8:	4801      	ldr	r0, [pc, #4]	; (1be0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    1bda:	6840      	ldr	r0, [r0, #4]
    1bdc:	4770      	bx	lr
    1bde:	0000      	.short	0x0000
    1be0:	200000c0 	.word	0x200000c0
    1be4:	4801      	ldr	r0, [pc, #4]	; (1bec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    1be6:	6840      	ldr	r0, [r0, #4]
    1be8:	3080      	adds	r0, #128	; 0x80
    1bea:	4770      	bx	lr
    1bec:	200000c0 	.word	0x200000c0
    1bf0:	4a01      	ldr	r2, [pc, #4]	; (1bf8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    1bf2:	2100      	movs	r1, #0
    1bf4:	6952      	ldr	r2, [r2, #20]
    1bf6:	4710      	bx	r2
    1bf8:	20000084 	.word	0x20000084
    1bfc:	b570      	push	{r4, r5, r6, lr}
    1bfe:	4605      	mov	r5, r0
    1c00:	2901      	cmp	r1, #1
    1c02:	d818      	bhi.n	1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c04:	4c12      	ldr	r4, [pc, #72]	; (1c50 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    1c06:	69a1      	ldr	r1, [r4, #24]
    1c08:	4788      	blx	r1
    1c0a:	b1a0      	cbz	r0, 1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c0c:	7920      	ldrb	r0, [r4, #4]
    1c0e:	b990      	cbnz	r0, 1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c10:	b9e5      	cbnz	r5, 1c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c12:	f104 0010 	add.w	r0, r4, #16
    1c16:	7801      	ldrb	r1, [r0, #0]
    1c18:	06c8      	lsls	r0, r1, #27
    1c1a:	d405      	bmi.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1c1e:	7800      	ldrb	r0, [r0, #0]
    1c20:	06c0      	lsls	r0, r0, #27
    1c22:	d401      	bmi.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c24:	2001      	movs	r0, #1
    1c26:	e000      	b.n	1c2a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    1c28:	2000      	movs	r0, #0
    1c2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c2c:	b92a      	cbnz	r2, 1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c2e:	8962      	ldrh	r2, [r4, #10]
    1c30:	b11a      	cbz	r2, 1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c32:	06c9      	lsls	r1, r1, #27
    1c34:	d401      	bmi.n	1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c36:	2001      	movs	r0, #1
    1c38:	bd70      	pop	{r4, r5, r6, pc}
    1c3a:	89a1      	ldrh	r1, [r4, #12]
    1c3c:	078a      	lsls	r2, r1, #30
    1c3e:	d503      	bpl.n	1c48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    1c40:	6a22      	ldr	r2, [r4, #32]
    1c42:	78d2      	ldrb	r2, [r2, #3]
    1c44:	2a02      	cmp	r2, #2
    1c46:	d001      	beq.n	1c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c48:	4308      	orrs	r0, r1
    1c4a:	d1f4      	bne.n	1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c4c:	2000      	movs	r0, #0
    1c4e:	bd70      	pop	{r4, r5, r6, pc}
    1c50:	20000084 	.word	0x20000084
    1c54:	b510      	push	{r4, lr}
    1c56:	f7ff ffbf 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1c5a:	4604      	mov	r4, r0
    1c5c:	f7ff ffc2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1c60:	4602      	mov	r2, r0
    1c62:	7f41      	ldrb	r1, [r0, #29]
    1c64:	4816      	ldr	r0, [pc, #88]	; (1cc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    1c66:	2925      	cmp	r1, #37	; 0x25
    1c68:	d010      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c6a:	2926      	cmp	r1, #38	; 0x26
    1c6c:	d00e      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c6e:	7f92      	ldrb	r2, [r2, #30]
    1c70:	2a25      	cmp	r2, #37	; 0x25
    1c72:	d00b      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c74:	2920      	cmp	r1, #32
    1c76:	d00d      	beq.n	1c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c78:	2921      	cmp	r1, #33	; 0x21
    1c7a:	d00b      	beq.n	1c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c7c:	2a23      	cmp	r2, #35	; 0x23
    1c7e:	d00f      	beq.n	1ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c80:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1c84:	2804      	cmp	r0, #4
    1c86:	d100      	bne.n	1c8a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    1c88:	2008      	movs	r0, #8
    1c8a:	bd10      	pop	{r4, pc}
    1c8c:	6840      	ldr	r0, [r0, #4]
    1c8e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    1c92:	e00e      	b.n	1cb2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    1c94:	2a23      	cmp	r2, #35	; 0x23
    1c96:	d003      	beq.n	1ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c98:	6840      	ldr	r0, [r0, #4]
    1c9a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    1c9e:	e005      	b.n	1cac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    1ca0:	6841      	ldr	r1, [r0, #4]
    1ca2:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    1ca6:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    1caa:	4008      	ands	r0, r1
    1cac:	f00b fc94 	bl	d5d8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1cb0:	4601      	mov	r1, r0
    1cb2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1cba:	f00b bca5 	b.w	d608 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    1cbe:	0000      	.short	0x0000
    1cc0:	200000c0 	.word	0x200000c0
    1cc4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1cc8:	468b      	mov	fp, r1
    1cca:	4681      	mov	r9, r0
    1ccc:	f7ff ff8a 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1cd0:	2600      	movs	r6, #0
    1cd2:	4c66      	ldr	r4, [pc, #408]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1cd4:	4607      	mov	r7, r0
    1cd6:	f88d 6008 	strb.w	r6, [sp, #8]
    1cda:	9603      	str	r6, [sp, #12]
    1cdc:	9601      	str	r6, [sp, #4]
    1cde:	7820      	ldrb	r0, [r4, #0]
    1ce0:	4635      	mov	r5, r6
    1ce2:	2802      	cmp	r0, #2
    1ce4:	d004      	beq.n	1cf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    1ce6:	f240 41df 	movw	r1, #1247	; 0x4df
    1cea:	2027      	movs	r0, #39	; 0x27
    1cec:	f7fe fe60 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1cf0:	7ba0      	ldrb	r0, [r4, #14]
    1cf2:	0640      	lsls	r0, r0, #25
    1cf4:	d406      	bmi.n	1d04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    1cf6:	2040      	movs	r0, #64	; 0x40
    1cf8:	f7ff ff7a 	bl	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1cfc:	89e0      	ldrh	r0, [r4, #14]
    1cfe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1d02:	81e0      	strh	r0, [r4, #14]
    1d04:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    1d08:	f1b9 0f00 	cmp.w	r9, #0
    1d0c:	d03a      	beq.n	1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1d0e:	b180      	cbz	r0, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d10:	f005 fc96 	bl	7640 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1d14:	f005 fc70 	bl	75f8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1d18:	b958      	cbnz	r0, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d1c:	7841      	ldrb	r1, [r0, #1]
    1d1e:	b141      	cbz	r1, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d20:	7800      	ldrb	r0, [r0, #0]
    1d22:	7e39      	ldrb	r1, [r7, #24]
    1d24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d28:	4288      	cmp	r0, r1
    1d2a:	d102      	bne.n	1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d2c:	2001      	movs	r0, #1
    1d2e:	7060      	strb	r0, [r4, #1]
    1d30:	e097      	b.n	1e62 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x116>
    1d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d34:	7841      	ldrb	r1, [r0, #1]
    1d36:	8161      	strh	r1, [r4, #10]
    1d38:	b121      	cbz	r1, 1d44 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    1d3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1d3c:	f00b f976 	bl	d02c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1d40:	62a0      	str	r0, [r4, #40]	; 0x28
    1d42:	e000      	b.n	1d46 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    1d44:	62a5      	str	r5, [r4, #40]	; 0x28
    1d46:	89e0      	ldrh	r0, [r4, #14]
    1d48:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1d4c:	81e0      	strh	r0, [r4, #14]
    1d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d50:	7df9      	ldrb	r1, [r7, #23]
    1d52:	7800      	ldrb	r0, [r0, #0]
    1d54:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1d58:	4288      	cmp	r0, r1
    1d5a:	d007      	beq.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	a803      	add	r0, sp, #12
    1d5e:	f000 f98b 	bl	2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    1d62:	89e0      	ldrh	r0, [r4, #14]
    1d64:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1d68:	81e0      	strh	r0, [r4, #14]
    1d6a:	e000      	b.n	1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d6c:	2601      	movs	r6, #1
    1d6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d70:	7e39      	ldrb	r1, [r7, #24]
    1d72:	7800      	ldrb	r0, [r0, #0]
    1d74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d78:	4288      	cmp	r0, r1
    1d7a:	d10d      	bne.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d7c:	a802      	add	r0, sp, #8
    1d7e:	f000 f931 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1d82:	e009      	b.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d84:	b108      	cbz	r0, 1d8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e>
    1d86:	f005 fc55 	bl	7634 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1d8a:	78a0      	ldrb	r0, [r4, #2]
    1d8c:	1c40      	adds	r0, r0, #1
    1d8e:	70a0      	strb	r0, [r4, #2]
    1d90:	89e0      	ldrh	r0, [r4, #14]
    1d92:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1d96:	81e0      	strh	r0, [r4, #14]
    1d98:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>
    1d9c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    1da0:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1da4:	b190      	cbz	r0, 1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1da6:	f7ff ff17 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1daa:	4931      	ldr	r1, [pc, #196]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1dac:	760d      	strb	r5, [r1, #24]
    1dae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1db2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1db6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1dba:	f00b fc17 	bl	d5ec <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1dbe:	4603      	mov	r3, r0
    1dc0:	22fb      	movs	r2, #251	; 0xfb
    1dc2:	492b      	ldr	r1, [pc, #172]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1dc4:	4628      	mov	r0, r5
    1dc6:	9500      	str	r5, [sp, #0]
    1dc8:	f005 fb6c 	bl	74a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1dcc:	f04f 0800 	mov.w	r8, #0
    1dd0:	f1bb 0f00 	cmp.w	fp, #0
    1dd4:	d104      	bne.n	1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1dd6:	78a1      	ldrb	r1, [r4, #2]
    1dd8:	2001      	movs	r0, #1
    1dda:	f7ff ff0f 	bl	1bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1dde:	b120      	cbz	r0, 1dea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1de0:	f005 ffe6 	bl	7db0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1de4:	f04f 0801 	mov.w	r8, #1
    1de8:	e002      	b.n	1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1dea:	2000      	movs	r0, #0
    1dec:	f000 f9d0 	bl	2190 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x444>
    1df0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1df4:	b118      	cbz	r0, 1dfe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb2>
    1df6:	a901      	add	r1, sp, #4
    1df8:	2002      	movs	r0, #2
    1dfa:	f7ff fe69 	bl	1ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    1dfe:	481c      	ldr	r0, [pc, #112]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1e00:	8aba      	ldrh	r2, [r7, #20]
    1e02:	304a      	adds	r0, #74	; 0x4a
    1e04:	b13e      	cbz	r6, 1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e06:	b91a      	cbnz	r2, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e08:	88c2      	ldrh	r2, [r0, #6]
    1e0a:	b90a      	cbnz	r2, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e0c:	8902      	ldrh	r2, [r0, #8]
    1e0e:	b112      	cbz	r2, 1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e10:	8942      	ldrh	r2, [r0, #10]
    1e12:	1c52      	adds	r2, r2, #1
    1e14:	8142      	strh	r2, [r0, #10]
    1e16:	f1b9 0f00 	cmp.w	r9, #0
    1e1a:	d004      	beq.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e1c:	88c1      	ldrh	r1, [r0, #6]
    1e1e:	1c49      	adds	r1, r1, #1
    1e20:	80c1      	strh	r1, [r0, #6]
    1e22:	70a5      	strb	r5, [r4, #2]
    1e24:	e002      	b.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e26:	8901      	ldrh	r1, [r0, #8]
    1e28:	1c49      	adds	r1, r1, #1
    1e2a:	8101      	strh	r1, [r0, #8]
    1e2c:	480f      	ldr	r0, [pc, #60]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1e2e:	303c      	adds	r0, #60	; 0x3c
    1e30:	f001 f8e4 	bl	2ffc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1e34:	9803      	ldr	r0, [sp, #12]
    1e36:	b140      	cbz	r0, 1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e38:	f00a ffd8 	bl	cdec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1e3c:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	7205      	strb	r5, [r0, #8]
    1e44:	2208      	movs	r2, #8
    1e46:	f00b ffdf 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e4a:	9801      	ldr	r0, [sp, #4]
    1e4c:	b130      	cbz	r0, 1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1e4e:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e52:	7205      	strb	r5, [r0, #8]
    1e54:	2210      	movs	r2, #16
    1e56:	9801      	ldr	r0, [sp, #4]
    1e58:	f00b ffd6 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e5c:	f1b8 0f00 	cmp.w	r8, #0
    1e60:	d001      	beq.n	1e66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e62:	f000 f865 	bl	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1e66:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1e6a:	0000      	.short	0x0000
    1e6c:	20000084 	.word	0x20000084
    1e70:	20000d58 	.word	0x20000d58
    1e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e78:	4688      	mov	r8, r1
    1e7a:	4681      	mov	r9, r0
    1e7c:	f7ff feb2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1e80:	4d29      	ldr	r5, [pc, #164]	; (1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1e82:	4604      	mov	r4, r0
    1e84:	7828      	ldrb	r0, [r5, #0]
    1e86:	2801      	cmp	r0, #1
    1e88:	d004      	beq.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e8a:	f240 416b 	movw	r1, #1131	; 0x46b
    1e8e:	2027      	movs	r0, #39	; 0x27
    1e90:	f7fe fd8e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e94:	7c20      	ldrb	r0, [r4, #16]
    1e96:	2700      	movs	r7, #0
    1e98:	2601      	movs	r6, #1
    1e9a:	b128      	cbz	r0, 1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e9c:	7427      	strb	r7, [r4, #16]
    1e9e:	2100      	movs	r1, #0
    1ea0:	2004      	movs	r0, #4
    1ea2:	f7ff fe91 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ea6:	74a6      	strb	r6, [r4, #18]
    1ea8:	6a29      	ldr	r1, [r5, #32]
    1eaa:	7808      	ldrb	r0, [r1, #0]
    1eac:	43c0      	mvns	r0, r0
    1eae:	0780      	lsls	r0, r0, #30
    1eb0:	d109      	bne.n	1ec6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17a>
    1eb2:	7da0      	ldrb	r0, [r4, #22]
    1eb4:	bb88      	cbnz	r0, 1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1eb6:	2002      	movs	r0, #2
    1eb8:	f7ff fe86 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ebc:	6a28      	ldr	r0, [r5, #32]
    1ebe:	7800      	ldrb	r0, [r0, #0]
    1ec0:	43c0      	mvns	r0, r0
    1ec2:	0780      	lsls	r0, r0, #30
    1ec4:	d029      	beq.n	1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1ec6:	6a28      	ldr	r0, [r5, #32]
    1ec8:	7840      	ldrb	r0, [r0, #1]
    1eca:	b110      	cbz	r0, 1ed2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x186>
    1ecc:	2002      	movs	r0, #2
    1ece:	75a0      	strb	r0, [r4, #22]
    1ed0:	e000      	b.n	1ed4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>
    1ed2:	75a6      	strb	r6, [r4, #22]
    1ed4:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1ed8:	b198      	cbz	r0, 1f02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b6>
    1eda:	f7ff fe7d 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1ede:	4913      	ldr	r1, [pc, #76]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1ee0:	7a2d      	ldrb	r5, [r5, #8]
    1ee2:	760e      	strb	r6, [r1, #24]
    1ee4:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1ee8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1eec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1ef0:	f00b fb7c 	bl	d5ec <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1ef4:	4603      	mov	r3, r0
    1ef6:	462a      	mov	r2, r5
    1ef8:	490c      	ldr	r1, [pc, #48]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1efa:	4630      	mov	r0, r6
    1efc:	9700      	str	r7, [sp, #0]
    1efe:	f005 fad1 	bl	74a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1f02:	ea38 0009 	bics.w	r0, r8, r9
    1f06:	d004      	beq.n	1f12 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c6>
    1f08:	2100      	movs	r1, #0
    1f0a:	4608      	mov	r0, r1
    1f0c:	f7ff fe76 	bl	1bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1f10:	b128      	cbz	r0, 1f1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f16:	f000 b80b 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f1a:	2003      	movs	r0, #3
    1f1c:	e7d7      	b.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1f1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f22:	2000      	movs	r0, #0
    1f24:	f000 b8f6 	b.w	2114 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c8>
    1f28:	20000084 	.word	0x20000084
    1f2c:	20000d58 	.word	0x20000d58
    1f30:	b510      	push	{r4, lr}
    1f32:	f005 fc25 	bl	7780 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1f36:	f005 fb49 	bl	75cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1f3a:	4c0d      	ldr	r4, [pc, #52]	; (1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>)
    1f3c:	89e0      	ldrh	r0, [r4, #14]
    1f3e:	f7ff fe57 	bl	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1f42:	480c      	ldr	r0, [pc, #48]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f44:	7f00      	ldrb	r0, [r0, #28]
    1f46:	b158      	cbz	r0, 1f60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>
    1f48:	490a      	ldr	r1, [pc, #40]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f4a:	220e      	movs	r2, #14
    1f4c:	f101 000e 	add.w	r0, r1, #14
    1f50:	f00e fae5 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f54:	4807      	ldr	r0, [pc, #28]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f56:	2202      	movs	r2, #2
    1f58:	4907      	ldr	r1, [pc, #28]	; (1f78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22c>)
    1f5a:	301d      	adds	r0, #29
    1f5c:	f00b ff68 	bl	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1f60:	69e2      	ldr	r2, [r4, #28]
    1f62:	7921      	ldrb	r1, [r4, #4]
    1f64:	7860      	ldrb	r0, [r4, #1]
    1f66:	4790      	blx	r2
    1f68:	2000      	movs	r0, #0
    1f6a:	7020      	strb	r0, [r4, #0]
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	0000      	.short	0x0000
    1f70:	20000084 	.word	0x20000084
    1f74:	20000da2 	.word	0x20000da2
    1f78:	00001bb1 	.word	0x00001bb1
    1f7c:	4808      	ldr	r0, [pc, #32]	; (1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>)
    1f7e:	b510      	push	{r4, lr}
    1f80:	7800      	ldrb	r0, [r0, #0]
    1f82:	2802      	cmp	r0, #2
    1f84:	d004      	beq.n	1f90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>
    1f86:	f240 2149 	movw	r1, #585	; 0x249
    1f8a:	2027      	movs	r0, #39	; 0x27
    1f8c:	f7fe fd10 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f90:	4904      	ldr	r1, [pc, #16]	; (1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>)
    1f92:	2001      	movs	r0, #1
    1f94:	7308      	strb	r0, [r1, #12]
    1f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f9a:	f7ff bfc9 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f9e:	0000      	.short	0x0000
    1fa0:	20000084 	.word	0x20000084
    1fa4:	20000da2 	.word	0x20000da2
    1fa8:	b430      	push	{r4, r5}
    1faa:	4604      	mov	r4, r0
    1fac:	480c      	ldr	r0, [pc, #48]	; (1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1fae:	7a00      	ldrb	r0, [r0, #8]
    1fb0:	b10b      	cbz	r3, 1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1fb2:	1d00      	adds	r0, r0, #4
    1fb4:	b2c0      	uxtb	r0, r0
    1fb6:	b93a      	cbnz	r2, 1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fb8:	28ff      	cmp	r0, #255	; 0xff
    1fba:	d105      	bne.n	1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fbc:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1fc0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1fc4:	429a      	cmp	r2, r3
    1fc6:	d009      	beq.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    1fc8:	b121      	cbz	r1, 1fd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x288>
    1fca:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1fce:	bc30      	pop	{r4, r5}
    1fd0:	f005 bf12 	b.w	7df8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1fd4:	20ff      	movs	r0, #255	; 0xff
    1fd6:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1fda:	e7f8      	b.n	1fce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x282>
    1fdc:	bc30      	pop	{r4, r5}
    1fde:	4770      	bx	lr
    1fe0:	20000084 	.word	0x20000084
    1fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fe8:	4607      	mov	r7, r0
    1fea:	f7ff fdfb 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1fee:	4c21      	ldr	r4, [pc, #132]	; (2074 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x328>)
    1ff0:	4605      	mov	r5, r0
    1ff2:	2601      	movs	r6, #1
    1ff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ff6:	7808      	ldrb	r0, [r1, #0]
    1ff8:	f000 0003 	and.w	r0, r0, #3
    1ffc:	2801      	cmp	r0, #1
    1ffe:	d00c      	beq.n	201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    2000:	2802      	cmp	r0, #2
    2002:	d00a      	beq.n	201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    2004:	2803      	cmp	r0, #3
    2006:	d11b      	bne.n	2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    2008:	742e      	strb	r6, [r5, #16]
    200a:	89e0      	ldrh	r0, [r4, #14]
    200c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    2010:	81e0      	strh	r0, [r4, #14]
    2012:	2001      	movs	r0, #1
    2014:	f7ff fdd8 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2018:	e012      	b.n	2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    201a:	7848      	ldrb	r0, [r1, #1]
    201c:	b180      	cbz	r0, 2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    201e:	89e1      	ldrh	r1, [r4, #14]
    2020:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2024:	81e1      	strh	r1, [r4, #14]
    2026:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2028:	2900      	cmp	r1, #0
    202a:	d018      	beq.n	205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    202c:	28fb      	cmp	r0, #251	; 0xfb
    202e:	d818      	bhi.n	2062 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x316>
    2030:	7960      	ldrb	r0, [r4, #5]
    2032:	b120      	cbz	r0, 203e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f2>
    2034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2038:	2020      	movs	r0, #32
    203a:	f7ff bdd9 	b.w	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    203e:	703e      	strb	r6, [r7, #0]
    2040:	7e28      	ldrb	r0, [r5, #24]
    2042:	2801      	cmp	r0, #1
    2044:	d012      	beq.n	206c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x320>
    2046:	762e      	strb	r6, [r5, #24]
    2048:	6a60      	ldr	r0, [r4, #36]	; 0x24
    204a:	7840      	ldrb	r0, [r0, #1]
    204c:	2800      	cmp	r0, #0
    204e:	d006      	beq.n	205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    2050:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2054:	1c40      	adds	r0, r0, #1
    2056:	f141 0100 	adc.w	r1, r1, #0
    205a:	e9c5 0100 	strd	r0, r1, [r5]
    205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2062:	7920      	ldrb	r0, [r4, #4]
    2064:	f040 0010 	orr.w	r0, r0, #16
    2068:	7120      	strb	r0, [r4, #4]
    206a:	e7f8      	b.n	205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    206c:	2000      	movs	r0, #0
    206e:	7628      	strb	r0, [r5, #24]
    2070:	e7ea      	b.n	2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    2072:	0000      	.short	0x0000
    2074:	20000084 	.word	0x20000084
    2078:	b570      	push	{r4, r5, r6, lr}
    207a:	4605      	mov	r5, r0
    207c:	f7ff fdb2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2080:	4604      	mov	r4, r0
    2082:	7d80      	ldrb	r0, [r0, #22]
    2084:	2800      	cmp	r0, #0
    2086:	d02d      	beq.n	20e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x398>
    2088:	2802      	cmp	r0, #2
    208a:	d10c      	bne.n	20a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35a>
    208c:	481b      	ldr	r0, [pc, #108]	; (20fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b0>)
    208e:	4629      	mov	r1, r5
    2090:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2092:	f00a fe3a 	bl	cd0a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2096:	b330      	cbz	r0, 20e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39a>
    2098:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    209c:	1c40      	adds	r0, r0, #1
    209e:	f141 0100 	adc.w	r1, r1, #0
    20a2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20a6:	2500      	movs	r5, #0
    20a8:	75a5      	strb	r5, [r4, #22]
    20aa:	7ca0      	ldrb	r0, [r4, #18]
    20ac:	b120      	cbz	r0, 20b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    20ae:	74a5      	strb	r5, [r4, #18]
    20b0:	2100      	movs	r1, #0
    20b2:	2010      	movs	r0, #16
    20b4:	f7ff fd88 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20b8:	7c60      	ldrb	r0, [r4, #17]
    20ba:	b170      	cbz	r0, 20da <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38e>
    20bc:	7465      	strb	r5, [r4, #17]
    20be:	f7ff fb65 	bl	178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    20c2:	b198      	cbz	r0, 20ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a0>
    20c4:	2100      	movs	r1, #0
    20c6:	2008      	movs	r0, #8
    20c8:	f7ff fd7e 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20cc:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    20d0:	1c40      	adds	r0, r0, #1
    20d2:	f141 0100 	adc.w	r1, r1, #0
    20d6:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20da:	7de0      	ldrb	r0, [r4, #23]
    20dc:	2801      	cmp	r0, #1
    20de:	d00a      	beq.n	20f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3aa>
    20e0:	2001      	movs	r0, #1
    20e2:	75e0      	strb	r0, [r4, #23]
    20e4:	bd70      	pop	{r4, r5, r6, pc}
    20e6:	f240 31da 	movw	r1, #986	; 0x3da
    20ea:	e001      	b.n	20f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a4>
    20ec:	f240 31f1 	movw	r1, #1009	; 0x3f1
    20f0:	2027      	movs	r0, #39	; 0x27
    20f2:	f7fe fc5d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20f6:	75e5      	strb	r5, [r4, #23]
    20f8:	bd70      	pop	{r4, r5, r6, pc}
    20fa:	0000      	.short	0x0000
    20fc:	20000084 	.word	0x20000084
    2100:	4803      	ldr	r0, [pc, #12]	; (2110 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c4>)
    2102:	7800      	ldrb	r0, [r0, #0]
    2104:	2800      	cmp	r0, #0
    2106:	d001      	beq.n	210c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c0>
    2108:	f7ff bf12 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    210c:	4770      	bx	lr
    210e:	0000      	.short	0x0000
    2110:	20000084 	.word	0x20000084
    2114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2118:	4606      	mov	r6, r0
    211a:	f7ff fd5d 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    211e:	4680      	mov	r8, r0
    2120:	f7ff fd60 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2124:	4c18      	ldr	r4, [pc, #96]	; (2188 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x43c>)
    2126:	4605      	mov	r5, r0
    2128:	4632      	mov	r2, r6
    212a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    212c:	6260      	str	r0, [r4, #36]	; 0x24
    212e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2132:	2101      	movs	r1, #1
    2134:	4640      	mov	r0, r8
    2136:	f7ff ff37 	bl	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    213a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    213e:	2700      	movs	r7, #0
    2140:	b170      	cbz	r0, 2160 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x414>
    2142:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2144:	f005 fd8e 	bl	7c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2148:	4810      	ldr	r0, [pc, #64]	; (218c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>)
    214a:	2101      	movs	r1, #1
    214c:	7601      	strb	r1, [r0, #24]
    214e:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    2152:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2156:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2158:	6a60      	ldr	r0, [r4, #36]	; 0x24
    215a:	f005 f9f5 	bl	7548 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    215e:	e004      	b.n	216a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41e>
    2160:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2162:	f005 fd7f 	bl	7c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2166:	f005 fa31 	bl	75cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    216a:	b916      	cbnz	r6, 2172 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x426>
    216c:	4638      	mov	r0, r7
    216e:	f005 fc29 	bl	79c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2172:	2100      	movs	r1, #0
    2174:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2178:	4608      	mov	r0, r1
    217a:	f005 fdfb 	bl	7d74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    217e:	2002      	movs	r0, #2
    2180:	7020      	strb	r0, [r4, #0]
    2182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2186:	0000      	.short	0x0000
    2188:	20000084 	.word	0x20000084
    218c:	20000d58 	.word	0x20000d58
    2190:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2194:	4604      	mov	r4, r0
    2196:	f7ff fd25 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    219a:	4605      	mov	r5, r0
    219c:	f7ff fd1c 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    21a0:	2700      	movs	r7, #0
    21a2:	f88d 7000 	strb.w	r7, [sp]
    21a6:	4606      	mov	r6, r0
    21a8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2310 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c4>
    21ac:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    21b0:	4622      	mov	r2, r4
    21b2:	4639      	mov	r1, r7
    21b4:	f7ff fef8 	bl	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    21b8:	7da8      	ldrb	r0, [r5, #22]
    21ba:	f04f 0801 	mov.w	r8, #1
    21be:	f1a9 0420 	sub.w	r4, r9, #32
    21c2:	b140      	cbz	r0, 21d6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48a>
    21c4:	2801      	cmp	r0, #1
    21c6:	d020      	beq.n	220a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4be>
    21c8:	2802      	cmp	r0, #2
    21ca:	d02f      	beq.n	222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    21cc:	2803      	cmp	r0, #3
    21ce:	d03b      	beq.n	2248 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4fc>
    21d0:	f240 21fb 	movw	r1, #763	; 0x2fb
    21d4:	e057      	b.n	2286 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53a>
    21d6:	79a0      	ldrb	r0, [r4, #6]
    21d8:	2150      	movs	r1, #80	; 0x50
    21da:	f8ad 0004 	strh.w	r0, [sp, #4]
    21de:	5388      	strh	r0, [r1, r6]
    21e0:	4648      	mov	r0, r9
    21e2:	f7ff fafd 	bl	17e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    21e6:	b130      	cbz	r0, 21f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4aa>
    21e8:	2080      	movs	r0, #128	; 0x80
    21ea:	6a21      	ldr	r1, [r4, #32]
    21ec:	f7ff fcec 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    21f0:	f885 8011 	strb.w	r8, [r5, #17]
    21f4:	e02c      	b.n	2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    21f6:	466a      	mov	r2, sp
    21f8:	a901      	add	r1, sp, #4
    21fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    21fc:	f00b fa0e 	bl	d61c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    2200:	6220      	str	r0, [r4, #32]
    2202:	b110      	cbz	r0, 220a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4be>
    2204:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    2208:	b111      	cbz	r1, 2210 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c4>
    220a:	4842      	ldr	r0, [pc, #264]	; (2314 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c8>)
    220c:	6220      	str	r0, [r4, #32]
    220e:	e01f      	b.n	2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    2210:	f89d 1000 	ldrb.w	r1, [sp]
    2214:	b921      	cbnz	r1, 2220 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d4>
    2216:	8007      	strh	r7, [r0, #0]
    2218:	7087      	strb	r7, [r0, #2]
    221a:	2101      	movs	r1, #1
    221c:	f00b fd6d 	bl	dcfa <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2220:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2224:	6a20      	ldr	r0, [r4, #32]
    2226:	f00b fcf0 	bl	dc0a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    222a:	e011      	b.n	2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    222c:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2230:	f8ad 0004 	strh.w	r0, [sp, #4]
    2234:	466a      	mov	r2, sp
    2236:	a901      	add	r1, sp, #4
    2238:	6b60      	ldr	r0, [r4, #52]	; 0x34
    223a:	f00b f9ef 	bl	d61c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    223e:	6220      	str	r0, [r4, #32]
    2240:	b930      	cbnz	r0, 2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    2242:	f240 21e5 	movw	r1, #741	; 0x2e5
    2246:	e01e      	b.n	2286 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53a>
    2248:	4648      	mov	r0, r9
    224a:	f7ff fac9 	bl	17e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    224e:	b1c0      	cbz	r0, 2282 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x536>
    2250:	6a20      	ldr	r0, [r4, #32]
    2252:	2308      	movs	r3, #8
    2254:	7801      	ldrb	r1, [r0, #0]
    2256:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    225a:	7001      	strb	r1, [r0, #0]
    225c:	7dea      	ldrb	r2, [r5, #23]
    225e:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2262:	4311      	orrs	r1, r2
    2264:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2268:	7001      	strb	r1, [r0, #0]
    226a:	7e2a      	ldrb	r2, [r5, #24]
    226c:	2304      	movs	r3, #4
    226e:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2272:	4311      	orrs	r1, r2
    2274:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2278:	7001      	strb	r1, [r0, #0]
    227a:	43c9      	mvns	r1, r1
    227c:	0789      	lsls	r1, r1, #30
    227e:	d005      	beq.n	228c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x540>
    2280:	e007      	b.n	2292 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x546>
    2282:	f240 21ee 	movw	r1, #750	; 0x2ee
    2286:	2027      	movs	r0, #39	; 0x27
    2288:	f7fe fb92 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    228c:	78c0      	ldrb	r0, [r0, #3]
    228e:	2802      	cmp	r0, #2
    2290:	d00f      	beq.n	22b2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x566>
    2292:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2294:	f00a fe37 	bl	cf06 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2298:	b108      	cbz	r0, 229e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x552>
    229a:	2101      	movs	r1, #1
    229c:	e00a      	b.n	22b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x568>
    229e:	6a20      	ldr	r0, [r4, #32]
    22a0:	7800      	ldrb	r0, [r0, #0]
    22a2:	43c0      	mvns	r0, r0
    22a4:	0780      	lsls	r0, r0, #30
    22a6:	d004      	beq.n	22b2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x566>
    22a8:	f7ff fa58 	bl	175c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    22ac:	f080 0101 	eor.w	r1, r0, #1
    22b0:	e000      	b.n	22b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x568>
    22b2:	2100      	movs	r1, #0
    22b4:	6a20      	ldr	r0, [r4, #32]
    22b6:	7802      	ldrb	r2, [r0, #0]
    22b8:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    22bc:	7001      	strb	r1, [r0, #0]
    22be:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    22c2:	b181      	cbz	r1, 22e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x59a>
    22c4:	7841      	ldrb	r1, [r0, #1]
    22c6:	b171      	cbz	r1, 22e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x59a>
    22c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22ca:	f005 fccb 	bl	7c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ce:	4811      	ldr	r0, [pc, #68]	; (2314 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c8>)
    22d0:	3828      	subs	r0, #40	; 0x28
    22d2:	7607      	strb	r7, [r0, #24]
    22d4:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    22d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    22dc:	6a21      	ldr	r1, [r4, #32]
    22de:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22e0:	f005 f932 	bl	7548 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    22e4:	e003      	b.n	22ee <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a2>
    22e6:	f005 fcbd 	bl	7c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ea:	f005 f96f 	bl	75cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    22ee:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    22f2:	2101      	movs	r1, #1
    22f4:	2000      	movs	r0, #0
    22f6:	f005 fd3d 	bl	7d74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    22fa:	f884 8003 	strb.w	r8, [r4, #3]
    22fe:	6a21      	ldr	r1, [r4, #32]
    2300:	880a      	ldrh	r2, [r1, #0]
    2302:	8222      	strh	r2, [r4, #16]
    2304:	7889      	ldrb	r1, [r1, #2]
    2306:	74a1      	strb	r1, [r4, #18]
    2308:	f884 8000 	strb.w	r8, [r4]
    230c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2310:	200000a4 	.word	0x200000a4
    2314:	20000d80 	.word	0x20000d80
    2318:	00001f7d 	.word	0x00001f7d
    231c:	00001cc5 	.word	0x00001cc5
    2320:	00001e75 	.word	0x00001e75
    2324:	00002101 	.word	0x00002101

00002328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2328:	4800      	ldr	r0, [pc, #0]	; (232c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    232a:	4770      	bx	lr
    232c:	20001690 	.word	0x20001690

00002330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2330:	4904      	ldr	r1, [pc, #16]	; (2344 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2332:	784a      	ldrb	r2, [r1, #1]
    2334:	4282      	cmp	r2, r0
    2336:	d903      	bls.n	2340 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2338:	4408      	add	r0, r1
    233a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    233e:	4770      	bx	lr
    2340:	2000      	movs	r0, #0
    2342:	4770      	bx	lr
    2344:	20001506 	.word	0x20001506

00002348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2348:	4904      	ldr	r1, [pc, #16]	; (235c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    234a:	784a      	ldrb	r2, [r1, #1]
    234c:	4282      	cmp	r2, r0
    234e:	d903      	bls.n	2358 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2350:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2354:	3082      	adds	r0, #130	; 0x82
    2356:	4770      	bx	lr
    2358:	2000      	movs	r0, #0
    235a:	4770      	bx	lr
    235c:	20001506 	.word	0x20001506

00002360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2360:	4a05      	ldr	r2, [pc, #20]	; (2378 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2362:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    236a:	6802      	ldr	r2, [r0, #0]
    236c:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2370:	8880      	ldrh	r0, [r0, #4]
    2372:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2376:	4770      	bx	lr
    2378:	20001506 	.word	0x20001506

0000237c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    237c:	4904      	ldr	r1, [pc, #16]	; (2390 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    237e:	784a      	ldrb	r2, [r1, #1]
    2380:	4282      	cmp	r2, r0
    2382:	d903      	bls.n	238c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2384:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2388:	1c80      	adds	r0, r0, #2
    238a:	4770      	bx	lr
    238c:	2000      	movs	r0, #0
    238e:	4770      	bx	lr
    2390:	20001506 	.word	0x20001506

00002394 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2394:	b510      	push	{r4, lr}
    2396:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    239a:	2100      	movs	r1, #0
    239c:	4805      	ldr	r0, [pc, #20]	; (23b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    239e:	f00e f938 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    23a2:	4805      	ldr	r0, [pc, #20]	; (23b8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    23a4:	2100      	movs	r1, #0
    23a6:	7001      	strb	r1, [r0, #0]
    23a8:	7041      	strb	r1, [r0, #1]
    23aa:	f44f 7161 	mov.w	r1, #900	; 0x384
    23ae:	8041      	strh	r1, [r0, #2]
    23b0:	bd10      	pop	{r4, pc}
    23b2:	0000      	.short	0x0000
    23b4:	20001506 	.word	0x20001506
    23b8:	20000358 	.word	0x20000358

000023bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    23bc:	4b0b      	ldr	r3, [pc, #44]	; (23ec <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    23be:	b510      	push	{r4, lr}
    23c0:	785c      	ldrb	r4, [r3, #1]
    23c2:	4284      	cmp	r4, r0
    23c4:	d910      	bls.n	23e8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    23c6:	4418      	add	r0, r3
    23c8:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    23cc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    23d0:	4418      	add	r0, r3
    23d2:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    23d6:	700b      	strb	r3, [r1, #0]
    23d8:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    23dc:	6011      	str	r1, [r2, #0]
    23de:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    23e2:	8090      	strh	r0, [r2, #4]
    23e4:	2001      	movs	r0, #1
    23e6:	bd10      	pop	{r4, pc}
    23e8:	2000      	movs	r0, #0
    23ea:	bd10      	pop	{r4, pc}
    23ec:	20001506 	.word	0x20001506

000023f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    23f0:	4801      	ldr	r0, [pc, #4]	; (23f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    23f2:	8840      	ldrh	r0, [r0, #2]
    23f4:	4770      	bx	lr
    23f6:	0000      	.short	0x0000
    23f8:	20000358 	.word	0x20000358

000023fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    23fc:	4905      	ldr	r1, [pc, #20]	; (2414 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    23fe:	784a      	ldrb	r2, [r1, #1]
    2400:	4282      	cmp	r2, r0
    2402:	d903      	bls.n	240c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2404:	4408      	add	r0, r1
    2406:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    240a:	b108      	cbz	r0, 2410 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    240c:	2000      	movs	r0, #0
    240e:	4770      	bx	lr
    2410:	2001      	movs	r0, #1
    2412:	4770      	bx	lr
    2414:	20001506 	.word	0x20001506

00002418 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2418:	4901      	ldr	r1, [pc, #4]	; (2420 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    241a:	7048      	strb	r0, [r1, #1]
    241c:	4770      	bx	lr
    241e:	0000      	.short	0x0000
    2420:	20000358 	.word	0x20000358
    2424:	4602      	mov	r2, r0
    2426:	4809      	ldr	r0, [pc, #36]	; (244c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2428:	b510      	push	{r4, lr}
    242a:	7800      	ldrb	r0, [r0, #0]
    242c:	460b      	mov	r3, r1
    242e:	b158      	cbz	r0, 2448 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2430:	4807      	ldr	r0, [pc, #28]	; (2450 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2432:	7841      	ldrb	r1, [r0, #1]
    2434:	b141      	cbz	r1, 2448 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2436:	b10b      	cbz	r3, 243c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2438:	1c80      	adds	r0, r0, #2
    243a:	e001      	b.n	2440 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    243c:	4804      	ldr	r0, [pc, #16]	; (2450 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    243e:	3082      	adds	r0, #130	; 0x82
    2440:	f004 ff8a 	bl	7358 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2444:	2001      	movs	r0, #1
    2446:	bd10      	pop	{r4, pc}
    2448:	2000      	movs	r0, #0
    244a:	bd10      	pop	{r4, pc}
    244c:	20000358 	.word	0x20000358
    2450:	20001506 	.word	0x20001506
    2454:	4908      	ldr	r1, [pc, #32]	; (2478 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    2456:	b510      	push	{r4, lr}
    2458:	4603      	mov	r3, r0
    245a:	2000      	movs	r0, #0
    245c:	784a      	ldrb	r2, [r1, #1]
    245e:	e006      	b.n	246e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    2460:	180c      	adds	r4, r1, r0
    2462:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    2466:	429c      	cmp	r4, r3
    2468:	d004      	beq.n	2474 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    246a:	1c40      	adds	r0, r0, #1
    246c:	b2c0      	uxtb	r0, r0
    246e:	4282      	cmp	r2, r0
    2470:	d8f6      	bhi.n	2460 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    2472:	2008      	movs	r0, #8
    2474:	bd10      	pop	{r4, pc}
    2476:	0000      	.short	0x0000
    2478:	20001506 	.word	0x20001506
    247c:	b5f0      	push	{r4, r5, r6, r7, lr}
    247e:	4c1a      	ldr	r4, [pc, #104]	; (24e8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    2480:	4603      	mov	r3, r0
    2482:	2000      	movs	r0, #0
    2484:	7825      	ldrb	r5, [r4, #0]
    2486:	e02b      	b.n	24e0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    2488:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    248c:	4422      	add	r2, r4
    248e:	780f      	ldrb	r7, [r1, #0]
    2490:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    2494:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    2498:	ea87 070c 	eor.w	r7, r7, ip
    249c:	405e      	eors	r6, r3
    249e:	443e      	add	r6, r7
    24a0:	784f      	ldrb	r7, [r1, #1]
    24a2:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    24a6:	ea87 070c 	eor.w	r7, r7, ip
    24aa:	443e      	add	r6, r7
    24ac:	788f      	ldrb	r7, [r1, #2]
    24ae:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    24b2:	ea87 070c 	eor.w	r7, r7, ip
    24b6:	443e      	add	r6, r7
    24b8:	78cf      	ldrb	r7, [r1, #3]
    24ba:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    24be:	ea87 070c 	eor.w	r7, r7, ip
    24c2:	443e      	add	r6, r7
    24c4:	790f      	ldrb	r7, [r1, #4]
    24c6:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24ca:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    24ce:	ea87 070c 	eor.w	r7, r7, ip
    24d2:	443e      	add	r6, r7
    24d4:	794f      	ldrb	r7, [r1, #5]
    24d6:	4057      	eors	r7, r2
    24d8:	42f7      	cmn	r7, r6
    24da:	d004      	beq.n	24e6 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    24dc:	1c40      	adds	r0, r0, #1
    24de:	b2c0      	uxtb	r0, r0
    24e0:	4285      	cmp	r5, r0
    24e2:	d8d1      	bhi.n	2488 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    24e4:	2008      	movs	r0, #8
    24e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24e8:	20001506 	.word	0x20001506

000024ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    24ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24f0:	4604      	mov	r4, r0
    24f2:	f100 0580 	add.w	r5, r0, #128	; 0x80
    24f6:	f04f 0901 	mov.w	r9, #1
    24fa:	b171      	cbz	r1, 251a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    24fc:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2500:	1e7e      	subs	r6, r7, #1
    2502:	2901      	cmp	r1, #1
    2504:	d029      	beq.n	255a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    2506:	2902      	cmp	r1, #2
    2508:	d04e      	beq.n	25a8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    250a:	2903      	cmp	r1, #3
    250c:	d123      	bne.n	2556 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    250e:	4639      	mov	r1, r7
    2510:	4630      	mov	r0, r6
    2512:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2516:	f00b ba9d 	b.w	da54 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    251a:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    251e:	2100      	movs	r1, #0
    2520:	f00e f877 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2524:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2528:	4924      	ldr	r1, [pc, #144]	; (25bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    252a:	66e9      	str	r1, [r5, #108]	; 0x6c
    252c:	4620      	mov	r0, r4
    252e:	2107      	movs	r1, #7
    2530:	6729      	str	r1, [r5, #112]	; 0x70
    2532:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2536:	f021 0104 	bic.w	r1, r1, #4
    253a:	7001      	strb	r1, [r0, #0]
    253c:	20fe      	movs	r0, #254	; 0xfe
    253e:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2542:	207f      	movs	r0, #127	; 0x7f
    2544:	7668      	strb	r0, [r5, #25]
    2546:	481e      	ldr	r0, [pc, #120]	; (25c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2548:	60a8      	str	r0, [r5, #8]
    254a:	2000      	movs	r0, #0
    254c:	e9c5 0000 	strd	r0, r0, [r5]
    2550:	2020      	movs	r0, #32
    2552:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    255a:	f04f 0800 	mov.w	r8, #0
    255e:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2562:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2566:	6921      	ldr	r1, [r4, #16]
    2568:	4816      	ldr	r0, [pc, #88]	; (25c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    256a:	460a      	mov	r2, r1
    256c:	4408      	add	r0, r1
    256e:	fbb0 f0f1 	udiv	r0, r0, r1
    2572:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2576:	f640 30b8 	movw	r0, #3000	; 0xbb8
    257a:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    257e:	8b63      	ldrh	r3, [r4, #26]
    2580:	4628      	mov	r0, r5
    2582:	f000 f821 	bl	25c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2586:	4639      	mov	r1, r7
    2588:	4630      	mov	r0, r6
    258a:	f00b fa63 	bl	da54 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    258e:	f00d ff48 	bl	10422 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2592:	b118      	cbz	r0, 259c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    2594:	6960      	ldr	r0, [r4, #20]
    2596:	f000 fbbd 	bl	2d14 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    259a:	b110      	cbz	r0, 25a2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    259c:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    25a0:	e7d9      	b.n	2556 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    25a2:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    25a6:	e7d6      	b.n	2556 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    25a8:	6901      	ldr	r1, [r0, #16]
    25aa:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    25ae:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    25b2:	4628      	mov	r0, r5
    25b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    25b8:	f000 b806 	b.w	25c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    25bc:	c404492f 	.word	0xc404492f
    25c0:	fffce000 	.word	0xfffce000
    25c4:	01c9c37f 	.word	0x01c9c37f
    25c8:	b510      	push	{r4, lr}
    25ca:	2400      	movs	r4, #0
    25cc:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    25d0:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    25d4:	434c      	muls	r4, r1
    25d6:	fbb4 f4f2 	udiv	r4, r4, r2
    25da:	f820 4910 	strh.w	r4, [r0], #-16
    25de:	f240 2471 	movw	r4, #625	; 0x271
    25e2:	4363      	muls	r3, r4
    25e4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    25e8:	1e5b      	subs	r3, r3, #1
    25ea:	fbb3 f3f2 	udiv	r3, r3, r2
    25ee:	81c3      	strh	r3, [r0, #14]
    25f0:	4b09      	ldr	r3, [pc, #36]	; (2618 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    25f2:	fbb3 f3f2 	udiv	r3, r3, r2
    25f6:	1c5b      	adds	r3, r3, #1
    25f8:	8283      	strh	r3, [r0, #20]
    25fa:	8903      	ldrh	r3, [r0, #8]
    25fc:	4363      	muls	r3, r4
    25fe:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2602:	1e5b      	subs	r3, r3, #1
    2604:	fbb3 f3f2 	udiv	r3, r3, r2
    2608:	6043      	str	r3, [r0, #4]
    260a:	6803      	ldr	r3, [r0, #0]
    260c:	434b      	muls	r3, r1
    260e:	fbb3 f1f2 	udiv	r1, r3, r2
    2612:	6001      	str	r1, [r0, #0]
    2614:	bd10      	pop	{r4, pc}
    2616:	0000      	.short	0x0000
    2618:	02625a00 	.word	0x02625a00

0000261c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    261c:	4902      	ldr	r1, [pc, #8]	; (2628 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    261e:	f991 1000 	ldrsb.w	r1, [r1]
    2622:	f00b b9c8 	b.w	d9b6 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2626:	0000      	.short	0x0000
    2628:	20000370 	.word	0x20000370

0000262c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    262c:	b508      	push	{r3, lr}
    262e:	207f      	movs	r0, #127	; 0x7f
    2630:	f88d 0000 	strb.w	r0, [sp]
    2634:	4668      	mov	r0, sp
    2636:	f005 fbc3 	bl	7dc0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    263a:	b140      	cbz	r0, 264e <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    263c:	4805      	ldr	r0, [pc, #20]	; (2654 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    263e:	7840      	ldrb	r0, [r0, #1]
    2640:	4240      	negs	r0, r0
    2642:	b241      	sxtb	r1, r0
    2644:	f99d 0000 	ldrsb.w	r0, [sp]
    2648:	f00b f9b5 	bl	d9b6 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    264c:	bd08      	pop	{r3, pc}
    264e:	f99d 0000 	ldrsb.w	r0, [sp]
    2652:	bd08      	pop	{r3, pc}
    2654:	20000370 	.word	0x20000370

00002658 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2658:	4a01      	ldr	r2, [pc, #4]	; (2660 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    265a:	7010      	strb	r0, [r2, #0]
    265c:	7051      	strb	r1, [r2, #1]
    265e:	4770      	bx	lr
    2660:	20000370 	.word	0x20000370
    2664:	b570      	push	{r4, r5, r6, lr}
    2666:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    266a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    266e:	2401      	movs	r4, #1
    2670:	fb03 2101 	mla	r1, r3, r1, r2
    2674:	2225      	movs	r2, #37	; 0x25
    2676:	fbb1 f3f2 	udiv	r3, r1, r2
    267a:	fb02 1113 	mls	r1, r2, r3, r1
    267e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    2682:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    2686:	f001 0307 	and.w	r3, r1, #7
    268a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    268e:	fa04 f303 	lsl.w	r3, r4, r3
    2692:	421a      	tst	r2, r3
    2694:	d004      	beq.n	26a0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    2696:	bf00      	nop
    2698:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    269c:	2000      	movs	r0, #0
    269e:	bd70      	pop	{r4, r5, r6, pc}
    26a0:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    26a4:	fbb1 f3f2 	udiv	r3, r1, r2
    26a8:	fb02 1113 	mls	r1, r2, r3, r1
    26ac:	1c49      	adds	r1, r1, #1
    26ae:	b2c9      	uxtb	r1, r1
    26b0:	2300      	movs	r3, #0
    26b2:	18c5      	adds	r5, r0, r3
    26b4:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    26b8:	428a      	cmp	r2, r1
    26ba:	d312      	bcc.n	26e2 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    26bc:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    26c0:	2200      	movs	r2, #0
    26c2:	bf00      	nop
    26c4:	fa04 f602 	lsl.w	r6, r4, r2
    26c8:	4235      	tst	r5, r6
    26ca:	d001      	beq.n	26d0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    26cc:	1e49      	subs	r1, r1, #1
    26ce:	b2c9      	uxtb	r1, r1
    26d0:	b121      	cbz	r1, 26dc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    26d2:	1c52      	adds	r2, r2, #1
    26d4:	b2d2      	uxtb	r2, r2
    26d6:	2a08      	cmp	r2, #8
    26d8:	d3f4      	bcc.n	26c4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    26da:	e004      	b.n	26e6 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    26dc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    26e0:	e7da      	b.n	2698 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    26e2:	1a89      	subs	r1, r1, r2
    26e4:	b2c9      	uxtb	r1, r1
    26e6:	1c5b      	adds	r3, r3, #1
    26e8:	b2db      	uxtb	r3, r3
    26ea:	2b05      	cmp	r3, #5
    26ec:	d3e1      	bcc.n	26b2 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    26ee:	201f      	movs	r0, #31
    26f0:	bd70      	pop	{r4, r5, r6, pc}
    26f2:	0000      	movs	r0, r0
    26f4:	b570      	push	{r4, r5, r6, lr}
    26f6:	1c49      	adds	r1, r1, #1
    26f8:	2300      	movs	r3, #0
    26fa:	b2c9      	uxtb	r1, r1
    26fc:	2401      	movs	r4, #1
    26fe:	18c5      	adds	r5, r0, r3
    2700:	79aa      	ldrb	r2, [r5, #6]
    2702:	428a      	cmp	r2, r1
    2704:	d312      	bcc.n	272c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    2706:	f895 5001 	ldrb.w	r5, [r5, #1]
    270a:	2200      	movs	r2, #0
    270c:	fa04 f602 	lsl.w	r6, r4, r2
    2710:	4235      	tst	r5, r6
    2712:	d001      	beq.n	2718 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    2714:	1e49      	subs	r1, r1, #1
    2716:	b2c9      	uxtb	r1, r1
    2718:	b121      	cbz	r1, 2724 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    271a:	1c52      	adds	r2, r2, #1
    271c:	b2d2      	uxtb	r2, r2
    271e:	2a08      	cmp	r2, #8
    2720:	d3f4      	bcc.n	270c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    2722:	e005      	b.n	2730 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    2724:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2728:	b2c0      	uxtb	r0, r0
    272a:	bd70      	pop	{r4, r5, r6, pc}
    272c:	1a89      	subs	r1, r1, r2
    272e:	b2c9      	uxtb	r1, r1
    2730:	1c5b      	adds	r3, r3, #1
    2732:	b2db      	uxtb	r3, r3
    2734:	2b05      	cmp	r3, #5
    2736:	d3e2      	bcc.n	26fe <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    2738:	219d      	movs	r1, #157	; 0x9d
    273a:	2046      	movs	r0, #70	; 0x46
    273c:	f7fe f938 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002740 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2740:	7841      	ldrb	r1, [r0, #1]
    2742:	b141      	cbz	r1, 2756 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2744:	78c0      	ldrb	r0, [r0, #3]
    2746:	282b      	cmp	r0, #43	; 0x2b
    2748:	d203      	bcs.n	2752 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    274a:	4a04      	ldr	r2, [pc, #16]	; (275c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    274c:	5c10      	ldrb	r0, [r2, r0]
    274e:	4288      	cmp	r0, r1
    2750:	d101      	bne.n	2756 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2752:	2001      	movs	r0, #1
    2754:	4770      	bx	lr
    2756:	2000      	movs	r0, #0
    2758:	4770      	bx	lr
    275a:	0000      	.short	0x0000
    275c:	0001075c 	.word	0x0001075c

00002760 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    2760:	b510      	push	{r4, lr}
    2762:	2201      	movs	r2, #1
    2764:	70c1      	strb	r1, [r0, #3]
    2766:	292b      	cmp	r1, #43	; 0x2b
    2768:	d202      	bcs.n	2770 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    276a:	4a06      	ldr	r2, [pc, #24]	; (2784 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    276c:	5c52      	ldrb	r2, [r2, r1]
    276e:	e006      	b.n	277e <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2770:	29ff      	cmp	r1, #255	; 0xff
    2772:	d004      	beq.n	277e <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2774:	f240 4174 	movw	r1, #1140	; 0x474
    2778:	202a      	movs	r0, #42	; 0x2a
    277a:	f7fe f919 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    277e:	7042      	strb	r2, [r0, #1]
    2780:	bd10      	pop	{r4, pc}
    2782:	0000      	.short	0x0000
    2784:	0001075c 	.word	0x0001075c

00002788 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2788:	4904      	ldr	r1, [pc, #16]	; (279c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    278a:	7c89      	ldrb	r1, [r1, #18]
    278c:	0749      	lsls	r1, r1, #29
    278e:	d400      	bmi.n	2792 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2790:	b108      	cbz	r0, 2796 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    2792:	2000      	movs	r0, #0
    2794:	4770      	bx	lr
    2796:	2001      	movs	r0, #1
    2798:	4770      	bx	lr
    279a:	0000      	.short	0x0000
    279c:	20001408 	.word	0x20001408

000027a0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    27a0:	4803      	ldr	r0, [pc, #12]	; (27b0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    27a2:	7c80      	ldrb	r0, [r0, #18]
    27a4:	0780      	lsls	r0, r0, #30
    27a6:	d401      	bmi.n	27ac <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    27a8:	2001      	movs	r0, #1
    27aa:	4770      	bx	lr
    27ac:	2000      	movs	r0, #0
    27ae:	4770      	bx	lr
    27b0:	20001408 	.word	0x20001408

000027b4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    27b4:	4803      	ldr	r0, [pc, #12]	; (27c4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    27b6:	7c80      	ldrb	r0, [r0, #18]
    27b8:	07c0      	lsls	r0, r0, #31
    27ba:	d001      	beq.n	27c0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    27bc:	2000      	movs	r0, #0
    27be:	4770      	bx	lr
    27c0:	2001      	movs	r0, #1
    27c2:	4770      	bx	lr
    27c4:	20001408 	.word	0x20001408
    27c8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    27cc:	4688      	mov	r8, r1
    27ce:	4699      	mov	r9, r3
    27d0:	4615      	mov	r5, r2
    27d2:	4604      	mov	r4, r0
    27d4:	4669      	mov	r1, sp
    27d6:	f00a ff58 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    27da:	bbe0      	cbnz	r0, 2856 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    27dc:	9e01      	ldr	r6, [sp, #4]
    27de:	2700      	movs	r7, #0
    27e0:	3680      	adds	r6, #128	; 0x80
    27e2:	b17d      	cbz	r5, 2804 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    27e4:	4620      	mov	r0, r4
    27e6:	f7fe fdbb 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    27ea:	0004      	movs	r4, r0
    27ec:	d00e      	beq.n	280c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    27ee:	4629      	mov	r1, r5
    27f0:	f00a fb5b 	bl	ceaa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    27f4:	b118      	cbz	r0, 27fe <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    27f6:	491b      	ldr	r1, [pc, #108]	; (2864 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    27f8:	8849      	ldrh	r1, [r1, #2]
    27fa:	42a9      	cmp	r1, r5
    27fc:	d208      	bcs.n	2810 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    27fe:	2000      	movs	r0, #0
    2800:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2804:	2001      	movs	r0, #1
    2806:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    280a:	e024      	b.n	2856 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    280c:	2167      	movs	r1, #103	; 0x67
    280e:	e025      	b.n	285c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2810:	4601      	mov	r1, r0
    2812:	aa02      	add	r2, sp, #8
    2814:	4620      	mov	r0, r4
    2816:	f00a fb41 	bl	ce9c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    281a:	9802      	ldr	r0, [sp, #8]
    281c:	8007      	strh	r7, [r0, #0]
    281e:	7087      	strb	r7, [r0, #2]
    2820:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2824:	b109      	cbz	r1, 282a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2826:	f04f 0802 	mov.w	r8, #2
    282a:	4641      	mov	r1, r8
    282c:	f00b fa65 	bl	dcfa <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2830:	9802      	ldr	r0, [sp, #8]
    2832:	462a      	mov	r2, r5
    2834:	4649      	mov	r1, r9
    2836:	1cc0      	adds	r0, r0, #3
    2838:	f00d fe71 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    283c:	4620      	mov	r0, r4
    283e:	4629      	mov	r1, r5
    2840:	f00a faea 	bl	ce18 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2844:	b148      	cbz	r0, 285a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2846:	4668      	mov	r0, sp
    2848:	f00b fab2 	bl	ddb0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    284c:	9801      	ldr	r0, [sp, #4]
    284e:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    2852:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2856:	2001      	movs	r0, #1
    2858:	e7d2      	b.n	2800 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    285a:	217c      	movs	r1, #124	; 0x7c
    285c:	202b      	movs	r0, #43	; 0x2b
    285e:	f7fe f8a7 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2862:	0000      	.short	0x0000
    2864:	20001408 	.word	0x20001408

00002868 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2868:	4809      	ldr	r0, [pc, #36]	; (2890 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    286a:	b082      	sub	sp, #8
    286c:	7a00      	ldrb	r0, [r0, #8]
    286e:	f88d 0000 	strb.w	r0, [sp]
    2872:	9800      	ldr	r0, [sp, #0]
    2874:	9000      	str	r0, [sp, #0]
    2876:	f89d 0000 	ldrb.w	r0, [sp]
    287a:	2800      	cmp	r0, #0
    287c:	d105      	bne.n	288a <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    287e:	2202      	movs	r2, #2
    2880:	4904      	ldr	r1, [pc, #16]	; (2894 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    2882:	4803      	ldr	r0, [pc, #12]	; (2890 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2884:	b002      	add	sp, #8
    2886:	f00b babf 	b.w	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    288a:	b002      	add	sp, #8
    288c:	4770      	bx	lr
    288e:	0000      	.short	0x0000
    2890:	20001420 	.word	0x20001420
    2894:	0000de4f 	.word	0x0000de4f

00002898 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    289c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 2a18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    28a0:	4f5e      	ldr	r7, [pc, #376]	; (2a1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    28a2:	4683      	mov	fp, r0
    28a4:	f04f 0a01 	mov.w	sl, #1
    28a8:	2600      	movs	r6, #0
    28aa:	6878      	ldr	r0, [r7, #4]
    28ac:	4635      	mov	r5, r6
    28ae:	7a00      	ldrb	r0, [r0, #8]
    28b0:	f88d 0000 	strb.w	r0, [sp]
    28b4:	9800      	ldr	r0, [sp, #0]
    28b6:	9000      	str	r0, [sp, #0]
    28b8:	f89d 1000 	ldrb.w	r1, [sp]
    28bc:	2910      	cmp	r1, #16
    28be:	d106      	bne.n	28ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    28c0:	f899 1013 	ldrb.w	r1, [r9, #19]
    28c4:	b119      	cbz	r1, 28ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    28c6:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    28ca:	2800      	cmp	r0, #0
    28cc:	d073      	beq.n	29b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    28ce:	f88d 6000 	strb.w	r6, [sp]
    28d2:	4668      	mov	r0, sp
    28d4:	f000 f906 	bl	2ae4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    28d8:	f89d 1000 	ldrb.w	r1, [sp]
    28dc:	2900      	cmp	r1, #0
    28de:	d1f8      	bne.n	28d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    28e0:	2800      	cmp	r0, #0
    28e2:	d068      	beq.n	29b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    28e4:	4604      	mov	r4, r0
    28e6:	7a00      	ldrb	r0, [r0, #8]
    28e8:	f88d 0000 	strb.w	r0, [sp]
    28ec:	9800      	ldr	r0, [sp, #0]
    28ee:	9000      	str	r0, [sp, #0]
    28f0:	f89d 8000 	ldrb.w	r8, [sp]
    28f4:	f104 0008 	add.w	r0, r4, #8
    28f8:	2105      	movs	r1, #5
    28fa:	9000      	str	r0, [sp, #0]
    28fc:	7001      	strb	r1, [r0, #0]
    28fe:	4640      	mov	r0, r8
    2900:	f1b8 0f08 	cmp.w	r8, #8
    2904:	d042      	beq.n	298c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    2906:	dc07      	bgt.n	2918 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    2908:	2802      	cmp	r0, #2
    290a:	d00d      	beq.n	2928 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    290c:	2803      	cmp	r0, #3
    290e:	d017      	beq.n	2940 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    2910:	f1b8 0f04 	cmp.w	r8, #4
    2914:	d105      	bne.n	2922 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    2916:	e01d      	b.n	2954 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    2918:	280f      	cmp	r0, #15
    291a:	d052      	beq.n	29c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    291c:	f1b8 0f10 	cmp.w	r8, #16
    2920:	d059      	beq.n	29d6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    2922:	f240 214a 	movw	r1, #586	; 0x24a
    2926:	e065      	b.n	29f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2928:	6862      	ldr	r2, [r4, #4]
    292a:	b132      	cbz	r2, 293a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    292c:	4659      	mov	r1, fp
    292e:	4620      	mov	r0, r4
    2930:	4790      	blx	r2
    2932:	2004      	movs	r0, #4
    2934:	f360 0507 	bfi	r5, r0, #0, #8
    2938:	e010      	b.n	295c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    293a:	f240 11c3 	movw	r1, #451	; 0x1c3
    293e:	e059      	b.n	29f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2940:	6862      	ldr	r2, [r4, #4]
    2942:	b122      	cbz	r2, 294e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    2944:	4659      	mov	r1, fp
    2946:	4620      	mov	r0, r4
    2948:	4790      	blx	r2
    294a:	4605      	mov	r5, r0
    294c:	e006      	b.n	295c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    294e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    2952:	e04f      	b.n	29f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2954:	6861      	ldr	r1, [r4, #4]
    2956:	b1b1      	cbz	r1, 2986 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    2958:	4620      	mov	r0, r4
    295a:	4788      	blx	r1
    295c:	f3c5 2007 	ubfx	r0, r5, #8, #8
    2960:	2801      	cmp	r0, #1
    2962:	d04a      	beq.n	29fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    2964:	f3ef 8110 	mrs	r1, PRIMASK
    2968:	b672      	cpsid	i
    296a:	7a20      	ldrb	r0, [r4, #8]
    296c:	f88d 0000 	strb.w	r0, [sp]
    2970:	9800      	ldr	r0, [sp, #0]
    2972:	9000      	str	r0, [sp, #0]
    2974:	f89d 0000 	ldrb.w	r0, [sp]
    2978:	2805      	cmp	r0, #5
    297a:	d042      	beq.n	2a02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    297c:	b3b0      	cbz	r0, 29ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    297e:	f366 0507 	bfi	r5, r6, #0, #8
    2982:	b3a1      	cbz	r1, 29ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    2984:	e041      	b.n	2a0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2986:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    298a:	e033      	b.n	29f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    298c:	6860      	ldr	r0, [r4, #4]
    298e:	465d      	mov	r5, fp
    2990:	b198      	cbz	r0, 29ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2992:	8804      	ldrh	r4, [r0, #0]
    2994:	4620      	mov	r0, r4
    2996:	f7fe fce3 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    299a:	b180      	cbz	r0, 29be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    299c:	706e      	strb	r6, [r5, #1]
    299e:	210d      	movs	r1, #13
    29a0:	7029      	strb	r1, [r5, #0]
    29a2:	80ec      	strh	r4, [r5, #6]
    29a4:	f8a5 a008 	strh.w	sl, [r5, #8]
    29a8:	f885 a004 	strb.w	sl, [r5, #4]
    29ac:	4631      	mov	r1, r6
    29ae:	f00a fb13 	bl	cfd8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    29b2:	2004      	movs	r0, #4
    29b4:	613e      	str	r6, [r7, #16]
    29b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29ba:	21e5      	movs	r1, #229	; 0xe5
    29bc:	e01a      	b.n	29f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    29be:	21c5      	movs	r1, #197	; 0xc5
    29c0:	e018      	b.n	29f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    29c2:	f88b 6001 	strb.w	r6, [fp, #1]
    29c6:	2116      	movs	r1, #22
    29c8:	f88b 1000 	strb.w	r1, [fp]
    29cc:	f8d4 1009 	ldr.w	r1, [r4, #9]
    29d0:	f8cb 1004 	str.w	r1, [fp, #4]
    29d4:	e7ad      	b.n	2932 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    29d6:	4812      	ldr	r0, [pc, #72]	; (2a20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    29d8:	6802      	ldr	r2, [r0, #0]
    29da:	b122      	cbz	r2, 29e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29dc:	6860      	ldr	r0, [r4, #4]
    29de:	b138      	cbz	r0, 29f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    29e0:	8800      	ldrh	r0, [r0, #0]
    29e2:	4659      	mov	r1, fp
    29e4:	4790      	blx	r2
    29e6:	2002      	movs	r0, #2
    29e8:	613e      	str	r6, [r7, #16]
    29ea:	e7e4      	b.n	29b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    29ec:	e009      	b.n	2a02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    29ee:	e00b      	b.n	2a08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    29f0:	f44f 7110 	mov.w	r1, #576	; 0x240
    29f4:	2010      	movs	r0, #16
    29f6:	f7fd ffdb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29fa:	9800      	ldr	r0, [sp, #0]
    29fc:	4641      	mov	r1, r8
    29fe:	7001      	strb	r1, [r0, #0]
    2a00:	e003      	b.n	2a0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2a02:	7226      	strb	r6, [r4, #8]
    2a04:	613e      	str	r6, [r7, #16]
    2a06:	e7bc      	b.n	2982 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    2a08:	b662      	cpsie	i
    2a0a:	f015 0fff 	tst.w	r5, #255	; 0xff
    2a0e:	f43f af4c 	beq.w	28aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    2a12:	b2e8      	uxtb	r0, r5
    2a14:	e7cf      	b.n	29b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2a16:	0000      	.short	0x0000
    2a18:	20001408 	.word	0x20001408
    2a1c:	20001434 	.word	0x20001434
    2a20:	200000c8 	.word	0x200000c8

00002a24 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2a24:	4901      	ldr	r1, [pc, #4]	; (2a2c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2a26:	7008      	strb	r0, [r1, #0]
    2a28:	f000 b8be 	b.w	2ba8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    2a2c:	20000372 	.word	0x20000372

00002a30 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    2a30:	4902      	ldr	r1, [pc, #8]	; (2a3c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    2a32:	4801      	ldr	r0, [pc, #4]	; (2a38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    2a34:	6008      	str	r0, [r1, #0]
    2a36:	4770      	bx	lr
    2a38:	00002a41 	.word	0x00002a41
    2a3c:	200000c8 	.word	0x200000c8
    2a40:	b538      	push	{r3, r4, r5, lr}
    2a42:	000d      	movs	r5, r1
    2a44:	d014      	beq.n	2a70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    2a46:	80a8      	strh	r0, [r5, #4]
    2a48:	2100      	movs	r1, #0
    2a4a:	7269      	strb	r1, [r5, #9]
    2a4c:	f7fe fc72 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2a50:	4604      	mov	r4, r0
    2a52:	f00a fa05 	bl	ce60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2a56:	b170      	cbz	r0, 2a76 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    2a58:	4601      	mov	r1, r0
    2a5a:	466a      	mov	r2, sp
    2a5c:	4620      	mov	r0, r4
    2a5e:	f00a fa1d 	bl	ce9c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2a62:	80e8      	strh	r0, [r5, #6]
    2a64:	b150      	cbz	r0, 2a7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    2a66:	28fb      	cmp	r0, #251	; 0xfb
    2a68:	d90b      	bls.n	2a82 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    2a6a:	f240 1123 	movw	r1, #291	; 0x123
    2a6e:	e033      	b.n	2ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a70:	f240 1113 	movw	r1, #275	; 0x113
    2a74:	e030      	b.n	2ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a76:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2a7a:	e02d      	b.n	2ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a7c:	f240 1121 	movw	r1, #289	; 0x121
    2a80:	e02a      	b.n	2ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a82:	9800      	ldr	r0, [sp, #0]
    2a84:	f00b f8e5 	bl	dc52 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2a88:	2801      	cmp	r0, #1
    2a8a:	d004      	beq.n	2a96 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2a8c:	2802      	cmp	r0, #2
    2a8e:	d002      	beq.n	2a96 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2a90:	f240 1133 	movw	r1, #307	; 0x133
    2a94:	e020      	b.n	2ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a96:	7228      	strb	r0, [r5, #8]
    2a98:	6828      	ldr	r0, [r5, #0]
    2a9a:	b1a8      	cbz	r0, 2ac8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    2a9c:	9900      	ldr	r1, [sp, #0]
    2a9e:	88ea      	ldrh	r2, [r5, #6]
    2aa0:	1cc9      	adds	r1, r1, #3
    2aa2:	f00d fd3c 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2aa6:	4620      	mov	r0, r4
    2aa8:	f00a f9a2 	bl	cdf0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2aac:	b178      	cbz	r0, 2ace <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    2aae:	4620      	mov	r0, r4
    2ab0:	2100      	movs	r1, #0
    2ab2:	f00a fa91 	bl	cfd8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2ab6:	b168      	cbz	r0, 2ad4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    2ab8:	4809      	ldr	r0, [pc, #36]	; (2ae0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    2aba:	7cc1      	ldrb	r1, [r0, #19]
    2abc:	2900      	cmp	r1, #0
    2abe:	d002      	beq.n	2ac6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    2ac0:	8a81      	ldrh	r1, [r0, #20]
    2ac2:	1e49      	subs	r1, r1, #1
    2ac4:	8281      	strh	r1, [r0, #20]
    2ac6:	bd38      	pop	{r3, r4, r5, pc}
    2ac8:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2acc:	e004      	b.n	2ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2ace:	f240 113f 	movw	r1, #319	; 0x13f
    2ad2:	e001      	b.n	2ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2ad4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2ad8:	2010      	movs	r0, #16
    2ada:	f7fd ff69 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ade:	0000      	.short	0x0000
    2ae0:	20001408 	.word	0x20001408
    2ae4:	b538      	push	{r3, r4, r5, lr}
    2ae6:	4603      	mov	r3, r0
    2ae8:	4917      	ldr	r1, [pc, #92]	; (2b48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    2aea:	2000      	movs	r0, #0
    2aec:	7018      	strb	r0, [r3, #0]
    2aee:	6908      	ldr	r0, [r1, #16]
    2af0:	2401      	movs	r4, #1
    2af2:	b140      	cbz	r0, 2b06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    2af4:	7a02      	ldrb	r2, [r0, #8]
    2af6:	f88d 2000 	strb.w	r2, [sp]
    2afa:	9a00      	ldr	r2, [sp, #0]
    2afc:	9200      	str	r2, [sp, #0]
    2afe:	f89d 5000 	ldrb.w	r5, [sp]
    2b02:	2d00      	cmp	r5, #0
    2b04:	d111      	bne.n	2b2a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    2b06:	6848      	ldr	r0, [r1, #4]
    2b08:	7a02      	ldrb	r2, [r0, #8]
    2b0a:	f88d 2000 	strb.w	r2, [sp]
    2b0e:	9a00      	ldr	r2, [sp, #0]
    2b10:	9200      	str	r2, [sp, #0]
    2b12:	f89d 5000 	ldrb.w	r5, [sp]
    2b16:	2d01      	cmp	r5, #1
    2b18:	d006      	beq.n	2b28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    2b1a:	f3ef 8210 	mrs	r2, PRIMASK
    2b1e:	b672      	cpsid	i
    2b20:	6805      	ldr	r5, [r0, #0]
    2b22:	604d      	str	r5, [r1, #4]
    2b24:	b112      	cbz	r2, 2b2c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    2b26:	e002      	b.n	2b2e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    2b28:	2000      	movs	r0, #0
    2b2a:	bd38      	pop	{r3, r4, r5, pc}
    2b2c:	b662      	cpsie	i
    2b2e:	7a02      	ldrb	r2, [r0, #8]
    2b30:	f88d 2000 	strb.w	r2, [sp]
    2b34:	9a00      	ldr	r2, [sp, #0]
    2b36:	9200      	str	r2, [sp, #0]
    2b38:	f89d 5000 	ldrb.w	r5, [sp]
    2b3c:	b10d      	cbz	r5, 2b42 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    2b3e:	6108      	str	r0, [r1, #16]
    2b40:	bd38      	pop	{r3, r4, r5, pc}
    2b42:	701c      	strb	r4, [r3, #0]
    2b44:	bd38      	pop	{r3, r4, r5, pc}
    2b46:	0000      	.short	0x0000
    2b48:	20001434 	.word	0x20001434
    2b4c:	b538      	push	{r3, r4, r5, lr}
    2b4e:	b1d0      	cbz	r0, 2b86 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    2b50:	6041      	str	r1, [r0, #4]
    2b52:	f100 0108 	add.w	r1, r0, #8
    2b56:	700a      	strb	r2, [r1, #0]
    2b58:	f3ef 8310 	mrs	r3, PRIMASK
    2b5c:	b672      	cpsid	i
    2b5e:	4c10      	ldr	r4, [pc, #64]	; (2ba0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    2b60:	6004      	str	r4, [r0, #0]
    2b62:	1f21      	subs	r1, r4, #4
    2b64:	684a      	ldr	r2, [r1, #4]
    2b66:	b14a      	cbz	r2, 2b7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2b68:	7a12      	ldrb	r2, [r2, #8]
    2b6a:	f88d 2000 	strb.w	r2, [sp]
    2b6e:	9a00      	ldr	r2, [sp, #0]
    2b70:	9200      	str	r2, [sp, #0]
    2b72:	f89d 5000 	ldrb.w	r5, [sp]
    2b76:	2d01      	cmp	r5, #1
    2b78:	d100      	bne.n	2b7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2b7a:	600c      	str	r4, [r1, #0]
    2b7c:	680a      	ldr	r2, [r1, #0]
    2b7e:	6010      	str	r0, [r2, #0]
    2b80:	6008      	str	r0, [r1, #0]
    2b82:	b12b      	cbz	r3, 2b90 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    2b84:	e005      	b.n	2b92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    2b86:	f240 2175 	movw	r1, #629	; 0x275
    2b8a:	2010      	movs	r0, #16
    2b8c:	f7fd ff10 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b90:	b662      	cpsie	i
    2b92:	4804      	ldr	r0, [pc, #16]	; (2ba4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    2b94:	7800      	ldrb	r0, [r0, #0]
    2b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2b9a:	f009 ba7f 	b.w	c09c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b9e:	0000      	.short	0x0000
    2ba0:	20001438 	.word	0x20001438
    2ba4:	20000372 	.word	0x20000372
    2ba8:	b510      	push	{r4, lr}
    2baa:	2214      	movs	r2, #20
    2bac:	2100      	movs	r1, #0
    2bae:	4808      	ldr	r0, [pc, #32]	; (2bd0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2bb0:	f00d fd2f 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2bb4:	4806      	ldr	r0, [pc, #24]	; (2bd0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2bb6:	2212      	movs	r2, #18
    2bb8:	2100      	movs	r1, #0
    2bba:	3814      	subs	r0, #20
    2bbc:	f00d fd29 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2bc0:	4803      	ldr	r0, [pc, #12]	; (2bd0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2bc2:	2101      	movs	r1, #1
    2bc4:	7301      	strb	r1, [r0, #12]
    2bc6:	1d01      	adds	r1, r0, #4
    2bc8:	6041      	str	r1, [r0, #4]
    2bca:	6001      	str	r1, [r0, #0]
    2bcc:	bd10      	pop	{r4, pc}
    2bce:	0000      	.short	0x0000
    2bd0:	20001434 	.word	0x20001434

00002bd4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2bd4:	b4f0      	push	{r4, r5, r6, r7}
    2bd6:	8150      	strh	r0, [r2, #10]
    2bd8:	890c      	ldrh	r4, [r1, #8]
    2bda:	8194      	strh	r4, [r2, #12]
    2bdc:	898b      	ldrh	r3, [r1, #12]
    2bde:	81d3      	strh	r3, [r2, #14]
    2be0:	8948      	ldrh	r0, [r1, #10]
    2be2:	8210      	strh	r0, [r2, #16]
    2be4:	89cd      	ldrh	r5, [r1, #14]
    2be6:	8255      	strh	r5, [r2, #18]
    2be8:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2bea:	42ae      	cmp	r6, r5
    2bec:	d108      	bne.n	2c00 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2bee:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2bf0:	4285      	cmp	r5, r0
    2bf2:	d105      	bne.n	2c00 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2bf4:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2bf6:	429d      	cmp	r5, r3
    2bf8:	d102      	bne.n	2c00 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2bfa:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    2bfc:	42a3      	cmp	r3, r4
    2bfe:	d001      	beq.n	2c04 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    2c00:	2301      	movs	r3, #1
    2c02:	e000      	b.n	2c06 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2c04:	2300      	movs	r3, #0
    2c06:	7513      	strb	r3, [r2, #20]
    2c08:	8548      	strh	r0, [r1, #42]	; 0x2a
    2c0a:	8a50      	ldrh	r0, [r2, #18]
    2c0c:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2c0e:	8990      	ldrh	r0, [r2, #12]
    2c10:	8588      	strh	r0, [r1, #44]	; 0x2c
    2c12:	89d0      	ldrh	r0, [r2, #14]
    2c14:	8608      	strh	r0, [r1, #48]	; 0x30
    2c16:	bcf0      	pop	{r4, r5, r6, r7}
    2c18:	4901      	ldr	r1, [pc, #4]	; (2c20 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    2c1a:	4610      	mov	r0, r2
    2c1c:	f00b b8ee 	b.w	ddfc <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    2c20:	00002c45 	.word	0x00002c45

00002c24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2c24:	8150      	strh	r0, [r2, #10]
    2c26:	8a88      	ldrh	r0, [r1, #20]
    2c28:	8190      	strh	r0, [r2, #12]
    2c2a:	8ac8      	ldrh	r0, [r1, #22]
    2c2c:	81d0      	strh	r0, [r2, #14]
    2c2e:	8b08      	ldrh	r0, [r1, #24]
    2c30:	8210      	strh	r0, [r2, #16]
    2c32:	8b48      	ldrh	r0, [r1, #26]
    2c34:	8250      	strh	r0, [r2, #18]
    2c36:	4902      	ldr	r1, [pc, #8]	; (2c40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    2c38:	4610      	mov	r0, r2
    2c3a:	f00b b8dc 	b.w	ddf6 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    2c3e:	0000      	.short	0x0000
    2c40:	00002c85 	.word	0x00002c85
    2c44:	b538      	push	{r3, r4, r5, lr}
    2c46:	f1a0 0418 	sub.w	r4, r0, #24
    2c4a:	7d00      	ldrb	r0, [r0, #20]
    2c4c:	460d      	mov	r5, r1
    2c4e:	f000 0001 	and.w	r0, r0, #1
    2c52:	f7ff fd99 	bl	2788 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2c56:	2100      	movs	r1, #0
    2c58:	b108      	cbz	r0, 2c5e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    2c5a:	9100      	str	r1, [sp, #0]
    2c5c:	e00c      	b.n	2c78 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    2c5e:	7069      	strb	r1, [r5, #1]
    2c60:	2013      	movs	r0, #19
    2c62:	7028      	strb	r0, [r5, #0]
    2c64:	f854 0f22 	ldr.w	r0, [r4, #34]!
    2c68:	6068      	str	r0, [r5, #4]
    2c6a:	6860      	ldr	r0, [r4, #4]
    2c6c:	60a8      	str	r0, [r5, #8]
    2c6e:	68a0      	ldr	r0, [r4, #8]
    2c70:	60e8      	str	r0, [r5, #12]
    2c72:	4803      	ldr	r0, [pc, #12]	; (2c80 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    2c74:	6840      	ldr	r0, [r0, #4]
    2c76:	9000      	str	r0, [sp, #0]
    2c78:	f8bd 0000 	ldrh.w	r0, [sp]
    2c7c:	bd38      	pop	{r3, r4, r5, pc}
    2c7e:	0000      	.short	0x0000
    2c80:	00002d0c 	.word	0x00002d0c
    2c84:	b570      	push	{r4, r5, r6, lr}
    2c86:	b086      	sub	sp, #24
    2c88:	460e      	mov	r6, r1
    2c8a:	4604      	mov	r4, r0
    2c8c:	f7ff fd88 	bl	27a0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2c90:	2500      	movs	r5, #0
    2c92:	b358      	cbz	r0, 2cec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    2c94:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    2c98:	7225      	strb	r5, [r4, #8]
    2c9a:	8804      	ldrh	r4, [r0, #0]
    2c9c:	a903      	add	r1, sp, #12
    2c9e:	4620      	mov	r0, r4
    2ca0:	f00c fdc9 	bl	f836 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    2ca4:	b108      	cbz	r0, 2caa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    2ca6:	21fe      	movs	r1, #254	; 0xfe
    2ca8:	e017      	b.n	2cda <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    2caa:	f8ad 4000 	strh.w	r4, [sp]
    2cae:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2cb2:	f8ad 0002 	strh.w	r0, [sp, #2]
    2cb6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    2cba:	f8ad 0004 	strh.w	r0, [sp, #4]
    2cbe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2cc2:	f8ad 0006 	strh.w	r0, [sp, #6]
    2cc6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    2cca:	f8ad 0008 	strh.w	r0, [sp, #8]
    2cce:	4668      	mov	r0, sp
    2cd0:	f00c fded 	bl	f8ae <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    2cd4:	b120      	cbz	r0, 2ce0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    2cd6:	f240 1107 	movw	r1, #263	; 0x107
    2cda:	202c      	movs	r0, #44	; 0x2c
    2cdc:	f7fd fe68 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ce0:	f8cd 5000 	str.w	r5, [sp]
    2ce4:	f8bd 0000 	ldrh.w	r0, [sp]
    2ce8:	b006      	add	sp, #24
    2cea:	bd70      	pop	{r4, r5, r6, pc}
    2cec:	201b      	movs	r0, #27
    2cee:	7030      	strb	r0, [r6, #0]
    2cf0:	7075      	strb	r5, [r6, #1]
    2cf2:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    2cf6:	6070      	str	r0, [r6, #4]
    2cf8:	6860      	ldr	r0, [r4, #4]
    2cfa:	60b0      	str	r0, [r6, #8]
    2cfc:	8920      	ldrh	r0, [r4, #8]
    2cfe:	81b0      	strh	r0, [r6, #12]
    2d00:	4801      	ldr	r0, [pc, #4]	; (2d08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    2d02:	6800      	ldr	r0, [r0, #0]
    2d04:	9000      	str	r0, [sp, #0]
    2d06:	e7ed      	b.n	2ce4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    2d08:	00002d0c 	.word	0x00002d0c
    2d0c:	00000004 	.word	0x00000004
    2d10:	00000004 	.word	0x00000004

00002d14 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d16:	f06f 021f 	mvn.w	r2, #31
    2d1a:	0c01      	lsrs	r1, r0, #16
    2d1c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2d20:	251f      	movs	r5, #31
    2d22:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d26:	3854      	subs	r0, #84	; 0x54
    2d28:	d00d      	beq.n	2d46 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d2a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d2e:	3855      	subs	r0, #85	; 0x55
    2d30:	d009      	beq.n	2d46 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d32:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2d36:	38aa      	subs	r0, #170	; 0xaa
    2d38:	d005      	beq.n	2d46 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d3a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2d3e:	38aa      	subs	r0, #170	; 0xaa
    2d40:	d001      	beq.n	2d46 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d42:	2001      	movs	r0, #1
    2d44:	e000      	b.n	2d48 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2d46:	2000      	movs	r0, #0
    2d48:	2200      	movs	r2, #0
    2d4a:	4613      	mov	r3, r2
    2d4c:	ea4f 0402 	mov.w	r4, r2
    2d50:	ea82 0701 	eor.w	r7, r2, r1
    2d54:	43ff      	mvns	r7, r7
    2d56:	431f      	orrs	r7, r3
    2d58:	1c7f      	adds	r7, r7, #1
    2d5a:	d00f      	beq.n	2d7c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2d5c:	f006 0701 	and.w	r7, r6, #1
    2d60:	0852      	lsrs	r2, r2, #1
    2d62:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d66:	f005 0701 	and.w	r7, r5, #1
    2d6a:	085b      	lsrs	r3, r3, #1
    2d6c:	0876      	lsrs	r6, r6, #1
    2d6e:	086d      	lsrs	r5, r5, #1
    2d70:	1c64      	adds	r4, r4, #1
    2d72:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d76:	2c16      	cmp	r4, #22
    2d78:	d3ea      	bcc.n	2d50 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d7c:	2000      	movs	r0, #0
    2d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d80 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2d80:	b510      	push	{r4, lr}
    2d82:	4804      	ldr	r0, [pc, #16]	; (2d94 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2d84:	f00b f95b 	bl	e03e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2d88:	4802      	ldr	r0, [pc, #8]	; (2d94 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d8e:	3008      	adds	r0, #8
    2d90:	f00b b955 	b.w	e03e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2d94:	200000cc 	.word	0x200000cc

00002d98 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    2d98:	4801      	ldr	r0, [pc, #4]	; (2da0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    2d9a:	f000 b809 	b.w	2db0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2d9e:	0000      	.short	0x0000
    2da0:	200000cc 	.word	0x200000cc

00002da4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2da4:	4801      	ldr	r0, [pc, #4]	; (2dac <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2da6:	f000 b803 	b.w	2db0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2daa:	0000      	.short	0x0000
    2dac:	200000d4 	.word	0x200000d4
    2db0:	b510      	push	{r4, lr}
    2db2:	e9d0 2100 	ldrd	r2, r1, [r0]
    2db6:	4b09      	ldr	r3, [pc, #36]	; (2ddc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2db8:	4c09      	ldr	r4, [pc, #36]	; (2de0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2dba:	4353      	muls	r3, r2
    2dbc:	4354      	muls	r4, r2
    2dbe:	4051      	eors	r1, r2
    2dc0:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2dc4:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2dc8:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2dcc:	e9c0 2100 	strd	r2, r1, [r0]
    2dd0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2dd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dd8:	4618      	mov	r0, r3
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	c6ef3760 	.word	0xc6ef3760
    2de0:	9e3779bb 	.word	0x9e3779bb

00002de4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2de4:	b570      	push	{r4, r5, r6, lr}
    2de6:	6844      	ldr	r4, [r0, #4]
    2de8:	1d09      	adds	r1, r1, #4
    2dea:	2500      	movs	r5, #0
    2dec:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    2df0:	3480      	adds	r4, #128	; 0x80
    2df2:	07c0      	lsls	r0, r0, #31
    2df4:	d001      	beq.n	2dfa <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    2df6:	2001      	movs	r0, #1
    2df8:	bd70      	pop	{r4, r5, r6, pc}
    2dfa:	6848      	ldr	r0, [r1, #4]
    2dfc:	6809      	ldr	r1, [r1, #0]
    2dfe:	4b0c      	ldr	r3, [pc, #48]	; (2e30 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    2e00:	f641 0207 	movw	r2, #6151	; 0x1807
    2e04:	4019      	ands	r1, r3
    2e06:	66e1      	str	r1, [r4, #108]	; 0x6c
    2e08:	4010      	ands	r0, r2
    2e0a:	6720      	str	r0, [r4, #112]	; 0x70
    2e0c:	211b      	movs	r1, #27
    2e0e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    2e12:	f00b fa3a 	bl	e28a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    2e16:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    2e1a:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    2e1e:	1c40      	adds	r0, r0, #1
    2e20:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    2e24:	68e0      	ldr	r0, [r4, #12]
    2e26:	f040 0001 	orr.w	r0, r0, #1
    2e2a:	60e0      	str	r0, [r4, #12]
    2e2c:	2000      	movs	r0, #0
    2e2e:	bd70      	pop	{r4, r5, r6, pc}
    2e30:	f704492f 	.word	0xf704492f

00002e34 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2e34:	b510      	push	{r4, lr}
    2e36:	1d04      	adds	r4, r0, #4
    2e38:	f004 fa04 	bl	7244 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e3c:	4b03      	ldr	r3, [pc, #12]	; (2e4c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2e3e:	f641 0207 	movw	r2, #6151	; 0x1807
    2e42:	4018      	ands	r0, r3
    2e44:	4011      	ands	r1, r2
    2e46:	6020      	str	r0, [r4, #0]
    2e48:	6061      	str	r1, [r4, #4]
    2e4a:	bd10      	pop	{r4, pc}
    2e4c:	f704492f 	.word	0xf704492f

00002e50 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e54:	7803      	ldrb	r3, [r0, #0]
    2e56:	6840      	ldr	r0, [r0, #4]
    2e58:	1d0f      	adds	r7, r1, #4
    2e5a:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2e5e:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    2e62:	4606      	mov	r6, r0
    2e64:	f04f 0800 	mov.w	r8, #0
    2e68:	7f6a      	ldrb	r2, [r5, #29]
    2e6a:	2107      	movs	r1, #7
    2e6c:	4628      	mov	r0, r5
    2e6e:	f00a fc23 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e72:	b1e0      	cbz	r0, 2eae <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    2e74:	6839      	ldr	r1, [r7, #0]
    2e76:	4b18      	ldr	r3, [pc, #96]	; (2ed8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    2e78:	6878      	ldr	r0, [r7, #4]
    2e7a:	4019      	ands	r1, r3
    2e7c:	f641 0207 	movw	r2, #6151	; 0x1807
    2e80:	66e9      	str	r1, [r5, #108]	; 0x6c
    2e82:	4010      	ands	r0, r2
    2e84:	6728      	str	r0, [r5, #112]	; 0x70
    2e86:	211b      	movs	r1, #27
    2e88:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2e8c:	f00b f9fd 	bl	e28a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    2e90:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    2e94:	f885 801d 	strb.w	r8, [r5, #29]
    2e98:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2e9c:	4640      	mov	r0, r8
    2e9e:	f88d 1000 	strb.w	r1, [sp]
    2ea2:	9900      	ldr	r1, [sp, #0]
    2ea4:	9100      	str	r1, [sp, #0]
    2ea6:	f89d 1000 	ldrb.w	r1, [sp]
    2eaa:	b991      	cbnz	r1, 2ed2 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    2eac:	e002      	b.n	2eb4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    2eae:	2001      	movs	r0, #1
    2eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eb4:	8831      	ldrh	r1, [r6, #0]
    2eb6:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2eba:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2ebe:	6839      	ldr	r1, [r7, #0]
    2ec0:	66e1      	str	r1, [r4, #108]	; 0x6c
    2ec2:	6879      	ldr	r1, [r7, #4]
    2ec4:	6721      	str	r1, [r4, #112]	; 0x70
    2ec6:	2202      	movs	r2, #2
    2ec8:	4904      	ldr	r1, [pc, #16]	; (2edc <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    2eca:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2ece:	f00a ff9b 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ed2:	2000      	movs	r0, #0
    2ed4:	e7ec      	b.n	2eb0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    2ed6:	0000      	.short	0x0000
    2ed8:	f704492f 	.word	0xf704492f
    2edc:	0000e2f7 	.word	0x0000e2f7

00002ee0 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2ee0:	b570      	push	{r4, r5, r6, lr}
    2ee2:	1d0d      	adds	r5, r1, #4
    2ee4:	6844      	ldr	r4, [r0, #4]
    2ee6:	f004 f9ad 	bl	7244 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2eea:	f641 0207 	movw	r2, #6151	; 0x1807
    2eee:	4b05      	ldr	r3, [pc, #20]	; (2f04 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2ef0:	4011      	ands	r1, r2
    2ef2:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    2ef6:	4018      	ands	r0, r3
    2ef8:	4002      	ands	r2, r0
    2efa:	f362 0007 	bfi	r0, r2, #0, #8
    2efe:	6028      	str	r0, [r5, #0]
    2f00:	6069      	str	r1, [r5, #4]
    2f02:	bd70      	pop	{r4, r5, r6, pc}
    2f04:	f704492f 	.word	0xf704492f

00002f08 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    2f08:	6841      	ldr	r1, [r0, #4]
    2f0a:	b082      	sub	sp, #8
    2f0c:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    2f10:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    2f14:	f88d 2000 	strb.w	r2, [sp]
    2f18:	9a00      	ldr	r2, [sp, #0]
    2f1a:	9200      	str	r2, [sp, #0]
    2f1c:	f89d 2000 	ldrb.w	r2, [sp]
    2f20:	2a00      	cmp	r2, #0
    2f22:	d10b      	bne.n	2f3c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    2f24:	8809      	ldrh	r1, [r1, #0]
    2f26:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    2f2a:	211a      	movs	r1, #26
    2f2c:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    2f30:	2202      	movs	r2, #2
    2f32:	4903      	ldr	r1, [pc, #12]	; (2f40 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    2f34:	3060      	adds	r0, #96	; 0x60
    2f36:	b002      	add	sp, #8
    2f38:	f00a bf66 	b.w	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2f3c:	b002      	add	sp, #8
    2f3e:	4770      	bx	lr
    2f40:	0000e2f7 	.word	0x0000e2f7

00002f44 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2f44:	b570      	push	{r4, r5, r6, lr}
    2f46:	6844      	ldr	r4, [r0, #4]
    2f48:	460d      	mov	r5, r1
    2f4a:	7803      	ldrb	r3, [r0, #0]
    2f4c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    2f50:	3480      	adds	r4, #128	; 0x80
    2f52:	2600      	movs	r6, #0
    2f54:	2108      	movs	r1, #8
    2f56:	4620      	mov	r0, r4
    2f58:	f00a fbae 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f5c:	b920      	cbnz	r0, 2f68 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    2f5e:	7b20      	ldrb	r0, [r4, #12]
    2f60:	0780      	lsls	r0, r0, #30
    2f62:	d501      	bpl.n	2f68 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    2f64:	2001      	movs	r0, #1
    2f66:	bd70      	pop	{r4, r5, r6, pc}
    2f68:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2f6c:	0780      	lsls	r0, r0, #30
    2f6e:	d419      	bmi.n	2fa4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    2f70:	4628      	mov	r0, r5
    2f72:	f00a fedc 	bl	dd2e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2f76:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    2f7a:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f7e:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    2f82:	8868      	ldrh	r0, [r5, #2]
    2f84:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f88:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2f8c:	f040 0002 	orr.w	r0, r0, #2
    2f90:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    2f94:	07c0      	lsls	r0, r0, #31
    2f96:	d009      	beq.n	2fac <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    2f98:	2202      	movs	r2, #2
    2f9a:	4911      	ldr	r1, [pc, #68]	; (2fe0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    2f9c:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    2fa0:	f00a ff46 	bl	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2fa4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2fa8:	07c0      	lsls	r0, r0, #31
    2faa:	d110      	bne.n	2fce <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    2fac:	68e0      	ldr	r0, [r4, #12]
    2fae:	0781      	lsls	r1, r0, #30
    2fb0:	d503      	bpl.n	2fba <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2fb2:	214f      	movs	r1, #79	; 0x4f
    2fb4:	2040      	movs	r0, #64	; 0x40
    2fb6:	f7fd fcfb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fba:	f040 0002 	orr.w	r0, r0, #2
    2fbe:	60e0      	str	r0, [r4, #12]
    2fc0:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    2fc4:	1c40      	adds	r0, r0, #1
    2fc6:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    2fca:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    2fce:	7f60      	ldrb	r0, [r4, #29]
    2fd0:	2801      	cmp	r0, #1
    2fd2:	d102      	bne.n	2fda <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    2fd4:	7766      	strb	r6, [r4, #29]
    2fd6:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    2fda:	2000      	movs	r0, #0
    2fdc:	bd70      	pop	{r4, r5, r6, pc}
    2fde:	0000      	.short	0x0000
    2fe0:	0000e3a5 	.word	0x0000e3a5

00002fe4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    2fe4:	4a04      	ldr	r2, [pc, #16]	; (2ff8 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    2fe6:	6892      	ldr	r2, [r2, #8]
    2fe8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    2fec:	434b      	muls	r3, r1
    2fee:	4342      	muls	r2, r0
    2ff0:	eb03 3022 	add.w	r0, r3, r2, asr #12
    2ff4:	4770      	bx	lr
    2ff6:	0000      	.short	0x0000
    2ff8:	200000dc 	.word	0x200000dc

00002ffc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    2ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ffe:	6844      	ldr	r4, [r0, #4]
    3000:	4606      	mov	r6, r0
    3002:	f104 0580 	add.w	r5, r4, #128	; 0x80
    3006:	f000 f87b 	bl	3100 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    300a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    300e:	2901      	cmp	r1, #1
    3010:	d11a      	bne.n	3048 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3012:	2800      	cmp	r0, #0
    3014:	d018      	beq.n	3048 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3016:	6870      	ldr	r0, [r6, #4]
    3018:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    301c:	f88d 1000 	strb.w	r1, [sp]
    3020:	9900      	ldr	r1, [sp, #0]
    3022:	9100      	str	r1, [sp, #0]
    3024:	f89d 1000 	ldrb.w	r1, [sp]
    3028:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    302c:	2900      	cmp	r1, #0
    302e:	d10b      	bne.n	3048 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3030:	8821      	ldrh	r1, [r4, #0]
    3032:	8141      	strh	r1, [r0, #10]
    3034:	7e69      	ldrb	r1, [r5, #25]
    3036:	7301      	strb	r1, [r0, #12]
    3038:	7ea9      	ldrb	r1, [r5, #26]
    303a:	7341      	strb	r1, [r0, #13]
    303c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3040:	2202      	movs	r2, #2
    3042:	4902      	ldr	r1, [pc, #8]	; (304c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3044:	f00a bee0 	b.w	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    304a:	0000      	.short	0x0000
    304c:	0000e42d 	.word	0x0000e42d
    3050:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3054:	4a0d      	ldr	r2, [pc, #52]	; (308c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3056:	b510      	push	{r4, lr}
    3058:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    305c:	1309      	asrs	r1, r1, #12
    305e:	1300      	asrs	r0, r0, #12
    3060:	b24b      	sxtb	r3, r1
    3062:	f992 4000 	ldrsb.w	r4, [r2]
    3066:	4240      	negs	r0, r0
    3068:	2100      	movs	r1, #0
    306a:	b240      	sxtb	r0, r0
    306c:	42a3      	cmp	r3, r4
    306e:	da02      	bge.n	3076 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3070:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3074:	e005      	b.n	3082 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3076:	f992 4001 	ldrsb.w	r4, [r2, #1]
    307a:	42a3      	cmp	r3, r4
    307c:	dd04      	ble.n	3088 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    307e:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3082:	4408      	add	r0, r1
    3084:	f300 0107 	ssat	r1, #8, r0
    3088:	4608      	mov	r0, r1
    308a:	bd10      	pop	{r4, pc}
    308c:	200000dc 	.word	0x200000dc
    3090:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3094:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3098:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    309c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    30a0:	f00c f87c 	bl	f19c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    30a4:	4606      	mov	r6, r0
    30a6:	68a0      	ldr	r0, [r4, #8]
    30a8:	f7ff ffd2 	bl	3050 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    30ac:	0007      	movs	r7, r0
    30ae:	d021      	beq.n	30f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    30b0:	4620      	mov	r0, r4
    30b2:	f00b f9c3 	bl	e43c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    30b6:	2800      	cmp	r0, #0
    30b8:	d01c      	beq.n	30f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    30ba:	8828      	ldrh	r0, [r5, #0]
    30bc:	4669      	mov	r1, sp
    30be:	f00a fae4 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    30c2:	b118      	cbz	r0, 30cc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    30c4:	2185      	movs	r1, #133	; 0x85
    30c6:	207a      	movs	r0, #122	; 0x7a
    30c8:	f7fd fc72 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30cc:	1c76      	adds	r6, r6, #1
    30ce:	b2f1      	uxtb	r1, r6
    30d0:	2302      	movs	r3, #2
    30d2:	463a      	mov	r2, r7
    30d4:	4668      	mov	r0, sp
    30d6:	f00c f880 	bl	f1da <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    30da:	2800      	cmp	r0, #0
    30dc:	d10a      	bne.n	30f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    30de:	4806      	ldr	r0, [pc, #24]	; (30f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    30e0:	4906      	ldr	r1, [pc, #24]	; (30fc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    30e2:	7900      	ldrb	r0, [r0, #4]
    30e4:	fba0 6501 	umull	r6, r5, r0, r1
    30e8:	f00d f887 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    30ec:	1980      	adds	r0, r0, r6
    30ee:	4169      	adcs	r1, r5
    30f0:	e9c4 0100 	strd	r0, r1, [r4]
    30f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    30f8:	200000dc 	.word	0x200000dc
    30fc:	000f4240 	.word	0x000f4240
    3100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3104:	4607      	mov	r7, r0
    3106:	f7ff fa91 	bl	262c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    310a:	687c      	ldr	r4, [r7, #4]
    310c:	4605      	mov	r5, r0
    310e:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    3112:	3480      	adds	r4, #128	; 0x80
    3114:	287f      	cmp	r0, #127	; 0x7f
    3116:	d042      	beq.n	319e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    3118:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    311c:	687e      	ldr	r6, [r7, #4]
    311e:	76a0      	strb	r0, [r4, #26]
    3120:	4629      	mov	r1, r5
    3122:	68a0      	ldr	r0, [r4, #8]
    3124:	f7ff ff5e 	bl	2fe4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3128:	60a0      	str	r0, [r4, #8]
    312a:	481e      	ldr	r0, [pc, #120]	; (31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    312c:	7940      	ldrb	r0, [r0, #5]
    312e:	b1c0      	cbz	r0, 3162 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3130:	6878      	ldr	r0, [r7, #4]
    3132:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3136:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    313a:	f7ff ff89 	bl	3050 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    313e:	b180      	cbz	r0, 3162 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3140:	4640      	mov	r0, r8
    3142:	f00b f97b 	bl	e43c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3146:	b160      	cbz	r0, 3162 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3148:	6878      	ldr	r0, [r7, #4]
    314a:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    314e:	4607      	mov	r7, r0
    3150:	f004 fca2 	bl	7a98 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    3154:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    3158:	4913      	ldr	r1, [pc, #76]	; (31a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    315a:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    315e:	f00a fe50 	bl	de02 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    3162:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3166:	2100      	movs	r1, #0
    3168:	1a28      	subs	r0, r5, r0
    316a:	d500      	bpl.n	316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    316c:	4240      	negs	r0, r0
    316e:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    3172:	4282      	cmp	r2, r0
    3174:	dc10      	bgt.n	3198 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3176:	2aff      	cmp	r2, #255	; 0xff
    3178:	d00e      	beq.n	3198 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    317a:	7f20      	ldrb	r0, [r4, #28]
    317c:	1c40      	adds	r0, r0, #1
    317e:	b2c0      	uxtb	r0, r0
    3180:	7720      	strb	r0, [r4, #28]
    3182:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3186:	4290      	cmp	r0, r2
    3188:	d802      	bhi.n	3190 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    318a:	7ee0      	ldrb	r0, [r4, #27]
    318c:	287f      	cmp	r0, #127	; 0x7f
    318e:	d103      	bne.n	3198 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3190:	2000      	movs	r0, #0
    3192:	76e5      	strb	r5, [r4, #27]
    3194:	7720      	strb	r0, [r4, #28]
    3196:	2101      	movs	r1, #1
    3198:	4608      	mov	r0, r1
    319a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    319e:	2000      	movs	r0, #0
    31a0:	e7fb      	b.n	319a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    31a2:	0000      	.short	0x0000
    31a4:	200000dc 	.word	0x200000dc
    31a8:	00003091 	.word	0x00003091

000031ac <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    31ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ae:	f00b f961 	bl	e474 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    31b2:	4604      	mov	r4, r0
    31b4:	460d      	mov	r5, r1
    31b6:	466a      	mov	r2, sp
    31b8:	f000 f862 	bl	3280 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    31bc:	b108      	cbz	r0, 31c2 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    31be:	2001      	movs	r0, #1
    31c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31c2:	480f      	ldr	r0, [pc, #60]	; (3200 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    31c4:	7803      	ldrb	r3, [r0, #0]
    31c6:	7841      	ldrb	r1, [r0, #1]
    31c8:	428b      	cmp	r3, r1
    31ca:	d101      	bne.n	31d0 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    31cc:	2000      	movs	r0, #0
    31ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31d0:	461a      	mov	r2, r3
    31d2:	6841      	ldr	r1, [r0, #4]
    31d4:	e008      	b.n	31e8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    31d6:	bf00      	nop
    31d8:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    31dc:	1e52      	subs	r2, r2, #1
    31de:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    31e2:	e9c6 7c00 	strd	r7, ip, [r6]
    31e6:	b2d2      	uxtb	r2, r2
    31e8:	f89d 6000 	ldrb.w	r6, [sp]
    31ec:	42b2      	cmp	r2, r6
    31ee:	d8f3      	bhi.n	31d8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    31f0:	b2f2      	uxtb	r2, r6
    31f2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    31f6:	1c5b      	adds	r3, r3, #1
    31f8:	e9c1 4500 	strd	r4, r5, [r1]
    31fc:	7003      	strb	r3, [r0, #0]
    31fe:	e7de      	b.n	31be <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    3200:	200000e8 	.word	0x200000e8

00003204 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    3204:	b510      	push	{r4, lr}
    3206:	0742      	lsls	r2, r0, #29
    3208:	d003      	beq.n	3212 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    320a:	2163      	movs	r1, #99	; 0x63
    320c:	2048      	movs	r0, #72	; 0x48
    320e:	f7fd fbcf 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3212:	b120      	cbz	r0, 321e <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    3214:	4a03      	ldr	r2, [pc, #12]	; (3224 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    3216:	7051      	strb	r1, [r2, #1]
    3218:	6050      	str	r0, [r2, #4]
    321a:	2000      	movs	r0, #0
    321c:	7010      	strb	r0, [r2, #0]
    321e:	00c8      	lsls	r0, r1, #3
    3220:	bd10      	pop	{r4, pc}
    3222:	0000      	.short	0x0000
    3224:	200000e8 	.word	0x200000e8

00003228 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    3228:	b538      	push	{r3, r4, r5, lr}
    322a:	f00b f923 	bl	e474 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    322e:	466a      	mov	r2, sp
    3230:	f000 f826 	bl	3280 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3234:	2800      	cmp	r0, #0
    3236:	d014      	beq.n	3262 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    3238:	4a0a      	ldr	r2, [pc, #40]	; (3264 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    323a:	7810      	ldrb	r0, [r2, #0]
    323c:	1e40      	subs	r0, r0, #1
    323e:	b2c1      	uxtb	r1, r0
    3240:	7011      	strb	r1, [r2, #0]
    3242:	f89d 0000 	ldrb.w	r0, [sp]
    3246:	6852      	ldr	r2, [r2, #4]
    3248:	e008      	b.n	325c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    324a:	bf00      	nop
    324c:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    3250:	1c40      	adds	r0, r0, #1
    3252:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3256:	e9c3 4500 	strd	r4, r5, [r3]
    325a:	b2c0      	uxtb	r0, r0
    325c:	4288      	cmp	r0, r1
    325e:	d3f5      	bcc.n	324c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    3260:	2001      	movs	r0, #1
    3262:	bd38      	pop	{r3, r4, r5, pc}
    3264:	200000e8 	.word	0x200000e8

00003268 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3268:	4901      	ldr	r1, [pc, #4]	; (3270 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    326a:	2000      	movs	r0, #0
    326c:	7008      	strb	r0, [r1, #0]
    326e:	4770      	bx	lr
    3270:	200000e8 	.word	0x200000e8

00003274 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3274:	4801      	ldr	r0, [pc, #4]	; (327c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3276:	7840      	ldrb	r0, [r0, #1]
    3278:	4770      	bx	lr
    327a:	0000      	.short	0x0000
    327c:	200000e8 	.word	0x200000e8
    3280:	b5f0      	push	{r4, r5, r6, r7, lr}
    3282:	4d20      	ldr	r5, [pc, #128]	; (3304 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    3284:	2300      	movs	r3, #0
    3286:	7013      	strb	r3, [r2, #0]
    3288:	782b      	ldrb	r3, [r5, #0]
    328a:	b323      	cbz	r3, 32d6 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    328c:	2400      	movs	r4, #0
    328e:	1e5b      	subs	r3, r3, #1
    3290:	b2db      	uxtb	r3, r3
    3292:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3296:	e00b      	b.n	32b0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3298:	18e5      	adds	r5, r4, r3
    329a:	086d      	lsrs	r5, r5, #1
    329c:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    32a0:	e9d6 7600 	ldrd	r7, r6, [r6]
    32a4:	1a3f      	subs	r7, r7, r0
    32a6:	418e      	sbcs	r6, r1
    32a8:	d201      	bcs.n	32ae <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    32aa:	462c      	mov	r4, r5
    32ac:	e000      	b.n	32b0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    32ae:	462b      	mov	r3, r5
    32b0:	1b1d      	subs	r5, r3, r4
    32b2:	2d01      	cmp	r5, #1
    32b4:	dcf0      	bgt.n	3298 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    32b6:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    32ba:	e9d6 5600 	ldrd	r5, r6, [r6]
    32be:	ea80 0705 	eor.w	r7, r0, r5
    32c2:	ea81 0e06 	eor.w	lr, r1, r6
    32c6:	ea57 070e 	orrs.w	r7, r7, lr
    32ca:	d005      	beq.n	32d8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    32cc:	1b45      	subs	r5, r0, r5
    32ce:	eb71 0506 	sbcs.w	r5, r1, r6
    32d2:	d203      	bcs.n	32dc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    32d4:	7014      	strb	r4, [r2, #0]
    32d6:	e010      	b.n	32fa <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    32d8:	7014      	strb	r4, [r2, #0]
    32da:	e011      	b.n	3300 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    32dc:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    32e0:	e9d5 4500 	ldrd	r4, r5, [r5]
    32e4:	ea80 0604 	eor.w	r6, r0, r4
    32e8:	ea81 0705 	eor.w	r7, r1, r5
    32ec:	433e      	orrs	r6, r7
    32ee:	d006      	beq.n	32fe <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    32f0:	1b00      	subs	r0, r0, r4
    32f2:	41a9      	sbcs	r1, r5
    32f4:	d300      	bcc.n	32f8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    32f6:	1c5b      	adds	r3, r3, #1
    32f8:	7013      	strb	r3, [r2, #0]
    32fa:	2000      	movs	r0, #0
    32fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32fe:	7013      	strb	r3, [r2, #0]
    3300:	2001      	movs	r0, #1
    3302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3304:	200000e8 	.word	0x200000e8

00003308 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3308:	b570      	push	{r4, r5, r6, lr}
    330a:	4604      	mov	r4, r0
    330c:	7c00      	ldrb	r0, [r0, #16]
    330e:	b300      	cbz	r0, 3352 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3310:	2802      	cmp	r0, #2
    3312:	d01e      	beq.n	3352 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3314:	f05f 0001 	movs.w	r0, #1
    3318:	f104 0151 	add.w	r1, r4, #81	; 0x51
    331c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3320:	460d      	mov	r5, r1
    3322:	b1c0      	cbz	r0, 3356 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3324:	7de0      	ldrb	r0, [r4, #23]
    3326:	b1f0      	cbz	r0, 3366 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3328:	f8d4 0011 	ldr.w	r0, [r4, #17]
    332c:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3330:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3334:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3338:	7c20      	ldrb	r0, [r4, #16]
    333a:	f00b f8cb 	bl	e4d4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    333e:	7620      	strb	r0, [r4, #24]
    3340:	2008      	movs	r0, #8
    3342:	7660      	strb	r0, [r4, #25]
    3344:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3348:	4629      	mov	r1, r5
    334a:	f00b f8af 	bl	e4ac <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    334e:	b9a8      	cbnz	r0, 337c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    3350:	e00e      	b.n	3370 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    3352:	2000      	movs	r0, #0
    3354:	e7e0      	b.n	3318 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3356:	2000      	movs	r0, #0
    3358:	f7fe fa8e 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    335c:	2800      	cmp	r0, #0
    335e:	d1eb      	bne.n	3338 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    3360:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3364:	e001      	b.n	336a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3366:	f240 41be 	movw	r1, #1214	; 0x4be
    336a:	202d      	movs	r0, #45	; 0x2d
    336c:	f7fd fb20 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3370:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3374:	4629      	mov	r1, r5
    3376:	f00b f8a2 	bl	e4be <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    337a:	b100      	cbz	r0, 337e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    337c:	2001      	movs	r0, #1
    337e:	76a0      	strb	r0, [r4, #26]
    3380:	7e20      	ldrb	r0, [r4, #24]
    3382:	b130      	cbz	r0, 3392 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3384:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3388:	f104 0158 	add.w	r1, r4, #88	; 0x58
    338c:	f00a f955 	bl	d63a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3390:	7660      	strb	r0, [r4, #25]
    3392:	f7ff f82d 	bl	23f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3396:	490c      	ldr	r1, [pc, #48]	; (33c8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3398:	fba0 2301 	umull	r2, r3, r0, r1
    339c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    33a0:	f00b fa0a 	bl	e7b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    33a4:	2100      	movs	r1, #0
    33a6:	4620      	mov	r0, r4
    33a8:	f00b f9bf 	bl	e72a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    33ac:	2000      	movs	r0, #0
    33ae:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    33b2:	78a0      	ldrb	r0, [r4, #2]
    33b4:	0740      	lsls	r0, r0, #29
    33b6:	d505      	bpl.n	33c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    33b8:	4620      	mov	r0, r4
    33ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    33be:	2100      	movs	r1, #0
    33c0:	f000 bdf0 	b.w	3fa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50c>
    33c4:	bd70      	pop	{r4, r5, r6, pc}
    33c6:	0000      	.short	0x0000
    33c8:	000f4240 	.word	0x000f4240

000033cc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    33cc:	b530      	push	{r4, r5, lr}
    33ce:	460c      	mov	r4, r1
    33d0:	b08d      	sub	sp, #52	; 0x34
    33d2:	4605      	mov	r5, r0
    33d4:	4601      	mov	r1, r0
    33d6:	2224      	movs	r2, #36	; 0x24
    33d8:	a802      	add	r0, sp, #8
    33da:	f00d f8a0 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    33de:	a80b      	add	r0, sp, #44	; 0x2c
    33e0:	f00b fa47 	bl	e872 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    33e4:	7aa0      	ldrb	r0, [r4, #10]
    33e6:	f88d 0018 	strb.w	r0, [sp, #24]
    33ea:	7820      	ldrb	r0, [r4, #0]
    33ec:	f88d 0008 	strb.w	r0, [sp, #8]
    33f0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    33f4:	f8ad 0000 	strh.w	r0, [sp]
    33f8:	f89d 0000 	ldrb.w	r0, [sp]
    33fc:	f000 0101 	and.w	r1, r0, #1
    3400:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3404:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3408:	f3c0 0280 	ubfx	r2, r0, #2, #1
    340c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3410:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3414:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3418:	f3c0 1200 	ubfx	r2, r0, #4, #1
    341c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3420:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3424:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3428:	f3c0 1080 	ubfx	r0, r0, #6, #1
    342c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3430:	f8ad 000a 	strh.w	r0, [sp, #10]
    3434:	7d20      	ldrb	r0, [r4, #20]
    3436:	2801      	cmp	r0, #1
    3438:	d006      	beq.n	3448 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    343a:	2802      	cmp	r0, #2
    343c:	d004      	beq.n	3448 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    343e:	f240 21e9 	movw	r1, #745	; 0x2e9
    3442:	2006      	movs	r0, #6
    3444:	f7fd fab4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3448:	f88d 000c 	strb.w	r0, [sp, #12]
    344c:	7a61      	ldrb	r1, [r4, #9]
    344e:	a80b      	add	r0, sp, #44	; 0x2c
    3450:	f00b f9f6 	bl	e840 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3454:	7d20      	ldrb	r0, [r4, #20]
    3456:	2101      	movs	r1, #1
    3458:	2802      	cmp	r0, #2
    345a:	d102      	bne.n	3462 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    345c:	7d60      	ldrb	r0, [r4, #21]
    345e:	1c40      	adds	r0, r0, #1
    3460:	b2c1      	uxtb	r1, r0
    3462:	7ea0      	ldrb	r0, [r4, #26]
    3464:	1c40      	adds	r0, r0, #1
    3466:	b2c2      	uxtb	r2, r0
    3468:	a80b      	add	r0, sp, #44	; 0x2c
    346a:	f00b f9b0 	bl	e7ce <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    346e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3472:	0700      	lsls	r0, r0, #28
    3474:	d501      	bpl.n	347a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3476:	2000      	movs	r0, #0
    3478:	e020      	b.n	34bc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    347a:	a80b      	add	r0, sp, #44	; 0x2c
    347c:	f00b f9b9 	bl	e7f2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3480:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3484:	2228      	movs	r2, #40	; 0x28
    3486:	f000 fe31 	bl	40ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    348a:	f240 2171 	movw	r1, #625	; 0x271
    348e:	f200 20db 	addw	r0, r0, #731	; 0x2db
    3492:	fbb0 f0f1 	udiv	r0, r0, r1
    3496:	4348      	muls	r0, r1
    3498:	f8d4 1002 	ldr.w	r1, [r4, #2]
    349c:	f240 2371 	movw	r3, #625	; 0x271
    34a0:	0a0a      	lsrs	r2, r1, #8
    34a2:	f240 2171 	movw	r1, #625	; 0x271
    34a6:	434a      	muls	r2, r1
    34a8:	f8d4 1005 	ldr.w	r1, [r4, #5]
    34ac:	0a09      	lsrs	r1, r1, #8
    34ae:	4359      	muls	r1, r3
    34b0:	4290      	cmp	r0, r2
    34b2:	d801      	bhi.n	34b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    34b4:	9204      	str	r2, [sp, #16]
    34b6:	e004      	b.n	34c2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    34b8:	4288      	cmp	r0, r1
    34ba:	d801      	bhi.n	34c0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    34bc:	9004      	str	r0, [sp, #16]
    34be:	e000      	b.n	34c2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    34c0:	9104      	str	r1, [sp, #16]
    34c2:	7ca0      	ldrb	r0, [r4, #18]
    34c4:	f88d 0017 	strb.w	r0, [sp, #23]
    34c8:	7e20      	ldrb	r0, [r4, #24]
    34ca:	2801      	cmp	r0, #1
    34cc:	d000      	beq.n	34d0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    34ce:	2000      	movs	r0, #0
    34d0:	f88d 0014 	strb.w	r0, [sp, #20]
    34d4:	6b68      	ldr	r0, [r5, #52]	; 0x34
    34d6:	f009 ff18 	bl	d30a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    34da:	6b68      	ldr	r0, [r5, #52]	; 0x34
    34dc:	f009 ffbd 	bl	d45a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    34e0:	2224      	movs	r2, #36	; 0x24
    34e2:	a902      	add	r1, sp, #8
    34e4:	4628      	mov	r0, r5
    34e6:	f00d f81a 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    34ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    34ec:	62a8      	str	r0, [r5, #40]	; 0x28
    34ee:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    34f2:	85a8      	strh	r0, [r5, #44]	; 0x2c
    34f4:	7ae0      	ldrb	r0, [r4, #11]
    34f6:	b168      	cbz	r0, 3514 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    34f8:	2802      	cmp	r0, #2
    34fa:	d00b      	beq.n	3514 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    34fc:	f05f 0001 	movs.w	r0, #1
    3500:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3504:	68e0      	ldr	r0, [r4, #12]
    3506:	65a8      	str	r0, [r5, #88]	; 0x58
    3508:	8a20      	ldrh	r0, [r4, #16]
    350a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    350e:	b00d      	add	sp, #52	; 0x34
    3510:	2000      	movs	r0, #0
    3512:	bd30      	pop	{r4, r5, pc}
    3514:	2000      	movs	r0, #0
    3516:	e7f3      	b.n	3500 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003518 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3518:	4a0a      	ldr	r2, [pc, #40]	; (3544 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    351a:	b510      	push	{r4, lr}
    351c:	2100      	movs	r1, #0
    351e:	7011      	strb	r1, [r2, #0]
    3520:	4c09      	ldr	r4, [pc, #36]	; (3548 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3522:	6060      	str	r0, [r4, #4]
    3524:	f000 f822 	bl	356c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3528:	b110      	cbz	r0, 3530 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    352a:	f240 312e 	movw	r1, #814	; 0x32e
    352e:	e004      	b.n	353a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3530:	68a0      	ldr	r0, [r4, #8]
    3532:	2800      	cmp	r0, #0
    3534:	d104      	bne.n	3540 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3536:	f240 3131 	movw	r1, #817	; 0x331
    353a:	202d      	movs	r0, #45	; 0x2d
    353c:	f7fd fa38 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3540:	bd10      	pop	{r4, pc}
    3542:	0000      	.short	0x0000
    3544:	20001448 	.word	0x20001448
    3548:	200000f0 	.word	0x200000f0

0000354c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    354c:	4902      	ldr	r1, [pc, #8]	; (3558 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    354e:	4801      	ldr	r0, [pc, #4]	; (3554 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3550:	6088      	str	r0, [r1, #8]
    3552:	4770      	bx	lr
    3554:	000040d4 	.word	0x000040d4
    3558:	200000f0 	.word	0x200000f0

0000355c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    355c:	4902      	ldr	r1, [pc, #8]	; (3568 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    355e:	6008      	str	r0, [r1, #0]
    3560:	6889      	ldr	r1, [r1, #8]
    3562:	6809      	ldr	r1, [r1, #0]
    3564:	4708      	bx	r1
    3566:	0000      	.short	0x0000
    3568:	200000f0 	.word	0x200000f0

0000356c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    356c:	4808      	ldr	r0, [pc, #32]	; (3590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    356e:	b510      	push	{r4, lr}
    3570:	7800      	ldrb	r0, [r0, #0]
    3572:	b110      	cbz	r0, 357a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3574:	240c      	movs	r4, #12
    3576:	4620      	mov	r0, r4
    3578:	bd10      	pop	{r4, pc}
    357a:	2400      	movs	r4, #0
    357c:	2218      	movs	r2, #24
    357e:	4621      	mov	r1, r4
    3580:	4803      	ldr	r0, [pc, #12]	; (3590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3582:	f00d f846 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3586:	f004 f8d9 	bl	773c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    358a:	f003 fefd 	bl	7388 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    358e:	e7f2      	b.n	3576 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3590:	20001448 	.word	0x20001448

00003594 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3594:	4904      	ldr	r1, [pc, #16]	; (35a8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3596:	b510      	push	{r4, lr}
    3598:	7809      	ldrb	r1, [r1, #0]
    359a:	2901      	cmp	r1, #1
    359c:	d101      	bne.n	35a2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    359e:	f000 fbd5 	bl	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
    35a2:	2000      	movs	r0, #0
    35a4:	bd10      	pop	{r4, pc}
    35a6:	0000      	.short	0x0000
    35a8:	20001448 	.word	0x20001448

000035ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    35ac:	4902      	ldr	r1, [pc, #8]	; (35b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    35ae:	4801      	ldr	r0, [pc, #4]	; (35b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    35b0:	6008      	str	r0, [r1, #0]
    35b2:	4770      	bx	lr
    35b4:	00003e79 	.word	0x00003e79
    35b8:	200000fc 	.word	0x200000fc

000035bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    35bc:	b510      	push	{r4, lr}
    35be:	4604      	mov	r4, r0
    35c0:	7880      	ldrb	r0, [r0, #2]
    35c2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    35c6:	b158      	cbz	r0, 35e0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    35c8:	233c      	movs	r3, #60	; 0x3c
    35ca:	22ff      	movs	r2, #255	; 0xff
    35cc:	4620      	mov	r0, r4
    35ce:	69e1      	ldr	r1, [r4, #28]
    35d0:	f000 fbe2 	bl	3d98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x300>
    35d4:	2202      	movs	r2, #2
    35d6:	4904      	ldr	r1, [pc, #16]	; (35e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    35d8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    35dc:	f00a fc14 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    35e0:	2001      	movs	r0, #1
    35e2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    35e6:	bd10      	pop	{r4, pc}
    35e8:	0000e6c3 	.word	0x0000e6c3
    35ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35f0:	000f      	movs	r7, r1
    35f2:	4604      	mov	r4, r0
    35f4:	d023      	beq.n	363e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    35f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    35fa:	4605      	mov	r5, r0
    35fc:	f00b f922 	bl	e844 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3600:	b9b0      	cbnz	r0, 3630 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3602:	78a0      	ldrb	r0, [r4, #2]
    3604:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3608:	b350      	cbz	r0, 3660 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    360a:	4628      	mov	r0, r5
    360c:	f00b f8f1 	bl	e7f2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3610:	4606      	mov	r6, r0
    3612:	4628      	mov	r0, r5
    3614:	f00b f916 	bl	e844 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3618:	1a30      	subs	r0, r6, r0
    361a:	b2c0      	uxtb	r0, r0
    361c:	f00b f967 	bl	e8ee <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3620:	4601      	mov	r1, r0
    3622:	4835      	ldr	r0, [pc, #212]	; (36f8 <CONFIG_USB_DEVICE_VID+0x8c>)
    3624:	6842      	ldr	r2, [r0, #4]
    3626:	4411      	add	r1, r2
    3628:	6041      	str	r1, [r0, #4]
    362a:	4628      	mov	r0, r5
    362c:	f00b f928 	bl	e880 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3630:	4628      	mov	r0, r5
    3632:	f00b f8ea 	bl	e80a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3636:	4601      	mov	r1, r0
    3638:	4620      	mov	r0, r4
    363a:	f00b f8b2 	bl	e7a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    363e:	4d2f      	ldr	r5, [pc, #188]	; (36fc <CONFIG_USB_DEVICE_VID+0x90>)
    3640:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3644:	2100      	movs	r1, #0
    3646:	6868      	ldr	r0, [r5, #4]
    3648:	8001      	strh	r1, [r0, #0]
    364a:	f00b f823 	bl	e694 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    364e:	8860      	ldrh	r0, [r4, #2]
    3650:	2813      	cmp	r0, #19
    3652:	d013      	beq.n	367c <CONFIG_USB_DEVICE_VID+0x10>
    3654:	dc09      	bgt.n	366a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3656:	2810      	cmp	r0, #16
    3658:	d036      	beq.n	36c8 <CONFIG_USB_DEVICE_VID+0x5c>
    365a:	2812      	cmp	r0, #18
    365c:	d109      	bne.n	3672 <CONFIG_USB_DEVICE_VID+0x6>
    365e:	e031      	b.n	36c4 <CONFIG_USB_DEVICE_VID+0x58>
    3660:	4620      	mov	r0, r4
    3662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3666:	f000 bb71 	b.w	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
    366a:	2815      	cmp	r0, #21
    366c:	d00f      	beq.n	368e <CONFIG_USB_DEVICE_VID+0x22>
    366e:	281d      	cmp	r0, #29
    3670:	d00d      	beq.n	368e <CONFIG_USB_DEVICE_VID+0x22>
    3672:	f240 6173 	movw	r1, #1651	; 0x673
    3676:	202d      	movs	r0, #45	; 0x2d
    3678:	f7fd f99a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    367c:	2100      	movs	r1, #0
    367e:	6868      	ldr	r0, [r5, #4]
    3680:	f00a fa40 	bl	db04 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3684:	2101      	movs	r1, #1
    3686:	6868      	ldr	r0, [r5, #4]
    3688:	f00b f804 	bl	e694 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    368c:	e020      	b.n	36d0 <CONFIG_USB_DEVICE_VID+0x64>
    368e:	2101      	movs	r1, #1
    3690:	6868      	ldr	r0, [r5, #4]
    3692:	f00a fa37 	bl	db04 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3696:	2101      	movs	r1, #1
    3698:	6868      	ldr	r0, [r5, #4]
    369a:	f00a fffb 	bl	e694 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    369e:	b136      	cbz	r6, 36ae <CONFIG_USB_DEVICE_VID+0x42>
    36a0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    36a4:	6868      	ldr	r0, [r5, #4]
    36a6:	f00a fa48 	bl	db3a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    36aa:	2101      	movs	r1, #1
    36ac:	e006      	b.n	36bc <CONFIG_USB_DEVICE_VID+0x50>
    36ae:	f104 0158 	add.w	r1, r4, #88	; 0x58
    36b2:	6868      	ldr	r0, [r5, #4]
    36b4:	f00a fa41 	bl	db3a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    36b8:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    36bc:	6868      	ldr	r0, [r5, #4]
    36be:	f00a fa42 	bl	db46 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    36c2:	e005      	b.n	36d0 <CONFIG_USB_DEVICE_VID+0x64>
    36c4:	2106      	movs	r1, #6
    36c6:	e000      	b.n	36ca <CONFIG_USB_DEVICE_VID+0x5e>
    36c8:	2102      	movs	r1, #2
    36ca:	6868      	ldr	r0, [r5, #4]
    36cc:	f00a fa1a 	bl	db04 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    36d0:	4620      	mov	r0, r4
    36d2:	f000 fcdd 	bl	4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    36d6:	8860      	ldrh	r0, [r4, #2]
    36d8:	281d      	cmp	r0, #29
    36da:	d007      	beq.n	36ec <CONFIG_USB_DEVICE_VID+0x80>
    36dc:	2815      	cmp	r0, #21
    36de:	d005      	beq.n	36ec <CONFIG_USB_DEVICE_VID+0x80>
    36e0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    36e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    36e6:	6868      	ldr	r0, [r5, #4]
    36e8:	f00a f9fc 	bl	dae4 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    36ec:	4639      	mov	r1, r7
    36ee:	4620      	mov	r0, r4
    36f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36f4:	f000 b9f4 	b.w	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    36f8:	20001448 	.word	0x20001448
    36fc:	200000f0 	.word	0x200000f0
    3700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3704:	4d2f      	ldr	r5, [pc, #188]	; (37c4 <CONFIG_USB_DEVICE_VID+0x158>)
    3706:	4680      	mov	r8, r0
    3708:	7828      	ldrb	r0, [r5, #0]
    370a:	2802      	cmp	r0, #2
    370c:	d005      	beq.n	371a <CONFIG_USB_DEVICE_VID+0xae>
    370e:	7828      	ldrb	r0, [r5, #0]
    3710:	2803      	cmp	r0, #3
    3712:	d002      	beq.n	371a <CONFIG_USB_DEVICE_VID+0xae>
    3714:	f640 512d 	movw	r1, #3373	; 0xd2d
    3718:	e02b      	b.n	3772 <CONFIG_USB_DEVICE_VID+0x106>
    371a:	4c2b      	ldr	r4, [pc, #172]	; (37c8 <CONFIG_USB_DEVICE_VID+0x15c>)
    371c:	6826      	ldr	r6, [r4, #0]
    371e:	7b30      	ldrb	r0, [r6, #12]
    3720:	b118      	cbz	r0, 372a <CONFIG_USB_DEVICE_VID+0xbe>
    3722:	f7fe ff83 	bl	262c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3726:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    372a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    372e:	2700      	movs	r7, #0
    3730:	f1b8 0f00 	cmp.w	r8, #0
    3734:	f89c 0000 	ldrb.w	r0, [ip]
    3738:	f000 060f 	and.w	r6, r0, #15
    373c:	d027      	beq.n	378e <CONFIG_USB_DEVICE_VID+0x122>
    373e:	6821      	ldr	r1, [r4, #0]
    3740:	09c0      	lsrs	r0, r0, #7
    3742:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3746:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    374a:	f10c 0109 	add.w	r1, ip, #9
    374e:	f009 fedc 	bl	d50a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3752:	b1e0      	cbz	r0, 378e <CONFIG_USB_DEVICE_VID+0x122>
    3754:	4639      	mov	r1, r7
    3756:	6860      	ldr	r0, [r4, #4]
    3758:	f00a f9b4 	bl	dac4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    375c:	b1b8      	cbz	r0, 378e <CONFIG_USB_DEVICE_VID+0x122>
    375e:	782a      	ldrb	r2, [r5, #0]
    3760:	6820      	ldr	r0, [r4, #0]
    3762:	4631      	mov	r1, r6
    3764:	2a02      	cmp	r2, #2
    3766:	d007      	beq.n	3778 <CONFIG_USB_DEVICE_VID+0x10c>
    3768:	782a      	ldrb	r2, [r5, #0]
    376a:	2a03      	cmp	r2, #3
    376c:	d004      	beq.n	3778 <CONFIG_USB_DEVICE_VID+0x10c>
    376e:	f640 5106 	movw	r1, #3334	; 0xd06
    3772:	202d      	movs	r0, #45	; 0x2d
    3774:	f7fd f91c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3778:	68a2      	ldr	r2, [r4, #8]
    377a:	782b      	ldrb	r3, [r5, #0]
    377c:	6952      	ldr	r2, [r2, #20]
    377e:	f06f 0607 	mvn.w	r6, #7
    3782:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3786:	58d2      	ldr	r2, [r2, r3]
    3788:	4790      	blx	r2
    378a:	4606      	mov	r6, r0
    378c:	e000      	b.n	3790 <CONFIG_USB_DEVICE_VID+0x124>
    378e:	2601      	movs	r6, #1
    3790:	7ba8      	ldrb	r0, [r5, #14]
    3792:	b118      	cbz	r0, 379c <CONFIG_USB_DEVICE_VID+0x130>
    3794:	f003 ffd2 	bl	773c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3798:	f003 fdf6 	bl	7388 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    379c:	2e00      	cmp	r6, #0
    379e:	d00f      	beq.n	37c0 <CONFIG_USB_DEVICE_VID+0x154>
    37a0:	6820      	ldr	r0, [r4, #0]
    37a2:	f00b f8ba 	bl	e91a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    37a6:	b130      	cbz	r0, 37b6 <CONFIG_USB_DEVICE_VID+0x14a>
    37a8:	f003 ffea 	bl	7780 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    37ac:	68a0      	ldr	r0, [r4, #8]
    37ae:	6880      	ldr	r0, [r0, #8]
    37b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37b4:	4700      	bx	r0
    37b6:	6820      	ldr	r0, [r4, #0]
    37b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37bc:	f000 bac6 	b.w	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
    37c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37c4:	20001448 	.word	0x20001448
    37c8:	200000f0 	.word	0x200000f0
    37cc:	b510      	push	{r4, lr}
    37ce:	2903      	cmp	r1, #3
    37d0:	d002      	beq.n	37d8 <CONFIG_USB_DEVICE_VID+0x16c>
    37d2:	2905      	cmp	r1, #5
    37d4:	d10a      	bne.n	37ec <CONFIG_USB_DEVICE_VID+0x180>
    37d6:	e002      	b.n	37de <CONFIG_USB_DEVICE_VID+0x172>
    37d8:	f000 fbb2 	bl	3f40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a8>
    37dc:	e003      	b.n	37e6 <CONFIG_USB_DEVICE_VID+0x17a>
    37de:	4904      	ldr	r1, [pc, #16]	; (37f0 <CONFIG_USB_DEVICE_VID+0x184>)
    37e0:	6809      	ldr	r1, [r1, #0]
    37e2:	b109      	cbz	r1, 37e8 <CONFIG_USB_DEVICE_VID+0x17c>
    37e4:	4788      	blx	r1
    37e6:	b108      	cbz	r0, 37ec <CONFIG_USB_DEVICE_VID+0x180>
    37e8:	2000      	movs	r0, #0
    37ea:	bd10      	pop	{r4, pc}
    37ec:	2001      	movs	r0, #1
    37ee:	bd10      	pop	{r4, pc}
    37f0:	200000fc 	.word	0x200000fc
    37f4:	4a09      	ldr	r2, [pc, #36]	; (381c <CONFIG_USB_DEVICE_VID+0x1b0>)
    37f6:	0003      	movs	r3, r0
    37f8:	6810      	ldr	r0, [r2, #0]
    37fa:	d001      	beq.n	3800 <CONFIG_USB_DEVICE_VID+0x194>
    37fc:	f000 baa6 	b.w	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
    3800:	2900      	cmp	r1, #0
    3802:	d009      	beq.n	3818 <CONFIG_USB_DEVICE_VID+0x1ac>
    3804:	6891      	ldr	r1, [r2, #8]
    3806:	4a06      	ldr	r2, [pc, #24]	; (3820 <CONFIG_USB_DEVICE_VID+0x1b4>)
    3808:	6909      	ldr	r1, [r1, #16]
    380a:	7812      	ldrb	r2, [r2, #0]
    380c:	f06f 030f 	mvn.w	r3, #15
    3810:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3814:	5889      	ldr	r1, [r1, r2]
    3816:	4708      	bx	r1
    3818:	4770      	bx	lr
    381a:	0000      	.short	0x0000
    381c:	200000f0 	.word	0x200000f0
    3820:	20001448 	.word	0x20001448
    3824:	b570      	push	{r4, r5, r6, lr}
    3826:	4604      	mov	r4, r0
    3828:	8840      	ldrh	r0, [r0, #2]
    382a:	2810      	cmp	r0, #16
    382c:	d019      	beq.n	3862 <CONFIG_USB_DEVICE_VID+0x1f6>
    382e:	4d10      	ldr	r5, [pc, #64]	; (3870 <CONFIG_USB_DEVICE_VID+0x204>)
    3830:	7ba8      	ldrb	r0, [r5, #14]
    3832:	b120      	cbz	r0, 383e <CONFIG_USB_DEVICE_VID+0x1d2>
    3834:	f003 fdc8 	bl	73c8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3838:	2040      	movs	r0, #64	; 0x40
    383a:	f003 ff8d 	bl	7758 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    383e:	480d      	ldr	r0, [pc, #52]	; (3874 <CONFIG_USB_DEVICE_VID+0x208>)
    3840:	6840      	ldr	r0, [r0, #4]
    3842:	f004 fa0f 	bl	7c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3846:	78a0      	ldrb	r0, [r4, #2]
    3848:	0740      	lsls	r0, r0, #29
    384a:	d404      	bmi.n	3856 <CONFIG_USB_DEVICE_VID+0x1ea>
    384c:	2100      	movs	r1, #0
    384e:	7922      	ldrb	r2, [r4, #4]
    3850:	4608      	mov	r0, r1
    3852:	f004 fa8f 	bl	7d74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3856:	2000      	movs	r0, #0
    3858:	f004 f8b4 	bl	79c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    385c:	2002      	movs	r0, #2
    385e:	7028      	strb	r0, [r5, #0]
    3860:	bd70      	pop	{r4, r5, r6, pc}
    3862:	4620      	mov	r0, r4
    3864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3868:	2101      	movs	r1, #1
    386a:	f7ff bebf 	b.w	35ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    386e:	0000      	.short	0x0000
    3870:	20001448 	.word	0x20001448
    3874:	200000f0 	.word	0x200000f0
    3878:	b510      	push	{r4, lr}
    387a:	4c12      	ldr	r4, [pc, #72]	; (38c4 <CONFIG_USB_DEVICE_VID+0x258>)
    387c:	6820      	ldr	r0, [r4, #0]
    387e:	f000 f825 	bl	38cc <CONFIG_USB_DEVICE_VID+0x260>
    3882:	6820      	ldr	r0, [r4, #0]
    3884:	f00b f849 	bl	e91a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3888:	2800      	cmp	r0, #0
    388a:	6820      	ldr	r0, [r4, #0]
    388c:	d00b      	beq.n	38a6 <CONFIG_USB_DEVICE_VID+0x23a>
    388e:	490e      	ldr	r1, [pc, #56]	; (38c8 <CONFIG_USB_DEVICE_VID+0x25c>)
    3890:	780a      	ldrb	r2, [r1, #0]
    3892:	2a02      	cmp	r2, #2
    3894:	d00b      	beq.n	38ae <CONFIG_USB_DEVICE_VID+0x242>
    3896:	780a      	ldrb	r2, [r1, #0]
    3898:	2a03      	cmp	r2, #3
    389a:	d008      	beq.n	38ae <CONFIG_USB_DEVICE_VID+0x242>
    389c:	f640 4137 	movw	r1, #3127	; 0xc37
    38a0:	202d      	movs	r0, #45	; 0x2d
    38a2:	f7fd f885 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    38a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38aa:	f000 ba4f 	b.w	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
    38ae:	68a2      	ldr	r2, [r4, #8]
    38b0:	7809      	ldrb	r1, [r1, #0]
    38b2:	68d2      	ldr	r2, [r2, #12]
    38b4:	f06f 0307 	mvn.w	r3, #7
    38b8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    38bc:	5851      	ldr	r1, [r2, r1]
    38be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38c2:	4708      	bx	r1
    38c4:	200000f0 	.word	0x200000f0
    38c8:	20001448 	.word	0x20001448
    38cc:	b510      	push	{r4, lr}
    38ce:	7b01      	ldrb	r1, [r0, #12]
    38d0:	b121      	cbz	r1, 38dc <CONFIG_USB_DEVICE_VID+0x270>
    38d2:	4604      	mov	r4, r0
    38d4:	f7fe feaa 	bl	262c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    38d8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    38dc:	4805      	ldr	r0, [pc, #20]	; (38f4 <CONFIG_USB_DEVICE_VID+0x288>)
    38de:	7b80      	ldrb	r0, [r0, #14]
    38e0:	2800      	cmp	r0, #0
    38e2:	d005      	beq.n	38f0 <CONFIG_USB_DEVICE_VID+0x284>
    38e4:	f003 ff2a 	bl	773c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    38e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38ec:	f003 bd4c 	b.w	7388 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    38f0:	bd10      	pop	{r4, pc}
    38f2:	0000      	.short	0x0000
    38f4:	20001448 	.word	0x20001448

000038f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    38f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38fc:	4d5c      	ldr	r5, [pc, #368]	; (3a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    38fe:	4604      	mov	r4, r0
    3900:	b086      	sub	sp, #24
    3902:	7828      	ldrb	r0, [r5, #0]
    3904:	bbe8      	cbnz	r0, 3982 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    3906:	7820      	ldrb	r0, [r4, #0]
    3908:	28ff      	cmp	r0, #255	; 0xff
    390a:	d04b      	beq.n	39a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    390c:	f04f 0800 	mov.w	r8, #0
    3910:	f8a5 800c 	strh.w	r8, [r5, #12]
    3914:	f8c5 8004 	str.w	r8, [r5, #4]
    3918:	f885 8001 	strb.w	r8, [r5, #1]
    391c:	f885 8002 	strb.w	r8, [r5, #2]
    3920:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    3924:	4b53      	ldr	r3, [pc, #332]	; (3a74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    3926:	4e54      	ldr	r6, [pc, #336]	; (3a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    3928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    392a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    392e:	68b0      	ldr	r0, [r6, #8]
    3930:	6840      	ldr	r0, [r0, #4]
    3932:	9003      	str	r0, [sp, #12]
    3934:	4668      	mov	r0, sp
    3936:	f004 f819 	bl	796c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    393a:	f004 f8ed 	bl	7b18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    393e:	f003 fefd 	bl	773c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3942:	f003 fd21 	bl	7388 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3946:	484d      	ldr	r0, [pc, #308]	; (3a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    3948:	f004 fa46 	bl	7dd8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    394c:	484c      	ldr	r0, [pc, #304]	; (3a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    394e:	f004 fa4d 	bl	7dec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    3952:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3956:	4607      	mov	r7, r0
    3958:	f00a ff92 	bl	e880 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    395c:	4638      	mov	r0, r7
    395e:	f00a ff54 	bl	e80a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3962:	4601      	mov	r1, r0
    3964:	4620      	mov	r0, r4
    3966:	f00a ff1c 	bl	e7a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    396a:	f994 000e 	ldrsb.w	r0, [r4, #14]
    396e:	f004 f957 	bl	7c20 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    3972:	7921      	ldrb	r1, [r4, #4]
    3974:	2000      	movs	r0, #0
    3976:	f003 ff8d 	bl	7894 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    397a:	2101      	movs	r1, #1
    397c:	60a8      	str	r0, [r5, #8]
    397e:	b1a8      	cbz	r0, 39ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    3980:	e000      	b.n	3984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    3982:	e00f      	b.n	39a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3984:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3988:	6b60      	ldr	r0, [r4, #52]	; 0x34
    398a:	f009 fd2d 	bl	d3e8 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    398e:	4607      	mov	r7, r0
    3990:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3994:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3996:	f009 fd2a 	bl	d3ee <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    399a:	b14f      	cbz	r7, 39b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    399c:	f894 1020 	ldrb.w	r1, [r4, #32]
    39a0:	b951      	cbnz	r1, 39b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    39a2:	e005      	b.n	39b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    39a4:	200c      	movs	r0, #12
    39a6:	b006      	add	sp, #24
    39a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39ac:	7029      	strb	r1, [r5, #0]
    39ae:	e05c      	b.n	3a6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    39b0:	b120      	cbz	r0, 39bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    39b2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    39b6:	b108      	cbz	r0, 39bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    39b8:	2701      	movs	r7, #1
    39ba:	e000      	b.n	39be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    39bc:	2700      	movs	r7, #0
    39be:	7ea0      	ldrb	r0, [r4, #26]
    39c0:	b920      	cbnz	r0, 39cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    39c2:	7e20      	ldrb	r0, [r4, #24]
    39c4:	b910      	cbnz	r0, 39cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    39c6:	78a0      	ldrb	r0, [r4, #2]
    39c8:	0740      	lsls	r0, r0, #29
    39ca:	d523      	bpl.n	3a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    39cc:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    39d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    39d4:	4050      	eors	r0, r2
    39d6:	ea70 0101 	orns	r1, r0, r1
    39da:	d006      	beq.n	39ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    39dc:	f00c fc0d 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    39e0:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    39e4:	1a80      	subs	r0, r0, r2
    39e6:	4199      	sbcs	r1, r3
    39e8:	d200      	bcs.n	39ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    39ea:	b19f      	cbz	r7, 3a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    39ec:	f7fe fd00 	bl	23f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    39f0:	4924      	ldr	r1, [pc, #144]	; (3a84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    39f2:	fba0 2301 	umull	r2, r3, r0, r1
    39f6:	f104 0048 	add.w	r0, r4, #72	; 0x48
    39fa:	f00a fedd 	bl	e7b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    39fe:	2101      	movs	r1, #1
    3a00:	4620      	mov	r0, r4
    3a02:	f00a fe92 	bl	e72a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    3a06:	78a0      	ldrb	r0, [r4, #2]
    3a08:	0740      	lsls	r0, r0, #29
    3a0a:	d503      	bpl.n	3a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3a0c:	2101      	movs	r1, #1
    3a0e:	4620      	mov	r0, r4
    3a10:	f000 fac8 	bl	3fa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50c>
    3a14:	6870      	ldr	r0, [r6, #4]
    3a16:	1cc0      	adds	r0, r0, #3
    3a18:	f009 fe02 	bl	d620 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    3a1c:	73a8      	strb	r0, [r5, #14]
    3a1e:	78a0      	ldrb	r0, [r4, #2]
    3a20:	07c0      	lsls	r0, r0, #31
    3a22:	d022      	beq.n	3a6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3a24:	f8cd 8010 	str.w	r8, [sp, #16]
    3a28:	20ff      	movs	r0, #255	; 0xff
    3a2a:	f8cd 8014 	str.w	r8, [sp, #20]
    3a2e:	73e8      	strb	r0, [r5, #15]
    3a30:	69e6      	ldr	r6, [r4, #28]
    3a32:	f106 070a 	add.w	r7, r6, #10
    3a36:	e013      	b.n	3a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3a38:	9c04      	ldr	r4, [sp, #16]
    3a3a:	42b4      	cmp	r4, r6
    3a3c:	d010      	beq.n	3a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3a3e:	7a72      	ldrb	r2, [r6, #9]
    3a40:	7a60      	ldrb	r0, [r4, #9]
    3a42:	463b      	mov	r3, r7
    3a44:	f104 010a 	add.w	r1, r4, #10
    3a48:	f009 fd5f 	bl	d50a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3a4c:	b140      	cbz	r0, 3a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3a4e:	78a0      	ldrb	r0, [r4, #2]
    3a50:	73e8      	strb	r0, [r5, #15]
    3a52:	f8d4 0003 	ldr.w	r0, [r4, #3]
    3a56:	6128      	str	r0, [r5, #16]
    3a58:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    3a5c:	82a8      	strh	r0, [r5, #20]
    3a5e:	e004      	b.n	3a6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3a60:	a804      	add	r0, sp, #16
    3a62:	f7fd fb25 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3a66:	2800      	cmp	r0, #0
    3a68:	d0e6      	beq.n	3a38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    3a6a:	2000      	movs	r0, #0
    3a6c:	e79b      	b.n	39a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3a6e:	0000      	.short	0x0000
    3a70:	20001448 	.word	0x20001448
    3a74:	000040b4 	.word	0x000040b4
    3a78:	200000f0 	.word	0x200000f0
    3a7c:	8e89bed6 	.word	0x8e89bed6
    3a80:	00555555 	.word	0x00555555
    3a84:	000f4240 	.word	0x000f4240
    3a88:	b510      	push	{r4, lr}
    3a8a:	4604      	mov	r4, r0
    3a8c:	f7ff ff34 	bl	38f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    3a90:	2800      	cmp	r0, #0
    3a92:	d108      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
    3a94:	4804      	ldr	r0, [pc, #16]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a96:	7800      	ldrb	r0, [r0, #0]
    3a98:	2801      	cmp	r0, #1
    3a9a:	d003      	beq.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a9c:	2100      	movs	r1, #0
    3a9e:	4620      	mov	r0, r4
    3aa0:	f7ff fda4 	bl	35ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3aa4:	2000      	movs	r0, #0
    3aa6:	bd10      	pop	{r4, pc}
    3aa8:	20001448 	.word	0x20001448
    3aac:	480a      	ldr	r0, [pc, #40]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3aae:	b510      	push	{r4, lr}
    3ab0:	490a      	ldr	r1, [pc, #40]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3ab2:	6804      	ldr	r4, [r0, #0]
    3ab4:	7808      	ldrb	r0, [r1, #0]
    3ab6:	2800      	cmp	r0, #0
    3ab8:	d00d      	beq.n	3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
    3aba:	7808      	ldrb	r0, [r1, #0]
    3abc:	2802      	cmp	r0, #2
    3abe:	d002      	beq.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3ac0:	7808      	ldrb	r0, [r1, #0]
    3ac2:	2803      	cmp	r0, #3
    3ac4:	d102      	bne.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3ac6:	4620      	mov	r0, r4
    3ac8:	f7ff ff00 	bl	38cc <CONFIG_USB_DEVICE_VID+0x260>
    3acc:	4620      	mov	r0, r4
    3ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ad2:	f000 b93b 	b.w	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
    3ad6:	bd10      	pop	{r4, pc}
    3ad8:	200000f0 	.word	0x200000f0
    3adc:	20001448 	.word	0x20001448
    3ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ae4:	4604      	mov	r4, r0
    3ae6:	4829      	ldr	r0, [pc, #164]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
    3ae8:	460d      	mov	r5, r1
    3aea:	6840      	ldr	r0, [r0, #4]
    3aec:	f004 f8ba 	bl	7c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3af0:	4e27      	ldr	r6, [pc, #156]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    3af2:	2004      	movs	r0, #4
    3af4:	7030      	strb	r0, [r6, #0]
    3af6:	b355      	cbz	r5, 3b4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb6>
    3af8:	8860      	ldrh	r0, [r4, #2]
    3afa:	2810      	cmp	r0, #16
    3afc:	d023      	beq.n	3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3afe:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3b02:	4680      	mov	r8, r0
    3b04:	68b5      	ldr	r5, [r6, #8]
    3b06:	f00a fe74 	bl	e7f2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3b0a:	4607      	mov	r7, r0
    3b0c:	4640      	mov	r0, r8
    3b0e:	f00a fe99 	bl	e844 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3b12:	1a38      	subs	r0, r7, r0
    3b14:	1e40      	subs	r0, r0, #1
    3b16:	b2c0      	uxtb	r0, r0
    3b18:	8861      	ldrh	r1, [r4, #2]
    3b1a:	2228      	movs	r2, #40	; 0x28
    3b1c:	f000 fb06 	bl	412c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    3b20:	4405      	add	r5, r0
    3b22:	78a0      	ldrb	r0, [r4, #2]
    3b24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3b28:	b130      	cbz	r0, 3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b2a:	6870      	ldr	r0, [r6, #4]
    3b2c:	4405      	add	r5, r0
    3b2e:	f00a fee2 	bl	e8f6 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    3b32:	4428      	add	r0, r5
    3b34:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    3b38:	7922      	ldrb	r2, [r4, #4]
    3b3a:	4629      	mov	r1, r5
    3b3c:	2000      	movs	r0, #0
    3b3e:	f004 f8a7 	bl	7c90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    3b42:	b920      	cbnz	r0, 3b4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb6>
    3b44:	e00c      	b.n	3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>
    3b46:	7921      	ldrb	r1, [r4, #4]
    3b48:	2000      	movs	r0, #0
    3b4a:	f003 fe69 	bl	7820 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3b4e:	8860      	ldrh	r0, [r4, #2]
    3b50:	2813      	cmp	r0, #19
    3b52:	d011      	beq.n	3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>
    3b54:	dc07      	bgt.n	3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
    3b56:	2810      	cmp	r0, #16
    3b58:	d015      	beq.n	3b86 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xee>
    3b5a:	2812      	cmp	r0, #18
    3b5c:	d107      	bne.n	3b6e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd6>
    3b5e:	e00b      	b.n	3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>
    3b60:	f640 51a8 	movw	r1, #3496	; 0xda8
    3b64:	e005      	b.n	3b72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xda>
    3b66:	2815      	cmp	r0, #21
    3b68:	d006      	beq.n	3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>
    3b6a:	281d      	cmp	r0, #29
    3b6c:	d004      	beq.n	3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>
    3b6e:	f640 51bc 	movw	r1, #3516	; 0xdbc
    3b72:	202d      	movs	r0, #45	; 0x2d
    3b74:	f7fc ff1c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b78:	7922      	ldrb	r2, [r4, #4]
    3b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b7e:	2101      	movs	r1, #1
    3b80:	2000      	movs	r0, #0
    3b82:	f004 b8f7 	b.w	7d74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b8a:	0000      	.short	0x0000
    3b8c:	200000f0 	.word	0x200000f0
    3b90:	20001448 	.word	0x20001448
    3b94:	b538      	push	{r3, r4, r5, lr}
    3b96:	4604      	mov	r4, r0
    3b98:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    3b9c:	460b      	mov	r3, r1
    3b9e:	f88d 0000 	strb.w	r0, [sp]
    3ba2:	9800      	ldr	r0, [sp, #0]
    3ba4:	9000      	str	r0, [sp, #0]
    3ba6:	f89d 0000 	ldrb.w	r0, [sp]
    3baa:	2800      	cmp	r0, #0
    3bac:	d13a      	bne.n	3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
    3bae:	7820      	ldrb	r0, [r4, #0]
    3bb0:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    3bb4:	2bff      	cmp	r3, #255	; 0xff
    3bb6:	d010      	beq.n	3bda <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x142>
    3bb8:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    3bbc:	1e51      	subs	r1, r2, #1
    3bbe:	4618      	mov	r0, r3
    3bc0:	f7fe fbfc 	bl	23bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3bc4:	b130      	cbz	r0, 3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>
    3bc6:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    3bca:	f040 0002 	orr.w	r0, r0, #2
    3bce:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3bd2:	e011      	b.n	3bf8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x160>
    3bd4:	f241 0118 	movw	r1, #4120	; 0x1018
    3bd8:	e021      	b.n	3c1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x186>
    3bda:	4813      	ldr	r0, [pc, #76]	; (3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>)
    3bdc:	6840      	ldr	r0, [r0, #4]
    3bde:	7801      	ldrb	r1, [r0, #0]
    3be0:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3be4:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    3be8:	f8d0 1003 	ldr.w	r1, [r0, #3]
    3bec:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    3bf0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3bf4:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    3bf8:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    3bfc:	287f      	cmp	r0, #127	; 0x7f
    3bfe:	d00c      	beq.n	3c1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x182>
    3c00:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    3c04:	207f      	movs	r0, #127	; 0x7f
    3c06:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3c0a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    3c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3c12:	2202      	movs	r2, #2
    3c14:	4905      	ldr	r1, [pc, #20]	; (3c2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x194>)
    3c16:	f00a b8f7 	b.w	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3c1a:	f640 616c 	movw	r1, #3692	; 0xe6c
    3c1e:	202d      	movs	r0, #45	; 0x2d
    3c20:	f7fc fec6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c24:	bd38      	pop	{r3, r4, r5, pc}
    3c26:	0000      	.short	0x0000
    3c28:	200000f0 	.word	0x200000f0
    3c2c:	0000e713 	.word	0x0000e713
    3c30:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3c34:	4616      	mov	r6, r2
    3c36:	4604      	mov	r4, r0
    3c38:	2903      	cmp	r1, #3
    3c3a:	d004      	beq.n	3c46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ae>
    3c3c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3c40:	b108      	cbz	r0, 3c46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ae>
    3c42:	2001      	movs	r0, #1
    3c44:	e000      	b.n	3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>
    3c46:	2000      	movs	r0, #0
    3c48:	2500      	movs	r5, #0
    3c4a:	2903      	cmp	r1, #3
    3c4c:	d003      	beq.n	3c56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1be>
    3c4e:	2701      	movs	r7, #1
    3c50:	2905      	cmp	r1, #5
    3c52:	d005      	beq.n	3c60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c8>
    3c54:	e008      	b.n	3c68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d0>
    3c56:	78a1      	ldrb	r1, [r4, #2]
    3c58:	2702      	movs	r7, #2
    3c5a:	f3c1 0140 	ubfx	r1, r1, #1, #1
    3c5e:	e001      	b.n	3c64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1cc>
    3c60:	78a1      	ldrb	r1, [r4, #2]
    3c62:	07c9      	lsls	r1, r1, #31
    3c64:	2900      	cmp	r1, #0
    3c66:	d06b      	beq.n	3d40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a8>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d169      	bne.n	3d40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a8>
    3c6c:	4835      	ldr	r0, [pc, #212]	; (3d44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ac>)
    3c6e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3d48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b0>
    3c72:	7b80      	ldrb	r0, [r0, #14]
    3c74:	b180      	cbz	r0, 3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>
    3c76:	f009 fcd6 	bl	d626 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3c7a:	7030      	strb	r0, [r6, #0]
    3c7c:	28ff      	cmp	r0, #255	; 0xff
    3c7e:	d014      	beq.n	3caa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x212>
    3c80:	b2c0      	uxtb	r0, r0
    3c82:	466a      	mov	r2, sp
    3c84:	a902      	add	r1, sp, #8
    3c86:	f7fe fb99 	bl	23bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3c8a:	b148      	cbz	r0, 3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
    3c8c:	4669      	mov	r1, sp
    3c8e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3c92:	f00a fbe8 	bl	e466 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3c96:	4605      	mov	r5, r0
    3c98:	7830      	ldrb	r0, [r6, #0]
    3c9a:	28ff      	cmp	r0, #255	; 0xff
    3c9c:	d005      	beq.n	3caa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x212>
    3c9e:	e00d      	b.n	3cbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x224>
    3ca0:	f640 719b 	movw	r1, #3995	; 0xf9b
    3ca4:	202d      	movs	r0, #45	; 0x2d
    3ca6:	f7fc fe83 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3caa:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3cae:	f811 0b03 	ldrb.w	r0, [r1], #3
    3cb2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3cb6:	f00a fbd6 	bl	e466 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3cba:	4605      	mov	r5, r0
    3cbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3cc0:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    3cc4:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3cc8:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ccc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3cd0:	f009 fc1b 	bl	d50a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3cd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3cd8:	4680      	mov	r8, r0
    3cda:	f811 0b03 	ldrb.w	r0, [r1], #3
    3cde:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3ce2:	f009 fcaa 	bl	d63a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3ce6:	4681      	mov	r9, r0
    3ce8:	f7fe fb88 	bl	23fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    3cec:	b138      	cbz	r0, 3cfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x266>
    3cee:	4648      	mov	r0, r9
    3cf0:	f7fe fb44 	bl	237c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3cf4:	b118      	cbz	r0, 3cfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x266>
    3cf6:	2110      	movs	r1, #16
    3cf8:	f009 fe4a 	bl	d990 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3cfc:	b138      	cbz	r0, 3d0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x276>
    3cfe:	2100      	movs	r1, #0
    3d00:	7830      	ldrb	r0, [r6, #0]
    3d02:	28ff      	cmp	r0, #255	; 0xff
    3d04:	d00c      	beq.n	3d20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x288>
    3d06:	f1b8 0f00 	cmp.w	r8, #0
    3d0a:	d105      	bne.n	3d18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x280>
    3d0c:	e001      	b.n	3d12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27a>
    3d0e:	2101      	movs	r1, #1
    3d10:	e7f6      	b.n	3d00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x268>
    3d12:	7e62      	ldrb	r2, [r4, #25]
    3d14:	4282      	cmp	r2, r0
    3d16:	d101      	bne.n	3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>
    3d18:	2001      	movs	r0, #1
    3d1a:	e003      	b.n	3d24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28c>
    3d1c:	2000      	movs	r0, #0
    3d1e:	e001      	b.n	3d24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28c>
    3d20:	ea28 0001 	bic.w	r0, r8, r1
    3d24:	78a2      	ldrb	r2, [r4, #2]
    3d26:	0752      	lsls	r2, r2, #29
    3d28:	d501      	bpl.n	3d2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x296>
    3d2a:	b930      	cbnz	r0, 3d3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a2>
    3d2c:	e008      	b.n	3d40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a8>
    3d2e:	b939      	cbnz	r1, 3d40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a8>
    3d30:	b91d      	cbnz	r5, 3d3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a2>
    3d32:	7be0      	ldrb	r0, [r4, #15]
    3d34:	b108      	cbz	r0, 3d3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a2>
    3d36:	42b8      	cmp	r0, r7
    3d38:	d102      	bne.n	3d40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a8>
    3d3a:	2001      	movs	r0, #1
    3d3c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3d40:	2000      	movs	r0, #0
    3d42:	e7fb      	b.n	3d3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a4>
    3d44:	20001448 	.word	0x20001448
    3d48:	200000f0 	.word	0x200000f0
    3d4c:	b570      	push	{r4, r5, r6, lr}
    3d4e:	4604      	mov	r4, r0
    3d50:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    3d52:	4d10      	ldr	r5, [pc, #64]	; (3d94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fc>)
    3d54:	1c40      	adds	r0, r0, #1
    3d56:	8620      	strh	r0, [r4, #48]	; 0x30
    3d58:	7ba8      	ldrb	r0, [r5, #14]
    3d5a:	2600      	movs	r6, #0
    3d5c:	b120      	cbz	r0, 3d68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2d0>
    3d5e:	f003 fced 	bl	773c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3d62:	f003 fb11 	bl	7388 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3d66:	73ae      	strb	r6, [r5, #14]
    3d68:	702e      	strb	r6, [r5, #0]
    3d6a:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    3d6e:	b108      	cbz	r0, 3d74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2dc>
    3d70:	2101      	movs	r1, #1
    3d72:	e00a      	b.n	3d8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f2>
    3d74:	7b60      	ldrb	r0, [r4, #13]
    3d76:	b138      	cbz	r0, 3d88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f0>
    3d78:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    3d7a:	4288      	cmp	r0, r1
    3d7c:	d804      	bhi.n	3d88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f0>
    3d7e:	2101      	movs	r1, #1
    3d80:	4620      	mov	r0, r4
    3d82:	f00a fddc 	bl	e93e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3d86:	bd70      	pop	{r4, r5, r6, pc}
    3d88:	2100      	movs	r1, #0
    3d8a:	4620      	mov	r0, r4
    3d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d90:	f00a bdd5 	b.w	e93e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3d94:	20001448 	.word	0x20001448
    3d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d9c:	4604      	mov	r4, r0
    3d9e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    3da2:	8808      	ldrh	r0, [r1, #0]
    3da4:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    3da8:	20ff      	movs	r0, #255	; 0xff
    3daa:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    3dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3db2:	4616      	mov	r6, r2
    3db4:	460d      	mov	r5, r1
    3db6:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d14b      	bne.n	3e56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3be>
    3dbe:	6928      	ldr	r0, [r5, #16]
    3dc0:	f009 fc74 	bl	d6ac <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3dc4:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    3dc8:	8b28      	ldrh	r0, [r5, #24]
    3dca:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    3dce:	8b68      	ldrh	r0, [r5, #26]
    3dd0:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    3dd4:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    3dd8:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    3ddc:	7e20      	ldrb	r0, [r4, #24]
    3dde:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3de2:	460f      	mov	r7, r1
    3de4:	2500      	movs	r5, #0
    3de6:	b120      	cbz	r0, 3df2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35a>
    3de8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3dec:	f00a fb67 	bl	e4be <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3df0:	b940      	cbnz	r0, 3e04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36c>
    3df2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    3df6:	b170      	cbz	r0, 3e16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x37e>
    3df8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3dfc:	4639      	mov	r1, r7
    3dfe:	f00a fb55 	bl	e4ac <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3e02:	b140      	cbz	r0, 3e16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x37e>
    3e04:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    3e08:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    3e0c:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    3e10:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    3e14:	e003      	b.n	3e1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x386>
    3e16:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    3e1a:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    3e1e:	4815      	ldr	r0, [pc, #84]	; (3e74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3dc>)
    3e20:	2eff      	cmp	r6, #255	; 0xff
    3e22:	6840      	ldr	r0, [r0, #4]
    3e24:	7801      	ldrb	r1, [r0, #0]
    3e26:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3e2a:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    3e2e:	f850 1f03 	ldr.w	r1, [r0, #3]!
    3e32:	d017      	beq.n	3e64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3cc>
    3e34:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    3e38:	8880      	ldrh	r0, [r0, #4]
    3e3a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    3e3e:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    3e42:	1e51      	subs	r1, r2, #1
    3e44:	4630      	mov	r0, r6
    3e46:	f7fe fab9 	bl	23bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3e4a:	b130      	cbz	r0, 3e5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c2>
    3e4c:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    3e50:	f040 0002 	orr.w	r0, r0, #2
    3e54:	7020      	strb	r0, [r4, #0]
    3e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e5a:	f640 418b 	movw	r1, #3211	; 0xc8b
    3e5e:	202d      	movs	r0, #45	; 0x2d
    3e60:	f7fc fda6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e64:	f844 1f7a 	str.w	r1, [r4, #122]!
    3e68:	8880      	ldrh	r0, [r0, #4]
    3e6a:	80a0      	strh	r0, [r4, #4]
    3e6c:	60e5      	str	r5, [r4, #12]
    3e6e:	8225      	strh	r5, [r4, #16]
    3e70:	e7f1      	b.n	3e56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3be>
    3e72:	0000      	.short	0x0000
    3e74:	200000f0 	.word	0x200000f0
    3e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e7a:	4604      	mov	r4, r0
    3e7c:	20ff      	movs	r0, #255	; 0xff
    3e7e:	f88d 0000 	strb.w	r0, [sp]
    3e82:	2601      	movs	r6, #1
    3e84:	466a      	mov	r2, sp
    3e86:	2105      	movs	r1, #5
    3e88:	4620      	mov	r0, r4
    3e8a:	f7ff fed1 	bl	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3e8e:	b160      	cbz	r0, 3eaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x412>
    3e90:	4d28      	ldr	r5, [pc, #160]	; (3f34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49c>)
    3e92:	4f27      	ldr	r7, [pc, #156]	; (3f30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x498>)
    3e94:	6869      	ldr	r1, [r5, #4]
    3e96:	7bfa      	ldrb	r2, [r7, #15]
    3e98:	f107 0310 	add.w	r3, r7, #16
    3e9c:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ea0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3ea4:	f009 fb31 	bl	d50a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3ea8:	b110      	cbz	r0, 3eb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x418>
    3eaa:	2600      	movs	r6, #0
    3eac:	4630      	mov	r0, r6
    3eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3eb0:	686a      	ldr	r2, [r5, #4]
    3eb2:	69e0      	ldr	r0, [r4, #28]
    3eb4:	7812      	ldrb	r2, [r2, #0]
    3eb6:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    3eba:	f3c2 1240 	ubfx	r2, r2, #5, #1
    3ebe:	4011      	ands	r1, r2
    3ec0:	7001      	strb	r1, [r0, #0]
    3ec2:	2201      	movs	r2, #1
    3ec4:	4620      	mov	r0, r4
    3ec6:	69e1      	ldr	r1, [r4, #28]
    3ec8:	f000 f89a 	bl	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
    3ecc:	2300      	movs	r3, #0
    3ece:	f89d 2000 	ldrb.w	r2, [sp]
    3ed2:	4620      	mov	r0, r4
    3ed4:	69e1      	ldr	r1, [r4, #28]
    3ed6:	f7ff ff5f 	bl	3d98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x300>
    3eda:	2202      	movs	r2, #2
    3edc:	4916      	ldr	r1, [pc, #88]	; (3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>)
    3ede:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3ee2:	f009 ff91 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3ee6:	69e0      	ldr	r0, [r4, #28]
    3ee8:	2202      	movs	r2, #2
    3eea:	8801      	ldrh	r1, [r0, #0]
    3eec:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    3ef0:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    3ef4:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    3ef8:	4910      	ldr	r1, [pc, #64]	; (3f3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a4>)
    3efa:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    3efe:	f009 ff83 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3f02:	2100      	movs	r1, #0
    3f04:	69e0      	ldr	r0, [r4, #28]
    3f06:	7039      	strb	r1, [r7, #0]
    3f08:	460a      	mov	r2, r1
    3f0a:	4621      	mov	r1, r4
    3f0c:	f000 fa7a 	bl	4404 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    3f10:	6868      	ldr	r0, [r5, #4]
    3f12:	69e1      	ldr	r1, [r4, #28]
    3f14:	f8d0 2003 	ldr.w	r2, [r0, #3]
    3f18:	f841 2f03 	str.w	r2, [r1, #3]!
    3f1c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    3f20:	808a      	strh	r2, [r1, #4]
    3f22:	7800      	ldrb	r0, [r0, #0]
    3f24:	69e1      	ldr	r1, [r4, #28]
    3f26:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3f2a:	7088      	strb	r0, [r1, #2]
    3f2c:	e7be      	b.n	3eac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x414>
    3f2e:	0000      	.short	0x0000
    3f30:	20001448 	.word	0x20001448
    3f34:	200000f0 	.word	0x200000f0
    3f38:	0000e6c3 	.word	0x0000e6c3
    3f3c:	0000e6b3 	.word	0x0000e6b3
    3f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f42:	4604      	mov	r4, r0
    3f44:	20ff      	movs	r0, #255	; 0xff
    3f46:	f88d 0000 	strb.w	r0, [sp]
    3f4a:	2501      	movs	r5, #1
    3f4c:	466a      	mov	r2, sp
    3f4e:	2103      	movs	r1, #3
    3f50:	4620      	mov	r0, r4
    3f52:	f7ff fe6d 	bl	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3f56:	b1e8      	cbz	r0, 3f94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fc>
    3f58:	7b20      	ldrb	r0, [r4, #12]
    3f5a:	b120      	cbz	r0, 3f66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ce>
    3f5c:	f89d 1000 	ldrb.w	r1, [sp]
    3f60:	4620      	mov	r0, r4
    3f62:	f7ff fe17 	bl	3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3f66:	4e0d      	ldr	r6, [pc, #52]	; (3f9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x504>)
    3f68:	2100      	movs	r1, #0
    3f6a:	6870      	ldr	r0, [r6, #4]
    3f6c:	8001      	strh	r1, [r0, #0]
    3f6e:	2104      	movs	r1, #4
    3f70:	f009 fdc8 	bl	db04 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3f74:	4620      	mov	r0, r4
    3f76:	f000 f88b 	bl	4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    3f7a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    3f7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3f80:	6870      	ldr	r0, [r6, #4]
    3f82:	f009 fdf6 	bl	db72 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    3f86:	4906      	ldr	r1, [pc, #24]	; (3fa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x508>)
    3f88:	2005      	movs	r0, #5
    3f8a:	7008      	strb	r0, [r1, #0]
    3f8c:	6870      	ldr	r0, [r6, #4]
    3f8e:	f003 fe69 	bl	7c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3f92:	e000      	b.n	3f96 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fe>
    3f94:	2500      	movs	r5, #0
    3f96:	4628      	mov	r0, r5
    3f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f9a:	0000      	.short	0x0000
    3f9c:	200000f0 	.word	0x200000f0
    3fa0:	20001448 	.word	0x20001448
    3fa4:	b570      	push	{r4, r5, r6, lr}
    3fa6:	4604      	mov	r4, r0
    3fa8:	460e      	mov	r6, r1
    3faa:	7e40      	ldrb	r0, [r0, #25]
    3fac:	f7fe f9e6 	bl	237c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3fb0:	0005      	movs	r5, r0
    3fb2:	d019      	beq.n	3fe8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x550>
    3fb4:	2110      	movs	r1, #16
    3fb6:	f009 fceb 	bl	d990 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3fba:	2800      	cmp	r0, #0
    3fbc:	d114      	bne.n	3fe8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x550>
    3fbe:	2001      	movs	r0, #1
    3fc0:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3fc4:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3fc8:	4632      	mov	r2, r6
    3fca:	460c      	mov	r4, r1
    3fcc:	4628      	mov	r0, r5
    3fce:	f009 facc 	bl	d56a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3fd2:	4621      	mov	r1, r4
    3fd4:	4c05      	ldr	r4, [pc, #20]	; (3fec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x554>)
    3fd6:	6860      	ldr	r0, [r4, #4]
    3fd8:	f009 fdaf 	bl	db3a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3fdc:	6860      	ldr	r0, [r4, #4]
    3fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3fe2:	2101      	movs	r1, #1
    3fe4:	f009 bdaf 	b.w	db46 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3fe8:	bd70      	pop	{r4, r5, r6, pc}
    3fea:	0000      	.short	0x0000
    3fec:	200000f0 	.word	0x200000f0
    3ff0:	4802      	ldr	r0, [pc, #8]	; (3ffc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x564>)
    3ff2:	2101      	movs	r1, #1
    3ff4:	6800      	ldr	r0, [r0, #0]
    3ff6:	f7ff baf9 	b.w	35ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3ffa:	0000      	.short	0x0000
    3ffc:	200000f0 	.word	0x200000f0
    4000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4004:	4e21      	ldr	r6, [pc, #132]	; (408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>)
    4006:	4680      	mov	r8, r0
    4008:	460c      	mov	r4, r1
    400a:	6870      	ldr	r0, [r6, #4]
    400c:	4615      	mov	r5, r2
    400e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    4012:	6161      	str	r1, [r4, #20]
    4014:	6841      	ldr	r1, [r0, #4]
    4016:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    401a:	61e1      	str	r1, [r4, #28]
    401c:	8940      	ldrh	r0, [r0, #10]
    401e:	f009 fb41 	bl	d6a4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    4022:	4607      	mov	r7, r0
    4024:	6120      	str	r0, [r4, #16]
    4026:	6870      	ldr	r0, [r6, #4]
    4028:	4639      	mov	r1, r7
    402a:	7d80      	ldrb	r0, [r0, #22]
    402c:	f009 fca7 	bl	d97e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4030:	84a0      	strh	r0, [r4, #36]	; 0x24
    4032:	6870      	ldr	r0, [r6, #4]
    4034:	4639      	mov	r1, r7
    4036:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    403a:	f009 fc9c 	bl	d976 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    403e:	6220      	str	r0, [r4, #32]
    4040:	6870      	ldr	r0, [r6, #4]
    4042:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4046:	8321      	strh	r1, [r4, #24]
    4048:	8841      	ldrh	r1, [r0, #2]
    404a:	8361      	strh	r1, [r4, #26]
    404c:	6841      	ldr	r1, [r0, #4]
    404e:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    4052:	7a01      	ldrb	r1, [r0, #8]
    4054:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4058:	7a41      	ldrb	r1, [r0, #9]
    405a:	f001 011f 	and.w	r1, r1, #31
    405e:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    4062:	7a40      	ldrb	r0, [r0, #9]
    4064:	0940      	lsrs	r0, r0, #5
    4066:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    406a:	f104 0062 	add.w	r0, r4, #98	; 0x62
    406e:	7205      	strb	r5, [r0, #8]
    4070:	7245      	strb	r5, [r0, #9]
    4072:	21ff      	movs	r1, #255	; 0xff
    4074:	7281      	strb	r1, [r0, #10]
    4076:	2100      	movs	r1, #0
    4078:	3836      	subs	r0, #54	; 0x36
    407a:	f009 ff38 	bl	deee <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    407e:	f998 100e 	ldrsb.w	r1, [r8, #14]
    4082:	4620      	mov	r0, r4
    4084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4088:	f009 bbe0 	b.w	d84c <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    408c:	200000f0 	.word	0x200000f0
    4090:	b570      	push	{r4, r5, r6, lr}
    4092:	4d07      	ldr	r5, [pc, #28]	; (40b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb0>)
    4094:	4604      	mov	r4, r0
    4096:	f100 0151 	add.w	r1, r0, #81	; 0x51
    409a:	6868      	ldr	r0, [r5, #4]
    409c:	f009 fd5a 	bl	db54 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    40a0:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    40a4:	6868      	ldr	r0, [r5, #4]
    40a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40aa:	f009 bd59 	b.w	db60 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    40ae:	0000      	.short	0x0000
    40b0:	200000f0 	.word	0x200000f0
    40b4:	00003879 	.word	0x00003879
    40b8:	00003701 	.word	0x00003701
    40bc:	000037f5 	.word	0x000037f5
    40c0:	00000000 	.word	0x00000000
    40c4:	000037cd 	.word	0x000037cd
    40c8:	00003825 	.word	0x00003825
    40cc:	0000e6a7 	.word	0x0000e6a7
    40d0:	0000e6ad 	.word	0x0000e6ad
    40d4:	00003a89 	.word	0x00003a89
    40d8:	00003aad 	.word	0x00003aad
    40dc:	00003ff1 	.word	0x00003ff1
    40e0:	000040d0 	.word	0x000040d0
    40e4:	000040c8 	.word	0x000040c8
    40e8:	000040c4 	.word	0x000040c4

000040ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    40ec:	b510      	push	{r4, lr}
    40ee:	1e42      	subs	r2, r0, #1
    40f0:	2a02      	cmp	r2, #2
    40f2:	d901      	bls.n	40f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    40f4:	21ca      	movs	r1, #202	; 0xca
    40f6:	e009      	b.n	410c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    40f8:	1e40      	subs	r0, r0, #1
    40fa:	2910      	cmp	r1, #16
    40fc:	d009      	beq.n	4112 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    40fe:	2912      	cmp	r1, #18
    4100:	d00c      	beq.n	411c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4102:	2913      	cmp	r1, #19
    4104:	d00a      	beq.n	411c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4106:	2915      	cmp	r1, #21
    4108:	d005      	beq.n	4116 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    410a:	21d8      	movs	r1, #216	; 0xd8
    410c:	202f      	movs	r0, #47	; 0x2f
    410e:	f7fc fc4f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4112:	4905      	ldr	r1, [pc, #20]	; (4128 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4114:	e004      	b.n	4120 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4116:	4904      	ldr	r1, [pc, #16]	; (4128 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4118:	1d89      	adds	r1, r1, #6
    411a:	e001      	b.n	4120 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    411c:	4902      	ldr	r1, [pc, #8]	; (4128 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    411e:	1f89      	subs	r1, r1, #6
    4120:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4124:	bd10      	pop	{r4, pc}
    4126:	0000      	.short	0x0000
    4128:	0000e90e 	.word	0x0000e90e

0000412c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    412c:	1e42      	subs	r2, r0, #1
    412e:	b510      	push	{r4, lr}
    4130:	b2d2      	uxtb	r2, r2
    4132:	2a01      	cmp	r2, #1
    4134:	d903      	bls.n	413e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4136:	291d      	cmp	r1, #29
    4138:	d001      	beq.n	413e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    413a:	21ee      	movs	r1, #238	; 0xee
    413c:	e00d      	b.n	415a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    413e:	2913      	cmp	r1, #19
    4140:	d013      	beq.n	416a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    4142:	dc04      	bgt.n	414e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4144:	2910      	cmp	r1, #16
    4146:	d00b      	beq.n	4160 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4148:	2912      	cmp	r1, #18
    414a:	d104      	bne.n	4156 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    414c:	e00d      	b.n	416a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    414e:	2915      	cmp	r1, #21
    4150:	d008      	beq.n	4164 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    4152:	291d      	cmp	r1, #29
    4154:	d00e      	beq.n	4174 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4156:	f44f 7181 	mov.w	r1, #258	; 0x102
    415a:	202f      	movs	r0, #47	; 0x2f
    415c:	f7fc fc28 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4160:	4807      	ldr	r0, [pc, #28]	; (4180 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4162:	e004      	b.n	416e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4164:	4806      	ldr	r0, [pc, #24]	; (4180 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4166:	3008      	adds	r0, #8
    4168:	e001      	b.n	416e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    416a:	4805      	ldr	r0, [pc, #20]	; (4180 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    416c:	1d00      	adds	r0, r0, #4
    416e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    4172:	bd10      	pop	{r4, pc}
    4174:	f240 315a 	movw	r1, #858	; 0x35a
    4178:	fb10 f001 	smulbb	r0, r0, r1
    417c:	bd10      	pop	{r4, pc}
    417e:	0000      	.short	0x0000
    4180:	0000e8fc 	.word	0x0000e8fc

00004184 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4188:	4604      	mov	r4, r0
    418a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    418e:	4616      	mov	r6, r2
    4190:	460f      	mov	r7, r1
    4192:	2800      	cmp	r0, #0
    4194:	d15e      	bne.n	4254 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4196:	4621      	mov	r1, r4
    4198:	484d      	ldr	r0, [pc, #308]	; (42d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    419a:	f006 fb89 	bl	a8b0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    419e:	4605      	mov	r5, r0
    41a0:	2820      	cmp	r0, #32
    41a2:	d057      	beq.n	4254 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    41a4:	2250      	movs	r2, #80	; 0x50
    41a6:	2100      	movs	r1, #0
    41a8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    41ac:	f00c fa31 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    41b0:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    41b4:	2501      	movs	r5, #1
    41b6:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    41ba:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    41be:	b137      	cbz	r7, 41ce <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    41c0:	f7fe fdf0 	bl	2da4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    41c4:	f000 0007 	and.w	r0, r0, #7
    41c8:	1c40      	adds	r0, r0, #1
    41ca:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    41ce:	4620      	mov	r0, r4
    41d0:	f00a fd62 	bl	ec98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    41d4:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    41d8:	2002      	movs	r0, #2
    41da:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    41de:	46a8      	mov	r8, r5
    41e0:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    41e4:	2500      	movs	r5, #0
    41e6:	f804 5fe8 	strb.w	r5, [r4, #232]!
    41ea:	f007 fcc7 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    41ee:	4607      	mov	r7, r0
    41f0:	f00b fffa 	bl	101e8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    41f4:	8921      	ldrh	r1, [r4, #8]
    41f6:	3ce8      	subs	r4, #232	; 0xe8
    41f8:	4288      	cmp	r0, r1
    41fa:	d800      	bhi.n	41fe <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    41fc:	4608      	mov	r0, r1
    41fe:	4438      	add	r0, r7
    4200:	30ce      	adds	r0, #206	; 0xce
    4202:	b287      	uxth	r7, r0
    4204:	4620      	mov	r0, r4
    4206:	f00a fa0d 	bl	e624 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    420a:	b330      	cbz	r0, 425a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    420c:	f00b ff0e 	bl	1002c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4210:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    4214:	b281      	uxth	r1, r0
    4216:	4630      	mov	r0, r6
    4218:	f007 fdd0 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    421c:	4430      	add	r0, r6
    421e:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4222:	3490      	adds	r4, #144	; 0x90
    4224:	f00b ffe9 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4228:	19c0      	adds	r0, r0, r7
    422a:	4169      	adcs	r1, r5
    422c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    4230:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4234:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4238:	2001      	movs	r0, #1
    423a:	f00a fb58 	bl	e8ee <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    423e:	f200 1015 	addw	r0, r0, #277	; 0x115
    4242:	1a30      	subs	r0, r6, r0
    4244:	6460      	str	r0, [r4, #68]	; 0x44
    4246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    424a:	0841      	lsrs	r1, r0, #1
    424c:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    4250:	3c90      	subs	r4, #144	; 0x90
    4252:	e025      	b.n	42a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4254:	200c      	movs	r0, #12
    4256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    425a:	2100      	movs	r1, #0
    425c:	4620      	mov	r0, r4
    425e:	f00a fc6f 	bl	eb40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    4262:	f8df 8070 	ldr.w	r8, [pc, #112]	; 42d4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4266:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    426a:	2000      	movs	r0, #0
    426c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4270:	b149      	cbz	r1, 4286 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4272:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4274:	b139      	cbz	r1, 4286 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4276:	f7fe fd95 	bl	2da4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    427a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    427e:	fbb0 f2f1 	udiv	r2, r0, r1
    4282:	fb01 0012 	mls	r0, r1, r2, r0
    4286:	4407      	add	r7, r0
    4288:	f00b ffb7 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    428c:	19c0      	adds	r0, r0, r7
    428e:	4169      	adcs	r1, r5
    4290:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4294:	b19e      	cbz	r6, 42be <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4296:	1980      	adds	r0, r0, r6
    4298:	eb51 0105 	adcs.w	r1, r1, r5
    429c:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    42a0:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    42a4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    42a8:	f00a fcf4 	bl	ec94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    42ac:	b158      	cbz	r0, 42c6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    42ae:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    42b2:	2100      	movs	r1, #0
    42b4:	4620      	mov	r0, r4
    42b6:	f00a f9e5 	bl	e684 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    42ba:	2000      	movs	r0, #0
    42bc:	e7cb      	b.n	4256 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    42be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42c2:	0841      	lsrs	r1, r0, #1
    42c4:	e7ea      	b.n	429c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    42c6:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    42ca:	2030      	movs	r0, #48	; 0x30
    42cc:	f7fc fb70 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42d0:	0000ed79 	.word	0x0000ed79
    42d4:	20000100 	.word	0x20000100

000042d8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    42d8:	4901      	ldr	r1, [pc, #4]	; (42e0 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    42da:	8088      	strh	r0, [r1, #4]
    42dc:	4770      	bx	lr
    42de:	0000      	.short	0x0000
    42e0:	20000100 	.word	0x20000100

000042e4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    42e4:	4805      	ldr	r0, [pc, #20]	; (42fc <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    42e6:	2100      	movs	r1, #0
    42e8:	7001      	strb	r1, [r0, #0]
    42ea:	2201      	movs	r2, #1
    42ec:	7082      	strb	r2, [r0, #2]
    42ee:	7041      	strb	r1, [r0, #1]
    42f0:	f242 7110 	movw	r1, #10000	; 0x2710
    42f4:	8081      	strh	r1, [r0, #4]
    42f6:	f000 b803 	b.w	4300 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    42fa:	0000      	.short	0x0000
    42fc:	20000100 	.word	0x20000100

00004300 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4300:	b51c      	push	{r2, r3, r4, lr}
    4302:	4909      	ldr	r1, [pc, #36]	; (4328 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4304:	e9d1 0100 	ldrd	r0, r1, [r1]
    4308:	e9cd 0100 	strd	r0, r1, [sp]
    430c:	e002      	b.n	4314 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    430e:	9800      	ldr	r0, [sp, #0]
    4310:	f00a fb29 	bl	e966 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4314:	4668      	mov	r0, sp
    4316:	f7fc fecb 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    431a:	2800      	cmp	r0, #0
    431c:	d0f7      	beq.n	430e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    431e:	f000 f8c7 	bl	44b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    4322:	2000      	movs	r0, #0
    4324:	bd1c      	pop	{r2, r3, r4, pc}
    4326:	0000      	.short	0x0000
    4328:	00004c48 	.word	0x00004c48

0000432c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    432c:	4901      	ldr	r1, [pc, #4]	; (4334 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    432e:	7008      	strb	r0, [r1, #0]
    4330:	4770      	bx	lr
    4332:	0000      	.short	0x0000
    4334:	20000100 	.word	0x20000100

00004338 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4338:	4908      	ldr	r1, [pc, #32]	; (435c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    433a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    433e:	fbb1 f1f2 	udiv	r1, r1, r2
    4342:	b510      	push	{r4, lr}
    4344:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    4348:	f009 fdea 	bl	df20 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    434c:	f640 0148 	movw	r1, #2120	; 0x848
    4350:	4288      	cmp	r0, r1
    4352:	d300      	bcc.n	4356 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4354:	4608      	mov	r0, r1
    4356:	b280      	uxth	r0, r0
    4358:	bd10      	pop	{r4, pc}
    435a:	0000      	.short	0x0000
    435c:	0001527d 	.word	0x0001527d

00004360 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4360:	b510      	push	{r4, lr}
    4362:	f003 fb93 	bl	7a8c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4366:	4905      	ldr	r1, [pc, #20]	; (437c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4368:	688a      	ldr	r2, [r1, #8]
    436a:	4290      	cmp	r0, r2
    436c:	d801      	bhi.n	4372 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    436e:	7848      	ldrb	r0, [r1, #1]
    4370:	b108      	cbz	r0, 4376 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    4372:	2000      	movs	r0, #0
    4374:	bd10      	pop	{r4, pc}
    4376:	2001      	movs	r0, #1
    4378:	bd10      	pop	{r4, pc}
    437a:	0000      	.short	0x0000
    437c:	20000100 	.word	0x20000100

00004380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    4380:	b510      	push	{r4, lr}
    4382:	4604      	mov	r4, r0
    4384:	2906      	cmp	r1, #6
    4386:	d238      	bcs.n	43fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    4388:	e8df f001 	tbb	[pc, r1]
    438c:	14031105 	.word	0x14031105
    4390:	3215      	.short	0x3215
    4392:	2100      	movs	r1, #0
    4394:	e006      	b.n	43a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4396:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    439a:	b110      	cbz	r0, 43a2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    439c:	4620      	mov	r0, r4
    439e:	f00a fc0c 	bl	ebba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    43a2:	2101      	movs	r1, #1
    43a4:	4620      	mov	r0, r4
    43a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43aa:	f000 b97f 	b.w	46ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    43ae:	2003      	movs	r0, #3
    43b0:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    43b4:	bd10      	pop	{r4, pc}
    43b6:	f003 fb75 	bl	7aa4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    43ba:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    43be:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    43c2:	f003 fc33 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    43c6:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    43ca:	4288      	cmp	r0, r1
    43cc:	d904      	bls.n	43d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    43ce:	f240 31e3 	movw	r1, #995	; 0x3e3
    43d2:	2030      	movs	r0, #48	; 0x30
    43d4:	f7fc faec 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43d8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    43dc:	f003 fc26 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    43e0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    43e4:	1a08      	subs	r0, r1, r0
    43e6:	4906      	ldr	r1, [pc, #24]	; (4400 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    43e8:	688a      	ldr	r2, [r1, #8]
    43ea:	4410      	add	r0, r2
    43ec:	6088      	str	r0, [r1, #8]
    43ee:	bd10      	pop	{r4, pc}
    43f0:	4620      	mov	r0, r4
    43f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43f6:	f00a bbcd 	b.w	eb94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    43fa:	f240 7199 	movw	r1, #1945	; 0x799
    43fe:	e7e8      	b.n	43d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    4400:	20000100 	.word	0x20000100

00004404 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4408:	460c      	mov	r4, r1
    440a:	4680      	mov	r8, r0
    440c:	b112      	cbz	r2, 4414 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    440e:	f240 71c3 	movw	r1, #1987	; 0x7c3
    4412:	e037      	b.n	4484 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4414:	f003 fb3a 	bl	7a8c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4418:	4607      	mov	r7, r0
    441a:	2000      	movs	r0, #0
    441c:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    4420:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    4424:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    4428:	2001      	movs	r0, #1
    442a:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    442e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    4432:	2101      	movs	r1, #1
    4434:	34c8      	adds	r4, #200	; 0xc8
    4436:	f7fe f859 	bl	24ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    443a:	f854 0f04 	ldr.w	r0, [r4, #4]!
    443e:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    4442:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4446:	6821      	ldr	r1, [r4, #0]
    4448:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    444c:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    4450:	6820      	ldr	r0, [r4, #0]
    4452:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4456:	6820      	ldr	r0, [r4, #0]
    4458:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    445c:	f854 09cc 	ldr.w	r0, [r4], #-204
    4460:	f00a fd33 	bl	eeca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    4464:	b110      	cbz	r0, 446c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    4466:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    446a:	e00b      	b.n	4484 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    446c:	f00a fb9e 	bl	ebac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    4470:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4474:	4642      	mov	r2, r8
    4476:	4906      	ldr	r1, [pc, #24]	; (4490 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    4478:	f006 f8d2 	bl	a620 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    447c:	2800      	cmp	r0, #0
    447e:	d104      	bne.n	448a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    4480:	f240 71ac 	movw	r1, #1964	; 0x7ac
    4484:	2030      	movs	r0, #48	; 0x30
    4486:	f7fc fa93 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    448e:	0000      	.short	0x0000
    4490:	0000ede5 	.word	0x0000ede5
    4494:	b510      	push	{r4, lr}
    4496:	280c      	cmp	r0, #12
    4498:	d304      	bcc.n	44a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    449a:	f240 318a 	movw	r1, #906	; 0x38a
    449e:	2006      	movs	r0, #6
    44a0:	f7fc fa86 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a4:	4901      	ldr	r1, [pc, #4]	; (44ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    44a6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    44aa:	bd10      	pop	{r4, pc}
    44ac:	00004c64 	.word	0x00004c64
    44b0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    44b4:	4d16      	ldr	r5, [pc, #88]	; (4510 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    44b6:	2001      	movs	r0, #1
    44b8:	7068      	strb	r0, [r5, #1]
    44ba:	2400      	movs	r4, #0
    44bc:	f64f 76ff 	movw	r6, #65535	; 0xffff
    44c0:	e00b      	b.n	44da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    44c2:	2100      	movs	r1, #0
    44c4:	f7fc fda2 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    44c8:	0007      	movs	r7, r0
    44ca:	d009      	beq.n	44e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    44cc:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    44d0:	f006 f8d6 	bl	a680 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    44d4:	4638      	mov	r0, r7
    44d6:	f00a fc42 	bl	ed5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    44da:	9400      	str	r4, [sp, #0]
    44dc:	9401      	str	r4, [sp, #4]
    44de:	e00e      	b.n	44fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    44e0:	f44f 7191 	mov.w	r1, #290	; 0x122
    44e4:	2030      	movs	r0, #48	; 0x30
    44e6:	f7fc fa63 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44ea:	9800      	ldr	r0, [sp, #0]
    44ec:	b138      	cbz	r0, 44fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    44ee:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    44f2:	2920      	cmp	r1, #32
    44f4:	d003      	beq.n	44fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    44f6:	8800      	ldrh	r0, [r0, #0]
    44f8:	42b0      	cmp	r0, r6
    44fa:	d1e2      	bne.n	44c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    44fc:	e004      	b.n	4508 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    44fe:	4668      	mov	r0, sp
    4500:	f7fc fdd6 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4504:	2800      	cmp	r0, #0
    4506:	d0f0      	beq.n	44ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    4508:	706c      	strb	r4, [r5, #1]
    450a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    450e:	0000      	.short	0x0000
    4510:	20000100 	.word	0x20000100
    4514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4518:	4604      	mov	r4, r0
    451a:	4839      	ldr	r0, [pc, #228]	; (4600 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    451c:	461e      	mov	r6, r3
    451e:	4690      	mov	r8, r2
    4520:	7880      	ldrb	r0, [r0, #2]
    4522:	4689      	mov	r9, r1
    4524:	2500      	movs	r5, #0
    4526:	2800      	cmp	r0, #0
    4528:	d063      	beq.n	45f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    452a:	f007 fbfd 	bl	bd28 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    452e:	b3e0      	cbz	r0, 45aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4530:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4534:	2802      	cmp	r0, #2
    4536:	d35c      	bcc.n	45f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4538:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    453c:	2802      	cmp	r0, #2
    453e:	d058      	beq.n	45f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4540:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4544:	bb88      	cbnz	r0, 45aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4546:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    454a:	f7ff ffa3 	bl	4494 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    454e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4552:	b281      	uxth	r1, r0
    4554:	8031      	strh	r1, [r6, #0]
    4556:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    455a:	2700      	movs	r7, #0
    455c:	2801      	cmp	r0, #1
    455e:	d00d      	beq.n	457c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    4560:	6920      	ldr	r0, [r4, #16]
    4562:	f007 fc2b 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4566:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    456a:	4442      	add	r2, r8
    456c:	eba2 0109 	sub.w	r1, r2, r9
    4570:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4574:	1a82      	subs	r2, r0, r2
    4576:	fb01 7502 	mla	r5, r1, r2, r7
    457a:	e035      	b.n	45e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    457c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4580:	2803      	cmp	r0, #3
    4582:	d039      	beq.n	45f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    4584:	2101      	movs	r1, #1
    4586:	2000      	movs	r0, #0
    4588:	f009 f94e 	bl	d828 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    458c:	6a21      	ldr	r1, [r4, #32]
    458e:	1847      	adds	r7, r0, r1
    4590:	8831      	ldrh	r1, [r6, #0]
    4592:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4596:	f007 fc11 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    459a:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    459e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    45a2:	1a82      	subs	r2, r0, r2
    45a4:	fb01 5502 	mla	r5, r1, r2, r5
    45a8:	e000      	b.n	45ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    45aa:	e022      	b.n	45f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    45ac:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    45b0:	8831      	ldrh	r1, [r6, #0]
    45b2:	4638      	mov	r0, r7
    45b4:	f007 fc02 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    45b8:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    45bc:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    45c0:	1a41      	subs	r1, r0, r1
    45c2:	440d      	add	r5, r1
    45c4:	8831      	ldrh	r1, [r6, #0]
    45c6:	6920      	ldr	r0, [r4, #16]
    45c8:	f007 fbf8 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    45cc:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    45d0:	4442      	add	r2, r8
    45d2:	eba2 0109 	sub.w	r1, r2, r9
    45d6:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    45da:	1a89      	subs	r1, r1, r2
    45dc:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    45e0:	1a82      	subs	r2, r0, r2
    45e2:	1e49      	subs	r1, r1, #1
    45e4:	fb01 5502 	mla	r5, r1, r2, r5
    45e8:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    45ec:	2001      	movs	r0, #1
    45ee:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    45f2:	4628      	mov	r0, r5
    45f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    45f8:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    45fc:	e7c6      	b.n	458c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    45fe:	0000      	.short	0x0000
    4600:	20000100 	.word	0x20000100
    4604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4608:	4605      	mov	r5, r0
    460a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    460e:	2128      	movs	r1, #40	; 0x28
    4610:	f00a fa3c 	bl	ea8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    4614:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    4618:	f00b fde6 	bl	101e8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    461c:	2869      	cmp	r0, #105	; 0x69
    461e:	d800      	bhi.n	4622 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    4620:	2069      	movs	r0, #105	; 0x69
    4622:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    4626:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    462a:	692a      	ldr	r2, [r5, #16]
    462c:	440b      	add	r3, r1
    462e:	429a      	cmp	r2, r3
    4630:	d903      	bls.n	463a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4632:	1a51      	subs	r1, r2, r1
    4634:	1a0c      	subs	r4, r1, r0
    4636:	3469      	adds	r4, #105	; 0x69
    4638:	e000      	b.n	463c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    463a:	2400      	movs	r4, #0
    463c:	4f1a      	ldr	r7, [pc, #104]	; (46a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    463e:	7838      	ldrb	r0, [r7, #0]
    4640:	b918      	cbnz	r0, 464a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4642:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4644:	42a0      	cmp	r0, r4
    4646:	d800      	bhi.n	464a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4648:	4604      	mov	r4, r0
    464a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    464e:	f009 fc72 	bl	df36 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4652:	4606      	mov	r6, r0
    4654:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4658:	f00a fc2a 	bl	eeb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    465c:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    4660:	4430      	add	r0, r6
    4662:	1846      	adds	r6, r0, r1
    4664:	1ba4      	subs	r4, r4, r6
    4666:	2c00      	cmp	r4, #0
    4668:	dc00      	bgt.n	466c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    466a:	2400      	movs	r4, #0
    466c:	2002      	movs	r0, #2
    466e:	f005 f8f1 	bl	9854 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4672:	4284      	cmp	r4, r0
    4674:	d300      	bcc.n	4678 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    4676:	4604      	mov	r4, r0
    4678:	2102      	movs	r1, #2
    467a:	4620      	mov	r0, r4
    467c:	f004 fffa 	bl	9674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4680:	b900      	cbnz	r0, 4684 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    4682:	4426      	add	r6, r4
    4684:	4642      	mov	r2, r8
    4686:	4631      	mov	r1, r6
    4688:	4628      	mov	r0, r5
    468a:	f009 fbf5 	bl	de78 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    468e:	60b8      	str	r0, [r7, #8]
    4690:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4694:	f00a fc0c 	bl	eeb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    4698:	1a30      	subs	r0, r6, r0
    469a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    469e:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    46a2:	f006 ba05 	b.w	aab0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    46a6:	0000      	.short	0x0000
    46a8:	20000100 	.word	0x20000100
    46ac:	b538      	push	{r3, r4, r5, lr}
    46ae:	2500      	movs	r5, #0
    46b0:	4604      	mov	r4, r0
    46b2:	2901      	cmp	r1, #1
    46b4:	d102      	bne.n	46bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    46b6:	4810      	ldr	r0, [pc, #64]	; (46f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    46b8:	7840      	ldrb	r0, [r0, #1]
    46ba:	b170      	cbz	r0, 46da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    46bc:	2004      	movs	r0, #4
    46be:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    46c2:	bf00      	nop
    46c4:	f00a fa72 	bl	ebac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    46c8:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    46cc:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    46d0:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    46d4:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    46d8:	bd38      	pop	{r3, r4, r5, pc}
    46da:	9500      	str	r5, [sp, #0]
    46dc:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    46e0:	2301      	movs	r3, #1
    46e2:	2200      	movs	r2, #0
    46e4:	4620      	mov	r0, r4
    46e6:	f000 f809 	bl	46fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    46ea:	2800      	cmp	r0, #0
    46ec:	d0ea      	beq.n	46c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    46ee:	f240 710e 	movw	r1, #1806	; 0x70e
    46f2:	2030      	movs	r0, #48	; 0x30
    46f4:	f7fc f95c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46f8:	20000100 	.word	0x20000100
    46fc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4700:	b08b      	sub	sp, #44	; 0x2c
    4702:	4604      	mov	r4, r0
    4704:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4708:	4699      	mov	r9, r3
    470a:	460f      	mov	r7, r1
    470c:	9307      	str	r3, [sp, #28]
    470e:	9005      	str	r0, [sp, #20]
    4710:	f00b fc8c 	bl	1002c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4714:	4605      	mov	r5, r0
    4716:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    471a:	f7ff febb 	bl	4494 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    471e:	4428      	add	r0, r5
    4720:	f8ad 0004 	strh.w	r0, [sp, #4]
    4724:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4728:	280d      	cmp	r0, #13
    472a:	d004      	beq.n	4736 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    472c:	2000      	movs	r0, #0
    472e:	9008      	str	r0, [sp, #32]
    4730:	980d      	ldr	r0, [sp, #52]	; 0x34
    4732:	b110      	cbz	r0, 473a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    4734:	e02e      	b.n	4794 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4736:	2001      	movs	r0, #1
    4738:	e7f9      	b.n	472e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    473a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    473e:	2803      	cmp	r0, #3
    4740:	d128      	bne.n	4794 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4742:	9808      	ldr	r0, [sp, #32]
    4744:	b330      	cbz	r0, 4794 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4746:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    474a:	42b8      	cmp	r0, r7
    474c:	d122      	bne.n	4794 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    474e:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4752:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4756:	6920      	ldr	r0, [r4, #16]
    4758:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    475c:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4760:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4764:	4408      	add	r0, r1
    4766:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    476a:	4620      	mov	r0, r4
    476c:	f000 fa86 	bl	4c7c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4770:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4774:	6220      	str	r0, [r4, #32]
    4776:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    477a:	84a0      	strh	r0, [r4, #36]	; 0x24
    477c:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4780:	6120      	str	r0, [r4, #16]
    4782:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4786:	8320      	strh	r0, [r4, #24]
    4788:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    478c:	8360      	strh	r0, [r4, #26]
    478e:	2002      	movs	r0, #2
    4790:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4794:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4798:	f504 751e 	add.w	r5, r4, #632	; 0x278
    479c:	1a38      	subs	r0, r7, r0
    479e:	fa0f fa80 	sxth.w	sl, r0
    47a2:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    47a6:	1a38      	subs	r0, r7, r0
    47a8:	fa0f f880 	sxth.w	r8, r0
    47ac:	f1b8 0f00 	cmp.w	r8, #0
    47b0:	da08      	bge.n	47c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    47b2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    47b6:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    47ba:	46d0      	mov	r8, sl
    47bc:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    47c0:	2001      	movs	r0, #1
    47c2:	9007      	str	r0, [sp, #28]
    47c4:	ab01      	add	r3, sp, #4
    47c6:	4652      	mov	r2, sl
    47c8:	4641      	mov	r1, r8
    47ca:	4620      	mov	r0, r4
    47cc:	f7ff fea2 	bl	4514 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    47d0:	9004      	str	r0, [sp, #16]
    47d2:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    47d6:	f8df b334 	ldr.w	fp, [pc, #820]	; 4b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    47da:	b140      	cbz	r0, 47ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    47dc:	2801      	cmp	r0, #1
    47de:	d07d      	beq.n	48dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    47e0:	2802      	cmp	r0, #2
    47e2:	d051      	beq.n	4888 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    47e4:	2803      	cmp	r0, #3
    47e6:	d07a      	beq.n	48de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    47e8:	f240 518e 	movw	r1, #1422	; 0x58e
    47ec:	e18a      	b.n	4b04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    47ee:	2101      	movs	r1, #1
    47f0:	2000      	movs	r0, #0
    47f2:	f009 f819 	bl	d828 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    47f6:	4606      	mov	r6, r0
    47f8:	6a20      	ldr	r0, [r4, #32]
    47fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    47fe:	4430      	add	r0, r6
    4800:	f007 fadc 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4804:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4808:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    480c:	6920      	ldr	r0, [r4, #16]
    480e:	f007 fad5 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4812:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4816:	a907      	add	r1, sp, #28
    4818:	a806      	add	r0, sp, #24
    481a:	f003 f89f 	bl	795c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    481e:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4826:	f006 fa15 	bl	ac54 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    482a:	4682      	mov	sl, r0
    482c:	4620      	mov	r0, r4
    482e:	f00a f9b1 	bl	eb94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4832:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4836:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    483a:	f003 fa23 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    483e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4842:	4401      	add	r1, r0
    4844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4848:	fbb1 f0f0 	udiv	r0, r1, r0
    484c:	6a21      	ldr	r1, [r4, #32]
    484e:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4852:	4431      	add	r1, r6
    4854:	1a08      	subs	r0, r1, r0
    4856:	1a81      	subs	r1, r0, r2
    4858:	4441      	add	r1, r8
    485a:	3920      	subs	r1, #32
    485c:	eba1 060a 	sub.w	r6, r1, sl
    4860:	0050      	lsls	r0, r2, #1
    4862:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4864:	3060      	adds	r0, #96	; 0x60
    4866:	4401      	add	r1, r0
    4868:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    486c:	f00a fa00 	bl	ec70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4870:	3022      	adds	r0, #34	; 0x22
    4872:	f8cb 000c 	str.w	r0, [fp, #12]
    4876:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    487a:	1a30      	subs	r0, r6, r0
    487c:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    4880:	d258      	bcs.n	4934 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    4882:	f240 5127 	movw	r1, #1319	; 0x527
    4886:	e13d      	b.n	4b04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4888:	6a21      	ldr	r1, [r4, #32]
    488a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    488e:	4408      	add	r0, r1
    4890:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4894:	f007 fa92 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4898:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    489c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    48a0:	6920      	ldr	r0, [r4, #16]
    48a2:	f007 fa8b 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    48a6:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    48aa:	4620      	mov	r0, r4
    48ac:	f00a f972 	bl	eb94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    48b0:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    48b4:	bb10      	cbnz	r0, 48fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    48b6:	f1b9 0f00 	cmp.w	r9, #0
    48ba:	d01f      	beq.n	48fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    48bc:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    48c0:	4640      	mov	r0, r8
    48c2:	f003 f9df 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    48c6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    48ca:	4401      	add	r1, r0
    48cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    48d0:	fbb1 f0f0 	udiv	r0, r1, r0
    48d4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    48d8:	4408      	add	r0, r1
    48da:	e001      	b.n	48e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    48dc:	e02b      	b.n	4936 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    48de:	e047      	b.n	4970 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    48e0:	6a22      	ldr	r2, [r4, #32]
    48e2:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    48e6:	4411      	add	r1, r2
    48e8:	1a0e      	subs	r6, r1, r0
    48ea:	4640      	mov	r0, r8
    48ec:	f003 f99e 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    48f0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    48f4:	1a08      	subs	r0, r1, r0
    48f6:	4406      	add	r6, r0
    48f8:	3e20      	subs	r6, #32
    48fa:	e006      	b.n	490a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    48fc:	6a21      	ldr	r1, [r4, #32]
    48fe:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4902:	4408      	add	r0, r1
    4904:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4908:	1a46      	subs	r6, r0, r1
    490a:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    490e:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4912:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4916:	fb01 0002 	mla	r0, r1, r2, r0
    491a:	0040      	lsls	r0, r0, #1
    491c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    491e:	3060      	adds	r0, #96	; 0x60
    4920:	4401      	add	r1, r0
    4922:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4926:	f00a f9a3 	bl	ec70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    492a:	f8cb 000c 	str.w	r0, [fp, #12]
    492e:	2001      	movs	r0, #1
    4930:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4934:	e061      	b.n	49fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    4936:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    493a:	6920      	ldr	r0, [r4, #16]
    493c:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4940:	1a86      	subs	r6, r0, r2
    4942:	eb01 000a 	add.w	r0, r1, sl
    4946:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    494a:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    494e:	1a40      	subs	r0, r0, r1
    4950:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    4954:	1e40      	subs	r0, r0, #1
    4956:	fb0c 3101 	mla	r1, ip, r1, r3
    495a:	fb00 1002 	mla	r0, r0, r2, r1
    495e:	0040      	lsls	r0, r0, #1
    4960:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4962:	3060      	adds	r0, #96	; 0x60
    4964:	4401      	add	r1, r0
    4966:	fb06 f608 	mul.w	r6, r6, r8
    496a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    496e:	e040      	b.n	49f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    4970:	6920      	ldr	r0, [r4, #16]
    4972:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4976:	fb00 f008 	mul.w	r0, r0, r8
    497a:	fb08 0611 	mls	r6, r8, r1, r0
    497e:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    4982:	2825      	cmp	r0, #37	; 0x25
    4984:	d003      	beq.n	498e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    4986:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    498a:	2825      	cmp	r0, #37	; 0x25
    498c:	d109      	bne.n	49a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    498e:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4992:	1a38      	subs	r0, r7, r0
    4994:	b200      	sxth	r0, r0
    4996:	2800      	cmp	r0, #0
    4998:	db03      	blt.n	49a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    499a:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    499e:	b100      	cbz	r0, 49a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    49a0:	9005      	str	r0, [sp, #20]
    49a2:	9807      	ldr	r0, [sp, #28]
    49a4:	b1d8      	cbz	r0, 49de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    49a6:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    49aa:	b9c0      	cbnz	r0, 49de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    49ac:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    49b0:	2800      	cmp	r0, #0
    49b2:	d07d      	beq.n	4ab0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    49b4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    49b8:	f003 f964 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    49bc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    49c0:	4401      	add	r1, r0
    49c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    49c6:	fbb1 f0f0 	udiv	r0, r1, r0
    49ca:	1a36      	subs	r6, r6, r0
    49cc:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    49d0:	f003 f92c 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    49d4:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    49d8:	1a08      	subs	r0, r1, r0
    49da:	4406      	add	r6, r0
    49dc:	3e20      	subs	r6, #32
    49de:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    49e2:	eb01 000a 	add.w	r0, r1, sl
    49e6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    49ea:	4348      	muls	r0, r1
    49ec:	0041      	lsls	r1, r0, #1
    49ee:	3160      	adds	r1, #96	; 0x60
    49f0:	9805      	ldr	r0, [sp, #20]
    49f2:	f00a f93d 	bl	ec70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    49f6:	f8cb 000c 	str.w	r0, [fp, #12]
    49fa:	9804      	ldr	r0, [sp, #16]
    49fc:	f8db 200c 	ldr.w	r2, [fp, #12]
    4a00:	1a31      	subs	r1, r6, r0
    4a02:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    4a06:	6920      	ldr	r0, [r4, #16]
    4a08:	1b80      	subs	r0, r0, r6
    4a0a:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    4a0e:	f8cb 0010 	str.w	r0, [fp, #16]
    4a12:	4282      	cmp	r2, r0
    4a14:	d800      	bhi.n	4a18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    4a16:	4610      	mov	r0, r2
    4a18:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    4a1c:	2600      	movs	r6, #0
    4a1e:	702e      	strb	r6, [r5, #0]
    4a20:	2069      	movs	r0, #105	; 0x69
    4a22:	8128      	strh	r0, [r5, #8]
    4a24:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    4a28:	1851      	adds	r1, r2, r1
    4a2a:	4170      	adcs	r0, r6
    4a2c:	e9c5 1004 	strd	r1, r0, [r5, #16]
    4a30:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4a34:	f009 fa7f 	bl	df36 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4a38:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    4a3c:	4408      	add	r0, r1
    4a3e:	6068      	str	r0, [r5, #4]
    4a40:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    4a44:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4a48:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    4a4c:	72ae      	strb	r6, [r5, #10]
    4a4e:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    4a52:	1bc0      	subs	r0, r0, r7
    4a54:	b200      	sxth	r0, r0
    4a56:	2800      	cmp	r0, #0
    4a58:	dd01      	ble.n	4a5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    4a5a:	2002      	movs	r0, #2
    4a5c:	72a8      	strb	r0, [r5, #10]
    4a5e:	9808      	ldr	r0, [sp, #32]
    4a60:	b338      	cbz	r0, 4ab2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    4a62:	f1b9 0f00 	cmp.w	r9, #0
    4a66:	d01c      	beq.n	4aa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4a68:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    4a6c:	b3f1      	cbz	r1, 4aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    4a6e:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4a72:	bf00      	nop
    4a74:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4a78:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    4a7c:	1c40      	adds	r0, r0, #1
    4a7e:	4342      	muls	r2, r0
    4a80:	428a      	cmp	r2, r1
    4a82:	d20e      	bcs.n	4aa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4a84:	7aa8      	ldrb	r0, [r5, #10]
    4a86:	b160      	cbz	r0, 4aa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4a88:	72ae      	strb	r6, [r5, #10]
    4a8a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4a8e:	1c40      	adds	r0, r0, #1
    4a90:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4a94:	f7fe f980 	bl	2d98 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    4a98:	f000 0007 	and.w	r0, r0, #7
    4a9c:	1c40      	adds	r0, r0, #1
    4a9e:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    4aa2:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    4aa6:	4629      	mov	r1, r5
    4aa8:	f00a f8f4 	bl	ec94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4aac:	b340      	cbz	r0, 4b00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    4aae:	e001      	b.n	4ab4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    4ab0:	e009      	b.n	4ac6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    4ab2:	e00b      	b.n	4acc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    4ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
    4ab6:	f080 0001 	eor.w	r0, r0, #1
    4aba:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    4abe:	2000      	movs	r0, #0
    4ac0:	b00f      	add	sp, #60	; 0x3c
    4ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ac6:	f240 5179 	movw	r1, #1401	; 0x579
    4aca:	e01b      	b.n	4b04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4acc:	f1b9 0f00 	cmp.w	r9, #0
    4ad0:	d1ca      	bne.n	4a68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    4ad2:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d0e3      	beq.n	4aa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4ada:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4ade:	6920      	ldr	r0, [r4, #16]
    4ae0:	1a41      	subs	r1, r0, r1
    4ae2:	4628      	mov	r0, r5
    4ae4:	f008 feb6 	bl	d854 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4ae8:	0400      	lsls	r0, r0, #16
    4aea:	e000      	b.n	4aee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    4aec:	e006      	b.n	4afc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    4aee:	0c00      	lsrs	r0, r0, #16
    4af0:	d0d7      	beq.n	4aa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4af2:	9918      	ldr	r1, [sp, #96]	; 0x60
    4af4:	b101      	cbz	r1, 4af8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    4af6:	8008      	strh	r0, [r1, #0]
    4af8:	2001      	movs	r0, #1
    4afa:	e7e1      	b.n	4ac0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    4afc:	2000      	movs	r0, #0
    4afe:	e7b9      	b.n	4a74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    4b00:	f240 51d7 	movw	r1, #1495	; 0x5d7
    4b04:	2030      	movs	r0, #48	; 0x30
    4b06:	f7fb ff53 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b0a:	0000      	.short	0x0000
    4b0c:	20000100 	.word	0x20000100
    4b10:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4b12:	4604      	mov	r4, r0
    4b14:	f00b fb71 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4b18:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    4b1c:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    4b20:	1ac0      	subs	r0, r0, r3
    4b22:	eb61 0102 	sbc.w	r1, r1, r2
    4b26:	2200      	movs	r2, #0
    4b28:	4613      	mov	r3, r2
    4b2a:	1a12      	subs	r2, r2, r0
    4b2c:	418b      	sbcs	r3, r1
    4b2e:	db02      	blt.n	4b36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    4b30:	f240 6154 	movw	r1, #1620	; 0x654
    4b34:	e04d      	b.n	4bd2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4b36:	1c42      	adds	r2, r0, #1
    4b38:	f171 0100 	sbcs.w	r1, r1, #0
    4b3c:	db02      	blt.n	4b44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    4b3e:	f240 6155 	movw	r1, #1621	; 0x655
    4b42:	e046      	b.n	4bd2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4b44:	6922      	ldr	r2, [r4, #16]
    4b46:	2100      	movs	r1, #0
    4b48:	b10a      	cbz	r2, 4b4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    4b4a:	fbb0 f1f2 	udiv	r1, r0, r2
    4b4e:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4b52:	280d      	cmp	r0, #13
    4b54:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4b58:	d01b      	beq.n	4b92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    4b5a:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    4b5e:	1853      	adds	r3, r2, r1
    4b60:	1ac3      	subs	r3, r0, r3
    4b62:	b21b      	sxth	r3, r3
    4b64:	2b00      	cmp	r3, #0
    4b66:	db01      	blt.n	4b6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    4b68:	1c40      	adds	r0, r0, #1
    4b6a:	e001      	b.n	4b70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    4b6c:	1c49      	adds	r1, r1, #1
    4b6e:	1850      	adds	r0, r2, r1
    4b70:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4b74:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    4b78:	f88d 0000 	strb.w	r0, [sp]
    4b7c:	9800      	ldr	r0, [sp, #0]
    4b7e:	9000      	str	r0, [sp, #0]
    4b80:	f89d 0000 	ldrb.w	r0, [sp]
    4b84:	b940      	cbnz	r0, 4b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4b86:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4b8a:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4b8e:	4288      	cmp	r0, r1
    4b90:	d102      	bne.n	4b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4b92:	1c40      	adds	r0, r0, #1
    4b94:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4b98:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4b9c:	1c40      	adds	r0, r0, #1
    4b9e:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    4ba2:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    4ba6:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    4baa:	1a40      	subs	r0, r0, r1
    4bac:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    4bb0:	1e40      	subs	r0, r0, #1
    4bb2:	4408      	add	r0, r1
    4bb4:	b285      	uxth	r5, r0
    4bb6:	e026      	b.n	4c06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4bb8:	a801      	add	r0, sp, #4
    4bba:	2300      	movs	r3, #0
    4bbc:	9000      	str	r0, [sp, #0]
    4bbe:	461a      	mov	r2, r3
    4bc0:	4620      	mov	r0, r4
    4bc2:	f7ff fd9b 	bl	46fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4bc6:	2800      	cmp	r0, #0
    4bc8:	d03a      	beq.n	4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    4bca:	2801      	cmp	r0, #1
    4bcc:	d004      	beq.n	4bd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    4bce:	f240 6194 	movw	r1, #1684	; 0x694
    4bd2:	2030      	movs	r0, #48	; 0x30
    4bd4:	f7fb feec 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bd8:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4bdc:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    4be0:	1a42      	subs	r2, r0, r1
    4be2:	b212      	sxth	r2, r2
    4be4:	2a00      	cmp	r2, #0
    4be6:	da09      	bge.n	4bfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4be8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4bec:	4402      	add	r2, r0
    4bee:	1aaa      	subs	r2, r5, r2
    4bf0:	b212      	sxth	r2, r2
    4bf2:	2a00      	cmp	r2, #0
    4bf4:	da02      	bge.n	4bfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4bf6:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    4bfa:	e004      	b.n	4c06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4bfc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4c00:	4408      	add	r0, r1
    4c02:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4c06:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    4c0a:	1a68      	subs	r0, r5, r1
    4c0c:	b200      	sxth	r0, r0
    4c0e:	2800      	cmp	r0, #0
    4c10:	dad2      	bge.n	4bb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    4c12:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4c16:	b188      	cbz	r0, 4c3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    4c18:	f05f 0008 	movs.w	r0, #8
    4c1c:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4c20:	2202      	movs	r2, #2
    4c22:	4908      	ldr	r1, [pc, #32]	; (4c44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    4c24:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4c28:	f009 f8ee 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4c2c:	4620      	mov	r0, r4
    4c2e:	f00a f9c2 	bl	efb6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    4c32:	4620      	mov	r0, r4
    4c34:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    4c38:	f00a b891 	b.w	ed5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    4c3c:	203e      	movs	r0, #62	; 0x3e
    4c3e:	e7ed      	b.n	4c1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    4c40:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4c42:	0000      	.short	0x0000
    4c44:	0000e0c5 	.word	0x0000e0c5
    4c48:	00000000 	.word	0x00000000
    4c4c:	00010000 	.word	0x00010000
    4c50:	00000000 	.word	0x00000000
    4c54:	00010000 	.word	0x00010000
    4c58:	00000000 	.word	0x00000000
    4c5c:	00001e14 	.word	0x00001e14
    4c60:	00001130 	.word	0x00001130
    4c64:	00fa01f4 	.word	0x00fa01f4
    4c68:	00640096 	.word	0x00640096
    4c6c:	0032004b 	.word	0x0032004b
    4c70:	0014001e 	.word	0x0014001e
    4c74:	0005000a 	.word	0x0005000a
    4c78:	00010002 	.word	0x00010002

00004c7c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    4c7c:	b510      	push	{r4, lr}
    4c7e:	4604      	mov	r4, r0
    4c80:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    4c84:	6921      	ldr	r1, [r4, #16]
    4c86:	4288      	cmp	r0, r1
    4c88:	d109      	bne.n	4c9e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4c8a:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    4c8e:	8b22      	ldrh	r2, [r4, #24]
    4c90:	4291      	cmp	r1, r2
    4c92:	d104      	bne.n	4c9e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4c94:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    4c98:	8b62      	ldrh	r2, [r4, #26]
    4c9a:	4291      	cmp	r1, r2
    4c9c:	d014      	beq.n	4cc8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    4c9e:	8821      	ldrh	r1, [r4, #0]
    4ca0:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    4ca4:	f008 fd02 	bl	d6ac <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4ca8:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    4cac:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4cb0:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    4cb4:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4cb8:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    4cbc:	2202      	movs	r2, #2
    4cbe:	4907      	ldr	r1, [pc, #28]	; (4cdc <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    4cc0:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    4cc4:	f009 f8b4 	bl	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    4cc8:	2102      	movs	r1, #2
    4cca:	4620      	mov	r0, r4
    4ccc:	f7fd fc0e 	bl	24ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4cd0:	2000      	movs	r0, #0
    4cd2:	f804 0f9e 	strb.w	r0, [r4, #158]!
    4cd6:	2003      	movs	r0, #3
    4cd8:	70e0      	strb	r0, [r4, #3]
    4cda:	bd10      	pop	{r4, pc}
    4cdc:	0000e153 	.word	0x0000e153

00004ce0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    4ce0:	4806      	ldr	r0, [pc, #24]	; (4cfc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    4ce2:	4905      	ldr	r1, [pc, #20]	; (4cf8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    4ce4:	6501      	str	r1, [r0, #80]	; 0x50
    4ce6:	4906      	ldr	r1, [pc, #24]	; (4d00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    4ce8:	6541      	str	r1, [r0, #84]	; 0x54
    4cea:	4807      	ldr	r0, [pc, #28]	; (4d08 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    4cec:	4905      	ldr	r1, [pc, #20]	; (4d04 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    4cee:	6501      	str	r1, [r0, #80]	; 0x50
    4cf0:	4906      	ldr	r1, [pc, #24]	; (4d0c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    4cf2:	6541      	str	r1, [r0, #84]	; 0x54
    4cf4:	4770      	bx	lr
    4cf6:	0000      	.short	0x0000
    4cf8:	00005fd9 	.word	0x00005fd9
    4cfc:	2000012c 	.word	0x2000012c
    4d00:	000060c1 	.word	0x000060c1
    4d04:	0000e175 	.word	0x0000e175
    4d08:	200001d8 	.word	0x200001d8
    4d0c:	00006511 	.word	0x00006511

00004d10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    4d10:	481e      	ldr	r0, [pc, #120]	; (4d8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    4d12:	491d      	ldr	r1, [pc, #116]	; (4d88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    4d14:	6081      	str	r1, [r0, #8]
    4d16:	491e      	ldr	r1, [pc, #120]	; (4d90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    4d18:	6041      	str	r1, [r0, #4]
    4d1a:	491e      	ldr	r1, [pc, #120]	; (4d94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    4d1c:	6001      	str	r1, [r0, #0]
    4d1e:	491e      	ldr	r1, [pc, #120]	; (4d98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    4d20:	6281      	str	r1, [r0, #40]	; 0x28
    4d22:	491e      	ldr	r1, [pc, #120]	; (4d9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    4d24:	62c1      	str	r1, [r0, #44]	; 0x2c
    4d26:	491e      	ldr	r1, [pc, #120]	; (4da0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    4d28:	60c1      	str	r1, [r0, #12]
    4d2a:	491e      	ldr	r1, [pc, #120]	; (4da4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    4d2c:	6181      	str	r1, [r0, #24]
    4d2e:	491e      	ldr	r1, [pc, #120]	; (4da8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    4d30:	6301      	str	r1, [r0, #48]	; 0x30
    4d32:	491e      	ldr	r1, [pc, #120]	; (4dac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    4d34:	6201      	str	r1, [r0, #32]
    4d36:	491e      	ldr	r1, [pc, #120]	; (4db0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    4d38:	64c1      	str	r1, [r0, #76]	; 0x4c
    4d3a:	491e      	ldr	r1, [pc, #120]	; (4db4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    4d3c:	6481      	str	r1, [r0, #72]	; 0x48
    4d3e:	491e      	ldr	r1, [pc, #120]	; (4db8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    4d40:	6441      	str	r1, [r0, #68]	; 0x44
    4d42:	491e      	ldr	r1, [pc, #120]	; (4dbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    4d44:	6341      	str	r1, [r0, #52]	; 0x34
    4d46:	491e      	ldr	r1, [pc, #120]	; (4dc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    4d48:	61c1      	str	r1, [r0, #28]
    4d4a:	491e      	ldr	r1, [pc, #120]	; (4dc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    4d4c:	6241      	str	r1, [r0, #36]	; 0x24
    4d4e:	481f      	ldr	r0, [pc, #124]	; (4dcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    4d50:	491d      	ldr	r1, [pc, #116]	; (4dc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    4d52:	6081      	str	r1, [r0, #8]
    4d54:	491e      	ldr	r1, [pc, #120]	; (4dd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    4d56:	61c1      	str	r1, [r0, #28]
    4d58:	491e      	ldr	r1, [pc, #120]	; (4dd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    4d5a:	6241      	str	r1, [r0, #36]	; 0x24
    4d5c:	491e      	ldr	r1, [pc, #120]	; (4dd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    4d5e:	62c1      	str	r1, [r0, #44]	; 0x2c
    4d60:	491e      	ldr	r1, [pc, #120]	; (4ddc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    4d62:	6101      	str	r1, [r0, #16]
    4d64:	491e      	ldr	r1, [pc, #120]	; (4de0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    4d66:	6141      	str	r1, [r0, #20]
    4d68:	491e      	ldr	r1, [pc, #120]	; (4de4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    4d6a:	6441      	str	r1, [r0, #68]	; 0x44
    4d6c:	491e      	ldr	r1, [pc, #120]	; (4de8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    4d6e:	6341      	str	r1, [r0, #52]	; 0x34
    4d70:	491e      	ldr	r1, [pc, #120]	; (4dec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    4d72:	6181      	str	r1, [r0, #24]
    4d74:	491e      	ldr	r1, [pc, #120]	; (4df0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    4d76:	6301      	str	r1, [r0, #48]	; 0x30
    4d78:	491e      	ldr	r1, [pc, #120]	; (4df4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    4d7a:	6481      	str	r1, [r0, #72]	; 0x48
    4d7c:	491e      	ldr	r1, [pc, #120]	; (4df8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    4d7e:	64c1      	str	r1, [r0, #76]	; 0x4c
    4d80:	491e      	ldr	r1, [pc, #120]	; (4dfc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    4d82:	6381      	str	r1, [r0, #56]	; 0x38
    4d84:	4770      	bx	lr
    4d86:	0000      	.short	0x0000
    4d88:	00006425 	.word	0x00006425
    4d8c:	2000012c 	.word	0x2000012c
    4d90:	00005dc1 	.word	0x00005dc1
    4d94:	00005e2d 	.word	0x00005e2d
    4d98:	000060cd 	.word	0x000060cd
    4d9c:	0000f02f 	.word	0x0000f02f
    4da0:	00005eed 	.word	0x00005eed
    4da4:	000063fd 	.word	0x000063fd
    4da8:	000064bd 	.word	0x000064bd
    4dac:	00005f8d 	.word	0x00005f8d
    4db0:	0000e36d 	.word	0x0000e36d
    4db4:	0000e325 	.word	0x0000e325
    4db8:	00006375 	.word	0x00006375
    4dbc:	000063a9 	.word	0x000063a9
    4dc0:	00006431 	.word	0x00006431
    4dc4:	00005f99 	.word	0x00005f99
    4dc8:	0000e135 	.word	0x0000e135
    4dcc:	200001d8 	.word	0x200001d8
    4dd0:	000065fd 	.word	0x000065fd
    4dd4:	0000f0fd 	.word	0x0000f0fd
    4dd8:	0000f101 	.word	0x0000f101
    4ddc:	0000f0d7 	.word	0x0000f0d7
    4de0:	0000f169 	.word	0x0000f169
    4de4:	00006551 	.word	0x00006551
    4de8:	0000f147 	.word	0x0000f147
    4dec:	00006589 	.word	0x00006589
    4df0:	0000f187 	.word	0x0000f187
    4df4:	0000e349 	.word	0x0000e349
    4df8:	0000e393 	.word	0x0000e393
    4dfc:	0000f165 	.word	0x0000f165

00004e00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    4e00:	4806      	ldr	r0, [pc, #24]	; (4e1c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    4e02:	4905      	ldr	r1, [pc, #20]	; (4e18 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    4e04:	6581      	str	r1, [r0, #88]	; 0x58
    4e06:	4906      	ldr	r1, [pc, #24]	; (4e20 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    4e08:	6601      	str	r1, [r0, #96]	; 0x60
    4e0a:	4807      	ldr	r0, [pc, #28]	; (4e28 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    4e0c:	4905      	ldr	r1, [pc, #20]	; (4e24 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    4e0e:	6581      	str	r1, [r0, #88]	; 0x58
    4e10:	4906      	ldr	r1, [pc, #24]	; (4e2c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    4e12:	65c1      	str	r1, [r0, #92]	; 0x5c
    4e14:	4770      	bx	lr
    4e16:	0000      	.short	0x0000
    4e18:	0000611d 	.word	0x0000611d
    4e1c:	2000012c 	.word	0x2000012c
    4e20:	00006201 	.word	0x00006201
    4e24:	00010061 	.word	0x00010061
    4e28:	200001d8 	.word	0x200001d8
    4e2c:	0000f127 	.word	0x0000f127

00004e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    4e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e32:	4c7c      	ldr	r4, [pc, #496]	; (5024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    4e34:	2101      	movs	r1, #1
    4e36:	f1a4 0610 	sub.w	r6, r4, #16
    4e3a:	7021      	strb	r1, [r4, #0]
    4e3c:	2500      	movs	r5, #0
    4e3e:	6060      	str	r0, [r4, #4]
    4e40:	8075      	strh	r5, [r6, #2]
    4e42:	7075      	strb	r5, [r6, #1]
    4e44:	7035      	strb	r5, [r6, #0]
    4e46:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    4e4a:	8800      	ldrh	r0, [r0, #0]
    4e4c:	f7fc fa88 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4e50:	b180      	cbz	r0, 4e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    4e52:	6860      	ldr	r0, [r4, #4]
    4e54:	8800      	ldrh	r0, [r0, #0]
    4e56:	f7fc fceb 	bl	1830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    4e5a:	6860      	ldr	r0, [r4, #4]
    4e5c:	8800      	ldrh	r0, [r0, #0]
    4e5e:	f7fc fc8f 	bl	1780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    4e62:	6860      	ldr	r0, [r4, #4]
    4e64:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    4e68:	b1c9      	cbz	r1, 4e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4e6a:	3080      	adds	r0, #128	; 0x80
    4e6c:	f00a f8b2 	bl	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    4e70:	b118      	cbz	r0, 4e7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    4e72:	e014      	b.n	4e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4e74:	f640 419f 	movw	r1, #3231	; 0xc9f
    4e78:	e06c      	b.n	4f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    4e7a:	6860      	ldr	r0, [r4, #4]
    4e7c:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    4e80:	f88d 1000 	strb.w	r1, [sp]
    4e84:	9900      	ldr	r1, [sp, #0]
    4e86:	9100      	str	r1, [sp, #0]
    4e88:	f89d 1000 	ldrb.w	r1, [sp]
    4e8c:	b139      	cbz	r1, 4e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4e8e:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    4e92:	2301      	movs	r3, #1
    4e94:	4619      	mov	r1, r3
    4e96:	3080      	adds	r0, #128	; 0x80
    4e98:	f008 fc0e 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    4e9c:	b180      	cbz	r0, 4ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    4e9e:	6860      	ldr	r0, [r4, #4]
    4ea0:	3080      	adds	r0, #128	; 0x80
    4ea2:	f00a f897 	bl	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    4ea6:	b128      	cbz	r0, 4eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    4ea8:	6860      	ldr	r0, [r4, #4]
    4eaa:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    4eae:	bf00      	nop
    4eb0:	f000 fb84 	bl	55bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    4eb4:	6860      	ldr	r0, [r4, #4]
    4eb6:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    4eba:	b189      	cbz	r1, 4ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    4ebc:	80b5      	strh	r5, [r6, #4]
    4ebe:	e01e      	b.n	4efe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    4ec0:	6860      	ldr	r0, [r4, #4]
    4ec2:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    4ec6:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    4eca:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    4ece:	2100      	movs	r1, #0
    4ed0:	2002      	movs	r0, #2
    4ed2:	f000 fe39 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    4ed6:	6860      	ldr	r0, [r4, #4]
    4ed8:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    4edc:	2002      	movs	r0, #2
    4ede:	e7e7      	b.n	4eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    4ee0:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    4ee4:	f88d 1000 	strb.w	r1, [sp]
    4ee8:	9900      	ldr	r1, [sp, #0]
    4eea:	9100      	str	r1, [sp, #0]
    4eec:	f89d 1000 	ldrb.w	r1, [sp]
    4ef0:	b919      	cbnz	r1, 4efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    4ef2:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    4ef4:	8b02      	ldrh	r2, [r0, #24]
    4ef6:	4291      	cmp	r1, r2
    4ef8:	d800      	bhi.n	4efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    4efa:	8b01      	ldrh	r1, [r0, #24]
    4efc:	80b1      	strh	r1, [r6, #4]
    4efe:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    4f02:	1e49      	subs	r1, r1, #1
    4f04:	b28f      	uxth	r7, r1
    4f06:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    4f0a:	4439      	add	r1, r7
    4f0c:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    4f10:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    4f14:	4439      	add	r1, r7
    4f16:	8001      	strh	r1, [r0, #0]
    4f18:	f001 fba0 	bl	665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    4f1c:	b120      	cbz	r0, 4f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    4f1e:	6860      	ldr	r0, [r4, #4]
    4f20:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    4f24:	4439      	add	r1, r7
    4f26:	6001      	str	r1, [r0, #0]
    4f28:	6861      	ldr	r1, [r4, #4]
    4f2a:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    4f2e:	2801      	cmp	r0, #1
    4f30:	d802      	bhi.n	4f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    4f32:	1c40      	adds	r0, r0, #1
    4f34:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    4f38:	b10f      	cbz	r7, 4f3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    4f3a:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    4f3e:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    4f42:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    4f46:	f101 0080 	add.w	r0, r1, #128	; 0x80
    4f4a:	f008 fd61 	bl	da10 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    4f4e:	b120      	cbz	r0, 4f5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    4f50:	f640 41e6 	movw	r1, #3302	; 0xce6
    4f54:	2031      	movs	r0, #49	; 0x31
    4f56:	f7fb fd2b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f5a:	6860      	ldr	r0, [r4, #4]
    4f5c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    4f60:	290a      	cmp	r1, #10
    4f62:	d001      	beq.n	4f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    4f64:	290b      	cmp	r1, #11
    4f66:	d119      	bne.n	4f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    4f68:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    4f6c:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    4f70:	1ad2      	subs	r2, r2, r3
    4f72:	b212      	sxth	r2, r2
    4f74:	2a00      	cmp	r2, #0
    4f76:	db11      	blt.n	4f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    4f78:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    4f7c:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    4f80:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    4f84:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    4f88:	2103      	movs	r1, #3
    4f8a:	f7fd faaf 	bl	24ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4f8e:	6860      	ldr	r0, [r4, #4]
    4f90:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    4f94:	21ff      	movs	r1, #255	; 0xff
    4f96:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    4f9a:	e026      	b.n	4fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4f9c:	2925      	cmp	r1, #37	; 0x25
    4f9e:	d111      	bne.n	4fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    4fa0:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    4fa4:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    4fa8:	1a89      	subs	r1, r1, r2
    4faa:	b209      	sxth	r1, r1
    4fac:	2900      	cmp	r1, #0
    4fae:	db09      	blt.n	4fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    4fb0:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    4fb4:	f000 fe82 	bl	5cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    4fb8:	2800      	cmp	r0, #0
    4fba:	6860      	ldr	r0, [r4, #4]
    4fbc:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    4fc0:	d029      	beq.n	5016 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    4fc2:	e012      	b.n	4fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4fc4:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    4fc8:	2925      	cmp	r1, #37	; 0x25
    4fca:	d001      	beq.n	4fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    4fcc:	2927      	cmp	r1, #39	; 0x27
    4fce:	d10c      	bne.n	4fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4fd0:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    4fd4:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    4fd8:	1a89      	subs	r1, r1, r2
    4fda:	b209      	sxth	r1, r1
    4fdc:	2900      	cmp	r1, #0
    4fde:	db04      	blt.n	4fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4fe0:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    4fe4:	f000 fe6a 	bl	5cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    4fe8:	b1a8      	cbz	r0, 5016 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    4fea:	480f      	ldr	r0, [pc, #60]	; (5028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    4fec:	9000      	str	r0, [sp, #0]
    4fee:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    4ff2:	4b0e      	ldr	r3, [pc, #56]	; (502c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    4ff4:	4a0e      	ldr	r2, [pc, #56]	; (5030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    4ff6:	f7fc fca9 	bl	194c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    4ffa:	6860      	ldr	r0, [r4, #4]
    4ffc:	2301      	movs	r3, #1
    4ffe:	2105      	movs	r1, #5
    5000:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5004:	3080      	adds	r0, #128	; 0x80
    5006:	f008 fb57 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    500a:	2800      	cmp	r0, #0
    500c:	d009      	beq.n	5022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    500e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5012:	f7fc bc95 	b.w	1940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    5016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    501a:	2100      	movs	r1, #0
    501c:	4608      	mov	r0, r1
    501e:	f000 bb9f 	b.w	5760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    5022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5024:	20000124 	.word	0x20000124
    5028:	00005761 	.word	0x00005761
    502c:	000052b1 	.word	0x000052b1
    5030:	00005c09 	.word	0x00005c09
    5034:	491d      	ldr	r1, [pc, #116]	; (50ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5036:	b508      	push	{r3, lr}
    5038:	6849      	ldr	r1, [r1, #4]
    503a:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    503e:	b1c0      	cbz	r0, 5072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    5040:	2a11      	cmp	r2, #17
    5042:	d006      	beq.n	5052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    5044:	2a15      	cmp	r2, #21
    5046:	d007      	beq.n	5058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    5048:	2a16      	cmp	r2, #22
    504a:	d009      	beq.n	5060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    504c:	2a1c      	cmp	r2, #28
    504e:	d128      	bne.n	50a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5050:	e009      	b.n	5066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    5052:	2101      	movs	r1, #1
    5054:	200b      	movs	r0, #11
    5056:	e008      	b.n	506a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5058:	4814      	ldr	r0, [pc, #80]	; (50ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    505a:	f009 fff4 	bl	f046 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    505e:	e006      	b.n	506e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5060:	f000 fd90 	bl	5b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    5064:	e003      	b.n	506e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5066:	2101      	movs	r1, #1
    5068:	2006      	movs	r0, #6
    506a:	f000 fd6d 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    506e:	2001      	movs	r0, #1
    5070:	bd08      	pop	{r3, pc}
    5072:	2a22      	cmp	r2, #34	; 0x22
    5074:	d004      	beq.n	5080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    5076:	2a2f      	cmp	r2, #47	; 0x2f
    5078:	d113      	bne.n	50a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    507a:	2101      	movs	r1, #1
    507c:	2011      	movs	r0, #17
    507e:	e7f4      	b.n	506a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5080:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5084:	2802      	cmp	r0, #2
    5086:	d00e      	beq.n	50a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5088:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    508c:	2801      	cmp	r0, #1
    508e:	d108      	bne.n	50a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5090:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5094:	f88d 0000 	strb.w	r0, [sp]
    5098:	9800      	ldr	r0, [sp, #0]
    509a:	9000      	str	r0, [sp, #0]
    509c:	f89d 0000 	ldrb.w	r0, [sp]
    50a0:	b108      	cbz	r0, 50a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    50a2:	2000      	movs	r0, #0
    50a4:	bd08      	pop	{r3, pc}
    50a6:	2101      	movs	r1, #1
    50a8:	2017      	movs	r0, #23
    50aa:	e7de      	b.n	506a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    50ac:	20000124 	.word	0x20000124
    50b0:	b538      	push	{r3, r4, r5, lr}
    50b2:	2800      	cmp	r0, #0
    50b4:	d173      	bne.n	519e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    50b6:	4c3b      	ldr	r4, [pc, #236]	; (51a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    50b8:	6860      	ldr	r0, [r4, #4]
    50ba:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    50be:	07ca      	lsls	r2, r1, #31
    50c0:	d002      	beq.n	50c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    50c2:	2101      	movs	r1, #1
    50c4:	2009      	movs	r0, #9
    50c6:	e066      	b.n	5196 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    50c8:	078a      	lsls	r2, r1, #30
    50ca:	d50a      	bpl.n	50e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    50cc:	2101      	movs	r1, #1
    50ce:	200c      	movs	r0, #12
    50d0:	f000 fd3a 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    50d4:	6860      	ldr	r0, [r4, #4]
    50d6:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    50da:	f041 0101 	orr.w	r1, r1, #1
    50de:	7001      	strb	r1, [r0, #0]
    50e0:	e05b      	b.n	519a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    50e2:	074a      	lsls	r2, r1, #29
    50e4:	d502      	bpl.n	50ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    50e6:	2101      	movs	r1, #1
    50e8:	2013      	movs	r0, #19
    50ea:	e054      	b.n	5196 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    50ec:	070a      	lsls	r2, r1, #28
    50ee:	d506      	bpl.n	50fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    50f0:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    50f4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    50f8:	2101      	movs	r1, #1
    50fa:	2007      	movs	r0, #7
    50fc:	e04b      	b.n	5196 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    50fe:	f011 0f30 	tst.w	r1, #48	; 0x30
    5102:	d044      	beq.n	518e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    5104:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5108:	f88d 1000 	strb.w	r1, [sp]
    510c:	9900      	ldr	r1, [sp, #0]
    510e:	9100      	str	r1, [sp, #0]
    5110:	f89d 1000 	ldrb.w	r1, [sp]
    5114:	bbc1      	cbnz	r1, 5188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    5116:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    511a:	2500      	movs	r5, #0
    511c:	f88d 1000 	strb.w	r1, [sp]
    5120:	9900      	ldr	r1, [sp, #0]
    5122:	9100      	str	r1, [sp, #0]
    5124:	f89d 1000 	ldrb.w	r1, [sp]
    5128:	b1c1      	cbz	r1, 515c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    512a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    512e:	2925      	cmp	r1, #37	; 0x25
    5130:	d02b      	beq.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    5132:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5136:	2925      	cmp	r1, #37	; 0x25
    5138:	d027      	beq.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    513a:	2300      	movs	r3, #0
    513c:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5140:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5144:	f008 fe8a 	bl	de5c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5148:	6860      	ldr	r0, [r4, #4]
    514a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    514e:	f021 0120 	bic.w	r1, r1, #32
    5152:	f041 0110 	orr.w	r1, r1, #16
    5156:	6001      	str	r1, [r0, #0]
    5158:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    515c:	6860      	ldr	r0, [r4, #4]
    515e:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    5162:	06c9      	lsls	r1, r1, #27
    5164:	d51b      	bpl.n	519e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5166:	f008 fe94 	bl	de92 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    516a:	480e      	ldr	r0, [pc, #56]	; (51a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    516c:	f009 f852 	bl	e214 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    5170:	6861      	ldr	r1, [r4, #4]
    5172:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5176:	8bc2      	ldrh	r2, [r0, #30]
    5178:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    517c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    517e:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5182:	2101      	movs	r1, #1
    5184:	2015      	movs	r0, #21
    5186:	e006      	b.n	5196 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5188:	e009      	b.n	519e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    518a:	2301      	movs	r3, #1
    518c:	e7d6      	b.n	513c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    518e:	0648      	lsls	r0, r1, #25
    5190:	d505      	bpl.n	519e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5192:	2101      	movs	r1, #1
    5194:	2024      	movs	r0, #36	; 0x24
    5196:	f000 fcd7 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    519a:	2001      	movs	r0, #1
    519c:	bd38      	pop	{r3, r4, r5, pc}
    519e:	2000      	movs	r0, #0
    51a0:	bd38      	pop	{r3, r4, r5, pc}
    51a2:	0000      	.short	0x0000
    51a4:	20000124 	.word	0x20000124
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	460d      	mov	r5, r1
    51ac:	4606      	mov	r6, r0
    51ae:	f008 fd8a 	bl	dcc6 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    51b2:	4604      	mov	r4, r0
    51b4:	4630      	mov	r0, r6
    51b6:	f008 fd88 	bl	dcca <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    51ba:	4629      	mov	r1, r5
    51bc:	f000 f81e 	bl	51fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    51c0:	b1b8      	cbz	r0, 51f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    51c2:	4620      	mov	r0, r4
    51c4:	f008 fb22 	bl	d80c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    51c8:	0001      	movs	r1, r0
    51ca:	d00d      	beq.n	51e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    51cc:	480a      	ldr	r0, [pc, #40]	; (51f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    51ce:	6840      	ldr	r0, [r0, #4]
    51d0:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    51d4:	428a      	cmp	r2, r1
    51d6:	d007      	beq.n	51e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    51d8:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    51dc:	2901      	cmp	r1, #1
    51de:	d005      	beq.n	51ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    51e0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    51e4:	4220      	tst	r0, r4
    51e6:	d004      	beq.n	51f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    51e8:	2001      	movs	r0, #1
    51ea:	bd70      	pop	{r4, r5, r6, pc}
    51ec:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    51f0:	e7f8      	b.n	51e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    51f2:	2000      	movs	r0, #0
    51f4:	bd70      	pop	{r4, r5, r6, pc}
    51f6:	0000      	.short	0x0000
    51f8:	20000124 	.word	0x20000124
    51fc:	b570      	push	{r4, r5, r6, lr}
    51fe:	460d      	mov	r5, r1
    5200:	4604      	mov	r4, r0
    5202:	f008 fb03 	bl	d80c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5206:	b350      	cbz	r0, 525e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5208:	4916      	ldr	r1, [pc, #88]	; (5264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    520a:	6849      	ldr	r1, [r1, #4]
    520c:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    5210:	4282      	cmp	r2, r0
    5212:	d024      	beq.n	525e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5214:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    5218:	2b01      	cmp	r3, #1
    521a:	d005      	beq.n	5228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    521c:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    5220:	4223      	tst	r3, r4
    5222:	d013      	beq.n	524c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    5224:	b11d      	cbz	r5, 522e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    5226:	e01a      	b.n	525e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5228:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    522c:	e7f8      	b.n	5220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    522e:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5232:	4221      	tst	r1, r4
    5234:	d113      	bne.n	525e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5236:	b15a      	cbz	r2, 5250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    5238:	2a04      	cmp	r2, #4
    523a:	d00e      	beq.n	525a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    523c:	2804      	cmp	r0, #4
    523e:	d00c      	beq.n	525a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5240:	2a08      	cmp	r2, #8
    5242:	d00a      	beq.n	525a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5244:	2808      	cmp	r0, #8
    5246:	d008      	beq.n	525a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5248:	4282      	cmp	r2, r0
    524a:	d908      	bls.n	525e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    524c:	2000      	movs	r0, #0
    524e:	bd70      	pop	{r4, r5, r6, pc}
    5250:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5254:	2006      	movs	r0, #6
    5256:	f7fb fbab 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525a:	4282      	cmp	r2, r0
    525c:	d3f6      	bcc.n	524c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    525e:	2001      	movs	r0, #1
    5260:	bd70      	pop	{r4, r5, r6, pc}
    5262:	0000      	.short	0x0000
    5264:	20000124 	.word	0x20000124
    5268:	b510      	push	{r4, lr}
    526a:	4c10      	ldr	r4, [pc, #64]	; (52ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    526c:	2301      	movs	r3, #1
    526e:	2100      	movs	r1, #0
    5270:	6860      	ldr	r0, [r4, #4]
    5272:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5276:	3080      	adds	r0, #128	; 0x80
    5278:	f008 fa1e 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    527c:	b140      	cbz	r0, 5290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    527e:	6860      	ldr	r0, [r4, #4]
    5280:	2301      	movs	r3, #1
    5282:	2104      	movs	r1, #4
    5284:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5288:	3080      	adds	r0, #128	; 0x80
    528a:	f008 fa15 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    528e:	b108      	cbz	r0, 5294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    5290:	2000      	movs	r0, #0
    5292:	bd10      	pop	{r4, pc}
    5294:	6860      	ldr	r0, [r4, #4]
    5296:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    529a:	2800      	cmp	r0, #0
    529c:	d0f9      	beq.n	5292 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    529e:	2100      	movs	r1, #0
    52a0:	2012      	movs	r0, #18
    52a2:	f000 fc51 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    52a6:	2001      	movs	r0, #1
    52a8:	bd10      	pop	{r4, pc}
    52aa:	0000      	.short	0x0000
    52ac:	20000124 	.word	0x20000124
    52b0:	490d      	ldr	r1, [pc, #52]	; (52e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    52b2:	4602      	mov	r2, r0
    52b4:	7848      	ldrb	r0, [r1, #1]
    52b6:	b9a0      	cbnz	r0, 52e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    52b8:	f101 0010 	add.w	r0, r1, #16
    52bc:	6840      	ldr	r0, [r0, #4]
    52be:	b142      	cbz	r2, 52d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    52c0:	7889      	ldrb	r1, [r1, #2]
    52c2:	0709      	lsls	r1, r1, #28
    52c4:	d503      	bpl.n	52ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    52c6:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    52ca:	2807      	cmp	r0, #7
    52cc:	d009      	beq.n	52e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    52ce:	2001      	movs	r0, #1
    52d0:	4770      	bx	lr
    52d2:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    52d6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    52d8:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    52da:	428a      	cmp	r2, r1
    52dc:	d801      	bhi.n	52e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    52de:	f7ff b83f 	b.w	4360 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    52e2:	2000      	movs	r0, #0
    52e4:	4770      	bx	lr
    52e6:	0000      	.short	0x0000
    52e8:	20000114 	.word	0x20000114
    52ec:	b538      	push	{r3, r4, r5, lr}
    52ee:	4c32      	ldr	r4, [pc, #200]	; (53b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    52f0:	4605      	mov	r5, r0
    52f2:	6860      	ldr	r0, [r4, #4]
    52f4:	3080      	adds	r0, #128	; 0x80
    52f6:	f009 fe6d 	bl	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    52fa:	2800      	cmp	r0, #0
    52fc:	d15b      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    52fe:	2d00      	cmp	r5, #0
    5300:	d159      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5302:	6860      	ldr	r0, [r4, #4]
    5304:	2301      	movs	r3, #1
    5306:	4619      	mov	r1, r3
    5308:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    530c:	3080      	adds	r0, #128	; 0x80
    530e:	f008 f9d3 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5312:	2800      	cmp	r0, #0
    5314:	d14f      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5316:	6860      	ldr	r0, [r4, #4]
    5318:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    531c:	f88d 1000 	strb.w	r1, [sp]
    5320:	9900      	ldr	r1, [sp, #0]
    5322:	9100      	str	r1, [sp, #0]
    5324:	f89d 2000 	ldrb.w	r2, [sp]
    5328:	2100      	movs	r1, #0
    532a:	b142      	cbz	r2, 533e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    532c:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5330:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5334:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5338:	2100      	movs	r1, #0
    533a:	2002      	movs	r0, #2
    533c:	e030      	b.n	53a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    533e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5342:	2301      	movs	r3, #1
    5344:	2104      	movs	r1, #4
    5346:	3080      	adds	r0, #128	; 0x80
    5348:	f008 f9b6 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    534c:	4605      	mov	r5, r0
    534e:	f7ff feaf 	bl	50b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    5352:	2800      	cmp	r0, #0
    5354:	d12f      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5356:	4628      	mov	r0, r5
    5358:	f7ff fe6c 	bl	5034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    535c:	2800      	cmp	r0, #0
    535e:	d12a      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5360:	f7ff ff82 	bl	5268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5364:	2800      	cmp	r0, #0
    5366:	d126      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5368:	6860      	ldr	r0, [r4, #4]
    536a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    536e:	2909      	cmp	r1, #9
    5370:	d01a      	beq.n	53a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    5372:	2d00      	cmp	r5, #0
    5374:	d11f      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5376:	f000 fb13 	bl	59a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    537a:	2800      	cmp	r0, #0
    537c:	d11b      	bne.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    537e:	6860      	ldr	r0, [r4, #4]
    5380:	2301      	movs	r3, #1
    5382:	2100      	movs	r1, #0
    5384:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5388:	3080      	adds	r0, #128	; 0x80
    538a:	f008 f995 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    538e:	2800      	cmp	r0, #0
    5390:	d011      	beq.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5392:	6860      	ldr	r0, [r4, #4]
    5394:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5398:	2800      	cmp	r0, #0
    539a:	d00c      	beq.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    539c:	2100      	movs	r1, #0
    539e:	20ff      	movs	r0, #255	; 0xff
    53a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    53a4:	f000 bbd0 	b.w	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    53a8:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    53ac:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    53b0:	2100      	movs	r1, #0
    53b2:	2007      	movs	r0, #7
    53b4:	e7f4      	b.n	53a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    53b6:	bd38      	pop	{r3, r4, r5, pc}
    53b8:	20000124 	.word	0x20000124
    53bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53be:	4d2b      	ldr	r5, [pc, #172]	; (546c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    53c0:	0006      	movs	r6, r0
    53c2:	f105 0410 	add.w	r4, r5, #16
    53c6:	d133      	bne.n	5430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    53c8:	f000 f8aa 	bl	5520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    53cc:	f000 f852 	bl	5474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    53d0:	0006      	movs	r6, r0
    53d2:	d12d      	bne.n	5430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    53d4:	8869      	ldrh	r1, [r5, #2]
    53d6:	0748      	lsls	r0, r1, #29
    53d8:	d506      	bpl.n	53e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    53da:	6860      	ldr	r0, [r4, #4]
    53dc:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    53e0:	2806      	cmp	r0, #6
    53e2:	d101      	bne.n	53e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    53e4:	2001      	movs	r0, #1
    53e6:	7028      	strb	r0, [r5, #0]
    53e8:	0788      	lsls	r0, r1, #30
    53ea:	d516      	bpl.n	541a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    53ec:	68a8      	ldr	r0, [r5, #8]
    53ee:	78c0      	ldrb	r0, [r0, #3]
    53f0:	282b      	cmp	r0, #43	; 0x2b
    53f2:	d207      	bcs.n	5404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    53f4:	491e      	ldr	r1, [pc, #120]	; (5470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    53f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    53fa:	b119      	cbz	r1, 5404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    53fc:	481b      	ldr	r0, [pc, #108]	; (546c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    53fe:	3010      	adds	r0, #16
    5400:	4788      	blx	r1
    5402:	e00a      	b.n	541a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5404:	28ff      	cmp	r0, #255	; 0xff
    5406:	d004      	beq.n	5412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    5408:	f640 0148 	movw	r1, #2120	; 0x848
    540c:	2031      	movs	r0, #49	; 0x31
    540e:	f7fb facf 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5412:	4816      	ldr	r0, [pc, #88]	; (546c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5414:	3010      	adds	r0, #16
    5416:	f009 fe55 	bl	f0c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    541a:	78a8      	ldrb	r0, [r5, #2]
    541c:	06c0      	lsls	r0, r0, #27
    541e:	d507      	bpl.n	5430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5420:	6860      	ldr	r0, [r4, #4]
    5422:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5426:	290a      	cmp	r1, #10
    5428:	d102      	bne.n	5430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    542a:	210b      	movs	r1, #11
    542c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5430:	7868      	ldrb	r0, [r5, #1]
    5432:	0700      	lsls	r0, r0, #28
    5434:	d518      	bpl.n	5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5436:	6860      	ldr	r0, [r4, #4]
    5438:	2301      	movs	r3, #1
    543a:	2105      	movs	r1, #5
    543c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5440:	3080      	adds	r0, #128	; 0x80
    5442:	f008 f939 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5446:	b108      	cbz	r0, 544c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5448:	2608      	movs	r6, #8
    544a:	e00d      	b.n	5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    544c:	2500      	movs	r5, #0
    544e:	4669      	mov	r1, sp
    5450:	2003      	movs	r0, #3
    5452:	9500      	str	r5, [sp, #0]
    5454:	f7fc fb3c 	bl	1ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5458:	9800      	ldr	r0, [sp, #0]
    545a:	b128      	cbz	r0, 5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    545c:	7205      	strb	r5, [r0, #8]
    545e:	2210      	movs	r2, #16
    5460:	6861      	ldr	r1, [r4, #4]
    5462:	9800      	ldr	r0, [sp, #0]
    5464:	f008 fcd0 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5468:	4630      	mov	r0, r6
    546a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    546c:	20000114 	.word	0x20000114
    5470:	200001d8 	.word	0x200001d8
    5474:	b570      	push	{r4, r5, r6, lr}
    5476:	4d28      	ldr	r5, [pc, #160]	; (5518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5478:	2000      	movs	r0, #0
    547a:	78a9      	ldrb	r1, [r5, #2]
    547c:	07c9      	lsls	r1, r1, #31
    547e:	d017      	beq.n	54b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    5480:	68e8      	ldr	r0, [r5, #12]
    5482:	f105 0410 	add.w	r4, r5, #16
    5486:	2301      	movs	r3, #1
    5488:	78c6      	ldrb	r6, [r0, #3]
    548a:	6860      	ldr	r0, [r4, #4]
    548c:	2105      	movs	r1, #5
    548e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5492:	3080      	adds	r0, #128	; 0x80
    5494:	f008 f910 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5498:	b158      	cbz	r0, 54b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    549a:	1eb6      	subs	r6, r6, #2
    549c:	2e0a      	cmp	r6, #10
    549e:	d206      	bcs.n	54ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    54a0:	e8df f006 	tbb	[pc, r6]
    54a4:	05050707 	.word	0x05050707
    54a8:	05050707 	.word	0x05050707
    54ac:	0707      	.short	0x0707
    54ae:	2008      	movs	r0, #8
    54b0:	bd70      	pop	{r4, r5, r6, pc}
    54b2:	68e8      	ldr	r0, [r5, #12]
    54b4:	f7fd f944 	bl	2740 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    54b8:	b338      	cbz	r0, 550a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    54ba:	68e8      	ldr	r0, [r5, #12]
    54bc:	78c5      	ldrb	r5, [r0, #3]
    54be:	b11d      	cbz	r5, 54c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    54c0:	2d01      	cmp	r5, #1
    54c2:	d001      	beq.n	54c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    54c4:	2d16      	cmp	r5, #22
    54c6:	d113      	bne.n	54f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    54c8:	6860      	ldr	r0, [r4, #4]
    54ca:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    54ce:	f008 f94b 	bl	d768 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    54d2:	b168      	cbz	r0, 54f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    54d4:	6861      	ldr	r1, [r4, #4]
    54d6:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    54da:	2820      	cmp	r0, #32
    54dc:	d008      	beq.n	54f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    54de:	2821      	cmp	r0, #33	; 0x21
    54e0:	d003      	beq.n	54ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    54e2:	2d16      	cmp	r5, #22
    54e4:	d00f      	beq.n	5506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    54e6:	2002      	movs	r0, #2
    54e8:	bd70      	pop	{r4, r5, r6, pc}
    54ea:	202e      	movs	r0, #46	; 0x2e
    54ec:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    54f0:	2d2b      	cmp	r5, #43	; 0x2b
    54f2:	d20a      	bcs.n	550a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    54f4:	4809      	ldr	r0, [pc, #36]	; (551c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    54f6:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    54fa:	b131      	cbz	r1, 550a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    54fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5500:	4805      	ldr	r0, [pc, #20]	; (5518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5502:	3010      	adds	r0, #16
    5504:	4708      	bx	r1
    5506:	2020      	movs	r0, #32
    5508:	bd70      	pop	{r4, r5, r6, pc}
    550a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    550e:	4802      	ldr	r0, [pc, #8]	; (5518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5510:	3010      	adds	r0, #16
    5512:	f000 bd47 	b.w	5fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5516:	0000      	.short	0x0000
    5518:	20000114 	.word	0x20000114
    551c:	2000012c 	.word	0x2000012c
    5520:	b570      	push	{r4, r5, r6, lr}
    5522:	4e25      	ldr	r6, [pc, #148]	; (55b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5524:	78b0      	ldrb	r0, [r6, #2]
    5526:	0700      	lsls	r0, r0, #28
    5528:	d545      	bpl.n	55b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    552a:	f106 0410 	add.w	r4, r6, #16
    552e:	6860      	ldr	r0, [r4, #4]
    5530:	3080      	adds	r0, #128	; 0x80
    5532:	f009 fd4f 	bl	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5536:	b148      	cbz	r0, 554c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5538:	6860      	ldr	r0, [r4, #4]
    553a:	21fe      	movs	r1, #254	; 0xfe
    553c:	2500      	movs	r5, #0
    553e:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5542:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5546:	291a      	cmp	r1, #26
    5548:	d10e      	bne.n	5568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    554a:	e004      	b.n	5556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    554c:	f640 0154 	movw	r1, #2132	; 0x854
    5550:	2031      	movs	r0, #49	; 0x31
    5552:	f7fb fa2d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5556:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    555a:	4817      	ldr	r0, [pc, #92]	; (55b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    555c:	3010      	adds	r0, #16
    555e:	f008 fd94 	bl	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    5562:	6860      	ldr	r0, [r4, #4]
    5564:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5568:	6860      	ldr	r0, [r4, #4]
    556a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    556e:	2920      	cmp	r1, #32
    5570:	d002      	beq.n	5578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    5572:	2931      	cmp	r1, #49	; 0x31
    5574:	d116      	bne.n	55a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5576:	e00e      	b.n	5596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5578:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    557c:	2301      	movs	r3, #1
    557e:	210b      	movs	r1, #11
    5580:	3080      	adds	r0, #128	; 0x80
    5582:	f008 f899 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5586:	b108      	cbz	r0, 558c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    5588:	202e      	movs	r0, #46	; 0x2e
    558a:	e000      	b.n	558e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    558c:	2021      	movs	r0, #33	; 0x21
    558e:	6861      	ldr	r1, [r4, #4]
    5590:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5594:	e006      	b.n	55a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5596:	2101      	movs	r1, #1
    5598:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    559c:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    55a0:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    55a4:	6860      	ldr	r0, [r4, #4]
    55a6:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    55aa:	2907      	cmp	r1, #7
    55ac:	d103      	bne.n	55b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    55ae:	2102      	movs	r1, #2
    55b0:	7031      	strb	r1, [r6, #0]
    55b2:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    55b6:	bd70      	pop	{r4, r5, r6, pc}
    55b8:	20000114 	.word	0x20000114
    55bc:	b538      	push	{r3, r4, r5, lr}
    55be:	4605      	mov	r5, r0
    55c0:	4668      	mov	r0, sp
    55c2:	f7fc f91f 	bl	1804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    55c6:	b308      	cbz	r0, 560c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    55c8:	2222      	movs	r2, #34	; 0x22
    55ca:	2100      	movs	r1, #0
    55cc:	9800      	ldr	r0, [sp, #0]
    55ce:	f00b f820 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    55d2:	2103      	movs	r1, #3
    55d4:	9800      	ldr	r0, [sp, #0]
    55d6:	f008 fb90 	bl	dcfa <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    55da:	9800      	ldr	r0, [sp, #0]
    55dc:	7801      	ldrb	r1, [r0, #0]
    55de:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    55e2:	7001      	strb	r1, [r0, #0]
    55e4:	4629      	mov	r1, r5
    55e6:	f7fd f8bb 	bl	2760 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    55ea:	4c5b      	ldr	r4, [pc, #364]	; (5758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    55ec:	2d11      	cmp	r5, #17
    55ee:	d032      	beq.n	5656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    55f0:	dc0f      	bgt.n	5612 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    55f2:	f1a5 0502 	sub.w	r5, r5, #2
    55f6:	2d0d      	cmp	r5, #13
    55f8:	d21f      	bcs.n	563a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    55fa:	e8df f005 	tbb	[pc, r5]
    55fe:	1e21      	.short	0x1e21
    5600:	26a3a355 	.word	0x26a3a355
    5604:	a31e621e 	.word	0xa31e621e
    5608:	0090393f 	.word	0x0090393f
    560c:	f640 21fe 	movw	r1, #2814	; 0xafe
    5610:	e09e      	b.n	5750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5612:	2d17      	cmp	r5, #23
    5614:	d075      	beq.n	5702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5616:	dc08      	bgt.n	562a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    5618:	f1a5 0512 	sub.w	r5, r5, #18
    561c:	2d05      	cmp	r5, #5
    561e:	d20c      	bcs.n	563a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5620:	e8df f005 	tbb	[pc, r5]
    5624:	54549090 	.word	0x54549090
    5628:	0038      	.short	0x0038
    562a:	2d23      	cmp	r5, #35	; 0x23
    562c:	d07b      	beq.n	5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    562e:	2d24      	cmp	r5, #36	; 0x24
    5630:	d079      	beq.n	5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5632:	2d25      	cmp	r5, #37	; 0x25
    5634:	d077      	beq.n	5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5636:	2dff      	cmp	r5, #255	; 0xff
    5638:	d07c      	beq.n	5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    563a:	f640 31aa 	movw	r1, #2986	; 0xbaa
    563e:	e087      	b.n	5750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5640:	6861      	ldr	r1, [r4, #4]
    5642:	9800      	ldr	r0, [sp, #0]
    5644:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5648:	e016      	b.n	5678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    564a:	6860      	ldr	r0, [r4, #4]
    564c:	9900      	ldr	r1, [sp, #0]
    564e:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5652:	7108      	strb	r0, [r1, #4]
    5654:	e076      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5656:	6860      	ldr	r0, [r4, #4]
    5658:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    565c:	9800      	ldr	r0, [sp, #0]
    565e:	f008 fb38 	bl	dcd2 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5662:	6860      	ldr	r0, [r4, #4]
    5664:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5668:	9800      	ldr	r0, [sp, #0]
    566a:	f008 fb36 	bl	dcda <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    566e:	e069      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5670:	6861      	ldr	r1, [r4, #4]
    5672:	9800      	ldr	r0, [sp, #0]
    5674:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5678:	7101      	strb	r1, [r0, #4]
    567a:	e063      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    567c:	9800      	ldr	r0, [sp, #0]
    567e:	210d      	movs	r1, #13
    5680:	7101      	strb	r1, [r0, #4]
    5682:	2159      	movs	r1, #89	; 0x59
    5684:	7141      	strb	r1, [r0, #5]
    5686:	2100      	movs	r1, #0
    5688:	7181      	strb	r1, [r0, #6]
    568a:	2177      	movs	r1, #119	; 0x77
    568c:	71c1      	strb	r1, [r0, #7]
    568e:	2110      	movs	r1, #16
    5690:	7201      	strb	r1, [r0, #8]
    5692:	e057      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5694:	9800      	ldr	r0, [sp, #0]
    5696:	6861      	ldr	r1, [r4, #4]
    5698:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    569c:	7101      	strb	r1, [r0, #4]
    569e:	6861      	ldr	r1, [r4, #4]
    56a0:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    56a4:	7141      	strb	r1, [r0, #5]
    56a6:	e04d      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    56a8:	6861      	ldr	r1, [r4, #4]
    56aa:	9800      	ldr	r0, [sp, #0]
    56ac:	f501 7110 	add.w	r1, r1, #576	; 0x240
    56b0:	f008 faca 	bl	dc48 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    56b4:	6861      	ldr	r1, [r4, #4]
    56b6:	9800      	ldr	r0, [sp, #0]
    56b8:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    56bc:	f008 fac1 	bl	dc42 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    56c0:	e040      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    56c2:	4825      	ldr	r0, [pc, #148]	; (5758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    56c4:	9900      	ldr	r1, [sp, #0]
    56c6:	f7fd fc0b 	bl	2ee0 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    56ca:	e03b      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    56cc:	6860      	ldr	r0, [r4, #4]
    56ce:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    56d2:	9800      	ldr	r0, [sp, #0]
    56d4:	f008 fb19 	bl	dd0a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    56d8:	6860      	ldr	r0, [r4, #4]
    56da:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    56de:	9800      	ldr	r0, [sp, #0]
    56e0:	f008 fb17 	bl	dd12 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    56e4:	6860      	ldr	r0, [r4, #4]
    56e6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    56ea:	9800      	ldr	r0, [sp, #0]
    56ec:	f008 fb15 	bl	dd1a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    56f0:	6860      	ldr	r0, [r4, #4]
    56f2:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    56f6:	9800      	ldr	r0, [sp, #0]
    56f8:	f008 fb13 	bl	dd22 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    56fc:	e022      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    56fe:	e000      	b.n	5702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5700:	e011      	b.n	5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5702:	6861      	ldr	r1, [r4, #4]
    5704:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5708:	2801      	cmp	r0, #1
    570a:	9800      	ldr	r0, [sp, #0]
    570c:	d0c4      	beq.n	5698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    570e:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5712:	7101      	strb	r1, [r0, #4]
    5714:	6861      	ldr	r1, [r4, #4]
    5716:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    571a:	e7c3      	b.n	56a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    571c:	e00a      	b.n	5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    571e:	9800      	ldr	r0, [sp, #0]
    5720:	f7fd fb88 	bl	2e34 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5724:	e00e      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5726:	4b0d      	ldr	r3, [pc, #52]	; (575c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5728:	4a0b      	ldr	r2, [pc, #44]	; (5758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    572a:	4628      	mov	r0, r5
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	9900      	ldr	r1, [sp, #0]
    5730:	4798      	blx	r3
    5732:	e007      	b.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5734:	6860      	ldr	r0, [r4, #4]
    5736:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    573a:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    573e:	9800      	ldr	r0, [sp, #0]
    5740:	f008 facd 	bl	dcde <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5744:	f7fc f838 	bl	17b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5748:	2800      	cmp	r0, #0
    574a:	d104      	bne.n	5756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    574c:	f640 31ae 	movw	r1, #2990	; 0xbae
    5750:	2031      	movs	r0, #49	; 0x31
    5752:	f7fb f92d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5756:	bd38      	pop	{r3, r4, r5, pc}
    5758:	20000124 	.word	0x20000124
    575c:	20000284 	.word	0x20000284
    5760:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5764:	4e8c      	ldr	r6, [pc, #560]	; (5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5766:	468a      	mov	sl, r1
    5768:	6870      	ldr	r0, [r6, #4]
    576a:	8800      	ldrh	r0, [r0, #0]
    576c:	f7fb fdf8 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5770:	0007      	movs	r7, r0
    5772:	d00c      	beq.n	578e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5774:	f1a6 0510 	sub.w	r5, r6, #16
    5778:	f04f 0400 	mov.w	r4, #0
    577c:	8868      	ldrh	r0, [r5, #2]
    577e:	05c0      	lsls	r0, r0, #23
    5780:	d50a      	bpl.n	5798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    5782:	6870      	ldr	r0, [r6, #4]
    5784:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5788:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    578c:	e009      	b.n	57a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    578e:	f640 6189 	movw	r1, #3721	; 0xe89
    5792:	2031      	movs	r0, #49	; 0x31
    5794:	f7fb f90c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5798:	6871      	ldr	r1, [r6, #4]
    579a:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    579e:	1c40      	adds	r0, r0, #1
    57a0:	8008      	strh	r0, [r1, #0]
    57a2:	f000 ff5b 	bl	665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    57a6:	f04f 0901 	mov.w	r9, #1
    57aa:	b340      	cbz	r0, 57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    57ac:	8868      	ldrh	r0, [r5, #2]
    57ae:	0500      	lsls	r0, r0, #20
    57b0:	d506      	bpl.n	57c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    57b2:	6870      	ldr	r0, [r6, #4]
    57b4:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    57b8:	b111      	cbz	r1, 57c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    57ba:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    57be:	e01e      	b.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    57c0:	6870      	ldr	r0, [r6, #4]
    57c2:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    57c6:	1c49      	adds	r1, r1, #1
    57c8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    57cc:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    57d0:	428a      	cmp	r2, r1
    57d2:	d301      	bcc.n	57d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    57d4:	1a53      	subs	r3, r2, r1
    57d6:	e000      	b.n	57da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    57d8:	2300      	movs	r3, #0
    57da:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    57de:	f10c 0c05 	add.w	ip, ip, #5
    57e2:	4563      	cmp	r3, ip
    57e4:	d801      	bhi.n	57ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    57e6:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    57ea:	4291      	cmp	r1, r2
    57ec:	d307      	bcc.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    57ee:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    57f2:	2202      	movs	r2, #2
    57f4:	4969      	ldr	r1, [pc, #420]	; (599c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    57f6:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    57fa:	f008 fb19 	bl	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    57fe:	8868      	ldrh	r0, [r5, #2]
    5800:	f04f 0b02 	mov.w	fp, #2
    5804:	f410 7f40 	tst.w	r0, #768	; 0x300
    5808:	d00e      	beq.n	5828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    580a:	6870      	ldr	r0, [r6, #4]
    580c:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5810:	b111      	cbz	r1, 5818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    5812:	2903      	cmp	r1, #3
    5814:	d108      	bne.n	5828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5816:	e002      	b.n	581e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    5818:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    581c:	e001      	b.n	5822 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    581e:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5822:	2101      	movs	r1, #1
    5824:	f7fe fdac 	bl	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5828:	6870      	ldr	r0, [r6, #4]
    582a:	46b0      	mov	r8, r6
    582c:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5830:	2901      	cmp	r1, #1
    5832:	d104      	bne.n	583e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5834:	8869      	ldrh	r1, [r5, #2]
    5836:	0549      	lsls	r1, r1, #21
    5838:	d501      	bpl.n	583e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    583a:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    583e:	9900      	ldr	r1, [sp, #0]
    5840:	2900      	cmp	r1, #0
    5842:	d179      	bne.n	5938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5844:	78a9      	ldrb	r1, [r5, #2]
    5846:	0649      	lsls	r1, r1, #25
    5848:	d502      	bpl.n	5850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    584a:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    584e:	e004      	b.n	585a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    5850:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5854:	1c49      	adds	r1, r1, #1
    5856:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    585a:	4650      	mov	r0, sl
    585c:	f7ff fdae 	bl	53bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    5860:	ea40 000a 	orr.w	r0, r0, sl
    5864:	4682      	mov	sl, r0
    5866:	f7ff fd41 	bl	52ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    586a:	f8d8 6004 	ldr.w	r6, [r8, #4]
    586e:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    5872:	1c40      	adds	r0, r0, #1
    5874:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    5878:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    587c:	b128      	cbz	r0, 588a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    587e:	f7fc f965 	bl	1b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    5882:	b1b0      	cbz	r0, 58b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5884:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5888:	e013      	b.n	58b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    588a:	f7fc f83d 	bl	1908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    588e:	b108      	cbz	r0, 5894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    5890:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5894:	f7fc f832 	bl	18fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    5898:	b158      	cbz	r0, 58b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    589a:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    589e:	1c40      	adds	r0, r0, #1
    58a0:	b2c0      	uxtb	r0, r0
    58a2:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    58a6:	2802      	cmp	r0, #2
    58a8:	d903      	bls.n	58b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    58aa:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    58ae:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    58b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    58b6:	4646      	mov	r6, r8
    58b8:	2301      	movs	r3, #1
    58ba:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    58be:	2100      	movs	r1, #0
    58c0:	3080      	adds	r0, #128	; 0x80
    58c2:	f007 fef9 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58c6:	b920      	cbnz	r0, 58d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    58c8:	6870      	ldr	r0, [r6, #4]
    58ca:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    58ce:	280b      	cmp	r0, #11
    58d0:	d15f      	bne.n	5992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    58d2:	6870      	ldr	r0, [r6, #4]
    58d4:	2301      	movs	r3, #1
    58d6:	2100      	movs	r1, #0
    58d8:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    58dc:	3080      	adds	r0, #128	; 0x80
    58de:	f007 feeb 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58e2:	b350      	cbz	r0, 593a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    58e4:	6870      	ldr	r0, [r6, #4]
    58e6:	2301      	movs	r3, #1
    58e8:	2100      	movs	r1, #0
    58ea:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    58ee:	3080      	adds	r0, #128	; 0x80
    58f0:	f007 fee2 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58f4:	b308      	cbz	r0, 593a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    58f6:	6870      	ldr	r0, [r6, #4]
    58f8:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    58fc:	2902      	cmp	r1, #2
    58fe:	d148      	bne.n	5992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5900:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    5904:	b9c8      	cbnz	r0, 593a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5906:	4638      	mov	r0, r7
    5908:	f007 f9f7 	bl	ccfa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    590c:	b1a8      	cbz	r0, 593a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    590e:	6870      	ldr	r0, [r6, #4]
    5910:	3080      	adds	r0, #128	; 0x80
    5912:	f009 fb5f 	bl	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5916:	b980      	cbnz	r0, 593a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5918:	6871      	ldr	r1, [r6, #4]
    591a:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    591e:	2801      	cmp	r0, #1
    5920:	d937      	bls.n	5992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5922:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    5926:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    592a:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    592e:	1e93      	subs	r3, r2, #2
    5930:	4298      	cmp	r0, r3
    5932:	db03      	blt.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    5934:	2001      	movs	r0, #1
    5936:	e004      	b.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    5938:	e01c      	b.n	5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    593a:	e02a      	b.n	5992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    593c:	1a10      	subs	r0, r2, r0
    593e:	1e40      	subs	r0, r0, #1
    5940:	b280      	uxth	r0, r0
    5942:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    5946:	88aa      	ldrh	r2, [r5, #4]
    5948:	4293      	cmp	r3, r2
    594a:	d301      	bcc.n	5950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    594c:	2201      	movs	r2, #1
    594e:	e002      	b.n	5956 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    5950:	1ad2      	subs	r2, r2, r3
    5952:	1c52      	adds	r2, r2, #1
    5954:	b292      	uxth	r2, r2
    5956:	4290      	cmp	r0, r2
    5958:	d900      	bls.n	595c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    595a:	4610      	mov	r0, r2
    595c:	2801      	cmp	r0, #1
    595e:	d101      	bne.n	5964 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    5960:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    5964:	6871      	ldr	r1, [r6, #4]
    5966:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    596a:	4410      	add	r0, r2
    596c:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    5970:	f000 ff8e 	bl	6890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    5974:	78a8      	ldrb	r0, [r5, #2]
    5976:	4652      	mov	r2, sl
    5978:	f3c0 1180 	ubfx	r1, r0, #6, #1
    597c:	9800      	ldr	r0, [sp, #0]
    597e:	f000 fe81 	bl	6684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    5982:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5986:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    598a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    598e:	f7fb befd 	b.w	178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5992:	2001      	movs	r0, #1
    5994:	6871      	ldr	r1, [r6, #4]
    5996:	e7e3      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    5998:	20000124 	.word	0x20000124
    599c:	0000e313 	.word	0x0000e313
    59a0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    59a2:	4c68      	ldr	r4, [pc, #416]	; (5b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    59a4:	2301      	movs	r3, #1
    59a6:	2100      	movs	r1, #0
    59a8:	6860      	ldr	r0, [r4, #4]
    59aa:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    59ae:	3080      	adds	r0, #128	; 0x80
    59b0:	f007 fe82 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    59b4:	2800      	cmp	r0, #0
    59b6:	d07a      	beq.n	5aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    59b8:	6860      	ldr	r0, [r4, #4]
    59ba:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    59be:	2500      	movs	r5, #0
    59c0:	b139      	cbz	r1, 59d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    59c2:	2100      	movs	r1, #0
    59c4:	200e      	movs	r0, #14
    59c6:	f000 f8bf 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    59ca:	6860      	ldr	r0, [r4, #4]
    59cc:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    59d0:	e0b5      	b.n	5b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    59d2:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    59d6:	b119      	cbz	r1, 59e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    59d8:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    59dc:	0789      	lsls	r1, r1, #30
    59de:	d016      	beq.n	5a0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    59e0:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    59e4:	f88d 1004 	strb.w	r1, [sp, #4]
    59e8:	9901      	ldr	r1, [sp, #4]
    59ea:	9101      	str	r1, [sp, #4]
    59ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
    59f0:	b141      	cbz	r1, 5a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    59f2:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    59f6:	f88d 1000 	strb.w	r1, [sp]
    59fa:	9900      	ldr	r1, [sp, #0]
    59fc:	9100      	str	r1, [sp, #0]
    59fe:	f89d 1000 	ldrb.w	r1, [sp]
    5a02:	b189      	cbz	r1, 5a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    5a04:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5a08:	2901      	cmp	r1, #1
    5a0a:	d030      	beq.n	5a6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    5a0c:	e040      	b.n	5a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5a0e:	2100      	movs	r1, #0
    5a10:	200c      	movs	r0, #12
    5a12:	f000 f899 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5a16:	6860      	ldr	r0, [r4, #4]
    5a18:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    5a1c:	f041 0101 	orr.w	r1, r1, #1
    5a20:	7001      	strb	r1, [r0, #0]
    5a22:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    5a26:	e08a      	b.n	5b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5a28:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5a2c:	2925      	cmp	r1, #37	; 0x25
    5a2e:	d01c      	beq.n	5a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5a30:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5a34:	2925      	cmp	r1, #37	; 0x25
    5a36:	d018      	beq.n	5a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5a38:	f05f 0300 	movs.w	r3, #0
    5a3c:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5a40:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5a44:	f008 fa0a 	bl	de5c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5a48:	6860      	ldr	r0, [r4, #4]
    5a4a:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    5a4e:	2100      	movs	r1, #0
    5a50:	2014      	movs	r0, #20
    5a52:	f000 f879 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5a56:	6861      	ldr	r1, [r4, #4]
    5a58:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5a5c:	8bc2      	ldrh	r2, [r0, #30]
    5a5e:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5a62:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5a64:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5a68:	e069      	b.n	5b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5a6a:	2301      	movs	r3, #1
    5a6c:	e7e6      	b.n	5a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    5a6e:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    5a72:	f88d 1000 	strb.w	r1, [sp]
    5a76:	9900      	ldr	r1, [sp, #0]
    5a78:	9100      	str	r1, [sp, #0]
    5a7a:	f89d 1000 	ldrb.w	r1, [sp]
    5a7e:	b939      	cbnz	r1, 5a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5a80:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a84:	2301      	movs	r3, #1
    5a86:	210b      	movs	r1, #11
    5a88:	3080      	adds	r0, #128	; 0x80
    5a8a:	f007 fe15 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a8e:	b178      	cbz	r0, 5ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    5a90:	6860      	ldr	r0, [r4, #4]
    5a92:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    5a96:	f88d 1000 	strb.w	r1, [sp]
    5a9a:	9900      	ldr	r1, [sp, #0]
    5a9c:	9100      	str	r1, [sp, #0]
    5a9e:	f89d 1000 	ldrb.w	r1, [sp]
    5aa2:	b3b9      	cbz	r1, 5b14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    5aa4:	2100      	movs	r1, #0
    5aa6:	2023      	movs	r0, #35	; 0x23
    5aa8:	f000 f84e 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5aac:	e047      	b.n	5b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5aae:	e030      	b.n	5b12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5ab0:	6860      	ldr	r0, [r4, #4]
    5ab2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5ab6:	f009 fa95 	bl	efe4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5aba:	4605      	mov	r5, r0
    5abc:	6860      	ldr	r0, [r4, #4]
    5abe:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5ac2:	f009 fa8f 	bl	efe4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5ac6:	4606      	mov	r6, r0
    5ac8:	6860      	ldr	r0, [r4, #4]
    5aca:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    5ace:	4628      	mov	r0, r5
    5ad0:	f009 fa93 	bl	effa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5ad4:	b150      	cbz	r0, 5aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5ad6:	6860      	ldr	r0, [r4, #4]
    5ad8:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    5adc:	4630      	mov	r0, r6
    5ade:	f009 fa8c 	bl	effa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5ae2:	b118      	cbz	r0, 5aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5ae4:	2000      	movs	r0, #0
    5ae6:	f000 f943 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5aea:	e011      	b.n	5b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5aec:	6860      	ldr	r0, [r4, #4]
    5aee:	2301      	movs	r3, #1
    5af0:	2103      	movs	r1, #3
    5af2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5af6:	3080      	adds	r0, #128	; 0x80
    5af8:	f007 fdde 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5afc:	b940      	cbnz	r0, 5b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5afe:	6860      	ldr	r0, [r4, #4]
    5b00:	2301      	movs	r3, #1
    5b02:	2102      	movs	r1, #2
    5b04:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5b08:	3080      	adds	r0, #128	; 0x80
    5b0a:	f007 fdd5 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b0e:	b110      	cbz	r0, 5b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    5b10:	2000      	movs	r0, #0
    5b12:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5b14:	e002      	b.n	5b1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    5b16:	2100      	movs	r1, #0
    5b18:	2016      	movs	r0, #22
    5b1a:	e7c5      	b.n	5aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    5b1c:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    5b20:	f88d 0000 	strb.w	r0, [sp]
    5b24:	9800      	ldr	r0, [sp, #0]
    5b26:	9000      	str	r0, [sp, #0]
    5b28:	f89d 0000 	ldrb.w	r0, [sp]
    5b2c:	2800      	cmp	r0, #0
    5b2e:	d0f0      	beq.n	5b12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5b30:	2100      	movs	r1, #0
    5b32:	2025      	movs	r0, #37	; 0x25
    5b34:	f000 f808 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5b38:	6860      	ldr	r0, [r4, #4]
    5b3a:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    5b3e:	2001      	movs	r0, #1
    5b40:	e7e7      	b.n	5b12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5b42:	0000      	.short	0x0000
    5b44:	20000124 	.word	0x20000124
    5b48:	b570      	push	{r4, r5, r6, lr}
    5b4a:	4c0d      	ldr	r4, [pc, #52]	; (5b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    5b4c:	4606      	mov	r6, r0
    5b4e:	460d      	mov	r5, r1
    5b50:	6860      	ldr	r0, [r4, #4]
    5b52:	3080      	adds	r0, #128	; 0x80
    5b54:	f009 fa3e 	bl	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5b58:	b120      	cbz	r0, 5b64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    5b5a:	f640 31b3 	movw	r1, #2995	; 0xbb3
    5b5e:	2031      	movs	r0, #49	; 0x31
    5b60:	f7fa ff26 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b64:	6862      	ldr	r2, [r4, #4]
    5b66:	2000      	movs	r0, #0
    5b68:	2d01      	cmp	r5, #1
    5b6a:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    5b6e:	d004      	beq.n	5b7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    5b70:	f822 0fd2 	strh.w	r0, [r2, #210]!
    5b74:	2001      	movs	r0, #1
    5b76:	7110      	strb	r0, [r2, #4]
    5b78:	bd70      	pop	{r4, r5, r6, pc}
    5b7a:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    5b7e:	bd70      	pop	{r4, r5, r6, pc}
    5b80:	20000124 	.word	0x20000124
    5b84:	b538      	push	{r3, r4, r5, lr}
    5b86:	4c1f      	ldr	r4, [pc, #124]	; (5c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5b88:	2500      	movs	r5, #0
    5b8a:	6860      	ldr	r0, [r4, #4]
    5b8c:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    5b90:	2901      	cmp	r1, #1
    5b92:	d00a      	beq.n	5baa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    5b94:	2902      	cmp	r1, #2
    5b96:	d133      	bne.n	5c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5b98:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    5b9c:	b1d9      	cbz	r1, 5bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    5b9e:	2106      	movs	r1, #6
    5ba0:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5ba4:	2101      	movs	r1, #1
    5ba6:	2002      	movs	r0, #2
    5ba8:	e025      	b.n	5bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5baa:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    5bae:	f88d 1000 	strb.w	r1, [sp]
    5bb2:	9900      	ldr	r1, [sp, #0]
    5bb4:	9100      	str	r1, [sp, #0]
    5bb6:	f89d 1000 	ldrb.w	r1, [sp]
    5bba:	2900      	cmp	r1, #0
    5bbc:	d120      	bne.n	5c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5bbe:	f500 7384 	add.w	r3, r0, #264	; 0x108
    5bc2:	f500 710e 	add.w	r1, r0, #568	; 0x238
    5bc6:	2200      	movs	r2, #0
    5bc8:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    5bcc:	f007 fd3f 	bl	d64e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    5bd0:	2101      	movs	r1, #1
    5bd2:	2005      	movs	r0, #5
    5bd4:	e00f      	b.n	5bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5bd6:	2103      	movs	r1, #3
    5bd8:	2206      	movs	r2, #6
    5bda:	480a      	ldr	r0, [pc, #40]	; (5c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5bdc:	f008 fa63 	bl	e0a6 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    5be0:	6860      	ldr	r0, [r4, #4]
    5be2:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    5be6:	0880      	lsrs	r0, r0, #2
    5be8:	f010 0f01 	tst.w	r0, #1
    5bec:	d001      	beq.n	5bf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    5bee:	2011      	movs	r0, #17
    5bf0:	e000      	b.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    5bf2:	200d      	movs	r0, #13
    5bf4:	2101      	movs	r1, #1
    5bf6:	f7ff ffa7 	bl	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5bfa:	6860      	ldr	r0, [r4, #4]
    5bfc:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    5c00:	bd38      	pop	{r3, r4, r5, pc}
    5c02:	0000      	.short	0x0000
    5c04:	20000124 	.word	0x20000124
    5c08:	b570      	push	{r4, r5, r6, lr}
    5c0a:	4b2b      	ldr	r3, [pc, #172]	; (5cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    5c0c:	4602      	mov	r2, r0
    5c0e:	8858      	ldrh	r0, [r3, #2]
    5c10:	4310      	orrs	r0, r2
    5c12:	8058      	strh	r0, [r3, #2]
    5c14:	f103 0010 	add.w	r0, r3, #16
    5c18:	2a40      	cmp	r2, #64	; 0x40
    5c1a:	6840      	ldr	r0, [r0, #4]
    5c1c:	d00d      	beq.n	5c3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    5c1e:	0796      	lsls	r6, r2, #30
    5c20:	f04f 0500 	mov.w	r5, #0
    5c24:	f04f 0401 	mov.w	r4, #1
    5c28:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    5c2c:	d50c      	bpl.n	5c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    5c2e:	b14e      	cbz	r6, 5c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    5c30:	f640 51f6 	movw	r1, #3574	; 0xdf6
    5c34:	2031      	movs	r0, #49	; 0x31
    5c36:	f7fa febb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c3e:	2104      	movs	r1, #4
    5c40:	f7fe bb9e 	b.w	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5c44:	6099      	str	r1, [r3, #8]
    5c46:	e01c      	b.n	5c82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    5c48:	b1c6      	cbz	r6, 5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c4a:	60d9      	str	r1, [r3, #12]
    5c4c:	78c9      	ldrb	r1, [r1, #3]
    5c4e:	2906      	cmp	r1, #6
    5c50:	d002      	beq.n	5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    5c52:	290b      	cmp	r1, #11
    5c54:	d112      	bne.n	5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c56:	e009      	b.n	5c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    5c58:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c5c:	2918      	cmp	r1, #24
    5c5e:	d10d      	bne.n	5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c60:	2100      	movs	r1, #0
    5c62:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    5c66:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    5c6a:	e007      	b.n	5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c6c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c70:	2912      	cmp	r1, #18
    5c72:	d103      	bne.n	5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c74:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    5c78:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    5c7c:	0791      	lsls	r1, r2, #30
    5c7e:	d516      	bpl.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c80:	6899      	ldr	r1, [r3, #8]
    5c82:	78c9      	ldrb	r1, [r1, #3]
    5c84:	2905      	cmp	r1, #5
    5c86:	d002      	beq.n	5c8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    5c88:	290b      	cmp	r1, #11
    5c8a:	d110      	bne.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c8c:	e009      	b.n	5ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    5c8e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c92:	2916      	cmp	r1, #22
    5c94:	d10b      	bne.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c96:	2100      	movs	r1, #0
    5c98:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    5c9c:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    5ca0:	e005      	b.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ca2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5ca6:	2911      	cmp	r1, #17
    5ca8:	d101      	bne.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5caa:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    5cae:	0690      	lsls	r0, r2, #26
    5cb0:	d501      	bpl.n	5cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    5cb2:	2008      	movs	r0, #8
    5cb4:	7058      	strb	r0, [r3, #1]
    5cb6:	bd70      	pop	{r4, r5, r6, pc}
    5cb8:	20000114 	.word	0x20000114
    5cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cc0:	4c29      	ldr	r4, [pc, #164]	; (5d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    5cc2:	2501      	movs	r5, #1
    5cc4:	6862      	ldr	r2, [r4, #4]
    5cc6:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    5cca:	b109      	cbz	r1, 5cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5ccc:	2701      	movs	r7, #1
    5cce:	e000      	b.n	5cd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    5cd0:	2700      	movs	r7, #0
    5cd2:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    5cd6:	b108      	cbz	r0, 5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    5cd8:	2601      	movs	r6, #1
    5cda:	e000      	b.n	5cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    5cdc:	2600      	movs	r6, #0
    5cde:	b90f      	cbnz	r7, 5ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    5ce0:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    5ce4:	b90e      	cbnz	r6, 5cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    5ce6:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    5cea:	f102 0362 	add.w	r3, r2, #98	; 0x62
    5cee:	7219      	strb	r1, [r3, #8]
    5cf0:	7258      	strb	r0, [r3, #9]
    5cf2:	20ff      	movs	r0, #255	; 0xff
    5cf4:	7298      	strb	r0, [r3, #10]
    5cf6:	481d      	ldr	r0, [pc, #116]	; (5d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    5cf8:	6803      	ldr	r3, [r0, #0]
    5cfa:	b10b      	cbz	r3, 5d00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    5cfc:	4610      	mov	r0, r2
    5cfe:	4798      	blx	r3
    5d00:	6860      	ldr	r0, [r4, #4]
    5d02:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    5d06:	2801      	cmp	r0, #1
    5d08:	d001      	beq.n	5d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5d0a:	b907      	cbnz	r7, 5d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5d0c:	b116      	cbz	r6, 5d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    5d0e:	2000      	movs	r0, #0
    5d10:	f000 f82e 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5d14:	6860      	ldr	r0, [r4, #4]
    5d16:	302c      	adds	r0, #44	; 0x2c
    5d18:	f008 f90d 	bl	df36 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5d1c:	4606      	mov	r6, r0
    5d1e:	6860      	ldr	r0, [r4, #4]
    5d20:	f008 f8b7 	bl	de92 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5d24:	b130      	cbz	r0, 5d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    5d26:	6861      	ldr	r1, [r4, #4]
    5d28:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    5d2c:	f831 0b2c 	ldrh.w	r0, [r1], #44
    5d30:	f7fc ff50 	bl	2bd4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5d34:	2105      	movs	r1, #5
    5d36:	6860      	ldr	r0, [r4, #4]
    5d38:	f7fe fb22 	bl	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5d3c:	6860      	ldr	r0, [r4, #4]
    5d3e:	302c      	adds	r0, #44	; 0x2c
    5d40:	f008 f8f9 	bl	df36 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5d44:	4604      	mov	r4, r0
    5d46:	42a6      	cmp	r6, r4
    5d48:	d20a      	bcs.n	5d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5d4a:	f003 fdcd 	bl	98e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    5d4e:	4601      	mov	r1, r0
    5d50:	1ba0      	subs	r0, r4, r6
    5d52:	2867      	cmp	r0, #103	; 0x67
    5d54:	d200      	bcs.n	5d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    5d56:	2067      	movs	r0, #103	; 0x67
    5d58:	f003 fc8c 	bl	9674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5d5c:	b100      	cbz	r0, 5d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5d5e:	2500      	movs	r5, #0
    5d60:	4628      	mov	r0, r5
    5d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d66:	0000      	.short	0x0000
    5d68:	20000124 	.word	0x20000124
    5d6c:	2000028c 	.word	0x2000028c
    5d70:	4601      	mov	r1, r0
    5d72:	4801      	ldr	r0, [pc, #4]	; (5d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    5d74:	f001 ba96 	b.w	72a4 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    5d78:	20000124 	.word	0x20000124
    5d7c:	b570      	push	{r4, r5, r6, lr}
    5d7e:	4d0f      	ldr	r5, [pc, #60]	; (5dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    5d80:	686c      	ldr	r4, [r5, #4]
    5d82:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    5d86:	2921      	cmp	r1, #33	; 0x21
    5d88:	d002      	beq.n	5d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5d8a:	292e      	cmp	r1, #46	; 0x2e
    5d8c:	d003      	beq.n	5d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    5d8e:	e011      	b.n	5db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    5d90:	f7ff ffee 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5d94:	e008      	b.n	5da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    5d96:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    5d9a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    5d9e:	2301      	movs	r3, #1
    5da0:	210b      	movs	r1, #11
    5da2:	f007 fc89 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5da6:	b138      	cbz	r0, 5db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    5da8:	6869      	ldr	r1, [r5, #4]
    5daa:	2000      	movs	r0, #0
    5dac:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5db0:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    5db4:	2000      	movs	r0, #0
    5db6:	bd70      	pop	{r4, r5, r6, pc}
    5db8:	202a      	movs	r0, #42	; 0x2a
    5dba:	e7e9      	b.n	5d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5dbc:	20000124 	.word	0x20000124
    5dc0:	b570      	push	{r4, r5, r6, lr}
    5dc2:	4604      	mov	r4, r0
    5dc4:	6840      	ldr	r0, [r0, #4]
    5dc6:	2301      	movs	r3, #1
    5dc8:	2100      	movs	r1, #0
    5dca:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5dce:	3080      	adds	r0, #128	; 0x80
    5dd0:	f007 fc72 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5dd4:	b1b8      	cbz	r0, 5e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    5dd6:	4d13      	ldr	r5, [pc, #76]	; (5e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    5dd8:	68e8      	ldr	r0, [r5, #12]
    5dda:	f007 fee0 	bl	db9e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    5dde:	6861      	ldr	r1, [r4, #4]
    5de0:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    5de4:	6861      	ldr	r1, [r4, #4]
    5de6:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    5dea:	f009 f914 	bl	f016 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    5dee:	b160      	cbz	r0, 5e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    5df0:	6861      	ldr	r1, [r4, #4]
    5df2:	2028      	movs	r0, #40	; 0x28
    5df4:	2202      	movs	r2, #2
    5df6:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    5dfa:	6860      	ldr	r0, [r4, #4]
    5dfc:	490a      	ldr	r1, [pc, #40]	; (5e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    5dfe:	30b4      	adds	r0, #180	; 0xb4
    5e00:	f008 f802 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5e04:	e00b      	b.n	5e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    5e06:	2001      	movs	r0, #1
    5e08:	bd70      	pop	{r4, r5, r6, pc}
    5e0a:	6861      	ldr	r1, [r4, #4]
    5e0c:	68e8      	ldr	r0, [r5, #12]
    5e0e:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    5e12:	f007 febf 	bl	db94 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    5e16:	6861      	ldr	r1, [r4, #4]
    5e18:	200a      	movs	r0, #10
    5e1a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5e1e:	2000      	movs	r0, #0
    5e20:	bd70      	pop	{r4, r5, r6, pc}
    5e22:	0000      	.short	0x0000
    5e24:	20000114 	.word	0x20000114
    5e28:	0000e0c5 	.word	0x0000e0c5
    5e2c:	b570      	push	{r4, r5, r6, lr}
    5e2e:	4604      	mov	r4, r0
    5e30:	6840      	ldr	r0, [r0, #4]
    5e32:	2301      	movs	r3, #1
    5e34:	2100      	movs	r1, #0
    5e36:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5e3a:	3080      	adds	r0, #128	; 0x80
    5e3c:	f007 fc3c 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5e40:	b1e0      	cbz	r0, 5e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    5e42:	4d28      	ldr	r5, [pc, #160]	; (5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    5e44:	2100      	movs	r1, #0
    5e46:	68e8      	ldr	r0, [r5, #12]
    5e48:	f007 feac 	bl	dba4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    5e4c:	b1c0      	cbz	r0, 5e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    5e4e:	68e8      	ldr	r0, [r5, #12]
    5e50:	6861      	ldr	r1, [r4, #4]
    5e52:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    5e56:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    5e5a:	6861      	ldr	r1, [r4, #4]
    5e5c:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    5e60:	f009 f8d9 	bl	f016 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    5e64:	b188      	cbz	r0, 5e8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    5e66:	6861      	ldr	r1, [r4, #4]
    5e68:	2028      	movs	r0, #40	; 0x28
    5e6a:	2202      	movs	r2, #2
    5e6c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    5e70:	6860      	ldr	r0, [r4, #4]
    5e72:	491d      	ldr	r1, [pc, #116]	; (5ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    5e74:	30b4      	adds	r0, #180	; 0xb4
    5e76:	f007 ffc7 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5e7a:	e030      	b.n	5ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    5e7c:	2001      	movs	r0, #1
    5e7e:	bd70      	pop	{r4, r5, r6, pc}
    5e80:	4620      	mov	r0, r4
    5e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e86:	f000 b88d 	b.w	5fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5e8a:	68e8      	ldr	r0, [r5, #12]
    5e8c:	f007 feb4 	bl	dbf8 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    5e90:	f007 fc08 	bl	d6a4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    5e94:	4606      	mov	r6, r0
    5e96:	6860      	ldr	r0, [r4, #4]
    5e98:	4631      	mov	r1, r6
    5e9a:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    5e9e:	68e8      	ldr	r0, [r5, #12]
    5ea0:	7900      	ldrb	r0, [r0, #4]
    5ea2:	f007 fd6c 	bl	d97e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    5ea6:	6861      	ldr	r1, [r4, #4]
    5ea8:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    5eac:	68e8      	ldr	r0, [r5, #12]
    5eae:	4631      	mov	r1, r6
    5eb0:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    5eb4:	f007 fd5f 	bl	d976 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    5eb8:	6861      	ldr	r1, [r4, #4]
    5eba:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    5ebe:	68e8      	ldr	r0, [r5, #12]
    5ec0:	f007 fe9d 	bl	dbfe <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    5ec4:	6861      	ldr	r1, [r4, #4]
    5ec6:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    5eca:	68e8      	ldr	r0, [r5, #12]
    5ecc:	f007 fe9a 	bl	dc04 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    5ed0:	6861      	ldr	r1, [r4, #4]
    5ed2:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    5ed6:	6861      	ldr	r1, [r4, #4]
    5ed8:	200d      	movs	r0, #13
    5eda:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5ede:	2000      	movs	r0, #0
    5ee0:	bd70      	pop	{r4, r5, r6, pc}
    5ee2:	0000      	.short	0x0000
    5ee4:	20000114 	.word	0x20000114
    5ee8:	0000e0c5 	.word	0x0000e0c5
    5eec:	b570      	push	{r4, r5, r6, lr}
    5eee:	4604      	mov	r4, r0
    5ef0:	6840      	ldr	r0, [r0, #4]
    5ef2:	2301      	movs	r3, #1
    5ef4:	2100      	movs	r1, #0
    5ef6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5efa:	3080      	adds	r0, #128	; 0x80
    5efc:	f007 fbdc 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f00:	b970      	cbnz	r0, 5f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    5f02:	6860      	ldr	r0, [r4, #4]
    5f04:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5f08:	2a13      	cmp	r2, #19
    5f0a:	d009      	beq.n	5f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    5f0c:	2301      	movs	r3, #1
    5f0e:	2105      	movs	r1, #5
    5f10:	3080      	adds	r0, #128	; 0x80
    5f12:	f007 fbd1 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f16:	b108      	cbz	r0, 5f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    5f18:	2008      	movs	r0, #8
    5f1a:	bd70      	pop	{r4, r5, r6, pc}
    5f1c:	2001      	movs	r0, #1
    5f1e:	bd70      	pop	{r4, r5, r6, pc}
    5f20:	6860      	ldr	r0, [r4, #4]
    5f22:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    5f26:	b910      	cbnz	r0, 5f2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    5f28:	4816      	ldr	r0, [pc, #88]	; (5f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    5f2a:	f008 f8a6 	bl	e07a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    5f2e:	4d15      	ldr	r5, [pc, #84]	; (5f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    5f30:	6861      	ldr	r1, [r4, #4]
    5f32:	3d10      	subs	r5, #16
    5f34:	f501 710e 	add.w	r1, r1, #568	; 0x238
    5f38:	68e8      	ldr	r0, [r5, #12]
    5f3a:	f007 fe7c 	bl	dc36 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    5f3e:	6861      	ldr	r1, [r4, #4]
    5f40:	68e8      	ldr	r0, [r5, #12]
    5f42:	f501 718c 	add.w	r1, r1, #280	; 0x118
    5f46:	f007 fe6d 	bl	dc24 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    5f4a:	6860      	ldr	r0, [r4, #4]
    5f4c:	8801      	ldrh	r1, [r0, #0]
    5f4e:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    5f52:	6861      	ldr	r1, [r4, #4]
    5f54:	68e8      	ldr	r0, [r5, #12]
    5f56:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    5f5a:	f007 fe67 	bl	dc2c <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    5f5e:	6861      	ldr	r1, [r4, #4]
    5f60:	68e8      	ldr	r0, [r5, #12]
    5f62:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    5f66:	f007 fe5a 	bl	dc1e <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    5f6a:	6860      	ldr	r0, [r4, #4]
    5f6c:	2202      	movs	r2, #2
    5f6e:	4906      	ldr	r1, [pc, #24]	; (5f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    5f70:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    5f74:	f007 ff48 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5f78:	6861      	ldr	r1, [r4, #4]
    5f7a:	2015      	movs	r0, #21
    5f7c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5f80:	2000      	movs	r0, #0
    5f82:	bd70      	pop	{r4, r5, r6, pc}
    5f84:	20000124 	.word	0x20000124
    5f88:	0000e269 	.word	0x0000e269
    5f8c:	4901      	ldr	r1, [pc, #4]	; (5f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    5f8e:	68c9      	ldr	r1, [r1, #12]
    5f90:	f7fc bf28 	b.w	2de4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    5f94:	20000114 	.word	0x20000114
    5f98:	4901      	ldr	r1, [pc, #4]	; (5fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    5f9a:	68c9      	ldr	r1, [r1, #12]
    5f9c:	f7fc bf58 	b.w	2e50 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    5fa0:	20000114 	.word	0x20000114
    5fa4:	b510      	push	{r4, lr}
    5fa6:	6842      	ldr	r2, [r0, #4]
    5fa8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    5fac:	070b      	lsls	r3, r1, #28
    5fae:	d501      	bpl.n	5fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    5fb0:	2001      	movs	r0, #1
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	f041 0108 	orr.w	r1, r1, #8
    5fb8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    5fbc:	4905      	ldr	r1, [pc, #20]	; (5fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    5fbe:	6840      	ldr	r0, [r0, #4]
    5fc0:	68c9      	ldr	r1, [r1, #12]
    5fc2:	78c9      	ldrb	r1, [r1, #3]
    5fc4:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    5fc8:	4802      	ldr	r0, [pc, #8]	; (5fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    5fca:	3010      	adds	r0, #16
    5fcc:	f008 f855 	bl	e07a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    5fd0:	2000      	movs	r0, #0
    5fd2:	bd10      	pop	{r4, pc}
    5fd4:	20000114 	.word	0x20000114
    5fd8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    5fdc:	4605      	mov	r5, r0
    5fde:	6840      	ldr	r0, [r0, #4]
    5fe0:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    5fe4:	f010 0f30 	tst.w	r0, #48	; 0x30
    5fe8:	d002      	beq.n	5ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    5fea:	2001      	movs	r0, #1
    5fec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    5ff0:	4c32      	ldr	r4, [pc, #200]	; (60bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    5ff2:	68e0      	ldr	r0, [r4, #12]
    5ff4:	f007 fe39 	bl	dc6a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    5ff8:	b330      	cbz	r0, 6048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    5ffa:	68e0      	ldr	r0, [r4, #12]
    5ffc:	f007 fe2f 	bl	dc5e <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6000:	4680      	mov	r8, r0
    6002:	68e0      	ldr	r0, [r4, #12]
    6004:	f007 fe2f 	bl	dc66 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6008:	4607      	mov	r7, r0
    600a:	68e0      	ldr	r0, [r4, #12]
    600c:	f007 fe25 	bl	dc5a <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6010:	4606      	mov	r6, r0
    6012:	68e0      	ldr	r0, [r4, #12]
    6014:	f007 fe25 	bl	dc62 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6018:	4601      	mov	r1, r0
    601a:	f8cd 8000 	str.w	r8, [sp]
    601e:	6868      	ldr	r0, [r5, #4]
    6020:	463b      	mov	r3, r7
    6022:	4632      	mov	r2, r6
    6024:	302c      	adds	r0, #44	; 0x2c
    6026:	f007 ff90 	bl	df4a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    602a:	78a0      	ldrb	r0, [r4, #2]
    602c:	0781      	lsls	r1, r0, #30
    602e:	f04f 0001 	mov.w	r0, #1
    6032:	d503      	bpl.n	603c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    6034:	68a1      	ldr	r1, [r4, #8]
    6036:	78c9      	ldrb	r1, [r1, #3]
    6038:	2914      	cmp	r1, #20
    603a:	d00a      	beq.n	6052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    603c:	6869      	ldr	r1, [r5, #4]
    603e:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    6042:	291d      	cmp	r1, #29
    6044:	d005      	beq.n	6052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6046:	e007      	b.n	6058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    6048:	4628      	mov	r0, r5
    604a:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    604e:	f7ff bfa9 	b.w	5fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6052:	6869      	ldr	r1, [r5, #4]
    6054:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    6058:	6868      	ldr	r0, [r5, #4]
    605a:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    605e:	2901      	cmp	r1, #1
    6060:	d011      	beq.n	6086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6062:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6066:	f88d 1004 	strb.w	r1, [sp, #4]
    606a:	9901      	ldr	r1, [sp, #4]
    606c:	9101      	str	r1, [sp, #4]
    606e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6072:	b941      	cbnz	r1, 6086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6074:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6078:	f88d 1000 	strb.w	r1, [sp]
    607c:	9900      	ldr	r1, [sp, #0]
    607e:	9100      	str	r1, [sp, #0]
    6080:	f89d 1000 	ldrb.w	r1, [sp]
    6084:	b151      	cbz	r1, 609c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    6086:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    608a:	f041 0110 	orr.w	r1, r1, #16
    608e:	6001      	str	r1, [r0, #0]
    6090:	480a      	ldr	r0, [pc, #40]	; (60bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6092:	3010      	adds	r0, #16
    6094:	f007 fff1 	bl	e07a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6098:	2000      	movs	r0, #0
    609a:	e7a7      	b.n	5fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    609c:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    60a0:	f041 0120 	orr.w	r1, r1, #32
    60a4:	6001      	str	r1, [r0, #0]
    60a6:	4805      	ldr	r0, [pc, #20]	; (60bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    60a8:	3010      	adds	r0, #16
    60aa:	6843      	ldr	r3, [r0, #4]
    60ac:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    60b0:	8818      	ldrh	r0, [r3, #0]
    60b2:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    60b6:	f7fc fdb5 	bl	2c24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    60ba:	e7e9      	b.n	6090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    60bc:	20000114 	.word	0x20000114
    60c0:	4901      	ldr	r1, [pc, #4]	; (60c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    60c2:	68c9      	ldr	r1, [r1, #12]
    60c4:	f008 b868 	b.w	e198 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    60c8:	20000114 	.word	0x20000114
    60cc:	b510      	push	{r4, lr}
    60ce:	4604      	mov	r4, r0
    60d0:	6840      	ldr	r0, [r0, #4]
    60d2:	2301      	movs	r3, #1
    60d4:	2100      	movs	r1, #0
    60d6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    60da:	3080      	adds	r0, #128	; 0x80
    60dc:	f007 faec 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60e0:	2800      	cmp	r0, #0
    60e2:	6860      	ldr	r0, [r4, #4]
    60e4:	d00c      	beq.n	6100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    60e6:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    60ea:	2800      	cmp	r0, #0
    60ec:	d007      	beq.n	60fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    60ee:	480a      	ldr	r0, [pc, #40]	; (6118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    60f0:	f007 ffc3 	bl	e07a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    60f4:	6861      	ldr	r1, [r4, #4]
    60f6:	2011      	movs	r0, #17
    60f8:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    60fc:	2000      	movs	r0, #0
    60fe:	bd10      	pop	{r4, pc}
    6100:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6104:	2301      	movs	r3, #1
    6106:	2105      	movs	r1, #5
    6108:	3080      	adds	r0, #128	; 0x80
    610a:	f007 fad5 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    610e:	b108      	cbz	r0, 6114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    6110:	2008      	movs	r0, #8
    6112:	bd10      	pop	{r4, pc}
    6114:	2001      	movs	r0, #1
    6116:	bd10      	pop	{r4, pc}
    6118:	20000124 	.word	0x20000124
    611c:	b538      	push	{r3, r4, r5, lr}
    611e:	4604      	mov	r4, r0
    6120:	6840      	ldr	r0, [r0, #4]
    6122:	2301      	movs	r3, #1
    6124:	210b      	movs	r1, #11
    6126:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    612a:	3080      	adds	r0, #128	; 0x80
    612c:	f007 fac4 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6130:	bb60      	cbnz	r0, 618c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    6132:	6860      	ldr	r0, [r4, #4]
    6134:	2301      	movs	r3, #1
    6136:	2100      	movs	r1, #0
    6138:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    613c:	3080      	adds	r0, #128	; 0x80
    613e:	f007 fabb 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6142:	b308      	cbz	r0, 6188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    6144:	6860      	ldr	r0, [r4, #4]
    6146:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    614a:	2825      	cmp	r0, #37	; 0x25
    614c:	d01e      	beq.n	618c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    614e:	4d2a      	ldr	r5, [pc, #168]	; (61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    6150:	68e8      	ldr	r0, [r5, #12]
    6152:	f007 fd9c 	bl	dc8e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    6156:	b1d8      	cbz	r0, 6190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    6158:	68e8      	ldr	r0, [r5, #12]
    615a:	6862      	ldr	r2, [r4, #4]
    615c:	7941      	ldrb	r1, [r0, #5]
    615e:	f001 0107 	and.w	r1, r1, #7
    6162:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    6166:	7900      	ldrb	r0, [r0, #4]
    6168:	f000 0207 	and.w	r2, r0, #7
    616c:	6860      	ldr	r0, [r4, #4]
    616e:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    6172:	6860      	ldr	r0, [r4, #4]
    6174:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6178:	f88d 1000 	strb.w	r1, [sp]
    617c:	9900      	ldr	r1, [sp, #0]
    617e:	9100      	str	r1, [sp, #0]
    6180:	f89d 1000 	ldrb.w	r1, [sp]
    6184:	bb71      	cbnz	r1, 61e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6186:	e008      	b.n	619a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    6188:	2001      	movs	r0, #1
    618a:	bd38      	pop	{r3, r4, r5, pc}
    618c:	2020      	movs	r0, #32
    618e:	bd38      	pop	{r3, r4, r5, pc}
    6190:	4620      	mov	r0, r4
    6192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6196:	f7ff bf05 	b.w	5fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    619a:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    619e:	2901      	cmp	r1, #1
    61a0:	d020      	beq.n	61e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    61a2:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    61a6:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    61aa:	784d      	ldrb	r5, [r1, #1]
    61ac:	4295      	cmp	r5, r2
    61ae:	d106      	bne.n	61be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    61b0:	7809      	ldrb	r1, [r1, #0]
    61b2:	4299      	cmp	r1, r3
    61b4:	d103      	bne.n	61be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    61b6:	2102      	movs	r1, #2
    61b8:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    61bc:	e012      	b.n	61e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    61be:	480e      	ldr	r0, [pc, #56]	; (61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    61c0:	3010      	adds	r0, #16
    61c2:	6841      	ldr	r1, [r0, #4]
    61c4:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    61c8:	880a      	ldrh	r2, [r1, #0]
    61ca:	f820 2b02 	strh.w	r2, [r0], #2
    61ce:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    61d2:	f800 2b01 	strb.w	r2, [r0], #1
    61d6:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    61da:	f800 190d 	strb.w	r1, [r0], #-13
    61de:	4907      	ldr	r1, [pc, #28]	; (61fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    61e0:	f007 fe09 	bl	ddf6 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    61e4:	6861      	ldr	r1, [r4, #4]
    61e6:	2022      	movs	r0, #34	; 0x22
    61e8:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    61ec:	4802      	ldr	r0, [pc, #8]	; (61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    61ee:	3010      	adds	r0, #16
    61f0:	f007 ff43 	bl	e07a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    61f4:	2000      	movs	r0, #0
    61f6:	bd38      	pop	{r3, r4, r5, pc}
    61f8:	20000114 	.word	0x20000114
    61fc:	000072e5 	.word	0x000072e5
    6200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6204:	6845      	ldr	r5, [r0, #4]
    6206:	4604      	mov	r4, r0
    6208:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    620c:	2821      	cmp	r0, #33	; 0x21
    620e:	d008      	beq.n	6222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    6210:	f05f 0600 	movs.w	r6, #0
    6214:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6218:	2823      	cmp	r0, #35	; 0x23
    621a:	d004      	beq.n	6226 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    621c:	b35e      	cbz	r6, 6276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    621e:	359d      	adds	r5, #157	; 0x9d
    6220:	e002      	b.n	6228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    6222:	2601      	movs	r6, #1
    6224:	e7f6      	b.n	6214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    6226:	359e      	adds	r5, #158	; 0x9e
    6228:	f8df 8140 	ldr.w	r8, [pc, #320]	; 636c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    622c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6230:	f007 fd39 	bl	dca6 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6234:	2700      	movs	r7, #0
    6236:	b308      	cbz	r0, 627c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6238:	4631      	mov	r1, r6
    623a:	f8d8 000c 	ldr.w	r0, [r8, #12]
    623e:	f7fe ffb3 	bl	51a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    6242:	b1d8      	cbz	r0, 627c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6244:	466a      	mov	r2, sp
    6246:	4646      	mov	r6, r8
    6248:	6860      	ldr	r0, [r4, #4]
    624a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    624e:	f007 fb4c 	bl	d8ea <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    6252:	b388      	cbz	r0, 62b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    6254:	68f0      	ldr	r0, [r6, #12]
    6256:	f007 fd24 	bl	dca2 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    625a:	6861      	ldr	r1, [r4, #4]
    625c:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6260:	6861      	ldr	r1, [r4, #4]
    6262:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6266:	f008 fed6 	bl	f016 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    626a:	b3e8      	cbz	r0, 62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    626c:	6861      	ldr	r1, [r4, #4]
    626e:	2028      	movs	r0, #40	; 0x28
    6270:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6274:	e06e      	b.n	6354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6276:	2002      	movs	r0, #2
    6278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    627c:	6860      	ldr	r0, [r4, #4]
    627e:	f04f 0900 	mov.w	r9, #0
    6282:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6286:	2901      	cmp	r1, #1
    6288:	d017      	beq.n	62ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    628a:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    628e:	b306      	cbz	r6, 62d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    6290:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6294:	6861      	ldr	r1, [r4, #4]
    6296:	2201      	movs	r2, #1
    6298:	78c0      	ldrb	r0, [r0, #3]
    629a:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    629e:	4082      	lsls	r2, r0
    62a0:	6861      	ldr	r1, [r4, #4]
    62a2:	f3c2 6000 	ubfx	r0, r2, #24, #1
    62a6:	b160      	cbz	r0, 62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    62a8:	2009      	movs	r0, #9
    62aa:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    62ae:	6860      	ldr	r0, [r4, #4]
    62b0:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    62b4:	b9b0      	cbnz	r0, 62e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    62b6:	e007      	b.n	62c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    62b8:	e017      	b.n	62ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    62ba:	201e      	movs	r0, #30
    62bc:	f7ff fd58 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    62c0:	e7e5      	b.n	628e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    62c2:	f240 414b 	movw	r1, #1099	; 0x44b
    62c6:	e001      	b.n	62cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    62c8:	f240 4153 	movw	r1, #1107	; 0x453
    62cc:	2031      	movs	r0, #49	; 0x31
    62ce:	f7fa fb6f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62d2:	4826      	ldr	r0, [pc, #152]	; (636c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    62d4:	702f      	strb	r7, [r5, #0]
    62d6:	3010      	adds	r0, #16
    62d8:	f007 fed7 	bl	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    62dc:	4620      	mov	r0, r4
    62de:	f7ff fe61 	bl	5fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    62e2:	4681      	mov	r9, r0
    62e4:	4648      	mov	r0, r9
    62e6:	e7c7      	b.n	6278 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    62e8:	e013      	b.n	6312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    62ea:	6860      	ldr	r0, [r4, #4]
    62ec:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    62f0:	2901      	cmp	r1, #1
    62f2:	d009      	beq.n	6308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    62f4:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    62f8:	6860      	ldr	r0, [r4, #4]
    62fa:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    62fe:	42a9      	cmp	r1, r5
    6300:	d11b      	bne.n	633a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6302:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6306:	e018      	b.n	633a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6308:	2000      	movs	r0, #0
    630a:	f7ff fd31 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    630e:	702f      	strb	r7, [r5, #0]
    6310:	e7f2      	b.n	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    6312:	6860      	ldr	r0, [r4, #4]
    6314:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6318:	290d      	cmp	r1, #13
    631a:	d018      	beq.n	634e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    631c:	290b      	cmp	r1, #11
    631e:	d016      	beq.n	634e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6320:	290a      	cmp	r1, #10
    6322:	d014      	beq.n	634e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6324:	f89d 1000 	ldrb.w	r1, [sp]
    6328:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    632c:	6861      	ldr	r1, [r4, #4]
    632e:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6332:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6336:	2025      	movs	r0, #37	; 0x25
    6338:	7028      	strb	r0, [r5, #0]
    633a:	6860      	ldr	r0, [r4, #4]
    633c:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6340:	42a9      	cmp	r1, r5
    6342:	d10e      	bne.n	6362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6344:	4809      	ldr	r0, [pc, #36]	; (636c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6346:	3010      	adds	r0, #16
    6348:	f007 fe9f 	bl	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    634c:	e00b      	b.n	6366 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    634e:	212a      	movs	r1, #42	; 0x2a
    6350:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6354:	6860      	ldr	r0, [r4, #4]
    6356:	2202      	movs	r2, #2
    6358:	4905      	ldr	r1, [pc, #20]	; (6370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    635a:	30b4      	adds	r0, #180	; 0xb4
    635c:	f007 fd54 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6360:	e7eb      	b.n	633a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6362:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6366:	2000      	movs	r0, #0
    6368:	e786      	b.n	6278 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    636a:	0000      	.short	0x0000
    636c:	20000114 	.word	0x20000114
    6370:	0000e0c5 	.word	0x0000e0c5
    6374:	b570      	push	{r4, r5, r6, lr}
    6376:	4604      	mov	r4, r0
    6378:	6840      	ldr	r0, [r0, #4]
    637a:	4d0a      	ldr	r5, [pc, #40]	; (63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    637c:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    6380:	f041 0104 	orr.w	r1, r1, #4
    6384:	7001      	strb	r1, [r0, #0]
    6386:	68e8      	ldr	r0, [r5, #12]
    6388:	f007 fca1 	bl	dcce <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    638c:	4606      	mov	r6, r0
    638e:	68e8      	ldr	r0, [r5, #12]
    6390:	f007 fca1 	bl	dcd6 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6394:	4601      	mov	r1, r0
    6396:	4622      	mov	r2, r4
    6398:	4630      	mov	r0, r6
    639a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    639e:	f000 b893 	b.w	64c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    63a2:	0000      	.short	0x0000
    63a4:	20000114 	.word	0x20000114
    63a8:	4602      	mov	r2, r0
    63aa:	4813      	ldr	r0, [pc, #76]	; (63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    63ac:	68c0      	ldr	r0, [r0, #12]
    63ae:	7901      	ldrb	r1, [r0, #4]
    63b0:	4811      	ldr	r0, [pc, #68]	; (63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    63b2:	3010      	adds	r0, #16
    63b4:	6843      	ldr	r3, [r0, #4]
    63b6:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    63ba:	2821      	cmp	r0, #33	; 0x21
    63bc:	d010      	beq.n	63e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    63be:	282e      	cmp	r0, #46	; 0x2e
    63c0:	d00e      	beq.n	63e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    63c2:	2828      	cmp	r0, #40	; 0x28
    63c4:	d00e      	beq.n	63e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    63c6:	2804      	cmp	r0, #4
    63c8:	d00e      	beq.n	63e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    63ca:	280f      	cmp	r0, #15
    63cc:	d00e      	beq.n	63ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    63ce:	281d      	cmp	r0, #29
    63d0:	d00e      	beq.n	63f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    63d2:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    63d6:	2823      	cmp	r0, #35	; 0x23
    63d8:	d00c      	beq.n	63f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    63da:	20fe      	movs	r0, #254	; 0xfe
    63dc:	f000 b874 	b.w	64c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    63e0:	2016      	movs	r0, #22
    63e2:	e7fb      	b.n	63dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63e4:	2023      	movs	r0, #35	; 0x23
    63e6:	e7f9      	b.n	63dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63e8:	200e      	movs	r0, #14
    63ea:	e7f7      	b.n	63dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63ec:	2012      	movs	r0, #18
    63ee:	e7f5      	b.n	63dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63f0:	2014      	movs	r0, #20
    63f2:	e7f3      	b.n	63dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63f4:	2017      	movs	r0, #23
    63f6:	e7f1      	b.n	63dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63f8:	20000114 	.word	0x20000114
    63fc:	b510      	push	{r4, lr}
    63fe:	4604      	mov	r4, r0
    6400:	6840      	ldr	r0, [r0, #4]
    6402:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6406:	2818      	cmp	r0, #24
    6408:	d001      	beq.n	640e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    640a:	2002      	movs	r0, #2
    640c:	bd10      	pop	{r4, pc}
    640e:	4804      	ldr	r0, [pc, #16]	; (6420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    6410:	f007 fe3b 	bl	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6414:	6861      	ldr	r1, [r4, #4]
    6416:	201c      	movs	r0, #28
    6418:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    641c:	2000      	movs	r0, #0
    641e:	bd10      	pop	{r4, pc}
    6420:	20000124 	.word	0x20000124
    6424:	4901      	ldr	r1, [pc, #4]	; (642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6426:	68c9      	ldr	r1, [r1, #12]
    6428:	f007 be6e 	b.w	e108 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    642c:	20000114 	.word	0x20000114
    6430:	b570      	push	{r4, r5, r6, lr}
    6432:	4604      	mov	r4, r0
    6434:	481f      	ldr	r0, [pc, #124]	; (64b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6436:	2500      	movs	r5, #0
    6438:	68c0      	ldr	r0, [r0, #12]
    643a:	7903      	ldrb	r3, [r0, #4]
    643c:	6860      	ldr	r0, [r4, #4]
    643e:	2b16      	cmp	r3, #22
    6440:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6444:	d013      	beq.n	646e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6446:	dc06      	bgt.n	6456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6448:	2b0e      	cmp	r3, #14
    644a:	d009      	beq.n	6460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    644c:	2b12      	cmp	r3, #18
    644e:	d007      	beq.n	6460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6450:	2b14      	cmp	r3, #20
    6452:	d12c      	bne.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6454:	e004      	b.n	6460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6456:	2b17      	cmp	r3, #23
    6458:	d002      	beq.n	6460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    645a:	2b23      	cmp	r3, #35	; 0x23
    645c:	d127      	bne.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    645e:	e01f      	b.n	64a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    6460:	4622      	mov	r2, r4
    6462:	2101      	movs	r1, #1
    6464:	4618      	mov	r0, r3
    6466:	f000 f9c5 	bl	67f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    646a:	4605      	mov	r5, r0
    646c:	e01f      	b.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    646e:	2821      	cmp	r0, #33	; 0x21
    6470:	d001      	beq.n	6476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    6472:	282e      	cmp	r0, #46	; 0x2e
    6474:	d11b      	bne.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6476:	4620      	mov	r0, r4
    6478:	f007 fe1b 	bl	e0b2 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    647c:	6860      	ldr	r0, [r4, #4]
    647e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6482:	2922      	cmp	r1, #34	; 0x22
    6484:	d013      	beq.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6486:	2108      	movs	r1, #8
    6488:	30ec      	adds	r0, #236	; 0xec
    648a:	f008 fd70 	bl	ef6e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    648e:	6860      	ldr	r0, [r4, #4]
    6490:	210b      	movs	r1, #11
    6492:	30ec      	adds	r0, #236	; 0xec
    6494:	f008 fd6b 	bl	ef6e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6498:	201a      	movs	r0, #26
    649a:	f7ff fc69 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    649e:	e006      	b.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    64a0:	2828      	cmp	r0, #40	; 0x28
    64a2:	d104      	bne.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    64a4:	4804      	ldr	r0, [pc, #16]	; (64b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    64a6:	6801      	ldr	r1, [r0, #0]
    64a8:	b109      	cbz	r1, 64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    64aa:	4620      	mov	r0, r4
    64ac:	4788      	blx	r1
    64ae:	4628      	mov	r0, r5
    64b0:	bd70      	pop	{r4, r5, r6, pc}
    64b2:	0000      	.short	0x0000
    64b4:	20000114 	.word	0x20000114
    64b8:	20000290 	.word	0x20000290
    64bc:	4901      	ldr	r1, [pc, #4]	; (64c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    64be:	68c9      	ldr	r1, [r1, #12]
    64c0:	f7fc bd40 	b.w	2f44 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    64c4:	20000114 	.word	0x20000114
    64c8:	4603      	mov	r3, r0
    64ca:	2000      	movs	r0, #0
    64cc:	2b17      	cmp	r3, #23
    64ce:	d017      	beq.n	6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64d0:	dc0a      	bgt.n	64e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    64d2:	2b0e      	cmp	r3, #14
    64d4:	d014      	beq.n	6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64d6:	2b12      	cmp	r3, #18
    64d8:	d012      	beq.n	6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64da:	2b14      	cmp	r3, #20
    64dc:	d010      	beq.n	6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64de:	2b16      	cmp	r3, #22
    64e0:	d112      	bne.n	6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    64e2:	4608      	mov	r0, r1
    64e4:	f7ff bc4a 	b.w	5d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    64e8:	2b23      	cmp	r3, #35	; 0x23
    64ea:	d003      	beq.n	64f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    64ec:	2b24      	cmp	r3, #36	; 0x24
    64ee:	d001      	beq.n	64f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    64f0:	2b25      	cmp	r3, #37	; 0x25
    64f2:	d109      	bne.n	6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    64f4:	4a05      	ldr	r2, [pc, #20]	; (650c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    64f6:	6812      	ldr	r2, [r2, #0]
    64f8:	2a00      	cmp	r2, #0
    64fa:	d005      	beq.n	6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    64fc:	4618      	mov	r0, r3
    64fe:	4710      	bx	r2
    6500:	2100      	movs	r1, #0
    6502:	4618      	mov	r0, r3
    6504:	f000 b976 	b.w	67f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6508:	4770      	bx	lr
    650a:	0000      	.short	0x0000
    650c:	20000288 	.word	0x20000288
    6510:	b510      	push	{r4, lr}
    6512:	6841      	ldr	r1, [r0, #4]
    6514:	4604      	mov	r4, r0
    6516:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    651a:	06c2      	lsls	r2, r0, #27
    651c:	d402      	bmi.n	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    651e:	f240 71db 	movw	r1, #2011	; 0x7db
    6522:	e003      	b.n	652c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6524:	0682      	lsls	r2, r0, #26
    6526:	d504      	bpl.n	6532 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6528:	f240 71dc 	movw	r1, #2012	; 0x7dc
    652c:	2031      	movs	r0, #49	; 0x31
    652e:	f7fa fa3f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6532:	f020 0010 	bic.w	r0, r0, #16
    6536:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    653a:	4804      	ldr	r0, [pc, #16]	; (654c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    653c:	f007 fda5 	bl	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6540:	6860      	ldr	r0, [r4, #4]
    6542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6546:	2105      	movs	r1, #5
    6548:	f7fd bf1a 	b.w	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    654c:	20000124 	.word	0x20000124
    6550:	b510      	push	{r4, lr}
    6552:	6840      	ldr	r0, [r0, #4]
    6554:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6558:	292f      	cmp	r1, #47	; 0x2f
    655a:	d006      	beq.n	656a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    655c:	2916      	cmp	r1, #22
    655e:	d00c      	beq.n	657a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    6560:	f240 71a5 	movw	r1, #1957	; 0x7a5
    6564:	2031      	movs	r0, #49	; 0x31
    6566:	f7fa fa23 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    656a:	2100      	movs	r1, #0
    656c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6574:	4803      	ldr	r0, [pc, #12]	; (6584 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6576:	f007 bd88 	b.w	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    657a:	211a      	movs	r1, #26
    657c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6580:	bd10      	pop	{r4, pc}
    6582:	0000      	.short	0x0000
    6584:	20000124 	.word	0x20000124
    6588:	b570      	push	{r4, r5, r6, lr}
    658a:	4604      	mov	r4, r0
    658c:	6840      	ldr	r0, [r0, #4]
    658e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6592:	291c      	cmp	r1, #28
    6594:	d004      	beq.n	65a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    6596:	f240 71b6 	movw	r1, #1974	; 0x7b6
    659a:	2031      	movs	r0, #49	; 0x31
    659c:	f7fa fa08 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65a0:	2500      	movs	r5, #0
    65a2:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    65a6:	6860      	ldr	r0, [r4, #4]
    65a8:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    65ac:	b161      	cbz	r1, 65c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    65ae:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    65b2:	6860      	ldr	r0, [r4, #4]
    65b4:	2202      	movs	r2, #2
    65b6:	8801      	ldrh	r1, [r0, #0]
    65b8:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    65bc:	6860      	ldr	r0, [r4, #4]
    65be:	490d      	ldr	r1, [pc, #52]	; (65f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    65c0:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    65c4:	6860      	ldr	r0, [r4, #4]
    65c6:	e00c      	b.n	65e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    65c8:	8801      	ldrh	r1, [r0, #0]
    65ca:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    65ce:	6860      	ldr	r0, [r4, #4]
    65d0:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    65d4:	6861      	ldr	r1, [r4, #4]
    65d6:	2001      	movs	r0, #1
    65d8:	2202      	movs	r2, #2
    65da:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    65de:	4906      	ldr	r1, [pc, #24]	; (65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    65e0:	6860      	ldr	r0, [r4, #4]
    65e2:	f200 200a 	addw	r0, r0, #522	; 0x20a
    65e6:	f007 fc0f 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    65ea:	6860      	ldr	r0, [r4, #4]
    65ec:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    65f0:	bd70      	pop	{r4, r5, r6, pc}
    65f2:	0000      	.short	0x0000
    65f4:	0000e253 	.word	0x0000e253
    65f8:	0000e235 	.word	0x0000e235
    65fc:	4916      	ldr	r1, [pc, #88]	; (6658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    65fe:	b510      	push	{r4, lr}
    6600:	6889      	ldr	r1, [r1, #8]
    6602:	790a      	ldrb	r2, [r1, #4]
    6604:	6841      	ldr	r1, [r0, #4]
    6606:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    660a:	2b09      	cmp	r3, #9
    660c:	d10a      	bne.n	6624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    660e:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6612:	4293      	cmp	r3, r2
    6614:	d106      	bne.n	6624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6616:	2200      	movs	r2, #0
    6618:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    661c:	6840      	ldr	r0, [r0, #4]
    661e:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6622:	bd10      	pop	{r4, pc}
    6624:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6628:	071c      	lsls	r4, r3, #28
    662a:	d509      	bpl.n	6640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    662c:	f023 0008 	bic.w	r0, r3, #8
    6630:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6634:	4808      	ldr	r0, [pc, #32]	; (6658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    663a:	3010      	adds	r0, #16
    663c:	f007 bd25 	b.w	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6640:	2aff      	cmp	r2, #255	; 0xff
    6642:	d004      	beq.n	664e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6644:	f240 7151 	movw	r1, #1873	; 0x751
    6648:	2031      	movs	r0, #49	; 0x31
    664a:	f7fa f9b1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    664e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6652:	f008 bd37 	b.w	f0c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6656:	0000      	.short	0x0000
    6658:	20000114 	.word	0x20000114
    665c:	4808      	ldr	r0, [pc, #32]	; (6680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    665e:	b510      	push	{r4, lr}
    6660:	6840      	ldr	r0, [r0, #4]
    6662:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6666:	b941      	cbnz	r1, 667a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6668:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    666c:	2301      	movs	r3, #1
    666e:	2106      	movs	r1, #6
    6670:	3080      	adds	r0, #128	; 0x80
    6672:	f007 f821 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6676:	2800      	cmp	r0, #0
    6678:	d000      	beq.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    667a:	2001      	movs	r0, #1
    667c:	bd10      	pop	{r4, pc}
    667e:	0000      	.short	0x0000
    6680:	20000124 	.word	0x20000124
    6684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6686:	4c59      	ldr	r4, [pc, #356]	; (67ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6688:	4606      	mov	r6, r0
    668a:	4615      	mov	r5, r2
    668c:	6860      	ldr	r0, [r4, #4]
    668e:	2200      	movs	r2, #0
    6690:	b111      	cbz	r1, 6698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    6692:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6696:	e006      	b.n	66a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    6698:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    669c:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    66a0:	4411      	add	r1, r2
    66a2:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    66a6:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    66aa:	f88d 1000 	strb.w	r1, [sp]
    66ae:	9900      	ldr	r1, [sp, #0]
    66b0:	9100      	str	r1, [sp, #0]
    66b2:	f89d 1000 	ldrb.w	r1, [sp]
    66b6:	b939      	cbnz	r1, 66c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    66b8:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    66bc:	2301      	movs	r3, #1
    66be:	4619      	mov	r1, r3
    66c0:	3080      	adds	r0, #128	; 0x80
    66c2:	f006 fff9 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66c6:	b130      	cbz	r0, 66d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    66c8:	6860      	ldr	r0, [r4, #4]
    66ca:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    66ce:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    66d2:	4411      	add	r1, r2
    66d4:	8001      	strh	r1, [r0, #0]
    66d6:	6860      	ldr	r0, [r4, #4]
    66d8:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    66dc:	b132      	cbz	r2, 66ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    66de:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    66e2:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    66e6:	4419      	add	r1, r3
    66e8:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    66ec:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    66f0:	2b00      	cmp	r3, #0
    66f2:	dd06      	ble.n	6702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    66f4:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    66f8:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    66fc:	4439      	add	r1, r7
    66fe:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6702:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6706:	bb09      	cbnz	r1, 674c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6708:	b9be      	cbnz	r6, 673a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    670a:	4938      	ldr	r1, [pc, #224]	; (67ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    670c:	3910      	subs	r1, #16
    670e:	7809      	ldrb	r1, [r1, #0]
    6710:	2902      	cmp	r1, #2
    6712:	d006      	beq.n	6722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    6714:	2901      	cmp	r1, #1
    6716:	d00a      	beq.n	672e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    6718:	b1f5      	cbz	r5, 6758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    671a:	06e9      	lsls	r1, r5, #27
    671c:	d50b      	bpl.n	6736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    671e:	211e      	movs	r1, #30
    6720:	e042      	b.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6722:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6726:	2906      	cmp	r1, #6
    6728:	d03e      	beq.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    672a:	2116      	movs	r1, #22
    672c:	e03c      	b.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    672e:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6732:	b959      	cbnz	r1, 674c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6734:	e054      	b.n	67e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6736:	0729      	lsls	r1, r5, #28
    6738:	d501      	bpl.n	673e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    673a:	213d      	movs	r1, #61	; 0x3d
    673c:	e034      	b.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    673e:	06a9      	lsls	r1, r5, #26
    6740:	d501      	bpl.n	6746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6742:	2123      	movs	r1, #35	; 0x23
    6744:	e030      	b.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6746:	07a9      	lsls	r1, r5, #30
    6748:	d001      	beq.n	674e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    674a:	212a      	movs	r1, #42	; 0x2a
    674c:	e02c      	b.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    674e:	f640 51a3 	movw	r1, #3491	; 0xda3
    6752:	2031      	movs	r0, #49	; 0x31
    6754:	f7fa f92c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6758:	b12a      	cbz	r2, 6766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    675a:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    675e:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6762:	4291      	cmp	r1, r2
    6764:	d216      	bcs.n	6794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6766:	2b00      	cmp	r3, #0
    6768:	dd05      	ble.n	6776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    676a:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    676e:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6772:	4291      	cmp	r1, r2
    6774:	d20e      	bcs.n	6794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6776:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    677a:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    677e:	428a      	cmp	r2, r1
    6780:	d30a      	bcc.n	6798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6782:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6786:	f88d 2000 	strb.w	r2, [sp]
    678a:	9a00      	ldr	r2, [sp, #0]
    678c:	9200      	str	r2, [sp, #0]
    678e:	f89d 2000 	ldrb.w	r2, [sp]
    6792:	b10a      	cbz	r2, 6798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6794:	2122      	movs	r1, #34	; 0x22
    6796:	e007      	b.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6798:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    679c:	b172      	cbz	r2, 67bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    679e:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    67a2:	428a      	cmp	r2, r1
    67a4:	d31c      	bcc.n	67e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    67a6:	2108      	movs	r1, #8
    67a8:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    67ac:	f88d 2000 	strb.w	r2, [sp]
    67b0:	9a00      	ldr	r2, [sp, #0]
    67b2:	9200      	str	r2, [sp, #0]
    67b4:	f89d 2000 	ldrb.w	r2, [sp]
    67b8:	b96a      	cbnz	r2, 67d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    67ba:	e005      	b.n	67c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    67bc:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    67c0:	2906      	cmp	r1, #6
    67c2:	d30d      	bcc.n	67e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    67c4:	213e      	movs	r1, #62	; 0x3e
    67c6:	e7ef      	b.n	67a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    67c8:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    67cc:	2202      	movs	r2, #2
    67ce:	4908      	ldr	r1, [pc, #32]	; (67f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    67d0:	30b4      	adds	r0, #180	; 0xb4
    67d2:	f007 fb19 	bl	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    67d6:	6860      	ldr	r0, [r4, #4]
    67d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    67dc:	f008 bbeb 	b.w	efb6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    67e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    67e4:	2100      	movs	r1, #0
    67e6:	f7fd bdcb 	b.w	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    67ea:	0000      	.short	0x0000
    67ec:	20000124 	.word	0x20000124
    67f0:	0000e0c5 	.word	0x0000e0c5
    67f4:	b570      	push	{r4, r5, r6, lr}
    67f6:	4614      	mov	r4, r2
    67f8:	460e      	mov	r6, r1
    67fa:	6861      	ldr	r1, [r4, #4]
    67fc:	4602      	mov	r2, r0
    67fe:	2500      	movs	r5, #0
    6800:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    6804:	2a0e      	cmp	r2, #14
    6806:	d00a      	beq.n	681e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    6808:	2a12      	cmp	r2, #18
    680a:	d011      	beq.n	6830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    680c:	2a14      	cmp	r2, #20
    680e:	d016      	beq.n	683e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    6810:	2a17      	cmp	r2, #23
    6812:	d023      	beq.n	685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    6814:	f240 31dd 	movw	r1, #989	; 0x3dd
    6818:	2031      	movs	r0, #49	; 0x31
    681a:	f7fa f8c9 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    681e:	2804      	cmp	r0, #4
    6820:	d131      	bne.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6822:	4620      	mov	r0, r4
    6824:	f007 fc45 	bl	e0b2 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6828:	4620      	mov	r0, r4
    682a:	f7fc fb6d 	bl	2f08 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    682e:	e02a      	b.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6830:	280f      	cmp	r0, #15
    6832:	d128      	bne.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6834:	4620      	mov	r0, r4
    6836:	f007 fd99 	bl	e36c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    683a:	4605      	mov	r5, r0
    683c:	e023      	b.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    683e:	281d      	cmp	r0, #29
    6840:	d121      	bne.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6842:	4620      	mov	r0, r4
    6844:	f007 fc35 	bl	e0b2 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6848:	b126      	cbz	r6, 6854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    684a:	6860      	ldr	r0, [r4, #4]
    684c:	2105      	movs	r1, #5
    684e:	30ec      	adds	r0, #236	; 0xec
    6850:	f008 fb8d 	bl	ef6e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6854:	480d      	ldr	r0, [pc, #52]	; (688c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6856:	f007 fcdd 	bl	e214 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    685a:	e014      	b.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    685c:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    6860:	2823      	cmp	r0, #35	; 0x23
    6862:	d110      	bne.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6864:	2600      	movs	r6, #0
    6866:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    686a:	4808      	ldr	r0, [pc, #32]	; (688c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    686c:	f007 fc0d 	bl	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6870:	6860      	ldr	r0, [r4, #4]
    6872:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6876:	2801      	cmp	r0, #1
    6878:	d102      	bne.n	6880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
    687a:	2000      	movs	r0, #0
    687c:	f7ff fa78 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6880:	6860      	ldr	r0, [r4, #4]
    6882:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    6886:	4628      	mov	r0, r5
    6888:	bd70      	pop	{r4, r5, r6, pc}
    688a:	0000      	.short	0x0000
    688c:	20000124 	.word	0x20000124
    6890:	b570      	push	{r4, r5, r6, lr}
    6892:	4d2e      	ldr	r5, [pc, #184]	; (694c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
    6894:	6868      	ldr	r0, [r5, #4]
    6896:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    689a:	b151      	cbz	r1, 68b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    689c:	2901      	cmp	r1, #1
    689e:	d008      	beq.n	68b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    68a0:	2902      	cmp	r1, #2
    68a2:	d009      	beq.n	68b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    68a4:	2903      	cmp	r1, #3
    68a6:	d007      	beq.n	68b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    68a8:	f640 4118 	movw	r1, #3096	; 0xc18
    68ac:	2031      	movs	r0, #49	; 0x31
    68ae:	f7fa f87f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68b2:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    68b6:	e037      	b.n	6928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
    68b8:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    68bc:	2907      	cmp	r1, #7
    68be:	d036      	beq.n	692e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    68c0:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    68c4:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    68c8:	2400      	movs	r4, #0
    68ca:	1c93      	adds	r3, r2, #2
    68cc:	4299      	cmp	r1, r3
    68ce:	d306      	bcc.n	68de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    68d0:	1a89      	subs	r1, r1, r2
    68d2:	1e89      	subs	r1, r1, #2
    68d4:	040c      	lsls	r4, r1, #16
    68d6:	0c24      	lsrs	r4, r4, #16
    68d8:	d001      	beq.n	68de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    68da:	1e64      	subs	r4, r4, #1
    68dc:	b2a4      	uxth	r4, r4
    68de:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    68e2:	b139      	cbz	r1, 68f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
    68e4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    68e8:	2301      	movs	r3, #1
    68ea:	2109      	movs	r1, #9
    68ec:	3080      	adds	r0, #128	; 0x80
    68ee:	f006 fee3 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68f2:	b340      	cbz	r0, 6946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    68f4:	f7ff feb2 	bl	665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    68f8:	b178      	cbz	r0, 691a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    68fa:	686a      	ldr	r2, [r5, #4]
    68fc:	2000      	movs	r0, #0
    68fe:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    6902:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6906:	1c93      	adds	r3, r2, #2
    6908:	4299      	cmp	r1, r3
    690a:	d303      	bcc.n	6914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    690c:	1a88      	subs	r0, r1, r2
    690e:	1e80      	subs	r0, r0, #2
    6910:	d000      	beq.n	6914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    6912:	1e40      	subs	r0, r0, #1
    6914:	42a0      	cmp	r0, r4
    6916:	d200      	bcs.n	691a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    6918:	b284      	uxth	r4, r0
    691a:	b10c      	cbz	r4, 6920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    691c:	1e64      	subs	r4, r4, #1
    691e:	b2a4      	uxth	r4, r4
    6920:	6868      	ldr	r0, [r5, #4]
    6922:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6926:	4421      	add	r1, r4
    6928:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    692c:	bd70      	pop	{r4, r5, r6, pc}
    692e:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6932:	2903      	cmp	r1, #3
    6934:	d3bd      	bcc.n	68b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6936:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    693a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    693c:	4411      	add	r1, r2
    693e:	1c49      	adds	r1, r1, #1
    6940:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    6944:	bd70      	pop	{r4, r5, r6, pc}
    6946:	2400      	movs	r4, #0
    6948:	e7ea      	b.n	6920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    694a:	0000      	.short	0x0000
    694c:	20000124 	.word	0x20000124

00006950 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6950:	b570      	push	{r4, r5, r6, lr}
    6952:	6844      	ldr	r4, [r0, #4]
    6954:	220d      	movs	r2, #13
    6956:	f504 7598 	add.w	r5, r4, #304	; 0x130
    695a:	2100      	movs	r1, #0
    695c:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    6960:	f009 fe57 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6964:	f44f 70a3 	mov.w	r0, #326	; 0x146
    6968:	2100      	movs	r1, #0
    696a:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    696e:	5501      	strb	r1, [r0, r4]
    6970:	f8a5 1017 	strh.w	r1, [r5, #23]
    6974:	7669      	strb	r1, [r5, #25]
    6976:	4608      	mov	r0, r1
    6978:	f05f 017f 	movs.w	r1, #127	; 0x7f
    697c:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6980:	1c40      	adds	r0, r0, #1
    6982:	b2c0      	uxtb	r0, r0
    6984:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    6988:	2802      	cmp	r0, #2
    698a:	d3f7      	bcc.n	697c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    698c:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6990:	4620      	mov	r0, r4
    6992:	f008 fc57 	bl	f244 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6996:	2000      	movs	r0, #0
    6998:	21ff      	movs	r1, #255	; 0xff
    699a:	1822      	adds	r2, r4, r0
    699c:	1c40      	adds	r0, r0, #1
    699e:	b2c0      	uxtb	r0, r0
    69a0:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    69a4:	2802      	cmp	r0, #2
    69a6:	d3f8      	bcc.n	699a <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    69a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000069ac <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    69ac:	4903      	ldr	r1, [pc, #12]	; (69bc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    69ae:	884a      	ldrh	r2, [r1, #2]
    69b0:	8002      	strh	r2, [r0, #0]
    69b2:	7809      	ldrb	r1, [r1, #0]
    69b4:	7081      	strb	r1, [r0, #2]
    69b6:	2000      	movs	r0, #0
    69b8:	4770      	bx	lr
    69ba:	0000      	.short	0x0000
    69bc:	20001408 	.word	0x20001408

000069c0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    69c0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    69c2:	460c      	mov	r4, r1
    69c4:	4605      	mov	r5, r0
    69c6:	8800      	ldrh	r0, [r0, #0]
    69c8:	4669      	mov	r1, sp
    69ca:	f006 fe5e 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    69ce:	2200      	movs	r2, #0
    69d0:	b128      	cbz	r0, 69de <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    69d2:	f8c4 2002 	str.w	r2, [r4, #2]
    69d6:	71a2      	strb	r2, [r4, #6]
    69d8:	8022      	strh	r2, [r4, #0]
    69da:	2002      	movs	r0, #2
    69dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    69de:	9901      	ldr	r1, [sp, #4]
    69e0:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    69e4:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    69e8:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    69ec:	f8c4 0002 	str.w	r0, [r4, #2]
    69f0:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    69f4:	71a0      	strb	r0, [r4, #6]
    69f6:	8828      	ldrh	r0, [r5, #0]
    69f8:	8020      	strh	r0, [r4, #0]
    69fa:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    69fe:	f88d 0008 	strb.w	r0, [sp, #8]
    6a02:	9802      	ldr	r0, [sp, #8]
    6a04:	9002      	str	r0, [sp, #8]
    6a06:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6a0a:	2800      	cmp	r0, #0
    6a0c:	d1ea      	bne.n	69e4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    6a0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006a10 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    6a10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6a12:	460d      	mov	r5, r1
    6a14:	4606      	mov	r6, r0
    6a16:	8800      	ldrh	r0, [r0, #0]
    6a18:	4669      	mov	r1, sp
    6a1a:	f006 fe36 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6a1e:	2800      	cmp	r0, #0
    6a20:	d11a      	bne.n	6a58 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    6a22:	f8dd 4004 	ldr.w	r4, [sp, #4]
    6a26:	2700      	movs	r7, #0
    6a28:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    6a2c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    6a30:	f009 f904 	bl	fc3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6a34:	70a8      	strb	r0, [r5, #2]
    6a36:	7860      	ldrb	r0, [r4, #1]
    6a38:	f009 f900 	bl	fc3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6a3c:	70e8      	strb	r0, [r5, #3]
    6a3e:	78a0      	ldrb	r0, [r4, #2]
    6a40:	f88d 0008 	strb.w	r0, [sp, #8]
    6a44:	9802      	ldr	r0, [sp, #8]
    6a46:	9002      	str	r0, [sp, #8]
    6a48:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6a4c:	3c6a      	subs	r4, #106	; 0x6a
    6a4e:	2800      	cmp	r0, #0
    6a50:	d1ea      	bne.n	6a28 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    6a52:	8830      	ldrh	r0, [r6, #0]
    6a54:	8028      	strh	r0, [r5, #0]
    6a56:	2000      	movs	r0, #0
    6a58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006a5c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    6a5c:	4903      	ldr	r1, [pc, #12]	; (6a6c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    6a5e:	888a      	ldrh	r2, [r1, #4]
    6a60:	8002      	strh	r2, [r0, #0]
    6a62:	88c9      	ldrh	r1, [r1, #6]
    6a64:	8041      	strh	r1, [r0, #2]
    6a66:	2000      	movs	r0, #0
    6a68:	4770      	bx	lr
    6a6a:	0000      	.short	0x0000
    6a6c:	2000029c 	.word	0x2000029c

00006a70 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    6a70:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6a72:	2400      	movs	r4, #0
    6a74:	a902      	add	r1, sp, #8
    6a76:	f88d 4004 	strb.w	r4, [sp, #4]
    6a7a:	f88d 4008 	strb.w	r4, [sp, #8]
    6a7e:	9100      	str	r1, [sp, #0]
    6a80:	7882      	ldrb	r2, [r0, #2]
    6a82:	7841      	ldrb	r1, [r0, #1]
    6a84:	7800      	ldrb	r0, [r0, #0]
    6a86:	ab01      	add	r3, sp, #4
    6a88:	f009 fa4c 	bl	ff24 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    6a8c:	2800      	cmp	r0, #0
    6a8e:	d112      	bne.n	6ab6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    6a90:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6a94:	f009 f986 	bl	fda4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6a98:	b170      	cbz	r0, 6ab8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6a9a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6a9e:	f009 f981 	bl	fda4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6aa2:	b148      	cbz	r0, 6ab8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6aa4:	4805      	ldr	r0, [pc, #20]	; (6abc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    6aa6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6aaa:	7381      	strb	r1, [r0, #14]
    6aac:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6ab0:	73c1      	strb	r1, [r0, #15]
    6ab2:	8204      	strh	r4, [r0, #16]
    6ab4:	2000      	movs	r0, #0
    6ab6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6ab8:	2011      	movs	r0, #17
    6aba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6abc:	20001408 	.word	0x20001408

00006ac0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    6ac0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6ac4:	460f      	mov	r7, r1
    6ac6:	4605      	mov	r5, r0
    6ac8:	7806      	ldrb	r6, [r0, #0]
    6aca:	f009 f91e 	bl	fd0a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    6ace:	2800      	cmp	r0, #0
    6ad0:	d10e      	bne.n	6af0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6ad2:	4628      	mov	r0, r5
    6ad4:	f009 f8f3 	bl	fcbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    6ad8:	2800      	cmp	r0, #0
    6ada:	d109      	bne.n	6af0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6adc:	2101      	movs	r1, #1
    6ade:	4630      	mov	r0, r6
    6ae0:	f7fa fa94 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6ae4:	0004      	movs	r4, r0
    6ae6:	d005      	beq.n	6af4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    6ae8:	f007 ff66 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6aec:	b170      	cbz	r0, 6b0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    6aee:	200c      	movs	r0, #12
    6af0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6af4:	2101      	movs	r1, #1
    6af6:	4630      	mov	r0, r6
    6af8:	f7fa fa50 	bl	f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6afc:	0004      	movs	r4, r0
    6afe:	d013      	beq.n	6b28 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    6b00:	4817      	ldr	r0, [pc, #92]	; (6b60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    6b02:	f990 1000 	ldrsb.w	r1, [r0]
    6b06:	4620      	mov	r0, r4
    6b08:	f007 fd2b 	bl	e562 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6b0c:	4620      	mov	r0, r4
    6b0e:	f007 fd93 	bl	e638 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6b12:	7038      	strb	r0, [r7, #0]
    6b14:	74e8      	strb	r0, [r5, #19]
    6b16:	4629      	mov	r1, r5
    6b18:	4620      	mov	r0, r4
    6b1a:	f7fc fc57 	bl	33cc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6b1e:	4606      	mov	r6, r0
    6b20:	7e68      	ldrb	r0, [r5, #25]
    6b22:	b1d0      	cbz	r0, 6b5a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6b24:	b12e      	cbz	r6, 6b32 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    6b26:	e018      	b.n	6b5a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6b28:	f241 512e 	movw	r1, #5422	; 0x152e
    6b2c:	2039      	movs	r0, #57	; 0x39
    6b2e:	f7f9 ff3f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b32:	2200      	movs	r2, #0
    6b34:	4668      	mov	r0, sp
    6b36:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6b38:	f006 fbea 	bl	d310 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6b3c:	2200      	movs	r2, #0
    6b3e:	2101      	movs	r1, #1
    6b40:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6b42:	f006 fc5f 	bl	d404 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6b46:	2204      	movs	r2, #4
    6b48:	4668      	mov	r0, sp
    6b4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6b4c:	f006 fbe0 	bl	d310 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6b50:	2200      	movs	r2, #0
    6b52:	4611      	mov	r1, r2
    6b54:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6b56:	f006 fc55 	bl	d404 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6b5a:	4630      	mov	r0, r6
    6b5c:	e7c8      	b.n	6af0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6b5e:	0000      	.short	0x0000
    6b60:	20000294 	.word	0x20000294

00006b64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6b64:	7801      	ldrb	r1, [r0, #0]
    6b66:	b171      	cbz	r1, 6b86 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b68:	7841      	ldrb	r1, [r0, #1]
    6b6a:	b161      	cbz	r1, 6b86 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b6c:	8841      	ldrh	r1, [r0, #2]
    6b6e:	291b      	cmp	r1, #27
    6b70:	d309      	bcc.n	6b86 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b72:	8881      	ldrh	r1, [r0, #4]
    6b74:	291b      	cmp	r1, #27
    6b76:	d306      	bcc.n	6b86 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b78:	4904      	ldr	r1, [pc, #16]	; (6b8c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6b7a:	6802      	ldr	r2, [r0, #0]
    6b7c:	600a      	str	r2, [r1, #0]
    6b7e:	8880      	ldrh	r0, [r0, #4]
    6b80:	8088      	strh	r0, [r1, #4]
    6b82:	2000      	movs	r0, #0
    6b84:	4770      	bx	lr
    6b86:	2012      	movs	r0, #18
    6b88:	4770      	bx	lr
    6b8a:	0000      	.short	0x0000
    6b8c:	20001408 	.word	0x20001408

00006b90 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6b90:	6800      	ldr	r0, [r0, #0]
    6b92:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6b96:	4288      	cmp	r0, r1
    6b98:	d303      	bcc.n	6ba2 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    6b9a:	4903      	ldr	r1, [pc, #12]	; (6ba8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    6b9c:	6088      	str	r0, [r1, #8]
    6b9e:	2000      	movs	r0, #0
    6ba0:	4770      	bx	lr
    6ba2:	2012      	movs	r0, #18
    6ba4:	4770      	bx	lr
    6ba6:	0000      	.short	0x0000
    6ba8:	20001408 	.word	0x20001408

00006bac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6bac:	4a03      	ldr	r2, [pc, #12]	; (6bbc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    6bae:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    6bb2:	6001      	str	r1, [r0, #0]
    6bb4:	6042      	str	r2, [r0, #4]
    6bb6:	2000      	movs	r0, #0
    6bb8:	4770      	bx	lr
    6bba:	0000      	.short	0x0000
    6bbc:	00007108 	.word	0x00007108

00006bc0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    6bc0:	b50e      	push	{r1, r2, r3, lr}
    6bc2:	8800      	ldrh	r0, [r0, #0]
    6bc4:	4669      	mov	r1, sp
    6bc6:	f006 fd60 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6bca:	b960      	cbnz	r0, 6be6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6bcc:	9801      	ldr	r0, [sp, #4]
    6bce:	f009 f965 	bl	fe9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    6bd2:	b140      	cbz	r0, 6be6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6bd4:	9801      	ldr	r0, [sp, #4]
    6bd6:	4601      	mov	r1, r0
    6bd8:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    6bdc:	3080      	adds	r0, #128	; 0x80
    6bde:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    6be2:	b962      	cbnz	r2, 6bfe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    6be4:	e001      	b.n	6bea <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    6be6:	2002      	movs	r0, #2
    6be8:	bd0e      	pop	{r1, r2, r3, pc}
    6bea:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    6bee:	f88d 2008 	strb.w	r2, [sp, #8]
    6bf2:	9a02      	ldr	r2, [sp, #8]
    6bf4:	9202      	str	r2, [sp, #8]
    6bf6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6bfa:	2201      	movs	r2, #1
    6bfc:	b10b      	cbz	r3, 6c02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    6bfe:	203a      	movs	r0, #58	; 0x3a
    6c00:	bd0e      	pop	{r1, r2, r3, pc}
    6c02:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    6c06:	079b      	lsls	r3, r3, #30
    6c08:	d006      	beq.n	6c18 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    6c0a:	2202      	movs	r2, #2
    6c0c:	4905      	ldr	r1, [pc, #20]	; (6c24 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    6c0e:	305e      	adds	r0, #94	; 0x5e
    6c10:	f007 f90e 	bl	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6c14:	2000      	movs	r0, #0
    6c16:	bd0e      	pop	{r1, r2, r3, pc}
    6c18:	700a      	strb	r2, [r1, #0]
    6c1a:	4668      	mov	r0, sp
    6c1c:	f007 f8c8 	bl	ddb0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6c20:	e7f8      	b.n	6c14 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    6c22:	0000      	.short	0x0000
    6c24:	0000e3a5 	.word	0x0000e3a5

00006c28 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    6c28:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    6c2c:	4613      	mov	r3, r2
    6c2e:	4a33      	ldr	r2, [pc, #204]	; (6cfc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    6c30:	460f      	mov	r7, r1
    6c32:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    6c36:	8814      	ldrh	r4, [r2, #0]
    6c38:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    6c3c:	428c      	cmp	r4, r1
    6c3e:	d200      	bcs.n	6c42 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    6c40:	4621      	mov	r1, r4
    6c42:	4688      	mov	r8, r1
    6c44:	8891      	ldrh	r1, [r2, #4]
    6c46:	42b1      	cmp	r1, r6
    6c48:	d200      	bcs.n	6c4c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    6c4a:	460e      	mov	r6, r1
    6c4c:	8851      	ldrh	r1, [r2, #2]
    6c4e:	f640 0448 	movw	r4, #2120	; 0x848
    6c52:	42a1      	cmp	r1, r4
    6c54:	d300      	bcc.n	6c58 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    6c56:	4621      	mov	r1, r4
    6c58:	88d5      	ldrh	r5, [r2, #6]
    6c5a:	42a5      	cmp	r5, r4
    6c5c:	d300      	bcc.n	6c60 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    6c5e:	4625      	mov	r5, r4
    6c60:	42a1      	cmp	r1, r4
    6c62:	d200      	bcs.n	6c66 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    6c64:	460c      	mov	r4, r1
    6c66:	f44f 72a4 	mov.w	r2, #328	; 0x148
    6c6a:	2e1b      	cmp	r6, #27
    6c6c:	d001      	beq.n	6c72 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    6c6e:	4295      	cmp	r5, r2
    6c70:	d104      	bne.n	6c7c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    6c72:	f1b8 0f1b 	cmp.w	r8, #27
    6c76:	d03e      	beq.n	6cf6 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6c78:	4294      	cmp	r4, r2
    6c7a:	d03c      	beq.n	6cf6 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6c7c:	466a      	mov	r2, sp
    6c7e:	4619      	mov	r1, r3
    6c80:	f009 f8b3 	bl	fdea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    6c84:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    6c88:	4641      	mov	r1, r8
    6c8a:	4540      	cmp	r0, r8
    6c8c:	d900      	bls.n	6c90 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    6c8e:	4608      	mov	r0, r1
    6c90:	80f8      	strh	r0, [r7, #6]
    6c92:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    6c96:	42a1      	cmp	r1, r4
    6c98:	d800      	bhi.n	6c9c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    6c9a:	460c      	mov	r4, r1
    6c9c:	813c      	strh	r4, [r7, #8]
    6c9e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6ca2:	42b1      	cmp	r1, r6
    6ca4:	d800      	bhi.n	6ca8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    6ca6:	460e      	mov	r6, r1
    6ca8:	807e      	strh	r6, [r7, #2]
    6caa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6cae:	42a9      	cmp	r1, r5
    6cb0:	d800      	bhi.n	6cb4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    6cb2:	460d      	mov	r5, r1
    6cb4:	80bd      	strh	r5, [r7, #4]
    6cb6:	21ff      	movs	r1, #255	; 0xff
    6cb8:	7039      	strb	r1, [r7, #0]
    6cba:	381b      	subs	r0, #27
    6cbc:	28e0      	cmp	r0, #224	; 0xe0
    6cbe:	d902      	bls.n	6cc6 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    6cc0:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    6cc4:	e014      	b.n	6cf0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6cc6:	3e1b      	subs	r6, #27
    6cc8:	2ee0      	cmp	r6, #224	; 0xe0
    6cca:	d902      	bls.n	6cd2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    6ccc:	f240 51b2 	movw	r1, #1458	; 0x5b2
    6cd0:	e00e      	b.n	6cf0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6cd2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    6cd6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    6cda:	4284      	cmp	r4, r0
    6cdc:	d902      	bls.n	6ce4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    6cde:	f240 51b4 	movw	r1, #1460	; 0x5b4
    6ce2:	e005      	b.n	6cf0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6ce4:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    6ce8:	4285      	cmp	r5, r0
    6cea:	d904      	bls.n	6cf6 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6cec:	f240 51b6 	movw	r1, #1462	; 0x5b6
    6cf0:	2039      	movs	r0, #57	; 0x39
    6cf2:	f7f9 fe5d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cf6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6cfa:	0000      	.short	0x0000
    6cfc:	2000029c 	.word	0x2000029c

00006d00 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    6d00:	b570      	push	{r4, r5, r6, lr}
    6d02:	b086      	sub	sp, #24
    6d04:	4604      	mov	r4, r0
    6d06:	f000 fa9d 	bl	7244 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6d0a:	0940      	lsrs	r0, r0, #5
    6d0c:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6d10:	4e2d      	ldr	r6, [pc, #180]	; (6dc8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    6d12:	07c0      	lsls	r0, r0, #31
    6d14:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6d18:	d002      	beq.n	6d20 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    6d1a:	8871      	ldrh	r1, [r6, #2]
    6d1c:	88b0      	ldrh	r0, [r6, #4]
    6d1e:	e001      	b.n	6d24 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    6d20:	211b      	movs	r1, #27
    6d22:	4608      	mov	r0, r1
    6d24:	84e9      	strh	r1, [r5, #38]	; 0x26
    6d26:	8528      	strh	r0, [r5, #40]	; 0x28
    6d28:	f000 fa8c 	bl	7244 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6d2c:	0788      	lsls	r0, r1, #30
    6d2e:	f04f 0501 	mov.w	r5, #1
    6d32:	d505      	bpl.n	6d40 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    6d34:	f88d 5000 	strb.w	r5, [sp]
    6d38:	4668      	mov	r0, sp
    6d3a:	9401      	str	r4, [sp, #4]
    6d3c:	f7ff fe08 	bl	6950 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6d40:	68b0      	ldr	r0, [r6, #8]
    6d42:	62e0      	str	r0, [r4, #44]	; 0x2c
    6d44:	f641 514c 	movw	r1, #7500	; 0x1d4c
    6d48:	6121      	str	r1, [r4, #16]
    6d4a:	8821      	ldrh	r1, [r4, #0]
    6d4c:	f8ad 1004 	strh.w	r1, [sp, #4]
    6d50:	7bb1      	ldrb	r1, [r6, #14]
    6d52:	f88d 1006 	strb.w	r1, [sp, #6]
    6d56:	7bf1      	ldrb	r1, [r6, #15]
    6d58:	f88d 1007 	strb.w	r1, [sp, #7]
    6d5c:	8a31      	ldrh	r1, [r6, #16]
    6d5e:	f8ad 1008 	strh.w	r1, [sp, #8]
    6d62:	a904      	add	r1, sp, #16
    6d64:	9100      	str	r1, [sp, #0]
    6d66:	4628      	mov	r0, r5
    6d68:	ab03      	add	r3, sp, #12
    6d6a:	aa01      	add	r2, sp, #4
    6d6c:	4621      	mov	r1, r4
    6d6e:	f009 f872 	bl	fe56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    6d72:	b138      	cbz	r0, 6d84 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    6d74:	8820      	ldrh	r0, [r4, #0]
    6d76:	2100      	movs	r1, #0
    6d78:	f7fa f9ea 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6d7c:	b308      	cbz	r0, 6dc2 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    6d7e:	f240 517d 	movw	r1, #1405	; 0x57d
    6d82:	e01b      	b.n	6dbc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    6d84:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6d88:	f88d 0014 	strb.w	r0, [sp, #20]
    6d8c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6d90:	f88d 0015 	strb.w	r0, [sp, #21]
    6d94:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6d98:	f8ad 0016 	strh.w	r0, [sp, #22]
    6d9c:	a905      	add	r1, sp, #20
    6d9e:	4620      	mov	r0, r4
    6da0:	f006 fd30 	bl	d804 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6da4:	7870      	ldrb	r0, [r6, #1]
    6da6:	9000      	str	r0, [sp, #0]
    6da8:	7833      	ldrb	r3, [r6, #0]
    6daa:	88b2      	ldrh	r2, [r6, #4]
    6dac:	8871      	ldrh	r1, [r6, #2]
    6dae:	8820      	ldrh	r0, [r4, #0]
    6db0:	f7fa fa00 	bl	11b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6db4:	2800      	cmp	r0, #0
    6db6:	d005      	beq.n	6dc4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    6db8:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    6dbc:	2039      	movs	r0, #57	; 0x39
    6dbe:	f7f9 fdf7 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dc2:	2009      	movs	r0, #9
    6dc4:	b006      	add	sp, #24
    6dc6:	bd70      	pop	{r4, r5, r6, pc}
    6dc8:	20001408 	.word	0x20001408

00006dcc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    6dcc:	b510      	push	{r4, lr}
    6dce:	2005      	movs	r0, #5
    6dd0:	f000 fa2c 	bl	722c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    6dd4:	f7fd ff84 	bl	4ce0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    6dd8:	4902      	ldr	r1, [pc, #8]	; (6de4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    6dda:	4801      	ldr	r0, [pc, #4]	; (6de0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    6ddc:	6048      	str	r0, [r1, #4]
    6dde:	bd10      	pop	{r4, pc}
    6de0:	00006c29 	.word	0x00006c29
    6de4:	20000294 	.word	0x20000294
    6de8:	b51c      	push	{r2, r3, r4, lr}
    6dea:	4909      	ldr	r1, [pc, #36]	; (6e10 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    6dec:	e9d1 0100 	ldrd	r0, r1, [r1]
    6df0:	e9cd 0100 	strd	r0, r1, [sp]
    6df4:	e005      	b.n	6e02 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    6df6:	9800      	ldr	r0, [sp, #0]
    6df8:	f007 fdde 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6dfc:	b108      	cbz	r0, 6e02 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    6dfe:	2001      	movs	r0, #1
    6e00:	bd1c      	pop	{r2, r3, r4, pc}
    6e02:	4668      	mov	r0, sp
    6e04:	f7fa f954 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6e08:	2800      	cmp	r0, #0
    6e0a:	d0f4      	beq.n	6df6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    6e0c:	2000      	movs	r0, #0
    6e0e:	bd1c      	pop	{r2, r3, r4, pc}
    6e10:	00007108 	.word	0x00007108
    6e14:	b510      	push	{r4, lr}
    6e16:	480d      	ldr	r0, [pc, #52]	; (6e4c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>)
    6e18:	2100      	movs	r1, #0
    6e1a:	4b0d      	ldr	r3, [pc, #52]	; (6e50 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>)
    6e1c:	74c1      	strb	r1, [r0, #19]
    6e1e:	8281      	strh	r1, [r0, #20]
    6e20:	221b      	movs	r2, #27
    6e22:	801a      	strh	r2, [r3, #0]
    6e24:	f44f 74a4 	mov.w	r4, #328	; 0x148
    6e28:	805c      	strh	r4, [r3, #2]
    6e2a:	809a      	strh	r2, [r3, #4]
    6e2c:	80dc      	strh	r4, [r3, #6]
    6e2e:	7381      	strb	r1, [r0, #14]
    6e30:	73c1      	strb	r1, [r0, #15]
    6e32:	2303      	movs	r3, #3
    6e34:	7003      	strb	r3, [r0, #0]
    6e36:	2302      	movs	r3, #2
    6e38:	7043      	strb	r3, [r0, #1]
    6e3a:	8042      	strh	r2, [r0, #2]
    6e3c:	8082      	strh	r2, [r0, #4]
    6e3e:	f640 62a6 	movw	r2, #3750	; 0xea6
    6e42:	6082      	str	r2, [r0, #8]
    6e44:	7481      	strb	r1, [r0, #18]
    6e46:	7301      	strb	r1, [r0, #12]
    6e48:	bd10      	pop	{r4, pc}
    6e4a:	0000      	.short	0x0000
    6e4c:	20001408 	.word	0x20001408
    6e50:	2000029c 	.word	0x2000029c
    6e54:	b510      	push	{r4, lr}
    6e56:	2101      	movs	r1, #1
    6e58:	2000      	movs	r0, #0
    6e5a:	f7fa f8d7 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6e5e:	0004      	movs	r4, r0
    6e60:	d10a      	bne.n	6e78 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xac>
    6e62:	2101      	movs	r1, #1
    6e64:	f7fa f89a 	bl	f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6e68:	0004      	movs	r4, r0
    6e6a:	d007      	beq.n	6e7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    6e6c:	4806      	ldr	r0, [pc, #24]	; (6e88 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>)
    6e6e:	f990 1000 	ldrsb.w	r1, [r0]
    6e72:	4620      	mov	r0, r4
    6e74:	f007 fb75 	bl	e562 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6e78:	4620      	mov	r0, r4
    6e7a:	bd10      	pop	{r4, pc}
    6e7c:	f240 3113 	movw	r1, #787	; 0x313
    6e80:	2039      	movs	r0, #57	; 0x39
    6e82:	f7f9 fd95 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e86:	0000      	.short	0x0000
    6e88:	20000294 	.word	0x20000294

00006e8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    6e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e8e:	460c      	mov	r4, r1
    6e90:	4605      	mov	r5, r0
    6e92:	f007 fbd4 	bl	e63e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    6e96:	b158      	cbz	r0, 6eb0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    6e98:	4628      	mov	r0, r5
    6e9a:	f007 fbc3 	bl	e624 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6e9e:	b148      	cbz	r0, 6eb4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    6ea0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6ea4:	2112      	movs	r1, #18
    6ea6:	b108      	cbz	r0, 6eac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    6ea8:	2880      	cmp	r0, #128	; 0x80
    6eaa:	d903      	bls.n	6eb4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    6eac:	4608      	mov	r0, r1
    6eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6eb0:	2142      	movs	r1, #66	; 0x42
    6eb2:	e7fb      	b.n	6eac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    6eb4:	4628      	mov	r0, r5
    6eb6:	f007 fba6 	bl	e606 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    6eba:	b120      	cbz	r0, 6ec6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6ebc:	4628      	mov	r0, r5
    6ebe:	f007 fb11 	bl	e4e4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    6ec2:	b110      	cbz	r0, 6eca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    6ec4:	e005      	b.n	6ed2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    6ec6:	210c      	movs	r1, #12
    6ec8:	e7f0      	b.n	6eac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    6eca:	4628      	mov	r0, r5
    6ecc:	f007 fba4 	bl	e618 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    6ed0:	b120      	cbz	r0, 6edc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    6ed2:	4628      	mov	r0, r5
    6ed4:	f007 fd70 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6ed8:	b930      	cbnz	r0, 6ee8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    6eda:	e001      	b.n	6ee0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    6edc:	2012      	movs	r0, #18
    6ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ee0:	4628      	mov	r0, r5
    6ee2:	f007 fb1a 	bl	e51a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    6ee6:	b108      	cbz	r0, 6eec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    6ee8:	200c      	movs	r0, #12
    6eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6eec:	4628      	mov	r0, r5
    6eee:	f7fc fa0b 	bl	3308 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    6ef2:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    6ef6:	f242 7010 	movw	r0, #10000	; 0x2710
    6efa:	4346      	muls	r6, r0
    6efc:	78e1      	ldrb	r1, [r4, #3]
    6efe:	4628      	mov	r0, r5
    6f00:	f007 fb78 	bl	e5f4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    6f04:	4628      	mov	r0, r5
    6f06:	f007 fb89 	bl	e61c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    6f0a:	b1a8      	cbz	r0, 6f38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    6f0c:	2100      	movs	r1, #0
    6f0e:	4668      	mov	r0, sp
    6f10:	f7fa f8f0 	bl	10f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    6f14:	0004      	movs	r4, r0
    6f16:	d019      	beq.n	6f4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    6f18:	2100      	movs	r1, #0
    6f1a:	f7fb fae7 	bl	24ec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    6f1e:	f8bd 0000 	ldrh.w	r0, [sp]
    6f22:	8020      	strh	r0, [r4, #0]
    6f24:	4621      	mov	r1, r4
    6f26:	4628      	mov	r0, r5
    6f28:	f007 fba0 	bl	e66c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    6f2c:	4628      	mov	r0, r5
    6f2e:	f007 fb7d 	bl	e62c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    6f32:	b168      	cbz	r0, 6f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    6f34:	2001      	movs	r0, #1
    6f36:	e00e      	b.n	6f56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    6f38:	4632      	mov	r2, r6
    6f3a:	2100      	movs	r1, #0
    6f3c:	4628      	mov	r0, r5
    6f3e:	f7fd f921 	bl	4184 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6f42:	2800      	cmp	r0, #0
    6f44:	d0d1      	beq.n	6eea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    6f46:	f241 7168 	movw	r1, #5992	; 0x1768
    6f4a:	e012      	b.n	6f72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    6f4c:	200d      	movs	r0, #13
    6f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f50:	4628      	mov	r0, r5
    6f52:	f007 fb89 	bl	e668 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6f56:	4601      	mov	r1, r0
    6f58:	4620      	mov	r0, r4
    6f5a:	f7ff fed1 	bl	6d00 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    6f5e:	2800      	cmp	r0, #0
    6f60:	d1f5      	bne.n	6f4e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    6f62:	4632      	mov	r2, r6
    6f64:	4621      	mov	r1, r4
    6f66:	4628      	mov	r0, r5
    6f68:	f7fd f90c 	bl	4184 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6f6c:	b120      	cbz	r0, 6f78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    6f6e:	f241 718b 	movw	r1, #6027	; 0x178b
    6f72:	2039      	movs	r0, #57	; 0x39
    6f74:	f7f9 fd1c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f78:	4804      	ldr	r0, [pc, #16]	; (6f8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    6f7a:	6843      	ldr	r3, [r0, #4]
    6f7c:	b123      	cbz	r3, 6f88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    6f7e:	2200      	movs	r2, #0
    6f80:	f504 7199 	add.w	r1, r4, #306	; 0x132
    6f84:	4620      	mov	r0, r4
    6f86:	4798      	blx	r3
    6f88:	2000      	movs	r0, #0
    6f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f8c:	20000294 	.word	0x20000294
    6f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f94:	b088      	sub	sp, #32
    6f96:	4604      	mov	r4, r0
    6f98:	8800      	ldrh	r0, [r0, #0]
    6f9a:	a906      	add	r1, sp, #24
    6f9c:	f006 fb75 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6fa0:	2800      	cmp	r0, #0
    6fa2:	d147      	bne.n	7034 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    6fa4:	9807      	ldr	r0, [sp, #28]
    6fa6:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    6faa:	f88d 1008 	strb.w	r1, [sp, #8]
    6fae:	9902      	ldr	r1, [sp, #8]
    6fb0:	9102      	str	r1, [sp, #8]
    6fb2:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6fb6:	3080      	adds	r0, #128	; 0x80
    6fb8:	b101      	cbz	r1, 6fbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    6fba:	2101      	movs	r1, #1
    6fbc:	f88d 100c 	strb.w	r1, [sp, #12]
    6fc0:	7b01      	ldrb	r1, [r0, #12]
    6fc2:	f04f 0800 	mov.w	r8, #0
    6fc6:	0689      	lsls	r1, r1, #26
    6fc8:	d502      	bpl.n	6fd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    6fca:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6fce:	b149      	cbz	r1, 6fe4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    6fd0:	f05f 0100 	movs.w	r1, #0
    6fd4:	f88d 1004 	strb.w	r1, [sp, #4]
    6fd8:	2105      	movs	r1, #5
    6fda:	306c      	adds	r0, #108	; 0x6c
    6fdc:	f008 f983 	bl	f2e6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    6fe0:	b110      	cbz	r0, 6fe8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    6fe2:	e004      	b.n	6fee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    6fe4:	2101      	movs	r1, #1
    6fe6:	e7f5      	b.n	6fd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    6fe8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6fec:	b308      	cbz	r0, 7032 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    6fee:	8921      	ldrh	r1, [r4, #8]
    6ff0:	88e0      	ldrh	r0, [r4, #6]
    6ff2:	f008 feec 	bl	fdce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    6ff6:	2800      	cmp	r0, #0
    6ff8:	d11c      	bne.n	7034 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    6ffa:	88a1      	ldrh	r1, [r4, #4]
    6ffc:	8860      	ldrh	r0, [r4, #2]
    6ffe:	f008 fee6 	bl	fdce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7002:	2800      	cmp	r0, #0
    7004:	d116      	bne.n	7034 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7006:	8921      	ldrh	r1, [r4, #8]
    7008:	88e0      	ldrh	r0, [r4, #6]
    700a:	f008 fed6 	bl	fdba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    700e:	2800      	cmp	r0, #0
    7010:	d110      	bne.n	7034 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7012:	88a1      	ldrh	r1, [r4, #4]
    7014:	8860      	ldrh	r0, [r4, #2]
    7016:	f008 fed0 	bl	fdba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    701a:	0006      	movs	r6, r0
    701c:	d10a      	bne.n	7034 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    701e:	9807      	ldr	r0, [sp, #28]
    7020:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7024:	27ff      	movs	r7, #255	; 0xff
    7026:	706f      	strb	r7, [r5, #1]
    7028:	f89d 100c 	ldrb.w	r1, [sp, #12]
    702c:	b129      	cbz	r1, 703a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    702e:	263a      	movs	r6, #58	; 0x3a
    7030:	e02e      	b.n	7090 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    7032:	201a      	movs	r0, #26
    7034:	b008      	add	sp, #32
    7036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    703a:	4641      	mov	r1, r8
    703c:	aa03      	add	r2, sp, #12
    703e:	f008 fed4 	bl	fdea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7042:	8861      	ldrh	r1, [r4, #2]
    7044:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7048:	4281      	cmp	r1, r0
    704a:	d200      	bcs.n	704e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    704c:	4608      	mov	r0, r1
    704e:	80e8      	strh	r0, [r5, #6]
    7050:	88a1      	ldrh	r1, [r4, #4]
    7052:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7056:	4281      	cmp	r1, r0
    7058:	d200      	bcs.n	705c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    705a:	4608      	mov	r0, r1
    705c:	8128      	strh	r0, [r5, #8]
    705e:	88e2      	ldrh	r2, [r4, #6]
    7060:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7064:	428a      	cmp	r2, r1
    7066:	d200      	bcs.n	706a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    7068:	4611      	mov	r1, r2
    706a:	8069      	strh	r1, [r5, #2]
    706c:	8922      	ldrh	r2, [r4, #8]
    706e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7072:	428a      	cmp	r2, r1
    7074:	d200      	bcs.n	7078 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    7076:	4611      	mov	r1, r2
    7078:	f640 0248 	movw	r2, #2120	; 0x848
    707c:	80a9      	strh	r1, [r5, #4]
    707e:	4291      	cmp	r1, r2
    7080:	d300      	bcc.n	7084 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    7082:	4611      	mov	r1, r2
    7084:	80a9      	strh	r1, [r5, #4]
    7086:	4290      	cmp	r0, r2
    7088:	d200      	bcs.n	708c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    708a:	4602      	mov	r2, r0
    708c:	812a      	strh	r2, [r5, #8]
    708e:	702f      	strb	r7, [r5, #0]
    7090:	f885 8001 	strb.w	r8, [r5, #1]
    7094:	4630      	mov	r0, r6
    7096:	e7cd      	b.n	7034 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7098:	b51c      	push	{r2, r3, r4, lr}
    709a:	490c      	ldr	r1, [pc, #48]	; (70cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
    709c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    70a0:	e9cd 0100 	strd	r0, r1, [sp]
    70a4:	e00a      	b.n	70bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    70a6:	9c00      	ldr	r4, [sp, #0]
    70a8:	4620      	mov	r0, r4
    70aa:	f007 fc85 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    70ae:	b128      	cbz	r0, 70bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    70b0:	4620      	mov	r0, r4
    70b2:	f007 faea 	bl	e68a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    70b6:	b108      	cbz	r0, 70bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    70b8:	2001      	movs	r0, #1
    70ba:	bd1c      	pop	{r2, r3, r4, pc}
    70bc:	4668      	mov	r0, sp
    70be:	f7f9 fff7 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    70c2:	2800      	cmp	r0, #0
    70c4:	d0ef      	beq.n	70a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
    70c6:	2000      	movs	r0, #0
    70c8:	bd1c      	pop	{r2, r3, r4, pc}
    70ca:	0000      	.short	0x0000
    70cc:	00007108 	.word	0x00007108
    70d0:	b510      	push	{r4, lr}
    70d2:	4604      	mov	r4, r0
    70d4:	88c1      	ldrh	r1, [r0, #6]
    70d6:	8880      	ldrh	r0, [r0, #4]
    70d8:	f008 fe79 	bl	fdce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    70dc:	2800      	cmp	r0, #0
    70de:	d10f      	bne.n	7100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    70e0:	8861      	ldrh	r1, [r4, #2]
    70e2:	8820      	ldrh	r0, [r4, #0]
    70e4:	f008 fe73 	bl	fdce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    70e8:	2800      	cmp	r0, #0
    70ea:	d109      	bne.n	7100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    70ec:	4805      	ldr	r0, [pc, #20]	; (7104 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
    70ee:	88a1      	ldrh	r1, [r4, #4]
    70f0:	8081      	strh	r1, [r0, #4]
    70f2:	8821      	ldrh	r1, [r4, #0]
    70f4:	8001      	strh	r1, [r0, #0]
    70f6:	88e1      	ldrh	r1, [r4, #6]
    70f8:	80c1      	strh	r1, [r0, #6]
    70fa:	8861      	ldrh	r1, [r4, #2]
    70fc:	8041      	strh	r1, [r0, #2]
    70fe:	2000      	movs	r0, #0
    7100:	bd10      	pop	{r4, pc}
    7102:	0000      	.short	0x0000
    7104:	2000029c 	.word	0x2000029c
    7108:	00000000 	.word	0x00000000
    710c:	00010000 	.word	0x00010000
    7110:	00000000 	.word	0x00000000
    7114:	00010000 	.word	0x00010000
    7118:	0d10770d 	.word	0x0d10770d
    711c:	10770059 	.word	0x10770059
    7120:	00000000 	.word	0x00000000
    7124:	00010000 	.word	0x00010000
    7128:	00000000 	.word	0x00000000
    712c:	00010000 	.word	0x00010000

00007130 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7130:	b510      	push	{r4, lr}
    7132:	f7fb fc77 	bl	2a24 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7136:	4c05      	ldr	r4, [pc, #20]	; (714c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7138:	6860      	ldr	r0, [r4, #4]
    713a:	f008 ff50 	bl	ffde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    713e:	f008 fceb 	bl	fb18 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    7142:	f7fb fe1d 	bl	2d80 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7146:	2001      	movs	r0, #1
    7148:	7020      	strb	r0, [r4, #0]
    714a:	bd10      	pop	{r4, pc}
    714c:	200002a4 	.word	0x200002a4

00007150 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    7150:	4801      	ldr	r0, [pc, #4]	; (7158 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    7152:	7800      	ldrb	r0, [r0, #0]
    7154:	4770      	bx	lr
    7156:	0000      	.short	0x0000
    7158:	200002a4 	.word	0x200002a4

0000715c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    715c:	b510      	push	{r4, lr}
    715e:	4c06      	ldr	r4, [pc, #24]	; (7178 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    7160:	68a0      	ldr	r0, [r4, #8]
    7162:	f008 ff3c 	bl	ffde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    7166:	68e0      	ldr	r0, [r4, #12]
    7168:	f008 ff39 	bl	ffde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    716c:	f008 fd3e 	bl	fbec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7170:	2000      	movs	r0, #0
    7172:	7020      	strb	r0, [r4, #0]
    7174:	bd10      	pop	{r4, pc}
    7176:	0000      	.short	0x0000
    7178:	200002a4 	.word	0x200002a4

0000717c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    717c:	b510      	push	{r4, lr}
    717e:	4905      	ldr	r1, [pc, #20]	; (7194 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    7180:	4805      	ldr	r0, [pc, #20]	; (7198 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7182:	f008 ff1f 	bl	ffc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7186:	4804      	ldr	r0, [pc, #16]	; (7198 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    718c:	4903      	ldr	r1, [pc, #12]	; (719c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    718e:	1d00      	adds	r0, r0, #4
    7190:	f008 bf18 	b.w	ffc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7194:	200002b4 	.word	0x200002b4
    7198:	200002a8 	.word	0x200002a8
    719c:	200002bc 	.word	0x200002bc

000071a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    71a0:	b510      	push	{r4, lr}
    71a2:	4908      	ldr	r1, [pc, #32]	; (71c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    71a4:	4808      	ldr	r0, [pc, #32]	; (71c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    71a6:	f008 ff0d 	bl	ffc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    71aa:	4807      	ldr	r0, [pc, #28]	; (71c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    71ac:	4907      	ldr	r1, [pc, #28]	; (71cc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    71ae:	1d00      	adds	r0, r0, #4
    71b0:	f008 ff08 	bl	ffc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    71b4:	4804      	ldr	r0, [pc, #16]	; (71c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    71b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71ba:	4905      	ldr	r1, [pc, #20]	; (71d0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    71bc:	3008      	adds	r0, #8
    71be:	f008 bf01 	b.w	ffc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    71c2:	0000      	.short	0x0000
    71c4:	200002cc 	.word	0x200002cc
    71c8:	200002a8 	.word	0x200002a8
    71cc:	200002d4 	.word	0x200002d4
    71d0:	200002c4 	.word	0x200002c4

000071d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    71d4:	4801      	ldr	r0, [pc, #4]	; (71dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    71d6:	7840      	ldrb	r0, [r0, #1]
    71d8:	4770      	bx	lr
    71da:	0000      	.short	0x0000
    71dc:	200002a4 	.word	0x200002a4
    71e0:	b510      	push	{r4, lr}
    71e2:	f7fc f9b3 	bl	354c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    71e6:	f7fd f87d 	bl	42e4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    71ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71ee:	4801      	ldr	r0, [pc, #4]	; (71f4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    71f0:	f7fc b992 	b.w	3518 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    71f4:	200016a0 	.word	0x200016a0
    71f8:	490a      	ldr	r1, [pc, #40]	; (7224 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    71fa:	b510      	push	{r4, lr}
    71fc:	2001      	movs	r0, #1
    71fe:	7048      	strb	r0, [r1, #1]
    7200:	f7fc f9d4 	bl	35ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    7204:	f7fd fd84 	bl	4d10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    7208:	f006 f97d 	bl	d506 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    720c:	4906      	ldr	r1, [pc, #24]	; (7228 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    720e:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    7212:	f7fa fb7f 	bl	1914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    7216:	2000      	movs	r0, #0
    7218:	f005 ffc3 	bl	d1a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    721c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7220:	f7fb bc06 	b.w	2a30 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7224:	200002a4 	.word	0x200002a4
    7228:	200017a2 	.word	0x200017a2

0000722c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    722c:	4a04      	ldr	r2, [pc, #16]	; (7240 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    722e:	08c1      	lsrs	r1, r0, #3
    7230:	f000 0307 	and.w	r3, r0, #7
    7234:	2001      	movs	r0, #1
    7236:	4098      	lsls	r0, r3
    7238:	5c53      	ldrb	r3, [r2, r1]
    723a:	4303      	orrs	r3, r0
    723c:	5453      	strb	r3, [r2, r1]
    723e:	4770      	bx	lr
    7240:	20000020 	.word	0x20000020

00007244 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7244:	4901      	ldr	r1, [pc, #4]	; (724c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7246:	e9d1 0100 	ldrd	r0, r1, [r1]
    724a:	4770      	bx	lr
    724c:	20000020 	.word	0x20000020

00007250 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7250:	4806      	ldr	r0, [pc, #24]	; (726c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7252:	8801      	ldrh	r1, [r0, #0]
    7254:	7900      	ldrb	r0, [r0, #4]
    7256:	0602      	lsls	r2, r0, #24
    7258:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    725c:	f000 0001 	and.w	r0, r0, #1
    7260:	1800      	adds	r0, r0, r0
    7262:	b2c0      	uxtb	r0, r0
    7264:	f040 0001 	orr.w	r0, r0, #1
    7268:	4770      	bx	lr
    726a:	0000      	.short	0x0000
    726c:	20000020 	.word	0x20000020

00007270 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7270:	b510      	push	{r4, lr}
    7272:	f004 fd35 	bl	bce0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7276:	2200      	movs	r2, #0
    7278:	4b08      	ldr	r3, [pc, #32]	; (729c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    727a:	4611      	mov	r1, r2
    727c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7280:	4284      	cmp	r4, r0
    7282:	d303      	bcc.n	728c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7284:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7288:	7882      	ldrb	r2, [r0, #2]
    728a:	e003      	b.n	7294 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    728c:	1c49      	adds	r1, r1, #1
    728e:	b2c9      	uxtb	r1, r1
    7290:	290c      	cmp	r1, #12
    7292:	d3f3      	bcc.n	727c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7294:	4802      	ldr	r0, [pc, #8]	; (72a0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7296:	7002      	strb	r2, [r0, #0]
    7298:	bd10      	pop	{r4, pc}
    729a:	0000      	.short	0x0000
    729c:	00010030 	.word	0x00010030
    72a0:	20000373 	.word	0x20000373

000072a4 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    72a4:	b570      	push	{r4, r5, r6, lr}
    72a6:	6845      	ldr	r5, [r0, #4]
    72a8:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    72ac:	8828      	ldrh	r0, [r5, #0]
    72ae:	f826 0902 	strh.w	r0, [r6], #-2
    72b2:	f505 7498 	add.w	r4, r5, #304	; 0x130
    72b6:	7031      	strb	r1, [r6, #0]
    72b8:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    72bc:	f008 feec 	bl	10098 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    72c0:	7130      	strb	r0, [r6, #4]
    72c2:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    72c6:	f008 fee7 	bl	10098 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    72ca:	f806 0f05 	strb.w	r0, [r6, #5]!
    72ce:	2202      	movs	r2, #2
    72d0:	4903      	ldr	r1, [pc, #12]	; (72e0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    72d2:	f1a6 000f 	sub.w	r0, r6, #15
    72d6:	f006 fdab 	bl	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    72da:	2000      	movs	r0, #0
    72dc:	7320      	strb	r0, [r4, #12]
    72de:	bd70      	pop	{r4, r5, r6, pc}
    72e0:	00010085 	.word	0x00010085

000072e4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    72e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    72e6:	460e      	mov	r6, r1
    72e8:	4604      	mov	r4, r0
    72ea:	f7fb fa63 	bl	27b4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    72ee:	2500      	movs	r5, #0
    72f0:	b320      	cbz	r0, 733c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    72f2:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    72f6:	a902      	add	r1, sp, #8
    72f8:	8820      	ldrh	r0, [r4, #0]
    72fa:	f8ad 0000 	strh.w	r0, [sp]
    72fe:	f006 f9c4 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7302:	b108      	cbz	r0, 7308 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7304:	2126      	movs	r1, #38	; 0x26
    7306:	e010      	b.n	732a <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7308:	9803      	ldr	r0, [sp, #12]
    730a:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    730e:	f88d 1002 	strb.w	r1, [sp, #2]
    7312:	7841      	ldrb	r1, [r0, #1]
    7314:	f88d 1003 	strb.w	r1, [sp, #3]
    7318:	8840      	ldrh	r0, [r0, #2]
    731a:	f8ad 0004 	strh.w	r0, [sp, #4]
    731e:	2102      	movs	r1, #2
    7320:	4668      	mov	r0, sp
    7322:	f008 fbfb 	bl	fb1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7326:	b118      	cbz	r0, 7330 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7328:	213c      	movs	r1, #60	; 0x3c
    732a:	207e      	movs	r0, #126	; 0x7e
    732c:	f7f9 fb40 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7330:	f8cd 5000 	str.w	r5, [sp]
    7334:	f8bd 0000 	ldrh.w	r0, [sp]
    7338:	b004      	add	sp, #16
    733a:	bd70      	pop	{r4, r5, r6, pc}
    733c:	201c      	movs	r0, #28
    733e:	7030      	strb	r0, [r6, #0]
    7340:	7075      	strb	r5, [r6, #1]
    7342:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7346:	6070      	str	r0, [r6, #4]
    7348:	4801      	ldr	r0, [pc, #4]	; (7350 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    734a:	6800      	ldr	r0, [r0, #0]
    734c:	9000      	str	r0, [sp, #0]
    734e:	e7f1      	b.n	7334 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    7350:	00007354 	.word	0x00007354
    7354:	00000004 	.word	0x00000004

00007358 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7358:	b570      	push	{r4, r5, r6, lr}
    735a:	4605      	mov	r5, r0
    735c:	4616      	mov	r6, r2
    735e:	460c      	mov	r4, r1
    7360:	2002      	movs	r0, #2
    7362:	f000 f9b7 	bl	76d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7366:	4906      	ldr	r1, [pc, #24]	; (7380 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7368:	2001      	movs	r0, #1
    736a:	1ef6      	subs	r6, r6, #3
    736c:	7008      	strb	r0, [r1, #0]
    736e:	4805      	ldr	r0, [pc, #20]	; (7384 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7370:	6006      	str	r6, [r0, #0]
    7372:	4804      	ldr	r0, [pc, #16]	; (7384 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7374:	3808      	subs	r0, #8
    7376:	6005      	str	r5, [r0, #0]
    7378:	1f00      	subs	r0, r0, #4
    737a:	6004      	str	r4, [r0, #0]
    737c:	bd70      	pop	{r4, r5, r6, pc}
    737e:	0000      	.short	0x0000
    7380:	20000374 	.word	0x20000374
    7384:	4000f510 	.word	0x4000f510

00007388 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7388:	b510      	push	{r4, lr}
    738a:	4c0c      	ldr	r4, [pc, #48]	; (73bc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    738c:	7820      	ldrb	r0, [r4, #0]
    738e:	b180      	cbz	r0, 73b2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7390:	490b      	ldr	r1, [pc, #44]	; (73c0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7392:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7396:	6008      	str	r0, [r1, #0]
    7398:	f000 f86a 	bl	7470 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    739c:	2100      	movs	r1, #0
    739e:	b120      	cbz	r0, 73aa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    73a0:	2001      	movs	r0, #1
    73a2:	7060      	strb	r0, [r4, #1]
    73a4:	4807      	ldr	r0, [pc, #28]	; (73c4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    73a6:	6800      	ldr	r0, [r0, #0]
    73a8:	e001      	b.n	73ae <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    73aa:	7061      	strb	r1, [r4, #1]
    73ac:	2010      	movs	r0, #16
    73ae:	70a0      	strb	r0, [r4, #2]
    73b0:	7021      	strb	r1, [r4, #0]
    73b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73b6:	2000      	movs	r0, #0
    73b8:	f000 b98c 	b.w	76d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    73bc:	20000374 	.word	0x20000374
    73c0:	4001f508 	.word	0x4001f508
    73c4:	4000f400 	.word	0x4000f400

000073c8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    73c8:	b510      	push	{r4, lr}
    73ca:	2002      	movs	r0, #2
    73cc:	f000 f982 	bl	76d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    73d0:	4904      	ldr	r1, [pc, #16]	; (73e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    73d2:	2001      	movs	r0, #1
    73d4:	7008      	strb	r0, [r1, #0]
    73d6:	f000 f859 	bl	748c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    73da:	4903      	ldr	r1, [pc, #12]	; (73e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    73dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    73e0:	6008      	str	r0, [r1, #0]
    73e2:	bd10      	pop	{r4, pc}
    73e4:	20000374 	.word	0x20000374
    73e8:	4001f504 	.word	0x4001f504

000073ec <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    73ec:	4803      	ldr	r0, [pc, #12]	; (73fc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    73ee:	2100      	movs	r1, #0
    73f0:	7001      	strb	r1, [r0, #0]
    73f2:	7041      	strb	r1, [r0, #1]
    73f4:	2110      	movs	r1, #16
    73f6:	7081      	strb	r1, [r0, #2]
    73f8:	4770      	bx	lr
    73fa:	0000      	.short	0x0000
    73fc:	20000374 	.word	0x20000374

00007400 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7400:	4807      	ldr	r0, [pc, #28]	; (7420 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7402:	b510      	push	{r4, lr}
    7404:	7801      	ldrb	r1, [r0, #0]
    7406:	b141      	cbz	r1, 741a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7408:	f000 f832 	bl	7470 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    740c:	b118      	cbz	r0, 7416 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    740e:	4805      	ldr	r0, [pc, #20]	; (7424 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7410:	6800      	ldr	r0, [r0, #0]
    7412:	b2c0      	uxtb	r0, r0
    7414:	bd10      	pop	{r4, pc}
    7416:	2010      	movs	r0, #16
    7418:	bd10      	pop	{r4, pc}
    741a:	7880      	ldrb	r0, [r0, #2]
    741c:	bd10      	pop	{r4, pc}
    741e:	0000      	.short	0x0000
    7420:	20000374 	.word	0x20000374
    7424:	4000f400 	.word	0x4000f400

00007428 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7428:	4808      	ldr	r0, [pc, #32]	; (744c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    742a:	b510      	push	{r4, lr}
    742c:	7801      	ldrb	r1, [r0, #0]
    742e:	b159      	cbz	r1, 7448 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7430:	4807      	ldr	r0, [pc, #28]	; (7450 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7432:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7436:	b128      	cbz	r0, 7444 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7438:	f000 f80c 	bl	7454 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    743c:	2800      	cmp	r0, #0
    743e:	d000      	beq.n	7442 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7440:	2001      	movs	r0, #1
    7442:	bd10      	pop	{r4, pc}
    7444:	2002      	movs	r0, #2
    7446:	bd10      	pop	{r4, pc}
    7448:	7840      	ldrb	r0, [r0, #1]
    744a:	bd10      	pop	{r4, pc}
    744c:	20000374 	.word	0x20000374
    7450:	4000f000 	.word	0x4000f000
    7454:	4805      	ldr	r0, [pc, #20]	; (746c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7456:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    745a:	b111      	cbz	r1, 7462 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    745c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7460:	b108      	cbz	r0, 7466 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7462:	2000      	movs	r0, #0
    7464:	4770      	bx	lr
    7466:	2001      	movs	r0, #1
    7468:	4770      	bx	lr
    746a:	0000      	.short	0x0000
    746c:	4000f000 	.word	0x4000f000
    7470:	4805      	ldr	r0, [pc, #20]	; (7488 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7472:	b510      	push	{r4, lr}
    7474:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7478:	b120      	cbz	r0, 7484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    747a:	f7ff ffeb 	bl	7454 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    747e:	b108      	cbz	r0, 7484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7480:	2001      	movs	r0, #1
    7482:	bd10      	pop	{r4, pc}
    7484:	2000      	movs	r0, #0
    7486:	bd10      	pop	{r4, pc}
    7488:	4000f000 	.word	0x4000f000
    748c:	4804      	ldr	r0, [pc, #16]	; (74a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    748e:	2100      	movs	r1, #0
    7490:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7494:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7498:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    749c:	4770      	bx	lr
    749e:	0000      	.short	0x0000
    74a0:	4000f000 	.word	0x4000f000

000074a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    74a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74a8:	4604      	mov	r4, r0
    74aa:	461e      	mov	r6, r3
    74ac:	4690      	mov	r8, r2
    74ae:	460f      	mov	r7, r1
    74b0:	2001      	movs	r0, #1
    74b2:	f000 f90f 	bl	76d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    74b6:	4d1e      	ldr	r5, [pc, #120]	; (7530 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    74b8:	481e      	ldr	r0, [pc, #120]	; (7534 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    74ba:	f004 0103 	and.w	r1, r4, #3
    74be:	712e      	strb	r6, [r5, #4]
    74c0:	6800      	ldr	r0, [r0, #0]
    74c2:	0432      	lsls	r2, r6, #16
    74c4:	f361 0007 	bfi	r0, r1, #0, #8
    74c8:	f366 200f 	bfi	r0, r6, #8, #8
    74cc:	0c00      	lsrs	r0, r0, #16
    74ce:	4e1a      	ldr	r6, [pc, #104]	; (7538 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    74d0:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    74d4:	4308      	orrs	r0, r1
    74d6:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    74da:	4818      	ldr	r0, [pc, #96]	; (753c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    74dc:	6007      	str	r7, [r0, #0]
    74de:	f008 ff84 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    74e2:	b938      	cbnz	r0, 74f4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    74e4:	4815      	ldr	r0, [pc, #84]	; (753c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    74e6:	3010      	adds	r0, #16
    74e8:	6801      	ldr	r1, [r0, #0]
    74ea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    74ee:	ea41 0108 	orr.w	r1, r1, r8
    74f2:	6001      	str	r1, [r0, #0]
    74f4:	f000 f8e4 	bl	76c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    74f8:	b10c      	cbz	r4, 74fe <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    74fa:	2c04      	cmp	r4, #4
    74fc:	d107      	bne.n	750e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    74fe:	4811      	ldr	r0, [pc, #68]	; (7544 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7500:	490d      	ldr	r1, [pc, #52]	; (7538 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7502:	4a0f      	ldr	r2, [pc, #60]	; (7540 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7504:	1d09      	adds	r1, r1, #4
    7506:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    750a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    750e:	2001      	movs	r0, #1
    7510:	7068      	strb	r0, [r5, #1]
    7512:	70ec      	strb	r4, [r5, #3]
    7514:	b11c      	cbz	r4, 751e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7516:	2c01      	cmp	r4, #1
    7518:	d001      	beq.n	751e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    751a:	2c02      	cmp	r4, #2
    751c:	d106      	bne.n	752c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    751e:	7028      	strb	r0, [r5, #0]
    7520:	2100      	movs	r1, #0
    7522:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7526:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    752a:	6030      	str	r0, [r6, #0]
    752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7530:	20000377 	.word	0x20000377
    7534:	000076d0 	.word	0x000076d0
    7538:	4000f000 	.word	0x4000f000
    753c:	4000f508 	.word	0x4000f508
    7540:	4000f100 	.word	0x4000f100
    7544:	4001f088 	.word	0x4001f088

00007548 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7548:	b570      	push	{r4, r5, r6, lr}
    754a:	4a1c      	ldr	r2, [pc, #112]	; (75bc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    754c:	7853      	ldrb	r3, [r2, #1]
    754e:	b1a3      	cbz	r3, 757a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7550:	4b1b      	ldr	r3, [pc, #108]	; (75c0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7552:	6019      	str	r1, [r3, #0]
    7554:	1d19      	adds	r1, r3, #4
    7556:	6008      	str	r0, [r1, #0]
    7558:	2501      	movs	r5, #1
    755a:	7095      	strb	r5, [r2, #2]
    755c:	4610      	mov	r0, r2
    755e:	78d6      	ldrb	r6, [r2, #3]
    7560:	4b18      	ldr	r3, [pc, #96]	; (75c4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7562:	7800      	ldrb	r0, [r0, #0]
    7564:	4c18      	ldr	r4, [pc, #96]	; (75c8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7566:	2100      	movs	r1, #0
    7568:	b156      	cbz	r6, 7580 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    756a:	2e04      	cmp	r6, #4
    756c:	d01b      	beq.n	75a6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    756e:	b308      	cbz	r0, 75b4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7570:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7574:	0668      	lsls	r0, r5, #25
    7576:	6018      	str	r0, [r3, #0]
    7578:	bd70      	pop	{r4, r5, r6, pc}
    757a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    757e:	e01a      	b.n	75b6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7580:	b178      	cbz	r0, 75a2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7582:	4620      	mov	r0, r4
    7584:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7588:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    758c:	601e      	str	r6, [r3, #0]
    758e:	1271      	asrs	r1, r6, #9
    7590:	f008 fdaa 	bl	100e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7594:	2800      	cmp	r0, #0
    7596:	d0ef      	beq.n	7578 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7598:	6065      	str	r5, [r4, #4]
    759a:	480a      	ldr	r0, [pc, #40]	; (75c4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    759c:	1d00      	adds	r0, r0, #4
    759e:	6006      	str	r6, [r0, #0]
    75a0:	bd70      	pop	{r4, r5, r6, pc}
    75a2:	21d5      	movs	r1, #213	; 0xd5
    75a4:	e007      	b.n	75b6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    75a6:	7015      	strb	r5, [r2, #0]
    75a8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    75ac:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    75b0:	6025      	str	r5, [r4, #0]
    75b2:	bd70      	pop	{r4, r5, r6, pc}
    75b4:	21e8      	movs	r1, #232	; 0xe8
    75b6:	203c      	movs	r0, #60	; 0x3c
    75b8:	f7f9 f9fa 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75bc:	20000377 	.word	0x20000377
    75c0:	4000f50c 	.word	0x4000f50c
    75c4:	4001f504 	.word	0x4001f504
    75c8:	4000f000 	.word	0x4000f000

000075cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    75cc:	b570      	push	{r4, r5, r6, lr}
    75ce:	4d05      	ldr	r5, [pc, #20]	; (75e4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    75d0:	2400      	movs	r4, #0
    75d2:	7828      	ldrb	r0, [r5, #0]
    75d4:	b110      	cbz	r0, 75dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    75d6:	f000 f873 	bl	76c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    75da:	702c      	strb	r4, [r5, #0]
    75dc:	706c      	strb	r4, [r5, #1]
    75de:	70ac      	strb	r4, [r5, #2]
    75e0:	bd70      	pop	{r4, r5, r6, pc}
    75e2:	0000      	.short	0x0000
    75e4:	20000377 	.word	0x20000377

000075e8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    75e8:	4802      	ldr	r0, [pc, #8]	; (75f4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    75ea:	2100      	movs	r1, #0
    75ec:	7001      	strb	r1, [r0, #0]
    75ee:	7041      	strb	r1, [r0, #1]
    75f0:	7081      	strb	r1, [r0, #2]
    75f2:	4770      	bx	lr
    75f4:	20000377 	.word	0x20000377

000075f8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    75f8:	480b      	ldr	r0, [pc, #44]	; (7628 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    75fa:	b510      	push	{r4, lr}
    75fc:	7800      	ldrb	r0, [r0, #0]
    75fe:	b158      	cbz	r0, 7618 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7600:	f44f 7182 	mov.w	r1, #260	; 0x104
    7604:	4809      	ldr	r0, [pc, #36]	; (762c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7606:	f008 fd6f 	bl	100e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    760a:	b140      	cbz	r0, 761e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    760c:	4808      	ldr	r0, [pc, #32]	; (7630 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    760e:	6800      	ldr	r0, [r0, #0]
    7610:	2800      	cmp	r0, #0
    7612:	d000      	beq.n	7616 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7614:	2001      	movs	r0, #1
    7616:	bd10      	pop	{r4, pc}
    7618:	f240 215e 	movw	r1, #606	; 0x25e
    761c:	e001      	b.n	7622 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    761e:	f240 215f 	movw	r1, #607	; 0x25f
    7622:	203c      	movs	r0, #60	; 0x3c
    7624:	f7f9 f9c4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7628:	20000377 	.word	0x20000377
    762c:	4000f000 	.word	0x4000f000
    7630:	4000f400 	.word	0x4000f400

00007634 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7634:	4801      	ldr	r0, [pc, #4]	; (763c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7636:	2101      	movs	r1, #1
    7638:	6081      	str	r1, [r0, #8]
    763a:	4770      	bx	lr
    763c:	4000f000 	.word	0x4000f000

00007640 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7644:	481b      	ldr	r0, [pc, #108]	; (76b4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7646:	7800      	ldrb	r0, [r0, #0]
    7648:	b1d8      	cbz	r0, 7682 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    764a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 76b8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    764e:	f44f 7682 	mov.w	r6, #260	; 0x104
    7652:	4631      	mov	r1, r6
    7654:	4640      	mov	r0, r8
    7656:	f008 fd47 	bl	100e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    765a:	2800      	cmp	r0, #0
    765c:	d128      	bne.n	76b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    765e:	2002      	movs	r0, #2
    7660:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7664:	4c15      	ldr	r4, [pc, #84]	; (76bc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7666:	6820      	ldr	r0, [r4, #0]
    7668:	43c0      	mvns	r0, r0
    766a:	f340 1500 	sbfx	r5, r0, #4, #1
    766e:	6820      	ldr	r0, [r4, #0]
    7670:	f040 0010 	orr.w	r0, r0, #16
    7674:	6020      	str	r0, [r4, #0]
    7676:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    767a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    767e:	1c6d      	adds	r5, r5, #1
    7680:	e008      	b.n	7694 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7682:	f240 216a 	movw	r1, #618	; 0x26a
    7686:	203c      	movs	r0, #60	; 0x3c
    7688:	f7f9 f992 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    768c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7690:	f008 feeb 	bl	1046a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7694:	4631      	mov	r1, r6
    7696:	4640      	mov	r0, r8
    7698:	f008 fd26 	bl	100e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    769c:	2800      	cmp	r0, #0
    769e:	d0f5      	beq.n	768c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    76a0:	b91d      	cbnz	r5, 76aa <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    76a2:	6820      	ldr	r0, [r4, #0]
    76a4:	f020 0010 	bic.w	r0, r0, #16
    76a8:	6020      	str	r0, [r4, #0]
    76aa:	2002      	movs	r0, #2
    76ac:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    76b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76b4:	20000377 	.word	0x20000377
    76b8:	4000f000 	.word	0x4000f000
    76bc:	e000ed10 	.word	0xe000ed10
    76c0:	4902      	ldr	r1, [pc, #8]	; (76cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    76c2:	4801      	ldr	r0, [pc, #4]	; (76c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    76c4:	6008      	str	r0, [r1, #0]
    76c6:	4770      	bx	lr
    76c8:	02020000 	.word	0x02020000
    76cc:	4001f508 	.word	0x4001f508
    76d0:	00010000 	.word	0x00010000

000076d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    76d4:	b510      	push	{r4, lr}
    76d6:	4604      	mov	r4, r0
    76d8:	f000 f820 	bl	771c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    76dc:	2c00      	cmp	r4, #0
    76de:	d00e      	beq.n	76fe <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    76e0:	4a0b      	ldr	r2, [pc, #44]	; (7710 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    76e2:	480b      	ldr	r0, [pc, #44]	; (7710 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    76e4:	490b      	ldr	r1, [pc, #44]	; (7714 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    76e6:	3214      	adds	r2, #20
    76e8:	2c01      	cmp	r4, #1
    76ea:	d005      	beq.n	76f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    76ec:	2c02      	cmp	r4, #2
    76ee:	d007      	beq.n	7700 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    76f0:	2182      	movs	r1, #130	; 0x82
    76f2:	203d      	movs	r0, #61	; 0x3d
    76f4:	f7f9 f95c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76f8:	2302      	movs	r3, #2
    76fa:	6003      	str	r3, [r0, #0]
    76fc:	6011      	str	r1, [r2, #0]
    76fe:	bd10      	pop	{r4, pc}
    7700:	2303      	movs	r3, #3
    7702:	6003      	str	r3, [r0, #0]
    7704:	6011      	str	r1, [r2, #0]
    7706:	4904      	ldr	r1, [pc, #16]	; (7718 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7708:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    770c:	6008      	str	r0, [r1, #0]
    770e:	bd10      	pop	{r4, pc}
    7710:	4000f500 	.word	0x4000f500
    7714:	200018a4 	.word	0x200018a4
    7718:	4001f504 	.word	0x4001f504
    771c:	4805      	ldr	r0, [pc, #20]	; (7734 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    771e:	b510      	push	{r4, lr}
    7720:	2100      	movs	r1, #0
    7722:	6001      	str	r1, [r0, #0]
    7724:	6001      	str	r1, [r0, #0]
    7726:	f7ff ff51 	bl	75cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    772a:	4903      	ldr	r1, [pc, #12]	; (7738 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    772c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7730:	6008      	str	r0, [r1, #0]
    7732:	bd10      	pop	{r4, pc}
    7734:	4000f500 	.word	0x4000f500
    7738:	4001f508 	.word	0x4001f508

0000773c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    773c:	4805      	ldr	r0, [pc, #20]	; (7754 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    773e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7742:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7746:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    774a:	2100      	movs	r1, #0
    774c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7750:	4770      	bx	lr
    7752:	0000      	.short	0x0000
    7754:	40001000 	.word	0x40001000

00007758 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7758:	4904      	ldr	r1, [pc, #16]	; (776c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    775a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    775e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7762:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7766:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    776a:	4770      	bx	lr
    776c:	40001000 	.word	0x40001000

00007770 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7770:	4902      	ldr	r1, [pc, #8]	; (777c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7772:	5c08      	ldrb	r0, [r1, r0]
    7774:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7778:	4770      	bx	lr
    777a:	0000      	.short	0x0000
    777c:	00008412 	.word	0x00008412

00007780 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7782:	4c24      	ldr	r4, [pc, #144]	; (7814 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7784:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7788:	f010 0f10 	tst.w	r0, #16
    778c:	d001      	beq.n	7792 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    778e:	2701      	movs	r7, #1
    7790:	e000      	b.n	7794 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7792:	2700      	movs	r7, #0
    7794:	2010      	movs	r0, #16
    7796:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    779a:	2002      	movs	r0, #2
    779c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    77a0:	481d      	ldr	r0, [pc, #116]	; (7818 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    77a2:	2500      	movs	r5, #0
    77a4:	491d      	ldr	r1, [pc, #116]	; (781c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    77a6:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    77aa:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    77ae:	6008      	str	r0, [r1, #0]
    77b0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    77b4:	f44f 7688 	mov.w	r6, #272	; 0x110
    77b8:	f010 0fff 	tst.w	r0, #255	; 0xff
    77bc:	d019      	beq.n	77f2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    77be:	20ff      	movs	r0, #255	; 0xff
    77c0:	f88d 0000 	strb.w	r0, [sp]
    77c4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    77c8:	2001      	movs	r0, #1
    77ca:	6120      	str	r0, [r4, #16]
    77cc:	e005      	b.n	77da <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    77ce:	bf00      	nop
    77d0:	f89d 0000 	ldrb.w	r0, [sp]
    77d4:	1e40      	subs	r0, r0, #1
    77d6:	f88d 0000 	strb.w	r0, [sp]
    77da:	f89d 0000 	ldrb.w	r0, [sp]
    77de:	b128      	cbz	r0, 77ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    77e0:	4631      	mov	r1, r6
    77e2:	4620      	mov	r0, r4
    77e4:	f008 fcaf 	bl	10146 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    77e8:	2800      	cmp	r0, #0
    77ea:	d0f1      	beq.n	77d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    77ec:	f89d 0000 	ldrb.w	r0, [sp]
    77f0:	b158      	cbz	r0, 780a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    77f2:	f000 fc23 	bl	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    77f6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    77fa:	f000 fd8b 	bl	8314 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x314>
    77fe:	2f00      	cmp	r7, #0
    7800:	d002      	beq.n	7808 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7802:	2010      	movs	r0, #16
    7804:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    780a:	f640 0194 	movw	r1, #2196	; 0x894
    780e:	203e      	movs	r0, #62	; 0x3e
    7810:	f7f9 f8ce 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7814:	40001000 	.word	0x40001000
    7818:	20001470 	.word	0x20001470
    781c:	4001f508 	.word	0x4001f508

00007820 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7824:	4d18      	ldr	r5, [pc, #96]	; (7888 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7826:	4607      	mov	r7, r0
    7828:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    782c:	07c2      	lsls	r2, r0, #31
    782e:	d00f      	beq.n	7850 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7830:	4c16      	ldr	r4, [pc, #88]	; (788c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7832:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7836:	f042 0201 	orr.w	r2, r2, #1
    783a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    783e:	f040 0002 	orr.w	r0, r0, #2
    7842:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7846:	2601      	movs	r6, #1
    7848:	b13f      	cbz	r7, 785a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    784a:	2f01      	cmp	r7, #1
    784c:	d00b      	beq.n	7866 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    784e:	e010      	b.n	7872 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7850:	f240 716f 	movw	r1, #1903	; 0x76f
    7854:	203e      	movs	r0, #62	; 0x3e
    7856:	f7f9 f8ab 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    785a:	4608      	mov	r0, r1
    785c:	f000 fdb4 	bl	83c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    7860:	726e      	strb	r6, [r5, #9]
    7862:	6026      	str	r6, [r4, #0]
    7864:	e005      	b.n	7872 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7866:	4608      	mov	r0, r1
    7868:	f000 fd94 	bl	8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    786c:	2002      	movs	r0, #2
    786e:	7268      	strb	r0, [r5, #9]
    7870:	6066      	str	r6, [r4, #4]
    7872:	4807      	ldr	r0, [pc, #28]	; (7890 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7874:	64c6      	str	r6, [r0, #76]	; 0x4c
    7876:	4806      	ldr	r0, [pc, #24]	; (7890 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7878:	300c      	adds	r0, #12
    787a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    787e:	4638      	mov	r0, r7
    7880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7884:	f000 bd18 	b.w	82b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    7888:	20001470 	.word	0x20001470
    788c:	40001000 	.word	0x40001000
    7890:	40008000 	.word	0x40008000

00007894 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7898:	4c2c      	ldr	r4, [pc, #176]	; (794c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    789a:	0006      	movs	r6, r0
    789c:	4d2c      	ldr	r5, [pc, #176]	; (7950 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    789e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    78a2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7954 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    78a6:	f040 0002 	orr.w	r0, r0, #2
    78aa:	4689      	mov	r9, r1
    78ac:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    78b0:	f04f 0700 	mov.w	r7, #0
    78b4:	d002      	beq.n	78bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    78b6:	2e01      	cmp	r6, #1
    78b8:	d020      	beq.n	78fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    78ba:	e036      	b.n	792a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    78bc:	4608      	mov	r0, r1
    78be:	f000 fd83 	bl	83c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    78c2:	2001      	movs	r0, #1
    78c4:	7260      	strb	r0, [r4, #9]
    78c6:	79e0      	ldrb	r0, [r4, #7]
    78c8:	2801      	cmp	r0, #1
    78ca:	d105      	bne.n	78d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    78cc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    78d0:	f040 0008 	orr.w	r0, r0, #8
    78d4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    78d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    78da:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    78de:	6260      	str	r0, [r4, #36]	; 0x24
    78e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    78e4:	f8c8 0000 	str.w	r0, [r8]
    78e8:	491b      	ldr	r1, [pc, #108]	; (7958 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    78ea:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    78ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    78f2:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    78f6:	fbb0 f7f1 	udiv	r7, r0, r1
    78fa:	e016      	b.n	792a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    78fc:	4608      	mov	r0, r1
    78fe:	f000 fd49 	bl	8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    7902:	2002      	movs	r0, #2
    7904:	7260      	strb	r0, [r4, #9]
    7906:	79e0      	ldrb	r0, [r4, #7]
    7908:	2801      	cmp	r0, #1
    790a:	d105      	bne.n	7918 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    790c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7910:	f040 0004 	orr.w	r0, r0, #4
    7914:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7918:	6a60      	ldr	r0, [r4, #36]	; 0x24
    791a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    791e:	6260      	str	r0, [r4, #36]	; 0x24
    7920:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7924:	f8c8 0000 	str.w	r0, [r8]
    7928:	2729      	movs	r7, #41	; 0x29
    792a:	f000 fbf3 	bl	8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    792e:	f008 fc52 	bl	101d6 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7932:	b120      	cbz	r0, 793e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7934:	f7ff ff24 	bl	7780 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7938:	2000      	movs	r0, #0
    793a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    793e:	2100      	movs	r1, #0
    7940:	4630      	mov	r0, r6
    7942:	f000 fcb9 	bl	82b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    7946:	4638      	mov	r0, r7
    7948:	e7f7      	b.n	793a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    794a:	0000      	.short	0x0000
    794c:	20001470 	.word	0x20001470
    7950:	40001000 	.word	0x40001000
    7954:	4001f504 	.word	0x4001f504
    7958:	0000840c 	.word	0x0000840c

0000795c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    795c:	4a02      	ldr	r2, [pc, #8]	; (7968 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    795e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7960:	6003      	str	r3, [r0, #0]
    7962:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7964:	6008      	str	r0, [r1, #0]
    7966:	4770      	bx	lr
    7968:	20001470 	.word	0x20001470

0000796c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    796c:	b510      	push	{r4, lr}
    796e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7970:	4901      	ldr	r1, [pc, #4]	; (7978 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7972:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7976:	bd10      	pop	{r4, pc}
    7978:	20001460 	.word	0x20001460

0000797c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    797c:	490f      	ldr	r1, [pc, #60]	; (79bc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    797e:	b510      	push	{r4, lr}
    7980:	69ca      	ldr	r2, [r1, #28]
    7982:	4282      	cmp	r2, r0
    7984:	d302      	bcc.n	798c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7986:	f640 1124 	movw	r1, #2340	; 0x924
    798a:	e00b      	b.n	79a4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    798c:	2201      	movs	r2, #1
    798e:	730a      	strb	r2, [r1, #12]
    7990:	6108      	str	r0, [r1, #16]
    7992:	490b      	ldr	r1, [pc, #44]	; (79c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7994:	644a      	str	r2, [r1, #68]	; 0x44
    7996:	1d0a      	adds	r2, r1, #4
    7998:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    799c:	4283      	cmp	r3, r0
    799e:	d304      	bcc.n	79aa <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    79a0:	f640 112d 	movw	r1, #2349	; 0x92d
    79a4:	203e      	movs	r0, #62	; 0x3e
    79a6:	f7f9 f803 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79aa:	2300      	movs	r3, #0
    79ac:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    79b0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    79b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79b8:	f000 bc52 	b.w	8260 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x260>
    79bc:	20001470 	.word	0x20001470
    79c0:	40008000 	.word	0x40008000

000079c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    79c4:	b570      	push	{r4, r5, r6, lr}
    79c6:	4c0f      	ldr	r4, [pc, #60]	; (7a04 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    79c8:	4603      	mov	r3, r0
    79ca:	2002      	movs	r0, #2
    79cc:	7320      	strb	r0, [r4, #12]
    79ce:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    79d2:	2096      	movs	r0, #150	; 0x96
    79d4:	f894 1020 	ldrb.w	r1, [r4, #32]
    79d8:	7d22      	ldrb	r2, [r4, #20]
    79da:	2d01      	cmp	r5, #1
    79dc:	d00e      	beq.n	79fc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    79de:	f000 fd51 	bl	8484 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    79e2:	6120      	str	r0, [r4, #16]
    79e4:	4808      	ldr	r0, [pc, #32]	; (7a08 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    79e6:	2100      	movs	r1, #0
    79e8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    79ec:	6921      	ldr	r1, [r4, #16]
    79ee:	69e0      	ldr	r0, [r4, #28]
    79f0:	4408      	add	r0, r1
    79f2:	4905      	ldr	r1, [pc, #20]	; (7a08 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    79f4:	1d09      	adds	r1, r1, #4
    79f6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    79fa:	bd70      	pop	{r4, r5, r6, pc}
    79fc:	f000 fd60 	bl	84c0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7a00:	e7ef      	b.n	79e2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7a02:	0000      	.short	0x0000
    7a04:	20001470 	.word	0x20001470
    7a08:	40008000 	.word	0x40008000

00007a0c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    7a0c:	b510      	push	{r4, lr}
    7a0e:	f008 fd08 	bl	10422 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7a12:	2800      	cmp	r0, #0
    7a14:	d006      	beq.n	7a24 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    7a16:	4804      	ldr	r0, [pc, #16]	; (7a28 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    7a18:	6801      	ldr	r1, [r0, #0]
    7a1a:	f021 0101 	bic.w	r1, r1, #1
    7a1e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    7a22:	6001      	str	r1, [r0, #0]
    7a24:	bd10      	pop	{r4, pc}
    7a26:	0000      	.short	0x0000
    7a28:	40001774 	.word	0x40001774

00007a2c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a30:	2234      	movs	r2, #52	; 0x34
    7a32:	2100      	movs	r1, #0
    7a34:	4813      	ldr	r0, [pc, #76]	; (7a84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7a36:	f008 fdec 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7a3a:	f000 fc6b 	bl	8314 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x314>
    7a3e:	f008 fca9 	bl	10394 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7a42:	4d11      	ldr	r5, [pc, #68]	; (7a88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7a44:	4e10      	ldr	r6, [pc, #64]	; (7a88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7a46:	2400      	movs	r4, #0
    7a48:	4f0f      	ldr	r7, [pc, #60]	; (7a88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7a4a:	3508      	adds	r5, #8
    7a4c:	3610      	adds	r6, #16
    7a4e:	b928      	cbnz	r0, 7a5c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7a50:	f008 fcb7 	bl	103c2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7a54:	b910      	cbnz	r0, 7a5c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7a56:	f008 fcbe 	bl	103d6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7a5a:	b108      	cbz	r0, 7a60 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7a5c:	2224      	movs	r2, #36	; 0x24
    7a5e:	e006      	b.n	7a6e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7a60:	f008 fcf9 	bl	10456 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7a64:	b910      	cbnz	r0, 7a6c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7a66:	f008 fcec 	bl	10442 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7a6a:	b140      	cbz	r0, 7a7e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7a6c:	2240      	movs	r2, #64	; 0x40
    7a6e:	21ff      	movs	r1, #255	; 0xff
    7a70:	4638      	mov	r0, r7
    7a72:	f008 fdce 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7a76:	602c      	str	r4, [r5, #0]
    7a78:	6034      	str	r4, [r6, #0]
    7a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a7e:	2238      	movs	r2, #56	; 0x38
    7a80:	e7f5      	b.n	7a6e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7a82:	0000      	.short	0x0000
    7a84:	20001470 	.word	0x20001470
    7a88:	40000e00 	.word	0x40000e00

00007a8c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7a8c:	4801      	ldr	r0, [pc, #4]	; (7a94 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7a8e:	69c0      	ldr	r0, [r0, #28]
    7a90:	4770      	bx	lr
    7a92:	0000      	.short	0x0000
    7a94:	20001470 	.word	0x20001470

00007a98 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    7a98:	4801      	ldr	r0, [pc, #4]	; (7aa0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    7a9a:	f890 0020 	ldrb.w	r0, [r0, #32]
    7a9e:	4770      	bx	lr
    7aa0:	20001470 	.word	0x20001470

00007aa4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    7aa4:	4801      	ldr	r0, [pc, #4]	; (7aac <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    7aa6:	6980      	ldr	r0, [r0, #24]
    7aa8:	4770      	bx	lr
    7aaa:	0000      	.short	0x0000
    7aac:	20001470 	.word	0x20001470

00007ab0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7ab0:	b510      	push	{r4, lr}
    7ab2:	f000 fbe3 	bl	827c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x27c>
    7ab6:	f7ff fe63 	bl	7780 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7aba:	f004 fbab 	bl	c214 <mpsl_fem_disable>
    7abe:	b130      	cbz	r0, 7ace <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7ac0:	1c40      	adds	r0, r0, #1
    7ac2:	d004      	beq.n	7ace <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7ac4:	f240 5165 	movw	r1, #1381	; 0x565
    7ac8:	203e      	movs	r0, #62	; 0x3e
    7aca:	f7f8 ff71 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ace:	480f      	ldr	r0, [pc, #60]	; (7b0c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7ad0:	4a0f      	ldr	r2, [pc, #60]	; (7b10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7ad2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    7ad4:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7ad8:	6011      	str	r1, [r2, #0]
    7ada:	2400      	movs	r4, #0
    7adc:	6244      	str	r4, [r0, #36]	; 0x24
    7ade:	7304      	strb	r4, [r0, #12]
    7ae0:	61c4      	str	r4, [r0, #28]
    7ae2:	6184      	str	r4, [r0, #24]
    7ae4:	f000 fbca 	bl	827c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x27c>
    7ae8:	480a      	ldr	r0, [pc, #40]	; (7b14 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7aea:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7aee:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7af2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7af6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7afa:	2001      	movs	r0, #1
    7afc:	f008 fb12 	bl	10124 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b04:	2001      	movs	r0, #1
    7b06:	f008 bb00 	b.w	1010a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7b0a:	0000      	.short	0x0000
    7b0c:	20001470 	.word	0x20001470
    7b10:	4001f508 	.word	0x4001f508
    7b14:	40008000 	.word	0x40008000

00007b18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7b18:	b570      	push	{r4, r5, r6, lr}
    7b1a:	2001      	movs	r0, #1
    7b1c:	f008 fb02 	bl	10124 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7b20:	4c37      	ldr	r4, [pc, #220]	; (7c00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    7b22:	2000      	movs	r0, #0
    7b24:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7b28:	2001      	movs	r0, #1
    7b2a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7b2e:	f008 fc68 	bl	10402 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7b32:	4d34      	ldr	r5, [pc, #208]	; (7c04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b34:	b118      	cbz	r0, 7b3e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7b36:	6828      	ldr	r0, [r5, #0]
    7b38:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7b3c:	6028      	str	r0, [r5, #0]
    7b3e:	f008 fc54 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7b42:	b128      	cbz	r0, 7b50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7b44:	6828      	ldr	r0, [r5, #0]
    7b46:	4930      	ldr	r1, [pc, #192]	; (7c08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    7b48:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7b4c:	4308      	orrs	r0, r1
    7b4e:	6028      	str	r0, [r5, #0]
    7b50:	f008 fc67 	bl	10422 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7b54:	b138      	cbz	r0, 7b66 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    7b56:	482b      	ldr	r0, [pc, #172]	; (7c04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b58:	1d00      	adds	r0, r0, #4
    7b5a:	6801      	ldr	r1, [r0, #0]
    7b5c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    7b60:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7b64:	6001      	str	r1, [r0, #0]
    7b66:	4927      	ldr	r1, [pc, #156]	; (7c04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b68:	4828      	ldr	r0, [pc, #160]	; (7c0c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    7b6a:	313c      	adds	r1, #60	; 0x3c
    7b6c:	6008      	str	r0, [r1, #0]
    7b6e:	f004 fb8b 	bl	c288 <mpsl_fem_device_config_254_apply_get>
    7b72:	b140      	cbz	r0, 7b86 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7b74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7b78:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    7b7c:	1c41      	adds	r1, r0, #1
    7b7e:	d002      	beq.n	7b86 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7b80:	4920      	ldr	r1, [pc, #128]	; (7c04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b82:	3110      	adds	r1, #16
    7b84:	6008      	str	r0, [r1, #0]
    7b86:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    7b8a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7b8c:	1c41      	adds	r1, r0, #1
    7b8e:	d004      	beq.n	7b9a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    7b90:	491f      	ldr	r1, [pc, #124]	; (7c10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    7b92:	680a      	ldr	r2, [r1, #0]
    7b94:	f360 4217 	bfi	r2, r0, #16, #8
    7b98:	600a      	str	r2, [r1, #0]
    7b9a:	f240 1103 	movw	r1, #259	; 0x103
    7b9e:	f240 605b 	movw	r0, #1627	; 0x65b
    7ba2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    7ba6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7baa:	2001      	movs	r0, #1
    7bac:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    7bb0:	f000 f842 	bl	7c38 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7bb4:	f240 2001 	movw	r0, #513	; 0x201
    7bb8:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7bbc:	2002      	movs	r0, #2
    7bbe:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7bc2:	4914      	ldr	r1, [pc, #80]	; (7c14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7bc4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    7bc8:	6008      	str	r0, [r1, #0]
    7bca:	4913      	ldr	r1, [pc, #76]	; (7c18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7bcc:	2000      	movs	r0, #0
    7bce:	8608      	strh	r0, [r1, #48]	; 0x30
    7bd0:	3110      	adds	r1, #16
    7bd2:	61c8      	str	r0, [r1, #28]
    7bd4:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    7bd8:	2001      	movs	r0, #1
    7bda:	f008 fa96 	bl	1010a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7bde:	2010      	movs	r0, #16
    7be0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7be4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7be8:	2002      	movs	r0, #2
    7bea:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7bee:	480b      	ldr	r0, [pc, #44]	; (7c1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7bf0:	6800      	ldr	r0, [r0, #0]
    7bf2:	2800      	cmp	r0, #0
    7bf4:	d002      	beq.n	7bfc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    7bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bfa:	4700      	bx	r0
    7bfc:	bd70      	pop	{r4, r5, r6, pc}
    7bfe:	0000      	.short	0x0000
    7c00:	40001000 	.word	0x40001000
    7c04:	4000173c 	.word	0x4000173c
    7c08:	80000096 	.word	0x80000096
    7c0c:	8900002c 	.word	0x8900002c
    7c10:	4000158c 	.word	0x4000158c
    7c14:	4001f504 	.word	0x4001f504
    7c18:	20001460 	.word	0x20001460
    7c1c:	200002dc 	.word	0x200002dc

00007c20 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7c20:	4901      	ldr	r1, [pc, #4]	; (7c28 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7c22:	7548      	strb	r0, [r1, #21]
    7c24:	4770      	bx	lr
    7c26:	0000      	.short	0x0000
    7c28:	20001470 	.word	0x20001470

00007c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    7c2c:	4901      	ldr	r1, [pc, #4]	; (7c34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    7c2e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7c32:	4770      	bx	lr
    7c34:	00008460 	.word	0x00008460

00007c38 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    7c38:	4908      	ldr	r1, [pc, #32]	; (7c5c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    7c3a:	b510      	push	{r4, lr}
    7c3c:	7508      	strb	r0, [r1, #20]
    7c3e:	4908      	ldr	r1, [pc, #32]	; (7c60 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    7c40:	2801      	cmp	r0, #1
    7c42:	d006      	beq.n	7c52 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    7c44:	2802      	cmp	r0, #2
    7c46:	d006      	beq.n	7c56 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    7c48:	f640 516c 	movw	r1, #3436	; 0xd6c
    7c4c:	203e      	movs	r0, #62	; 0x3e
    7c4e:	f7f8 feaf 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c52:	2003      	movs	r0, #3
    7c54:	e000      	b.n	7c58 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    7c56:	2004      	movs	r0, #4
    7c58:	6008      	str	r0, [r1, #0]
    7c5a:	bd10      	pop	{r4, pc}
    7c5c:	20001470 	.word	0x20001470
    7c60:	40001510 	.word	0x40001510

00007c64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    7c64:	4905      	ldr	r1, [pc, #20]	; (7c7c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    7c66:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    7c6a:	4805      	ldr	r0, [pc, #20]	; (7c80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    7c6c:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    7c70:	f041 0101 	orr.w	r1, r1, #1
    7c74:	7001      	strb	r1, [r0, #0]
    7c76:	f000 ba13 	b.w	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    7c7a:	0000      	.short	0x0000
    7c7c:	40001000 	.word	0x40001000
    7c80:	20001470 	.word	0x20001470

00007c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    7c84:	4901      	ldr	r1, [pc, #4]	; (7c8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    7c86:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7c8a:	4770      	bx	lr
    7c8c:	0000846c 	.word	0x0000846c

00007c90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    7c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c94:	4e30      	ldr	r6, [pc, #192]	; (7d58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7c96:	4c31      	ldr	r4, [pc, #196]	; (7d5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    7c98:	4688      	mov	r8, r1
    7c9a:	0007      	movs	r7, r0
    7c9c:	4615      	mov	r5, r2
    7c9e:	f04f 0901 	mov.w	r9, #1
    7ca2:	d006      	beq.n	7cb2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    7ca4:	2f01      	cmp	r7, #1
    7ca6:	d012      	beq.n	7cce <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    7ca8:	f640 0117 	movw	r1, #2071	; 0x817
    7cac:	203e      	movs	r0, #62	; 0x3e
    7cae:	f7f8 fe7f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cb2:	4610      	mov	r0, r2
    7cb4:	f000 fb88 	bl	83c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    7cb8:	4829      	ldr	r0, [pc, #164]	; (7d60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    7cba:	f884 9009 	strb.w	r9, [r4, #9]
    7cbe:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    7cc2:	4640      	mov	r0, r8
    7cc4:	f000 fb2e 	bl	8324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>
    7cc8:	4605      	mov	r5, r0
    7cca:	4630      	mov	r0, r6
    7ccc:	e00c      	b.n	7ce8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    7cce:	4610      	mov	r0, r2
    7cd0:	f000 fb60 	bl	8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    7cd4:	2002      	movs	r0, #2
    7cd6:	7260      	strb	r0, [r4, #9]
    7cd8:	f649 71ba 	movw	r1, #40890	; 0x9fba
    7cdc:	4640      	mov	r0, r8
    7cde:	f000 fb21 	bl	8324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>
    7ce2:	4605      	mov	r5, r0
    7ce4:	481c      	ldr	r0, [pc, #112]	; (7d58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7ce6:	1d00      	adds	r0, r0, #4
    7ce8:	f000 fada 	bl	82a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>
    7cec:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7d64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    7cf0:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    7cf4:	f8df a074 	ldr.w	sl, [pc, #116]	; 7d6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    7cf8:	481b      	ldr	r0, [pc, #108]	; (7d68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    7cfa:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    7cfe:	2010      	movs	r0, #16
    7d00:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    7d04:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d06:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    7d0a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    7d0e:	6260      	str	r0, [r4, #36]	; 0x24
    7d10:	4817      	ldr	r0, [pc, #92]	; (7d70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7d12:	6006      	str	r6, [r0, #0]
    7d14:	f000 f9fe 	bl	8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    7d18:	4641      	mov	r1, r8
    7d1a:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    7d1e:	4811      	ldr	r0, [pc, #68]	; (7d64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    7d20:	300c      	adds	r0, #12
    7d22:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7d26:	42a8      	cmp	r0, r5
    7d28:	d310      	bcc.n	7d4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    7d2a:	2000      	movs	r0, #0
    7d2c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7d30:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    7d34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d36:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    7d3a:	6260      	str	r0, [r4, #36]	; 0x24
    7d3c:	480c      	ldr	r0, [pc, #48]	; (7d70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7d3e:	1d00      	adds	r0, r0, #4
    7d40:	6006      	str	r6, [r0, #0]
    7d42:	f7ff fd1d 	bl	7780 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7d46:	2000      	movs	r0, #0
    7d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d4c:	4629      	mov	r1, r5
    7d4e:	4638      	mov	r0, r7
    7d50:	f000 fab2 	bl	82b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    7d54:	2001      	movs	r0, #1
    7d56:	e7f7      	b.n	7d48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    7d58:	40001000 	.word	0x40001000
    7d5c:	20001470 	.word	0x20001470
    7d60:	0000840c 	.word	0x0000840c
    7d64:	40008000 	.word	0x40008000
    7d68:	40008140 	.word	0x40008140
    7d6c:	4001f098 	.word	0x4001f098
    7d70:	4001f504 	.word	0x4001f504

00007d74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    7d74:	4b0d      	ldr	r3, [pc, #52]	; (7dac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    7d76:	b510      	push	{r4, lr}
    7d78:	71d8      	strb	r0, [r3, #7]
    7d7a:	729a      	strb	r2, [r3, #10]
    7d7c:	b151      	cbz	r1, 7d94 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    7d7e:	2002      	movs	r0, #2
    7d80:	7218      	strb	r0, [r3, #8]
    7d82:	2801      	cmp	r0, #1
    7d84:	d008      	beq.n	7d98 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    7d86:	2802      	cmp	r0, #2
    7d88:	d00f      	beq.n	7daa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7d8a:	f640 2144 	movw	r1, #2628	; 0xa44
    7d8e:	203e      	movs	r0, #62	; 0x3e
    7d90:	f7f8 fe0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d94:	2001      	movs	r0, #1
    7d96:	e7f3      	b.n	7d80 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    7d98:	7a58      	ldrb	r0, [r3, #9]
    7d9a:	2802      	cmp	r0, #2
    7d9c:	d105      	bne.n	7daa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7d9e:	f000 f943 	bl	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7da6:	f000 ba51 	b.w	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    7daa:	bd10      	pop	{r4, pc}
    7dac:	20001470 	.word	0x20001470

00007db0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    7db0:	4902      	ldr	r1, [pc, #8]	; (7dbc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    7db2:	2000      	movs	r0, #0
    7db4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7db8:	4770      	bx	lr
    7dba:	0000      	.short	0x0000
    7dbc:	40008000 	.word	0x40008000

00007dc0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    7dc0:	4904      	ldr	r1, [pc, #16]	; (7dd4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    7dc2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    7dc6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7dca:	4249      	negs	r1, r1
    7dcc:	7001      	strb	r1, [r0, #0]
    7dce:	2001      	movs	r0, #1
    7dd0:	4770      	bx	lr
    7dd2:	0000      	.short	0x0000
    7dd4:	40001000 	.word	0x40001000

00007dd8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    7dd8:	4903      	ldr	r1, [pc, #12]	; (7de8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    7dda:	0e02      	lsrs	r2, r0, #24
    7ddc:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    7de0:	0200      	lsls	r0, r0, #8
    7de2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    7de6:	4770      	bx	lr
    7de8:	40001000 	.word	0x40001000

00007dec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    7dec:	4901      	ldr	r1, [pc, #4]	; (7df4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    7dee:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    7df2:	4770      	bx	lr
    7df4:	40001000 	.word	0x40001000

00007df8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    7df8:	b510      	push	{r4, lr}
    7dfa:	2200      	movs	r2, #0
    7dfc:	2901      	cmp	r1, #1
    7dfe:	d006      	beq.n	7e0e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    7e00:	2902      	cmp	r1, #2
    7e02:	d002      	beq.n	7e0a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    7e04:	f240 21d2 	movw	r1, #722	; 0x2d2
    7e08:	e014      	b.n	7e34 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    7e0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7e0e:	490b      	ldr	r1, [pc, #44]	; (7e3c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    7e10:	430a      	orrs	r2, r1
    7e12:	490b      	ldr	r1, [pc, #44]	; (7e40 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7e14:	600a      	str	r2, [r1, #0]
    7e16:	490b      	ldr	r1, [pc, #44]	; (7e44 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    7e18:	4308      	orrs	r0, r1
    7e1a:	4909      	ldr	r1, [pc, #36]	; (7e40 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7e1c:	1d09      	adds	r1, r1, #4
    7e1e:	6008      	str	r0, [r1, #0]
    7e20:	4809      	ldr	r0, [pc, #36]	; (7e48 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    7e22:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    7e26:	b2c0      	uxtb	r0, r0
    7e28:	2803      	cmp	r0, #3
    7e2a:	d001      	beq.n	7e30 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    7e2c:	280b      	cmp	r0, #11
    7e2e:	d104      	bne.n	7e3a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    7e30:	f240 21ea 	movw	r1, #746	; 0x2ea
    7e34:	203e      	movs	r0, #62	; 0x3e
    7e36:	f7f8 fdbb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e3a:	bd10      	pop	{r4, pc}
    7e3c:	00100108 	.word	0x00100108
    7e40:	40001514 	.word	0x40001514
    7e44:	02030000 	.word	0x02030000
    7e48:	40001000 	.word	0x40001000

00007e4c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    7e4c:	4901      	ldr	r1, [pc, #4]	; (7e54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    7e4e:	7588      	strb	r0, [r1, #22]
    7e50:	4770      	bx	lr
    7e52:	0000      	.short	0x0000
    7e54:	20001470 	.word	0x20001470

00007e58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    7e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e5c:	4851      	ldr	r0, [pc, #324]	; (7fa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7e5e:	f04f 0a01 	mov.w	sl, #1
    7e62:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    7e66:	484f      	ldr	r0, [pc, #316]	; (7fa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7e68:	300c      	adds	r0, #12
    7e6a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    7e6e:	f008 f9b0 	bl	101d2 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    7e72:	4c4d      	ldr	r4, [pc, #308]	; (7fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    7e74:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    7e78:	f000 f8e0 	bl	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7e7c:	494b      	ldr	r1, [pc, #300]	; (7fac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e80:	6008      	str	r0, [r1, #0]
    7e82:	f8df 812c 	ldr.w	r8, [pc, #300]	; 7fb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    7e86:	2000      	movs	r0, #0
    7e88:	6260      	str	r0, [r4, #36]	; 0x24
    7e8a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    7e8e:	f240 131d 	movw	r3, #285	; 0x11d
    7e92:	439a      	bics	r2, r3
    7e94:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    7e98:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    7e9c:	f000 f94e 	bl	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    7ea0:	4605      	mov	r5, r0
    7ea2:	4840      	ldr	r0, [pc, #256]	; (7fa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7ea4:	3008      	adds	r0, #8
    7ea6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7eaa:	4e3e      	ldr	r6, [pc, #248]	; (7fa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7eac:	61e0      	str	r0, [r4, #28]
    7eae:	1d36      	adds	r6, r6, #4
    7eb0:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    7eb4:	61a0      	str	r0, [r4, #24]
    7eb6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7eba:	7d21      	ldrb	r1, [r4, #20]
    7ebc:	f884 1020 	strb.w	r1, [r4, #32]
    7ec0:	7a61      	ldrb	r1, [r4, #9]
    7ec2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    7ec6:	46a1      	mov	r9, r4
    7ec8:	2400      	movs	r4, #0
    7eca:	4639      	mov	r1, r7
    7ecc:	4628      	mov	r0, r5
    7ece:	f000 f983 	bl	81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    7ed2:	b910      	cbnz	r0, 7eda <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    7ed4:	f8c8 a010 	str.w	sl, [r8, #16]
    7ed8:	2401      	movs	r4, #1
    7eda:	4f33      	ldr	r7, [pc, #204]	; (7fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    7edc:	07e8      	lsls	r0, r5, #31
    7ede:	f1a7 0710 	sub.w	r7, r7, #16
    7ee2:	d120      	bne.n	7f26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    7ee4:	07a8      	lsls	r0, r5, #30
    7ee6:	d527      	bpl.n	7f38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    7ee8:	f008 fa9b 	bl	10422 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7eec:	b9f0      	cbnz	r0, 7f2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7eee:	f008 fa88 	bl	10402 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7ef2:	b9d8      	cbnz	r0, 7f2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7ef4:	482f      	ldr	r0, [pc, #188]	; (7fb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    7ef6:	6800      	ldr	r0, [r0, #0]
    7ef8:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    7efc:	f3c0 6300 	ubfx	r3, r0, #24, #1
    7f00:	f000 020f 	and.w	r2, r0, #15
    7f04:	f3c0 1103 	ubfx	r1, r0, #4, #4
    7f08:	f3c0 2803 	ubfx	r8, r0, #8, #4
    7f0c:	b173      	cbz	r3, 7f2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7f0e:	b11a      	cbz	r2, 7f18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    7f10:	b111      	cbz	r1, 7f18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    7f12:	f1b8 0f00 	cmp.w	r8, #0
    7f16:	d109      	bne.n	7f2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7f18:	f3c0 4004 	ubfx	r0, r0, #16, #5
    7f1c:	2801      	cmp	r0, #1
    7f1e:	d105      	bne.n	7f2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7f20:	f1bc 0f03 	cmp.w	ip, #3
    7f24:	d202      	bcs.n	7f2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7f26:	6838      	ldr	r0, [r7, #0]
    7f28:	4780      	blx	r0
    7f2a:	e00e      	b.n	7f4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    7f2c:	f345 0080 	sbfx	r0, r5, #2, #1
    7f30:	4621      	mov	r1, r4
    7f32:	1c40      	adds	r0, r0, #1
    7f34:	687a      	ldr	r2, [r7, #4]
    7f36:	e007      	b.n	7f48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    7f38:	f015 0f28 	tst.w	r5, #40	; 0x28
    7f3c:	d005      	beq.n	7f4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    7f3e:	f345 1140 	sbfx	r1, r5, #5, #1
    7f42:	68ba      	ldr	r2, [r7, #8]
    7f44:	4620      	mov	r0, r4
    7f46:	1c49      	adds	r1, r1, #1
    7f48:	4790      	blx	r2
    7f4a:	06e8      	lsls	r0, r5, #27
    7f4c:	d501      	bpl.n	7f52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    7f4e:	68f8      	ldr	r0, [r7, #12]
    7f50:	4780      	blx	r0
    7f52:	f899 1009 	ldrb.w	r1, [r9, #9]
    7f56:	4648      	mov	r0, r9
    7f58:	2902      	cmp	r1, #2
    7f5a:	d120      	bne.n	7f9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    7f5c:	7b01      	ldrb	r1, [r0, #12]
    7f5e:	2900      	cmp	r1, #0
    7f60:	d01d      	beq.n	7f9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    7f62:	2902      	cmp	r1, #2
    7f64:	d004      	beq.n	7f70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    7f66:	2901      	cmp	r1, #1
    7f68:	d009      	beq.n	7f7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    7f6a:	f640 4156 	movw	r1, #3158	; 0xc56
    7f6e:	e00d      	b.n	7f8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    7f70:	69c1      	ldr	r1, [r0, #28]
    7f72:	f8d9 0010 	ldr.w	r0, [r9, #16]
    7f76:	4408      	add	r0, r1
    7f78:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    7f7c:	e00b      	b.n	7f96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    7f7e:	6901      	ldr	r1, [r0, #16]
    7f80:	f8d9 001c 	ldr.w	r0, [r9, #28]
    7f84:	4281      	cmp	r1, r0
    7f86:	d804      	bhi.n	7f92 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    7f88:	f640 4157 	movw	r1, #3159	; 0xc57
    7f8c:	203e      	movs	r0, #62	; 0x3e
    7f8e:	f7f8 fd0f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f92:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    7f96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f9a:	f000 b961 	b.w	8260 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x260>
    7f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fa2:	0000      	.short	0x0000
    7fa4:	40008000 	.word	0x40008000
    7fa8:	20001470 	.word	0x20001470
    7fac:	4001f508 	.word	0x4001f508
    7fb0:	40001000 	.word	0x40001000
    7fb4:	40001450 	.word	0x40001450
    7fb8:	480b      	ldr	r0, [pc, #44]	; (7fe8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    7fba:	7d81      	ldrb	r1, [r0, #22]
    7fbc:	480b      	ldr	r0, [pc, #44]	; (7fec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    7fbe:	5c40      	ldrb	r0, [r0, r1]
    7fc0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7fc4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    7fc8:	d204      	bcs.n	7fd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    7fca:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    7fce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7fd2:	e001      	b.n	7fd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    7fd4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    7fd8:	4a05      	ldr	r2, [pc, #20]	; (7ff0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    7fda:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    7fde:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    7fe2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    7fe6:	4770      	bx	lr
    7fe8:	20001470 	.word	0x20001470
    7fec:	00008412 	.word	0x00008412
    7ff0:	40001000 	.word	0x40001000
    7ff4:	b508      	push	{r3, lr}
    7ff6:	490b      	ldr	r1, [pc, #44]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7ff8:	466b      	mov	r3, sp
    7ffa:	f991 2015 	ldrsb.w	r2, [r1, #21]
    7ffe:	7d89      	ldrb	r1, [r1, #22]
    8000:	f000 faaa 	bl	8558 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8004:	f99d 0000 	ldrsb.w	r0, [sp]
    8008:	f000 fa7a 	bl	8500 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    800c:	f10d 0001 	add.w	r0, sp, #1
    8010:	f004 f924 	bl	c25c <mpsl_fem_pa_gain_set>
    8014:	2800      	cmp	r0, #0
    8016:	d004      	beq.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    8018:	f240 51e6 	movw	r1, #1510	; 0x5e6
    801c:	203e      	movs	r0, #62	; 0x3e
    801e:	f7f8 fcc7 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8022:	bd08      	pop	{r3, pc}
    8024:	20001470 	.word	0x20001470
    8028:	4803      	ldr	r0, [pc, #12]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    802a:	7a01      	ldrb	r1, [r0, #8]
    802c:	2901      	cmp	r1, #1
    802e:	d102      	bne.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    8030:	7a80      	ldrb	r0, [r0, #10]
    8032:	f7ff bfdf 	b.w	7ff4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8036:	4770      	bx	lr
    8038:	20001470 	.word	0x20001470
    803c:	480d      	ldr	r0, [pc, #52]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    803e:	b510      	push	{r4, lr}
    8040:	7a40      	ldrb	r0, [r0, #9]
    8042:	2801      	cmp	r0, #1
    8044:	d00c      	beq.n	8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    8046:	2802      	cmp	r0, #2
    8048:	d113      	bne.n	8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    804a:	f004 f8e9 	bl	c220 <mpsl_fem_lna_configuration_clear>
    804e:	2800      	cmp	r0, #0
    8050:	d00f      	beq.n	8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    8052:	1c40      	adds	r0, r0, #1
    8054:	d00d      	beq.n	8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    8056:	f640 01ab 	movw	r1, #2219	; 0x8ab
    805a:	203e      	movs	r0, #62	; 0x3e
    805c:	f7f8 fca8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8060:	f004 f8f0 	bl	c244 <mpsl_fem_pa_configuration_clear>
    8064:	2800      	cmp	r0, #0
    8066:	d004      	beq.n	8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    8068:	1c40      	adds	r0, r0, #1
    806a:	d002      	beq.n	8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    806c:	f640 01a5 	movw	r1, #2213	; 0x8a5
    8070:	e7f3      	b.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    8072:	bd10      	pop	{r4, pc}
    8074:	20001470 	.word	0x20001470
    8078:	4808      	ldr	r0, [pc, #32]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    807a:	2100      	movs	r1, #0
    807c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8080:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8084:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8088:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    808c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8090:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8094:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8098:	4770      	bx	lr
    809a:	0000      	.short	0x0000
    809c:	40001000 	.word	0x40001000
    80a0:	4818      	ldr	r0, [pc, #96]	; (8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>)
    80a2:	b510      	push	{r4, lr}
    80a4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    80a8:	07c1      	lsls	r1, r0, #31
    80aa:	d029      	beq.n	8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    80ac:	0781      	lsls	r1, r0, #30
    80ae:	d514      	bpl.n	80da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda>
    80b0:	4815      	ldr	r0, [pc, #84]	; (8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>)
    80b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    80b6:	f041 0101 	orr.w	r1, r1, #1
    80ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    80be:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    80c2:	b2c0      	uxtb	r0, r0
    80c4:	280b      	cmp	r0, #11
    80c6:	d005      	beq.n	80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    80c8:	280a      	cmp	r0, #10
    80ca:	d003      	beq.n	80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    80cc:	2803      	cmp	r0, #3
    80ce:	d001      	beq.n	80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    80d0:	2802      	cmp	r0, #2
    80d2:	d115      	bne.n	8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    80d4:	f240 610f 	movw	r1, #1551	; 0x60f
    80d8:	e00f      	b.n	80fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    80da:	0740      	lsls	r0, r0, #29
    80dc:	d510      	bpl.n	8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    80de:	480a      	ldr	r0, [pc, #40]	; (8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>)
    80e0:	490a      	ldr	r1, [pc, #40]	; (810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    80e2:	3008      	adds	r0, #8
    80e4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    80e8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    80ec:	4808      	ldr	r0, [pc, #32]	; (8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    80ee:	f008 f82f 	bl	10150 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    80f2:	2800      	cmp	r0, #0
    80f4:	d004      	beq.n	8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    80f6:	f240 6117 	movw	r1, #1559	; 0x617
    80fa:	203e      	movs	r0, #62	; 0x3e
    80fc:	f7f8 fc58 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8100:	bd10      	pop	{r4, pc}
    8102:	0000      	.short	0x0000
    8104:	20001470 	.word	0x20001470
    8108:	40001000 	.word	0x40001000
    810c:	4001f098 	.word	0x4001f098
    8110:	40008000 	.word	0x40008000
    8114:	4808      	ldr	r0, [pc, #32]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    8116:	4601      	mov	r1, r0
    8118:	79c2      	ldrb	r2, [r0, #7]
    811a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    811e:	b112      	cbz	r2, 8126 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x126>
    8120:	2a01      	cmp	r2, #1
    8122:	d003      	beq.n	812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
    8124:	e006      	b.n	8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>
    8126:	f041 0102 	orr.w	r1, r1, #2
    812a:	e001      	b.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    812c:	f041 0104 	orr.w	r1, r1, #4
    8130:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    8134:	f7ff bfb4 	b.w	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    8138:	20001470 	.word	0x20001470
    813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8140:	4d22      	ldr	r5, [pc, #136]	; (81cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cc>)
    8142:	2400      	movs	r4, #0
    8144:	7b28      	ldrb	r0, [r5, #12]
    8146:	b138      	cbz	r0, 8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>
    8148:	f44f 71a2 	mov.w	r1, #324	; 0x144
    814c:	4820      	ldr	r0, [pc, #128]	; (81d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>)
    814e:	f007 ffff 	bl	10150 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8152:	b108      	cbz	r0, 8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>
    8154:	2701      	movs	r7, #1
    8156:	e000      	b.n	815a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    8158:	2700      	movs	r7, #0
    815a:	7a68      	ldrb	r0, [r5, #9]
    815c:	4e1d      	ldr	r6, [pc, #116]	; (81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>)
    815e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8162:	2801      	cmp	r0, #1
    8164:	d002      	beq.n	816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    8166:	2802      	cmp	r0, #2
    8168:	d006      	beq.n	8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    816a:	e016      	b.n	819a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a>
    816c:	4630      	mov	r0, r6
    816e:	f007 ffea 	bl	10146 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8172:	b190      	cbz	r0, 819a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a>
    8174:	2408      	movs	r4, #8
    8176:	e010      	b.n	819a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a>
    8178:	4630      	mov	r0, r6
    817a:	f007 ffe4 	bl	10146 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    817e:	b100      	cbz	r0, 8182 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182>
    8180:	2402      	movs	r4, #2
    8182:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    8186:	43c0      	mvns	r0, r0
    8188:	f340 0000 	sbfx	r0, r0, #0, #1
    818c:	1c40      	adds	r0, r0, #1
    818e:	d101      	bne.n	8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    8190:	f044 0404 	orr.w	r4, r4, #4
    8194:	b10f      	cbz	r7, 819a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a>
    8196:	f044 0401 	orr.w	r4, r4, #1
    819a:	f014 0f0b 	tst.w	r4, #11
    819e:	d107      	bne.n	81b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>
    81a0:	f44f 7188 	mov.w	r1, #272	; 0x110
    81a4:	4630      	mov	r0, r6
    81a6:	f007 ffce 	bl	10146 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    81aa:	b108      	cbz	r0, 81b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>
    81ac:	f044 0410 	orr.w	r4, r4, #16
    81b0:	f7ff ff62 	bl	8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    81b4:	06e0      	lsls	r0, r4, #27
    81b6:	d506      	bpl.n	81c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c6>
    81b8:	0720      	lsls	r0, r4, #28
    81ba:	d404      	bmi.n	81c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c6>
    81bc:	7a68      	ldrb	r0, [r5, #9]
    81be:	2801      	cmp	r0, #1
    81c0:	d101      	bne.n	81c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c6>
    81c2:	f044 0420 	orr.w	r4, r4, #32
    81c6:	4620      	mov	r0, r4
    81c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81cc:	20001470 	.word	0x20001470
    81d0:	40008000 	.word	0x40008000
    81d4:	40001000 	.word	0x40001000
    81d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81dc:	4c1a      	ldr	r4, [pc, #104]	; (8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>)
    81de:	460d      	mov	r5, r1
    81e0:	7a21      	ldrb	r1, [r4, #8]
    81e2:	b129      	cbz	r1, 81f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f0>
    81e4:	f010 0f11 	tst.w	r0, #17
    81e8:	d007      	beq.n	81fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fa>
    81ea:	f7ff fac9 	bl	7780 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81ee:	e024      	b.n	823a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23a>
    81f0:	f000 f890 	bl	8314 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x314>
    81f4:	2000      	movs	r0, #0
    81f6:	7320      	strb	r0, [r4, #12]
    81f8:	e01f      	b.n	823a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23a>
    81fa:	2901      	cmp	r1, #1
    81fc:	d001      	beq.n	8202 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x202>
    81fe:	2601      	movs	r6, #1
    8200:	e000      	b.n	8204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    8202:	2600      	movs	r6, #0
    8204:	79e0      	ldrb	r0, [r4, #7]
    8206:	2801      	cmp	r0, #1
    8208:	d00e      	beq.n	8228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>
    820a:	2700      	movs	r7, #0
    820c:	f000 f882 	bl	8314 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x314>
    8210:	2196      	movs	r1, #150	; 0x96
    8212:	4630      	mov	r0, r6
    8214:	f000 f894 	bl	8340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    8218:	4601      	mov	r1, r0
    821a:	b14f      	cbz	r7, 8230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    821c:	353b      	adds	r5, #59	; 0x3b
    821e:	428d      	cmp	r5, r1
    8220:	d904      	bls.n	822c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    8222:	2000      	movs	r0, #0
    8224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8228:	2701      	movs	r7, #1
    822a:	e7ef      	b.n	820c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20c>
    822c:	2001      	movs	r0, #1
    822e:	71e0      	strb	r0, [r4, #7]
    8230:	7aa2      	ldrb	r2, [r4, #10]
    8232:	4630      	mov	r0, r6
    8234:	f7ff fd2c 	bl	7c90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8238:	b108      	cbz	r0, 823e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23e>
    823a:	2001      	movs	r0, #1
    823c:	e7f2      	b.n	8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    823e:	f640 21a5 	movw	r1, #2725	; 0xaa5
    8242:	203e      	movs	r0, #62	; 0x3e
    8244:	f7f8 fbb4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8248:	20001470 	.word	0x20001470
    824c:	4803      	ldr	r0, [pc, #12]	; (825c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>)
    824e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8252:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8256:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    825a:	4770      	bx	lr
    825c:	40001000 	.word	0x40001000
    8260:	4804      	ldr	r0, [pc, #16]	; (8274 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x274>)
    8262:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8264:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8268:	6241      	str	r1, [r0, #36]	; 0x24
    826a:	4903      	ldr	r1, [pc, #12]	; (8278 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x278>)
    826c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8270:	6008      	str	r0, [r1, #0]
    8272:	4770      	bx	lr
    8274:	20001470 	.word	0x20001470
    8278:	4001f504 	.word	0x4001f504
    827c:	4a07      	ldr	r2, [pc, #28]	; (829c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>)
    827e:	2000      	movs	r0, #0
    8280:	3208      	adds	r2, #8
    8282:	4906      	ldr	r1, [pc, #24]	; (829c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>)
    8284:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8288:	1d0a      	adds	r2, r1, #4
    828a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    828e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8292:	4902      	ldr	r1, [pc, #8]	; (829c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>)
    8294:	310c      	adds	r1, #12
    8296:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    829a:	4770      	bx	lr
    829c:	40008000 	.word	0x40008000
    82a0:	4903      	ldr	r1, [pc, #12]	; (82b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>)
    82a2:	79c9      	ldrb	r1, [r1, #7]
    82a4:	2900      	cmp	r1, #0
    82a6:	d102      	bne.n	82ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ae>
    82a8:	4902      	ldr	r1, [pc, #8]	; (82b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>)
    82aa:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    82ae:	4770      	bx	lr
    82b0:	20001470 	.word	0x20001470
    82b4:	4001f098 	.word	0x4001f098
    82b8:	b510      	push	{r4, lr}
    82ba:	4a14      	ldr	r2, [pc, #80]	; (830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>)
    82bc:	b120      	cbz	r0, 82c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c8>
    82be:	2801      	cmp	r0, #1
    82c0:	d011      	beq.n	82e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e6>
    82c2:	f240 7153 	movw	r1, #1875	; 0x753
    82c6:	e01c      	b.n	8302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x302>
    82c8:	f101 0028 	add.w	r0, r1, #40	; 0x28
    82cc:	e9c2 1002 	strd	r1, r0, [r2, #8]
    82d0:	490f      	ldr	r1, [pc, #60]	; (8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>)
    82d2:	480e      	ldr	r0, [pc, #56]	; (830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>)
    82d4:	f003 ffbc 	bl	c250 <mpsl_fem_pa_configuration_set>
    82d8:	2800      	cmp	r0, #0
    82da:	d015      	beq.n	8308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>
    82dc:	1c40      	adds	r0, r0, #1
    82de:	d013      	beq.n	8308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>
    82e0:	f240 7142 	movw	r1, #1858	; 0x742
    82e4:	e00d      	b.n	8302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x302>
    82e6:	f101 0029 	add.w	r0, r1, #41	; 0x29
    82ea:	e9c2 1002 	strd	r1, r0, [r2, #8]
    82ee:	4908      	ldr	r1, [pc, #32]	; (8310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x310>)
    82f0:	4806      	ldr	r0, [pc, #24]	; (830c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>)
    82f2:	f003 ff9b 	bl	c22c <mpsl_fem_lna_configuration_set>
    82f6:	2800      	cmp	r0, #0
    82f8:	d006      	beq.n	8308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>
    82fa:	1c40      	adds	r0, r0, #1
    82fc:	d004      	beq.n	8308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>
    82fe:	f240 714f 	movw	r1, #1871	; 0x74f
    8302:	203e      	movs	r0, #62	; 0x3e
    8304:	f7f8 fb54 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8308:	bd10      	pop	{r4, pc}
    830a:	0000      	.short	0x0000
    830c:	200002e0 	.word	0x200002e0
    8310:	0000843c 	.word	0x0000843c
    8314:	4802      	ldr	r0, [pc, #8]	; (8320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>)
    8316:	2100      	movs	r1, #0
    8318:	71c1      	strb	r1, [r0, #7]
    831a:	7201      	strb	r1, [r0, #8]
    831c:	7241      	strb	r1, [r0, #9]
    831e:	4770      	bx	lr
    8320:	20001470 	.word	0x20001470
    8324:	4a05      	ldr	r2, [pc, #20]	; (833c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>)
    8326:	79d2      	ldrb	r2, [r2, #7]
    8328:	2a01      	cmp	r2, #1
    832a:	d006      	beq.n	833a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33a>
    832c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8330:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8334:	fbb1 f1f2 	udiv	r1, r1, r2
    8338:	1a40      	subs	r0, r0, r1
    833a:	4770      	bx	lr
    833c:	20001470 	.word	0x20001470
    8340:	b570      	push	{r4, r5, r6, lr}
    8342:	4c13      	ldr	r4, [pc, #76]	; (8390 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x390>)
    8344:	4603      	mov	r3, r0
    8346:	460d      	mov	r5, r1
    8348:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    834c:	2000      	movs	r0, #0
    834e:	b15a      	cbz	r2, 8368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    8350:	4621      	mov	r1, r4
    8352:	f891 1020 	ldrb.w	r1, [r1, #32]
    8356:	b163      	cbz	r3, 8372 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x372>
    8358:	2b01      	cmp	r3, #1
    835a:	d111      	bne.n	8380 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x380>
    835c:	2a01      	cmp	r2, #1
    835e:	4628      	mov	r0, r5
    8360:	d012      	beq.n	8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>
    8362:	f007 fefa 	bl	1015a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8366:	e009      	b.n	837c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    8368:	f640 0158 	movw	r1, #2136	; 0x858
    836c:	203e      	movs	r0, #62	; 0x3e
    836e:	f7f8 fb1f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8372:	2a01      	cmp	r2, #1
    8374:	4628      	mov	r0, r5
    8376:	d004      	beq.n	8382 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x382>
    8378:	f007 fefd 	bl	10176 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    837c:	69e1      	ldr	r1, [r4, #28]
    837e:	4408      	add	r0, r1
    8380:	bd70      	pop	{r4, r5, r6, pc}
    8382:	f000 f8d1 	bl	8528 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8386:	e7f9      	b.n	837c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    8388:	f000 f8c0 	bl	850c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    838c:	e7f6      	b.n	837c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    838e:	0000      	.short	0x0000
    8390:	20001470 	.word	0x20001470
    8394:	b510      	push	{r4, lr}
    8396:	f7ff fc4f 	bl	7c38 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    839a:	f7ff fe0d 	bl	7fb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    839e:	f7ff fe43 	bl	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    83a2:	f7ff ff53 	bl	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    83a6:	f008 f83c 	bl	10422 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    83aa:	2800      	cmp	r0, #0
    83ac:	d108      	bne.n	83c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c0>
    83ae:	f008 f828 	bl	10402 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    83b2:	2800      	cmp	r0, #0
    83b4:	d104      	bne.n	83c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c0>
    83b6:	4803      	ldr	r0, [pc, #12]	; (83c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c4>)
    83b8:	6801      	ldr	r1, [r0, #0]
    83ba:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    83be:	6001      	str	r1, [r0, #0]
    83c0:	bd10      	pop	{r4, pc}
    83c2:	0000      	.short	0x0000
    83c4:	40001568 	.word	0x40001568
    83c8:	b510      	push	{r4, lr}
    83ca:	4604      	mov	r4, r0
    83cc:	f7ff fc34 	bl	7c38 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    83d0:	f7ff fdf2 	bl	7fb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    83d4:	4620      	mov	r0, r4
    83d6:	f7ff fe0d 	bl	7ff4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    83da:	f008 f822 	bl	10422 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    83de:	2800      	cmp	r0, #0
    83e0:	d00d      	beq.n	83fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fe>
    83e2:	4a09      	ldr	r2, [pc, #36]	; (8408 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x408>)
    83e4:	6811      	ldr	r1, [r2, #0]
    83e6:	0650      	lsls	r0, r2, #25
    83e8:	2c02      	cmp	r4, #2
    83ea:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    83ee:	d007      	beq.n	8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83f0:	f3c0 2006 	ubfx	r0, r0, #8, #7
    83f4:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    83f8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    83fc:	6010      	str	r0, [r2, #0]
    83fe:	bd10      	pop	{r4, pc}
    8400:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8404:	e7f6      	b.n	83f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f4>
    8406:	0000      	.short	0x0000
    8408:	40001588 	.word	0x40001588
    840c:	a62c0000 	.word	0xa62c0000
    8410:	0604a1e0 	.word	0x0604a1e0
    8414:	0e0c0a08 	.word	0x0e0c0a08
    8418:	16141210 	.word	0x16141210
    841c:	201e1c18 	.word	0x201e1c18
    8420:	28262422 	.word	0x28262422
    8424:	302e2c2a 	.word	0x302e2c2a
    8428:	38363432 	.word	0x38363432
    842c:	403e3c3a 	.word	0x403e3c3a
    8430:	48464442 	.word	0x48464442
    8434:	024e4c4a 	.word	0x024e4c4a
    8438:	0000501a 	.word	0x0000501a
    843c:	00000001 	.word	0x00000001
    8440:	40001110 	.word	0x40001110
	...
    8458:	00001e14 	.word	0x00001e14
    845c:	00001130 	.word	0x00001130
    8460:	00000000 	.word	0x00000000
    8464:	00000028 	.word	0x00000028
    8468:	00000018 	.word	0x00000018
    846c:	00000000 	.word	0x00000000
    8470:	00001e14 	.word	0x00001e14
    8474:	00001130 	.word	0x00001130
    8478:	00000000 	.word	0x00000000
    847c:	00001770 	.word	0x00001770
    8480:	00000fa0 	.word	0x00000fa0

00008484 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8484:	b570      	push	{r4, r5, r6, lr}
    8486:	4605      	mov	r5, r0
    8488:	4614      	mov	r4, r2
    848a:	4608      	mov	r0, r1
    848c:	f7ff fbfa 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8490:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8494:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8498:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    849c:	4807      	ldr	r0, [pc, #28]	; (84bc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    849e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    84a2:	4408      	add	r0, r1
    84a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    84a8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    84ac:	fbb0 f5f1 	udiv	r5, r0, r1
    84b0:	4620      	mov	r0, r4
    84b2:	f7ff fbbb 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    84b6:	4428      	add	r0, r5
    84b8:	1d40      	adds	r0, r0, #5
    84ba:	bd70      	pop	{r4, r5, r6, pc}
    84bc:	0000854c 	.word	0x0000854c

000084c0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    84c0:	b570      	push	{r4, r5, r6, lr}
    84c2:	4d0e      	ldr	r5, [pc, #56]	; (84fc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    84c4:	461c      	mov	r4, r3
    84c6:	3d08      	subs	r5, #8
    84c8:	4b0c      	ldr	r3, [pc, #48]	; (84fc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    84ca:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    84ce:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    84d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84d6:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    84da:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    84de:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    84e2:	4418      	add	r0, r3
    84e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    84e8:	fbb0 f5f1 	udiv	r5, r0, r1
    84ec:	4610      	mov	r0, r2
    84ee:	f7ff fb9d 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    84f2:	4428      	add	r0, r5
    84f4:	4420      	add	r0, r4
    84f6:	1d40      	adds	r0, r0, #5
    84f8:	bd70      	pop	{r4, r5, r6, pc}
    84fa:	0000      	.short	0x0000
    84fc:	0000854c 	.word	0x0000854c

00008500 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8500:	4901      	ldr	r1, [pc, #4]	; (8508 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8502:	b2c0      	uxtb	r0, r0
    8504:	6008      	str	r0, [r1, #0]
    8506:	4770      	bx	lr
    8508:	4000150c 	.word	0x4000150c

0000850c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    850c:	4a05      	ldr	r2, [pc, #20]	; (8524 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    850e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8516:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    851a:	fbb1 f1f2 	udiv	r1, r1, r2
    851e:	4408      	add	r0, r1
    8520:	1e80      	subs	r0, r0, #2
    8522:	4770      	bx	lr
    8524:	00008544 	.word	0x00008544

00008528 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8528:	4a05      	ldr	r2, [pc, #20]	; (8540 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    852a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    852e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8532:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8536:	fbb1 f1f2 	udiv	r1, r1, r2
    853a:	4408      	add	r0, r1
    853c:	4770      	bx	lr
    853e:	0000      	.short	0x0000
    8540:	00008544 	.word	0x00008544
    8544:	05dc0000 	.word	0x05dc0000
    8548:	000003e8 	.word	0x000003e8
    854c:	00000000 	.word	0x00000000
    8550:	00001e14 	.word	0x00001e14
    8554:	00001130 	.word	0x00001130

00008558 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    855c:	461e      	mov	r6, r3
    855e:	4617      	mov	r7, r2
    8560:	460c      	mov	r4, r1
    8562:	4605      	mov	r5, r0
    8564:	f000 f856 	bl	8614 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8568:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8610 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    856c:	4680      	mov	r8, r0
    856e:	f899 0000 	ldrb.w	r0, [r9]
    8572:	42a8      	cmp	r0, r5
    8574:	d110      	bne.n	8598 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8576:	f899 1001 	ldrb.w	r1, [r9, #1]
    857a:	4648      	mov	r0, r9
    857c:	42a1      	cmp	r1, r4
    857e:	d10b      	bne.n	8598 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8580:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8584:	42b9      	cmp	r1, r7
    8586:	d107      	bne.n	8598 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8588:	78c2      	ldrb	r2, [r0, #3]
    858a:	4542      	cmp	r2, r8
    858c:	d104      	bne.n	8598 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    858e:	8881      	ldrh	r1, [r0, #4]
    8590:	8031      	strh	r1, [r6, #0]
    8592:	7980      	ldrb	r0, [r0, #6]
    8594:	70b0      	strb	r0, [r6, #2]
    8596:	e037      	b.n	8608 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8598:	463a      	mov	r2, r7
    859a:	4621      	mov	r1, r4
    859c:	2d01      	cmp	r5, #1
    859e:	d009      	beq.n	85b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    85a0:	2d02      	cmp	r5, #2
    85a2:	d009      	beq.n	85b8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    85a4:	2d04      	cmp	r5, #4
    85a6:	d009      	beq.n	85bc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    85a8:	2d08      	cmp	r5, #8
    85aa:	d009      	beq.n	85c0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    85ac:	f240 4161 	movw	r1, #1121	; 0x461
    85b0:	2006      	movs	r0, #6
    85b2:	e00c      	b.n	85ce <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    85b4:	2000      	movs	r0, #0
    85b6:	e004      	b.n	85c2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    85b8:	2001      	movs	r0, #1
    85ba:	e002      	b.n	85c2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    85bc:	2003      	movs	r0, #3
    85be:	e000      	b.n	85c2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    85c0:	2002      	movs	r0, #2
    85c2:	466b      	mov	r3, sp
    85c4:	f000 f89e 	bl	8704 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    85c8:	b118      	cbz	r0, 85d2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    85ca:	213d      	movs	r1, #61	; 0x3d
    85cc:	2075      	movs	r0, #117	; 0x75
    85ce:	f7f8 f9ef 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85d2:	4620      	mov	r0, r4
    85d4:	f7ff f8cc 	bl	7770 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    85d8:	4602      	mov	r2, r0
    85da:	2300      	movs	r3, #0
    85dc:	4631      	mov	r1, r6
    85de:	f99d 0000 	ldrsb.w	r0, [sp]
    85e2:	f003 fe47 	bl	c274 <mpsl_fem_tx_power_split>
    85e6:	4601      	mov	r1, r0
    85e8:	f889 1007 	strb.w	r1, [r9, #7]
    85ec:	8831      	ldrh	r1, [r6, #0]
    85ee:	f8a9 1004 	strh.w	r1, [r9, #4]
    85f2:	78b1      	ldrb	r1, [r6, #2]
    85f4:	f889 1006 	strb.w	r1, [r9, #6]
    85f8:	f889 5000 	strb.w	r5, [r9]
    85fc:	f889 4001 	strb.w	r4, [r9, #1]
    8600:	f889 7002 	strb.w	r7, [r9, #2]
    8604:	f889 8003 	strb.w	r8, [r9, #3]
    8608:	f999 0007 	ldrsb.w	r0, [r9, #7]
    860c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8610:	2000037c 	.word	0x2000037c

00008614 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8614:	4801      	ldr	r0, [pc, #4]	; (861c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8616:	7800      	ldrb	r0, [r0, #0]
    8618:	4770      	bx	lr
    861a:	0000      	.short	0x0000
    861c:	200002f8 	.word	0x200002f8

00008620 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8620:	b570      	push	{r4, r5, r6, lr}
    8622:	4c17      	ldr	r4, [pc, #92]	; (8680 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8624:	7860      	ldrb	r0, [r4, #1]
    8626:	2800      	cmp	r0, #0
    8628:	d123      	bne.n	8672 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    862a:	2001      	movs	r0, #1
    862c:	7060      	strb	r0, [r4, #1]
    862e:	f007 fed2 	bl	103d6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8632:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8636:	b928      	cbnz	r0, 8644 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8638:	f007 ff03 	bl	10442 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    863c:	b910      	cbnz	r0, 8644 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    863e:	f007 ff0a 	bl	10456 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8642:	b120      	cbz	r0, 864e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8644:	480f      	ldr	r0, [pc, #60]	; (8684 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8646:	6060      	str	r0, [r4, #4]
    8648:	70a5      	strb	r5, [r4, #2]
    864a:	2008      	movs	r0, #8
    864c:	e010      	b.n	8670 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    864e:	f007 fe97 	bl	10380 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8652:	b940      	cbnz	r0, 8666 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8654:	f007 fe9e 	bl	10394 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8658:	b928      	cbnz	r0, 8666 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    865a:	f007 feb2 	bl	103c2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    865e:	b910      	cbnz	r0, 8666 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8660:	f007 fec3 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8664:	b130      	cbz	r0, 8674 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8666:	4807      	ldr	r0, [pc, #28]	; (8684 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8668:	3031      	adds	r0, #49	; 0x31
    866a:	6060      	str	r0, [r4, #4]
    866c:	70a5      	strb	r5, [r4, #2]
    866e:	2004      	movs	r0, #4
    8670:	70e0      	strb	r0, [r4, #3]
    8672:	bd70      	pop	{r4, r5, r6, pc}
    8674:	f240 113f 	movw	r1, #319	; 0x13f
    8678:	2074      	movs	r0, #116	; 0x74
    867a:	f003 fc3d 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    867e:	0000      	.short	0x0000
    8680:	200002f8 	.word	0x200002f8
    8684:	00010795 	.word	0x00010795

00008688 <mpsl_tx_power_radio_supported_power_adjust>:
    8688:	4a06      	ldr	r2, [pc, #24]	; (86a4 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    868a:	b500      	push	{lr}
    868c:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8690:	4290      	cmp	r0, r2
    8692:	db01      	blt.n	8698 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8694:	4610      	mov	r0, r2
    8696:	bd00      	pop	{pc}
    8698:	f000 f808 	bl	86ac <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    869c:	4902      	ldr	r1, [pc, #8]	; (86a8 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    869e:	5608      	ldrsb	r0, [r1, r0]
    86a0:	bd00      	pop	{pc}
    86a2:	0000      	.short	0x0000
    86a4:	200002f8 	.word	0x200002f8
    86a8:	00010787 	.word	0x00010787

000086ac <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    86ac:	4602      	mov	r2, r0
    86ae:	4813      	ldr	r0, [pc, #76]	; (86fc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    86b0:	b510      	push	{r4, lr}
    86b2:	f990 3003 	ldrsb.w	r3, [r0, #3]
    86b6:	429a      	cmp	r2, r3
    86b8:	db01      	blt.n	86be <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    86ba:	200d      	movs	r0, #13
    86bc:	bd10      	pop	{r4, pc}
    86be:	f990 3002 	ldrsb.w	r3, [r0, #2]
    86c2:	429a      	cmp	r2, r3
    86c4:	dc01      	bgt.n	86ca <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    86c6:	2000      	movs	r0, #0
    86c8:	bd10      	pop	{r4, pc}
    86ca:	b101      	cbz	r1, 86ce <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    86cc:	2101      	movs	r1, #1
    86ce:	1ad4      	subs	r4, r2, r3
    86d0:	6843      	ldr	r3, [r0, #4]
    86d2:	5d18      	ldrb	r0, [r3, r4]
    86d4:	4c0a      	ldr	r4, [pc, #40]	; (8700 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    86d6:	5624      	ldrsb	r4, [r4, r0]
    86d8:	4294      	cmp	r4, r2
    86da:	d0f5      	beq.n	86c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86dc:	4c08      	ldr	r4, [pc, #32]	; (8700 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    86de:	4408      	add	r0, r1
    86e0:	343f      	adds	r4, #63	; 0x3f
    86e2:	b2c0      	uxtb	r0, r0
    86e4:	b2d2      	uxtb	r2, r2
    86e6:	42a3      	cmp	r3, r4
    86e8:	d1ee      	bne.n	86c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86ea:	2900      	cmp	r1, #0
    86ec:	d0ec      	beq.n	86c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86ee:	2a01      	cmp	r2, #1
    86f0:	d001      	beq.n	86f6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    86f2:	2a02      	cmp	r2, #2
    86f4:	d1e8      	bne.n	86c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86f6:	1c40      	adds	r0, r0, #1
    86f8:	b2c0      	uxtb	r0, r0
    86fa:	bd10      	pop	{r4, pc}
    86fc:	200002f8 	.word	0x200002f8
    8700:	00010787 	.word	0x00010787

00008704 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8708:	461c      	mov	r4, r3
    870a:	4690      	mov	r8, r2
    870c:	460d      	mov	r5, r1
    870e:	4606      	mov	r6, r0
    8710:	f06f 0715 	mvn.w	r7, #21
    8714:	2804      	cmp	r0, #4
    8716:	d804      	bhi.n	8722 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8718:	b11c      	cbz	r4, 8722 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    871a:	f007 fd37 	bl	1018c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    871e:	42a8      	cmp	r0, r5
    8720:	d802      	bhi.n	8728 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8722:	4638      	mov	r0, r7
    8724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8728:	4805      	ldr	r0, [pc, #20]	; (8740 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    872a:	4642      	mov	r2, r8
    872c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8730:	b118      	cbz	r0, 873a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8732:	5740      	ldrsb	r0, [r0, r5]
    8734:	4282      	cmp	r2, r0
    8736:	dd00      	ble.n	873a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8738:	4602      	mov	r2, r0
    873a:	7022      	strb	r2, [r4, #0]
    873c:	2000      	movs	r0, #0
    873e:	e7f1      	b.n	8724 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8740:	200014a4 	.word	0x200014a4

00008744 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8744:	4801      	ldr	r0, [pc, #4]	; (874c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8746:	7800      	ldrb	r0, [r0, #0]
    8748:	4770      	bx	lr
    874a:	0000      	.short	0x0000
    874c:	20000300 	.word	0x20000300

00008750 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8750:	4905      	ldr	r1, [pc, #20]	; (8768 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8752:	780a      	ldrb	r2, [r1, #0]
    8754:	4290      	cmp	r0, r2
    8756:	d301      	bcc.n	875c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8758:	2000      	movs	r0, #0
    875a:	4770      	bx	lr
    875c:	6849      	ldr	r1, [r1, #4]
    875e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8762:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8766:	4770      	bx	lr
    8768:	20000300 	.word	0x20000300

0000876c <MPSL_IRQ_RADIO_Handler>:
    876c:	490d      	ldr	r1, [pc, #52]	; (87a4 <MPSL_IRQ_RADIO_Handler+0x38>)
    876e:	b510      	push	{r4, lr}
    8770:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8774:	2820      	cmp	r0, #32
    8776:	d00f      	beq.n	8798 <MPSL_IRQ_RADIO_Handler+0x2c>
    8778:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    877c:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    8780:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    8784:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8788:	6840      	ldr	r0, [r0, #4]
    878a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    878e:	680a      	ldr	r2, [r1, #0]
    8790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8794:	2104      	movs	r1, #4
    8796:	4710      	bx	r2
    8798:	f640 017f 	movw	r1, #2175	; 0x87f
    879c:	2070      	movs	r0, #112	; 0x70
    879e:	f003 fbab 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    87a2:	0000      	.short	0x0000
    87a4:	20001248 	.word	0x20001248
    87a8:	b570      	push	{r4, r5, r6, lr}
    87aa:	4605      	mov	r5, r0
    87ac:	2a20      	cmp	r2, #32
    87ae:	d028      	beq.n	8802 <MPSL_IRQ_RADIO_Handler+0x96>
    87b0:	4819      	ldr	r0, [pc, #100]	; (8818 <MPSL_IRQ_RADIO_Handler+0xac>)
    87b2:	4c1a      	ldr	r4, [pc, #104]	; (881c <MPSL_IRQ_RADIO_Handler+0xb0>)
    87b4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    87b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    87bc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    87c0:	4423      	add	r3, r4
    87c2:	2920      	cmp	r1, #32
    87c4:	d022      	beq.n	880c <MPSL_IRQ_RADIO_Handler+0xa0>
    87c6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    87ca:	7840      	ldrb	r0, [r0, #1]
    87cc:	784c      	ldrb	r4, [r1, #1]
    87ce:	7048      	strb	r0, [r1, #1]
    87d0:	4620      	mov	r0, r4
    87d2:	4601      	mov	r1, r0
    87d4:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    87d8:	4291      	cmp	r1, r2
    87da:	7005      	strb	r5, [r0, #0]
    87dc:	7840      	ldrb	r0, [r0, #1]
    87de:	d1f8      	bne.n	87d2 <MPSL_IRQ_RADIO_Handler+0x66>
    87e0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    87e4:	2a20      	cmp	r2, #32
    87e6:	bf1a      	itte	ne
    87e8:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    87ec:	7054      	strbne	r4, [r2, #1]
    87ee:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    87f2:	2220      	movs	r2, #32
    87f4:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    87f8:	f88c 2001 	strb.w	r2, [ip, #1]
    87fc:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f240 2186 	movw	r1, #646	; 0x286
    8806:	2070      	movs	r0, #112	; 0x70
    8808:	f003 fb76 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    880c:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    8810:	7840      	ldrb	r0, [r0, #1]
    8812:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    8816:	e7db      	b.n	87d0 <MPSL_IRQ_RADIO_Handler+0x64>
    8818:	200011c8 	.word	0x200011c8
    881c:	20001248 	.word	0x20001248
    8820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8824:	b08f      	sub	sp, #60	; 0x3c
    8826:	4615      	mov	r5, r2
    8828:	461e      	mov	r6, r3
    882a:	460c      	mov	r4, r1
    882c:	f002 fab4 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8830:	1828      	adds	r0, r5, r0
    8832:	f146 0100 	adc.w	r1, r6, #0
    8836:	e9cd 1001 	strd	r1, r0, [sp, #4]
    883a:	e9d4 2300 	ldrd	r2, r3, [r4]
    883e:	1a80      	subs	r0, r0, r2
    8840:	eb71 0003 	sbcs.w	r0, r1, r3
    8844:	f0c0 80e5 	bcc.w	8a12 <MPSL_IRQ_RADIO_Handler+0x2a6>
    8848:	a808      	add	r0, sp, #32
    884a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    884e:	900a      	str	r0, [sp, #40]	; 0x28
    8850:	48bc      	ldr	r0, [pc, #752]	; (8b44 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    8852:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8856:	4408      	add	r0, r1
    8858:	9009      	str	r0, [sp, #36]	; 0x24
    885a:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    885e:	2020      	movs	r0, #32
    8860:	f10d 091c 	add.w	r9, sp, #28
    8864:	f88d 001c 	strb.w	r0, [sp, #28]
    8868:	2d20      	cmp	r5, #32
    886a:	d036      	beq.n	88da <MPSL_IRQ_RADIO_Handler+0x16e>
    886c:	48b6      	ldr	r0, [pc, #728]	; (8b48 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    886e:	2600      	movs	r6, #0
    8870:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    8874:	48b5      	ldr	r0, [pc, #724]	; (8b4c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8876:	e9d4 7300 	ldrd	r7, r3, [r4]
    887a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    887e:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8882:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    8886:	eb18 0101 	adds.w	r1, r8, r1
    888a:	4172      	adcs	r2, r6
    888c:	1a79      	subs	r1, r7, r1
    888e:	eb73 0102 	sbcs.w	r1, r3, r2
    8892:	d322      	bcc.n	88da <MPSL_IRQ_RADIO_Handler+0x16e>
    8894:	89e1      	ldrh	r1, [r4, #14]
    8896:	b1c9      	cbz	r1, 88cc <MPSL_IRQ_RADIO_Handler+0x160>
    8898:	89c0      	ldrh	r0, [r0, #14]
    889a:	b9b8      	cbnz	r0, 88cc <MPSL_IRQ_RADIO_Handler+0x160>
    889c:	f003 f96e 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    88a0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    88a4:	bf08      	it	eq
    88a6:	200d      	moveq	r0, #13
    88a8:	d00b      	beq.n	88c2 <MPSL_IRQ_RADIO_Handler+0x156>
    88aa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    88ae:	3856      	subs	r0, #86	; 0x56
    88b0:	bf08      	it	eq
    88b2:	201c      	moveq	r0, #28
    88b4:	d005      	beq.n	88c2 <MPSL_IRQ_RADIO_Handler+0x156>
    88b6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    88ba:	389f      	subs	r0, #159	; 0x9f
    88bc:	bf14      	ite	ne
    88be:	4630      	movne	r0, r6
    88c0:	2032      	moveq	r0, #50	; 0x32
    88c2:	1c40      	adds	r0, r0, #1
    88c4:	ebb7 0108 	subs.w	r1, r7, r8
    88c8:	4281      	cmp	r1, r0
    88ca:	db06      	blt.n	88da <MPSL_IRQ_RADIO_Handler+0x16e>
    88cc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    88d0:	f889 5000 	strb.w	r5, [r9]
    88d4:	7845      	ldrb	r5, [r0, #1]
    88d6:	2d20      	cmp	r5, #32
    88d8:	d1cc      	bne.n	8874 <MPSL_IRQ_RADIO_Handler+0x108>
    88da:	980a      	ldr	r0, [sp, #40]	; 0x28
    88dc:	f899 1000 	ldrb.w	r1, [r9]
    88e0:	2d20      	cmp	r5, #32
    88e2:	7001      	strb	r1, [r0, #0]
    88e4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    88e8:	f000 8128 	beq.w	8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    88ec:	4896      	ldr	r0, [pc, #600]	; (8b48 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    88ee:	4f97      	ldr	r7, [pc, #604]	; (8b4c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    88f0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    88f4:	2600      	movs	r6, #0
    88f6:	9004      	str	r0, [sp, #16]
    88f8:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    88fc:	f10a 0008 	add.w	r0, sl, #8
    8900:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8904:	f8d4 b000 	ldr.w	fp, [r4]
    8908:	e9d0 8300 	ldrd	r8, r3, [r0]
    890c:	eb1b 0202 	adds.w	r2, fp, r2
    8910:	4171      	adcs	r1, r6
    8912:	ebb8 0202 	subs.w	r2, r8, r2
    8916:	eb73 0101 	sbcs.w	r1, r3, r1
    891a:	d320      	bcc.n	895e <MPSL_IRQ_RADIO_Handler+0x1f2>
    891c:	89c0      	ldrh	r0, [r0, #14]
    891e:	2800      	cmp	r0, #0
    8920:	f000 810c 	beq.w	8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8924:	89e0      	ldrh	r0, [r4, #14]
    8926:	2800      	cmp	r0, #0
    8928:	f040 8108 	bne.w	8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    892c:	f003 f926 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8930:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8934:	bf08      	it	eq
    8936:	200d      	moveq	r0, #13
    8938:	d00b      	beq.n	8952 <MPSL_IRQ_RADIO_Handler+0x1e6>
    893a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    893e:	3856      	subs	r0, #86	; 0x56
    8940:	bf08      	it	eq
    8942:	201c      	moveq	r0, #28
    8944:	d005      	beq.n	8952 <MPSL_IRQ_RADIO_Handler+0x1e6>
    8946:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    894a:	389f      	subs	r0, #159	; 0x9f
    894c:	bf14      	ite	ne
    894e:	4630      	movne	r0, r6
    8950:	2032      	moveq	r0, #50	; 0x32
    8952:	1c41      	adds	r1, r0, #1
    8954:	ebb8 000b 	subs.w	r0, r8, fp
    8958:	4288      	cmp	r0, r1
    895a:	f280 80ef 	bge.w	8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    895e:	f889 5000 	strb.w	r5, [r9]
    8962:	f89a 0018 	ldrb.w	r0, [sl, #24]
    8966:	7c21      	ldrb	r1, [r4, #16]
    8968:	4281      	cmp	r1, r0
    896a:	d207      	bcs.n	897c <MPSL_IRQ_RADIO_Handler+0x210>
    896c:	9804      	ldr	r0, [sp, #16]
    896e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    8972:	7845      	ldrb	r5, [r0, #1]
    8974:	2d20      	cmp	r5, #32
    8976:	d1bf      	bne.n	88f8 <MPSL_IRQ_RADIO_Handler+0x18c>
    8978:	f000 b8e0 	b.w	8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    897c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    8980:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    8984:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    8988:	f8d0 9008 	ldr.w	r9, [r0, #8]
    898c:	8ac0      	ldrh	r0, [r0, #22]
    898e:	eb19 0502 	adds.w	r5, r9, r2
    8992:	eb41 0806 	adc.w	r8, r1, r6
    8996:	bbb0      	cbnz	r0, 8a06 <MPSL_IRQ_RADIO_Handler+0x29a>
    8998:	89e0      	ldrh	r0, [r4, #14]
    899a:	b3a0      	cbz	r0, 8a06 <MPSL_IRQ_RADIO_Handler+0x29a>
    899c:	f003 f8ee 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    89a0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    89a4:	bf08      	it	eq
    89a6:	200d      	moveq	r0, #13
    89a8:	d00b      	beq.n	89c2 <MPSL_IRQ_RADIO_Handler+0x256>
    89aa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    89ae:	3856      	subs	r0, #86	; 0x56
    89b0:	bf08      	it	eq
    89b2:	201c      	moveq	r0, #28
    89b4:	d005      	beq.n	89c2 <MPSL_IRQ_RADIO_Handler+0x256>
    89b6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    89ba:	389f      	subs	r0, #159	; 0x9f
    89bc:	bf14      	ite	ne
    89be:	4630      	movne	r0, r6
    89c0:	2032      	moveq	r0, #50	; 0x32
    89c2:	1c41      	adds	r1, r0, #1
    89c4:	ebb5 0009 	subs.w	r0, r5, r9
    89c8:	4288      	cmp	r0, r1
    89ca:	da1c      	bge.n	8a06 <MPSL_IRQ_RADIO_Handler+0x29a>
    89cc:	f003 f8d6 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    89d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    89d4:	bf08      	it	eq
    89d6:	200d      	moveq	r0, #13
    89d8:	d00b      	beq.n	89f2 <MPSL_IRQ_RADIO_Handler+0x286>
    89da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    89de:	3856      	subs	r0, #86	; 0x56
    89e0:	bf08      	it	eq
    89e2:	201c      	moveq	r0, #28
    89e4:	d005      	beq.n	89f2 <MPSL_IRQ_RADIO_Handler+0x286>
    89e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    89ea:	389f      	subs	r0, #159	; 0x9f
    89ec:	bf14      	ite	ne
    89ee:	4630      	movne	r0, r6
    89f0:	2032      	moveq	r0, #50	; 0x32
    89f2:	f89d 1020 	ldrb.w	r1, [sp, #32]
    89f6:	1c40      	adds	r0, r0, #1
    89f8:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    89fc:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8a00:	1815      	adds	r5, r2, r0
    8a02:	eb43 0806 	adc.w	r8, r3, r6
    8a06:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    8a0a:	1b49      	subs	r1, r1, r5
    8a0c:	eb70 0008 	sbcs.w	r0, r0, r8
    8a10:	d203      	bcs.n	8a1a <MPSL_IRQ_RADIO_Handler+0x2ae>
    8a12:	b00f      	add	sp, #60	; 0x3c
    8a14:	2000      	movs	r0, #0
    8a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a1a:	e9c4 5800 	strd	r5, r8, [r4]
    8a1e:	9818      	ldr	r0, [sp, #96]	; 0x60
    8a20:	900b      	str	r0, [sp, #44]	; 0x2c
    8a22:	a808      	add	r0, sp, #32
    8a24:	900a      	str	r0, [sp, #40]	; 0x28
    8a26:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a28:	f10d 0a1c 	add.w	sl, sp, #28
    8a2c:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8a30:	2020      	movs	r0, #32
    8a32:	f88d 001c 	strb.w	r0, [sp, #28]
    8a36:	2d20      	cmp	r5, #32
    8a38:	d037      	beq.n	8aaa <MPSL_IRQ_RADIO_Handler+0x33e>
    8a3a:	4843      	ldr	r0, [pc, #268]	; (8b48 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8a3e:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8a42:	bf00      	nop
    8a44:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    8a48:	e9d4 8300 	ldrd	r8, r3, [r4]
    8a4c:	f850 9f08 	ldr.w	r9, [r0, #8]!
    8a50:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8a54:	eb19 0202 	adds.w	r2, r9, r2
    8a58:	4171      	adcs	r1, r6
    8a5a:	ebb8 0202 	subs.w	r2, r8, r2
    8a5e:	eb73 0101 	sbcs.w	r1, r3, r1
    8a62:	d322      	bcc.n	8aaa <MPSL_IRQ_RADIO_Handler+0x33e>
    8a64:	89e1      	ldrh	r1, [r4, #14]
    8a66:	b1c9      	cbz	r1, 8a9c <MPSL_IRQ_RADIO_Handler+0x330>
    8a68:	89c0      	ldrh	r0, [r0, #14]
    8a6a:	b9b8      	cbnz	r0, 8a9c <MPSL_IRQ_RADIO_Handler+0x330>
    8a6c:	f003 f886 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8a70:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8a74:	bf08      	it	eq
    8a76:	200d      	moveq	r0, #13
    8a78:	d00b      	beq.n	8a92 <MPSL_IRQ_RADIO_Handler+0x326>
    8a7a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8a7e:	3856      	subs	r0, #86	; 0x56
    8a80:	bf08      	it	eq
    8a82:	201c      	moveq	r0, #28
    8a84:	d005      	beq.n	8a92 <MPSL_IRQ_RADIO_Handler+0x326>
    8a86:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8a8a:	389f      	subs	r0, #159	; 0x9f
    8a8c:	bf14      	ite	ne
    8a8e:	4630      	movne	r0, r6
    8a90:	2032      	moveq	r0, #50	; 0x32
    8a92:	1c41      	adds	r1, r0, #1
    8a94:	ebb8 0009 	subs.w	r0, r8, r9
    8a98:	4288      	cmp	r0, r1
    8a9a:	db06      	blt.n	8aaa <MPSL_IRQ_RADIO_Handler+0x33e>
    8a9c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8aa0:	f88a 5000 	strb.w	r5, [sl]
    8aa4:	7845      	ldrb	r5, [r0, #1]
    8aa6:	2d20      	cmp	r5, #32
    8aa8:	d1cc      	bne.n	8a44 <MPSL_IRQ_RADIO_Handler+0x2d8>
    8aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
    8aac:	f89a 1000 	ldrb.w	r1, [sl]
    8ab0:	2d20      	cmp	r5, #32
    8ab2:	7001      	strb	r1, [r0, #0]
    8ab4:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    8ab8:	d040      	beq.n	8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8aba:	4923      	ldr	r1, [pc, #140]	; (8b48 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8abc:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    8ac0:	f8cd 000c 	str.w	r0, [sp, #12]
    8ac4:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    8ac8:	f109 0008 	add.w	r0, r9, #8
    8acc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8ad0:	f8d4 b000 	ldr.w	fp, [r4]
    8ad4:	e9d0 a300 	ldrd	sl, r3, [r0]
    8ad8:	eb1b 0202 	adds.w	r2, fp, r2
    8adc:	4171      	adcs	r1, r6
    8ade:	ebba 0202 	subs.w	r2, sl, r2
    8ae2:	eb73 0101 	sbcs.w	r1, r3, r1
    8ae6:	d31b      	bcc.n	8b20 <MPSL_IRQ_RADIO_Handler+0x3b4>
    8ae8:	89c0      	ldrh	r0, [r0, #14]
    8aea:	b338      	cbz	r0, 8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8aec:	89e0      	ldrh	r0, [r4, #14]
    8aee:	bb28      	cbnz	r0, 8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8af0:	f003 f844 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8af4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8af8:	bf08      	it	eq
    8afa:	200d      	moveq	r0, #13
    8afc:	d00b      	beq.n	8b16 <MPSL_IRQ_RADIO_Handler+0x3aa>
    8afe:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8b02:	3856      	subs	r0, #86	; 0x56
    8b04:	bf08      	it	eq
    8b06:	201c      	moveq	r0, #28
    8b08:	d005      	beq.n	8b16 <MPSL_IRQ_RADIO_Handler+0x3aa>
    8b0a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8b0e:	389f      	subs	r0, #159	; 0x9f
    8b10:	bf14      	ite	ne
    8b12:	4630      	movne	r0, r6
    8b14:	2032      	moveq	r0, #50	; 0x32
    8b16:	1c41      	adds	r1, r0, #1
    8b18:	ebba 000b 	subs.w	r0, sl, fp
    8b1c:	4288      	cmp	r0, r1
    8b1e:	da0d      	bge.n	8b3c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8b20:	f888 5000 	strb.w	r5, [r8]
    8b24:	f899 1018 	ldrb.w	r1, [r9, #24]
    8b28:	7c20      	ldrb	r0, [r4, #16]
    8b2a:	4288      	cmp	r0, r1
    8b2c:	f4bf af26 	bcs.w	897c <MPSL_IRQ_RADIO_Handler+0x210>
    8b30:	9803      	ldr	r0, [sp, #12]
    8b32:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    8b36:	7845      	ldrb	r5, [r0, #1]
    8b38:	2d20      	cmp	r5, #32
    8b3a:	d1c3      	bne.n	8ac4 <MPSL_IRQ_RADIO_Handler+0x358>
    8b3c:	b00f      	add	sp, #60	; 0x3c
    8b3e:	2001      	movs	r0, #1
    8b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b44:	20001248 	.word	0x20001248
    8b48:	200011c8 	.word	0x200011c8
    8b4c:	20000dc8 	.word	0x20000dc8
    8b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b54:	b083      	sub	sp, #12
    8b56:	4691      	mov	r9, r2
    8b58:	4604      	mov	r4, r0
    8b5a:	460d      	mov	r5, r1
    8b5c:	4698      	mov	r8, r3
    8b5e:	aa01      	add	r2, sp, #4
    8b60:	4669      	mov	r1, sp
    8b62:	4618      	mov	r0, r3
    8b64:	f002 f934 	bl	add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    8b68:	f002 fe30 	bl	b7cc <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8b6c:	f002 f914 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8b70:	4607      	mov	r7, r0
    8b72:	481e      	ldr	r0, [pc, #120]	; (8bec <MPSL_IRQ_RADIO_Handler+0x480>)
    8b74:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    8b78:	2600      	movs	r6, #0
    8b7a:	2920      	cmp	r1, #32
    8b7c:	d009      	beq.n	8b92 <MPSL_IRQ_RADIO_Handler+0x426>
    8b7e:	6882      	ldr	r2, [r0, #8]
    8b80:	68c1      	ldr	r1, [r0, #12]
    8b82:	6900      	ldr	r0, [r0, #16]
    8b84:	1d83      	adds	r3, r0, #6
    8b86:	f146 0000 	adc.w	r0, r6, #0
    8b8a:	18d4      	adds	r4, r2, r3
    8b8c:	eb41 0500 	adc.w	r5, r1, r0
    8b90:	e026      	b.n	8be0 <MPSL_IRQ_RADIO_Handler+0x474>
    8b92:	340a      	adds	r4, #10
    8b94:	f145 0500 	adc.w	r5, r5, #0
    8b98:	f1b8 0f00 	cmp.w	r8, #0
    8b9c:	d017      	beq.n	8bce <MPSL_IRQ_RADIO_Handler+0x462>
    8b9e:	f003 f933 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8ba2:	b9a0      	cbnz	r0, 8bce <MPSL_IRQ_RADIO_Handler+0x462>
    8ba4:	f002 ffea 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ba8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8bac:	bf08      	it	eq
    8bae:	200d      	moveq	r0, #13
    8bb0:	d00b      	beq.n	8bca <MPSL_IRQ_RADIO_Handler+0x45e>
    8bb2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8bb6:	3856      	subs	r0, #86	; 0x56
    8bb8:	bf08      	it	eq
    8bba:	201c      	moveq	r0, #28
    8bbc:	d005      	beq.n	8bca <MPSL_IRQ_RADIO_Handler+0x45e>
    8bbe:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8bc2:	389f      	subs	r0, #159	; 0x9f
    8bc4:	bf14      	ite	ne
    8bc6:	4630      	movne	r0, r6
    8bc8:	2032      	moveq	r0, #50	; 0x32
    8bca:	1904      	adds	r4, r0, r4
    8bcc:	4175      	adcs	r5, r6
    8bce:	f1b9 0f00 	cmp.w	r9, #0
    8bd2:	d105      	bne.n	8be0 <MPSL_IRQ_RADIO_Handler+0x474>
    8bd4:	9800      	ldr	r0, [sp, #0]
    8bd6:	4287      	cmp	r7, r0
    8bd8:	d902      	bls.n	8be0 <MPSL_IRQ_RADIO_Handler+0x474>
    8bda:	1a38      	subs	r0, r7, r0
    8bdc:	1904      	adds	r4, r0, r4
    8bde:	4175      	adcs	r5, r6
    8be0:	b003      	add	sp, #12
    8be2:	4620      	mov	r0, r4
    8be4:	4629      	mov	r1, r5
    8be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8bea:	0000      	.short	0x0000
    8bec:	20001248 	.word	0x20001248
    8bf0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bf4:	b081      	sub	sp, #4
    8bf6:	4605      	mov	r5, r0
    8bf8:	9802      	ldr	r0, [sp, #8]
    8bfa:	494a      	ldr	r1, [pc, #296]	; (8d24 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    8bfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8c00:	4408      	add	r0, r1
    8c02:	2600      	movs	r6, #0
    8c04:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    8c08:	2020      	movs	r0, #32
    8c0a:	4692      	mov	sl, r2
    8c0c:	7010      	strb	r0, [r2, #0]
    8c0e:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    8c12:	2c20      	cmp	r4, #32
    8c14:	d036      	beq.n	8c84 <MPSL_IRQ_RADIO_Handler+0x518>
    8c16:	9902      	ldr	r1, [sp, #8]
    8c18:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    8c1c:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8c20:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    8c24:	e9d5 7300 	ldrd	r7, r3, [r5]
    8c28:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8c2c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8c30:	eb18 0202 	adds.w	r2, r8, r2
    8c34:	4171      	adcs	r1, r6
    8c36:	1aba      	subs	r2, r7, r2
    8c38:	eb73 0101 	sbcs.w	r1, r3, r1
    8c3c:	d322      	bcc.n	8c84 <MPSL_IRQ_RADIO_Handler+0x518>
    8c3e:	89e9      	ldrh	r1, [r5, #14]
    8c40:	b1c9      	cbz	r1, 8c76 <MPSL_IRQ_RADIO_Handler+0x50a>
    8c42:	89c0      	ldrh	r0, [r0, #14]
    8c44:	b9b8      	cbnz	r0, 8c76 <MPSL_IRQ_RADIO_Handler+0x50a>
    8c46:	f002 ff99 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8c4a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8c4e:	bf08      	it	eq
    8c50:	200d      	moveq	r0, #13
    8c52:	d00b      	beq.n	8c6c <MPSL_IRQ_RADIO_Handler+0x500>
    8c54:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8c58:	3856      	subs	r0, #86	; 0x56
    8c5a:	bf08      	it	eq
    8c5c:	201c      	moveq	r0, #28
    8c5e:	d005      	beq.n	8c6c <MPSL_IRQ_RADIO_Handler+0x500>
    8c60:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8c64:	389f      	subs	r0, #159	; 0x9f
    8c66:	bf14      	ite	ne
    8c68:	4630      	movne	r0, r6
    8c6a:	2032      	moveq	r0, #50	; 0x32
    8c6c:	1c41      	adds	r1, r0, #1
    8c6e:	ebb7 0008 	subs.w	r0, r7, r8
    8c72:	4288      	cmp	r0, r1
    8c74:	db06      	blt.n	8c84 <MPSL_IRQ_RADIO_Handler+0x518>
    8c76:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    8c7a:	f88a 4000 	strb.w	r4, [sl]
    8c7e:	7844      	ldrb	r4, [r0, #1]
    8c80:	2c20      	cmp	r4, #32
    8c82:	d1cd      	bne.n	8c20 <MPSL_IRQ_RADIO_Handler+0x4b4>
    8c84:	9804      	ldr	r0, [sp, #16]
    8c86:	f89a 1000 	ldrb.w	r1, [sl]
    8c8a:	2c20      	cmp	r4, #32
    8c8c:	7001      	strb	r1, [r0, #0]
    8c8e:	9f04      	ldr	r7, [sp, #16]
    8c90:	9802      	ldr	r0, [sp, #8]
    8c92:	d042      	beq.n	8d1a <MPSL_IRQ_RADIO_Handler+0x5ae>
    8c94:	4924      	ldr	r1, [pc, #144]	; (8d28 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    8c96:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    8c9a:	9000      	str	r0, [sp, #0]
    8c9c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    8ca0:	f8d5 b000 	ldr.w	fp, [r5]
    8ca4:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    8ca8:	f108 0008 	add.w	r0, r8, #8
    8cac:	eb1b 0201 	adds.w	r2, fp, r1
    8cb0:	eb43 0106 	adc.w	r1, r3, r6
    8cb4:	e9d0 a300 	ldrd	sl, r3, [r0]
    8cb8:	ebba 0202 	subs.w	r2, sl, r2
    8cbc:	eb73 0101 	sbcs.w	r1, r3, r1
    8cc0:	d31b      	bcc.n	8cfa <MPSL_IRQ_RADIO_Handler+0x58e>
    8cc2:	89c0      	ldrh	r0, [r0, #14]
    8cc4:	b348      	cbz	r0, 8d1a <MPSL_IRQ_RADIO_Handler+0x5ae>
    8cc6:	89e8      	ldrh	r0, [r5, #14]
    8cc8:	bb38      	cbnz	r0, 8d1a <MPSL_IRQ_RADIO_Handler+0x5ae>
    8cca:	f002 ff57 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8cce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8cd2:	bf08      	it	eq
    8cd4:	200d      	moveq	r0, #13
    8cd6:	d00b      	beq.n	8cf0 <MPSL_IRQ_RADIO_Handler+0x584>
    8cd8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8cdc:	3856      	subs	r0, #86	; 0x56
    8cde:	bf08      	it	eq
    8ce0:	201c      	moveq	r0, #28
    8ce2:	d005      	beq.n	8cf0 <MPSL_IRQ_RADIO_Handler+0x584>
    8ce4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8ce8:	389f      	subs	r0, #159	; 0x9f
    8cea:	bf14      	ite	ne
    8cec:	4630      	movne	r0, r6
    8cee:	2032      	moveq	r0, #50	; 0x32
    8cf0:	1c41      	adds	r1, r0, #1
    8cf2:	ebba 000b 	subs.w	r0, sl, fp
    8cf6:	4288      	cmp	r0, r1
    8cf8:	da0f      	bge.n	8d1a <MPSL_IRQ_RADIO_Handler+0x5ae>
    8cfa:	703c      	strb	r4, [r7, #0]
    8cfc:	f898 1018 	ldrb.w	r1, [r8, #24]
    8d00:	7c28      	ldrb	r0, [r5, #16]
    8d02:	4288      	cmp	r0, r1
    8d04:	d303      	bcc.n	8d0e <MPSL_IRQ_RADIO_Handler+0x5a2>
    8d06:	b005      	add	sp, #20
    8d08:	2000      	movs	r0, #0
    8d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d0e:	9800      	ldr	r0, [sp, #0]
    8d10:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    8d14:	7844      	ldrb	r4, [r0, #1]
    8d16:	2c20      	cmp	r4, #32
    8d18:	d1c0      	bne.n	8c9c <MPSL_IRQ_RADIO_Handler+0x530>
    8d1a:	b005      	add	sp, #20
    8d1c:	2001      	movs	r0, #1
    8d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d22:	0000      	.short	0x0000
    8d24:	20001248 	.word	0x20001248
    8d28:	200011c8 	.word	0x200011c8
    8d2c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8d30:	b09c      	sub	sp, #112	; 0x70
    8d32:	461f      	mov	r7, r3
    8d34:	f002 fa9c 	bl	b270 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    8d38:	4604      	mov	r4, r0
    8d3a:	460d      	mov	r5, r1
    8d3c:	f002 fd46 	bl	b7cc <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8d40:	4606      	mov	r6, r0
    8d42:	981e      	ldr	r0, [sp, #120]	; 0x78
    8d44:	2801      	cmp	r0, #1
    8d46:	bf18      	it	ne
    8d48:	2802      	cmpne	r0, #2
    8d4a:	d005      	beq.n	8d58 <MPSL_IRQ_RADIO_Handler+0x5ec>
    8d4c:	f640 1156 	movw	r1, #2390	; 0x956
    8d50:	f04f 0070 	mov.w	r0, #112	; 0x70
    8d54:	f003 f8d0 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d58:	49fe      	ldr	r1, [pc, #1016]	; (9154 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    8d5a:	2001      	movs	r0, #1
    8d5c:	6008      	str	r0, [r1, #0]
    8d5e:	49fe      	ldr	r1, [pc, #1016]	; (9158 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    8d60:	6889      	ldr	r1, [r1, #8]
    8d62:	6008      	str	r0, [r1, #0]
    8d64:	2000      	movs	r0, #0
    8d66:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    8d6a:	900c      	str	r0, [sp, #48]	; 0x30
    8d6c:	1e40      	subs	r0, r0, #1
    8d6e:	900d      	str	r0, [sp, #52]	; 0x34
    8d70:	48fa      	ldr	r0, [pc, #1000]	; (915c <MPSL_IRQ_RADIO_Handler+0x9f0>)
    8d72:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    8d76:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    8d7a:	f100 0108 	add.w	r1, r0, #8
    8d7e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    8d82:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    8d86:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    8d8a:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    8d8e:	980e      	ldr	r0, [sp, #56]	; 0x38
    8d90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d94:	f007 fa33 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8d98:	4602      	mov	r2, r0
    8d9a:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    8d9e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    8da2:	4bef      	ldr	r3, [pc, #956]	; (9160 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    8da4:	4440      	add	r0, r8
    8da6:	1c41      	adds	r1, r0, #1
    8da8:	1850      	adds	r0, r2, r1
    8daa:	429a      	cmp	r2, r3
    8dac:	d856      	bhi.n	8e5c <MPSL_IRQ_RADIO_Handler+0x6f0>
    8dae:	4aed      	ldr	r2, [pc, #948]	; (9164 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    8db0:	4291      	cmp	r1, r2
    8db2:	dc5b      	bgt.n	8e6c <MPSL_IRQ_RADIO_Handler+0x700>
    8db4:	4252      	negs	r2, r2
    8db6:	4291      	cmp	r1, r2
    8db8:	db60      	blt.n	8e7c <MPSL_IRQ_RADIO_Handler+0x710>
    8dba:	1c59      	adds	r1, r3, #1
    8dbc:	4281      	cmp	r1, r0
    8dbe:	bfdc      	itt	le
    8dc0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8dc4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8dc8:	dd05      	ble.n	8dd6 <MPSL_IRQ_RADIO_Handler+0x66a>
    8dca:	2800      	cmp	r0, #0
    8dcc:	bfbc      	itt	lt
    8dce:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8dd2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8dd6:	9017      	str	r0, [sp, #92]	; 0x5c
    8dd8:	48e3      	ldr	r0, [pc, #908]	; (9168 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    8dda:	f1b8 0f00 	cmp.w	r8, #0
    8dde:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    8de2:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    8de6:	bf14      	ite	ne
    8de8:	f04f 0a01 	movne.w	sl, #1
    8dec:	f04f 0a00 	moveq.w	sl, #0
    8df0:	f003 f80a 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8df4:	9019      	str	r0, [sp, #100]	; 0x64
    8df6:	f1ba 0f00 	cmp.w	sl, #0
    8dfa:	d00b      	beq.n	8e14 <MPSL_IRQ_RADIO_Handler+0x6a8>
    8dfc:	49db      	ldr	r1, [pc, #876]	; (916c <MPSL_IRQ_RADIO_Handler+0xa00>)
    8dfe:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    8e02:	ea6f 0200 	mvn.w	r2, r0
    8e06:	ea72 0001 	orns	r0, r2, r1
    8e0a:	bf02      	ittt	eq
    8e0c:	9819      	ldreq	r0, [sp, #100]	; 0x64
    8e0e:	2800      	cmpeq	r0, #0
    8e10:	2701      	moveq	r7, #1
    8e12:	d001      	beq.n	8e18 <MPSL_IRQ_RADIO_Handler+0x6ac>
    8e14:	f04f 0700 	mov.w	r7, #0
    8e18:	f002 feb0 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e1c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e20:	bf08      	it	eq
    8e22:	200d      	moveq	r0, #13
    8e24:	d00b      	beq.n	8e3e <MPSL_IRQ_RADIO_Handler+0x6d2>
    8e26:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e2a:	3856      	subs	r0, #86	; 0x56
    8e2c:	bf08      	it	eq
    8e2e:	201c      	moveq	r0, #28
    8e30:	d005      	beq.n	8e3e <MPSL_IRQ_RADIO_Handler+0x6d2>
    8e32:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e36:	389f      	subs	r0, #159	; 0x9f
    8e38:	bf14      	ite	ne
    8e3a:	2000      	movne	r0, #0
    8e3c:	2032      	moveq	r0, #50	; 0x32
    8e3e:	f04f 0900 	mov.w	r9, #0
    8e42:	46cb      	mov	fp, r9
    8e44:	9016      	str	r0, [sp, #88]	; 0x58
    8e46:	4546      	cmp	r6, r8
    8e48:	d936      	bls.n	8eb8 <MPSL_IRQ_RADIO_Handler+0x74c>
    8e4a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    8e4c:	43f3      	mvns	r3, r6
    8e4e:	f8df c310 	ldr.w	ip, [pc, #784]	; 9160 <MPSL_IRQ_RADIO_Handler+0x9f4>
    8e52:	18c8      	adds	r0, r1, r3
    8e54:	46e9      	mov	r9, sp
    8e56:	aa1a      	add	r2, sp, #104	; 0x68
    8e58:	4561      	cmp	r1, ip
    8e5a:	d904      	bls.n	8e66 <MPSL_IRQ_RADIO_Handler+0x6fa>
    8e5c:	f240 517f 	movw	r1, #1407	; 0x57f
    8e60:	2070      	movs	r0, #112	; 0x70
    8e62:	f003 f849 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e66:	49bf      	ldr	r1, [pc, #764]	; (9164 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    8e68:	428b      	cmp	r3, r1
    8e6a:	dd04      	ble.n	8e76 <MPSL_IRQ_RADIO_Handler+0x70a>
    8e6c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    8e70:	2070      	movs	r0, #112	; 0x70
    8e72:	f003 f841 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e76:	49be      	ldr	r1, [pc, #760]	; (9170 <MPSL_IRQ_RADIO_Handler+0xa04>)
    8e78:	428b      	cmp	r3, r1
    8e7a:	da04      	bge.n	8e86 <MPSL_IRQ_RADIO_Handler+0x71a>
    8e7c:	f240 5181 	movw	r1, #1409	; 0x581
    8e80:	2070      	movs	r0, #112	; 0x70
    8e82:	f003 f839 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e86:	49bb      	ldr	r1, [pc, #748]	; (9174 <MPSL_IRQ_RADIO_Handler+0xa08>)
    8e88:	4281      	cmp	r1, r0
    8e8a:	bfdc      	itt	le
    8e8c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8e90:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8e94:	dd05      	ble.n	8ea2 <MPSL_IRQ_RADIO_Handler+0x736>
    8e96:	2800      	cmp	r0, #0
    8e98:	bfbc      	itt	lt
    8e9a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8e9e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8ea2:	4649      	mov	r1, r9
    8ea4:	f001 ff94 	bl	add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    8ea8:	9800      	ldr	r0, [sp, #0]
    8eaa:	990e      	ldr	r1, [sp, #56]	; 0x38
    8eac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8eb0:	9000      	str	r0, [sp, #0]
    8eb2:	1a08      	subs	r0, r1, r0
    8eb4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    8eb8:	2f00      	cmp	r7, #0
    8eba:	bf18      	it	ne
    8ebc:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    8ec0:	d105      	bne.n	8ece <MPSL_IRQ_RADIO_Handler+0x762>
    8ec2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8ec6:	2800      	cmp	r0, #0
    8ec8:	bf18      	it	ne
    8eca:	f04f 0b02 	movne.w	fp, #2
    8ece:	43e0      	mvns	r0, r4
    8ed0:	ea70 0005 	orns	r0, r0, r5
    8ed4:	d022      	beq.n	8f1c <MPSL_IRQ_RADIO_Handler+0x7b0>
    8ed6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    8eda:	1a22      	subs	r2, r4, r0
    8edc:	eb75 0201 	sbcs.w	r2, r5, r1
    8ee0:	d20c      	bcs.n	8efc <MPSL_IRQ_RADIO_Handler+0x790>
    8ee2:	1b02      	subs	r2, r0, r4
    8ee4:	eb61 0105 	sbc.w	r1, r1, r5
    8ee8:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    8eec:	f171 0100 	sbcs.w	r1, r1, #0
    8ef0:	d311      	bcc.n	8f16 <MPSL_IRQ_RADIO_Handler+0x7aa>
    8ef2:	f640 1195 	movw	r1, #2453	; 0x995
    8ef6:	2070      	movs	r0, #112	; 0x70
    8ef8:	f002 fffe 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8efc:	1a22      	subs	r2, r4, r0
    8efe:	eb65 0101 	sbc.w	r1, r5, r1
    8f02:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    8f06:	f171 0100 	sbcs.w	r1, r1, #0
    8f0a:	d304      	bcc.n	8f16 <MPSL_IRQ_RADIO_Handler+0x7aa>
    8f0c:	f640 1199 	movw	r1, #2457	; 0x999
    8f10:	2070      	movs	r0, #112	; 0x70
    8f12:	f002 fff1 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f16:	1b00      	subs	r0, r0, r4
    8f18:	2801      	cmp	r0, #1
    8f1a:	da03      	bge.n	8f24 <MPSL_IRQ_RADIO_Handler+0x7b8>
    8f1c:	981c      	ldr	r0, [sp, #112]	; 0x70
    8f1e:	901a      	str	r0, [sp, #104]	; 0x68
    8f20:	2003      	movs	r0, #3
    8f22:	e00d      	b.n	8f40 <MPSL_IRQ_RADIO_Handler+0x7d4>
    8f24:	b157      	cbz	r7, 8f3c <MPSL_IRQ_RADIO_Handler+0x7d0>
    8f26:	4891      	ldr	r0, [pc, #580]	; (916c <MPSL_IRQ_RADIO_Handler+0xa00>)
    8f28:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    8f2c:	b130      	cbz	r0, 8f3c <MPSL_IRQ_RADIO_Handler+0x7d0>
    8f2e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8f32:	f110 0b00 	adds.w	fp, r0, #0
    8f36:	bf18      	it	ne
    8f38:	f04f 0b02 	movne.w	fp, #2
    8f3c:	2000      	movs	r0, #0
    8f3e:	941a      	str	r4, [sp, #104]	; 0x68
    8f40:	4483      	add	fp, r0
    8f42:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    8f46:	ebb0 0009 	subs.w	r0, r0, r9
    8f4a:	f162 0100 	sbc.w	r1, r2, #0
    8f4e:	1e42      	subs	r2, r0, #1
    8f50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8f52:	f141 3eff 	adc.w	lr, r1, #4294967295	; 0xffffffff
    8f56:	1ad3      	subs	r3, r2, r3
    8f58:	455b      	cmp	r3, fp
    8f5a:	db08      	blt.n	8f6e <MPSL_IRQ_RADIO_Handler+0x802>
    8f5c:	f1b9 0f00 	cmp.w	r9, #0
    8f60:	d032      	beq.n	8fc8 <MPSL_IRQ_RADIO_Handler+0x85c>
    8f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f64:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    8f68:	444b      	add	r3, r9
    8f6a:	9310      	str	r3, [sp, #64]	; 0x40
    8f6c:	e02c      	b.n	8fc8 <MPSL_IRQ_RADIO_Handler+0x85c>
    8f6e:	f1b9 0f00 	cmp.w	r9, #0
    8f72:	d005      	beq.n	8f80 <MPSL_IRQ_RADIO_Handler+0x814>
    8f74:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    8f78:	b920      	cbnz	r0, 8f84 <MPSL_IRQ_RADIO_Handler+0x818>
    8f7a:	f002 fc1d 	bl	b7b8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    8f7e:	b108      	cbz	r0, 8f84 <MPSL_IRQ_RADIO_Handler+0x818>
    8f80:	b9af      	cbnz	r7, 8fae <MPSL_IRQ_RADIO_Handler+0x842>
    8f82:	e00c      	b.n	8f9e <MPSL_IRQ_RADIO_Handler+0x832>
    8f84:	b92f      	cbnz	r7, 8f92 <MPSL_IRQ_RADIO_Handler+0x826>
    8f86:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8f8a:	2800      	cmp	r0, #0
    8f8c:	bf18      	it	ne
    8f8e:	f1ab 0b02 	subne.w	fp, fp, #2
    8f92:	f04f 0900 	mov.w	r9, #0
    8f96:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    8f9a:	464e      	mov	r6, r9
    8f9c:	e007      	b.n	8fae <MPSL_IRQ_RADIO_Handler+0x842>
    8f9e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8fa2:	b120      	cbz	r0, 8fae <MPSL_IRQ_RADIO_Handler+0x842>
    8fa4:	2000      	movs	r0, #0
    8fa6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    8faa:	f1ab 0b02 	sub.w	fp, fp, #2
    8fae:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    8fb2:	ebb0 0009 	subs.w	r0, r0, r9
    8fb6:	f162 0100 	sbc.w	r1, r2, #0
    8fba:	1e42      	subs	r2, r0, #1
    8fbc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8fbe:	f141 3eff 	adc.w	lr, r1, #4294967295	; 0xffffffff
    8fc2:	1ad3      	subs	r3, r2, r3
    8fc4:	455b      	cmp	r3, fp
    8fc6:	db7d      	blt.n	90c4 <MPSL_IRQ_RADIO_Handler+0x958>
    8fc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8fca:	b99b      	cbnz	r3, 8ff4 <MPSL_IRQ_RADIO_Handler+0x888>
    8fcc:	4b67      	ldr	r3, [pc, #412]	; (916c <MPSL_IRQ_RADIO_Handler+0xa00>)
    8fce:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    8fd2:	ea6f 090c 	mvn.w	r9, ip
    8fd6:	ea79 0903 	orns	r9, r9, r3
    8fda:	d00b      	beq.n	8ff4 <MPSL_IRQ_RADIO_Handler+0x888>
    8fdc:	ebb0 0c0c 	subs.w	ip, r0, ip
    8fe0:	9816      	ldr	r0, [sp, #88]	; 0x58
    8fe2:	eb61 0303 	sbc.w	r3, r1, r3
    8fe6:	ebbc 0000 	subs.w	r0, ip, r0
    8fea:	f173 0000 	sbcs.w	r0, r3, #0
    8fee:	bf38      	it	cc
    8ff0:	2000      	movcc	r0, #0
    8ff2:	d300      	bcc.n	8ff6 <MPSL_IRQ_RADIO_Handler+0x88a>
    8ff4:	2001      	movs	r0, #1
    8ff6:	ea3a 0000 	bics.w	r0, sl, r0
    8ffa:	d163      	bne.n	90c4 <MPSL_IRQ_RADIO_Handler+0x958>
    8ffc:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    9000:	e9cd 0107 	strd	r0, r1, [sp, #28]
    9004:	981e      	ldr	r0, [sp, #120]	; 0x78
    9006:	4691      	mov	r9, r2
    9008:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    900c:	46f3      	mov	fp, lr
    900e:	2700      	movs	r7, #0
    9010:	f002 fdb4 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9014:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9018:	bf08      	it	eq
    901a:	200d      	moveq	r0, #13
    901c:	d00b      	beq.n	9036 <MPSL_IRQ_RADIO_Handler+0x8ca>
    901e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9022:	3856      	subs	r0, #86	; 0x56
    9024:	bf08      	it	eq
    9026:	201c      	moveq	r0, #28
    9028:	d005      	beq.n	9036 <MPSL_IRQ_RADIO_Handler+0x8ca>
    902a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    902e:	389f      	subs	r0, #159	; 0x9f
    9030:	bf14      	ite	ne
    9032:	4638      	movne	r0, r7
    9034:	2032      	moveq	r0, #50	; 0x32
    9036:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    903a:	300b      	adds	r0, #11
    903c:	ebb9 0202 	subs.w	r2, r9, r2
    9040:	eb6b 0303 	sbc.w	r3, fp, r3
    9044:	1a10      	subs	r0, r2, r0
    9046:	f173 0000 	sbcs.w	r0, r3, #0
    904a:	d22a      	bcs.n	90a2 <MPSL_IRQ_RADIO_Handler+0x936>
    904c:	9819      	ldr	r0, [sp, #100]	; 0x64
    904e:	2801      	cmp	r0, #1
    9050:	d002      	beq.n	9058 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9052:	9818      	ldr	r0, [sp, #96]	; 0x60
    9054:	b148      	cbz	r0, 906a <MPSL_IRQ_RADIO_Handler+0x8fe>
    9056:	e017      	b.n	9088 <MPSL_IRQ_RADIO_Handler+0x91c>
    9058:	43e0      	mvns	r0, r4
    905a:	ea70 0005 	orns	r0, r0, r5
    905e:	d127      	bne.n	90b0 <MPSL_IRQ_RADIO_Handler+0x944>
    9060:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9064:	2070      	movs	r0, #112	; 0x70
    9066:	f002 ff47 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    906a:	43e0      	mvns	r0, r4
    906c:	ea70 0005 	orns	r0, r0, r5
    9070:	d00a      	beq.n	9088 <MPSL_IRQ_RADIO_Handler+0x91c>
    9072:	d01d      	beq.n	90b0 <MPSL_IRQ_RADIO_Handler+0x944>
    9074:	ebb4 0009 	subs.w	r0, r4, r9
    9078:	eb65 010b 	sbc.w	r1, r5, fp
    907c:	2300      	movs	r3, #0
    907e:	f1d0 0204 	rsbs	r2, r0, #4
    9082:	eb73 0201 	sbcs.w	r2, r3, r1
    9086:	da06      	bge.n	9096 <MPSL_IRQ_RADIO_Handler+0x92a>
    9088:	464c      	mov	r4, r9
    908a:	465d      	mov	r5, fp
    908c:	4620      	mov	r0, r4
    908e:	4629      	mov	r1, r5
    9090:	f001 ffce 	bl	b030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9094:	e00c      	b.n	90b0 <MPSL_IRQ_RADIO_Handler+0x944>
    9096:	2200      	movs	r2, #0
    9098:	1a10      	subs	r0, r2, r0
    909a:	eb72 0001 	sbcs.w	r0, r2, r1
    909e:	db11      	blt.n	90c4 <MPSL_IRQ_RADIO_Handler+0x958>
    90a0:	e006      	b.n	90b0 <MPSL_IRQ_RADIO_Handler+0x944>
    90a2:	464c      	mov	r4, r9
    90a4:	465d      	mov	r5, fp
    90a6:	4620      	mov	r0, r4
    90a8:	4629      	mov	r1, r5
    90aa:	f001 ffc1 	bl	b030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    90ae:	4657      	mov	r7, sl
    90b0:	43e1      	mvns	r1, r4
    90b2:	ea71 0005 	orns	r0, r1, r5
    90b6:	d071      	beq.n	919c <MPSL_IRQ_RADIO_Handler+0xa30>
    90b8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    90bc:	f04f 0b00 	mov.w	fp, #0
    90c0:	990e      	ldr	r1, [sp, #56]	; 0x38
    90c2:	e000      	b.n	90c6 <MPSL_IRQ_RADIO_Handler+0x95a>
    90c4:	e06f      	b.n	91a6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    90c6:	1a0b      	subs	r3, r1, r0
    90c8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    90cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    90d0:	eb11 010c 	adds.w	r1, r1, ip
    90d4:	1a08      	subs	r0, r1, r0
    90d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    90da:	2b01      	cmp	r3, #1
    90dc:	d363      	bcc.n	91a6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    90de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    90e2:	bf98      	it	ls
    90e4:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    90e8:	d85d      	bhi.n	91a6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    90ea:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    90ee:	f007 f886 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    90f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    90f4:	4a1b      	ldr	r2, [pc, #108]	; (9164 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    90f6:	1a0d      	subs	r5, r1, r0
    90f8:	1aaa      	subs	r2, r5, r2
    90fa:	f17b 0200 	sbcs.w	r2, fp, #0
    90fe:	d316      	bcc.n	912e <MPSL_IRQ_RADIO_Handler+0x9c2>
    9100:	4b18      	ldr	r3, [pc, #96]	; (9164 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9102:	1a42      	subs	r2, r0, r1
    9104:	1ad3      	subs	r3, r2, r3
    9106:	f17b 0300 	sbcs.w	r3, fp, #0
    910a:	d310      	bcc.n	912e <MPSL_IRQ_RADIO_Handler+0x9c2>
    910c:	4b14      	ldr	r3, [pc, #80]	; (9160 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    910e:	42ab      	cmp	r3, r5
    9110:	bf3e      	ittt	cc
    9112:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    9116:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    911a:	1845      	addcc	r5, r0, r1
    911c:	d307      	bcc.n	912e <MPSL_IRQ_RADIO_Handler+0x9c2>
    911e:	4293      	cmp	r3, r2
    9120:	d245      	bcs.n	91ae <MPSL_IRQ_RADIO_Handler+0xa42>
    9122:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9126:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    912a:	4408      	add	r0, r1
    912c:	4245      	negs	r5, r0
    912e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 916c <MPSL_IRQ_RADIO_Handler+0xa00>
    9132:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    9136:	b378      	cbz	r0, 9198 <MPSL_IRQ_RADIO_Handler+0xa2c>
    9138:	981e      	ldr	r0, [sp, #120]	; 0x78
    913a:	2801      	cmp	r0, #1
    913c:	d005      	beq.n	914a <MPSL_IRQ_RADIO_Handler+0x9de>
    913e:	2002      	movs	r0, #2
    9140:	f002 fa02 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9144:	2001      	movs	r0, #1
    9146:	f002 f9ff 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    914a:	45b0      	cmp	r8, r6
    914c:	d240      	bcs.n	91d0 <MPSL_IRQ_RADIO_Handler+0xa64>
    914e:	eba5 0106 	sub.w	r1, r5, r6
    9152:	e011      	b.n	9178 <MPSL_IRQ_RADIO_Handler+0xa0c>
    9154:	40000508 	.word	0x40000508
    9158:	20000308 	.word	0x20000308
    915c:	20000dc8 	.word	0x20000dc8
    9160:	1e847fff 	.word	0x1e847fff
    9164:	0f424000 	.word	0x0f424000
    9168:	200011c8 	.word	0x200011c8
    916c:	20001248 	.word	0x20001248
    9170:	f0bdc000 	.word	0xf0bdc000
    9174:	1e848000 	.word	0x1e848000
    9178:	f04f 0002 	mov.w	r0, #2
    917c:	f002 f92a 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9180:	b398      	cbz	r0, 91ea <MPSL_IRQ_RADIO_Handler+0xa7e>
    9182:	f1b8 0f00 	cmp.w	r8, #0
    9186:	bf1c      	itt	ne
    9188:	eba5 0108 	subne.w	r1, r5, r8
    918c:	2001      	movne	r0, #1
    918e:	d035      	beq.n	91fc <MPSL_IRQ_RADIO_Handler+0xa90>
    9190:	f002 f920 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9194:	b348      	cbz	r0, 91ea <MPSL_IRQ_RADIO_Handler+0xa7e>
    9196:	e031      	b.n	91fc <MPSL_IRQ_RADIO_Handler+0xa90>
    9198:	e00e      	b.n	91b8 <MPSL_IRQ_RADIO_Handler+0xa4c>
    919a:	e7ff      	b.n	919c <MPSL_IRQ_RADIO_Handler+0xa30>
    919c:	f640 2103 	movw	r1, #2563	; 0xa03
    91a0:	2070      	movs	r0, #112	; 0x70
    91a2:	f002 fea9 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91a6:	b020      	add	sp, #128	; 0x80
    91a8:	2000      	movs	r0, #0
    91aa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    91ae:	f640 21d7 	movw	r1, #2775	; 0xad7
    91b2:	2070      	movs	r0, #112	; 0x70
    91b4:	f002 fea0 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91b8:	45b0      	cmp	r8, r6
    91ba:	bf34      	ite	cc
    91bc:	4630      	movcc	r0, r6
    91be:	4640      	movcs	r0, r8
    91c0:	301e      	adds	r0, #30
    91c2:	42a8      	cmp	r0, r5
    91c4:	dbb8      	blt.n	9138 <MPSL_IRQ_RADIO_Handler+0x9cc>
    91c6:	f640 2117 	movw	r1, #2583	; 0xa17
    91ca:	2070      	movs	r0, #112	; 0x70
    91cc:	f002 fe94 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91d0:	d90c      	bls.n	91ec <MPSL_IRQ_RADIO_Handler+0xa80>
    91d2:	eba5 0108 	sub.w	r1, r5, r8
    91d6:	2001      	movs	r0, #1
    91d8:	f002 f8fc 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    91dc:	b128      	cbz	r0, 91ea <MPSL_IRQ_RADIO_Handler+0xa7e>
    91de:	2e00      	cmp	r6, #0
    91e0:	bf1c      	itt	ne
    91e2:	1ba9      	subne	r1, r5, r6
    91e4:	2002      	movne	r0, #2
    91e6:	d009      	beq.n	91fc <MPSL_IRQ_RADIO_Handler+0xa90>
    91e8:	e7d2      	b.n	9190 <MPSL_IRQ_RADIO_Handler+0xa24>
    91ea:	e034      	b.n	9256 <MPSL_IRQ_RADIO_Handler+0xaea>
    91ec:	ea56 0008 	orrs.w	r0, r6, r8
    91f0:	d004      	beq.n	91fc <MPSL_IRQ_RADIO_Handler+0xa90>
    91f2:	f640 113a 	movw	r1, #2362	; 0x93a
    91f6:	2070      	movs	r0, #112	; 0x70
    91f8:	f002 fe7e 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91fc:	4629      	mov	r1, r5
    91fe:	2000      	movs	r0, #0
    9200:	f002 f8e8 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9204:	b338      	cbz	r0, 9256 <MPSL_IRQ_RADIO_Handler+0xaea>
    9206:	2601      	movs	r6, #1
    9208:	f1ba 0f00 	cmp.w	sl, #0
    920c:	bf04      	itt	eq
    920e:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    9212:	2800      	cmpeq	r0, #0
    9214:	d000      	beq.n	9218 <MPSL_IRQ_RADIO_Handler+0xaac>
    9216:	b347      	cbz	r7, 926a <MPSL_IRQ_RADIO_Handler+0xafe>
    9218:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    921c:	ea6f 0101 	mvn.w	r1, r1
    9220:	ea71 0000 	orns	r0, r1, r0
    9224:	d006      	beq.n	9234 <MPSL_IRQ_RADIO_Handler+0xac8>
    9226:	f002 fcaf 	bl	bb88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    922a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    922e:	4601      	mov	r1, r0
    9230:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    9234:	b1ff      	cbz	r7, 9276 <MPSL_IRQ_RADIO_Handler+0xb0a>
    9236:	9816      	ldr	r0, [sp, #88]	; 0x58
    9238:	1a20      	subs	r0, r4, r0
    923a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    923e:	f04f 0005 	mov.w	r0, #5
    9242:	f002 f8c7 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9246:	b370      	cbz	r0, 92a6 <MPSL_IRQ_RADIO_Handler+0xb3a>
    9248:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    924c:	2800      	cmp	r0, #0
    924e:	bf08      	it	eq
    9250:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    9254:	e017      	b.n	9286 <MPSL_IRQ_RADIO_Handler+0xb1a>
    9256:	2002      	movs	r0, #2
    9258:	f002 f976 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    925c:	2001      	movs	r0, #1
    925e:	f002 f973 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9262:	b020      	add	sp, #128	; 0x80
    9264:	2000      	movs	r0, #0
    9266:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    926a:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    926e:	43c0      	mvns	r0, r0
    9270:	ea70 0001 	orns	r0, r0, r1
    9274:	d012      	beq.n	929c <MPSL_IRQ_RADIO_Handler+0xb30>
    9276:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    927a:	b120      	cbz	r0, 9286 <MPSL_IRQ_RADIO_Handler+0xb1a>
    927c:	2005      	movs	r0, #5
    927e:	f002 f963 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9282:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    9286:	eba5 0008 	sub.w	r0, r5, r8
    928a:	f1a0 0119 	sub.w	r1, r0, #25
    928e:	2900      	cmp	r1, #0
    9290:	dc0f      	bgt.n	92b2 <MPSL_IRQ_RADIO_Handler+0xb46>
    9292:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    9296:	2070      	movs	r0, #112	; 0x70
    9298:	f002 fe2e 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    929c:	f002 fc90 	bl	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    92a0:	f002 f876 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    92a4:	e7c4      	b.n	9230 <MPSL_IRQ_RADIO_Handler+0xac4>
    92a6:	e7ff      	b.n	92a8 <MPSL_IRQ_RADIO_Handler+0xb3c>
    92a8:	f240 21e6 	movw	r1, #742	; 0x2e6
    92ac:	2070      	movs	r0, #112	; 0x70
    92ae:	f002 fe23 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    92b2:	2003      	movs	r0, #3
    92b4:	f002 f88e 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    92b8:	b338      	cbz	r0, 930a <MPSL_IRQ_RADIO_Handler+0xb9e>
    92ba:	4816      	ldr	r0, [pc, #88]	; (9314 <MPSL_IRQ_RADIO_Handler+0xba8>)
    92bc:	6880      	ldr	r0, [r0, #8]
    92be:	f8c0 b000 	str.w	fp, [r0]
    92c2:	4815      	ldr	r0, [pc, #84]	; (9318 <MPSL_IRQ_RADIO_Handler+0xbac>)
    92c4:	f8c0 b000 	str.w	fp, [r0]
    92c8:	ac0c      	add	r4, sp, #48	; 0x30
    92ca:	4814      	ldr	r0, [pc, #80]	; (931c <MPSL_IRQ_RADIO_Handler+0xbb0>)
    92cc:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    92d0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    92d4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    92d8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    92dc:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    92e0:	ac10      	add	r4, sp, #64	; 0x40
    92e2:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    92e6:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    92ea:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    92ee:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    92f2:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    92f6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    92fa:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    92fe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    9302:	b020      	add	sp, #128	; 0x80
    9304:	2001      	movs	r0, #1
    9306:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    930a:	f640 2148 	movw	r1, #2632	; 0xa48
    930e:	2070      	movs	r0, #112	; 0x70
    9310:	f002 fdf2 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9314:	20000308 	.word	0x20000308
    9318:	40000508 	.word	0x40000508
    931c:	200011c8 	.word	0x200011c8
    9320:	b570      	push	{r4, r5, r6, lr}
    9322:	4d1d      	ldr	r5, [pc, #116]	; (9398 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    9324:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9328:	2820      	cmp	r0, #32
    932a:	bf18      	it	ne
    932c:	bd70      	popne	{r4, r5, r6, pc}
    932e:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9332:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9336:	4428      	add	r0, r5
    9338:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    933c:	2c20      	cmp	r4, #32
    933e:	d026      	beq.n	938e <MPSL_IRQ_RADIO_Handler+0xc22>
    9340:	4b16      	ldr	r3, [pc, #88]	; (939c <MPSL_IRQ_RADIO_Handler+0xc30>)
    9342:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9346:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    934a:	7849      	ldrb	r1, [r1, #1]
    934c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    9350:	20ff      	movs	r0, #255	; 0xff
    9352:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9356:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    935a:	4621      	mov	r1, r4
    935c:	2002      	movs	r0, #2
    935e:	f000 f88b 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9362:	2000      	movs	r0, #0
    9364:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9368:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    936c:	480c      	ldr	r0, [pc, #48]	; (93a0 <MPSL_IRQ_RADIO_Handler+0xc34>)
    936e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9372:	7e00      	ldrb	r0, [r0, #24]
    9374:	2800      	cmp	r0, #0
    9376:	bf08      	it	eq
    9378:	f002 ff26 	bleq	c1c8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    937c:	2000      	movs	r0, #0
    937e:	4909      	ldr	r1, [pc, #36]	; (93a4 <MPSL_IRQ_RADIO_Handler+0xc38>)
    9380:	6849      	ldr	r1, [r1, #4]
    9382:	2900      	cmp	r1, #0
    9384:	bf08      	it	eq
    9386:	bd70      	popeq	{r4, r5, r6, pc}
    9388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    938c:	4708      	bx	r1
    938e:	f240 311d 	movw	r1, #797	; 0x31d
    9392:	2070      	movs	r0, #112	; 0x70
    9394:	f002 fdb0 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9398:	20001248 	.word	0x20001248
    939c:	200011c8 	.word	0x200011c8
    93a0:	20000dc8 	.word	0x20000dc8
    93a4:	20000308 	.word	0x20000308
    93a8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    93ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9468 <MPSL_IRQ_RADIO_Handler+0xcfc>
    93b0:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    93b4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    93b8:	4440      	add	r0, r8
    93ba:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    93be:	2c20      	cmp	r4, #32
    93c0:	bf08      	it	eq
    93c2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    93c6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 946c <MPSL_IRQ_RADIO_Handler+0xd00>
    93ca:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 9470 <MPSL_IRQ_RADIO_Handler+0xd04>
    93ce:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    93d2:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    93d6:	2607      	movs	r6, #7
    93d8:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    93dc:	2801      	cmp	r0, #1
    93de:	d00e      	beq.n	93fe <MPSL_IRQ_RADIO_Handler+0xc92>
    93e0:	2804      	cmp	r0, #4
    93e2:	bf08      	it	eq
    93e4:	2602      	moveq	r6, #2
    93e6:	d00a      	beq.n	93fe <MPSL_IRQ_RADIO_Handler+0xc92>
    93e8:	2805      	cmp	r0, #5
    93ea:	bf0c      	ite	eq
    93ec:	2603      	moveq	r6, #3
    93ee:	2806      	cmpne	r0, #6
    93f0:	d005      	beq.n	93fe <MPSL_IRQ_RADIO_Handler+0xc92>
    93f2:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    93f6:	f04f 0070 	mov.w	r0, #112	; 0x70
    93fa:	f002 fd7d 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93fe:	f1bb 0f00 	cmp.w	fp, #0
    9402:	bf18      	it	ne
    9404:	f3af 8000 	nopne.w
    9408:	f3ef 8010 	mrs	r0, PRIMASK
    940c:	b672      	cpsid	i
    940e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9412:	784a      	ldrb	r2, [r1, #1]
    9414:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9418:	4441      	add	r1, r8
    941a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    941e:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    9422:	42a2      	cmp	r2, r4
    9424:	bf04      	itt	eq
    9426:	2220      	moveq	r2, #32
    9428:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    942c:	b1a8      	cbz	r0, 945a <MPSL_IRQ_RADIO_Handler+0xcee>
    942e:	462a      	mov	r2, r5
    9430:	4621      	mov	r1, r4
    9432:	2001      	movs	r0, #1
    9434:	f000 f820 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9438:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    943c:	e9d1 2000 	ldrd	r2, r0, [r1]
    9440:	4631      	mov	r1, r6
    9442:	4790      	blx	r2
    9444:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9448:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    944c:	4440      	add	r0, r8
    944e:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9452:	2c20      	cmp	r4, #32
    9454:	d1bd      	bne.n	93d2 <MPSL_IRQ_RADIO_Handler+0xc66>
    9456:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    945a:	4806      	ldr	r0, [pc, #24]	; (9474 <MPSL_IRQ_RADIO_Handler+0xd08>)
    945c:	2800      	cmp	r0, #0
    945e:	bf18      	it	ne
    9460:	f3af 8000 	nopne.w
    9464:	b662      	cpsie	i
    9466:	e7e2      	b.n	942e <MPSL_IRQ_RADIO_Handler+0xcc2>
    9468:	20001248 	.word	0x20001248
    946c:	00000000 	.word	0x00000000
    9470:	200011c8 	.word	0x200011c8
    9474:	00000000 	.word	0x00000000
    9478:	f8df c058 	ldr.w	ip, [pc, #88]	; 94d4 <MPSL_IRQ_RADIO_Handler+0xd68>
    947c:	b510      	push	{r4, lr}
    947e:	2300      	movs	r3, #0
    9480:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9484:	2807      	cmp	r0, #7
    9486:	d21f      	bcs.n	94c8 <MPSL_IRQ_RADIO_Handler+0xd5c>
    9488:	e8df f000 	tbb	[pc, r0]
    948c:	05050505 	.word	0x05050505
    9490:	00040404 	.word	0x00040404
    9494:	2301      	movs	r3, #1
    9496:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    949a:	2b00      	cmp	r3, #0
    949c:	bf08      	it	eq
    949e:	bd10      	popeq	{r4, pc}
    94a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    94a4:	480c      	ldr	r0, [pc, #48]	; (94d8 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    94a6:	4402      	add	r2, r0
    94a8:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    94ac:	2820      	cmp	r0, #32
    94ae:	bf0e      	itee	eq
    94b0:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    94b4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    94b8:	7041      	strbne	r1, [r0, #1]
    94ba:	2020      	movs	r0, #32
    94bc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    94c0:	7058      	strb	r0, [r3, #1]
    94c2:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    94c6:	bd10      	pop	{r4, pc}
    94c8:	f44f 7117 	mov.w	r1, #604	; 0x25c
    94cc:	2070      	movs	r0, #112	; 0x70
    94ce:	f002 fd13 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94d2:	0000      	.short	0x0000
    94d4:	200011c8 	.word	0x200011c8
    94d8:	20001248 	.word	0x20001248
    94dc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94e0:	460f      	mov	r7, r1
    94e2:	4680      	mov	r8, r0
    94e4:	f8df b154 	ldr.w	fp, [pc, #340]	; 963c <MPSL_IRQ_RADIO_Handler+0xed0>
    94e8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    94ec:	4458      	add	r0, fp
    94ee:	f1b8 0f01 	cmp.w	r8, #1
    94f2:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    94f6:	4625      	mov	r5, r4
    94f8:	bf18      	it	ne
    94fa:	f1b8 0f02 	cmpne.w	r8, #2
    94fe:	d005      	beq.n	950c <MPSL_IRQ_RADIO_Handler+0xda0>
    9500:	f640 217e 	movw	r1, #2686	; 0xa7e
    9504:	f04f 0070 	mov.w	r0, #112	; 0x70
    9508:	f002 fcf6 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    950c:	2d20      	cmp	r5, #32
    950e:	d041      	beq.n	9594 <MPSL_IRQ_RADIO_Handler+0xe28>
    9510:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9514:	2600      	movs	r6, #0
    9516:	2800      	cmp	r0, #0
    9518:	bf08      	it	eq
    951a:	2602      	moveq	r6, #2
    951c:	f001 fd82 	bl	b024 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9520:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9640 <MPSL_IRQ_RADIO_Handler+0xed4>
    9524:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9528:	6899      	ldr	r1, [r3, #8]
    952a:	691b      	ldr	r3, [r3, #16]
    952c:	1a0a      	subs	r2, r1, r0
    952e:	18c9      	adds	r1, r1, r3
    9530:	1a09      	subs	r1, r1, r0
    9532:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9536:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    953a:	4296      	cmp	r6, r2
    953c:	bf99      	ittee	ls
    953e:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9542:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9546:	4a3f      	ldrhi	r2, [pc, #252]	; (9644 <MPSL_IRQ_RADIO_Handler+0xed8>)
    9548:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    954c:	d920      	bls.n	9590 <MPSL_IRQ_RADIO_Handler+0xe24>
    954e:	4622      	mov	r2, r4
    9550:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9554:	784c      	ldrb	r4, [r1, #1]
    9556:	2c20      	cmp	r4, #32
    9558:	d012      	beq.n	9580 <MPSL_IRQ_RADIO_Handler+0xe14>
    955a:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    955e:	6899      	ldr	r1, [r3, #8]
    9560:	691b      	ldr	r3, [r3, #16]
    9562:	ebb1 0c00 	subs.w	ip, r1, r0
    9566:	18c9      	adds	r1, r1, r3
    9568:	1a09      	subs	r1, r1, r0
    956a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    956e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9572:	4566      	cmp	r6, ip
    9574:	bf9c      	itt	ls
    9576:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    957a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    957e:	d8e6      	bhi.n	954e <MPSL_IRQ_RADIO_Handler+0xde2>
    9580:	2a20      	cmp	r2, #32
    9582:	d005      	beq.n	9590 <MPSL_IRQ_RADIO_Handler+0xe24>
    9584:	463b      	mov	r3, r7
    9586:	2120      	movs	r1, #32
    9588:	2004      	movs	r0, #4
    958a:	f7ff f90d 	bl	87a8 <MPSL_IRQ_RADIO_Handler+0x3c>
    958e:	4604      	mov	r4, r0
    9590:	42ac      	cmp	r4, r5
    9592:	d113      	bne.n	95bc <MPSL_IRQ_RADIO_Handler+0xe50>
    9594:	482c      	ldr	r0, [pc, #176]	; (9648 <MPSL_IRQ_RADIO_Handler+0xedc>)
    9596:	2800      	cmp	r0, #0
    9598:	bf18      	it	ne
    959a:	f3af 8000 	nopne.w
    959e:	f001 fef7 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    95a2:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    95a6:	2a20      	cmp	r2, #32
    95a8:	d00b      	beq.n	95c2 <MPSL_IRQ_RADIO_Handler+0xe56>
    95aa:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    95ae:	1c84      	adds	r4, r0, #2
    95b0:	f141 0c00 	adc.w	ip, r1, #0
    95b4:	1b1b      	subs	r3, r3, r4
    95b6:	eb72 020c 	sbcs.w	r2, r2, ip
    95ba:	d202      	bcs.n	95c2 <MPSL_IRQ_RADIO_Handler+0xe56>
    95bc:	2000      	movs	r0, #0
    95be:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    95c2:	2d20      	cmp	r5, #32
    95c4:	d013      	beq.n	95ee <MPSL_IRQ_RADIO_Handler+0xe82>
    95c6:	462b      	mov	r3, r5
    95c8:	4642      	mov	r2, r8
    95ca:	f7ff fbaf 	bl	8d2c <MPSL_IRQ_RADIO_Handler+0x5c0>
    95ce:	2800      	cmp	r0, #0
    95d0:	bf1e      	ittt	ne
    95d2:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    95d6:	2002      	movne	r0, #2
    95d8:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    95dc:	463b      	mov	r3, r7
    95de:	462a      	mov	r2, r5
    95e0:	2120      	movs	r1, #32
    95e2:	2004      	movs	r0, #4
    95e4:	f7ff f8e0 	bl	87a8 <MPSL_IRQ_RADIO_Handler+0x3c>
    95e8:	2000      	movs	r0, #0
    95ea:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    95ee:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    95f2:	43c0      	mvns	r0, r0
    95f4:	ea70 0001 	orns	r0, r0, r1
    95f8:	d005      	beq.n	9606 <MPSL_IRQ_RADIO_Handler+0xe9a>
    95fa:	f002 fac5 	bl	bb88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    95fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9602:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    9606:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    960a:	b128      	cbz	r0, 9618 <MPSL_IRQ_RADIO_Handler+0xeac>
    960c:	2005      	movs	r0, #5
    960e:	f001 ff9b 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9612:	2000      	movs	r0, #0
    9614:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    9618:	2004      	movs	r0, #4
    961a:	f001 ff95 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    961e:	f001 fffb 	bl	b618 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9622:	490a      	ldr	r1, [pc, #40]	; (964c <MPSL_IRQ_RADIO_Handler+0xee0>)
    9624:	2020      	movs	r0, #32
    9626:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    962a:	6889      	ldr	r1, [r1, #8]
    962c:	2000      	movs	r0, #0
    962e:	6008      	str	r0, [r1, #0]
    9630:	4907      	ldr	r1, [pc, #28]	; (9650 <MPSL_IRQ_RADIO_Handler+0xee4>)
    9632:	6008      	str	r0, [r1, #0]
    9634:	2001      	movs	r0, #1
    9636:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    963a:	0000      	.short	0x0000
    963c:	20001248 	.word	0x20001248
    9640:	20000dc8 	.word	0x20000dc8
    9644:	200011c8 	.word	0x200011c8
    9648:	00000000 	.word	0x00000000
    964c:	20000308 	.word	0x20000308
    9650:	40000508 	.word	0x40000508

00009654 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9654:	4906      	ldr	r1, [pc, #24]	; (9670 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9656:	b510      	push	{r4, lr}
    9658:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    965c:	2a20      	cmp	r2, #32
    965e:	bf1c      	itt	ne
    9660:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9664:	bd10      	popne	{r4, pc}
    9666:	f240 3177 	movw	r1, #887	; 0x377
    966a:	2070      	movs	r0, #112	; 0x70
    966c:	f002 fc44 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9670:	20001248 	.word	0x20001248

00009674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9678:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 9840 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    967c:	4606      	mov	r6, r0
    967e:	b08f      	sub	sp, #60	; 0x3c
    9680:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    9684:	468a      	mov	sl, r1
    9686:	2820      	cmp	r0, #32
    9688:	d061      	beq.n	974e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    968a:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    968e:	f10b 0408 	add.w	r4, fp, #8
    9692:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9696:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    969a:	2120      	movs	r1, #32
    969c:	f88d 1018 	strb.w	r1, [sp, #24]
    96a0:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    96a4:	f8db 2008 	ldr.w	r2, [fp, #8]
    96a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    96ac:	4459      	add	r1, fp
    96ae:	2700      	movs	r7, #0
    96b0:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    96b4:	f8db 1010 	ldr.w	r1, [fp, #16]
    96b8:	1851      	adds	r1, r2, r1
    96ba:	910a      	str	r1, [sp, #40]	; 0x28
    96bc:	f8db 0000 	ldr.w	r0, [fp]
    96c0:	aa09      	add	r2, sp, #36	; 0x24
    96c2:	4430      	add	r0, r6
    96c4:	a907      	add	r1, sp, #28
    96c6:	f001 fb83 	bl	add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    96ca:	f8d9 0010 	ldr.w	r0, [r9, #16]
    96ce:	9907      	ldr	r1, [sp, #28]
    96d0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    96d4:	1840      	adds	r0, r0, r1
    96d6:	1810      	adds	r0, r2, r0
    96d8:	2e67      	cmp	r6, #103	; 0x67
    96da:	d33d      	bcc.n	9758 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    96dc:	4959      	ldr	r1, [pc, #356]	; (9844 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    96de:	2200      	movs	r2, #0
    96e0:	1b89      	subs	r1, r1, r6
    96e2:	eb72 0107 	sbcs.w	r1, r2, r7
    96e6:	d337      	bcc.n	9758 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    96e8:	6821      	ldr	r1, [r4, #0]
    96ea:	4694      	mov	ip, r2
    96ec:	1a40      	subs	r0, r0, r1
    96ee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96f2:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    96f6:	eb7c 010c 	sbcs.w	r1, ip, ip
    96fa:	d32d      	bcc.n	9758 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    96fc:	60a0      	str	r0, [r4, #8]
    96fe:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    9702:	f884 a010 	strb.w	sl, [r4, #16]
    9706:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    970a:	f10d 0b18 	add.w	fp, sp, #24
    970e:	2d20      	cmp	r5, #32
    9710:	d055      	beq.n	97be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9712:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9716:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    971a:	9001      	str	r0, [sp, #4]
    971c:	484a      	ldr	r0, [pc, #296]	; (9848 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    971e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9722:	f8d4 a000 	ldr.w	sl, [r4]
    9726:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    972a:	f108 0008 	add.w	r0, r8, #8
    972e:	eb1a 0201 	adds.w	r2, sl, r1
    9732:	eb43 0107 	adc.w	r1, r3, r7
    9736:	e9d0 9300 	ldrd	r9, r3, [r0]
    973a:	ebb9 0202 	subs.w	r2, r9, r2
    973e:	eb73 0101 	sbcs.w	r1, r3, r1
    9742:	d325      	bcc.n	9790 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9744:	89c0      	ldrh	r0, [r0, #14]
    9746:	b398      	cbz	r0, 97b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9748:	89e0      	ldrh	r0, [r4, #14]
    974a:	b148      	cbz	r0, 9760 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    974c:	e037      	b.n	97be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    974e:	f640 3135 	movw	r1, #2869	; 0xb35
    9752:	2070      	movs	r0, #112	; 0x70
    9754:	f002 fbd0 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9758:	b00f      	add	sp, #60	; 0x3c
    975a:	2001      	movs	r0, #1
    975c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9760:	f002 fa0c 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9764:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9768:	bf08      	it	eq
    976a:	200d      	moveq	r0, #13
    976c:	d00b      	beq.n	9786 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    976e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9772:	3856      	subs	r0, #86	; 0x56
    9774:	bf08      	it	eq
    9776:	201c      	moveq	r0, #28
    9778:	d005      	beq.n	9786 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    977a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    977e:	389f      	subs	r0, #159	; 0x9f
    9780:	bf14      	ite	ne
    9782:	4638      	movne	r0, r7
    9784:	2032      	moveq	r0, #50	; 0x32
    9786:	1c41      	adds	r1, r0, #1
    9788:	ebb9 000a 	subs.w	r0, r9, sl
    978c:	4288      	cmp	r0, r1
    978e:	da16      	bge.n	97be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9790:	f88b 5000 	strb.w	r5, [fp]
    9794:	f898 0018 	ldrb.w	r0, [r8, #24]
    9798:	7c21      	ldrb	r1, [r4, #16]
    979a:	4281      	cmp	r1, r0
    979c:	d309      	bcc.n	97b2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    979e:	6821      	ldr	r1, [r4, #0]
    97a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    97a2:	1a40      	subs	r0, r0, r1
    97a4:	60a0      	str	r0, [r4, #8]
    97a6:	b00f      	add	sp, #60	; 0x3c
    97a8:	f04f 0002 	mov.w	r0, #2
    97ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97b0:	e005      	b.n	97be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    97b2:	9801      	ldr	r0, [sp, #4]
    97b4:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    97b8:	7845      	ldrb	r5, [r0, #1]
    97ba:	2d20      	cmp	r5, #32
    97bc:	d1ae      	bne.n	971c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    97be:	2005      	movs	r0, #5
    97c0:	f001 fec2 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97c4:	4d1e      	ldr	r5, [pc, #120]	; (9840 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    97c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    97ca:	6068      	str	r0, [r5, #4]
    97cc:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    97d0:	f89d 2018 	ldrb.w	r2, [sp, #24]
    97d4:	2120      	movs	r1, #32
    97d6:	2a20      	cmp	r2, #32
    97d8:	d003      	beq.n	97e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    97da:	2005      	movs	r0, #5
    97dc:	f7fe ffe4 	bl	87a8 <MPSL_IRQ_RADIO_Handler+0x3c>
    97e0:	e004      	b.n	97ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    97e2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    97e6:	4428      	add	r0, r5
    97e8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    97ec:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    97f0:	4916      	ldr	r1, [pc, #88]	; (984c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    97f2:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    97f6:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    97fa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    97fe:	7048      	strb	r0, [r1, #1]
    9800:	6828      	ldr	r0, [r5, #0]
    9802:	4430      	add	r0, r6
    9804:	6028      	str	r0, [r5, #0]
    9806:	20ff      	movs	r0, #255	; 0xff
    9808:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    980c:	7e68      	ldrb	r0, [r5, #25]
    980e:	2801      	cmp	r0, #1
    9810:	d10a      	bne.n	9828 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    9812:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    9816:	6823      	ldr	r3, [r4, #0]
    9818:	1818      	adds	r0, r3, r0
    981a:	f142 0100 	adc.w	r1, r2, #0
    981e:	1e40      	subs	r0, r0, #1
    9820:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    9824:	f001 fcb2 	bl	b18c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9828:	f89d 0018 	ldrb.w	r0, [sp, #24]
    982c:	2820      	cmp	r0, #32
    982e:	d003      	beq.n	9838 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    9830:	4807      	ldr	r0, [pc, #28]	; (9850 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    9832:	7840      	ldrb	r0, [r0, #1]
    9834:	f002 fc32 	bl	c09c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9838:	b00f      	add	sp, #60	; 0x3c
    983a:	2000      	movs	r0, #0
    983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9840:	20001248 	.word	0x20001248
    9844:	0f424000 	.word	0x0f424000
    9848:	20000dc8 	.word	0x20000dc8
    984c:	200011c8 	.word	0x200011c8
    9850:	20000308 	.word	0x20000308

00009854 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9854:	b570      	push	{r4, r5, r6, lr}
    9856:	4a23      	ldr	r2, [pc, #140]	; (98e4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    9858:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    985c:	2920      	cmp	r1, #32
    985e:	d039      	beq.n	98d4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    9860:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9864:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    9868:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    986c:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    9870:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    9874:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9878:	4411      	add	r1, r2
    987a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    987e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9882:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9886:	2920      	cmp	r1, #32
    9888:	d029      	beq.n	98de <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    988a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    988e:	7e2d      	ldrb	r5, [r5, #24]
    9890:	42a8      	cmp	r0, r5
    9892:	bf3c      	itt	cc
    9894:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    9898:	7849      	ldrbcc	r1, [r1, #1]
    989a:	d3f4      	bcc.n	9886 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    989c:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    98a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    98a4:	f8dc 5008 	ldr.w	r5, [ip, #8]
    98a8:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    98ac:	6814      	ldr	r4, [r2, #0]
    98ae:	1828      	adds	r0, r5, r0
    98b0:	f146 0200 	adc.w	r2, r6, #0
    98b4:	ebb1 0c00 	subs.w	ip, r1, r0
    98b8:	eb73 0202 	sbcs.w	r2, r3, r2
    98bc:	d308      	bcc.n	98d0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    98be:	1a08      	subs	r0, r1, r0
    98c0:	f006 fc9d 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    98c4:	f104 0167 	add.w	r1, r4, #103	; 0x67
    98c8:	4281      	cmp	r1, r0
    98ca:	bf9c      	itt	ls
    98cc:	1b00      	subls	r0, r0, r4
    98ce:	bd70      	popls	{r4, r5, r6, pc}
    98d0:	2000      	movs	r0, #0
    98d2:	bd70      	pop	{r4, r5, r6, pc}
    98d4:	f640 3108 	movw	r1, #2824	; 0xb08
    98d8:	2070      	movs	r0, #112	; 0x70
    98da:	f002 fb0d 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    98e2:	bd70      	pop	{r4, r5, r6, pc}
    98e4:	20001248 	.word	0x20001248

000098e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    98e8:	4806      	ldr	r0, [pc, #24]	; (9904 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    98ea:	b510      	push	{r4, lr}
    98ec:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    98f0:	2920      	cmp	r1, #32
    98f2:	bf1c      	itt	ne
    98f4:	7e00      	ldrbne	r0, [r0, #24]
    98f6:	bd10      	popne	{r4, pc}
    98f8:	f640 312f 	movw	r1, #2863	; 0xb2f
    98fc:	2070      	movs	r0, #112	; 0x70
    98fe:	f002 fafb 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9902:	0000      	.short	0x0000
    9904:	20001248 	.word	0x20001248

00009908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    9908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    990a:	4d6f      	ldr	r5, [pc, #444]	; (9ac8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    990c:	2600      	movs	r6, #0
    990e:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    9912:	2701      	movs	r7, #1
    9914:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    9918:	4b6c      	ldr	r3, [pc, #432]	; (9acc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    991a:	2808      	cmp	r0, #8
    991c:	d273      	bcs.n	9a06 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    991e:	e8df f000 	tbb	[pc, r0]
    9922:	7804      	.short	0x7804
    9924:	47ceb3a0 	.word	0x47ceb3a0
    9928:	bdb8      	.short	0xbdb8
    992a:	43c8      	mvns	r0, r1
    992c:	ea70 0002 	orns	r0, r0, r2
    9930:	d105      	bne.n	993e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    9932:	f002 f945 	bl	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9936:	f001 fd2b 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    993a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    993e:	8ae0      	ldrh	r0, [r4, #22]
    9940:	b110      	cbz	r0, 9948 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    9942:	f002 fa61 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9946:	b180      	cbz	r0, 996a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    9948:	f7ff fcea 	bl	9320 <MPSL_IRQ_RADIO_Handler+0xbb4>
    994c:	20ff      	movs	r0, #255	; 0xff
    994e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    9952:	6861      	ldr	r1, [r4, #4]
    9954:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9958:	d003      	beq.n	9962 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    995a:	2005      	movs	r0, #5
    995c:	f001 fd3a 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9960:	b140      	cbz	r0, 9974 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    9962:	7e60      	ldrb	r0, [r4, #25]
    9964:	2801      	cmp	r0, #1
    9966:	d114      	bne.n	9992 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    9968:	e009      	b.n	997e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    996a:	f640 012c 	movw	r1, #2092	; 0x82c
    996e:	2070      	movs	r0, #112	; 0x70
    9970:	f002 fac2 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9974:	f640 0131 	movw	r1, #2097	; 0x831
    9978:	2070      	movs	r0, #112	; 0x70
    997a:	f002 fabd 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    997e:	68a2      	ldr	r2, [r4, #8]
    9980:	6920      	ldr	r0, [r4, #16]
    9982:	68e1      	ldr	r1, [r4, #12]
    9984:	1810      	adds	r0, r2, r0
    9986:	4171      	adcs	r1, r6
    9988:	1e40      	subs	r0, r0, #1
    998a:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    998e:	f001 fbfd 	bl	b18c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9992:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9996:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    999a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    999e:	6840      	ldr	r0, [r0, #4]
    99a0:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    99a4:	680a      	ldr	r2, [r1, #0]
    99a6:	b001      	add	sp, #4
    99a8:	2101      	movs	r1, #1
    99aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    99ae:	4710      	bx	r2
    99b0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    99b4:	b160      	cbz	r0, 99d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    99b6:	43c8      	mvns	r0, r1
    99b8:	ea70 0002 	orns	r0, r0, r2
    99bc:	d105      	bne.n	99ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    99be:	f002 f8ff 	bl	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    99c2:	f001 fce5 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    99c6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    99ca:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    99ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99d0:	f7ff fca6 	bl	9320 <MPSL_IRQ_RADIO_Handler+0xbb4>
    99d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99d8:	6060      	str	r0, [r4, #4]
    99da:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    99de:	f88d 0000 	strb.w	r0, [sp]
    99e2:	f89d 0000 	ldrb.w	r0, [sp]
    99e6:	b178      	cbz	r0, 9a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    99e8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    99ec:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    99f0:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    99f4:	6840      	ldr	r0, [r0, #4]
    99f6:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    99fa:	680a      	ldr	r2, [r1, #0]
    99fc:	b001      	add	sp, #4
    99fe:	2106      	movs	r1, #6
    9a00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9a04:	4710      	bx	r2
    9a06:	e05a      	b.n	9abe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    9a08:	f640 0148 	movw	r1, #2120	; 0x848
    9a0c:	2070      	movs	r0, #112	; 0x70
    9a0e:	f002 fa73 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a12:	f7ff fc85 	bl	9320 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9a16:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    9a1a:	f002 f9f5 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9a1e:	b130      	cbz	r0, 9a2e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    9a20:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    9a24:	43c9      	mvns	r1, r1
    9a26:	ea71 0000 	orns	r0, r1, r0
    9a2a:	d005      	beq.n	9a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    9a2c:	e00a      	b.n	9a44 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    9a2e:	f640 0156 	movw	r1, #2134	; 0x856
    9a32:	2070      	movs	r0, #112	; 0x70
    9a34:	f002 fa60 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a38:	f002 f8c2 	bl	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9a3c:	f001 fca8 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9a40:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9a44:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9a48:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9a4c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9a50:	6840      	ldr	r0, [r0, #4]
    9a52:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9a56:	680a      	ldr	r2, [r1, #0]
    9a58:	b001      	add	sp, #4
    9a5a:	2100      	movs	r1, #0
    9a5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9a60:	4710      	bx	r2
    9a62:	f001 fe95 	bl	b790 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    9a66:	8ae0      	ldrh	r0, [r4, #22]
    9a68:	b110      	cbz	r0, 9a70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    9a6a:	f002 f9cd 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9a6e:	b130      	cbz	r0, 9a7e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    9a70:	f001 fea2 	bl	b7b8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9a74:	2800      	cmp	r0, #0
    9a76:	bf18      	it	ne
    9a78:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    9a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a7e:	f44f 6106 	mov.w	r1, #2144	; 0x860
    9a82:	2070      	movs	r0, #112	; 0x70
    9a84:	f002 fa38 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a88:	4811      	ldr	r0, [pc, #68]	; (9ad0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    9a8a:	6007      	str	r7, [r0, #0]
    9a8c:	6898      	ldr	r0, [r3, #8]
    9a8e:	6007      	str	r7, [r0, #0]
    9a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a92:	7818      	ldrb	r0, [r3, #0]
    9a94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9a98:	f002 bb00 	b.w	c09c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a9c:	f7ff fc40 	bl	9320 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9aa0:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9aa4:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9aa8:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9aac:	6840      	ldr	r0, [r0, #4]
    9aae:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9ab2:	680a      	ldr	r2, [r1, #0]
    9ab4:	b001      	add	sp, #4
    9ab6:	2105      	movs	r1, #5
    9ab8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9abc:	4710      	bx	r2
    9abe:	f640 0173 	movw	r1, #2163	; 0x873
    9ac2:	2070      	movs	r0, #112	; 0x70
    9ac4:	f002 fa18 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ac8:	20000dc8 	.word	0x20000dc8
    9acc:	20000308 	.word	0x20000308
    9ad0:	40000508 	.word	0x40000508

00009ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    9ad4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ad8:	48f7      	ldr	r0, [pc, #988]	; (9eb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    9ada:	b097      	sub	sp, #92	; 0x5c
    9adc:	460c      	mov	r4, r1
    9ade:	6800      	ldr	r0, [r0, #0]
    9ae0:	4ff6      	ldr	r7, [pc, #984]	; (9ebc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    9ae2:	05c0      	lsls	r0, r0, #23
    9ae4:	0dc0      	lsrs	r0, r0, #23
    9ae6:	d00e      	beq.n	9b06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    9ae8:	3810      	subs	r0, #16
    9aea:	b240      	sxtb	r0, r0
    9aec:	2800      	cmp	r0, #0
    9aee:	bfb8      	it	lt
    9af0:	f000 000f 	andlt.w	r0, r0, #15
    9af4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9af8:	bfac      	ite	ge
    9afa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    9afe:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    9b02:	0940      	lsrs	r0, r0, #5
    9b04:	d00c      	beq.n	9b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    9b06:	7820      	ldrb	r0, [r4, #0]
    9b08:	f04f 0a00 	mov.w	sl, #0
    9b0c:	2800      	cmp	r0, #0
    9b0e:	bf18      	it	ne
    9b10:	2801      	cmpne	r0, #1
    9b12:	d017      	beq.n	9b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    9b14:	f240 61f9 	movw	r1, #1785	; 0x6f9
    9b18:	f04f 0070 	mov.w	r0, #112	; 0x70
    9b1c:	f002 f9ec 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b20:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    9b24:	f04f 0a01 	mov.w	sl, #1
    9b28:	2820      	cmp	r0, #32
    9b2a:	d006      	beq.n	9b3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    9b2c:	7820      	ldrb	r0, [r4, #0]
    9b2e:	b148      	cbz	r0, 9b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    9b30:	f240 61f5 	movw	r1, #1781	; 0x6f5
    9b34:	2070      	movs	r0, #112	; 0x70
    9b36:	f002 f9df 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b3a:	f240 61f2 	movw	r1, #1778	; 0x6f2
    9b3e:	2070      	movs	r0, #112	; 0x70
    9b40:	f002 f9da 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b44:	f8df b378 	ldr.w	fp, [pc, #888]	; 9ec0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    9b48:	f1bb 0f00 	cmp.w	fp, #0
    9b4c:	d004      	beq.n	9b58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    9b4e:	2100      	movs	r1, #0
    9b50:	f240 60fc 	movw	r0, #1788	; 0x6fc
    9b54:	f3af 8000 	nop.w
    9b58:	2000      	movs	r0, #0
    9b5a:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    9b5e:	a905      	add	r1, sp, #20
    9b60:	9112      	str	r1, [sp, #72]	; 0x48
    9b62:	49d8      	ldr	r1, [pc, #864]	; (9ec4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    9b64:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9b66:	f04f 0801 	mov.w	r8, #1
    9b6a:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    9b6e:	9001      	str	r0, [sp, #4]
    9b70:	f1bb 0f00 	cmp.w	fp, #0
    9b74:	d004      	beq.n	9b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    9b76:	2100      	movs	r1, #0
    9b78:	f240 7007 	movw	r0, #1799	; 0x707
    9b7c:	f3af 8000 	nop.w
    9b80:	f1b8 0f00 	cmp.w	r8, #0
    9b84:	d009      	beq.n	9b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    9b86:	bf00      	nop
    9b88:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    9b8c:	2500      	movs	r5, #0
    9b8e:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    9b92:	f1ba 0f00 	cmp.w	sl, #0
    9b96:	d007      	beq.n	9ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    9b98:	e03e      	b.n	9c18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    9b9a:	48cb      	ldr	r0, [pc, #812]	; (9ec8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    9b9c:	2800      	cmp	r0, #0
    9b9e:	bf18      	it	ne
    9ba0:	f3af 8000 	nopne.w
    9ba4:	b662      	cpsie	i
    9ba6:	e7ef      	b.n	9b88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    9ba8:	46b1      	mov	r9, r6
    9baa:	2001      	movs	r0, #1
    9bac:	ea20 0609 	bic.w	r6, r0, r9
    9bb0:	48c6      	ldr	r0, [pc, #792]	; (9ecc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    9bb2:	2240      	movs	r2, #64	; 0x40
    9bb4:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    9bb8:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    9bbc:	f006 fcaf 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9bc0:	f1bb 0f00 	cmp.w	fp, #0
    9bc4:	d004      	beq.n	9bd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    9bc6:	2100      	movs	r1, #0
    9bc8:	f240 503c 	movw	r0, #1340	; 0x53c
    9bcc:	f3af 8000 	nop.w
    9bd0:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    9bd4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    9bd8:	4439      	add	r1, r7
    9bda:	4438      	add	r0, r7
    9bdc:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    9bde:	8502      	strh	r2, [r0, #40]	; 0x28
    9be0:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    9be4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    9be8:	f1bb 0f00 	cmp.w	fp, #0
    9bec:	d004      	beq.n	9bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    9bee:	2100      	movs	r1, #0
    9bf0:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    9bf4:	f3af 8000 	nop.w
    9bf8:	f1bb 0f00 	cmp.w	fp, #0
    9bfc:	d004      	beq.n	9c08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    9bfe:	2100      	movs	r1, #0
    9c00:	f240 7011 	movw	r0, #1809	; 0x711
    9c04:	f3af 8000 	nop.w
    9c08:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    9c0c:	f88d 0020 	strb.w	r0, [sp, #32]
    9c10:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9c14:	2800      	cmp	r0, #0
    9c16:	d1ab      	bne.n	9b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9c18:	f1bb 0f00 	cmp.w	fp, #0
    9c1c:	d004      	beq.n	9c28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    9c1e:	2100      	movs	r1, #0
    9c20:	f240 701b 	movw	r0, #1819	; 0x71b
    9c24:	f3af 8000 	nop.w
    9c28:	f001 fbb2 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9c2c:	4681      	mov	r9, r0
    9c2e:	a802      	add	r0, sp, #8
    9c30:	900a      	str	r0, [sp, #40]	; 0x28
    9c32:	4688      	mov	r8, r1
    9c34:	8921      	ldrh	r1, [r4, #8]
    9c36:	4628      	mov	r0, r5
    9c38:	f361 401f 	bfi	r0, r1, #16, #16
    9c3c:	4601      	mov	r1, r0
    9c3e:	7aa2      	ldrb	r2, [r4, #10]
    9c40:	4628      	mov	r0, r5
    9c42:	f362 0007 	bfi	r0, r2, #0, #8
    9c46:	7ae2      	ldrb	r2, [r4, #11]
    9c48:	f362 200f 	bfi	r0, r2, #8, #8
    9c4c:	7822      	ldrb	r2, [r4, #0]
    9c4e:	9502      	str	r5, [sp, #8]
    9c50:	f362 4017 	bfi	r0, r2, #16, #8
    9c54:	e9cd 5104 	strd	r5, r1, [sp, #16]
    9c58:	e9cd 0506 	strd	r0, r5, [sp, #24]
    9c5c:	9503      	str	r5, [sp, #12]
    9c5e:	7820      	ldrb	r0, [r4, #0]
    9c60:	b380      	cbz	r0, 9cc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    9c62:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    9c66:	499a      	ldr	r1, [pc, #616]	; (9ed0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    9c68:	1a08      	subs	r0, r1, r0
    9c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
    9c6c:	f101 020c 	add.w	r2, r1, #12
    9c70:	a914      	add	r1, sp, #80	; 0x50
    9c72:	f001 f8ad 	bl	add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9c76:	2200      	movs	r2, #0
    9c78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9c7c:	4648      	mov	r0, r9
    9c7e:	4641      	mov	r1, r8
    9c80:	f7fe ff66 	bl	8b50 <MPSL_IRQ_RADIO_Handler+0x3e4>
    9c84:	468c      	mov	ip, r1
    9c86:	7ae1      	ldrb	r1, [r4, #11]
    9c88:	2900      	cmp	r1, #0
    9c8a:	bf0c      	ite	eq
    9c8c:	217a      	moveq	r1, #122	; 0x7a
    9c8e:	214a      	movne	r1, #74	; 0x4a
    9c90:	6862      	ldr	r2, [r4, #4]
    9c92:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9c96:	4411      	add	r1, r2
    9c98:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9c9c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    9ca0:	441a      	add	r2, r3
    9ca2:	4411      	add	r1, r2
    9ca4:	1c88      	adds	r0, r1, #2
    9ca6:	f001 f877 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9caa:	9600      	str	r6, [sp, #0]
    9cac:	9004      	str	r0, [sp, #16]
    9cae:	464a      	mov	r2, r9
    9cb0:	4643      	mov	r3, r8
    9cb2:	6920      	ldr	r0, [r4, #16]
    9cb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    9cb6:	f7fe fdb3 	bl	8820 <MPSL_IRQ_RADIO_Handler+0xb4>
    9cba:	2800      	cmp	r0, #0
    9cbc:	bf08      	it	eq
    9cbe:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    9cc2:	e046      	b.n	9d52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    9cc4:	e7ff      	b.n	9cc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    9cc6:	4648      	mov	r0, r9
    9cc8:	4641      	mov	r1, r8
    9cca:	f001 f803 	bl	acd4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    9cce:	f8df c204 	ldr.w	ip, [pc, #516]	; 9ed4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    9cd2:	4602      	mov	r2, r0
    9cd4:	eb10 0c0c 	adds.w	ip, r0, ip
    9cd8:	460b      	mov	r3, r1
    9cda:	f141 0e00 	adc.w	lr, r1, #0
    9cde:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    9ce2:	ebb0 0c0c 	subs.w	ip, r0, ip
    9ce6:	eb71 0c0e 	sbcs.w	ip, r1, lr
    9cea:	d229      	bcs.n	9d40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    9cec:	3229      	adds	r2, #41	; 0x29
    9cee:	f143 0300 	adc.w	r3, r3, #0
    9cf2:	1a82      	subs	r2, r0, r2
    9cf4:	eb71 0203 	sbcs.w	r2, r1, r3
    9cf8:	d322      	bcc.n	9d40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    9cfa:	8922      	ldrh	r2, [r4, #8]
    9cfc:	ab0a      	add	r3, sp, #40	; 0x28
    9cfe:	1a80      	subs	r0, r0, r2
    9d00:	eb61 0105 	sbc.w	r1, r1, r5
    9d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d06:	1e40      	subs	r0, r0, #1
    9d08:	9200      	str	r2, [sp, #0]
    9d0a:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    9d0e:	aa0d      	add	r2, sp, #52	; 0x34
    9d10:	f001 f804 	bl	ad1c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    9d14:	7ae0      	ldrb	r0, [r4, #11]
    9d16:	2800      	cmp	r0, #0
    9d18:	bf0c      	ite	eq
    9d1a:	207a      	moveq	r0, #122	; 0x7a
    9d1c:	204a      	movne	r0, #74	; 0x4a
    9d1e:	990d      	ldr	r1, [sp, #52]	; 0x34
    9d20:	8922      	ldrh	r2, [r4, #8]
    9d22:	4408      	add	r0, r1
    9d24:	6861      	ldr	r1, [r4, #4]
    9d26:	4411      	add	r1, r2
    9d28:	4408      	add	r0, r1
    9d2a:	1c80      	adds	r0, r0, #2
    9d2c:	f001 f834 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9d30:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    9d34:	e9cd 1202 	strd	r1, r2, [sp, #8]
    9d38:	1a40      	subs	r0, r0, r1
    9d3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9d3e:	e007      	b.n	9d50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    9d40:	f1b9 0101 	subs.w	r1, r9, #1
    9d44:	f148 30ff 	adc.w	r0, r8, #4294967295	; 0xffffffff
    9d48:	e9cd 1002 	strd	r1, r0, [sp, #8]
    9d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9d50:	9004      	str	r0, [sp, #16]
    9d52:	f1bb 0f00 	cmp.w	fp, #0
    9d56:	d004      	beq.n	9d62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    9d58:	2100      	movs	r1, #0
    9d5a:	f240 7022 	movw	r0, #1826	; 0x722
    9d5e:	f3af 8000 	nop.w
    9d62:	495a      	ldr	r1, [pc, #360]	; (9ecc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    9d64:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    9d68:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    9d6c:	9108      	str	r1, [sp, #32]
    9d6e:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    9d72:	a802      	add	r0, sp, #8
    9d74:	2901      	cmp	r1, #1
    9d76:	bf18      	it	ne
    9d78:	2902      	cmpne	r1, #2
    9d7a:	d141      	bne.n	9e00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    9d7c:	9511      	str	r5, [sp, #68]	; 0x44
    9d7e:	9a02      	ldr	r2, [sp, #8]
    9d80:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    9d84:	1a53      	subs	r3, r2, r1
    9d86:	f8dd c010 	ldr.w	ip, [sp, #16]
    9d8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9d8e:	eb12 020c 	adds.w	r2, r2, ip
    9d92:	1a51      	subs	r1, r2, r1
    9d94:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9d98:	2b02      	cmp	r3, #2
    9d9a:	d374      	bcc.n	9e86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9d9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    9da0:	bf98      	it	ls
    9da2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9da6:	d86e      	bhi.n	9e86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9da8:	2501      	movs	r5, #1
    9daa:	ab14      	add	r3, sp, #80	; 0x50
    9dac:	aa0e      	add	r2, sp, #56	; 0x38
    9dae:	4631      	mov	r1, r6
    9db0:	f7fe ff1e 	bl	8bf0 <MPSL_IRQ_RADIO_Handler+0x484>
    9db4:	2800      	cmp	r0, #0
    9db6:	d06d      	beq.n	9e94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    9db8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    9dbc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    9dc0:	4633      	mov	r3, r6
    9dc2:	428a      	cmp	r2, r1
    9dc4:	d06a      	beq.n	9e9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    9dc6:	2005      	movs	r0, #5
    9dc8:	f7fe fcee 	bl	87a8 <MPSL_IRQ_RADIO_Handler+0x3c>
    9dcc:	9908      	ldr	r1, [sp, #32]
    9dce:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    9dd2:	7048      	strb	r0, [r1, #1]
    9dd4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    9dd8:	2820      	cmp	r0, #32
    9dda:	bf01      	itttt	eq
    9ddc:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    9de0:	4438      	addeq	r0, r7
    9de2:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    9de6:	9511      	streq	r5, [sp, #68]	; 0x44
    9de8:	bf1e      	ittt	ne
    9dea:	9908      	ldrne	r1, [sp, #32]
    9dec:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    9df0:	f880 8001 	strbne.w	r8, [r0, #1]
    9df4:	4632      	mov	r2, r6
    9df6:	4641      	mov	r1, r8
    9df8:	f05f 0003 	movs.w	r0, #3
    9dfc:	f7ff fb3c 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9e00:	f1bb 0f00 	cmp.w	fp, #0
    9e04:	d004      	beq.n	9e10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    9e06:	2100      	movs	r1, #0
    9e08:	f240 7027 	movw	r0, #1831	; 0x727
    9e0c:	f3af 8000 	nop.w
    9e10:	4831      	ldr	r0, [pc, #196]	; (9ed8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    9e12:	2800      	cmp	r0, #0
    9e14:	bf18      	it	ne
    9e16:	f3af 8000 	nopne.w
    9e1a:	f3ef 8810 	mrs	r8, PRIMASK
    9e1e:	b672      	cpsid	i
    9e20:	f1bb 0f00 	cmp.w	fp, #0
    9e24:	d004      	beq.n	9e30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    9e26:	2100      	movs	r1, #0
    9e28:	f240 702d 	movw	r0, #1837	; 0x72d
    9e2c:	f3af 8000 	nop.w
    9e30:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    9e34:	f88d 0020 	strb.w	r0, [sp, #32]
    9e38:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9e3c:	2800      	cmp	r0, #0
    9e3e:	f47f ae97 	bne.w	9b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9e42:	f1bb 0f00 	cmp.w	fp, #0
    9e46:	d004      	beq.n	9e52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    9e48:	2100      	movs	r1, #0
    9e4a:	f240 7035 	movw	r0, #1845	; 0x735
    9e4e:	f3af 8000 	nop.w
    9e52:	f10d 0e04 	add.w	lr, sp, #4
    9e56:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    9e5a:	f100 0e08 	add.w	lr, r0, #8
    9e5e:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    9e62:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    9e66:	e9c0 1206 	strd	r1, r2, [r0, #24]
    9e6a:	b325      	cbz	r5, 9eb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    9e6c:	f1bb 0f00 	cmp.w	fp, #0
    9e70:	d004      	beq.n	9e7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    9e72:	2100      	movs	r1, #0
    9e74:	f240 7042 	movw	r0, #1858	; 0x742
    9e78:	f3af 8000 	nop.w
    9e7c:	f1ba 0f00 	cmp.w	sl, #0
    9e80:	d146      	bne.n	9f10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9e82:	e02b      	b.n	9edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    9e84:	e7ff      	b.n	9e86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9e86:	4632      	mov	r2, r6
    9e88:	4641      	mov	r1, r8
    9e8a:	2004      	movs	r0, #4
    9e8c:	f7ff faf4 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9e90:	2501      	movs	r5, #1
    9e92:	e7b5      	b.n	9e00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    9e94:	4632      	mov	r2, r6
    9e96:	4641      	mov	r1, r8
    9e98:	2004      	movs	r0, #4
    9e9a:	e7af      	b.n	9dfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    9e9c:	2920      	cmp	r1, #32
    9e9e:	bf1d      	ittte	ne
    9ea0:	9808      	ldrne	r0, [sp, #32]
    9ea2:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    9ea6:	7840      	ldrbne	r0, [r0, #1]
    9ea8:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    9eac:	bf04      	itt	eq
    9eae:	4438      	addeq	r0, r7
    9eb0:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    9eb4:	e78a      	b.n	9dcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    9eb6:	e03b      	b.n	9f30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    9eb8:	e000ed04 	.word	0xe000ed04
    9ebc:	20001248 	.word	0x20001248
    9ec0:	00000000 	.word	0x00000000
    9ec4:	20000dc8 	.word	0x20000dc8
    9ec8:	00000000 	.word	0x00000000
    9ecc:	200011c8 	.word	0x200011c8
    9ed0:	1e847fff 	.word	0x1e847fff
    9ed4:	0f424000 	.word	0x0f424000
    9ed8:	00000000 	.word	0x00000000
    9edc:	9811      	ldr	r0, [sp, #68]	; 0x44
    9ede:	f010 0fff 	tst.w	r0, #255	; 0xff
    9ee2:	d015      	beq.n	9f10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9ee4:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    9ee8:	2820      	cmp	r0, #32
    9eea:	d111      	bne.n	9f10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9eec:	f1bb 0f00 	cmp.w	fp, #0
    9ef0:	d004      	beq.n	9efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    9ef2:	2100      	movs	r1, #0
    9ef4:	f240 7047 	movw	r0, #1863	; 0x747
    9ef8:	f3af 8000 	nop.w
    9efc:	4631      	mov	r1, r6
    9efe:	2002      	movs	r0, #2
    9f00:	f7ff faec 	bl	94dc <MPSL_IRQ_RADIO_Handler+0xd70>
    9f04:	9010      	str	r0, [sp, #64]	; 0x40
    9f06:	b918      	cbnz	r0, 9f10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9f08:	7820      	ldrb	r0, [r4, #0]
    9f0a:	b300      	cbz	r0, 9f4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    9f0c:	2801      	cmp	r0, #1
    9f0e:	d02e      	beq.n	9f6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    9f10:	f1bb 0f00 	cmp.w	fp, #0
    9f14:	d004      	beq.n	9f20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    9f16:	2100      	movs	r1, #0
    9f18:	f240 7064 	movw	r0, #1892	; 0x764
    9f1c:	f3af 8000 	nop.w
    9f20:	20ff      	movs	r0, #255	; 0xff
    9f22:	f1ba 0f00 	cmp.w	sl, #0
    9f26:	bf18      	it	ne
    9f28:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    9f2c:	d029      	beq.n	9f82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    9f2e:	2501      	movs	r5, #1
    9f30:	f1bb 0f00 	cmp.w	fp, #0
    9f34:	d004      	beq.n	9f40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    9f36:	2100      	movs	r1, #0
    9f38:	f240 7075 	movw	r0, #1909	; 0x775
    9f3c:	f3af 8000 	nop.w
    9f40:	9810      	ldr	r0, [sp, #64]	; 0x40
    9f42:	4c34      	ldr	r4, [pc, #208]	; (a014 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    9f44:	2802      	cmp	r0, #2
    9f46:	d025      	beq.n	9f94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    9f48:	2801      	cmp	r0, #1
    9f4a:	d02b      	beq.n	9fa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    9f4c:	e02f      	b.n	9fae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    9f4e:	f1bb 0f00 	cmp.w	fp, #0
    9f52:	d004      	beq.n	9f5e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    9f54:	2100      	movs	r1, #0
    9f56:	f240 704f 	movw	r0, #1871	; 0x74f
    9f5a:	f3af 8000 	nop.w
    9f5e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    9f62:	2004      	movs	r0, #4
    9f64:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9f66:	f7ff fa87 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9f6a:	2501      	movs	r5, #1
    9f6c:	e7e0      	b.n	9f30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    9f6e:	f1bb 0f00 	cmp.w	fp, #0
    9f72:	f43f adfd 	beq.w	9b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9f76:	2100      	movs	r1, #0
    9f78:	f240 705a 	movw	r0, #1882	; 0x75a
    9f7c:	f3af 8000 	nop.w
    9f80:	e5f6      	b.n	9b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9f82:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    9f86:	2101      	movs	r1, #1
    9f88:	4391      	bics	r1, r2
    9f8a:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    9f8e:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    9f92:	e7cc      	b.n	9f2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    9f94:	68b8      	ldr	r0, [r7, #8]
    9f96:	ebb0 0009 	subs.w	r0, r0, r9
    9f9a:	f006 f930 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9f9e:	6861      	ldr	r1, [r4, #4]
    9fa0:	b921      	cbnz	r1, 9fac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    9fa2:	e004      	b.n	9fae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    9fa4:	6861      	ldr	r1, [r4, #4]
    9fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9faa:	b101      	cbz	r1, 9fae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    9fac:	4788      	blx	r1
    9fae:	f1b8 0f00 	cmp.w	r8, #0
    9fb2:	d028      	beq.n	a006 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    9fb4:	f1bb 0f00 	cmp.w	fp, #0
    9fb8:	d004      	beq.n	9fc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    9fba:	2100      	movs	r1, #0
    9fbc:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    9fc0:	f3af 8000 	nop.w
    9fc4:	b19d      	cbz	r5, 9fee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    9fc6:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    9fca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9fce:	4438      	add	r0, r7
    9fd0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    9fd4:	2820      	cmp	r0, #32
    9fd6:	d00a      	beq.n	9fee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    9fd8:	f1bb 0f00 	cmp.w	fp, #0
    9fdc:	d004      	beq.n	9fe8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    9fde:	2100      	movs	r1, #0
    9fe0:	f240 708f 	movw	r0, #1935	; 0x78f
    9fe4:	f3af 8000 	nop.w
    9fe8:	7860      	ldrb	r0, [r4, #1]
    9fea:	f002 f857 	bl	c09c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9fee:	f1bb 0f00 	cmp.w	fp, #0
    9ff2:	d004      	beq.n	9ffe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    9ff4:	2100      	movs	r1, #0
    9ff6:	f240 7094 	movw	r0, #1940	; 0x794
    9ffa:	f3af 8000 	nop.w
    9ffe:	b019      	add	sp, #100	; 0x64
    a000:	4628      	mov	r0, r5
    a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a006:	4804      	ldr	r0, [pc, #16]	; (a018 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    a008:	2800      	cmp	r0, #0
    a00a:	bf18      	it	ne
    a00c:	f3af 8000 	nopne.w
    a010:	b662      	cpsie	i
    a012:	e7cf      	b.n	9fb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    a014:	20000308 	.word	0x20000308
    a018:	00000000 	.word	0x00000000

0000a01c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a020:	4604      	mov	r4, r0
    a022:	7800      	ldrb	r0, [r0, #0]
    a024:	b095      	sub	sp, #84	; 0x54
    a026:	b118      	cbz	r0, a030 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a028:	b015      	add	sp, #84	; 0x54
    a02a:	2000      	movs	r0, #0
    a02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a030:	48d1      	ldr	r0, [pc, #836]	; (a378 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    a032:	6800      	ldr	r0, [r0, #0]
    a034:	05c0      	lsls	r0, r0, #23
    a036:	0dc0      	lsrs	r0, r0, #23
    a038:	d00e      	beq.n	a058 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a03a:	3810      	subs	r0, #16
    a03c:	b240      	sxtb	r0, r0
    a03e:	2800      	cmp	r0, #0
    a040:	bfb8      	it	lt
    a042:	f000 000f 	andlt.w	r0, r0, #15
    a046:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a04a:	bfac      	ite	ge
    a04c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a050:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a054:	0940      	lsrs	r0, r0, #5
    a056:	d0e7      	beq.n	a028 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a058:	a80d      	add	r0, sp, #52	; 0x34
    a05a:	f8df 9320 	ldr.w	r9, [pc, #800]	; a37c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a05e:	9009      	str	r0, [sp, #36]	; 0x24
    a060:	f1b9 0f00 	cmp.w	r9, #0
    a064:	d004      	beq.n	a070 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a066:	2100      	movs	r1, #0
    a068:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a06c:	f3af 8000 	nop.w
    a070:	f8df 830c 	ldr.w	r8, [pc, #780]	; a380 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    a074:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a078:	2500      	movs	r5, #0
    a07a:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a07e:	9503      	str	r5, [sp, #12]
    a080:	f1b9 0f00 	cmp.w	r9, #0
    a084:	d004      	beq.n	a090 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a086:	2100      	movs	r1, #0
    a088:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a08c:	f3af 8000 	nop.w
    a090:	2001      	movs	r0, #1
    a092:	ea20 0a06 	bic.w	sl, r0, r6
    a096:	48bb      	ldr	r0, [pc, #748]	; (a384 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a098:	2240      	movs	r2, #64	; 0x40
    a09a:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a09e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    a0a2:	f006 fa3c 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a0a6:	f1b9 0f00 	cmp.w	r9, #0
    a0aa:	d004      	beq.n	a0b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a0ac:	2100      	movs	r1, #0
    a0ae:	f240 503c 	movw	r0, #1340	; 0x53c
    a0b2:	f3af 8000 	nop.w
    a0b6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a0ba:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    a0be:	eb01 0208 	add.w	r2, r1, r8
    a0c2:	4440      	add	r0, r8
    a0c4:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    a0c6:	8501      	strh	r1, [r0, #40]	; 0x28
    a0c8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    a0cc:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a0d0:	f1b9 0f00 	cmp.w	r9, #0
    a0d4:	d004      	beq.n	a0e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a0d6:	2100      	movs	r1, #0
    a0d8:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a0dc:	f3af 8000 	nop.w
    a0e0:	f1b9 0f00 	cmp.w	r9, #0
    a0e4:	d004      	beq.n	a0f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a0e6:	2100      	movs	r1, #0
    a0e8:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a0ec:	f3af 8000 	nop.w
    a0f0:	f001 f94e 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a0f4:	460f      	mov	r7, r1
    a0f6:	4606      	mov	r6, r0
    a0f8:	8921      	ldrh	r1, [r4, #8]
    a0fa:	4628      	mov	r0, r5
    a0fc:	f361 401f 	bfi	r0, r1, #16, #16
    a100:	4601      	mov	r1, r0
    a102:	7aa2      	ldrb	r2, [r4, #10]
    a104:	4628      	mov	r0, r5
    a106:	f362 0007 	bfi	r0, r2, #0, #8
    a10a:	7ae2      	ldrb	r2, [r4, #11]
    a10c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    a110:	f362 200f 	bfi	r0, r2, #8, #8
    a114:	7822      	ldrb	r2, [r4, #0]
    a116:	950a      	str	r5, [sp, #40]	; 0x28
    a118:	f362 4017 	bfi	r0, r2, #16, #8
    a11c:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    a120:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    a124:	950b      	str	r5, [sp, #44]	; 0x2c
    a126:	7820      	ldrb	r0, [r4, #0]
    a128:	b388      	cbz	r0, a18e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a12a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a12e:	4896      	ldr	r0, [pc, #600]	; (a388 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a130:	f10b 020c 	add.w	r2, fp, #12
    a134:	1a40      	subs	r0, r0, r1
    a136:	a911      	add	r1, sp, #68	; 0x44
    a138:	f000 fe4a 	bl	add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a13c:	2200      	movs	r2, #0
    a13e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    a142:	4630      	mov	r0, r6
    a144:	4639      	mov	r1, r7
    a146:	f7fe fd03 	bl	8b50 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a14a:	4684      	mov	ip, r0
    a14c:	7ae0      	ldrb	r0, [r4, #11]
    a14e:	460b      	mov	r3, r1
    a150:	2800      	cmp	r0, #0
    a152:	bf0c      	ite	eq
    a154:	207a      	moveq	r0, #122	; 0x7a
    a156:	204a      	movne	r0, #74	; 0x4a
    a158:	6861      	ldr	r1, [r4, #4]
    a15a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a15e:	4408      	add	r0, r1
    a160:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a164:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    a168:	4411      	add	r1, r2
    a16a:	4408      	add	r0, r1
    a16c:	1c80      	adds	r0, r0, #2
    a16e:	f000 fe13 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a172:	f8cd a000 	str.w	sl, [sp]
    a176:	900c      	str	r0, [sp, #48]	; 0x30
    a178:	4632      	mov	r2, r6
    a17a:	463b      	mov	r3, r7
    a17c:	4659      	mov	r1, fp
    a17e:	6920      	ldr	r0, [r4, #16]
    a180:	f7fe fb4e 	bl	8820 <MPSL_IRQ_RADIO_Handler+0xb4>
    a184:	2800      	cmp	r0, #0
    a186:	bf08      	it	eq
    a188:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    a18c:	e045      	b.n	a21a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    a18e:	e7ff      	b.n	a190 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    a190:	4630      	mov	r0, r6
    a192:	4639      	mov	r1, r7
    a194:	f000 fd9e 	bl	acd4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a198:	4b7c      	ldr	r3, [pc, #496]	; (a38c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a19a:	4602      	mov	r2, r0
    a19c:	eb10 0c03 	adds.w	ip, r0, r3
    a1a0:	468b      	mov	fp, r1
    a1a2:	f141 0300 	adc.w	r3, r1, #0
    a1a6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a1aa:	ebb0 0c0c 	subs.w	ip, r0, ip
    a1ae:	eb71 0303 	sbcs.w	r3, r1, r3
    a1b2:	d22a      	bcs.n	a20a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a1b4:	3229      	adds	r2, #41	; 0x29
    a1b6:	f14b 0300 	adc.w	r3, fp, #0
    a1ba:	1a82      	subs	r2, r0, r2
    a1bc:	eb71 0203 	sbcs.w	r2, r1, r3
    a1c0:	d323      	bcc.n	a20a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a1c2:	8922      	ldrh	r2, [r4, #8]
    a1c4:	ab12      	add	r3, sp, #72	; 0x48
    a1c6:	1a80      	subs	r0, r0, r2
    a1c8:	eb61 0105 	sbc.w	r1, r1, r5
    a1cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a1ce:	1e40      	subs	r0, r0, #1
    a1d0:	9200      	str	r2, [sp, #0]
    a1d2:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    a1d6:	aa07      	add	r2, sp, #28
    a1d8:	f000 fda0 	bl	ad1c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a1dc:	7ae0      	ldrb	r0, [r4, #11]
    a1de:	2800      	cmp	r0, #0
    a1e0:	bf0c      	ite	eq
    a1e2:	207a      	moveq	r0, #122	; 0x7a
    a1e4:	204a      	movne	r0, #74	; 0x4a
    a1e6:	9907      	ldr	r1, [sp, #28]
    a1e8:	8922      	ldrh	r2, [r4, #8]
    a1ea:	4408      	add	r0, r1
    a1ec:	6861      	ldr	r1, [r4, #4]
    a1ee:	4411      	add	r1, r2
    a1f0:	4408      	add	r0, r1
    a1f2:	1c80      	adds	r0, r0, #2
    a1f4:	f000 fdd0 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a1f8:	4601      	mov	r1, r0
    a1fa:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    a1fe:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    a202:	1a08      	subs	r0, r1, r0
    a204:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a208:	e006      	b.n	a218 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a20a:	1e70      	subs	r0, r6, #1
    a20c:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
    a210:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a218:	900c      	str	r0, [sp, #48]	; 0x30
    a21a:	f1b9 0f00 	cmp.w	r9, #0
    a21e:	d004      	beq.n	a22a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    a220:	2100      	movs	r1, #0
    a222:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a226:	f3af 8000 	nop.w
    a22a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a22e:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a232:	1808      	adds	r0, r1, r0
    a234:	eb42 0105 	adc.w	r1, r2, r5
    a238:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a23c:	2a20      	cmp	r2, #32
    a23e:	d009      	beq.n	a254 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a240:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a244:	1a12      	subs	r2, r2, r0
    a246:	eb73 0201 	sbcs.w	r2, r3, r1
    a24a:	d203      	bcs.n	a254 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a24c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a250:	2001      	movs	r0, #1
    a252:	9003      	str	r0, [sp, #12]
    a254:	f1b9 0f00 	cmp.w	r9, #0
    a258:	d004      	beq.n	a264 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    a25a:	2100      	movs	r1, #0
    a25c:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    a260:	f3af 8000 	nop.w
    a264:	990a      	ldr	r1, [sp, #40]	; 0x28
    a266:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    a26a:	1a0a      	subs	r2, r1, r0
    a26c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a26e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a272:	18c9      	adds	r1, r1, r3
    a274:	1a08      	subs	r0, r1, r0
    a276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a27a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a27e:	bf98      	it	ls
    a280:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a284:	d80b      	bhi.n	a29e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    a286:	4632      	mov	r2, r6
    a288:	463b      	mov	r3, r7
    a28a:	a90a      	add	r1, sp, #40	; 0x28
    a28c:	483f      	ldr	r0, [pc, #252]	; (a38c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a28e:	f8cd a000 	str.w	sl, [sp]
    a292:	f7fe fac5 	bl	8820 <MPSL_IRQ_RADIO_Handler+0xb4>
    a296:	9903      	ldr	r1, [sp, #12]
    a298:	4308      	orrs	r0, r1
    a29a:	d145      	bne.n	a328 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    a29c:	e05f      	b.n	a35e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a29e:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    a2a2:	aa05      	add	r2, sp, #20
    a2a4:	a903      	add	r1, sp, #12
    a2a6:	4658      	mov	r0, fp
    a2a8:	f000 fd92 	bl	add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a2ac:	f001 fa8e 	bl	b7cc <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a2b0:	f000 fd72 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a2b4:	4682      	mov	sl, r0
    a2b6:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    a2ba:	2820      	cmp	r0, #32
    a2bc:	d00a      	beq.n	a2d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    a2be:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a2c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a2c6:	1d80      	adds	r0, r0, #6
    a2c8:	f145 0100 	adc.w	r1, r5, #0
    a2cc:	181e      	adds	r6, r3, r0
    a2ce:	eb42 0701 	adc.w	r7, r2, r1
    a2d2:	e024      	b.n	a31e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a2d4:	360a      	adds	r6, #10
    a2d6:	f147 0700 	adc.w	r7, r7, #0
    a2da:	f1bb 0f00 	cmp.w	fp, #0
    a2de:	d017      	beq.n	a310 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a2e0:	f001 fd92 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a2e4:	b9a0      	cbnz	r0, a310 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a2e6:	f001 fc49 	bl	bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a2ea:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a2ee:	bf08      	it	eq
    a2f0:	200d      	moveq	r0, #13
    a2f2:	d00b      	beq.n	a30c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a2f4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a2f8:	3856      	subs	r0, #86	; 0x56
    a2fa:	bf08      	it	eq
    a2fc:	201c      	moveq	r0, #28
    a2fe:	d005      	beq.n	a30c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a300:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a304:	389f      	subs	r0, #159	; 0x9f
    a306:	bf14      	ite	ne
    a308:	4628      	movne	r0, r5
    a30a:	2032      	moveq	r0, #50	; 0x32
    a30c:	1986      	adds	r6, r0, r6
    a30e:	416f      	adcs	r7, r5
    a310:	9803      	ldr	r0, [sp, #12]
    a312:	4582      	cmp	sl, r0
    a314:	d903      	bls.n	a31e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a316:	ebaa 0000 	sub.w	r0, sl, r0
    a31a:	1986      	adds	r6, r0, r6
    a31c:	416f      	adcs	r7, r5
    a31e:	201f      	movs	r0, #31
    a320:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    a324:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    a328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a32c:	f000 fcd2 	bl	acd4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a330:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    a334:	1880      	adds	r0, r0, r2
    a336:	eb41 0205 	adc.w	r2, r1, r5
    a33a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    a33e:	1840      	adds	r0, r0, r1
    a340:	eb42 0105 	adc.w	r1, r2, r5
    a344:	1c40      	adds	r0, r0, #1
    a346:	f141 0100 	adc.w	r1, r1, #0
    a34a:	f1b9 0f00 	cmp.w	r9, #0
    a34e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    a352:	d004      	beq.n	a35e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a354:	2100      	movs	r1, #0
    a356:	f240 50fa 	movw	r0, #1530	; 0x5fa
    a35a:	f3af 8000 	nop.w
    a35e:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    a362:	f88d 0000 	strb.w	r0, [sp]
    a366:	f89d 0000 	ldrb.w	r0, [sp]
    a36a:	2800      	cmp	r0, #0
    a36c:	f47f ae78 	bne.w	a060 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    a370:	b015      	add	sp, #84	; 0x54
    a372:	2001      	movs	r0, #1
    a374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a378:	e000ed04 	.word	0xe000ed04
    a37c:	00000000 	.word	0x00000000
    a380:	20001248 	.word	0x20001248
    a384:	200011c8 	.word	0x200011c8
    a388:	1e847fff 	.word	0x1e847fff
    a38c:	0f424000 	.word	0x0f424000

0000a390 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a390:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a394:	4d9d      	ldr	r5, [pc, #628]	; (a60c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    a396:	b08c      	sub	sp, #48	; 0x30
    a398:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a39c:	2000      	movs	r0, #0
    a39e:	9007      	str	r0, [sp, #28]
    a3a0:	9008      	str	r0, [sp, #32]
    a3a2:	2001      	movs	r0, #1
    a3a4:	4c9a      	ldr	r4, [pc, #616]	; (a610 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    a3a6:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a3aa:	f04f 0800 	mov.w	r8, #0
    a3ae:	4607      	mov	r7, r0
    a3b0:	9006      	str	r0, [sp, #24]
    a3b2:	b124      	cbz	r4, a3be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a3b4:	2100      	movs	r1, #0
    a3b6:	f240 70a5 	movw	r0, #1957	; 0x7a5
    a3ba:	f3af 8000 	nop.w
    a3be:	9806      	ldr	r0, [sp, #24]
    a3c0:	2800      	cmp	r0, #0
    a3c2:	d03c      	beq.n	a43e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a3c4:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    a3c8:	b124      	cbz	r4, a3d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a3ca:	2100      	movs	r1, #0
    a3cc:	f240 70aa 	movw	r0, #1962	; 0x7aa
    a3d0:	f3af 8000 	nop.w
    a3d4:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    a3d8:	2240      	movs	r2, #64	; 0x40
    a3da:	ea27 060a 	bic.w	r6, r7, sl
    a3de:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a3e2:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a3e6:	4683      	mov	fp, r0
    a3e8:	f006 f899 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a3ec:	b124      	cbz	r4, a3f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a3ee:	2100      	movs	r1, #0
    a3f0:	f240 503c 	movw	r0, #1340	; 0x53c
    a3f4:	f3af 8000 	nop.w
    a3f8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a3fc:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a400:	4428      	add	r0, r5
    a402:	4429      	add	r1, r5
    a404:	9000      	str	r0, [sp, #0]
    a406:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a408:	8502      	strh	r2, [r0, #40]	; 0x28
    a40a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a40e:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a412:	b124      	cbz	r4, a41e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a414:	2100      	movs	r1, #0
    a416:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a41a:	f3af 8000 	nop.w
    a41e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a422:	f88d 0008 	strb.w	r0, [sp, #8]
    a426:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a42a:	b178      	cbz	r0, a44c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a42c:	2c00      	cmp	r4, #0
    a42e:	bf1c      	itt	ne
    a430:	2100      	movne	r1, #0
    a432:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    a436:	d0bc      	beq.n	a3b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a438:	f3af 8000 	nop.w
    a43c:	e7b9      	b.n	a3b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a43e:	4875      	ldr	r0, [pc, #468]	; (a614 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a440:	2800      	cmp	r0, #0
    a442:	bf18      	it	ne
    a444:	f3af 8000 	nopne.w
    a448:	b662      	cpsie	i
    a44a:	e7bb      	b.n	a3c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a44c:	b124      	cbz	r4, a458 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a44e:	2100      	movs	r1, #0
    a450:	f240 70b4 	movw	r0, #1972	; 0x7b4
    a454:	f3af 8000 	nop.w
    a458:	980c      	ldr	r0, [sp, #48]	; 0x30
    a45a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a45e:	2803      	cmp	r0, #3
    a460:	d17e      	bne.n	a560 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a462:	9a00      	ldr	r2, [sp, #0]
    a464:	990c      	ldr	r1, [sp, #48]	; 0x30
    a466:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    a46a:	4288      	cmp	r0, r1
    a46c:	bf14      	ite	ne
    a46e:	f04f 0a00 	movne.w	sl, #0
    a472:	f04f 0a01 	moveq.w	sl, #1
    a476:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    a47a:	4683      	mov	fp, r0
    a47c:	2220      	movs	r2, #32
    a47e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a482:	e003      	b.n	a48c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a484:	4602      	mov	r2, r0
    a486:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a48a:	7840      	ldrb	r0, [r0, #1]
    a48c:	4288      	cmp	r0, r1
    a48e:	d002      	beq.n	a496 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a490:	2820      	cmp	r0, #32
    a492:	d00a      	beq.n	a4aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a494:	e7f6      	b.n	a484 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a496:	2820      	cmp	r0, #32
    a498:	d007      	beq.n	a4aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a49a:	4583      	cmp	fp, r0
    a49c:	d107      	bne.n	a4ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a49e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a4a2:	7840      	ldrb	r0, [r0, #1]
    a4a4:	f88c 0000 	strb.w	r0, [ip]
    a4a8:	e007      	b.n	a4ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a4aa:	4640      	mov	r0, r8
    a4ac:	e00c      	b.n	a4c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a4ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a4b2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a4b6:	7840      	ldrb	r0, [r0, #1]
    a4b8:	7048      	strb	r0, [r1, #1]
    a4ba:	b124      	cbz	r4, a4c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a4bc:	2100      	movs	r1, #0
    a4be:	f240 40a4 	movw	r0, #1188	; 0x4a4
    a4c2:	f3af 8000 	nop.w
    a4c6:	4638      	mov	r0, r7
    a4c8:	46c3      	mov	fp, r8
    a4ca:	ea10 0f0a 	tst.w	r0, sl
    a4ce:	bf18      	it	ne
    a4d0:	46bb      	movne	fp, r7
    a4d2:	2800      	cmp	r0, #0
    a4d4:	d04e      	beq.n	a574 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a4d6:	b124      	cbz	r4, a4e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a4d8:	2100      	movs	r1, #0
    a4da:	f240 70b9 	movw	r0, #1977	; 0x7b9
    a4de:	f3af 8000 	nop.w
    a4e2:	4632      	mov	r2, r6
    a4e4:	2001      	movs	r0, #1
    a4e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    a4e8:	f7fe ffc6 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a4ec:	b124      	cbz	r4, a4f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a4ee:	2100      	movs	r1, #0
    a4f0:	f240 70c2 	movw	r0, #1986	; 0x7c2
    a4f4:	f3af 8000 	nop.w
    a4f8:	4847      	ldr	r0, [pc, #284]	; (a618 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    a4fa:	2800      	cmp	r0, #0
    a4fc:	bf18      	it	ne
    a4fe:	f3af 8000 	nopne.w
    a502:	f3ef 8010 	mrs	r0, PRIMASK
    a506:	b672      	cpsid	i
    a508:	9006      	str	r0, [sp, #24]
    a50a:	b124      	cbz	r4, a516 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a50c:	2100      	movs	r1, #0
    a50e:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a512:	f3af 8000 	nop.w
    a516:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a51a:	f88d 0008 	strb.w	r0, [sp, #8]
    a51e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a522:	b138      	cbz	r0, a534 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a524:	2c00      	cmp	r4, #0
    a526:	bf1c      	itt	ne
    a528:	2100      	movne	r1, #0
    a52a:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    a52e:	f43f af40 	beq.w	a3b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a532:	e781      	b.n	a438 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    a534:	f1bb 0f00 	cmp.w	fp, #0
    a538:	d009      	beq.n	a54e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a53a:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    a53e:	2820      	cmp	r0, #32
    a540:	d105      	bne.n	a54e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a542:	4631      	mov	r1, r6
    a544:	2002      	movs	r0, #2
    a546:	f7fe ffc9 	bl	94dc <MPSL_IRQ_RADIO_Handler+0xd70>
    a54a:	9008      	str	r0, [sp, #32]
    a54c:	b1f8      	cbz	r0, a58e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    a54e:	b124      	cbz	r4, a55a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    a550:	2100      	movs	r1, #0
    a552:	f240 70df 	movw	r0, #2015	; 0x7df
    a556:	f3af 8000 	nop.w
    a55a:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a55e:	e000      	b.n	a562 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    a560:	e008      	b.n	a574 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a562:	ea27 0000 	bic.w	r0, r7, r0
    a566:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    a56a:	20ff      	movs	r0, #255	; 0xff
    a56c:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    a570:	2001      	movs	r0, #1
    a572:	9007      	str	r0, [sp, #28]
    a574:	b124      	cbz	r4, a580 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    a576:	2100      	movs	r1, #0
    a578:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    a57c:	f3af 8000 	nop.w
    a580:	9808      	ldr	r0, [sp, #32]
    a582:	4e26      	ldr	r6, [pc, #152]	; (a61c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    a584:	2802      	cmp	r0, #2
    a586:	d009      	beq.n	a59c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    a588:	2801      	cmp	r0, #1
    a58a:	d027      	beq.n	a5dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    a58c:	e02b      	b.n	a5e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a58e:	b354      	cbz	r4, a5e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a590:	2100      	movs	r1, #0
    a592:	f240 70da 	movw	r0, #2010	; 0x7da
    a596:	f3af 8000 	nop.w
    a59a:	e7ec      	b.n	a576 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    a59c:	f000 fef8 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a5a0:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    a5a4:	ebb3 0c00 	subs.w	ip, r3, r0
    a5a8:	eb72 0c01 	sbcs.w	ip, r2, r1
    a5ac:	d204      	bcs.n	a5b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a5ae:	f240 71ee 	movw	r1, #2030	; 0x7ee
    a5b2:	2070      	movs	r0, #112	; 0x70
    a5b4:	f001 fca0 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5b8:	1a18      	subs	r0, r3, r0
    a5ba:	eb62 0101 	sbc.w	r1, r2, r1
    a5be:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    a5c2:	f171 0100 	sbcs.w	r1, r1, #0
    a5c6:	d304      	bcc.n	a5d2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    a5c8:	f240 71ef 	movw	r1, #2031	; 0x7ef
    a5cc:	2070      	movs	r0, #112	; 0x70
    a5ce:	f001 fc93 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5d2:	f005 fe14 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a5d6:	6871      	ldr	r1, [r6, #4]
    a5d8:	b129      	cbz	r1, a5e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a5da:	e003      	b.n	a5e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    a5dc:	6871      	ldr	r1, [r6, #4]
    a5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a5e2:	b101      	cbz	r1, a5e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a5e4:	4788      	blx	r1
    a5e6:	9806      	ldr	r0, [sp, #24]
    a5e8:	b148      	cbz	r0, a5fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    a5ea:	b124      	cbz	r4, a5f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    a5ec:	2100      	movs	r1, #0
    a5ee:	f240 70ff 	movw	r0, #2047	; 0x7ff
    a5f2:	f3af 8000 	nop.w
    a5f6:	9807      	ldr	r0, [sp, #28]
    a5f8:	b00d      	add	sp, #52	; 0x34
    a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5fe:	4805      	ldr	r0, [pc, #20]	; (a614 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a600:	2800      	cmp	r0, #0
    a602:	bf18      	it	ne
    a604:	f3af 8000 	nopne.w
    a608:	b662      	cpsie	i
    a60a:	e7ee      	b.n	a5ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    a60c:	20001248 	.word	0x20001248
	...
    a61c:	20000308 	.word	0x20000308

0000a620 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    a620:	2820      	cmp	r0, #32
    a622:	bf24      	itt	cs
    a624:	2000      	movcs	r0, #0
    a626:	4770      	bxcs	lr
    a628:	4b03      	ldr	r3, [pc, #12]	; (a638 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    a62a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    a62e:	e9c0 1200 	strd	r1, r2, [r0]
    a632:	2001      	movs	r0, #1
    a634:	4770      	bx	lr
    a636:	0000      	.short	0x0000
    a638:	20000dc8 	.word	0x20000dc8

0000a63c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    a63c:	b510      	push	{r4, lr}
    a63e:	2820      	cmp	r0, #32
    a640:	d211      	bcs.n	a666 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a642:	490e      	ldr	r1, [pc, #56]	; (a67c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    a644:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    a648:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    a64c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    a650:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    a654:	b13b      	cbz	r3, a666 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a656:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    a65a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    a65e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    a662:	2a01      	cmp	r2, #1
    a664:	d001      	beq.n	a66a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    a666:	2000      	movs	r0, #0
    a668:	bd10      	pop	{r4, pc}
    a66a:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    a66e:	4601      	mov	r1, r0
    a670:	2000      	movs	r0, #0
    a672:	f7fe ff01 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a676:	2001      	movs	r0, #1
    a678:	bd10      	pop	{r4, pc}
    a67a:	0000      	.short	0x0000
    a67c:	20001248 	.word	0x20001248

0000a680 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    a680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a684:	4e86      	ldr	r6, [pc, #536]	; (a8a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    a686:	4680      	mov	r8, r0
    a688:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    a68c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    a690:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    a694:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    a698:	2800      	cmp	r0, #0
    a69a:	d071      	beq.n	a780 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a69c:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    a6a0:	4d80      	ldr	r5, [pc, #512]	; (a8a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    a6a2:	b125      	cbz	r5, a6ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    a6a4:	2100      	movs	r1, #0
    a6a6:	f640 307b 	movw	r0, #2939	; 0xb7b
    a6aa:	f3af 8000 	nop.w
    a6ae:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    a6b2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a6b6:	2801      	cmp	r0, #1
    a6b8:	d018      	beq.n	a6ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    a6ba:	b2c0      	uxtb	r0, r0
    a6bc:	2804      	cmp	r0, #4
    a6be:	bf1c      	itt	ne
    a6c0:	2805      	cmpne	r0, #5
    a6c2:	2806      	cmpne	r0, #6
    a6c4:	d061      	beq.n	a78a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    a6c6:	b12d      	cbz	r5, a6d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    a6c8:	f04f 0100 	mov.w	r1, #0
    a6cc:	f640 3087 	movw	r0, #2951	; 0xb87
    a6d0:	f3af 8000 	nop.w
    a6d4:	f005 fec9 	bl	1046a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a6d8:	b125      	cbz	r5, a6e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    a6da:	2100      	movs	r1, #0
    a6dc:	f640 308b 	movw	r0, #2955	; 0xb8b
    a6e0:	f3af 8000 	nop.w
    a6e4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a6e8:	2801      	cmp	r0, #1
    a6ea:	d1e6      	bne.n	a6ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    a6ec:	2401      	movs	r4, #1
    a6ee:	b125      	cbz	r5, a6fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    a6f0:	2100      	movs	r1, #0
    a6f2:	f640 3092 	movw	r0, #2962	; 0xb92
    a6f6:	f3af 8000 	nop.w
    a6fa:	2c00      	cmp	r4, #0
    a6fc:	d04b      	beq.n	a796 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    a6fe:	2000      	movs	r0, #0
    a700:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    a704:	b125      	cbz	r5, a710 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    a706:	2100      	movs	r1, #0
    a708:	f640 3097 	movw	r0, #2967	; 0xb97
    a70c:	f3af 8000 	nop.w
    a710:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    a714:	2001      	movs	r0, #1
    a716:	ea20 090b 	bic.w	r9, r0, fp
    a71a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    a71e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    a722:	2240      	movs	r2, #64	; 0x40
    a724:	f005 fefb 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a728:	b125      	cbz	r5, a734 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    a72a:	2100      	movs	r1, #0
    a72c:	f240 503c 	movw	r0, #1340	; 0x53c
    a730:	f3af 8000 	nop.w
    a734:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a738:	eb00 0a06 	add.w	sl, r0, r6
    a73c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    a740:	4430      	add	r0, r6
    a742:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    a744:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    a748:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a74c:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    a750:	b125      	cbz	r5, a75c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    a752:	2100      	movs	r1, #0
    a754:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a758:	f3af 8000 	nop.w
    a75c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a760:	f88d 0000 	strb.w	r0, [sp]
    a764:	f89d 0000 	ldrb.w	r0, [sp]
    a768:	b1e0      	cbz	r0, a7a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    a76a:	2d00      	cmp	r5, #0
    a76c:	bf1c      	itt	ne
    a76e:	2100      	movne	r1, #0
    a770:	f640 309d 	movwne	r0, #2973	; 0xb9d
    a774:	d0bb      	beq.n	a6ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a776:	bf00      	nop
    a778:	f3af 8000 	nop.w
    a77c:	e7b7      	b.n	a6ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a77e:	e7ff      	b.n	a780 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a780:	f640 3172 	movw	r1, #2930	; 0xb72
    a784:	2070      	movs	r0, #112	; 0x70
    a786:	f001 fbb7 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a78a:	464a      	mov	r2, r9
    a78c:	4641      	mov	r1, r8
    a78e:	2001      	movs	r0, #1
    a790:	f7fe fe72 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a794:	e7a0      	b.n	a6d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    a796:	4844      	ldr	r0, [pc, #272]	; (a8a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    a798:	2800      	cmp	r0, #0
    a79a:	bf18      	it	ne
    a79c:	f3af 8000 	nopne.w
    a7a0:	b662      	cpsie	i
    a7a2:	e7ac      	b.n	a6fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    a7a4:	b125      	cbz	r5, a7b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    a7a6:	2100      	movs	r1, #0
    a7a8:	f640 30a1 	movw	r0, #2977	; 0xba1
    a7ac:	f3af 8000 	nop.w
    a7b0:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    a7b4:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    a7b8:	4640      	mov	r0, r8
    a7ba:	461c      	mov	r4, r3
    a7bc:	f04f 0b20 	mov.w	fp, #32
    a7c0:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    a7c4:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    a7c8:	e004      	b.n	a7d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    a7ca:	46a3      	mov	fp, r4
    a7cc:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    a7d0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a7d4:	4284      	cmp	r4, r0
    a7d6:	d002      	beq.n	a7de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    a7d8:	2c20      	cmp	r4, #32
    a7da:	d02b      	beq.n	a834 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a7dc:	e7f5      	b.n	a7ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    a7de:	2c20      	cmp	r4, #32
    a7e0:	d028      	beq.n	a834 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a7e2:	42a3      	cmp	r3, r4
    a7e4:	d104      	bne.n	a7f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    a7e6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    a7ea:	7840      	ldrb	r0, [r0, #1]
    a7ec:	7008      	strb	r0, [r1, #0]
    a7ee:	e005      	b.n	a7fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    a7f0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    a7f4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    a7f8:	7840      	ldrb	r0, [r0, #1]
    a7fa:	7048      	strb	r0, [r1, #1]
    a7fc:	f1ba 0f00 	cmp.w	sl, #0
    a800:	d011      	beq.n	a826 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    a802:	b125      	cbz	r5, a80e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    a804:	2100      	movs	r1, #0
    a806:	f240 409c 	movw	r0, #1180	; 0x49c
    a80a:	f3af 8000 	nop.w
    a80e:	f89a 0000 	ldrb.w	r0, [sl]
    a812:	42a0      	cmp	r0, r4
    a814:	d107      	bne.n	a826 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    a816:	b125      	cbz	r5, a822 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    a818:	2100      	movs	r1, #0
    a81a:	f240 409f 	movw	r0, #1183	; 0x49f
    a81e:	f3af 8000 	nop.w
    a822:	f88a b000 	strb.w	fp, [sl]
    a826:	b15d      	cbz	r5, a840 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    a828:	2100      	movs	r1, #0
    a82a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    a82e:	f3af 8000 	nop.w
    a832:	e000      	b.n	a836 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    a834:	b125      	cbz	r5, a840 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    a836:	2100      	movs	r1, #0
    a838:	f640 30a5 	movw	r0, #2981	; 0xba5
    a83c:	f3af 8000 	nop.w
    a840:	481a      	ldr	r0, [pc, #104]	; (a8ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    a842:	2800      	cmp	r0, #0
    a844:	bf18      	it	ne
    a846:	f3af 8000 	nopne.w
    a84a:	f3ef 8410 	mrs	r4, PRIMASK
    a84e:	b672      	cpsid	i
    a850:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a854:	f88d 0000 	strb.w	r0, [sp]
    a858:	f89d 0000 	ldrb.w	r0, [sp]
    a85c:	b138      	cbz	r0, a86e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    a85e:	2d00      	cmp	r5, #0
    a860:	bf1c      	itt	ne
    a862:	2100      	movne	r1, #0
    a864:	f640 30ab 	movwne	r0, #2987	; 0xbab
    a868:	f43f af41 	beq.w	a6ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a86c:	e784      	b.n	a778 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    a86e:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    a872:	20ff      	movs	r0, #255	; 0xff
    a874:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    a878:	b154      	cbz	r4, a890 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    a87a:	2d00      	cmp	r5, #0
    a87c:	bf08      	it	eq
    a87e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a882:	2100      	movs	r1, #0
    a884:	f640 30b8 	movw	r0, #3000	; 0xbb8
    a888:	f3af 8000 	nop.w
    a88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a890:	4805      	ldr	r0, [pc, #20]	; (a8a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    a892:	2800      	cmp	r0, #0
    a894:	bf18      	it	ne
    a896:	f3af 8000 	nopne.w
    a89a:	b662      	cpsie	i
    a89c:	e7ed      	b.n	a87a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    a89e:	0000      	.short	0x0000
    a8a0:	20001248 	.word	0x20001248
	...

0000a8b0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    a8b0:	b570      	push	{r4, r5, r6, lr}
    a8b2:	460d      	mov	r5, r1
    a8b4:	4606      	mov	r6, r0
    a8b6:	f001 fa95 	bl	bde4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    a8ba:	480d      	ldr	r0, [pc, #52]	; (a8f0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    a8bc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    a8c0:	2400      	movs	r4, #0
    a8c2:	3880      	subs	r0, #128	; 0x80
    a8c4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    a8c8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    a8cc:	b129      	cbz	r1, a8da <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    a8ce:	1c61      	adds	r1, r4, #1
    a8d0:	b2cc      	uxtb	r4, r1
    a8d2:	2c20      	cmp	r4, #32
    a8d4:	d3f8      	bcc.n	a8c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    a8d6:	2020      	movs	r0, #32
    a8d8:	bd70      	pop	{r4, r5, r6, pc}
    a8da:	4806      	ldr	r0, [pc, #24]	; (a8f4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    a8dc:	4621      	mov	r1, r4
    a8de:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    a8e2:	e9c0 6500 	strd	r6, r5, [r0]
    a8e6:	2001      	movs	r0, #1
    a8e8:	f7fe fdc6 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a8ec:	4620      	mov	r0, r4
    a8ee:	bd70      	pop	{r4, r5, r6, pc}
    a8f0:	20001248 	.word	0x20001248
    a8f4:	20000dc8 	.word	0x20000dc8

0000a8f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    a8f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8fc:	f000 fd48 	bl	b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a900:	4606      	mov	r6, r0
    a902:	460f      	mov	r7, r1
    a904:	f000 fe88 	bl	b618 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    a908:	4c65      	ldr	r4, [pc, #404]	; (aaa0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    a90a:	6860      	ldr	r0, [r4, #4]
    a90c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a910:	bf1c      	itt	ne
    a912:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    a916:	6060      	strne	r0, [r4, #4]
    a918:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    a91c:	f8df b184 	ldr.w	fp, [pc, #388]	; aaa4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    a920:	2500      	movs	r5, #0
    a922:	bb10      	cbnz	r0, a96a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    a924:	f44f 710c 	mov.w	r1, #560	; 0x230
    a928:	6920      	ldr	r0, [r4, #16]
    a92a:	f001 fa47 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a92e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    a932:	68a1      	ldr	r1, [r4, #8]
    a934:	1818      	adds	r0, r3, r0
    a936:	eb45 0305 	adc.w	r3, r5, r5
    a93a:	1809      	adds	r1, r1, r0
    a93c:	eb42 0003 	adc.w	r0, r2, r3
    a940:	1a71      	subs	r1, r6, r1
    a942:	eb77 0000 	sbcs.w	r0, r7, r0
    a946:	d310      	bcc.n	a96a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    a948:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a94c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a950:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    a954:	6840      	ldr	r0, [r0, #4]
    a956:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    a95a:	680a      	ldr	r2, [r1, #0]
    a95c:	2108      	movs	r1, #8
    a95e:	4790      	blx	r2
    a960:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    a964:	2070      	movs	r0, #112	; 0x70
    a966:	f001 fac7 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a96a:	7e60      	ldrb	r0, [r4, #25]
    a96c:	b180      	cbz	r0, a990 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    a96e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    a972:	f88d 0000 	strb.w	r0, [sp]
    a976:	f89d 0000 	ldrb.w	r0, [sp]
    a97a:	b148      	cbz	r0, a990 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    a97c:	f000 fc7e 	bl	b27c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    a980:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a984:	b150      	cbz	r0, a99c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    a986:	f240 31cd 	movw	r1, #973	; 0x3cd
    a98a:	2070      	movs	r0, #112	; 0x70
    a98c:	f001 fab4 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a990:	1cf0      	adds	r0, r6, #3
    a992:	f147 0100 	adc.w	r1, r7, #0
    a996:	f000 fb4b 	bl	b030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    a99a:	e7f1      	b.n	a980 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    a99c:	2001      	movs	r0, #1
    a99e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a9a2:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a9a6:	2820      	cmp	r0, #32
    a9a8:	d020      	beq.n	a9ec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    a9aa:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    a9ae:	2020      	movs	r0, #32
    a9b0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    a9b4:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    a9b8:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    a9bc:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    a9c0:	6025      	str	r5, [r4, #0]
    a9c2:	f000 ff09 	bl	b7d8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    a9c6:	f884 0020 	strb.w	r0, [r4, #32]
    a9ca:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    a9ce:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a9d2:	eb00 0a04 	add.w	sl, r0, r4
    a9d6:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    a9da:	2820      	cmp	r0, #32
    a9dc:	d01c      	beq.n	aa18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    a9de:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    a9e2:	f89b 001a 	ldrb.w	r0, [fp, #26]
    a9e6:	2801      	cmp	r0, #1
    a9e8:	d005      	beq.n	a9f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    a9ea:	e015      	b.n	aa18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    a9ec:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    a9f0:	2070      	movs	r0, #112	; 0x70
    a9f2:	f001 fa81 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a9f6:	2201      	movs	r2, #1
    a9f8:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    a9fc:	4630      	mov	r0, r6
    a9fe:	4639      	mov	r1, r7
    aa00:	f7fe f8a6 	bl	8b50 <MPSL_IRQ_RADIO_Handler+0x3e4>
    aa04:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    aa08:	1a12      	subs	r2, r2, r0
    aa0a:	eb73 0201 	sbcs.w	r2, r3, r1
    aa0e:	bf24      	itt	cs
    aa10:	f10b 0208 	addcs.w	r2, fp, #8
    aa14:	e9c2 0100 	strdcs	r0, r1, [r2]
    aa18:	4641      	mov	r1, r8
    aa1a:	2001      	movs	r0, #1
    aa1c:	f7fe fd5e 	bl	94dc <MPSL_IRQ_RADIO_Handler+0xd70>
    aa20:	0007      	movs	r7, r0
    aa22:	d0f9      	beq.n	aa18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    aa24:	4820      	ldr	r0, [pc, #128]	; (aaa8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    aa26:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    aa2a:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    aa2e:	2802      	cmp	r0, #2
    aa30:	d104      	bne.n	aa3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    aa32:	4642      	mov	r2, r8
    aa34:	4649      	mov	r1, r9
    aa36:	2006      	movs	r0, #6
    aa38:	f7fe fd1e 	bl	9478 <MPSL_IRQ_RADIO_Handler+0xd0c>
    aa3c:	20ff      	movs	r0, #255	; 0xff
    aa3e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    aa42:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    aa46:	f8df 8064 	ldr.w	r8, [pc, #100]	; aaac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    aa4a:	2820      	cmp	r0, #32
    aa4c:	bf1c      	itt	ne
    aa4e:	f898 0001 	ldrbne.w	r0, [r8, #1]
    aa52:	f001 fb23 	blne	c09c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    aa56:	f894 0020 	ldrb.w	r0, [r4, #32]
    aa5a:	b128      	cbz	r0, aa68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    aa5c:	f000 fe98 	bl	b790 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    aa60:	f884 5020 	strb.w	r5, [r4, #32]
    aa64:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    aa68:	2f02      	cmp	r7, #2
    aa6a:	d00f      	beq.n	aa8c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    aa6c:	2f01      	cmp	r7, #1
    aa6e:	bf18      	it	ne
    aa70:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa78:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aa7c:	2900      	cmp	r1, #0
    aa7e:	bf08      	it	eq
    aa80:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa84:	b001      	add	sp, #4
    aa86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa8a:	4708      	bx	r1
    aa8c:	68a0      	ldr	r0, [r4, #8]
    aa8e:	1b80      	subs	r0, r0, r6
    aa90:	f005 fbb5 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa94:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aa98:	2900      	cmp	r1, #0
    aa9a:	d1f3      	bne.n	aa84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    aa9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaa0:	20001248 	.word	0x20001248
    aaa4:	20000dc8 	.word	0x20000dc8
    aaa8:	200011c8 	.word	0x200011c8
    aaac:	20000308 	.word	0x20000308

0000aab0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    aab0:	b570      	push	{r4, r5, r6, lr}
    aab2:	4c42      	ldr	r4, [pc, #264]	; (abbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    aab4:	4605      	mov	r5, r0
    aab6:	b082      	sub	sp, #8
    aab8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    aabc:	2820      	cmp	r0, #32
    aabe:	d008      	beq.n	aad2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    aac0:	6860      	ldr	r0, [r4, #4]
    aac2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    aac6:	d009      	beq.n	aadc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    aac8:	f640 21b6 	movw	r1, #2742	; 0xab6
    aacc:	2070      	movs	r0, #112	; 0x70
    aace:	f001 fa13 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aad2:	f640 21b5 	movw	r1, #2741	; 0xab5
    aad6:	2070      	movs	r0, #112	; 0x70
    aad8:	f001 fa0e 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aadc:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    aae0:	4937      	ldr	r1, [pc, #220]	; (abc0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    aae2:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    aae6:	68b0      	ldr	r0, [r6, #8]
    aae8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aaec:	f005 fb87 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aaf0:	4602      	mov	r2, r0
    aaf2:	8af0      	ldrh	r0, [r6, #22]
    aaf4:	7d31      	ldrb	r1, [r6, #20]
    aaf6:	4b33      	ldr	r3, [pc, #204]	; (abc4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    aaf8:	4408      	add	r0, r1
    aafa:	1c40      	adds	r0, r0, #1
    aafc:	1811      	adds	r1, r2, r0
    aafe:	429a      	cmp	r2, r3
    ab00:	d817      	bhi.n	ab32 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    ab02:	4a31      	ldr	r2, [pc, #196]	; (abc8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    ab04:	4290      	cmp	r0, r2
    ab06:	dc1b      	bgt.n	ab40 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    ab08:	f1c2 0c00 	rsb	ip, r2, #0
    ab0c:	4560      	cmp	r0, ip
    ab0e:	db1e      	blt.n	ab4e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    ab10:	0056      	lsls	r6, r2, #1
    ab12:	428e      	cmp	r6, r1
    ab14:	bfdc      	itt	le
    ab16:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    ab1a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    ab1e:	dd05      	ble.n	ab2c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    ab20:	2900      	cmp	r1, #0
    ab22:	bfbc      	itt	lt
    ab24:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    ab28:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    ab2c:	1948      	adds	r0, r1, r5
    ab2e:	4299      	cmp	r1, r3
    ab30:	d904      	bls.n	ab3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    ab32:	f240 517f 	movw	r1, #1407	; 0x57f
    ab36:	2070      	movs	r0, #112	; 0x70
    ab38:	f001 f9de 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab3c:	4295      	cmp	r5, r2
    ab3e:	dd04      	ble.n	ab4a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    ab40:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    ab44:	2070      	movs	r0, #112	; 0x70
    ab46:	f001 f9d7 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab4a:	4565      	cmp	r5, ip
    ab4c:	da04      	bge.n	ab58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    ab4e:	f240 5181 	movw	r1, #1409	; 0x581
    ab52:	2070      	movs	r0, #112	; 0x70
    ab54:	f001 f9d0 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab58:	4286      	cmp	r6, r0
    ab5a:	bfdc      	itt	le
    ab5c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    ab60:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    ab64:	dd05      	ble.n	ab72 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    ab66:	2800      	cmp	r0, #0
    ab68:	bfbc      	itt	lt
    ab6a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    ab6e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    ab72:	aa01      	add	r2, sp, #4
    ab74:	4669      	mov	r1, sp
    ab76:	f000 f92b 	bl	add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ab7a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ab7e:	280f      	cmp	r0, #15
    ab80:	bf8c      	ite	hi
    ab82:	2001      	movhi	r0, #1
    ab84:	2000      	movls	r0, #0
    ab86:	9900      	ldr	r1, [sp, #0]
    ab88:	4408      	add	r0, r1
    ab8a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    ab8e:	6061      	str	r1, [r4, #4]
    ab90:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    ab94:	f88d 0000 	strb.w	r0, [sp]
    ab98:	f89d 0000 	ldrb.w	r0, [sp]
    ab9c:	2800      	cmp	r0, #0
    ab9e:	bf04      	itt	eq
    aba0:	b002      	addeq	sp, #8
    aba2:	bd70      	popeq	{r4, r5, r6, pc}
    aba4:	2005      	movs	r0, #5
    aba6:	f000 fc15 	bl	b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    abaa:	2800      	cmp	r0, #0
    abac:	bf1c      	itt	ne
    abae:	b002      	addne	sp, #8
    abb0:	bd70      	popne	{r4, r5, r6, pc}
    abb2:	f640 21bd 	movw	r1, #2749	; 0xabd
    abb6:	2070      	movs	r0, #112	; 0x70
    abb8:	f001 f99e 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    abbc:	20001248 	.word	0x20001248
    abc0:	20000dc8 	.word	0x20000dc8
    abc4:	1e847fff 	.word	0x1e847fff
    abc8:	0f424000 	.word	0x0f424000

0000abcc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    abcc:	b570      	push	{r4, r5, r6, lr}
    abce:	4c1e      	ldr	r4, [pc, #120]	; (ac48 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    abd0:	2120      	movs	r1, #32
    abd2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    abd6:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    abda:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    abde:	2000      	movs	r0, #0
    abe0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    abe4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    abe8:	1e42      	subs	r2, r0, #1
    abea:	e9c4 0200 	strd	r0, r2, [r4]
    abee:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    abf2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    abf6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    abfa:	f884 0020 	strb.w	r0, [r4, #32]
    abfe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    ac02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    ac06:	1e41      	subs	r1, r0, #1
    ac08:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    ac0c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    ac10:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    ac14:	2210      	movs	r2, #16
    ac16:	7088      	strb	r0, [r1, #2]
    ac18:	f801 0f04 	strb.w	r0, [r1, #4]!
    ac1c:	1e52      	subs	r2, r2, #1
    ac1e:	d1fa      	bne.n	ac16 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    ac20:	f000 fde4 	bl	b7ec <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    ac24:	4d09      	ldr	r5, [pc, #36]	; (ac4c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    ac26:	2601      	movs	r6, #1
    ac28:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    ac2c:	20ff      	movs	r0, #255	; 0xff
    ac2e:	7028      	strb	r0, [r5, #0]
    ac30:	4807      	ldr	r0, [pc, #28]	; (ac50 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    ac32:	f001 fa15 	bl	c060 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    ac36:	7068      	strb	r0, [r5, #1]
    ac38:	f001 fa80 	bl	c13c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    ac3c:	60a8      	str	r0, [r5, #8]
    ac3e:	f000 fd67 	bl	b710 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    ac42:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    ac46:	bd70      	pop	{r4, r5, r6, pc}
    ac48:	20001248 	.word	0x20001248
    ac4c:	20000308 	.word	0x20000308
    ac50:	000093a9 	.word	0x000093a9

0000ac54 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac56:	4607      	mov	r7, r0
    ac58:	b087      	sub	sp, #28
    ac5a:	461d      	mov	r5, r3
    ac5c:	460e      	mov	r6, r1
    ac5e:	4610      	mov	r0, r2
    ac60:	f005 facd 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ac64:	4604      	mov	r4, r0
    ac66:	a803      	add	r0, sp, #12
    ac68:	9000      	str	r0, [sp, #0]
    ac6a:	ab04      	add	r3, sp, #16
    ac6c:	aa02      	add	r2, sp, #8
    ac6e:	4638      	mov	r0, r7
    ac70:	4631      	mov	r1, r6
    ac72:	f000 f853 	bl	ad1c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    ac76:	9902      	ldr	r1, [sp, #8]
    ac78:	4a14      	ldr	r2, [pc, #80]	; (accc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    ac7a:	1a60      	subs	r0, r4, r1
    ac7c:	2300      	movs	r3, #0
    ac7e:	1a82      	subs	r2, r0, r2
    ac80:	f173 0200 	sbcs.w	r2, r3, #0
    ac84:	d318      	bcc.n	acb8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    ac86:	f8df c044 	ldr.w	ip, [pc, #68]	; accc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    ac8a:	1b0a      	subs	r2, r1, r4
    ac8c:	ebb2 0c0c 	subs.w	ip, r2, ip
    ac90:	f173 0300 	sbcs.w	r3, r3, #0
    ac94:	d310      	bcc.n	acb8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    ac96:	4b0e      	ldr	r3, [pc, #56]	; (acd0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    ac98:	4283      	cmp	r3, r0
    ac9a:	bf3e      	ittt	cc
    ac9c:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    aca0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    aca4:	4420      	addcc	r0, r4
    aca6:	d307      	bcc.n	acb8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    aca8:	4293      	cmp	r3, r2
    acaa:	d209      	bcs.n	acc0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    acac:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    acb0:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    acb4:	4408      	add	r0, r1
    acb6:	4240      	negs	r0, r0
    acb8:	300f      	adds	r0, #15
    acba:	b007      	add	sp, #28
    acbc:	1a28      	subs	r0, r5, r0
    acbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acc0:	f640 21d7 	movw	r1, #2775	; 0xad7
    acc4:	2070      	movs	r0, #112	; 0x70
    acc6:	f001 f917 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    acca:	0000      	.short	0x0000
    accc:	0f424000 	.word	0x0f424000
    acd0:	1e847fff 	.word	0x1e847fff

0000acd4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    acd4:	0e03      	lsrs	r3, r0, #24
    acd6:	b430      	push	{r4, r5}
    acd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    acdc:	f8df c038 	ldr.w	ip, [pc, #56]	; ad18 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    ace0:	0e09      	lsrs	r1, r1, #24
    ace2:	fba3 250c 	umull	r2, r5, r3, ip
    ace6:	fb01 510c 	mla	r1, r1, ip, r5
    acea:	2400      	movs	r4, #0
    acec:	fb03 1104 	mla	r1, r3, r4, r1
    acf0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    acf4:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    acf8:	f643 5c09 	movw	ip, #15625	; 0x3d09
    acfc:	fb13 f30c 	smulbb	r3, r3, ip
    ad00:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ad04:	fb10 f00c 	smulbb	r0, r0, ip
    ad08:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ad0c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    ad10:	1880      	adds	r0, r0, r2
    ad12:	4161      	adcs	r1, r4
    ad14:	bc30      	pop	{r4, r5}
    ad16:	4770      	bx	lr
    ad18:	1e848000 	.word	0x1e848000

0000ad1c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    ad1c:	b570      	push	{r4, r5, r6, lr}
    ad1e:	b084      	sub	sp, #16
    ad20:	4615      	mov	r5, r2
    ad22:	aa01      	add	r2, sp, #4
    ad24:	461c      	mov	r4, r3
    ad26:	9200      	str	r2, [sp, #0]
    ad28:	9e08      	ldr	r6, [sp, #32]
    ad2a:	ab02      	add	r3, sp, #8
    ad2c:	4a17      	ldr	r2, [pc, #92]	; (ad8c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    ad2e:	f005 fbe7 	bl	10500 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    ad32:	9801      	ldr	r0, [sp, #4]
    ad34:	f248 6237 	movw	r2, #34359	; 0x8637
    ad38:	0b41      	lsrs	r1, r0, #13
    ad3a:	4351      	muls	r1, r2
    ad3c:	0c09      	lsrs	r1, r1, #16
    ad3e:	4a14      	ldr	r2, [pc, #80]	; (ad90 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    ad40:	024b      	lsls	r3, r1, #9
    ad42:	fb01 0102 	mla	r1, r1, r2, r0
    ad46:	4813      	ldr	r0, [pc, #76]	; (ad94 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    ad48:	4348      	muls	r0, r1
    ad4a:	0d42      	lsrs	r2, r0, #21
    ad4c:	1898      	adds	r0, r3, r2
    ad4e:	f643 5309 	movw	r3, #15625	; 0x3d09
    ad52:	fb12 f303 	smulbb	r3, r2, r3
    ad56:	f503 7280 	add.w	r2, r3, #256	; 0x100
    ad5a:	f643 5c08 	movw	ip, #15624	; 0x3d08
    ad5e:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    ad62:	4463      	add	r3, ip
    ad64:	b2d2      	uxtb	r2, r2
    ad66:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    ad6a:	bf84      	itt	hi
    ad6c:	2200      	movhi	r2, #0
    ad6e:	1c40      	addhi	r0, r0, #1
    ad70:	7032      	strb	r2, [r6, #0]
    ad72:	9b02      	ldr	r3, [sp, #8]
    ad74:	0a19      	lsrs	r1, r3, #8
    ad76:	061b      	lsls	r3, r3, #24
    ad78:	1818      	adds	r0, r3, r0
    ad7a:	f141 0100 	adc.w	r1, r1, #0
    ad7e:	e9c4 0100 	strd	r0, r1, [r4]
    ad82:	9801      	ldr	r0, [sp, #4]
    ad84:	6028      	str	r0, [r5, #0]
    ad86:	b004      	add	sp, #16
    ad88:	bd70      	pop	{r4, r5, r6, pc}
    ad8a:	0000      	.short	0x0000
    ad8c:	1e848000 	.word	0x1e848000
    ad90:	ffffc2f7 	.word	0xffffc2f7
    ad94:	00010c6f 	.word	0x00010c6f

0000ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    ad98:	0b41      	lsrs	r1, r0, #13
    ad9a:	f248 6237 	movw	r2, #34359	; 0x8637
    ad9e:	4351      	muls	r1, r2
    ada0:	0c0a      	lsrs	r2, r1, #16
    ada2:	4b09      	ldr	r3, [pc, #36]	; (adc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    ada4:	0251      	lsls	r1, r2, #9
    ada6:	fb02 0203 	mla	r2, r2, r3, r0
    adaa:	4808      	ldr	r0, [pc, #32]	; (adcc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    adac:	4350      	muls	r0, r2
    adae:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    adb2:	306e      	adds	r0, #110	; 0x6e
    adb4:	0d40      	lsrs	r0, r0, #21
    adb6:	425b      	negs	r3, r3
    adb8:	fb10 f303 	smulbb	r3, r0, r3
    adbc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    adc0:	bf88      	it	hi
    adc2:	1c49      	addhi	r1, r1, #1
    adc4:	4408      	add	r0, r1
    adc6:	4770      	bx	lr
    adc8:	ffffc2f7 	.word	0xffffc2f7
    adcc:	00010c6f 	.word	0x00010c6f

0000add0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    add0:	0b43      	lsrs	r3, r0, #13
    add2:	f248 6c37 	movw	ip, #34359	; 0x8637
    add6:	fb03 f30c 	mul.w	r3, r3, ip
    adda:	b430      	push	{r4, r5}
    addc:	0c1b      	lsrs	r3, r3, #16
    adde:	f8df c044 	ldr.w	ip, [pc, #68]	; ae24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    ade2:	025c      	lsls	r4, r3, #9
    ade4:	fb03 030c 	mla	r3, r3, ip, r0
    ade8:	480f      	ldr	r0, [pc, #60]	; (ae28 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    adea:	4358      	muls	r0, r3
    adec:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    adf0:	eb04 000c 	add.w	r0, r4, ip
    adf4:	f643 5409 	movw	r4, #15625	; 0x3d09
    adf8:	fb1c f404 	smulbb	r4, ip, r4
    adfc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    ae00:	f643 5508 	movw	r5, #15624	; 0x3d08
    ae04:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    ae08:	442c      	add	r4, r5
    ae0a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    ae0e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    ae12:	bf84      	itt	hi
    ae14:	f04f 0c00 	movhi.w	ip, #0
    ae18:	1c40      	addhi	r0, r0, #1
    ae1a:	6008      	str	r0, [r1, #0]
    ae1c:	f882 c000 	strb.w	ip, [r2]
    ae20:	bc30      	pop	{r4, r5}
    ae22:	4770      	bx	lr
    ae24:	ffffc2f7 	.word	0xffffc2f7
    ae28:	00010c6f 	.word	0x00010c6f

0000ae2c <MPSL_IRQ_RTC0_Handler>:
    ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae30:	2400      	movs	r4, #0
    ae32:	f8df 9080 	ldr.w	r9, [pc, #128]	; aeb4 <MPSL_IRQ_RTC0_Handler+0x88>
    ae36:	4d20      	ldr	r5, [pc, #128]	; (aeb8 <MPSL_IRQ_RTC0_Handler+0x8c>)
    ae38:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    ae3c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    ae40:	ea4f 0604 	mov.w	r6, r4
    ae44:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    ae48:	fa07 f004 	lsl.w	r0, r7, r4
    ae4c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    ae50:	4202      	tst	r2, r0
    ae52:	d01a      	beq.n	ae8a <MPSL_IRQ_RTC0_Handler+0x5e>
    ae54:	4a18      	ldr	r2, [pc, #96]	; (aeb8 <MPSL_IRQ_RTC0_Handler+0x8c>)
    ae56:	5852      	ldr	r2, [r2, r1]
    ae58:	b1ba      	cbz	r2, ae8a <MPSL_IRQ_RTC0_Handler+0x5e>
    ae5a:	506e      	str	r6, [r5, r1]
    ae5c:	00a1      	lsls	r1, r4, #2
    ae5e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    ae62:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    ae66:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    ae6a:	f8d9 2000 	ldr.w	r2, [r9]
    ae6e:	1a89      	subs	r1, r1, r2
    ae70:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ae74:	2902      	cmp	r1, #2
    ae76:	d302      	bcc.n	ae7e <MPSL_IRQ_RTC0_Handler+0x52>
    ae78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ae7c:	d905      	bls.n	ae8a <MPSL_IRQ_RTC0_Handler+0x5e>
    ae7e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    ae82:	1d20      	adds	r0, r4, #4
    ae84:	b2c0      	uxtb	r0, r0
    ae86:	f7fe fd3f 	bl	9908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    ae8a:	1c60      	adds	r0, r4, #1
    ae8c:	b2c4      	uxtb	r4, r0
    ae8e:	2c03      	cmp	r4, #3
    ae90:	d3d8      	bcc.n	ae44 <MPSL_IRQ_RTC0_Handler+0x18>
    ae92:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    ae96:	b128      	cbz	r0, aea4 <MPSL_IRQ_RTC0_Handler+0x78>
    ae98:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    ae9c:	4807      	ldr	r0, [pc, #28]	; (aebc <MPSL_IRQ_RTC0_Handler+0x90>)
    ae9e:	6881      	ldr	r1, [r0, #8]
    aea0:	1c49      	adds	r1, r1, #1
    aea2:	6081      	str	r1, [r0, #8]
    aea4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    aea8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    aeac:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aeb4:	4000b504 	.word	0x4000b504
    aeb8:	4000b000 	.word	0x4000b000
    aebc:	20000028 	.word	0x20000028

0000aec0 <MPSL_IRQ_TIMER0_Handler>:
    aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aec4:	4d38      	ldr	r5, [pc, #224]	; (afa8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    aec6:	7828      	ldrb	r0, [r5, #0]
    aec8:	2804      	cmp	r0, #4
    aeca:	d068      	beq.n	af9e <MPSL_IRQ_TIMER0_Handler+0xde>
    aecc:	1ca8      	adds	r0, r5, #2
    aece:	2201      	movs	r2, #1
    aed0:	7801      	ldrb	r1, [r0, #0]
    aed2:	b159      	cbz	r1, aeec <MPSL_IRQ_TIMER0_Handler+0x2c>
    aed4:	2901      	cmp	r1, #1
    aed6:	bf08      	it	eq
    aed8:	706a      	strbeq	r2, [r5, #1]
    aeda:	d002      	beq.n	aee2 <MPSL_IRQ_TIMER0_Handler+0x22>
    aedc:	7869      	ldrb	r1, [r5, #1]
    aede:	2900      	cmp	r1, #0
    aee0:	d058      	beq.n	af94 <MPSL_IRQ_TIMER0_Handler+0xd4>
    aee2:	2102      	movs	r1, #2
    aee4:	7001      	strb	r1, [r0, #0]
    aee6:	7840      	ldrb	r0, [r0, #1]
    aee8:	f000 fb2e 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    aeec:	4c2f      	ldr	r4, [pc, #188]	; (afac <MPSL_IRQ_TIMER0_Handler+0xec>)
    aeee:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    aef2:	f04f 0800 	mov.w	r8, #0
    aef6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    aefa:	f44f 7780 	mov.w	r7, #256	; 0x100
    aefe:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    af02:	d00a      	beq.n	af1a <MPSL_IRQ_TIMER0_Handler+0x5a>
    af04:	482a      	ldr	r0, [pc, #168]	; (afb0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    af06:	6800      	ldr	r0, [r0, #0]
    af08:	b138      	cbz	r0, af1a <MPSL_IRQ_TIMER0_Handler+0x5a>
    af0a:	2003      	movs	r0, #3
    af0c:	f000 fb1c 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    af10:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    af14:	2003      	movs	r0, #3
    af16:	f7fe fcf7 	bl	9908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af1a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    af1e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    af22:	d00a      	beq.n	af3a <MPSL_IRQ_TIMER0_Handler+0x7a>
    af24:	4823      	ldr	r0, [pc, #140]	; (afb4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    af26:	6800      	ldr	r0, [r0, #0]
    af28:	b138      	cbz	r0, af3a <MPSL_IRQ_TIMER0_Handler+0x7a>
    af2a:	2002      	movs	r0, #2
    af2c:	f000 fb0c 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    af30:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    af34:	2002      	movs	r0, #2
    af36:	f7fe fce7 	bl	9908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af3a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    af3e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    af42:	d00a      	beq.n	af5a <MPSL_IRQ_TIMER0_Handler+0x9a>
    af44:	481c      	ldr	r0, [pc, #112]	; (afb8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    af46:	6800      	ldr	r0, [r0, #0]
    af48:	b138      	cbz	r0, af5a <MPSL_IRQ_TIMER0_Handler+0x9a>
    af4a:	2001      	movs	r0, #1
    af4c:	f000 fafc 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    af50:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    af54:	2001      	movs	r0, #1
    af56:	f7fe fcd7 	bl	9908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af5a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    af5e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    af62:	bf08      	it	eq
    af64:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    af68:	4814      	ldr	r0, [pc, #80]	; (afbc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    af6a:	6800      	ldr	r0, [r0, #0]
    af6c:	2800      	cmp	r0, #0
    af6e:	bf08      	it	eq
    af70:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    af74:	2000      	movs	r0, #0
    af76:	f000 fae7 	bl	b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    af7a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    af7e:	2004      	movs	r0, #4
    af80:	7028      	strb	r0, [r5, #0]
    af82:	f8c5 8004 	str.w	r8, [r5, #4]
    af86:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    af8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    af8e:	2000      	movs	r0, #0
    af90:	f7fe bcba 	b.w	9908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af94:	f240 5169 	movw	r1, #1385	; 0x569
    af98:	206c      	movs	r0, #108	; 0x6c
    af9a:	f000 ffad 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    afa2:	2007      	movs	r0, #7
    afa4:	f7fe bcb0 	b.w	9908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    afa8:	20000028 	.word	0x20000028
    afac:	40008000 	.word	0x40008000
    afb0:	4000814c 	.word	0x4000814c
    afb4:	40008148 	.word	0x40008148
    afb8:	40008144 	.word	0x40008144
    afbc:	40008140 	.word	0x40008140
    afc0:	2201      	movs	r2, #1
    afc2:	0211      	lsls	r1, r2, #8
    afc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    afc8:	2000      	movs	r0, #0
    afca:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    afce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    afd2:	f3bf 8f4f 	dsb	sy
    afd6:	f3bf 8f6f 	isb	sy
    afda:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    afde:	490e      	ldr	r1, [pc, #56]	; (b018 <MPSL_IRQ_TIMER0_Handler+0x158>)
    afe0:	f841 2f04 	str.w	r2, [r1, #4]!
    afe4:	1e43      	subs	r3, r0, #1
    afe6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    afea:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    afee:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    aff2:	4b0a      	ldr	r3, [pc, #40]	; (b01c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    aff4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    aff8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    affc:	1d1b      	adds	r3, r3, #4
    affe:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b002:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b006:	1d1b      	adds	r3, r3, #4
    b008:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b00c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b010:	60ca      	str	r2, [r1, #12]
    b012:	4903      	ldr	r1, [pc, #12]	; (b020 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b014:	7048      	strb	r0, [r1, #1]
    b016:	4770      	bx	lr
    b018:	40008000 	.word	0x40008000
    b01c:	40008004 	.word	0x40008004
    b020:	20000028 	.word	0x20000028

0000b024 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b024:	4801      	ldr	r0, [pc, #4]	; (b02c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b026:	6800      	ldr	r0, [r0, #0]
    b028:	4770      	bx	lr
    b02a:	0000      	.short	0x0000
    b02c:	4000b504 	.word	0x4000b504

0000b030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b030:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b034:	f8df 8130 	ldr.w	r8, [pc, #304]	; b168 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b038:	4604      	mov	r4, r0
    b03a:	f1a8 0702 	sub.w	r7, r8, #2
    b03e:	460e      	mov	r6, r1
    b040:	f898 c000 	ldrb.w	ip, [r8]
    b044:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b048:	f1bc 0f01 	cmp.w	ip, #1
    b04c:	d106      	bne.n	b05c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b04e:	ea81 0204 	eor.w	r2, r1, r4
    b052:	4070      	eors	r0, r6
    b054:	4310      	orrs	r0, r2
    b056:	bf08      	it	eq
    b058:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b05c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b060:	4a42      	ldr	r2, [pc, #264]	; (b16c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b062:	6010      	str	r0, [r2, #0]
    b064:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b068:	f1bc 0f00 	cmp.w	ip, #0
    b06c:	bf07      	ittee	eq
    b06e:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b072:	2200      	moveq	r2, #0
    b074:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b078:	2201      	movne	r2, #1
    b07a:	483d      	ldr	r0, [pc, #244]	; (b170 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b07c:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b080:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b084:	2500      	movs	r5, #0
    b086:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b08a:	2a02      	cmp	r2, #2
    b08c:	d207      	bcs.n	b09e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b08e:	bf00      	nop
    b090:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b094:	50c5      	str	r5, [r0, r3]
    b096:	1c52      	adds	r2, r2, #1
    b098:	b2d2      	uxtb	r2, r2
    b09a:	2a02      	cmp	r2, #2
    b09c:	d3f8      	bcc.n	b090 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b09e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b0a2:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b0a6:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b0aa:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b0ae:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b0b2:	4a30      	ldr	r2, [pc, #192]	; (b174 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b0b4:	f8d2 9000 	ldr.w	r9, [r2]
    b0b8:	eba3 0909 	sub.w	r9, r3, r9
    b0bc:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b0c0:	f04f 0901 	mov.w	r9, #1
    b0c4:	f1ba 0f02 	cmp.w	sl, #2
    b0c8:	d32e      	bcc.n	b128 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b0ca:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b0ce:	d82b      	bhi.n	b128 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b0d0:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b0d4:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b0d8:	f1bc 0f00 	cmp.w	ip, #0
    b0dc:	d005      	beq.n	b0ea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b0de:	6810      	ldr	r0, [r2, #0]
    b0e0:	1a08      	subs	r0, r1, r0
    b0e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b0e6:	2802      	cmp	r0, #2
    b0e8:	d3f9      	bcc.n	b0de <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b0ea:	f8c7 9004 	str.w	r9, [r7, #4]
    b0ee:	703d      	strb	r5, [r7, #0]
    b0f0:	f7ff ff66 	bl	afc0 <MPSL_IRQ_TIMER0_Handler+0x100>
    b0f4:	4820      	ldr	r0, [pc, #128]	; (b178 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b0f6:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b0fa:	f365 0101 	bfi	r1, r5, #0, #2
    b0fe:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b102:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b106:	2102      	movs	r1, #2
    b108:	f361 0201 	bfi	r2, r1, #0, #2
    b10c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b110:	2110      	movs	r1, #16
    b112:	fa91 f1a1 	rbit	r1, r1
    b116:	fab1 f181 	clz	r1, r1
    b11a:	2909      	cmp	r1, #9
    b11c:	d909      	bls.n	b132 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b11e:	f240 3155 	movw	r1, #853	; 0x355
    b122:	a016      	add	r0, pc, #88	; (adr r0, b17c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b124:	f000 febc 	bl	bea0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b128:	f240 31b2 	movw	r1, #946	; 0x3b2
    b12c:	206c      	movs	r0, #108	; 0x6c
    b12e:	f000 fee3 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b132:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b136:	f8c0 900c 	str.w	r9, [r0, #12]
    b13a:	6879      	ldr	r1, [r7, #4]
    b13c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b140:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b144:	f44f 7180 	mov.w	r1, #256	; 0x100
    b148:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b14c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b150:	490d      	ldr	r1, [pc, #52]	; (b188 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b152:	0480      	lsls	r0, r0, #18
    b154:	6008      	str	r0, [r1, #0]
    b156:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b15a:	2004      	movs	r0, #4
    b15c:	f888 0001 	strb.w	r0, [r8, #1]
    b160:	f888 9000 	strb.w	r9, [r8]
    b164:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b168:	2000002a 	.word	0x2000002a
    b16c:	4001f508 	.word	0x4001f508
    b170:	4000b000 	.word	0x4000b000
    b174:	4000b504 	.word	0x4000b504
    b178:	40008000 	.word	0x40008000
    b17c:	5f66726e 	.word	0x5f66726e
    b180:	656d6974 	.word	0x656d6974
    b184:	00682e72 	.word	0x00682e72
    b188:	4001f504 	.word	0x4001f504

0000b18c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b190:	4c31      	ldr	r4, [pc, #196]	; (b258 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b192:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b196:	ea82 0c00 	eor.w	ip, r2, r0
    b19a:	404b      	eors	r3, r1
    b19c:	ea5c 0303 	orrs.w	r3, ip, r3
    b1a0:	bf14      	ite	ne
    b1a2:	2301      	movne	r3, #1
    b1a4:	2300      	moveq	r3, #0
    b1a6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b25c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b1aa:	f89c 8000 	ldrb.w	r8, [ip]
    b1ae:	f1b8 0f02 	cmp.w	r8, #2
    b1b2:	d002      	beq.n	b1ba <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d03f      	beq.n	b238 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b1b8:	e003      	b.n	b1c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b1ba:	2b00      	cmp	r3, #0
    b1bc:	bf08      	it	eq
    b1be:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1c2:	7863      	ldrb	r3, [r4, #1]
    b1c4:	b3bb      	cbz	r3, b236 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b1c6:	4d26      	ldr	r5, [pc, #152]	; (b260 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b1c8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b1cc:	602b      	str	r3, [r5, #0]
    b1ce:	4e25      	ldr	r6, [pc, #148]	; (b264 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b1d0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b1d4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b1d8:	462f      	mov	r7, r5
    b1da:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b1de:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b1e2:	2500      	movs	r5, #0
    b1e4:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b1e8:	4d1f      	ldr	r5, [pc, #124]	; (b268 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b1ea:	f8d5 9000 	ldr.w	r9, [r5]
    b1ee:	eba3 0909 	sub.w	r9, r3, r9
    b1f2:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b1f6:	f1b9 0f02 	cmp.w	r9, #2
    b1fa:	d327      	bcc.n	b24c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b1fc:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b200:	d824      	bhi.n	b24c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b202:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b206:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b20a:	f1b8 0f00 	cmp.w	r8, #0
    b20e:	d005      	beq.n	b21c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b210:	682b      	ldr	r3, [r5, #0]
    b212:	1ad3      	subs	r3, r2, r3
    b214:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b218:	2b02      	cmp	r3, #2
    b21a:	d3f9      	bcc.n	b210 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b21c:	4d13      	ldr	r5, [pc, #76]	; (b26c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b21e:	2202      	movs	r2, #2
    b220:	0753      	lsls	r3, r2, #29
    b222:	602b      	str	r3, [r5, #0]
    b224:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b228:	2004      	movs	r0, #4
    b22a:	f88c 0001 	strb.w	r0, [ip, #1]
    b22e:	f88c 2000 	strb.w	r2, [ip]
    b232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b236:	e004      	b.n	b242 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b238:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b23c:	206c      	movs	r0, #108	; 0x6c
    b23e:	f000 fe5b 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b242:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b246:	206c      	movs	r0, #108	; 0x6c
    b248:	f000 fe56 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b24c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b250:	206c      	movs	r0, #108	; 0x6c
    b252:	f000 fe51 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b256:	0000      	.short	0x0000
    b258:	20000028 	.word	0x20000028
    b25c:	2000002a 	.word	0x2000002a
    b260:	4001f508 	.word	0x4001f508
    b264:	4000b000 	.word	0x4000b000
    b268:	4000b504 	.word	0x4000b504
    b26c:	4001f504 	.word	0x4001f504

0000b270 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b270:	4901      	ldr	r1, [pc, #4]	; (b278 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b272:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    b276:	4770      	bx	lr
    b278:	20000028 	.word	0x20000028

0000b27c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b280:	f8df c0f4 	ldr.w	ip, [pc, #244]	; b378 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    b284:	f89c 4000 	ldrb.w	r4, [ip]
    b288:	2c00      	cmp	r4, #0
    b28a:	bf07      	ittee	eq
    b28c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    b290:	2100      	moveq	r1, #0
    b292:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    b296:	2101      	movne	r1, #1
    b298:	4838      	ldr	r0, [pc, #224]	; (b37c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    b29a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b29e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b2a2:	2300      	movs	r3, #0
    b2a4:	2902      	cmp	r1, #2
    b2a6:	bf38      	it	cc
    b2a8:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    b2ac:	d207      	bcs.n	b2be <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    b2ae:	bf00      	nop
    b2b0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    b2b4:	5083      	str	r3, [r0, r2]
    b2b6:	1c49      	adds	r1, r1, #1
    b2b8:	b2c9      	uxtb	r1, r1
    b2ba:	2902      	cmp	r1, #2
    b2bc:	d3f8      	bcc.n	b2b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    b2be:	2c02      	cmp	r4, #2
    b2c0:	d004      	beq.n	b2cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    b2c2:	f240 31db 	movw	r1, #987	; 0x3db
    b2c6:	206c      	movs	r0, #108	; 0x6c
    b2c8:	f000 fe16 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2cc:	f3ef 8210 	mrs	r2, PRIMASK
    b2d0:	b672      	cpsid	i
    b2d2:	4c2b      	ldr	r4, [pc, #172]	; (b380 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    b2d4:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b2d8:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    b2dc:	b12d      	cbz	r5, b2ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    b2de:	68a1      	ldr	r1, [r4, #8]
    b2e0:	1c49      	adds	r1, r1, #1
    b2e2:	60a1      	str	r1, [r4, #8]
    b2e4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    b2e8:	e7f4      	b.n	b2d4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    b2ea:	68a0      	ldr	r0, [r4, #8]
    b2ec:	b902      	cbnz	r2, b2f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    b2ee:	b662      	cpsie	i
    b2f0:	0a02      	lsrs	r2, r0, #8
    b2f2:	0600      	lsls	r0, r0, #24
    b2f4:	1840      	adds	r0, r0, r1
    b2f6:	eb42 0103 	adc.w	r1, r2, r3
    b2fa:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    b2fe:	1cc0      	adds	r0, r0, #3
    b300:	f141 0100 	adc.w	r1, r1, #0
    b304:	4f1f      	ldr	r7, [pc, #124]	; (b384 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    b306:	2601      	movs	r6, #1
    b308:	4d1f      	ldr	r5, [pc, #124]	; (b388 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    b30a:	ea80 0902 	eor.w	r9, r0, r2
    b30e:	ea81 0808 	eor.w	r8, r1, r8
    b312:	ea59 0808 	orrs.w	r8, r9, r8
    b316:	d00e      	beq.n	b336 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b318:	f8d7 8000 	ldr.w	r8, [r7]
    b31c:	eba2 0808 	sub.w	r8, r2, r8
    b320:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    b324:	f1b8 0f04 	cmp.w	r8, #4
    b328:	d305      	bcc.n	b336 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b32a:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    b32e:	d802      	bhi.n	b336 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b330:	f7ff fe7e 	bl	b030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b334:	e01b      	b.n	b36e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b336:	6838      	ldr	r0, [r7, #0]
    b338:	1a10      	subs	r0, r2, r0
    b33a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b33e:	2802      	cmp	r0, #2
    b340:	d313      	bcc.n	b36a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b342:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b346:	d810      	bhi.n	b36a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b348:	4910      	ldr	r1, [pc, #64]	; (b38c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    b34a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b34e:	6008      	str	r0, [r1, #0]
    b350:	6066      	str	r6, [r4, #4]
    b352:	7023      	strb	r3, [r4, #0]
    b354:	606e      	str	r6, [r5, #4]
    b356:	60ee      	str	r6, [r5, #12]
    b358:	0040      	lsls	r0, r0, #1
    b35a:	1f09      	subs	r1, r1, #4
    b35c:	6008      	str	r0, [r1, #0]
    b35e:	2004      	movs	r0, #4
    b360:	f88c 0001 	strb.w	r0, [ip, #1]
    b364:	f88c 6000 	strb.w	r6, [ip]
    b368:	e001      	b.n	b36e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b36a:	6066      	str	r6, [r4, #4]
    b36c:	7023      	strb	r3, [r4, #0]
    b36e:	6860      	ldr	r0, [r4, #4]
    b370:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b378:	2000002a 	.word	0x2000002a
    b37c:	4000b000 	.word	0x4000b000
    b380:	20000028 	.word	0x20000028
    b384:	4000b504 	.word	0x4000b504
    b388:	40008000 	.word	0x40008000
    b38c:	4001f508 	.word	0x4001f508

0000b390 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    b390:	b410      	push	{r4}
    b392:	f3ef 8410 	mrs	r4, PRIMASK
    b396:	b672      	cpsid	i
    b398:	4a0c      	ldr	r2, [pc, #48]	; (b3cc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    b39a:	490d      	ldr	r1, [pc, #52]	; (b3d0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    b39c:	f04f 0c00 	mov.w	ip, #0
    b3a0:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    b3a4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    b3a8:	b12b      	cbz	r3, b3b6 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    b3aa:	6888      	ldr	r0, [r1, #8]
    b3ac:	1c40      	adds	r0, r0, #1
    b3ae:	6088      	str	r0, [r1, #8]
    b3b0:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    b3b4:	e7f4      	b.n	b3a0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    b3b6:	6889      	ldr	r1, [r1, #8]
    b3b8:	b904      	cbnz	r4, b3bc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    b3ba:	b662      	cpsie	i
    b3bc:	0a0a      	lsrs	r2, r1, #8
    b3be:	0609      	lsls	r1, r1, #24
    b3c0:	1808      	adds	r0, r1, r0
    b3c2:	bc10      	pop	{r4}
    b3c4:	eb42 010c 	adc.w	r1, r2, ip
    b3c8:	4770      	bx	lr
    b3ca:	0000      	.short	0x0000
    b3cc:	4000b000 	.word	0x4000b000
    b3d0:	20000028 	.word	0x20000028

0000b3d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3d8:	4a56      	ldr	r2, [pc, #344]	; (b534 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    b3da:	2501      	movs	r5, #1
    b3dc:	2400      	movs	r4, #0
    b3de:	f892 c000 	ldrb.w	ip, [r2]
    b3e2:	7852      	ldrb	r2, [r2, #1]
    b3e4:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b3e8:	2807      	cmp	r0, #7
    b3ea:	d27d      	bcs.n	b4e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b3ec:	e8df f000 	tbb	[pc, r0]
    b3f0:	04040404 	.word	0x04040404
    b3f4:	00606060 	.word	0x00606060
    b3f8:	4b4f      	ldr	r3, [pc, #316]	; (b538 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    b3fa:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    b3fe:	43ff      	mvns	r7, r7
    b400:	ea77 0708 	orns	r7, r7, r8
    b404:	bf04      	itt	eq
    b406:	785b      	ldrbeq	r3, [r3, #1]
    b408:	2b00      	cmpeq	r3, #0
    b40a:	d003      	beq.n	b414 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    b40c:	f1bc 0f02 	cmp.w	ip, #2
    b410:	d005      	beq.n	b41e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    b412:	e026      	b.n	b462 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    b414:	f44f 6186 	mov.w	r1, #1072	; 0x430
    b418:	206c      	movs	r0, #108	; 0x6c
    b41a:	f000 fd6d 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b41e:	1f13      	subs	r3, r2, #4
    b420:	b2db      	uxtb	r3, r3
    b422:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b426:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    b42a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b42e:	2300      	movs	r3, #0
    b430:	f1bc 0f01 	cmp.w	ip, #1
    b434:	d003      	beq.n	b43e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    b436:	f1bc 0f02 	cmp.w	ip, #2
    b43a:	d008      	beq.n	b44e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    b43c:	e00e      	b.n	b45c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b43e:	2a04      	cmp	r2, #4
    b440:	bf24      	itt	cs
    b442:	6837      	ldrcs	r7, [r6, #0]
    b444:	2f00      	cmpcs	r7, #0
    b446:	bf08      	it	eq
    b448:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    b44c:	e006      	b.n	b45c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b44e:	2a04      	cmp	r2, #4
    b450:	bf24      	itt	cs
    b452:	6837      	ldrcs	r7, [r6, #0]
    b454:	2f00      	cmpcs	r7, #0
    b456:	bf08      	it	eq
    b458:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    b45c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b460:	d1e5      	bne.n	b42e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    b462:	4b36      	ldr	r3, [pc, #216]	; (b53c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b464:	f100 0210 	add.w	r2, r0, #16
    b468:	fa05 f202 	lsl.w	r2, r5, r2
    b46c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b470:	f04f 0c40 	mov.w	ip, #64	; 0x40
    b474:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    b478:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b47c:	449c      	add	ip, r3
    b47e:	f8cc 5000 	str.w	r5, [ip]
    b482:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b486:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    b48a:	eba1 0c0c 	sub.w	ip, r1, ip
    b48e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b492:	f1bc 0f03 	cmp.w	ip, #3
    b496:	bf3e      	ittt	cc
    b498:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    b49c:	2000      	movcc	r0, #0
    b49e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4a2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b4a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    b4aa:	2001      	movs	r0, #1
    b4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4b0:	f1bc 0f00 	cmp.w	ip, #0
    b4b4:	d006      	beq.n	b4c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    b4b6:	4282      	cmp	r2, r0
    b4b8:	d104      	bne.n	b4c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    b4ba:	f44f 618a 	mov.w	r1, #1104	; 0x450
    b4be:	206c      	movs	r0, #108	; 0x6c
    b4c0:	f000 fd1a 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4c4:	1f00      	subs	r0, r0, #4
    b4c6:	b2c2      	uxtb	r2, r0
    b4c8:	2a03      	cmp	r2, #3
    b4ca:	d304      	bcc.n	b4d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    b4cc:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b4d0:	206c      	movs	r0, #108	; 0x6c
    b4d2:	f000 fd11 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4d6:	4b1a      	ldr	r3, [pc, #104]	; (b540 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    b4d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b4dc:	4090      	lsls	r0, r2
    b4de:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    b4e2:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    b4e6:	e000      	b.n	b4ea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b4e8:	e01f      	b.n	b52a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    b4ea:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    b4ee:	f843 400c 	str.w	r4, [r3, ip]
    b4f2:	f8df c050 	ldr.w	ip, [pc, #80]	; b544 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    b4f6:	f8dc c000 	ldr.w	ip, [ip]
    b4fa:	eba1 0c0c 	sub.w	ip, r1, ip
    b4fe:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b502:	f1bc 0f02 	cmp.w	ip, #2
    b506:	d30d      	bcc.n	b524 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    b508:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b50c:	d80a      	bhi.n	b524 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    b50e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    b512:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    b516:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    b51a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    b51e:	4628      	mov	r0, r5
    b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b524:	4620      	mov	r0, r4
    b526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b52a:	f240 4154 	movw	r1, #1108	; 0x454
    b52e:	206c      	movs	r0, #108	; 0x6c
    b530:	f000 fce2 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b534:	2000002a 	.word	0x2000002a
    b538:	20000028 	.word	0x20000028
    b53c:	40008000 	.word	0x40008000
    b540:	4000b000 	.word	0x4000b000
    b544:	4000b504 	.word	0x4000b504

0000b548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b54a:	2101      	movs	r1, #1
    b54c:	2600      	movs	r6, #0
    b54e:	f44f 77a0 	mov.w	r7, #320	; 0x140
    b552:	2807      	cmp	r0, #7
    b554:	d24a      	bcs.n	b5ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    b556:	e8df f000 	tbb	[pc, r0]
    b55a:	0404      	.short	0x0404
    b55c:	18180404 	.word	0x18180404
    b560:	0018      	.short	0x0018
    b562:	f100 0210 	add.w	r2, r0, #16
    b566:	fa01 f202 	lsl.w	r2, r1, r2
    b56a:	4923      	ldr	r1, [pc, #140]	; (b5f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    b56c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b570:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b574:	2200      	movs	r2, #0
    b576:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b57a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    b57e:	508e      	str	r6, [r1, r2]
    b580:	491e      	ldr	r1, [pc, #120]	; (b5fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    b582:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b586:	9000      	str	r0, [sp, #0]
    b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b58a:	4d1d      	ldr	r5, [pc, #116]	; (b600 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    b58c:	1f01      	subs	r1, r0, #4
    b58e:	b2cc      	uxtb	r4, r1
    b590:	7829      	ldrb	r1, [r5, #0]
    b592:	b181      	cbz	r1, b5b6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    b594:	786a      	ldrb	r2, [r5, #1]
    b596:	4282      	cmp	r2, r0
    b598:	d10d      	bne.n	b5b6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    b59a:	4a1a      	ldr	r2, [pc, #104]	; (b604 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    b59c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b5a0:	6010      	str	r0, [r2, #0]
    b5a2:	2901      	cmp	r1, #1
    b5a4:	bf08      	it	eq
    b5a6:	f7ff fd0b 	bleq	afc0 <MPSL_IRQ_TIMER0_Handler+0x100>
    b5aa:	702e      	strb	r6, [r5, #0]
    b5ac:	4a16      	ldr	r2, [pc, #88]	; (b608 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b5ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b5b2:	e9c2 0004 	strd	r0, r0, [r2, #16]
    b5b6:	4915      	ldr	r1, [pc, #84]	; (b60c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b5b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b5bc:	40a0      	lsls	r0, r4
    b5be:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    b5c2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    b5c6:	00a0      	lsls	r0, r4, #2
    b5c8:	4408      	add	r0, r1
    b5ca:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b5ce:	4a10      	ldr	r2, [pc, #64]	; (b610 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b5d0:	6812      	ldr	r2, [r2, #0]
    b5d2:	1a80      	subs	r0, r0, r2
    b5d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b5d8:	2802      	cmp	r0, #2
    b5da:	bf24      	itt	cs
    b5dc:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    b5e0:	500e      	strcs	r6, [r1, r0]
    b5e2:	480c      	ldr	r0, [pc, #48]	; (b614 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    b5e4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b5e8:	9000      	str	r0, [sp, #0]
    b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5ec:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b5f0:	206c      	movs	r0, #108	; 0x6c
    b5f2:	f000 fc81 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b5f6:	0000      	.short	0x0000
    b5f8:	40008000 	.word	0x40008000
    b5fc:	40008140 	.word	0x40008140
    b600:	2000002a 	.word	0x2000002a
    b604:	4001f508 	.word	0x4001f508
    b608:	20000028 	.word	0x20000028
    b60c:	4000b000 	.word	0x4000b000
    b610:	4000b504 	.word	0x4000b504
    b614:	4000b140 	.word	0x4000b140

0000b618 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    b618:	481a      	ldr	r0, [pc, #104]	; (b684 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    b61a:	7800      	ldrb	r0, [r0, #0]
    b61c:	2800      	cmp	r0, #0
    b61e:	bf07      	ittee	eq
    b620:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    b624:	2100      	moveq	r1, #0
    b626:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    b62a:	2101      	movne	r1, #1
    b62c:	4a16      	ldr	r2, [pc, #88]	; (b688 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    b62e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    b632:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    b636:	2000      	movs	r0, #0
    b638:	2902      	cmp	r1, #2
    b63a:	bf38      	it	cc
    b63c:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    b640:	d207      	bcs.n	b652 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    b642:	bf00      	nop
    b644:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    b648:	50d0      	str	r0, [r2, r3]
    b64a:	1c49      	adds	r1, r1, #1
    b64c:	b2c9      	uxtb	r1, r1
    b64e:	2902      	cmp	r1, #2
    b650:	d3f8      	bcc.n	b644 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    b652:	490e      	ldr	r1, [pc, #56]	; (b68c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    b654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b658:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b65c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b660:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b664:	1d0a      	adds	r2, r1, #4
    b666:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b66a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b66e:	1d12      	adds	r2, r2, #4
    b670:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b674:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b678:	1d12      	adds	r2, r2, #4
    b67a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b67e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    b682:	4770      	bx	lr
    b684:	2000002a 	.word	0x2000002a
    b688:	4000b000 	.word	0x4000b000
    b68c:	40008000 	.word	0x40008000

0000b690 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    b690:	b570      	push	{r4, r5, r6, lr}
    b692:	f3ef 8110 	mrs	r1, PRIMASK
    b696:	b672      	cpsid	i
    b698:	2400      	movs	r4, #0
    b69a:	4b0d      	ldr	r3, [pc, #52]	; (b6d0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    b69c:	4a0d      	ldr	r2, [pc, #52]	; (b6d4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    b69e:	bf00      	nop
    b6a0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    b6a4:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    b6a8:	f1bc 0f00 	cmp.w	ip, #0
    b6ac:	d005      	beq.n	b6ba <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    b6ae:	6890      	ldr	r0, [r2, #8]
    b6b0:	1c40      	adds	r0, r0, #1
    b6b2:	6090      	str	r0, [r2, #8]
    b6b4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    b6b8:	e7f2      	b.n	b6a0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    b6ba:	6895      	ldr	r5, [r2, #8]
    b6bc:	b901      	cbnz	r1, b6c0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    b6be:	b662      	cpsie	i
    b6c0:	f004 fd9d 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b6c4:	4a04      	ldr	r2, [pc, #16]	; (b6d8 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    b6c6:	4621      	mov	r1, r4
    b6c8:	fbe5 0102 	umlal	r0, r1, r5, r2
    b6cc:	bd70      	pop	{r4, r5, r6, pc}
    b6ce:	0000      	.short	0x0000
    b6d0:	4000b000 	.word	0x4000b000
    b6d4:	20000028 	.word	0x20000028
    b6d8:	1e848000 	.word	0x1e848000

0000b6dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    b6dc:	b510      	push	{r4, lr}
    b6de:	2807      	cmp	r0, #7
    b6e0:	d20d      	bcs.n	b6fe <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    b6e2:	e8df f000 	tbb	[pc, r0]
    b6e6:	0404      	.short	0x0404
    b6e8:	06060404 	.word	0x06060404
    b6ec:	0006      	.short	0x0006
    b6ee:	4906      	ldr	r1, [pc, #24]	; (b708 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    b6f0:	e002      	b.n	b6f8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    b6f2:	1f00      	subs	r0, r0, #4
    b6f4:	4905      	ldr	r1, [pc, #20]	; (b70c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    b6f6:	b2c0      	uxtb	r0, r0
    b6f8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    b6fc:	bd10      	pop	{r4, pc}
    b6fe:	f240 417b 	movw	r1, #1147	; 0x47b
    b702:	206c      	movs	r0, #108	; 0x6c
    b704:	f000 fbf8 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b708:	40008140 	.word	0x40008140
    b70c:	4000b140 	.word	0x4000b140

0000b710 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    b710:	b570      	push	{r4, r5, r6, lr}
    b712:	481b      	ldr	r0, [pc, #108]	; (b780 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    b714:	2400      	movs	r4, #0
    b716:	2104      	movs	r1, #4
    b718:	7004      	strb	r4, [r0, #0]
    b71a:	1e80      	subs	r0, r0, #2
    b71c:	7001      	strb	r1, [r0, #0]
    b71e:	1f49      	subs	r1, r1, #5
    b720:	e9c0 1104 	strd	r1, r1, [r0, #16]
    b724:	6084      	str	r4, [r0, #8]
    b726:	f7ff fc4b 	bl	afc0 <MPSL_IRQ_TIMER0_Handler+0x100>
    b72a:	2501      	movs	r5, #1
    b72c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    b730:	02eb      	lsls	r3, r5, #11
    b732:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    b736:	f3bf 8f4f 	dsb	sy
    b73a:	f3bf 8f6f 	isb	sy
    b73e:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    b742:	4a10      	ldr	r2, [pc, #64]	; (b784 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    b744:	6055      	str	r5, [r2, #4]
    b746:	6095      	str	r5, [r2, #8]
    b748:	480f      	ldr	r0, [pc, #60]	; (b788 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    b74a:	6801      	ldr	r1, [r0, #0]
    b74c:	2900      	cmp	r1, #0
    b74e:	d1fc      	bne.n	b74a <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    b750:	480e      	ldr	r0, [pc, #56]	; (b78c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    b752:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    b756:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    b75a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    b75e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    b762:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    b766:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    b76a:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    b76e:	6015      	str	r5, [r2, #0]
    b770:	f44f 7082 	mov.w	r0, #260	; 0x104
    b774:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    b778:	2002      	movs	r0, #2
    b77a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    b77e:	bd70      	pop	{r4, r5, r6, pc}
    b780:	2000002a 	.word	0x2000002a
    b784:	4000b000 	.word	0x4000b000
    b788:	4000b504 	.word	0x4000b504
    b78c:	00070002 	.word	0x00070002

0000b790 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    b790:	4808      	ldr	r0, [pc, #32]	; (b7b4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    b792:	f990 0000 	ldrsb.w	r0, [r0]
    b796:	2800      	cmp	r0, #0
    b798:	bfb8      	it	lt
    b79a:	4770      	bxlt	lr
    b79c:	f000 011f 	and.w	r1, r0, #31
    b7a0:	2201      	movs	r2, #1
    b7a2:	fa02 f101 	lsl.w	r1, r2, r1
    b7a6:	0940      	lsrs	r0, r0, #5
    b7a8:	0080      	lsls	r0, r0, #2
    b7aa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b7ae:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b7b2:	4770      	bx	lr
    b7b4:	20000384 	.word	0x20000384

0000b7b8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    b7b8:	4803      	ldr	r0, [pc, #12]	; (b7c8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    b7ba:	7800      	ldrb	r0, [r0, #0]
    b7bc:	2803      	cmp	r0, #3
    b7be:	bf0c      	ite	eq
    b7c0:	2001      	moveq	r0, #1
    b7c2:	2000      	movne	r0, #0
    b7c4:	4770      	bx	lr
    b7c6:	0000      	.short	0x0000
    b7c8:	2000035c 	.word	0x2000035c

0000b7cc <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    b7cc:	4801      	ldr	r0, [pc, #4]	; (b7d4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    b7ce:	8840      	ldrh	r0, [r0, #2]
    b7d0:	4770      	bx	lr
    b7d2:	0000      	.short	0x0000
    b7d4:	2000035c 	.word	0x2000035c

0000b7d8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    b7d8:	4803      	ldr	r0, [pc, #12]	; (b7e8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    b7da:	7800      	ldrb	r0, [r0, #0]
    b7dc:	2802      	cmp	r0, #2
    b7de:	bf16      	itet	ne
    b7e0:	2803      	cmpne	r0, #3
    b7e2:	2001      	moveq	r0, #1
    b7e4:	2000      	movne	r0, #0
    b7e6:	4770      	bx	lr
    b7e8:	2000035c 	.word	0x2000035c

0000b7ec <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    b7ec:	4802      	ldr	r0, [pc, #8]	; (b7f8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    b7ee:	2100      	movs	r1, #0
    b7f0:	7001      	strb	r1, [r0, #0]
    b7f2:	8041      	strh	r1, [r0, #2]
    b7f4:	4770      	bx	lr
    b7f6:	0000      	.short	0x0000
    b7f8:	2000035c 	.word	0x2000035c

0000b7fc <MPSL_IRQ_CLOCK_Handler>:
    b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b800:	4c16      	ldr	r4, [pc, #88]	; (b85c <MPSL_IRQ_CLOCK_Handler+0x60>)
    b802:	7a60      	ldrb	r0, [r4, #9]
    b804:	2800      	cmp	r0, #0
    b806:	d027      	beq.n	b858 <MPSL_IRQ_CLOCK_Handler+0x5c>
    b808:	f44f 7180 	mov.w	r1, #256	; 0x100
    b80c:	058d      	lsls	r5, r1, #22
    b80e:	4628      	mov	r0, r5
    b810:	f004 fd20 	bl	10254 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b814:	4680      	mov	r8, r0
    b816:	f44f 7182 	mov.w	r1, #260	; 0x104
    b81a:	4628      	mov	r0, r5
    b81c:	f004 fd1a 	bl	10254 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b820:	2600      	movs	r6, #0
    b822:	4607      	mov	r7, r0
    b824:	f1b8 0f00 	cmp.w	r8, #0
    b828:	d009      	beq.n	b83e <MPSL_IRQ_CLOCK_Handler+0x42>
    b82a:	2001      	movs	r0, #1
    b82c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b830:	7920      	ldrb	r0, [r4, #4]
    b832:	b120      	cbz	r0, b83e <MPSL_IRQ_CLOCK_Handler+0x42>
    b834:	7126      	strb	r6, [r4, #4]
    b836:	69e0      	ldr	r0, [r4, #28]
    b838:	b108      	cbz	r0, b83e <MPSL_IRQ_CLOCK_Handler+0x42>
    b83a:	4780      	blx	r0
    b83c:	61e6      	str	r6, [r4, #28]
    b83e:	b137      	cbz	r7, b84e <MPSL_IRQ_CLOCK_Handler+0x52>
    b840:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b844:	2002      	movs	r0, #2
    b846:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b84a:	f000 fa75 	bl	bd38 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    b84e:	4640      	mov	r0, r8
    b850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b854:	f000 b858 	b.w	b908 <MPSL_IRQ_CLOCK_Handler+0x10c>
    b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b85c:	20000314 	.word	0x20000314
    b860:	b510      	push	{r4, lr}
    b862:	f004 fda1 	bl	103a8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b866:	b930      	cbnz	r0, b876 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b868:	f004 fdbf 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b86c:	b918      	cbnz	r0, b876 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b86e:	f004 fdf2 	bl	10456 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b872:	2800      	cmp	r0, #0
    b874:	d002      	beq.n	b87c <MPSL_IRQ_CLOCK_Handler+0x80>
    b876:	4902      	ldr	r1, [pc, #8]	; (b880 <MPSL_IRQ_CLOCK_Handler+0x84>)
    b878:	2002      	movs	r0, #2
    b87a:	6008      	str	r0, [r1, #0]
    b87c:	bd10      	pop	{r4, pc}
    b87e:	0000      	.short	0x0000
    b880:	40000c34 	.word	0x40000c34
    b884:	b570      	push	{r4, r5, r6, lr}
    b886:	f000 f99b 	bl	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b88a:	f000 fabd 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b88e:	4c09      	ldr	r4, [pc, #36]	; (b8b4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    b890:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b894:	b130      	cbz	r0, b8a4 <MPSL_IRQ_CLOCK_Handler+0xa8>
    b896:	f7ff ffe3 	bl	b860 <MPSL_IRQ_CLOCK_Handler+0x64>
    b89a:	2001      	movs	r0, #1
    b89c:	6128      	str	r0, [r5, #16]
    b89e:	2004      	movs	r0, #4
    b8a0:	72a0      	strb	r0, [r4, #10]
    b8a2:	e004      	b.n	b8ae <MPSL_IRQ_CLOCK_Handler+0xb2>
    b8a4:	2003      	movs	r0, #3
    b8a6:	72a0      	strb	r0, [r4, #10]
    b8a8:	2001      	movs	r0, #1
    b8aa:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b8ae:	2000      	movs	r0, #0
    b8b0:	71e0      	strb	r0, [r4, #7]
    b8b2:	bd70      	pop	{r4, r5, r6, pc}
    b8b4:	20000314 	.word	0x20000314
    b8b8:	b570      	push	{r4, r5, r6, lr}
    b8ba:	4c12      	ldr	r4, [pc, #72]	; (b904 <MPSL_IRQ_CLOCK_Handler+0x108>)
    b8bc:	79a0      	ldrb	r0, [r4, #6]
    b8be:	b1e0      	cbz	r0, b8fa <MPSL_IRQ_CLOCK_Handler+0xfe>
    b8c0:	79e1      	ldrb	r1, [r4, #7]
    b8c2:	1e40      	subs	r0, r0, #1
    b8c4:	4281      	cmp	r1, r0
    b8c6:	da18      	bge.n	b8fa <MPSL_IRQ_CLOCK_Handler+0xfe>
    b8c8:	f000 fa9e 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b8cc:	4605      	mov	r5, r0
    b8ce:	f000 fb87 	bl	bfe0 <mpsl_temperature_get>
    b8d2:	79a1      	ldrb	r1, [r4, #6]
    b8d4:	2901      	cmp	r1, #1
    b8d6:	d902      	bls.n	b8de <MPSL_IRQ_CLOCK_Handler+0xe2>
    b8d8:	79e1      	ldrb	r1, [r4, #7]
    b8da:	1c49      	adds	r1, r1, #1
    b8dc:	71e1      	strb	r1, [r4, #7]
    b8de:	b10d      	cbz	r5, b8e4 <MPSL_IRQ_CLOCK_Handler+0xe8>
    b8e0:	6961      	ldr	r1, [r4, #20]
    b8e2:	e000      	b.n	b8e6 <MPSL_IRQ_CLOCK_Handler+0xea>
    b8e4:	6921      	ldr	r1, [r4, #16]
    b8e6:	1a41      	subs	r1, r0, r1
    b8e8:	2902      	cmp	r1, #2
    b8ea:	da02      	bge.n	b8f2 <MPSL_IRQ_CLOCK_Handler+0xf6>
    b8ec:	f111 0f02 	cmn.w	r1, #2
    b8f0:	dc07      	bgt.n	b902 <MPSL_IRQ_CLOCK_Handler+0x106>
    b8f2:	b10d      	cbz	r5, b8f8 <MPSL_IRQ_CLOCK_Handler+0xfc>
    b8f4:	6160      	str	r0, [r4, #20]
    b8f6:	e000      	b.n	b8fa <MPSL_IRQ_CLOCK_Handler+0xfe>
    b8f8:	6120      	str	r0, [r4, #16]
    b8fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b8fe:	f7ff bfc1 	b.w	b884 <MPSL_IRQ_CLOCK_Handler+0x88>
    b902:	bd70      	pop	{r4, r5, r6, pc}
    b904:	20000314 	.word	0x20000314
    b908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b90c:	4606      	mov	r6, r0
    b90e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b912:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b916:	4628      	mov	r0, r5
    b918:	f004 fc9c 	bl	10254 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b91c:	4680      	mov	r8, r0
    b91e:	f44f 7188 	mov.w	r1, #272	; 0x110
    b922:	4628      	mov	r0, r5
    b924:	f004 fc96 	bl	10254 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b928:	4c27      	ldr	r4, [pc, #156]	; (b9c8 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    b92a:	4682      	mov	sl, r0
    b92c:	7827      	ldrb	r7, [r4, #0]
    b92e:	f104 0008 	add.w	r0, r4, #8
    b932:	f004 fd03 	bl	1033c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    b936:	b110      	cbz	r0, b93e <MPSL_IRQ_CLOCK_Handler+0x142>
    b938:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    b93c:	e016      	b.n	b96c <MPSL_IRQ_CLOCK_Handler+0x170>
    b93e:	f04f 0901 	mov.w	r9, #1
    b942:	b146      	cbz	r6, b956 <MPSL_IRQ_CLOCK_Handler+0x15a>
    b944:	7aa0      	ldrb	r0, [r4, #10]
    b946:	2803      	cmp	r0, #3
    b948:	d105      	bne.n	b956 <MPSL_IRQ_CLOCK_Handler+0x15a>
    b94a:	2004      	movs	r0, #4
    b94c:	72a0      	strb	r0, [r4, #10]
    b94e:	f7ff ff87 	bl	b860 <MPSL_IRQ_CLOCK_Handler+0x64>
    b952:	f8c5 9010 	str.w	r9, [r5, #16]
    b956:	2600      	movs	r6, #0
    b958:	f1b8 0f00 	cmp.w	r8, #0
    b95c:	d018      	beq.n	b990 <MPSL_IRQ_CLOCK_Handler+0x194>
    b95e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    b962:	7aa0      	ldrb	r0, [r4, #10]
    b964:	2804      	cmp	r0, #4
    b966:	d004      	beq.n	b972 <MPSL_IRQ_CLOCK_Handler+0x176>
    b968:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    b96c:	206d      	movs	r0, #109	; 0x6d
    b96e:	f000 fac3 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b972:	f004 fd19 	bl	103a8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b976:	b928      	cbnz	r0, b984 <MPSL_IRQ_CLOCK_Handler+0x188>
    b978:	f004 fd37 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b97c:	b910      	cbnz	r0, b984 <MPSL_IRQ_CLOCK_Handler+0x188>
    b97e:	f004 fd6a 	bl	10456 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b982:	b108      	cbz	r0, b988 <MPSL_IRQ_CLOCK_Handler+0x18c>
    b984:	4811      	ldr	r0, [pc, #68]	; (b9cc <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    b986:	6006      	str	r6, [r0, #0]
    b988:	2002      	movs	r0, #2
    b98a:	72a0      	strb	r0, [r4, #10]
    b98c:	f000 f8fc 	bl	bb88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b990:	f1ba 0f00 	cmp.w	sl, #0
    b994:	d008      	beq.n	b9a8 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    b996:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    b99a:	7aa0      	ldrb	r0, [r4, #10]
    b99c:	2802      	cmp	r0, #2
    b99e:	d101      	bne.n	b9a4 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    b9a0:	f7ff ff8a 	bl	b8b8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    b9a4:	f8c5 9014 	str.w	r9, [r5, #20]
    b9a8:	b13f      	cbz	r7, b9ba <MPSL_IRQ_CLOCK_Handler+0x1be>
    b9aa:	7026      	strb	r6, [r4, #0]
    b9ac:	7aa0      	ldrb	r0, [r4, #10]
    b9ae:	2802      	cmp	r0, #2
    b9b0:	d101      	bne.n	b9b6 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    b9b2:	f7ff ff67 	bl	b884 <MPSL_IRQ_CLOCK_Handler+0x88>
    b9b6:	f000 f8e7 	bl	bb88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b9ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9be:	4802      	ldr	r0, [pc, #8]	; (b9c8 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    b9c0:	3008      	adds	r0, #8
    b9c2:	f004 bcd2 	b.w	1036a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    b9c6:	0000      	.short	0x0000
    b9c8:	20000314 	.word	0x20000314
    b9cc:	40000c34 	.word	0x40000c34
    b9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9d4:	4c49      	ldr	r4, [pc, #292]	; (bafc <MPSL_IRQ_CLOCK_Handler+0x300>)
    b9d6:	2700      	movs	r7, #0
    b9d8:	4606      	mov	r6, r0
    b9da:	61a7      	str	r7, [r4, #24]
    b9dc:	7842      	ldrb	r2, [r0, #1]
    b9de:	7881      	ldrb	r1, [r0, #2]
    b9e0:	7800      	ldrb	r0, [r0, #0]
    b9e2:	72e0      	strb	r0, [r4, #11]
    b9e4:	7162      	strb	r2, [r4, #5]
    b9e6:	71a1      	strb	r1, [r4, #6]
    b9e8:	71e7      	strb	r7, [r4, #7]
    b9ea:	f04f 0801 	mov.w	r8, #1
    b9ee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b9f2:	2805      	cmp	r0, #5
    b9f4:	d225      	bcs.n	ba42 <MPSL_IRQ_CLOCK_Handler+0x246>
    b9f6:	e8df f000 	tbb	[pc, r0]
    b9fa:	0310      	.short	0x0310
    b9fc:	00222006 	.word	0x00222006
    ba00:	f8c4 8018 	str.w	r8, [r4, #24]
    ba04:	e009      	b.n	ba1a <MPSL_IRQ_CLOCK_Handler+0x21e>
    ba06:	f000 f8db 	bl	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    ba0a:	2101      	movs	r1, #1
    ba0c:	4628      	mov	r0, r5
    ba0e:	f004 fc26 	bl	1025e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    ba12:	2800      	cmp	r0, #0
    ba14:	d0f9      	beq.n	ba0a <MPSL_IRQ_CLOCK_Handler+0x20e>
    ba16:	2002      	movs	r0, #2
    ba18:	61a0      	str	r0, [r4, #24]
    ba1a:	f004 fc4c 	bl	102b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    ba1e:	b1c0      	cbz	r0, ba52 <MPSL_IRQ_CLOCK_Handler+0x256>
    ba20:	f000 fa0c 	bl	be3c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    ba24:	7e21      	ldrb	r1, [r4, #24]
    ba26:	f001 0103 	and.w	r1, r1, #3
    ba2a:	4288      	cmp	r0, r1
    ba2c:	d111      	bne.n	ba52 <MPSL_IRQ_CLOCK_Handler+0x256>
    ba2e:	79b0      	ldrb	r0, [r6, #6]
    ba30:	b160      	cbz	r0, ba4c <MPSL_IRQ_CLOCK_Handler+0x250>
    ba32:	2002      	movs	r0, #2
    ba34:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    ba38:	e044      	b.n	bac4 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    ba3a:	4831      	ldr	r0, [pc, #196]	; (bb00 <MPSL_IRQ_CLOCK_Handler+0x304>)
    ba3c:	e7ec      	b.n	ba18 <MPSL_IRQ_CLOCK_Handler+0x21c>
    ba3e:	4831      	ldr	r0, [pc, #196]	; (bb04 <MPSL_IRQ_CLOCK_Handler+0x308>)
    ba40:	e7ea      	b.n	ba18 <MPSL_IRQ_CLOCK_Handler+0x21c>
    ba42:	f240 313d 	movw	r1, #829	; 0x33d
    ba46:	206d      	movs	r0, #109	; 0x6d
    ba48:	f000 fa56 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba4c:	f000 f9ca 	bl	bde4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ba50:	e038      	b.n	bac4 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    ba52:	f8c5 800c 	str.w	r8, [r5, #12]
    ba56:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    ba5a:	69a0      	ldr	r0, [r4, #24]
    ba5c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    ba60:	f004 fc8e 	bl	10380 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ba64:	b940      	cbnz	r0, ba78 <MPSL_IRQ_CLOCK_Handler+0x27c>
    ba66:	f004 fc95 	bl	10394 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ba6a:	b928      	cbnz	r0, ba78 <MPSL_IRQ_CLOCK_Handler+0x27c>
    ba6c:	f004 fca9 	bl	103c2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ba70:	b910      	cbnz	r0, ba78 <MPSL_IRQ_CLOCK_Handler+0x27c>
    ba72:	f004 fcba 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ba76:	b138      	cbz	r0, ba88 <MPSL_IRQ_CLOCK_Handler+0x28c>
    ba78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba7c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    ba80:	4921      	ldr	r1, [pc, #132]	; (bb08 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    ba82:	f3c0 3042 	ubfx	r0, r0, #13, #3
    ba86:	6008      	str	r0, [r1, #0]
    ba88:	f004 fc7a 	bl	10380 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ba8c:	b940      	cbnz	r0, baa0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    ba8e:	f004 fc81 	bl	10394 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ba92:	b928      	cbnz	r0, baa0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    ba94:	f004 fc95 	bl	103c2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ba98:	b910      	cbnz	r0, baa0 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    ba9a:	f004 fca6 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ba9e:	b118      	cbz	r0, baa8 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    baa0:	4919      	ldr	r1, [pc, #100]	; (bb08 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    baa2:	3110      	adds	r1, #16
    baa4:	f8c1 8000 	str.w	r8, [r1]
    baa8:	f8c5 8008 	str.w	r8, [r5, #8]
    baac:	2002      	movs	r0, #2
    baae:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bab2:	79b0      	ldrb	r0, [r6, #6]
    bab4:	b930      	cbnz	r0, bac4 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bab6:	f000 f829 	bl	bb0c <MPSL_IRQ_CLOCK_Handler+0x310>
    baba:	2002      	movs	r0, #2
    babc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bac0:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bac4:	79a0      	ldrb	r0, [r4, #6]
    bac6:	b170      	cbz	r0, bae6 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bac8:	7830      	ldrb	r0, [r6, #0]
    baca:	b960      	cbnz	r0, bae6 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bacc:	f000 f99c 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bad0:	4606      	mov	r6, r0
    bad2:	f000 fa85 	bl	bfe0 <mpsl_temperature_get>
    bad6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bada:	b116      	cbz	r6, bae2 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    badc:	e9c4 1004 	strd	r1, r0, [r4, #16]
    bae0:	e001      	b.n	bae6 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bae2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bae6:	2101      	movs	r1, #1
    bae8:	4628      	mov	r0, r5
    baea:	f004 fbb8 	bl	1025e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    baee:	b108      	cbz	r0, baf4 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    baf0:	f000 f984 	bl	bdfc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    baf4:	72a7      	strb	r7, [r4, #10]
    baf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bafa:	0000      	.short	0x0000
    bafc:	20000314 	.word	0x20000314
    bb00:	00020001 	.word	0x00020001
    bb04:	00030001 	.word	0x00030001
    bb08:	4000053c 	.word	0x4000053c
    bb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb10:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bb14:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bb18:	f010 0f02 	tst.w	r0, #2
    bb1c:	d011      	beq.n	bb42 <MPSL_IRQ_CLOCK_Handler+0x346>
    bb1e:	4c16      	ldr	r4, [pc, #88]	; (bb78 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bb20:	6820      	ldr	r0, [r4, #0]
    bb22:	43c0      	mvns	r0, r0
    bb24:	f340 1600 	sbfx	r6, r0, #4, #1
    bb28:	6820      	ldr	r0, [r4, #0]
    bb2a:	f040 0010 	orr.w	r0, r0, #16
    bb2e:	6020      	str	r0, [r4, #0]
    bb30:	f44f 7782 	mov.w	r7, #260	; 0x104
    bb34:	4639      	mov	r1, r7
    bb36:	4628      	mov	r0, r5
    bb38:	1c76      	adds	r6, r6, #1
    bb3a:	f004 fb8b 	bl	10254 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bb3e:	b128      	cbz	r0, bb4c <MPSL_IRQ_CLOCK_Handler+0x350>
    bb40:	e00a      	b.n	bb58 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bb42:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bb46:	206d      	movs	r0, #109	; 0x6d
    bb48:	f000 f9d6 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb4c:	f004 fc8f 	bl	1046e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bb50:	e002      	b.n	bb58 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bb52:	bf00      	nop
    bb54:	f004 fc89 	bl	1046a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bb58:	4639      	mov	r1, r7
    bb5a:	4628      	mov	r0, r5
    bb5c:	f004 fb7a 	bl	10254 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bb60:	2800      	cmp	r0, #0
    bb62:	d0f7      	beq.n	bb54 <MPSL_IRQ_CLOCK_Handler+0x358>
    bb64:	f000 f93e 	bl	bde4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bb68:	2e00      	cmp	r6, #0
    bb6a:	d103      	bne.n	bb74 <MPSL_IRQ_CLOCK_Handler+0x378>
    bb6c:	6820      	ldr	r0, [r4, #0]
    bb6e:	f020 0010 	bic.w	r0, r0, #16
    bb72:	6020      	str	r0, [r4, #0]
    bb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb78:	e000ed10 	.word	0xe000ed10

0000bb7c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    bb7c:	4801      	ldr	r0, [pc, #4]	; (bb84 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    bb7e:	89c0      	ldrh	r0, [r0, #14]
    bb80:	4770      	bx	lr
    bb82:	0000      	.short	0x0000
    bb84:	20000314 	.word	0x20000314

0000bb88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    bb88:	b510      	push	{r4, lr}
    bb8a:	f3ef 8410 	mrs	r4, PRIMASK
    bb8e:	b672      	cpsid	i
    bb90:	480a      	ldr	r0, [pc, #40]	; (bbbc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    bb92:	7841      	ldrb	r1, [r0, #1]
    bb94:	b129      	cbz	r1, bba2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    bb96:	7841      	ldrb	r1, [r0, #1]
    bb98:	1e49      	subs	r1, r1, #1
    bb9a:	7041      	strb	r1, [r0, #1]
    bb9c:	7841      	ldrb	r1, [r0, #1]
    bb9e:	b129      	cbz	r1, bbac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    bba0:	e008      	b.n	bbb4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bba2:	f240 1119 	movw	r1, #281	; 0x119
    bba6:	206d      	movs	r0, #109	; 0x6d
    bba8:	f000 f9a6 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bbac:	7880      	ldrb	r0, [r0, #2]
    bbae:	b908      	cbnz	r0, bbb4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bbb0:	f000 f938 	bl	be24 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    bbb4:	2c00      	cmp	r4, #0
    bbb6:	d100      	bne.n	bbba <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    bbb8:	b662      	cpsie	i
    bbba:	bd10      	pop	{r4, pc}
    bbbc:	20000314 	.word	0x20000314

0000bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    bbc0:	b510      	push	{r4, lr}
    bbc2:	f3ef 8410 	mrs	r4, PRIMASK
    bbc6:	b672      	cpsid	i
    bbc8:	4806      	ldr	r0, [pc, #24]	; (bbe4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    bbca:	7841      	ldrb	r1, [r0, #1]
    bbcc:	1c49      	adds	r1, r1, #1
    bbce:	7041      	strb	r1, [r0, #1]
    bbd0:	7840      	ldrb	r0, [r0, #1]
    bbd2:	2801      	cmp	r0, #1
    bbd4:	d101      	bne.n	bbda <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    bbd6:	f004 fb59 	bl	1028c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    bbda:	2c00      	cmp	r4, #0
    bbdc:	d100      	bne.n	bbe0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    bbde:	b662      	cpsie	i
    bbe0:	bd10      	pop	{r4, pc}
    bbe2:	0000      	.short	0x0000
    bbe4:	20000314 	.word	0x20000314

0000bbe8 <mpsl_clock_hfclk_release>:
    bbe8:	4805      	ldr	r0, [pc, #20]	; (bc00 <mpsl_clock_hfclk_release+0x18>)
    bbea:	b510      	push	{r4, lr}
    bbec:	78c1      	ldrb	r1, [r0, #3]
    bbee:	b121      	cbz	r1, bbfa <mpsl_clock_hfclk_release+0x12>
    bbf0:	2100      	movs	r1, #0
    bbf2:	7101      	strb	r1, [r0, #4]
    bbf4:	70c1      	strb	r1, [r0, #3]
    bbf6:	f7ff ffc7 	bl	bb88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bbfa:	2000      	movs	r0, #0
    bbfc:	bd10      	pop	{r4, pc}
    bbfe:	0000      	.short	0x0000
    bc00:	20000314 	.word	0x20000314

0000bc04 <mpsl_clock_hfclk_request>:
    bc04:	b570      	push	{r4, r5, r6, lr}
    bc06:	4c0c      	ldr	r4, [pc, #48]	; (bc38 <mpsl_clock_hfclk_request+0x34>)
    bc08:	78e1      	ldrb	r1, [r4, #3]
    bc0a:	b961      	cbnz	r1, bc26 <mpsl_clock_hfclk_request+0x22>
    bc0c:	2501      	movs	r5, #1
    bc0e:	70e5      	strb	r5, [r4, #3]
    bc10:	61e0      	str	r0, [r4, #28]
    bc12:	f7ff ffd5 	bl	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bc16:	f000 f8f7 	bl	be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bc1a:	b130      	cbz	r0, bc2a <mpsl_clock_hfclk_request+0x26>
    bc1c:	69e0      	ldr	r0, [r4, #28]
    bc1e:	b110      	cbz	r0, bc26 <mpsl_clock_hfclk_request+0x22>
    bc20:	4780      	blx	r0
    bc22:	2000      	movs	r0, #0
    bc24:	61e0      	str	r0, [r4, #28]
    bc26:	2000      	movs	r0, #0
    bc28:	bd70      	pop	{r4, r5, r6, pc}
    bc2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bc2e:	7125      	strb	r5, [r4, #4]
    bc30:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    bc34:	e7f7      	b.n	bc26 <mpsl_clock_hfclk_request+0x22>
    bc36:	0000      	.short	0x0000
    bc38:	20000314 	.word	0x20000314

0000bc3c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc40:	0005      	movs	r5, r0
    bc42:	f06f 0015 	mvn.w	r0, #21
    bc46:	d03f      	beq.n	bcc8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc48:	7829      	ldrb	r1, [r5, #0]
    bc4a:	2904      	cmp	r1, #4
    bc4c:	d83c      	bhi.n	bcc8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc4e:	2900      	cmp	r1, #0
    bc50:	7869      	ldrb	r1, [r5, #1]
    bc52:	d03b      	beq.n	bccc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    bc54:	2900      	cmp	r1, #0
    bc56:	d137      	bne.n	bcc8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc58:	78a9      	ldrb	r1, [r5, #2]
    bc5a:	2900      	cmp	r1, #0
    bc5c:	d134      	bne.n	bcc8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc5e:	2000      	movs	r0, #0
    bc60:	f004 fae7 	bl	10232 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    bc64:	2000      	movs	r0, #0
    bc66:	f004 fad7 	bl	10218 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    bc6a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    bc6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bc72:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    bc76:	2600      	movs	r6, #0
    bc78:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    bc7c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    bc80:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    bc84:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    bc88:	4c14      	ldr	r4, [pc, #80]	; (bcdc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    bc8a:	7066      	strb	r6, [r4, #1]
    bc8c:	88a8      	ldrh	r0, [r5, #4]
    bc8e:	81a0      	strh	r0, [r4, #12]
    bc90:	f004 faf3 	bl	1027a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    bc94:	2701      	movs	r7, #1
    bc96:	b108      	cbz	r0, bc9c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    bc98:	70e7      	strb	r7, [r4, #3]
    bc9a:	7067      	strb	r7, [r4, #1]
    bc9c:	2101      	movs	r1, #1
    bc9e:	4640      	mov	r0, r8
    bca0:	f004 fadd 	bl	1025e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bca4:	b108      	cbz	r0, bcaa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    bca6:	f000 f8a9 	bl	bdfc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bcaa:	f240 50f5 	movw	r0, #1525	; 0x5f5
    bcae:	81e0      	strh	r0, [r4, #14]
    bcb0:	4628      	mov	r0, r5
    bcb2:	f7ff fe8d 	bl	b9d0 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    bcb6:	7267      	strb	r7, [r4, #9]
    bcb8:	2000      	movs	r0, #0
    bcba:	f004 faad 	bl	10218 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    bcbe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bcc2:	4630      	mov	r0, r6
    bcc4:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    bcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bccc:	2900      	cmp	r1, #0
    bcce:	d0fb      	beq.n	bcc8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bcd0:	2920      	cmp	r1, #32
    bcd2:	d8f9      	bhi.n	bcc8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bcd4:	78a9      	ldrb	r1, [r5, #2]
    bcd6:	2921      	cmp	r1, #33	; 0x21
    bcd8:	d9c1      	bls.n	bc5e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    bcda:	e7f5      	b.n	bcc8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bcdc:	20000314 	.word	0x20000314

0000bce0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    bce0:	4801      	ldr	r0, [pc, #4]	; (bce8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    bce2:	8980      	ldrh	r0, [r0, #12]
    bce4:	4770      	bx	lr
    bce6:	0000      	.short	0x0000
    bce8:	20000314 	.word	0x20000314

0000bcec <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    bcec:	b510      	push	{r4, lr}
    bcee:	480d      	ldr	r0, [pc, #52]	; (bd24 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bcf0:	f004 fb24 	bl	1033c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bcf4:	490b      	ldr	r1, [pc, #44]	; (bd24 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bcf6:	3908      	subs	r1, #8
    bcf8:	b148      	cbz	r0, bd0e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    bcfa:	2001      	movs	r0, #1
    bcfc:	7008      	strb	r0, [r1, #0]
    bcfe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd02:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bd06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd0a:	f7ff bf59 	b.w	bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bd0e:	7a88      	ldrb	r0, [r1, #10]
    bd10:	2802      	cmp	r0, #2
    bd12:	d101      	bne.n	bd18 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    bd14:	f7ff fdb6 	bl	b884 <MPSL_IRQ_CLOCK_Handler+0x88>
    bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd1c:	4801      	ldr	r0, [pc, #4]	; (bd24 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bd1e:	f004 bb24 	b.w	1036a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bd22:	0000      	.short	0x0000
    bd24:	2000031c 	.word	0x2000031c

0000bd28 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    bd28:	4802      	ldr	r0, [pc, #8]	; (bd34 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    bd2a:	7a80      	ldrb	r0, [r0, #10]
    bd2c:	2800      	cmp	r0, #0
    bd2e:	d000      	beq.n	bd32 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    bd30:	2001      	movs	r0, #1
    bd32:	4770      	bx	lr
    bd34:	20000314 	.word	0x20000314

0000bd38 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd3a:	4d1f      	ldr	r5, [pc, #124]	; (bdb8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    bd3c:	7ae8      	ldrb	r0, [r5, #11]
    bd3e:	2800      	cmp	r0, #0
    bd40:	d10f      	bne.n	bd62 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bd42:	7e28      	ldrb	r0, [r5, #24]
    bd44:	f000 0003 	and.w	r0, r0, #3
    bd48:	f004 faa5 	bl	10296 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    bd4c:	2800      	cmp	r0, #0
    bd4e:	d008      	beq.n	bd62 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bd50:	f3ef 8110 	mrs	r1, PRIMASK
    bd54:	b672      	cpsid	i
    bd56:	f7ff ffe7 	bl	bd28 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    bd5a:	b118      	cbz	r0, bd64 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    bd5c:	2900      	cmp	r1, #0
    bd5e:	d100      	bne.n	bd62 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bd60:	b662      	cpsie	i
    bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd64:	2601      	movs	r6, #1
    bd66:	72ae      	strb	r6, [r5, #10]
    bd68:	b901      	cbnz	r1, bd6c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    bd6a:	b662      	cpsie	i
    bd6c:	2018      	movs	r0, #24
    bd6e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    bd72:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bd76:	61a6      	str	r6, [r4, #24]
    bd78:	f44f 7020 	mov.w	r0, #640	; 0x280
    bd7c:	f8ad 0000 	strh.w	r0, [sp]
    bd80:	f8bd 0000 	ldrh.w	r0, [sp]
    bd84:	1e41      	subs	r1, r0, #1
    bd86:	f8ad 1000 	strh.w	r1, [sp]
    bd8a:	d2f9      	bcs.n	bd80 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    bd8c:	2700      	movs	r7, #0
    bd8e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    bd92:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    bd96:	4808      	ldr	r0, [pc, #32]	; (bdb8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    bd98:	3008      	adds	r0, #8
    bd9a:	f004 fae2 	bl	10362 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    bd9e:	702f      	strb	r7, [r5, #0]
    bda0:	f7ff fd70 	bl	b884 <MPSL_IRQ_CLOCK_Handler+0x88>
    bda4:	6166      	str	r6, [r4, #20]
    bda6:	7968      	ldrb	r0, [r5, #5]
    bda8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bdac:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bdb0:	2018      	movs	r0, #24
    bdb2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdb8:	20000314 	.word	0x20000314

0000bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bdbc:	4602      	mov	r2, r0
    bdbe:	b510      	push	{r4, lr}
    bdc0:	2000      	movs	r0, #0
    bdc2:	2900      	cmp	r1, #0
    bdc4:	d00a      	beq.n	bddc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    bdc6:	2a00      	cmp	r2, #0
    bdc8:	d008      	beq.n	bddc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    bdca:	fba2 0101 	umull	r0, r1, r2, r1
    bdce:	1e40      	subs	r0, r0, #1
    bdd0:	4a03      	ldr	r2, [pc, #12]	; (bde0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    bdd2:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    bdd6:	f004 fb4c 	bl	10472 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    bdda:	1c40      	adds	r0, r0, #1
    bddc:	bd10      	pop	{r4, pc}
    bdde:	0000      	.short	0x0000
    bde0:	000f4240 	.word	0x000f4240

0000bde4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    bde4:	b510      	push	{r4, lr}
    bde6:	4c04      	ldr	r4, [pc, #16]	; (bdf8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    bde8:	7e20      	ldrb	r0, [r4, #24]
    bdea:	f000 0003 	and.w	r0, r0, #3
    bdee:	f004 fa52 	bl	10296 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    bdf2:	2800      	cmp	r0, #0
    bdf4:	d0f8      	beq.n	bde8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    bdf6:	bd10      	pop	{r4, pc}
    bdf8:	20000314 	.word	0x20000314

0000bdfc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    bdfc:	4901      	ldr	r1, [pc, #4]	; (be04 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    bdfe:	2001      	movs	r0, #1
    be00:	7008      	strb	r0, [r1, #0]
    be02:	4770      	bx	lr
    be04:	20000385 	.word	0x20000385

0000be08 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    be08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    be0c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    be10:	b918      	cbnz	r0, be1a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    be12:	4803      	ldr	r0, [pc, #12]	; (be20 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    be14:	7800      	ldrb	r0, [r0, #0]
    be16:	2800      	cmp	r0, #0
    be18:	d000      	beq.n	be1c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    be1a:	2001      	movs	r0, #1
    be1c:	4770      	bx	lr
    be1e:	0000      	.short	0x0000
    be20:	20000385 	.word	0x20000385

0000be24 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    be24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    be28:	2101      	movs	r1, #1
    be2a:	6041      	str	r1, [r0, #4]
    be2c:	2100      	movs	r1, #0
    be2e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    be32:	4801      	ldr	r0, [pc, #4]	; (be38 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    be34:	7001      	strb	r1, [r0, #0]
    be36:	4770      	bx	lr
    be38:	20000385 	.word	0x20000385

0000be3c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    be3c:	4802      	ldr	r0, [pc, #8]	; (be48 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    be3e:	6800      	ldr	r0, [r0, #0]
    be40:	f000 0003 	and.w	r0, r0, #3
    be44:	4770      	bx	lr
    be46:	0000      	.short	0x0000
    be48:	4000041c 	.word	0x4000041c
    be4c:	b510      	push	{r4, lr}
    be4e:	b131      	cbz	r1, be5e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    be50:	2901      	cmp	r1, #1
    be52:	d007      	beq.n	be64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    be54:	f240 3102 	movw	r1, #770	; 0x302
    be58:	a005      	add	r0, pc, #20	; (adr r0, be70 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    be5a:	f000 f821 	bl	bea0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    be5e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    be62:	e001      	b.n	be68 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    be64:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    be68:	f000 0001 	and.w	r0, r0, #1
    be6c:	bd10      	pop	{r4, pc}
    be6e:	0000      	.short	0x0000
    be70:	5f66726e 	.word	0x5f66726e
    be74:	636f6c63 	.word	0x636f6c63
    be78:	00682e6b 	.word	0x00682e6b
    be7c:	f3bf 8f4f 	dsb	sy
    be80:	4805      	ldr	r0, [pc, #20]	; (be98 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    be82:	6801      	ldr	r1, [r0, #0]
    be84:	4a05      	ldr	r2, [pc, #20]	; (be9c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    be86:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    be8a:	4311      	orrs	r1, r2
    be8c:	6001      	str	r1, [r0, #0]
    be8e:	f3bf 8f4f 	dsb	sy
    be92:	bf00      	nop
    be94:	e7fd      	b.n	be92 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    be96:	0000      	.short	0x0000
    be98:	e000ed0c 	.word	0xe000ed0c
    be9c:	05fa0004 	.word	0x05fa0004

0000bea0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    bea0:	b672      	cpsid	i
    bea2:	4a03      	ldr	r2, [pc, #12]	; (beb0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    bea4:	6852      	ldr	r2, [r2, #4]
    bea6:	b102      	cbz	r2, beaa <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    bea8:	4790      	blx	r2
    beaa:	f7ff ffe7 	bl	be7c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    beae:	0000      	.short	0x0000
    beb0:	20000334 	.word	0x20000334
    beb4:	4806      	ldr	r0, [pc, #24]	; (bed0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    beb6:	b510      	push	{r4, lr}
    beb8:	2100      	movs	r1, #0
    beba:	6001      	str	r1, [r0, #0]
    bebc:	2101      	movs	r1, #1
    bebe:	6001      	str	r1, [r0, #0]
    bec0:	4608      	mov	r0, r1
    bec2:	f004 fa0f 	bl	102e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    bec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beca:	2001      	movs	r0, #1
    becc:	f004 b9fd 	b.w	102ca <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    bed0:	40001ffc 	.word	0x40001ffc
    bed4:	4807      	ldr	r0, [pc, #28]	; (bef4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    bed6:	b510      	push	{r4, lr}
    bed8:	2101      	movs	r1, #1
    beda:	6041      	str	r1, [r0, #4]
    bedc:	1e89      	subs	r1, r1, #2
    bede:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bee2:	200c      	movs	r0, #12
    bee4:	f004 f9fe 	bl	102e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    bee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beec:	200c      	movs	r0, #12
    beee:	f004 b9ec 	b.w	102ca <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    bef2:	0000      	.short	0x0000
    bef4:	4000c000 	.word	0x4000c000

0000bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    bef8:	b50e      	push	{r1, r2, r3, lr}
    befa:	b672      	cpsid	i
    befc:	4a0f      	ldr	r2, [pc, #60]	; (bf3c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    befe:	6855      	ldr	r5, [r2, #4]
    bf00:	b1d5      	cbz	r5, bf38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    bf02:	2200      	movs	r2, #0
    bf04:	4603      	mov	r3, r0
    bf06:	466e      	mov	r6, sp
    bf08:	240a      	movs	r4, #10
    bf0a:	e003      	b.n	bf14 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    bf0c:	fbb0 f0f4 	udiv	r0, r0, r4
    bf10:	1c52      	adds	r2, r2, #1
    bf12:	b2d2      	uxtb	r2, r2
    bf14:	2800      	cmp	r0, #0
    bf16:	d1f9      	bne.n	bf0c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    bf18:	54b0      	strb	r0, [r6, r2]
    bf1a:	e009      	b.n	bf30 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    bf1c:	fbb3 f0f4 	udiv	r0, r3, r4
    bf20:	fb04 3010 	mls	r0, r4, r0, r3
    bf24:	fbb3 f3f4 	udiv	r3, r3, r4
    bf28:	1e52      	subs	r2, r2, #1
    bf2a:	b2d2      	uxtb	r2, r2
    bf2c:	3030      	adds	r0, #48	; 0x30
    bf2e:	54b0      	strb	r0, [r6, r2]
    bf30:	2a00      	cmp	r2, #0
    bf32:	d1f3      	bne.n	bf1c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    bf34:	4630      	mov	r0, r6
    bf36:	47a8      	blx	r5
    bf38:	f7ff ffa0 	bl	be7c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    bf3c:	20000334 	.word	0x20000334

0000bf40 <mpsl_init>:
    bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf44:	4c18      	ldr	r4, [pc, #96]	; (bfa8 <mpsl_init+0x68>)
    bf46:	4606      	mov	r6, r0
    bf48:	4617      	mov	r7, r2
    bf4a:	7860      	ldrb	r0, [r4, #1]
    bf4c:	460d      	mov	r5, r1
    bf4e:	b118      	cbz	r0, bf58 <mpsl_init+0x18>
    bf50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf58:	f7fc fb62 	bl	8620 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    bf5c:	b906      	cbnz	r6, bf60 <mpsl_init+0x20>
    bf5e:	4e13      	ldr	r6, [pc, #76]	; (bfac <mpsl_init+0x6c>)
    bf60:	6067      	str	r7, [r4, #4]
    bf62:	7025      	strb	r5, [r4, #0]
    bf64:	f7ff ffa6 	bl	beb4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    bf68:	f7ff ffb4 	bl	bed4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    bf6c:	4630      	mov	r0, r6
    bf6e:	f7ff fe65 	bl	bc3c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    bf72:	0006      	movs	r6, r0
    bf74:	d1ee      	bne.n	bf54 <mpsl_init+0x14>
    bf76:	f7fe fe29 	bl	abcc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    bf7a:	f7ff fedd 	bl	bd38 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bf7e:	f004 f918 	bl	101b2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    bf82:	4628      	mov	r0, r5
    bf84:	f004 f9a1 	bl	102ca <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    bf88:	2001      	movs	r0, #1
    bf8a:	2d00      	cmp	r5, #0
    bf8c:	db09      	blt.n	bfa2 <mpsl_init+0x62>
    bf8e:	f005 011f 	and.w	r1, r5, #31
    bf92:	fa00 f101 	lsl.w	r1, r0, r1
    bf96:	096a      	lsrs	r2, r5, #5
    bf98:	0092      	lsls	r2, r2, #2
    bf9a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    bf9e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    bfa2:	7060      	strb	r0, [r4, #1]
    bfa4:	4630      	mov	r0, r6
    bfa6:	e7d5      	b.n	bf54 <mpsl_init+0x14>
    bfa8:	20000334 	.word	0x20000334
    bfac:	00010306 	.word	0x00010306

0000bfb0 <mpsl_is_initialized>:
    bfb0:	4801      	ldr	r0, [pc, #4]	; (bfb8 <mpsl_is_initialized+0x8>)
    bfb2:	7840      	ldrb	r0, [r0, #1]
    bfb4:	4770      	bx	lr
    bfb6:	0000      	.short	0x0000
    bfb8:	20000334 	.word	0x20000334

0000bfbc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    bfbc:	4807      	ldr	r0, [pc, #28]	; (bfdc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    bfbe:	f990 0000 	ldrsb.w	r0, [r0]
    bfc2:	2800      	cmp	r0, #0
    bfc4:	db09      	blt.n	bfda <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    bfc6:	f000 021f 	and.w	r2, r0, #31
    bfca:	2101      	movs	r1, #1
    bfcc:	4091      	lsls	r1, r2
    bfce:	0940      	lsrs	r0, r0, #5
    bfd0:	0080      	lsls	r0, r0, #2
    bfd2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bfd6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bfda:	4770      	bx	lr
    bfdc:	20000334 	.word	0x20000334

0000bfe0 <mpsl_temperature_get>:
    bfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfe4:	2501      	movs	r5, #1
    bfe6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bfea:	0329      	lsls	r1, r5, #12
    bfec:	f04f 0800 	mov.w	r8, #0
    bff0:	4640      	mov	r0, r8
    bff2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    bff6:	f3bf 8f4f 	dsb	sy
    bffa:	f3bf 8f6f 	isb	sy
    bffe:	4c16      	ldr	r4, [pc, #88]	; (c058 <mpsl_temperature_get+0x78>)
    c000:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c004:	200c      	movs	r0, #12
    c006:	f004 f98c 	bl	10322 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c00a:	4e14      	ldr	r6, [pc, #80]	; (c05c <mpsl_temperature_get+0x7c>)
    c00c:	6830      	ldr	r0, [r6, #0]
    c00e:	43c0      	mvns	r0, r0
    c010:	f340 1700 	sbfx	r7, r0, #4, #1
    c014:	6830      	ldr	r0, [r6, #0]
    c016:	f040 0010 	orr.w	r0, r0, #16
    c01a:	6030      	str	r0, [r6, #0]
    c01c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c020:	6025      	str	r5, [r4, #0]
    c022:	1c7f      	adds	r7, r7, #1
    c024:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c028:	b108      	cbz	r0, c02e <mpsl_temperature_get+0x4e>
    c02a:	b11f      	cbz	r7, c034 <mpsl_temperature_get+0x54>
    c02c:	e006      	b.n	c03c <mpsl_temperature_get+0x5c>
    c02e:	f004 fa1c 	bl	1046a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c032:	e7f7      	b.n	c024 <mpsl_temperature_get+0x44>
    c034:	6830      	ldr	r0, [r6, #0]
    c036:	f020 0010 	bic.w	r0, r0, #16
    c03a:	6030      	str	r0, [r6, #0]
    c03c:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c040:	6065      	str	r5, [r4, #4]
    c042:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c046:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c04a:	200c      	movs	r0, #12
    c04c:	f004 f969 	bl	10322 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c050:	4630      	mov	r0, r6
    c052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c056:	0000      	.short	0x0000
    c058:	4000c000 	.word	0x4000c000
    c05c:	e000ed10 	.word	0xe000ed10

0000c060 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c060:	b510      	push	{r4, lr}
    c062:	4602      	mov	r2, r0
    c064:	2005      	movs	r0, #5
    c066:	490c      	ldr	r1, [pc, #48]	; (c098 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c068:	e004      	b.n	c074 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c06a:	bf00      	nop
    c06c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c070:	791b      	ldrb	r3, [r3, #4]
    c072:	b133      	cbz	r3, c082 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c074:	1e40      	subs	r0, r0, #1
    c076:	b2c0      	uxtb	r0, r0
    c078:	d2f8      	bcs.n	c06c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c07a:	2148      	movs	r1, #72	; 0x48
    c07c:	2069      	movs	r0, #105	; 0x69
    c07e:	f7ff ff3b 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c082:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c086:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c08a:	2200      	movs	r2, #0
    c08c:	714a      	strb	r2, [r1, #5]
    c08e:	718a      	strb	r2, [r1, #6]
    c090:	2201      	movs	r2, #1
    c092:	710a      	strb	r2, [r1, #4]
    c094:	bd10      	pop	{r4, pc}
    c096:	0000      	.short	0x0000
    c098:	200014b8 	.word	0x200014b8

0000c09c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c09c:	b510      	push	{r4, lr}
    c09e:	2805      	cmp	r0, #5
    c0a0:	d301      	bcc.n	c0a6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c0a2:	2158      	movs	r1, #88	; 0x58
    c0a4:	e006      	b.n	c0b4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c0a6:	490a      	ldr	r1, [pc, #40]	; (c0d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c0a8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c0ac:	7901      	ldrb	r1, [r0, #4]
    c0ae:	2901      	cmp	r1, #1
    c0b0:	d003      	beq.n	c0ba <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c0b2:	2159      	movs	r1, #89	; 0x59
    c0b4:	2069      	movs	r0, #105	; 0x69
    c0b6:	f7ff ff1f 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0ba:	7941      	ldrb	r1, [r0, #5]
    c0bc:	7982      	ldrb	r2, [r0, #6]
    c0be:	1c49      	adds	r1, r1, #1
    c0c0:	b2c9      	uxtb	r1, r1
    c0c2:	428a      	cmp	r2, r1
    c0c4:	d000      	beq.n	c0c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c0c6:	7141      	strb	r1, [r0, #5]
    c0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0cc:	f7ff bf76 	b.w	bfbc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c0d0:	200014b8 	.word	0x200014b8

0000c0d4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c0d4:	b510      	push	{r4, lr}
    c0d6:	2805      	cmp	r0, #5
    c0d8:	d303      	bcc.n	c0e2 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c0da:	214f      	movs	r1, #79	; 0x4f
    c0dc:	2069      	movs	r0, #105	; 0x69
    c0de:	f7ff ff0b 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0e2:	4a03      	ldr	r2, [pc, #12]	; (c0f0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c0e4:	2100      	movs	r1, #0
    c0e6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c0ea:	7101      	strb	r1, [r0, #4]
    c0ec:	bd10      	pop	{r4, pc}
    c0ee:	0000      	.short	0x0000
    c0f0:	200014b8 	.word	0x200014b8

0000c0f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c0f4:	b570      	push	{r4, r5, r6, lr}
    c0f6:	2505      	movs	r5, #5
    c0f8:	4e0e      	ldr	r6, [pc, #56]	; (c134 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c0fa:	4c0f      	ldr	r4, [pc, #60]	; (c138 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c0fc:	e016      	b.n	c12c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c0fe:	7821      	ldrb	r1, [r4, #0]
    c100:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c104:	7902      	ldrb	r2, [r0, #4]
    c106:	2a01      	cmp	r2, #1
    c108:	d108      	bne.n	c11c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c10a:	7942      	ldrb	r2, [r0, #5]
    c10c:	7983      	ldrb	r3, [r0, #6]
    c10e:	429a      	cmp	r2, r3
    c110:	d004      	beq.n	c11c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c112:	7942      	ldrb	r2, [r0, #5]
    c114:	7182      	strb	r2, [r0, #6]
    c116:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c11a:	4780      	blx	r0
    c11c:	7820      	ldrb	r0, [r4, #0]
    c11e:	1c40      	adds	r0, r0, #1
    c120:	b2c0      	uxtb	r0, r0
    c122:	7020      	strb	r0, [r4, #0]
    c124:	2805      	cmp	r0, #5
    c126:	d301      	bcc.n	c12c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c128:	2000      	movs	r0, #0
    c12a:	7020      	strb	r0, [r4, #0]
    c12c:	1e6d      	subs	r5, r5, #1
    c12e:	b2ed      	uxtb	r5, r5
    c130:	d2e5      	bcs.n	c0fe <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c132:	bd70      	pop	{r4, r5, r6, pc}
    c134:	200014b8 	.word	0x200014b8
    c138:	20000386 	.word	0x20000386

0000c13c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c13c:	b500      	push	{lr}
    c13e:	f004 f91f 	bl	10380 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c142:	b940      	cbnz	r0, c156 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c144:	f004 f926 	bl	10394 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c148:	b928      	cbnz	r0, c156 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c14a:	f004 f93a 	bl	103c2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c14e:	b910      	cbnz	r0, c156 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c150:	f004 f94b 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c154:	b108      	cbz	r0, c15a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c156:	4802      	ldr	r0, [pc, #8]	; (c160 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c158:	bd00      	pop	{pc}
    c15a:	4802      	ldr	r0, [pc, #8]	; (c164 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c15c:	bd00      	pop	{pc}
    c15e:	0000      	.short	0x0000
    c160:	4000050c 	.word	0x4000050c
    c164:	4001e700 	.word	0x4001e700
    c168:	b510      	push	{r4, lr}
    c16a:	f004 f93e 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c16e:	b330      	cbz	r0, c1be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c170:	f3ef 8010 	mrs	r0, PRIMASK
    c174:	b1c8      	cbz	r0, c1aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c176:	2100      	movs	r1, #0
    c178:	b672      	cpsid	i
    c17a:	4812      	ldr	r0, [pc, #72]	; (c1c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c17c:	6802      	ldr	r2, [r0, #0]
    c17e:	6803      	ldr	r3, [r0, #0]
    c180:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c184:	f043 0310 	orr.w	r3, r3, #16
    c188:	6003      	str	r3, [r0, #0]
    c18a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c18e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c192:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c196:	431c      	orrs	r4, r3
    c198:	d000      	beq.n	c19c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c19a:	bf40      	sev
    c19c:	bf20      	wfe
    c19e:	bf00      	nop
    c1a0:	bf00      	nop
    c1a2:	bf00      	nop
    c1a4:	bf00      	nop
    c1a6:	b112      	cbz	r2, c1ae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c1a8:	e005      	b.n	c1b6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c1aa:	2101      	movs	r1, #1
    c1ac:	e7e4      	b.n	c178 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c1ae:	6802      	ldr	r2, [r0, #0]
    c1b0:	f022 0210 	bic.w	r2, r2, #16
    c1b4:	6002      	str	r2, [r0, #0]
    c1b6:	2900      	cmp	r1, #0
    c1b8:	d000      	beq.n	c1bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c1ba:	b662      	cpsie	i
    c1bc:	bd10      	pop	{r4, pc}
    c1be:	bf20      	wfe
    c1c0:	bd10      	pop	{r4, pc}
    c1c2:	0000      	.short	0x0000
    c1c4:	e000ed10 	.word	0xe000ed10

0000c1c8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c1c8:	4901      	ldr	r1, [pc, #4]	; (c1d0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c1ca:	2001      	movs	r0, #1
    c1cc:	7088      	strb	r0, [r1, #2]
    c1ce:	4770      	bx	lr
    c1d0:	2000033c 	.word	0x2000033c

0000c1d4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c1d4:	000106eb 00010723 0001070d 000106fb     ....#...........
    c1e4:	00010707 000106f5 000106e9 000106e7     ................
    c1f4:	0001071f 00010713 00010701 000106ef     ................
    c204:	000106e1 000106d9 000106dd 000106d3     ................

0000c214 <mpsl_fem_disable>:
    c214:	4801      	ldr	r0, [pc, #4]	; (c21c <mpsl_fem_disable+0x8>)
    c216:	6800      	ldr	r0, [r0, #0]
    c218:	6800      	ldr	r0, [r0, #0]
    c21a:	4700      	bx	r0
    c21c:	20000350 	.word	0x20000350

0000c220 <mpsl_fem_lna_configuration_clear>:
    c220:	4801      	ldr	r0, [pc, #4]	; (c228 <mpsl_fem_lna_configuration_clear+0x8>)
    c222:	6800      	ldr	r0, [r0, #0]
    c224:	6940      	ldr	r0, [r0, #20]
    c226:	4700      	bx	r0
    c228:	20000350 	.word	0x20000350

0000c22c <mpsl_fem_lna_configuration_set>:
    c22c:	4a01      	ldr	r2, [pc, #4]	; (c234 <mpsl_fem_lna_configuration_set+0x8>)
    c22e:	6812      	ldr	r2, [r2, #0]
    c230:	68d2      	ldr	r2, [r2, #12]
    c232:	4710      	bx	r2
    c234:	20000350 	.word	0x20000350

0000c238 <mpsl_fem_lna_is_configured>:
    c238:	4901      	ldr	r1, [pc, #4]	; (c240 <mpsl_fem_lna_is_configured+0x8>)
    c23a:	6809      	ldr	r1, [r1, #0]
    c23c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c23e:	4708      	bx	r1
    c240:	20000350 	.word	0x20000350

0000c244 <mpsl_fem_pa_configuration_clear>:
    c244:	4801      	ldr	r0, [pc, #4]	; (c24c <mpsl_fem_pa_configuration_clear+0x8>)
    c246:	6800      	ldr	r0, [r0, #0]
    c248:	6900      	ldr	r0, [r0, #16]
    c24a:	4700      	bx	r0
    c24c:	20000350 	.word	0x20000350

0000c250 <mpsl_fem_pa_configuration_set>:
    c250:	4a01      	ldr	r2, [pc, #4]	; (c258 <mpsl_fem_pa_configuration_set+0x8>)
    c252:	6812      	ldr	r2, [r2, #0]
    c254:	6892      	ldr	r2, [r2, #8]
    c256:	4710      	bx	r2
    c258:	20000350 	.word	0x20000350

0000c25c <mpsl_fem_pa_gain_set>:
    c25c:	4901      	ldr	r1, [pc, #4]	; (c264 <mpsl_fem_pa_gain_set+0x8>)
    c25e:	6809      	ldr	r1, [r1, #0]
    c260:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c262:	4708      	bx	r1
    c264:	20000350 	.word	0x20000350

0000c268 <mpsl_fem_pa_is_configured>:
    c268:	4901      	ldr	r1, [pc, #4]	; (c270 <mpsl_fem_pa_is_configured+0x8>)
    c26a:	6809      	ldr	r1, [r1, #0]
    c26c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c26e:	4708      	bx	r1
    c270:	20000350 	.word	0x20000350

0000c274 <mpsl_fem_tx_power_split>:
    c274:	b430      	push	{r4, r5}
    c276:	4c03      	ldr	r4, [pc, #12]	; (c284 <mpsl_fem_tx_power_split+0x10>)
    c278:	6824      	ldr	r4, [r4, #0]
    c27a:	6864      	ldr	r4, [r4, #4]
    c27c:	46a4      	mov	ip, r4
    c27e:	bc30      	pop	{r4, r5}
    c280:	4760      	bx	ip
    c282:	0000      	.short	0x0000
    c284:	20000350 	.word	0x20000350

0000c288 <mpsl_fem_device_config_254_apply_get>:
    c288:	4801      	ldr	r0, [pc, #4]	; (c290 <mpsl_fem_device_config_254_apply_get+0x8>)
    c28a:	7800      	ldrb	r0, [r0, #0]
    c28c:	4770      	bx	lr
    c28e:	0000      	.short	0x0000
    c290:	20000387 	.word	0x20000387

0000c294 <__udivmoddi4>:
    c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c298:	4686      	mov	lr, r0
    c29a:	468c      	mov	ip, r1
    c29c:	4608      	mov	r0, r1
    c29e:	9e08      	ldr	r6, [sp, #32]
    c2a0:	4615      	mov	r5, r2
    c2a2:	4674      	mov	r4, lr
    c2a4:	4619      	mov	r1, r3
    c2a6:	2b00      	cmp	r3, #0
    c2a8:	f040 80c2 	bne.w	c430 <__udivmoddi4+0x19c>
    c2ac:	4285      	cmp	r5, r0
    c2ae:	fab2 f282 	clz	r2, r2
    c2b2:	d945      	bls.n	c340 <__udivmoddi4+0xac>
    c2b4:	b14a      	cbz	r2, c2ca <__udivmoddi4+0x36>
    c2b6:	f1c2 0320 	rsb	r3, r2, #32
    c2ba:	fa00 fc02 	lsl.w	ip, r0, r2
    c2be:	fa2e f303 	lsr.w	r3, lr, r3
    c2c2:	4095      	lsls	r5, r2
    c2c4:	ea43 0c0c 	orr.w	ip, r3, ip
    c2c8:	4094      	lsls	r4, r2
    c2ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2ce:	b2a8      	uxth	r0, r5
    c2d0:	fbbc f8fe 	udiv	r8, ip, lr
    c2d4:	0c23      	lsrs	r3, r4, #16
    c2d6:	fb0e cc18 	mls	ip, lr, r8, ip
    c2da:	fb08 f900 	mul.w	r9, r8, r0
    c2de:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c2e2:	4599      	cmp	r9, r3
    c2e4:	d928      	bls.n	c338 <__udivmoddi4+0xa4>
    c2e6:	18eb      	adds	r3, r5, r3
    c2e8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    c2ec:	d204      	bcs.n	c2f8 <__udivmoddi4+0x64>
    c2ee:	4599      	cmp	r9, r3
    c2f0:	d902      	bls.n	c2f8 <__udivmoddi4+0x64>
    c2f2:	f1a8 0702 	sub.w	r7, r8, #2
    c2f6:	442b      	add	r3, r5
    c2f8:	eba3 0309 	sub.w	r3, r3, r9
    c2fc:	b2a4      	uxth	r4, r4
    c2fe:	fbb3 fcfe 	udiv	ip, r3, lr
    c302:	fb0e 331c 	mls	r3, lr, ip, r3
    c306:	fb0c f000 	mul.w	r0, ip, r0
    c30a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c30e:	42a0      	cmp	r0, r4
    c310:	d914      	bls.n	c33c <__udivmoddi4+0xa8>
    c312:	192c      	adds	r4, r5, r4
    c314:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c318:	d204      	bcs.n	c324 <__udivmoddi4+0x90>
    c31a:	42a0      	cmp	r0, r4
    c31c:	d902      	bls.n	c324 <__udivmoddi4+0x90>
    c31e:	f1ac 0302 	sub.w	r3, ip, #2
    c322:	442c      	add	r4, r5
    c324:	1a24      	subs	r4, r4, r0
    c326:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c32a:	b11e      	cbz	r6, c334 <__udivmoddi4+0xa0>
    c32c:	40d4      	lsrs	r4, r2
    c32e:	2300      	movs	r3, #0
    c330:	6034      	str	r4, [r6, #0]
    c332:	6073      	str	r3, [r6, #4]
    c334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c338:	4647      	mov	r7, r8
    c33a:	e7dd      	b.n	c2f8 <__udivmoddi4+0x64>
    c33c:	4663      	mov	r3, ip
    c33e:	e7f1      	b.n	c324 <__udivmoddi4+0x90>
    c340:	bb92      	cbnz	r2, c3a8 <__udivmoddi4+0x114>
    c342:	1b43      	subs	r3, r0, r5
    c344:	2101      	movs	r1, #1
    c346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c34a:	b2af      	uxth	r7, r5
    c34c:	fbb3 fcfe 	udiv	ip, r3, lr
    c350:	0c20      	lsrs	r0, r4, #16
    c352:	fb0e 331c 	mls	r3, lr, ip, r3
    c356:	fb0c f807 	mul.w	r8, ip, r7
    c35a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c35e:	4598      	cmp	r8, r3
    c360:	d962      	bls.n	c428 <__udivmoddi4+0x194>
    c362:	18eb      	adds	r3, r5, r3
    c364:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c368:	d204      	bcs.n	c374 <__udivmoddi4+0xe0>
    c36a:	4598      	cmp	r8, r3
    c36c:	d902      	bls.n	c374 <__udivmoddi4+0xe0>
    c36e:	f1ac 0002 	sub.w	r0, ip, #2
    c372:	442b      	add	r3, r5
    c374:	eba3 0308 	sub.w	r3, r3, r8
    c378:	b2a4      	uxth	r4, r4
    c37a:	fbb3 fcfe 	udiv	ip, r3, lr
    c37e:	fb0e 331c 	mls	r3, lr, ip, r3
    c382:	fb0c f707 	mul.w	r7, ip, r7
    c386:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c38a:	42a7      	cmp	r7, r4
    c38c:	d94e      	bls.n	c42c <__udivmoddi4+0x198>
    c38e:	192c      	adds	r4, r5, r4
    c390:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c394:	d204      	bcs.n	c3a0 <__udivmoddi4+0x10c>
    c396:	42a7      	cmp	r7, r4
    c398:	d902      	bls.n	c3a0 <__udivmoddi4+0x10c>
    c39a:	f1ac 0302 	sub.w	r3, ip, #2
    c39e:	442c      	add	r4, r5
    c3a0:	1be4      	subs	r4, r4, r7
    c3a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c3a6:	e7c0      	b.n	c32a <__udivmoddi4+0x96>
    c3a8:	f1c2 0320 	rsb	r3, r2, #32
    c3ac:	fa20 f103 	lsr.w	r1, r0, r3
    c3b0:	4095      	lsls	r5, r2
    c3b2:	4090      	lsls	r0, r2
    c3b4:	fa2e f303 	lsr.w	r3, lr, r3
    c3b8:	4303      	orrs	r3, r0
    c3ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c3be:	b2af      	uxth	r7, r5
    c3c0:	fbb1 fcfe 	udiv	ip, r1, lr
    c3c4:	fb0e 101c 	mls	r0, lr, ip, r1
    c3c8:	0c19      	lsrs	r1, r3, #16
    c3ca:	fb0c f807 	mul.w	r8, ip, r7
    c3ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c3d2:	4588      	cmp	r8, r1
    c3d4:	fa04 f402 	lsl.w	r4, r4, r2
    c3d8:	d922      	bls.n	c420 <__udivmoddi4+0x18c>
    c3da:	1869      	adds	r1, r5, r1
    c3dc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c3e0:	d204      	bcs.n	c3ec <__udivmoddi4+0x158>
    c3e2:	4588      	cmp	r8, r1
    c3e4:	d902      	bls.n	c3ec <__udivmoddi4+0x158>
    c3e6:	f1ac 0002 	sub.w	r0, ip, #2
    c3ea:	4429      	add	r1, r5
    c3ec:	eba1 0108 	sub.w	r1, r1, r8
    c3f0:	b29b      	uxth	r3, r3
    c3f2:	fbb1 fcfe 	udiv	ip, r1, lr
    c3f6:	fb0e 111c 	mls	r1, lr, ip, r1
    c3fa:	fb0c f707 	mul.w	r7, ip, r7
    c3fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c402:	429f      	cmp	r7, r3
    c404:	d90e      	bls.n	c424 <__udivmoddi4+0x190>
    c406:	18eb      	adds	r3, r5, r3
    c408:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    c40c:	d204      	bcs.n	c418 <__udivmoddi4+0x184>
    c40e:	429f      	cmp	r7, r3
    c410:	d902      	bls.n	c418 <__udivmoddi4+0x184>
    c412:	f1ac 0102 	sub.w	r1, ip, #2
    c416:	442b      	add	r3, r5
    c418:	1bdb      	subs	r3, r3, r7
    c41a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c41e:	e792      	b.n	c346 <__udivmoddi4+0xb2>
    c420:	4660      	mov	r0, ip
    c422:	e7e3      	b.n	c3ec <__udivmoddi4+0x158>
    c424:	4661      	mov	r1, ip
    c426:	e7f7      	b.n	c418 <__udivmoddi4+0x184>
    c428:	4660      	mov	r0, ip
    c42a:	e7a3      	b.n	c374 <__udivmoddi4+0xe0>
    c42c:	4663      	mov	r3, ip
    c42e:	e7b7      	b.n	c3a0 <__udivmoddi4+0x10c>
    c430:	4283      	cmp	r3, r0
    c432:	d906      	bls.n	c442 <__udivmoddi4+0x1ae>
    c434:	b916      	cbnz	r6, c43c <__udivmoddi4+0x1a8>
    c436:	2100      	movs	r1, #0
    c438:	4608      	mov	r0, r1
    c43a:	e77b      	b.n	c334 <__udivmoddi4+0xa0>
    c43c:	e9c6 e000 	strd	lr, r0, [r6]
    c440:	e7f9      	b.n	c436 <__udivmoddi4+0x1a2>
    c442:	fab3 f783 	clz	r7, r3
    c446:	b98f      	cbnz	r7, c46c <__udivmoddi4+0x1d8>
    c448:	4283      	cmp	r3, r0
    c44a:	d301      	bcc.n	c450 <__udivmoddi4+0x1bc>
    c44c:	4572      	cmp	r2, lr
    c44e:	d808      	bhi.n	c462 <__udivmoddi4+0x1ce>
    c450:	ebbe 0402 	subs.w	r4, lr, r2
    c454:	eb60 0303 	sbc.w	r3, r0, r3
    c458:	2001      	movs	r0, #1
    c45a:	469c      	mov	ip, r3
    c45c:	b91e      	cbnz	r6, c466 <__udivmoddi4+0x1d2>
    c45e:	2100      	movs	r1, #0
    c460:	e768      	b.n	c334 <__udivmoddi4+0xa0>
    c462:	4638      	mov	r0, r7
    c464:	e7fa      	b.n	c45c <__udivmoddi4+0x1c8>
    c466:	e9c6 4c00 	strd	r4, ip, [r6]
    c46a:	e7f8      	b.n	c45e <__udivmoddi4+0x1ca>
    c46c:	f1c7 0c20 	rsb	ip, r7, #32
    c470:	40bb      	lsls	r3, r7
    c472:	fa22 f40c 	lsr.w	r4, r2, ip
    c476:	431c      	orrs	r4, r3
    c478:	fa2e f10c 	lsr.w	r1, lr, ip
    c47c:	fa20 f30c 	lsr.w	r3, r0, ip
    c480:	40b8      	lsls	r0, r7
    c482:	4301      	orrs	r1, r0
    c484:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c488:	fa0e f507 	lsl.w	r5, lr, r7
    c48c:	fbb3 f8f9 	udiv	r8, r3, r9
    c490:	fa1f fe84 	uxth.w	lr, r4
    c494:	fb09 3018 	mls	r0, r9, r8, r3
    c498:	0c0b      	lsrs	r3, r1, #16
    c49a:	fb08 fa0e 	mul.w	sl, r8, lr
    c49e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c4a2:	459a      	cmp	sl, r3
    c4a4:	fa02 f207 	lsl.w	r2, r2, r7
    c4a8:	d940      	bls.n	c52c <__udivmoddi4+0x298>
    c4aa:	18e3      	adds	r3, r4, r3
    c4ac:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    c4b0:	d204      	bcs.n	c4bc <__udivmoddi4+0x228>
    c4b2:	459a      	cmp	sl, r3
    c4b4:	d902      	bls.n	c4bc <__udivmoddi4+0x228>
    c4b6:	f1a8 0002 	sub.w	r0, r8, #2
    c4ba:	4423      	add	r3, r4
    c4bc:	eba3 030a 	sub.w	r3, r3, sl
    c4c0:	b289      	uxth	r1, r1
    c4c2:	fbb3 f8f9 	udiv	r8, r3, r9
    c4c6:	fb09 3318 	mls	r3, r9, r8, r3
    c4ca:	fb08 fe0e 	mul.w	lr, r8, lr
    c4ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d2:	458e      	cmp	lr, r1
    c4d4:	d92c      	bls.n	c530 <__udivmoddi4+0x29c>
    c4d6:	1861      	adds	r1, r4, r1
    c4d8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c4dc:	d204      	bcs.n	c4e8 <__udivmoddi4+0x254>
    c4de:	458e      	cmp	lr, r1
    c4e0:	d902      	bls.n	c4e8 <__udivmoddi4+0x254>
    c4e2:	f1a8 0302 	sub.w	r3, r8, #2
    c4e6:	4421      	add	r1, r4
    c4e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c4ec:	fba0 9802 	umull	r9, r8, r0, r2
    c4f0:	eba1 010e 	sub.w	r1, r1, lr
    c4f4:	4541      	cmp	r1, r8
    c4f6:	46ce      	mov	lr, r9
    c4f8:	4643      	mov	r3, r8
    c4fa:	d302      	bcc.n	c502 <__udivmoddi4+0x26e>
    c4fc:	d106      	bne.n	c50c <__udivmoddi4+0x278>
    c4fe:	454d      	cmp	r5, r9
    c500:	d204      	bcs.n	c50c <__udivmoddi4+0x278>
    c502:	ebb9 0e02 	subs.w	lr, r9, r2
    c506:	eb68 0304 	sbc.w	r3, r8, r4
    c50a:	3801      	subs	r0, #1
    c50c:	2e00      	cmp	r6, #0
    c50e:	d0a6      	beq.n	c45e <__udivmoddi4+0x1ca>
    c510:	ebb5 020e 	subs.w	r2, r5, lr
    c514:	eb61 0103 	sbc.w	r1, r1, r3
    c518:	fa01 fc0c 	lsl.w	ip, r1, ip
    c51c:	fa22 f307 	lsr.w	r3, r2, r7
    c520:	ea4c 0303 	orr.w	r3, ip, r3
    c524:	40f9      	lsrs	r1, r7
    c526:	e9c6 3100 	strd	r3, r1, [r6]
    c52a:	e798      	b.n	c45e <__udivmoddi4+0x1ca>
    c52c:	4640      	mov	r0, r8
    c52e:	e7c5      	b.n	c4bc <__udivmoddi4+0x228>
    c530:	4643      	mov	r3, r8
    c532:	e7d9      	b.n	c4e8 <__udivmoddi4+0x254>
    c534:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    c538:	4681      	mov	r9, r0
    c53a:	f100 0007 	add.w	r0, r0, #7
    c53e:	f020 0007 	bic.w	r0, r0, #7
    c542:	ea5f 0802 	movs.w	r8, r2
    c546:	9000      	str	r0, [sp, #0]
    c548:	784a      	ldrb	r2, [r1, #1]
    c54a:	f88d 2004 	strb.w	r2, [sp, #4]
    c54e:	788a      	ldrb	r2, [r1, #2]
    c550:	460c      	mov	r4, r1
    c552:	f88d 2005 	strb.w	r2, [sp, #5]
    c556:	d000      	beq.n	c55a <__udivmoddi4+0x2c6>
    c558:	2000      	movs	r0, #0
    c55a:	a901      	add	r1, sp, #4
    c55c:	f7f4 fd6a 	bl	1034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c560:	9900      	ldr	r1, [sp, #0]
    c562:	2600      	movs	r6, #0
    c564:	4408      	add	r0, r1
    c566:	9000      	str	r0, [sp, #0]
    c568:	7820      	ldrb	r0, [r4, #0]
    c56a:	7861      	ldrb	r1, [r4, #1]
    c56c:	4635      	mov	r5, r6
    c56e:	4408      	add	r0, r1
    c570:	b2c7      	uxtb	r7, r0
    c572:	e008      	b.n	c586 <__udivmoddi4+0x2f2>
    c574:	7a23      	ldrb	r3, [r4, #8]
    c576:	79e2      	ldrb	r2, [r4, #7]
    c578:	79a1      	ldrb	r1, [r4, #6]
    c57a:	7960      	ldrb	r0, [r4, #5]
    c57c:	f000 fe2a 	bl	d1d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c580:	1c6d      	adds	r5, r5, #1
    c582:	4406      	add	r6, r0
    c584:	b2ed      	uxtb	r5, r5
    c586:	42bd      	cmp	r5, r7
    c588:	d3f4      	bcc.n	c574 <__udivmoddi4+0x2e0>
    c58a:	9800      	ldr	r0, [sp, #0]
    c58c:	1cc0      	adds	r0, r0, #3
    c58e:	f020 0003 	bic.w	r0, r0, #3
    c592:	9000      	str	r0, [sp, #0]
    c594:	f1b8 0f00 	cmp.w	r8, #0
    c598:	d000      	beq.n	c59c <__udivmoddi4+0x308>
    c59a:	2000      	movs	r0, #0
    c59c:	4632      	mov	r2, r6
    c59e:	4639      	mov	r1, r7
    c5a0:	f7f4 fe82 	bl	12a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c5a4:	9900      	ldr	r1, [sp, #0]
    c5a6:	4642      	mov	r2, r8
    c5a8:	4408      	add	r0, r1
    c5aa:	9000      	str	r0, [sp, #0]
    c5ac:	4621      	mov	r1, r4
    c5ae:	4668      	mov	r0, sp
    c5b0:	f000 f805 	bl	c5be <__udivmoddi4+0x32a>
    c5b4:	9900      	ldr	r1, [sp, #0]
    c5b6:	eba1 0009 	sub.w	r0, r1, r9
    c5ba:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    c5be:	b570      	push	{r4, r5, r6, lr}
    c5c0:	4605      	mov	r5, r0
    c5c2:	7888      	ldrb	r0, [r1, #2]
    c5c4:	4616      	mov	r6, r2
    c5c6:	460c      	mov	r4, r1
    c5c8:	b188      	cbz	r0, c5ee <__udivmoddi4+0x35a>
    c5ca:	6828      	ldr	r0, [r5, #0]
    c5cc:	1cc0      	adds	r0, r0, #3
    c5ce:	f020 0003 	bic.w	r0, r0, #3
    c5d2:	6028      	str	r0, [r5, #0]
    c5d4:	7de1      	ldrb	r1, [r4, #23]
    c5d6:	78e2      	ldrb	r2, [r4, #3]
    c5d8:	8a63      	ldrh	r3, [r4, #18]
    c5da:	4411      	add	r1, r2
    c5dc:	b2ca      	uxtb	r2, r1
    c5de:	78a1      	ldrb	r1, [r4, #2]
    c5e0:	b106      	cbz	r6, c5e4 <__udivmoddi4+0x350>
    c5e2:	2000      	movs	r0, #0
    c5e4:	f7f4 ff14 	bl	1410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c5e8:	6829      	ldr	r1, [r5, #0]
    c5ea:	4408      	add	r0, r1
    c5ec:	6028      	str	r0, [r5, #0]
    c5ee:	7d20      	ldrb	r0, [r4, #20]
    c5f0:	2800      	cmp	r0, #0
    c5f2:	d00f      	beq.n	c614 <__udivmoddi4+0x380>
    c5f4:	78a0      	ldrb	r0, [r4, #2]
    c5f6:	2800      	cmp	r0, #0
    c5f8:	d00c      	beq.n	c614 <__udivmoddi4+0x380>
    c5fa:	6828      	ldr	r0, [r5, #0]
    c5fc:	1dc0      	adds	r0, r0, #7
    c5fe:	f020 0007 	bic.w	r0, r0, #7
    c602:	6028      	str	r0, [r5, #0]
    c604:	7d21      	ldrb	r1, [r4, #20]
    c606:	b106      	cbz	r6, c60a <__udivmoddi4+0x376>
    c608:	2000      	movs	r0, #0
    c60a:	f7f6 fdfb 	bl	3204 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    c60e:	6829      	ldr	r1, [r5, #0]
    c610:	4408      	add	r0, r1
    c612:	6028      	str	r0, [r5, #0]
    c614:	bd70      	pop	{r4, r5, r6, pc}

0000c616 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c616:	b50e      	push	{r1, r2, r3, lr}
    c618:	4601      	mov	r1, r0
    c61a:	4668      	mov	r0, sp
    c61c:	f000 f818 	bl	c650 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c620:	4668      	mov	r0, sp
    c622:	f001 fbd1 	bl	ddc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c626:	bd0e      	pop	{r1, r2, r3, pc}
    c628:	b570      	push	{r4, r5, r6, lr}
    c62a:	460c      	mov	r4, r1
    c62c:	4605      	mov	r5, r0
    c62e:	f7f4 fb3f 	bl	cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c632:	2800      	cmp	r0, #0
    c634:	d002      	beq.n	c63c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c636:	2d3e      	cmp	r5, #62	; 0x3e
    c638:	d001      	beq.n	c63e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c63a:	2001      	movs	r0, #1
    c63c:	bd70      	pop	{r4, r5, r6, pc}
    c63e:	2c12      	cmp	r4, #18
    c640:	d004      	beq.n	c64c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c642:	4620      	mov	r0, r4
    c644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c648:	f7f4 bb44 	b.w	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c64c:	2000      	movs	r0, #0
    c64e:	bd70      	pop	{r4, r5, r6, pc}

0000c650 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c650:	880a      	ldrh	r2, [r1, #0]
    c652:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c656:	8082      	strh	r2, [r0, #4]
    c658:	884a      	ldrh	r2, [r1, #2]
    c65a:	80c2      	strh	r2, [r0, #6]
    c65c:	784a      	ldrb	r2, [r1, #1]
    c65e:	0993      	lsrs	r3, r2, #6
    c660:	2200      	movs	r2, #0
    c662:	7242      	strb	r2, [r0, #9]
    c664:	784b      	ldrb	r3, [r1, #1]
    c666:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c66a:	b11b      	cbz	r3, c674 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c66c:	2b01      	cmp	r3, #1
    c66e:	d005      	beq.n	c67c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c670:	2b02      	cmp	r3, #2
    c672:	d005      	beq.n	c680 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c674:	7202      	strb	r2, [r0, #8]
    c676:	1d09      	adds	r1, r1, #4
    c678:	6001      	str	r1, [r0, #0]
    c67a:	4770      	bx	lr
    c67c:	2201      	movs	r2, #1
    c67e:	e7f9      	b.n	c674 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c680:	2202      	movs	r2, #2
    c682:	e7f7      	b.n	c674 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c684 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c684:	b510      	push	{r4, lr}
    c686:	460c      	mov	r4, r1
    c688:	7909      	ldrb	r1, [r1, #4]
    c68a:	7001      	strb	r1, [r0, #0]
    c68c:	7841      	ldrb	r1, [r0, #1]
    c68e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c692:	7041      	strb	r1, [r0, #1]
    c694:	88a2      	ldrh	r2, [r4, #4]
    c696:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c69a:	4311      	orrs	r1, r2
    c69c:	7041      	strb	r1, [r0, #1]
    c69e:	79a2      	ldrb	r2, [r4, #6]
    c6a0:	7082      	strb	r2, [r0, #2]
    c6a2:	88e2      	ldrh	r2, [r4, #6]
    c6a4:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c6a8:	0a12      	lsrs	r2, r2, #8
    c6aa:	70c2      	strb	r2, [r0, #3]
    c6ac:	7041      	strb	r1, [r0, #1]
    c6ae:	7a22      	ldrb	r2, [r4, #8]
    c6b0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c6b4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c6b8:	7041      	strb	r1, [r0, #1]
    c6ba:	7a62      	ldrb	r2, [r4, #9]
    c6bc:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c6c0:	7041      	strb	r1, [r0, #1]
    c6c2:	6821      	ldr	r1, [r4, #0]
    c6c4:	1d02      	adds	r2, r0, #4
    c6c6:	4291      	cmp	r1, r2
    c6c8:	d006      	beq.n	c6d8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c6ca:	88e2      	ldrh	r2, [r4, #6]
    c6cc:	2afb      	cmp	r2, #251	; 0xfb
    c6ce:	d300      	bcc.n	c6d2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c6d0:	22fb      	movs	r2, #251	; 0xfb
    c6d2:	1d00      	adds	r0, r0, #4
    c6d4:	f003 ff23 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c6d8:	79a0      	ldrb	r0, [r4, #6]
    c6da:	1d00      	adds	r0, r0, #4
    c6dc:	b2c0      	uxtb	r0, r0
    c6de:	bd10      	pop	{r4, pc}

0000c6e0 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    c6e0:	b430      	push	{r4, r5}
    c6e2:	790a      	ldrb	r2, [r1, #4]
    c6e4:	7002      	strb	r2, [r0, #0]
    c6e6:	7842      	ldrb	r2, [r0, #1]
    c6e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    c6ec:	7042      	strb	r2, [r0, #1]
    c6ee:	888b      	ldrh	r3, [r1, #4]
    c6f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
    c6f4:	431a      	orrs	r2, r3
    c6f6:	7042      	strb	r2, [r0, #1]
    c6f8:	798b      	ldrb	r3, [r1, #6]
    c6fa:	7083      	strb	r3, [r0, #2]
    c6fc:	78c3      	ldrb	r3, [r0, #3]
    c6fe:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    c702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c706:	70c3      	strb	r3, [r0, #3]
    c708:	88cc      	ldrh	r4, [r1, #6]
    c70a:	f3c4 2405 	ubfx	r4, r4, #8, #6
    c70e:	4323      	orrs	r3, r4
    c710:	70c3      	strb	r3, [r0, #3]
    c712:	7042      	strb	r2, [r0, #1]
    c714:	7a0c      	ldrb	r4, [r1, #8]
    c716:	f004 0403 	and.w	r4, r4, #3
    c71a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    c71e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    c722:	7042      	strb	r2, [r0, #1]
    c724:	7a4c      	ldrb	r4, [r1, #9]
    c726:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    c72a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c72e:	7042      	strb	r2, [r0, #1]
    c730:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    c734:	70c2      	strb	r2, [r0, #3]
    c736:	680b      	ldr	r3, [r1, #0]
    c738:	1d02      	adds	r2, r0, #4
    c73a:	4293      	cmp	r3, r2
    c73c:	d005      	beq.n	c74a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    c73e:	88ca      	ldrh	r2, [r1, #6]
    c740:	bc30      	pop	{r4, r5}
    c742:	4619      	mov	r1, r3
    c744:	1d00      	adds	r0, r0, #4
    c746:	f003 beea 	b.w	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c74a:	bc30      	pop	{r4, r5}
    c74c:	4770      	bx	lr

0000c74e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c752:	460d      	mov	r5, r1
    c754:	4604      	mov	r4, r0
    c756:	f891 c000 	ldrb.w	ip, [r1]
    c75a:	2000      	movs	r0, #0
    c75c:	230c      	movs	r3, #12
    c75e:	2705      	movs	r7, #5
    c760:	2203      	movs	r2, #3
    c762:	263e      	movs	r6, #62	; 0x3e
    c764:	21ff      	movs	r1, #255	; 0xff
    c766:	f1bc 0f1e 	cmp.w	ip, #30
    c76a:	d27e      	bcs.n	c86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    c76c:	e8df f00c 	tbb	[pc, ip]
    c770:	424029e7 	.word	0x424029e7
    c774:	806d63e7 	.word	0x806d63e7
    c778:	b9aeac99 	.word	0xb9aeac99
    c77c:	0ff3dfc4 	.word	0x0ff3dfc4
    c780:	cf48e7e7 	.word	0xcf48e7e7
    c784:	eff0fcd2 	.word	0xeff0fcd2
    c788:	ebecedee 	.word	0xebecedee
    c78c:	e9ea      	.short	0xe9ea
    c78e:	200e      	movs	r0, #14
    c790:	7020      	strb	r0, [r4, #0]
    c792:	7968      	ldrb	r0, [r5, #5]
    c794:	70e0      	strb	r0, [r4, #3]
    c796:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c79a:	0a00      	lsrs	r0, r0, #8
    c79c:	7120      	strb	r0, [r4, #4]
    c79e:	7928      	ldrb	r0, [r5, #4]
    c7a0:	70a0      	strb	r0, [r4, #2]
    c7a2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c7a6:	3883      	subs	r0, #131	; 0x83
    c7a8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    c7ac:	d003      	beq.n	c7b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    c7ae:	2136      	movs	r1, #54	; 0x36
    c7b0:	20c7      	movs	r0, #199	; 0xc7
    c7b2:	f7f4 f8fd 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7b6:	1de9      	adds	r1, r5, #7
    c7b8:	1d60      	adds	r0, r4, #5
    c7ba:	f003 feb0 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c7be:	2007      	movs	r0, #7
    c7c0:	e0bb      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c7c2:	7023      	strb	r3, [r4, #0]
    c7c4:	7928      	ldrb	r0, [r5, #4]
    c7c6:	70a0      	strb	r0, [r4, #2]
    c7c8:	7968      	ldrb	r0, [r5, #5]
    c7ca:	70e0      	strb	r0, [r4, #3]
    c7cc:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c7d0:	0a00      	lsrs	r0, r0, #8
    c7d2:	7120      	strb	r0, [r4, #4]
    c7d4:	79e8      	ldrb	r0, [r5, #7]
    c7d6:	7160      	strb	r0, [r4, #5]
    c7d8:	7a28      	ldrb	r0, [r5, #8]
    c7da:	71a0      	strb	r0, [r4, #6]
    c7dc:	8928      	ldrh	r0, [r5, #8]
    c7de:	0a00      	lsrs	r0, r0, #8
    c7e0:	71e0      	strb	r0, [r4, #7]
    c7e2:	7aa8      	ldrb	r0, [r5, #10]
    c7e4:	7220      	strb	r0, [r4, #8]
    c7e6:	8968      	ldrh	r0, [r5, #10]
    c7e8:	0a00      	lsrs	r0, r0, #8
    c7ea:	7260      	strb	r0, [r4, #9]
    c7ec:	2008      	movs	r0, #8
    c7ee:	e0a4      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c7f0:	2010      	movs	r0, #16
    c7f2:	e000      	b.n	c7f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    c7f4:	201a      	movs	r0, #26
    c7f6:	7020      	strb	r0, [r4, #0]
    c7f8:	7928      	ldrb	r0, [r5, #4]
    c7fa:	70a0      	strb	r0, [r4, #2]
    c7fc:	2001      	movs	r0, #1
    c7fe:	e09c      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c800:	2029      	movs	r0, #41	; 0x29
    c802:	f7f4 fa67 	bl	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c806:	b148      	cbz	r0, c81c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    c808:	7026      	strb	r6, [r4, #0]
    c80a:	2029      	movs	r0, #41	; 0x29
    c80c:	70a0      	strb	r0, [r4, #2]
    c80e:	2221      	movs	r2, #33	; 0x21
    c810:	1d29      	adds	r1, r5, #4
    c812:	1ce0      	adds	r0, r4, #3
    c814:	f003 fe83 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c818:	2022      	movs	r0, #34	; 0x22
    c81a:	e08e      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c81c:	200a      	movs	r0, #10
    c81e:	f7f4 fa59 	bl	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c822:	2800      	cmp	r0, #0
    c824:	4629      	mov	r1, r5
    c826:	4620      	mov	r0, r4
    c828:	d002      	beq.n	c830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    c82a:	f000 f95b 	bl	cae4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    c82e:	e082      	b.n	c936 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    c830:	f000 f92f 	bl	ca92 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    c834:	e07f      	b.n	c936 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    c836:	7026      	strb	r6, [r4, #0]
    c838:	2014      	movs	r0, #20
    c83a:	70a0      	strb	r0, [r4, #2]
    c83c:	7928      	ldrb	r0, [r5, #4]
    c83e:	70e0      	strb	r0, [r4, #3]
    c840:	88a8      	ldrh	r0, [r5, #4]
    c842:	0a00      	lsrs	r0, r0, #8
    c844:	7120      	strb	r0, [r4, #4]
    c846:	79a8      	ldrb	r0, [r5, #6]
    c848:	e0c0      	b.n	c9cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    c84a:	223e      	movs	r2, #62	; 0x3e
    c84c:	7022      	strb	r2, [r4, #0]
    c84e:	2204      	movs	r2, #4
    c850:	70a2      	strb	r2, [r4, #2]
    c852:	6868      	ldr	r0, [r5, #4]
    c854:	f8c4 0003 	str.w	r0, [r4, #3]
    c858:	68a8      	ldr	r0, [r5, #8]
    c85a:	f8c4 0007 	str.w	r0, [r4, #7]
    c85e:	89a8      	ldrh	r0, [r5, #12]
    c860:	f8a4 000b 	strh.w	r0, [r4, #11]
    c864:	7ba8      	ldrb	r0, [r5, #14]
    c866:	7360      	strb	r0, [r4, #13]
    c868:	e000      	b.n	c86c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    c86a:	e068      	b.n	c93e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c86c:	200c      	movs	r0, #12
    c86e:	e064      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c870:	7026      	strb	r6, [r4, #0]
    c872:	70a2      	strb	r2, [r4, #2]
    c874:	7928      	ldrb	r0, [r5, #4]
    c876:	70e0      	strb	r0, [r4, #3]
    c878:	79a8      	ldrb	r0, [r5, #6]
    c87a:	7120      	strb	r0, [r4, #4]
    c87c:	88e8      	ldrh	r0, [r5, #6]
    c87e:	0a00      	lsrs	r0, r0, #8
    c880:	7160      	strb	r0, [r4, #5]
    c882:	7a28      	ldrb	r0, [r5, #8]
    c884:	71a0      	strb	r0, [r4, #6]
    c886:	8928      	ldrh	r0, [r5, #8]
    c888:	0a00      	lsrs	r0, r0, #8
    c88a:	71e0      	strb	r0, [r4, #7]
    c88c:	7aa8      	ldrb	r0, [r5, #10]
    c88e:	7220      	strb	r0, [r4, #8]
    c890:	8968      	ldrh	r0, [r5, #10]
    c892:	0a00      	lsrs	r0, r0, #8
    c894:	7260      	strb	r0, [r4, #9]
    c896:	7b28      	ldrb	r0, [r5, #12]
    c898:	72a0      	strb	r0, [r4, #10]
    c89a:	89a8      	ldrh	r0, [r5, #12]
    c89c:	0a00      	lsrs	r0, r0, #8
    c89e:	72e0      	strb	r0, [r4, #11]
    c8a0:	e0d1      	b.n	ca46 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    c8a2:	7026      	strb	r6, [r4, #0]
    c8a4:	70a7      	strb	r7, [r4, #2]
    c8a6:	7928      	ldrb	r0, [r5, #4]
    c8a8:	70e0      	strb	r0, [r4, #3]
    c8aa:	88a8      	ldrh	r0, [r5, #4]
    c8ac:	0a00      	lsrs	r0, r0, #8
    c8ae:	7120      	strb	r0, [r4, #4]
    c8b0:	f8d5 0006 	ldr.w	r0, [r5, #6]
    c8b4:	f8c4 0005 	str.w	r0, [r4, #5]
    c8b8:	f8d5 000a 	ldr.w	r0, [r5, #10]
    c8bc:	f8c4 0009 	str.w	r0, [r4, #9]
    c8c0:	89e8      	ldrh	r0, [r5, #14]
    c8c2:	f8a4 000d 	strh.w	r0, [r4, #13]
    c8c6:	e0e2      	b.n	ca8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    c8c8:	2011      	movs	r0, #17
    c8ca:	e045      	b.n	c958 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    c8cc:	7027      	strb	r7, [r4, #0]
    c8ce:	7928      	ldrb	r0, [r5, #4]
    c8d0:	70a0      	strb	r0, [r4, #2]
    c8d2:	7968      	ldrb	r0, [r5, #5]
    c8d4:	70e0      	strb	r0, [r4, #3]
    c8d6:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c8da:	0a00      	lsrs	r0, r0, #8
    c8dc:	7120      	strb	r0, [r4, #4]
    c8de:	79e8      	ldrb	r0, [r5, #7]
    c8e0:	e074      	b.n	c9cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    c8e2:	2008      	movs	r0, #8
    c8e4:	7020      	strb	r0, [r4, #0]
    c8e6:	7928      	ldrb	r0, [r5, #4]
    c8e8:	70a0      	strb	r0, [r4, #2]
    c8ea:	79a8      	ldrb	r0, [r5, #6]
    c8ec:	70e0      	strb	r0, [r4, #3]
    c8ee:	88e8      	ldrh	r0, [r5, #6]
    c8f0:	0a00      	lsrs	r0, r0, #8
    c8f2:	7120      	strb	r0, [r4, #4]
    c8f4:	7a28      	ldrb	r0, [r5, #8]
    c8f6:	e069      	b.n	c9cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    c8f8:	2030      	movs	r0, #48	; 0x30
    c8fa:	7020      	strb	r0, [r4, #0]
    c8fc:	7928      	ldrb	r0, [r5, #4]
    c8fe:	70a0      	strb	r0, [r4, #2]
    c900:	79a8      	ldrb	r0, [r5, #6]
    c902:	70e0      	strb	r0, [r4, #3]
    c904:	88e8      	ldrh	r0, [r5, #6]
    c906:	0a00      	lsrs	r0, r0, #8
    c908:	7120      	strb	r0, [r4, #4]
    c90a:	2003      	movs	r0, #3
    c90c:	e015      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c90e:	7026      	strb	r6, [r4, #0]
    c910:	2007      	movs	r0, #7
    c912:	e060      	b.n	c9d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c914:	7026      	strb	r6, [r4, #0]
    c916:	70a3      	strb	r3, [r4, #2]
    c918:	7928      	ldrb	r0, [r5, #4]
    c91a:	70e0      	strb	r0, [r4, #3]
    c91c:	79a8      	ldrb	r0, [r5, #6]
    c91e:	7120      	strb	r0, [r4, #4]
    c920:	88e8      	ldrh	r0, [r5, #6]
    c922:	0a00      	lsrs	r0, r0, #8
    c924:	7160      	strb	r0, [r4, #5]
    c926:	7a28      	ldrb	r0, [r5, #8]
    c928:	71a0      	strb	r0, [r4, #6]
    c92a:	7a68      	ldrb	r0, [r5, #9]
    c92c:	e029      	b.n	c982 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    c92e:	1d29      	adds	r1, r5, #4
    c930:	4620      	mov	r0, r4
    c932:	f7f4 f98f 	bl	c54 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    c936:	2800      	cmp	r0, #0
    c938:	d001      	beq.n	c93e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c93a:	7060      	strb	r0, [r4, #1]
    c93c:	1c80      	adds	r0, r0, #2
    c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c942:	e08f      	b.n	ca64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    c944:	e063      	b.n	ca0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    c946:	e044      	b.n	c9d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    c948:	e06f      	b.n	ca2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    c94a:	e07e      	b.n	ca4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    c94c:	e036      	b.n	c9bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    c94e:	e01e      	b.n	c98e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    c950:	e01a      	b.n	c988 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    c952:	e009      	b.n	c968 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    c954:	e7ff      	b.n	c956 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    c956:	2057      	movs	r0, #87	; 0x57
    c958:	7020      	strb	r0, [r4, #0]
    c95a:	7928      	ldrb	r0, [r5, #4]
    c95c:	70a0      	strb	r0, [r4, #2]
    c95e:	88a8      	ldrh	r0, [r5, #4]
    c960:	0a00      	lsrs	r0, r0, #8
    c962:	70e0      	strb	r0, [r4, #3]
    c964:	2002      	movs	r0, #2
    c966:	e7e8      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c968:	7026      	strb	r6, [r4, #0]
    c96a:	2012      	movs	r0, #18
    c96c:	70a0      	strb	r0, [r4, #2]
    c96e:	7928      	ldrb	r0, [r5, #4]
    c970:	70e0      	strb	r0, [r4, #3]
    c972:	7968      	ldrb	r0, [r5, #5]
    c974:	7120      	strb	r0, [r4, #4]
    c976:	79a8      	ldrb	r0, [r5, #6]
    c978:	7160      	strb	r0, [r4, #5]
    c97a:	88e8      	ldrh	r0, [r5, #6]
    c97c:	0a00      	lsrs	r0, r0, #8
    c97e:	71a0      	strb	r0, [r4, #6]
    c980:	7a28      	ldrb	r0, [r5, #8]
    c982:	71e0      	strb	r0, [r4, #7]
    c984:	2006      	movs	r0, #6
    c986:	e7d8      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c988:	7026      	strb	r6, [r4, #0]
    c98a:	2020      	movs	r0, #32
    c98c:	e041      	b.n	ca12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    c98e:	7026      	strb	r6, [r4, #0]
    c990:	2021      	movs	r0, #33	; 0x21
    c992:	70a0      	strb	r0, [r4, #2]
    c994:	7928      	ldrb	r0, [r5, #4]
    c996:	70e0      	strb	r0, [r4, #3]
    c998:	7968      	ldrb	r0, [r5, #5]
    c99a:	7120      	strb	r0, [r4, #4]
    c99c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c9a0:	0a00      	lsrs	r0, r0, #8
    c9a2:	7160      	strb	r0, [r4, #5]
    c9a4:	79e8      	ldrb	r0, [r5, #7]
    c9a6:	71a0      	strb	r0, [r4, #6]
    c9a8:	7a28      	ldrb	r0, [r5, #8]
    c9aa:	71e0      	strb	r0, [r4, #7]
    c9ac:	7a68      	ldrb	r0, [r5, #9]
    c9ae:	7220      	strb	r0, [r4, #8]
    c9b0:	7aa8      	ldrb	r0, [r5, #10]
    c9b2:	7260      	strb	r0, [r4, #9]
    c9b4:	7ae8      	ldrb	r0, [r5, #11]
    c9b6:	72a0      	strb	r0, [r4, #10]
    c9b8:	2009      	movs	r0, #9
    c9ba:	e7be      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c9bc:	7021      	strb	r1, [r4, #0]
    c9be:	20a1      	movs	r0, #161	; 0xa1
    c9c0:	70a0      	strb	r0, [r4, #2]
    c9c2:	7928      	ldrb	r0, [r5, #4]
    c9c4:	70e0      	strb	r0, [r4, #3]
    c9c6:	7968      	ldrb	r0, [r5, #5]
    c9c8:	7120      	strb	r0, [r4, #4]
    c9ca:	2000      	movs	r0, #0
    c9cc:	7160      	strb	r0, [r4, #5]
    c9ce:	2004      	movs	r0, #4
    c9d0:	e7b3      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c9d2:	7021      	strb	r1, [r4, #0]
    c9d4:	20a2      	movs	r0, #162	; 0xa2
    c9d6:	70a0      	strb	r0, [r4, #2]
    c9d8:	7928      	ldrb	r0, [r5, #4]
    c9da:	70e0      	strb	r0, [r4, #3]
    c9dc:	88a8      	ldrh	r0, [r5, #4]
    c9de:	0a00      	lsrs	r0, r0, #8
    c9e0:	7120      	strb	r0, [r4, #4]
    c9e2:	79a8      	ldrb	r0, [r5, #6]
    c9e4:	7160      	strb	r0, [r4, #5]
    c9e6:	88e8      	ldrh	r0, [r5, #6]
    c9e8:	0a00      	lsrs	r0, r0, #8
    c9ea:	71a0      	strb	r0, [r4, #6]
    c9ec:	7a28      	ldrb	r0, [r5, #8]
    c9ee:	71e0      	strb	r0, [r4, #7]
    c9f0:	8928      	ldrh	r0, [r5, #8]
    c9f2:	0a00      	lsrs	r0, r0, #8
    c9f4:	7220      	strb	r0, [r4, #8]
    c9f6:	7aa8      	ldrb	r0, [r5, #10]
    c9f8:	7260      	strb	r0, [r4, #9]
    c9fa:	8968      	ldrh	r0, [r5, #10]
    c9fc:	0a00      	lsrs	r0, r0, #8
    c9fe:	72a0      	strb	r0, [r4, #10]
    ca00:	7b28      	ldrb	r0, [r5, #12]
    ca02:	72e0      	strb	r0, [r4, #11]
    ca04:	89a8      	ldrh	r0, [r5, #12]
    ca06:	0a00      	lsrs	r0, r0, #8
    ca08:	7320      	strb	r0, [r4, #12]
    ca0a:	200b      	movs	r0, #11
    ca0c:	e795      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca0e:	7021      	strb	r1, [r4, #0]
    ca10:	20a3      	movs	r0, #163	; 0xa3
    ca12:	70a0      	strb	r0, [r4, #2]
    ca14:	7928      	ldrb	r0, [r5, #4]
    ca16:	70e0      	strb	r0, [r4, #3]
    ca18:	88a8      	ldrh	r0, [r5, #4]
    ca1a:	0a00      	lsrs	r0, r0, #8
    ca1c:	7120      	strb	r0, [r4, #4]
    ca1e:	79a8      	ldrb	r0, [r5, #6]
    ca20:	7160      	strb	r0, [r4, #5]
    ca22:	79e8      	ldrb	r0, [r5, #7]
    ca24:	71a0      	strb	r0, [r4, #6]
    ca26:	2005      	movs	r0, #5
    ca28:	e787      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca2a:	7026      	strb	r6, [r4, #0]
    ca2c:	2013      	movs	r0, #19
    ca2e:	70a0      	strb	r0, [r4, #2]
    ca30:	7928      	ldrb	r0, [r5, #4]
    ca32:	70e0      	strb	r0, [r4, #3]
    ca34:	7968      	ldrb	r0, [r5, #5]
    ca36:	7120      	strb	r0, [r4, #4]
    ca38:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ca3c:	f8c4 0005 	str.w	r0, [r4, #5]
    ca40:	8968      	ldrh	r0, [r5, #10]
    ca42:	f8a4 0009 	strh.w	r0, [r4, #9]
    ca46:	200a      	movs	r0, #10
    ca48:	e777      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca4a:	7021      	strb	r1, [r4, #0]
    ca4c:	20a4      	movs	r0, #164	; 0xa4
    ca4e:	70a0      	strb	r0, [r4, #2]
    ca50:	7928      	ldrb	r0, [r5, #4]
    ca52:	70e0      	strb	r0, [r4, #3]
    ca54:	88a8      	ldrh	r0, [r5, #4]
    ca56:	0a00      	lsrs	r0, r0, #8
    ca58:	7120      	strb	r0, [r4, #4]
    ca5a:	79a8      	ldrb	r0, [r5, #6]
    ca5c:	7160      	strb	r0, [r4, #5]
    ca5e:	79e8      	ldrb	r0, [r5, #7]
    ca60:	71a0      	strb	r0, [r4, #6]
    ca62:	e6ac      	b.n	c7be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    ca64:	7021      	strb	r1, [r4, #0]
    ca66:	2080      	movs	r0, #128	; 0x80
    ca68:	70a0      	strb	r0, [r4, #2]
    ca6a:	88a9      	ldrh	r1, [r5, #4]
    ca6c:	f8a4 1003 	strh.w	r1, [r4, #3]
    ca70:	88e9      	ldrh	r1, [r5, #6]
    ca72:	f8a4 1005 	strh.w	r1, [r4, #5]
    ca76:	7a29      	ldrb	r1, [r5, #8]
    ca78:	71e1      	strb	r1, [r4, #7]
    ca7a:	8969      	ldrh	r1, [r5, #10]
    ca7c:	8121      	strh	r1, [r4, #8]
    ca7e:	89a9      	ldrh	r1, [r5, #12]
    ca80:	8161      	strh	r1, [r4, #10]
    ca82:	89e9      	ldrh	r1, [r5, #14]
    ca84:	81a1      	strh	r1, [r4, #12]
    ca86:	7c29      	ldrb	r1, [r5, #16]
    ca88:	f001 0101 	and.w	r1, r1, #1
    ca8c:	73a1      	strb	r1, [r4, #14]
    ca8e:	200d      	movs	r0, #13
    ca90:	e753      	b.n	c93a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000ca92 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    ca92:	223e      	movs	r2, #62	; 0x3e
    ca94:	7002      	strb	r2, [r0, #0]
    ca96:	2201      	movs	r2, #1
    ca98:	7082      	strb	r2, [r0, #2]
    ca9a:	790a      	ldrb	r2, [r1, #4]
    ca9c:	70c2      	strb	r2, [r0, #3]
    ca9e:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    caa2:	7102      	strb	r2, [r0, #4]
    caa4:	880a      	ldrh	r2, [r1, #0]
    caa6:	0a12      	lsrs	r2, r2, #8
    caa8:	7142      	strb	r2, [r0, #5]
    caaa:	788a      	ldrb	r2, [r1, #2]
    caac:	7182      	strb	r2, [r0, #6]
    caae:	78ca      	ldrb	r2, [r1, #3]
    cab0:	71c2      	strb	r2, [r0, #7]
    cab2:	684a      	ldr	r2, [r1, #4]
    cab4:	6082      	str	r2, [r0, #8]
    cab6:	890a      	ldrh	r2, [r1, #8]
    cab8:	8182      	strh	r2, [r0, #12]
    caba:	7d8a      	ldrb	r2, [r1, #22]
    cabc:	7382      	strb	r2, [r0, #14]
    cabe:	8aca      	ldrh	r2, [r1, #22]
    cac0:	0a12      	lsrs	r2, r2, #8
    cac2:	73c2      	strb	r2, [r0, #15]
    cac4:	7e0a      	ldrb	r2, [r1, #24]
    cac6:	7402      	strb	r2, [r0, #16]
    cac8:	8b0a      	ldrh	r2, [r1, #24]
    caca:	0a12      	lsrs	r2, r2, #8
    cacc:	7442      	strb	r2, [r0, #17]
    cace:	7e8a      	ldrb	r2, [r1, #26]
    cad0:	7482      	strb	r2, [r0, #18]
    cad2:	8b4a      	ldrh	r2, [r1, #26]
    cad4:	0a12      	lsrs	r2, r2, #8
    cad6:	74c2      	strb	r2, [r0, #19]
    cad8:	7f09      	ldrb	r1, [r1, #28]
    cada:	7501      	strb	r1, [r0, #20]
    cadc:	2113      	movs	r1, #19
    cade:	7041      	strb	r1, [r0, #1]
    cae0:	4608      	mov	r0, r1
    cae2:	4770      	bx	lr
    cae4:	223e      	movs	r2, #62	; 0x3e
    cae6:	7002      	strb	r2, [r0, #0]
    cae8:	220a      	movs	r2, #10
    caea:	7082      	strb	r2, [r0, #2]
    caec:	790a      	ldrb	r2, [r1, #4]
    caee:	70c2      	strb	r2, [r0, #3]
    caf0:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    caf4:	7102      	strb	r2, [r0, #4]
    caf6:	880a      	ldrh	r2, [r1, #0]
    caf8:	0a12      	lsrs	r2, r2, #8
    cafa:	7142      	strb	r2, [r0, #5]
    cafc:	788a      	ldrb	r2, [r1, #2]
    cafe:	7182      	strb	r2, [r0, #6]
    cb00:	78ca      	ldrb	r2, [r1, #3]
    cb02:	71c2      	strb	r2, [r0, #7]
    cb04:	684a      	ldr	r2, [r1, #4]
    cb06:	6082      	str	r2, [r0, #8]
    cb08:	890a      	ldrh	r2, [r1, #8]
    cb0a:	8182      	strh	r2, [r0, #12]
    cb0c:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cb10:	f8c0 200e 	str.w	r2, [r0, #14]
    cb14:	89ca      	ldrh	r2, [r1, #14]
    cb16:	8242      	strh	r2, [r0, #18]
    cb18:	690a      	ldr	r2, [r1, #16]
    cb1a:	6142      	str	r2, [r0, #20]
    cb1c:	8a8a      	ldrh	r2, [r1, #20]
    cb1e:	8302      	strh	r2, [r0, #24]
    cb20:	7d8a      	ldrb	r2, [r1, #22]
    cb22:	7682      	strb	r2, [r0, #26]
    cb24:	8aca      	ldrh	r2, [r1, #22]
    cb26:	0a12      	lsrs	r2, r2, #8
    cb28:	76c2      	strb	r2, [r0, #27]
    cb2a:	7e0a      	ldrb	r2, [r1, #24]
    cb2c:	7702      	strb	r2, [r0, #28]
    cb2e:	8b0a      	ldrh	r2, [r1, #24]
    cb30:	0a12      	lsrs	r2, r2, #8
    cb32:	7742      	strb	r2, [r0, #29]
    cb34:	7e8a      	ldrb	r2, [r1, #26]
    cb36:	7782      	strb	r2, [r0, #30]
    cb38:	8b4a      	ldrh	r2, [r1, #26]
    cb3a:	0a12      	lsrs	r2, r2, #8
    cb3c:	77c2      	strb	r2, [r0, #31]
    cb3e:	7f09      	ldrb	r1, [r1, #28]
    cb40:	f880 1020 	strb.w	r1, [r0, #32]
    cb44:	211f      	movs	r1, #31
    cb46:	7041      	strb	r1, [r0, #1]
    cb48:	4608      	mov	r0, r1
    cb4a:	4770      	bx	lr
    cb4c:	094a      	lsrs	r2, r1, #5
    cb4e:	f001 011f 	and.w	r1, r1, #31
    cb52:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cb56:	40c8      	lsrs	r0, r1
    cb58:	f000 0001 	and.w	r0, r0, #1
    cb5c:	4770      	bx	lr

0000cb5e <sdc_hci_data_put>:
    cb5e:	b510      	push	{r4, lr}
    cb60:	f06f 0415 	mvn.w	r4, #21
    cb64:	b120      	cbz	r0, cb70 <sdc_hci_data_put+0x12>
    cb66:	f7ff fd56 	bl	c616 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cb6a:	b108      	cbz	r0, cb70 <sdc_hci_data_put+0x12>
    cb6c:	2000      	movs	r0, #0
    cb6e:	bd10      	pop	{r4, pc}
    cb70:	4620      	mov	r0, r4
    cb72:	bd10      	pop	{r4, pc}

0000cb74 <sdc_hci_get>:
    cb74:	b510      	push	{r4, lr}
    cb76:	460c      	mov	r4, r1
    cb78:	b130      	cbz	r0, cb88 <sdc_hci_get+0x14>
    cb7a:	b12c      	cbz	r4, cb88 <sdc_hci_get+0x14>
    cb7c:	f7f4 f814 	bl	ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cb80:	b128      	cbz	r0, cb8e <sdc_hci_get+0x1a>
    cb82:	7020      	strb	r0, [r4, #0]
    cb84:	2000      	movs	r0, #0
    cb86:	bd10      	pop	{r4, pc}
    cb88:	f06f 0015 	mvn.w	r0, #21
    cb8c:	bd10      	pop	{r4, pc}
    cb8e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cb92:	bd10      	pop	{r4, pc}

0000cb94 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cb94:	f002 bf62 	b.w	fa5c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cb98 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cb98:	f002 bf7d 	b.w	fa96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cb9c <sdc_hci_cmd_cb_set_event_mask>:
    cb9c:	b510      	push	{r4, lr}
    cb9e:	f7f4 f8a9 	bl	cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cba2:	2000      	movs	r0, #0
    cba4:	bd10      	pop	{r4, pc}

0000cba6 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cba6:	b510      	push	{r4, lr}
    cba8:	f7f4 f8b4 	bl	d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cbac:	2000      	movs	r0, #0
    cbae:	bd10      	pop	{r4, pc}

0000cbb0 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cbb0:	f002 bf92 	b.w	fad8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cbb4 <sdc_hci_cmd_vs_conn_event_extend>:
    cbb4:	b508      	push	{r3, lr}
    cbb6:	7800      	ldrb	r0, [r0, #0]
    cbb8:	f88d 0000 	strb.w	r0, [sp]
    cbbc:	4668      	mov	r0, sp
    cbbe:	f002 fe6e 	bl	f89e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cbc2:	bd08      	pop	{r3, pc}

0000cbc4 <sdc_hci_cmd_vs_conn_update>:
    cbc4:	2001      	movs	r0, #1
    cbc6:	4770      	bx	lr

0000cbc8 <sdc_hci_cmd_vs_event_length_set>:
    cbc8:	f7f9 bfe2 	b.w	6b90 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cbcc <sdc_hci_cmd_vs_llpm_mode_set>:
    cbcc:	2001      	movs	r0, #1
    cbce:	4770      	bx	lr

0000cbd0 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    cbd0:	7881      	ldrb	r1, [r0, #2]
    cbd2:	8800      	ldrh	r0, [r0, #0]
    cbd4:	f002 be13 	b.w	f7fe <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000cbd8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cbd8:	7800      	ldrb	r0, [r0, #0]
    cbda:	b100      	cbz	r0, cbde <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cbdc:	2001      	movs	r0, #1
    cbde:	f002 be09 	b.w	f7f4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cbe2 <sdc_hci_cmd_vs_set_adv_randomness>:
    cbe2:	f002 be36 	b.w	f852 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000cbe6 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    cbe6:	b510      	push	{r4, lr}
    cbe8:	4604      	mov	r4, r0
    cbea:	f7ff f9f9 	bl	bfe0 <mpsl_temperature_get>
    cbee:	17c1      	asrs	r1, r0, #31
    cbf0:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cbf4:	1080      	asrs	r0, r0, #2
    cbf6:	287f      	cmp	r0, #127	; 0x7f
    cbf8:	dd01      	ble.n	cbfe <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    cbfa:	207f      	movs	r0, #127	; 0x7f
    cbfc:	e004      	b.n	cc08 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cbfe:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    cc02:	4288      	cmp	r0, r1
    cc04:	da00      	bge.n	cc08 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cc06:	4608      	mov	r0, r1
    cc08:	7020      	strb	r0, [r4, #0]
    cc0a:	2000      	movs	r0, #0
    cc0c:	bd10      	pop	{r4, pc}

0000cc0e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cc0e:	f002 be35 	b.w	f87c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cc12 <sdc_hci_cmd_ip_read_bd_addr>:
    cc12:	f002 bf34 	b.w	fa7e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cc16 <sdc_hci_cmd_ip_read_local_version_information>:
    cc16:	f7f9 bfc9 	b.w	6bac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cc1a <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    cc1a:	f002 bbc2 	b.w	f3a2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cc1e <sdc_hci_cmd_le_clear_filter_accept_list>:
    cc1e:	f002 bbd7 	b.w	f3d0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cc22 <sdc_hci_cmd_le_encrypt>:
    cc22:	f002 bbe2 	b.w	f3ea <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cc26 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    cc26:	8802      	ldrh	r2, [r0, #0]
    cc28:	800a      	strh	r2, [r1, #0]
    cc2a:	f002 bbe7 	b.w	f3fc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000cc2e <sdc_hci_cmd_le_long_term_key_request_reply>:
    cc2e:	8802      	ldrh	r2, [r0, #0]
    cc30:	800a      	strh	r2, [r1, #0]
    cc32:	f002 bbfc 	b.w	f42e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000cc36 <sdc_hci_cmd_le_rand>:
    cc36:	f002 bc24 	b.w	f482 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cc3a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    cc3a:	f002 bc28 	b.w	f48e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000cc3e <sdc_hci_cmd_le_read_buffer_size>:
    cc3e:	f7f9 beb5 	b.w	69ac <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cc42 <sdc_hci_cmd_le_read_channel_map>:
    cc42:	f7f9 bebd 	b.w	69c0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cc46 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    cc46:	f002 bc62 	b.w	f50e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cc4a <sdc_hci_cmd_le_read_max_data_length>:
    cc4a:	f002 bc2b 	b.w	f4a4 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cc4e <sdc_hci_cmd_le_read_phy>:
    cc4e:	f7f9 bedf 	b.w	6a10 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cc52 <sdc_hci_cmd_le_read_remote_features>:
    cc52:	f002 bc30 	b.w	f4b6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cc56 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cc56:	f7f9 bf01 	b.w	6a5c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cc5a <sdc_hci_cmd_le_read_transmit_power>:
    cc5a:	f002 bc48 	b.w	f4ee <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cc5e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    cc5e:	f002 bc5d 	b.w	f51c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cc62 <sdc_hci_cmd_le_set_adv_data>:
    cc62:	f002 bc70 	b.w	f546 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cc66 <sdc_hci_cmd_le_set_adv_enable>:
    cc66:	f002 bc83 	b.w	f570 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cc6a <sdc_hci_cmd_le_set_adv_params>:
    cc6a:	f002 bcb4 	b.w	f5d6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000cc6e <sdc_hci_cmd_le_set_data_length>:
    cc6e:	f002 bd47 	b.w	f700 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cc72 <sdc_hci_cmd_le_set_data_related_address_changes>:
    cc72:	f002 bd65 	b.w	f740 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000cc76 <sdc_hci_cmd_le_set_default_phy>:
    cc76:	f7f9 befb 	b.w	6a70 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cc7a <sdc_hci_cmd_le_set_event_mask>:
    cc7a:	b510      	push	{r4, lr}
    cc7c:	f7f4 f832 	bl	ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cc80:	2000      	movs	r0, #0
    cc82:	bd10      	pop	{r4, pc}

0000cc84 <sdc_hci_cmd_le_set_phy>:
    cc84:	f002 bd69 	b.w	f75a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cc88 <sdc_hci_cmd_le_set_random_address>:
    cc88:	f002 bd80 	b.w	f78c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cc8c <sdc_hci_cmd_le_set_scan_response_data>:
    cc8c:	f002 bd8c 	b.w	f7a8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cc90 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cc90:	f002 bd9f 	b.w	f7d2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cc94 <sdc_hci_cmd_lc_disconnect>:
    cc94:	f002 bb37 	b.w	f306 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cc98 <sdc_hci_cmd_lc_read_remote_version_information>:
    cc98:	f7f9 bf92 	b.w	6bc0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cc9c:	b570      	push	{r4, r5, r6, lr}
    cc9e:	880b      	ldrh	r3, [r1, #0]
    cca0:	7cc4      	ldrb	r4, [r0, #19]
    cca2:	f100 0518 	add.w	r5, r0, #24
    cca6:	f3c3 060e 	ubfx	r6, r3, #0, #15
    ccaa:	8802      	ldrh	r2, [r0, #0]
    ccac:	4435      	add	r5, r6
    ccae:	1d64      	adds	r4, r4, #5
    ccb0:	882d      	ldrh	r5, [r5, #0]
    ccb2:	4422      	add	r2, r4
    ccb4:	b292      	uxth	r2, r2
    ccb6:	4425      	add	r5, r4
    ccb8:	1e54      	subs	r4, r2, #1
    ccba:	442c      	add	r4, r5
    ccbc:	fb94 f4f2 	sdiv	r4, r4, r2
    ccc0:	fb02 6204 	mla	r2, r2, r4, r6
    ccc4:	8840      	ldrh	r0, [r0, #2]
    ccc6:	b292      	uxth	r2, r2
    ccc8:	4290      	cmp	r0, r2
    ccca:	d903      	bls.n	ccd4 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cccc:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    ccd0:	4310      	orrs	r0, r2
    ccd2:	e002      	b.n	ccda <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    ccd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ccd8:	4398      	bics	r0, r3
    ccda:	8008      	strh	r0, [r1, #0]
    ccdc:	bd70      	pop	{r4, r5, r6, pc}
    ccde:	0442      	lsls	r2, r0, #17
    cce0:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    cce4:	d107      	bne.n	ccf6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cce6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    ccea:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    ccee:	4288      	cmp	r0, r1
    ccf0:	d001      	beq.n	ccf6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    ccf2:	2001      	movs	r0, #1
    ccf4:	4770      	bx	lr
    ccf6:	2000      	movs	r0, #0
    ccf8:	4770      	bx	lr

0000ccfa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    ccfa:	8881      	ldrh	r1, [r0, #4]
    ccfc:	88c0      	ldrh	r0, [r0, #6]
    ccfe:	4288      	cmp	r0, r1
    cd00:	d101      	bne.n	cd06 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cd02:	2001      	movs	r0, #1
    cd04:	4770      	bx	lr
    cd06:	2000      	movs	r0, #0
    cd08:	4770      	bx	lr

0000cd0a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cd0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd0e:	460f      	mov	r7, r1
    cd10:	4604      	mov	r4, r0
    cd12:	f100 0118 	add.w	r1, r0, #24
    cd16:	8880      	ldrh	r0, [r0, #4]
    cd18:	2600      	movs	r6, #0
    cd1a:	f3c0 000e 	ubfx	r0, r0, #0, #15
    cd1e:	1845      	adds	r5, r0, r1
    cd20:	603e      	str	r6, [r7, #0]
    cd22:	89e0      	ldrh	r0, [r4, #14]
    cd24:	2800      	cmp	r0, #0
    cd26:	d016      	beq.n	cd56 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cd28:	8961      	ldrh	r1, [r4, #10]
    cd2a:	4408      	add	r0, r1
    cd2c:	b280      	uxth	r0, r0
    cd2e:	8160      	strh	r0, [r4, #10]
    cd30:	8829      	ldrh	r1, [r5, #0]
    cd32:	4288      	cmp	r0, r1
    cd34:	d905      	bls.n	cd42 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    cd36:	f240 1151 	movw	r1, #337	; 0x151
    cd3a:	f04f 0014 	mov.w	r0, #20
    cd3e:	f7f3 fe37 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd42:	d106      	bne.n	cd52 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cd44:	f104 0104 	add.w	r1, r4, #4
    cd48:	4620      	mov	r0, r4
    cd4a:	f7ff ffa7 	bl	cc9c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd4e:	8166      	strh	r6, [r4, #10]
    cd50:	603d      	str	r5, [r7, #0]
    cd52:	81e6      	strh	r6, [r4, #14]
    cd54:	2001      	movs	r0, #1
    cd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd5a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd5e:	4604      	mov	r4, r0
    cd60:	f100 0318 	add.w	r3, r0, #24
    cd64:	88c0      	ldrh	r0, [r0, #6]
    cd66:	460e      	mov	r6, r1
    cd68:	f3c0 070e 	ubfx	r7, r0, #0, #15
    cd6c:	8a20      	ldrh	r0, [r4, #16]
    cd6e:	19d9      	adds	r1, r3, r7
    cd70:	b108      	cbz	r0, cd76 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cd72:	42b0      	cmp	r0, r6
    cd74:	d202      	bcs.n	cd7c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cd76:	2000      	movs	r0, #0
    cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd7c:	89a0      	ldrh	r0, [r4, #12]
    cd7e:	2500      	movs	r5, #0
    cd80:	b140      	cbz	r0, cd94 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cd82:	f8b1 c000 	ldrh.w	ip, [r1]
    cd86:	4560      	cmp	r0, ip
    cd88:	d006      	beq.n	cd98 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    cd8a:	f44f 7101 	mov.w	r1, #516	; 0x204
    cd8e:	2014      	movs	r0, #20
    cd90:	f7f3 fe0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd94:	800d      	strh	r5, [r1, #0]
    cd96:	e00e      	b.n	cdb6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    cd98:	f894 c013 	ldrb.w	ip, [r4, #19]
    cd9c:	4418      	add	r0, r3
    cd9e:	f10c 0c05 	add.w	ip, ip, #5
    cda2:	44bc      	add	ip, r7
    cda4:	4460      	add	r0, ip
    cda6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    cdaa:	f820 cc03 	strh.w	ip, [r0, #-3]
    cdae:	f894 c016 	ldrb.w	ip, [r4, #22]
    cdb2:	f800 cc01 	strb.w	ip, [r0, #-1]
    cdb6:	89a0      	ldrh	r0, [r4, #12]
    cdb8:	4430      	add	r0, r6
    cdba:	81a0      	strh	r0, [r4, #12]
    cdbc:	8808      	ldrh	r0, [r1, #0]
    cdbe:	4430      	add	r0, r6
    cdc0:	8008      	strh	r0, [r1, #0]
    cdc2:	b12a      	cbz	r2, cdd0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    cdc4:	1da1      	adds	r1, r4, #6
    cdc6:	4620      	mov	r0, r4
    cdc8:	f7ff ff68 	bl	cc9c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cdcc:	81a5      	strh	r5, [r4, #12]
    cdce:	e00a      	b.n	cde6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    cdd0:	7ce0      	ldrb	r0, [r4, #19]
    cdd2:	89a1      	ldrh	r1, [r4, #12]
    cdd4:	1d40      	adds	r0, r0, #5
    cdd6:	4438      	add	r0, r7
    cdd8:	4419      	add	r1, r3
    cdda:	4408      	add	r0, r1
    cddc:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cde0:	82a1      	strh	r1, [r4, #20]
    cde2:	7880      	ldrb	r0, [r0, #2]
    cde4:	75a0      	strb	r0, [r4, #22]
    cde6:	8225      	strh	r5, [r4, #16]
    cde8:	2001      	movs	r0, #1
    cdea:	e7c5      	b.n	cd78 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000cdec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    cdec:	1c80      	adds	r0, r0, #2
    cdee:	4770      	bx	lr

0000cdf0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    cdf0:	b510      	push	{r4, lr}
    cdf2:	4604      	mov	r4, r0
    cdf4:	88c0      	ldrh	r0, [r0, #6]
    cdf6:	88a1      	ldrh	r1, [r4, #4]
    cdf8:	4281      	cmp	r1, r0
    cdfa:	d003      	beq.n	ce04 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    cdfc:	8960      	ldrh	r0, [r4, #10]
    cdfe:	b908      	cbnz	r0, ce04 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    ce00:	89e0      	ldrh	r0, [r4, #14]
    ce02:	b108      	cbz	r0, ce08 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    ce04:	2000      	movs	r0, #0
    ce06:	bd10      	pop	{r4, pc}
    ce08:	1d21      	adds	r1, r4, #4
    ce0a:	4620      	mov	r0, r4
    ce0c:	f7ff ff46 	bl	cc9c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ce10:	2000      	movs	r0, #0
    ce12:	81e0      	strh	r0, [r4, #14]
    ce14:	2001      	movs	r0, #1
    ce16:	bd10      	pop	{r4, pc}

0000ce18 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    ce18:	b510      	push	{r4, lr}
    ce1a:	4604      	mov	r4, r0
    ce1c:	f100 0218 	add.w	r2, r0, #24
    ce20:	88c0      	ldrh	r0, [r0, #6]
    ce22:	f3c0 000e 	ubfx	r0, r0, #0, #15
    ce26:	4402      	add	r2, r0
    ce28:	8820      	ldrh	r0, [r4, #0]
    ce2a:	2845      	cmp	r0, #69	; 0x45
    ce2c:	d200      	bcs.n	ce30 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    ce2e:	2045      	movs	r0, #69	; 0x45
    ce30:	4288      	cmp	r0, r1
    ce32:	d204      	bcs.n	ce3e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    ce34:	f44f 7182 	mov.w	r1, #260	; 0x104
    ce38:	2014      	movs	r0, #20
    ce3a:	f7f3 fdb9 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce3e:	7ca0      	ldrb	r0, [r4, #18]
    ce40:	2800      	cmp	r0, #0
    ce42:	d003      	beq.n	ce4c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    ce44:	8810      	ldrh	r0, [r2, #0]
    ce46:	4288      	cmp	r0, r1
    ce48:	d201      	bcs.n	ce4e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    ce4a:	2000      	movs	r0, #0
    ce4c:	bd10      	pop	{r4, pc}
    ce4e:	8011      	strh	r1, [r2, #0]
    ce50:	1da1      	adds	r1, r4, #6
    ce52:	4620      	mov	r0, r4
    ce54:	f7ff ff22 	bl	cc9c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ce58:	2000      	movs	r0, #0
    ce5a:	74a0      	strb	r0, [r4, #18]
    ce5c:	2001      	movs	r0, #1
    ce5e:	bd10      	pop	{r4, pc}

0000ce60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    ce60:	b510      	push	{r4, lr}
    ce62:	88c4      	ldrh	r4, [r0, #6]
    ce64:	8883      	ldrh	r3, [r0, #4]
    ce66:	4601      	mov	r1, r0
    ce68:	f100 0218 	add.w	r2, r0, #24
    ce6c:	f3c3 000e 	ubfx	r0, r3, #0, #15
    ce70:	4410      	add	r0, r2
    ce72:	42a3      	cmp	r3, r4
    ce74:	d002      	beq.n	ce7c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    ce76:	8949      	ldrh	r1, [r1, #10]
    ce78:	2900      	cmp	r1, #0
    ce7a:	d000      	beq.n	ce7e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    ce7c:	2000      	movs	r0, #0
    ce7e:	bd10      	pop	{r4, pc}

0000ce80 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    ce80:	8803      	ldrh	r3, [r0, #0]
    ce82:	2b45      	cmp	r3, #69	; 0x45
    ce84:	d200      	bcs.n	ce88 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    ce86:	2345      	movs	r3, #69	; 0x45
    ce88:	8013      	strh	r3, [r2, #0]
    ce8a:	88c2      	ldrh	r2, [r0, #6]
    ce8c:	f3c2 030e 	ubfx	r3, r2, #0, #15
    ce90:	f100 0218 	add.w	r2, r0, #24
    ce94:	441a      	add	r2, r3
    ce96:	600a      	str	r2, [r1, #0]
    ce98:	8980      	ldrh	r0, [r0, #12]
    ce9a:	4770      	bx	lr

0000ce9c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ce9c:	7cc0      	ldrb	r0, [r0, #19]
    ce9e:	1d40      	adds	r0, r0, #5
    cea0:	4408      	add	r0, r1
    cea2:	1ec0      	subs	r0, r0, #3
    cea4:	6010      	str	r0, [r2, #0]
    cea6:	8808      	ldrh	r0, [r1, #0]
    cea8:	4770      	bx	lr

0000ceaa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    ceaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ceae:	460e      	mov	r6, r1
    ceb0:	88c1      	ldrh	r1, [r0, #6]
    ceb2:	8902      	ldrh	r2, [r0, #8]
    ceb4:	4604      	mov	r4, r0
    ceb6:	f100 0818 	add.w	r8, r0, #24
    ceba:	8800      	ldrh	r0, [r0, #0]
    cebc:	f3c1 050e 	ubfx	r5, r1, #0, #15
    cec0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    cec4:	2845      	cmp	r0, #69	; 0x45
    cec6:	d200      	bcs.n	ceca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cec8:	2045      	movs	r0, #69	; 0x45
    ceca:	42b0      	cmp	r0, r6
    cecc:	d203      	bcs.n	ced6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    cece:	21c6      	movs	r1, #198	; 0xc6
    ced0:	2014      	movs	r0, #20
    ced2:	f7f3 fd6d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ced6:	4610      	mov	r0, r2
    ced8:	f7ff ff01 	bl	ccde <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cedc:	b110      	cbz	r0, cee4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    cede:	2000      	movs	r0, #0
    cee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cee4:	42af      	cmp	r7, r5
    cee6:	d908      	bls.n	cefa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cee8:	7ce1      	ldrb	r1, [r4, #19]
    ceea:	1b78      	subs	r0, r7, r5
    ceec:	1a40      	subs	r0, r0, r1
    ceee:	1f40      	subs	r0, r0, #5
    cef0:	4286      	cmp	r6, r0
    cef2:	dd02      	ble.n	cefa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cef4:	2000      	movs	r0, #0
    cef6:	74a0      	strb	r0, [r4, #18]
    cef8:	e7f1      	b.n	cede <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    cefa:	eb08 0005 	add.w	r0, r8, r5
    cefe:	2101      	movs	r1, #1
    cf00:	8006      	strh	r6, [r0, #0]
    cf02:	74a1      	strb	r1, [r4, #18]
    cf04:	e7ec      	b.n	cee0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cf06 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cf06:	b538      	push	{r3, r4, r5, lr}
    cf08:	88c4      	ldrh	r4, [r0, #6]
    cf0a:	8881      	ldrh	r1, [r0, #4]
    cf0c:	f100 0218 	add.w	r2, r0, #24
    cf10:	f3c1 030e 	ubfx	r3, r1, #0, #15
    cf14:	441a      	add	r2, r3
    cf16:	42a1      	cmp	r1, r4
    cf18:	d010      	beq.n	cf3c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cf1a:	8943      	ldrh	r3, [r0, #10]
    cf1c:	89c5      	ldrh	r5, [r0, #14]
    cf1e:	8812      	ldrh	r2, [r2, #0]
    cf20:	442b      	add	r3, r5
    cf22:	4293      	cmp	r3, r2
    cf24:	d308      	bcc.n	cf38 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cf26:	f8ad 1000 	strh.w	r1, [sp]
    cf2a:	4669      	mov	r1, sp
    cf2c:	f7ff feb6 	bl	cc9c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf30:	f8bd 0000 	ldrh.w	r0, [sp]
    cf34:	42a0      	cmp	r0, r4
    cf36:	d001      	beq.n	cf3c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cf38:	2001      	movs	r0, #1
    cf3a:	bd38      	pop	{r3, r4, r5, pc}
    cf3c:	2000      	movs	r0, #0
    cf3e:	bd38      	pop	{r3, r4, r5, pc}

0000cf40 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cf40:	b570      	push	{r4, r5, r6, lr}
    cf42:	88c6      	ldrh	r6, [r0, #6]
    cf44:	8885      	ldrh	r5, [r0, #4]
    cf46:	4603      	mov	r3, r0
    cf48:	f100 0418 	add.w	r4, r0, #24
    cf4c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    cf50:	4420      	add	r0, r4
    cf52:	42b5      	cmp	r5, r6
    cf54:	d102      	bne.n	cf5c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cf56:	2000      	movs	r0, #0
    cf58:	81d8      	strh	r0, [r3, #14]
    cf5a:	bd70      	pop	{r4, r5, r6, pc}
    cf5c:	8804      	ldrh	r4, [r0, #0]
    cf5e:	895d      	ldrh	r5, [r3, #10]
    cf60:	7cde      	ldrb	r6, [r3, #19]
    cf62:	1b64      	subs	r4, r4, r5
    cf64:	4435      	add	r5, r6
    cf66:	4428      	add	r0, r5
    cf68:	880d      	ldrh	r5, [r1, #0]
    cf6a:	b2a4      	uxth	r4, r4
    cf6c:	1c80      	adds	r0, r0, #2
    cf6e:	42a5      	cmp	r5, r4
    cf70:	d900      	bls.n	cf74 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cf72:	800c      	strh	r4, [r1, #0]
    cf74:	895c      	ldrh	r4, [r3, #10]
    cf76:	b124      	cbz	r4, cf82 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cf78:	2400      	movs	r4, #0
    cf7a:	7014      	strb	r4, [r2, #0]
    cf7c:	8809      	ldrh	r1, [r1, #0]
    cf7e:	81d9      	strh	r1, [r3, #14]
    cf80:	bd70      	pop	{r4, r5, r6, pc}
    cf82:	2401      	movs	r4, #1
    cf84:	e7f9      	b.n	cf7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cf86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cf86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf8a:	461d      	mov	r5, r3
    cf8c:	4616      	mov	r6, r2
    cf8e:	9f06      	ldr	r7, [sp, #24]
    cf90:	460b      	mov	r3, r1
    cf92:	4604      	mov	r4, r0
    cf94:	463a      	mov	r2, r7
    cf96:	4629      	mov	r1, r5
    cf98:	4630      	mov	r0, r6
    cf9a:	f000 f839 	bl	d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cf9e:	4283      	cmp	r3, r0
    cfa0:	d201      	bcs.n	cfa6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cfa2:	219e      	movs	r1, #158	; 0x9e
    cfa4:	e012      	b.n	cfcc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cfa6:	07a0      	lsls	r0, r4, #30
    cfa8:	d001      	beq.n	cfae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    cfaa:	219f      	movs	r1, #159	; 0x9f
    cfac:	e00e      	b.n	cfcc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cfae:	2218      	movs	r2, #24
    cfb0:	2100      	movs	r1, #0
    cfb2:	4620      	mov	r0, r4
    cfb4:	f003 fb2d 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cfb8:	19a8      	adds	r0, r5, r6
    cfba:	1d40      	adds	r0, r0, #5
    cfbc:	4378      	muls	r0, r7
    cfbe:	b280      	uxth	r0, r0
    cfc0:	74e5      	strb	r5, [r4, #19]
    cfc2:	8060      	strh	r0, [r4, #2]
    cfc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cfc8:	d903      	bls.n	cfd2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    cfca:	21a4      	movs	r1, #164	; 0xa4
    cfcc:	2014      	movs	r0, #20
    cfce:	f7f3 fcef 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfd2:	8026      	strh	r6, [r4, #0]
    cfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cfd8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cfd8:	b570      	push	{r4, r5, r6, lr}
    cfda:	460b      	mov	r3, r1
    cfdc:	4604      	mov	r4, r0
    cfde:	f100 0118 	add.w	r1, r0, #24
    cfe2:	8902      	ldrh	r2, [r0, #8]
    cfe4:	8880      	ldrh	r0, [r0, #4]
    cfe6:	f3c2 050e 	ubfx	r5, r2, #0, #15
    cfea:	440d      	add	r5, r1
    cfec:	4282      	cmp	r2, r0
    cfee:	d101      	bne.n	cff4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    cff0:	2000      	movs	r0, #0
    cff2:	bd70      	pop	{r4, r5, r6, pc}
    cff4:	b123      	cbz	r3, d000 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    cff6:	7ce2      	ldrb	r2, [r4, #19]
    cff8:	1ca9      	adds	r1, r5, #2
    cffa:	4618      	mov	r0, r3
    cffc:	f003 fa8f 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d000:	882d      	ldrh	r5, [r5, #0]
    d002:	f104 0108 	add.w	r1, r4, #8
    d006:	4620      	mov	r0, r4
    d008:	f7ff fe48 	bl	cc9c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d00c:	4628      	mov	r0, r5
    d00e:	bd70      	pop	{r4, r5, r6, pc}

0000d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d010:	4401      	add	r1, r0
    d012:	1d49      	adds	r1, r1, #5
    d014:	4351      	muls	r1, r2
    d016:	b28a      	uxth	r2, r1
    d018:	2100      	movs	r1, #0
    d01a:	2845      	cmp	r0, #69	; 0x45
    d01c:	d202      	bcs.n	d024 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d01e:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d022:	b281      	uxth	r1, r0
    d024:	3218      	adds	r2, #24
    d026:	1850      	adds	r0, r2, r1
    d028:	b280      	uxth	r0, r0
    d02a:	4770      	bx	lr

0000d02c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d030:	4688      	mov	r8, r1
    d032:	88c1      	ldrh	r1, [r0, #6]
    d034:	4604      	mov	r4, r0
    d036:	8900      	ldrh	r0, [r0, #8]
    d038:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d03c:	f104 0518 	add.w	r5, r4, #24
    d040:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d044:	eb05 0906 	add.w	r9, r5, r6
    d048:	f7ff fe49 	bl	ccde <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d04c:	2200      	movs	r2, #0
    d04e:	b998      	cbnz	r0, d078 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d050:	8820      	ldrh	r0, [r4, #0]
    d052:	2845      	cmp	r0, #69	; 0x45
    d054:	d200      	bcs.n	d058 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d056:	2045      	movs	r0, #69	; 0x45
    d058:	42b7      	cmp	r7, r6
    d05a:	d906      	bls.n	d06a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d05c:	7ce3      	ldrb	r3, [r4, #19]
    d05e:	1bb9      	subs	r1, r7, r6
    d060:	1ac9      	subs	r1, r1, r3
    d062:	1f49      	subs	r1, r1, #5
    d064:	4281      	cmp	r1, r0
    d066:	da00      	bge.n	d06a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d068:	4608      	mov	r0, r1
    d06a:	89a1      	ldrh	r1, [r4, #12]
    d06c:	b111      	cbz	r1, d074 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d06e:	f8b9 3000 	ldrh.w	r3, [r9]
    d072:	1ac0      	subs	r0, r0, r3
    d074:	4540      	cmp	r0, r8
    d076:	da03      	bge.n	d080 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d078:	8222      	strh	r2, [r4, #16]
    d07a:	2000      	movs	r0, #0
    d07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d080:	7ce0      	ldrb	r0, [r4, #19]
    d082:	4429      	add	r1, r5
    d084:	1d40      	adds	r0, r0, #5
    d086:	4430      	add	r0, r6
    d088:	4408      	add	r0, r1
    d08a:	f8a4 8010 	strh.w	r8, [r4, #16]
    d08e:	1ec0      	subs	r0, r0, #3
    d090:	e7f4      	b.n	d07c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d092 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d092:	b570      	push	{r4, r5, r6, lr}
    d094:	2300      	movs	r3, #0
    d096:	f1a1 0208 	sub.w	r2, r1, #8
    d09a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d09e:	42a2      	cmp	r2, r4
    d0a0:	d304      	bcc.n	d0ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d0a2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d0a6:	2015      	movs	r0, #21
    d0a8:	f7f3 fc82 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0ac:	6802      	ldr	r2, [r0, #0]
    d0ae:	b90a      	cbnz	r2, d0b4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d0b0:	e01e      	b.n	d0f0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d0b2:	4610      	mov	r0, r2
    d0b4:	6802      	ldr	r2, [r0, #0]
    d0b6:	8893      	ldrh	r3, [r2, #4]
    d0b8:	428b      	cmp	r3, r1
    d0ba:	d002      	beq.n	d0c2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d0bc:	6813      	ldr	r3, [r2, #0]
    d0be:	2b00      	cmp	r3, #0
    d0c0:	d1f7      	bne.n	d0b2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d0c2:	8894      	ldrh	r4, [r2, #4]
    d0c4:	4613      	mov	r3, r2
    d0c6:	428c      	cmp	r4, r1
    d0c8:	d101      	bne.n	d0ce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d0ca:	6811      	ldr	r1, [r2, #0]
    d0cc:	e00d      	b.n	d0ea <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d0ce:	f101 0508 	add.w	r5, r1, #8
    d0d2:	b2ae      	uxth	r6, r5
    d0d4:	2500      	movs	r5, #0
    d0d6:	42b4      	cmp	r4, r6
    d0d8:	d309      	bcc.n	d0ee <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d0da:	1a64      	subs	r4, r4, r1
    d0dc:	4411      	add	r1, r2
    d0de:	600d      	str	r5, [r1, #0]
    d0e0:	808c      	strh	r4, [r1, #4]
    d0e2:	6802      	ldr	r2, [r0, #0]
    d0e4:	6812      	ldr	r2, [r2, #0]
    d0e6:	6002      	str	r2, [r0, #0]
    d0e8:	600a      	str	r2, [r1, #0]
    d0ea:	6001      	str	r1, [r0, #0]
    d0ec:	e000      	b.n	d0f0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d0ee:	2300      	movs	r3, #0
    d0f0:	4618      	mov	r0, r3
    d0f2:	bd70      	pop	{r4, r5, r6, pc}

0000d0f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d0f4:	b510      	push	{r4, lr}
    d0f6:	000c      	movs	r4, r1
    d0f8:	d004      	beq.n	d104 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d0fa:	2c08      	cmp	r4, #8
    d0fc:	d207      	bcs.n	d10e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d0fe:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d102:	e00a      	b.n	d11a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d104:	b108      	cbz	r0, d10a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d106:	2100      	movs	r1, #0
    d108:	6001      	str	r1, [r0, #0]
    d10a:	2000      	movs	r0, #0
    d10c:	bd10      	pop	{r4, pc}
    d10e:	b158      	cbz	r0, d128 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d110:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d114:	d304      	bcc.n	d120 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d116:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d11a:	2015      	movs	r0, #21
    d11c:	f7f3 fc48 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d120:	b2a1      	uxth	r1, r4
    d122:	6800      	ldr	r0, [r0, #0]
    d124:	f000 f814 	bl	d150 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d128:	1d20      	adds	r0, r4, #4
    d12a:	bd10      	pop	{r4, pc}

0000d12c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d12c:	2100      	movs	r1, #0
    d12e:	6802      	ldr	r2, [r0, #0]
    d130:	e003      	b.n	d13a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d132:	8893      	ldrh	r3, [r2, #4]
    d134:	6812      	ldr	r2, [r2, #0]
    d136:	4419      	add	r1, r3
    d138:	b289      	uxth	r1, r1
    d13a:	2a00      	cmp	r2, #0
    d13c:	d1f9      	bne.n	d132 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d13e:	f000 b807 	b.w	d150 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d142 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d142:	2300      	movs	r3, #0
    d144:	600b      	str	r3, [r1, #0]
    d146:	808a      	strh	r2, [r1, #4]
    d148:	6802      	ldr	r2, [r0, #0]
    d14a:	600a      	str	r2, [r1, #0]
    d14c:	6001      	str	r1, [r0, #0]
    d14e:	4770      	bx	lr
    d150:	2300      	movs	r3, #0
    d152:	6043      	str	r3, [r0, #4]
    d154:	1d02      	adds	r2, r0, #4
    d156:	8101      	strh	r1, [r0, #8]
    d158:	6002      	str	r2, [r0, #0]
    d15a:	4770      	bx	lr
    d15c:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d160:	8159      	strh	r1, [r3, #10]
    d162:	4611      	mov	r1, r2
    d164:	f000 b814 	b.w	d190 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d168:	b170      	cbz	r0, d188 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d16a:	7882      	ldrb	r2, [r0, #2]
    d16c:	fbb1 f3f2 	udiv	r3, r1, r2
    d170:	fb02 1213 	mls	r2, r2, r3, r1
    d174:	b2d2      	uxtb	r2, r2
    d176:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d17a:	895b      	ldrh	r3, [r3, #10]
    d17c:	428b      	cmp	r3, r1
    d17e:	d101      	bne.n	d184 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d180:	4610      	mov	r0, r2
    d182:	4770      	bx	lr
    d184:	78c3      	ldrb	r3, [r0, #3]
    d186:	b10b      	cbz	r3, d18c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d188:	20ff      	movs	r0, #255	; 0xff
    d18a:	4770      	bx	lr
    d18c:	f7f3 bef2 	b.w	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d190:	8802      	ldrh	r2, [r0, #0]
    d192:	fb01 0102 	mla	r1, r1, r2, r0
    d196:	7880      	ldrb	r0, [r0, #2]
    d198:	220a      	movs	r2, #10
    d19a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d19e:	4408      	add	r0, r1
    d1a0:	4770      	bx	lr

0000d1a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d1a2:	b51c      	push	{r2, r3, r4, lr}
    d1a4:	4604      	mov	r4, r0
    d1a6:	2000      	movs	r0, #0
    d1a8:	9001      	str	r0, [sp, #4]
    d1aa:	9000      	str	r0, [sp, #0]
    d1ac:	f88d 4006 	strb.w	r4, [sp, #6]
    d1b0:	e00a      	b.n	d1c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d1b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d1b6:	4621      	mov	r1, r4
    d1b8:	f7f3 ffca 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d1bc:	b120      	cbz	r0, d1c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d1be:	f240 217e 	movw	r1, #638	; 0x27e
    d1c2:	2017      	movs	r0, #23
    d1c4:	f7f3 fbf4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1c8:	4668      	mov	r0, sp
    d1ca:	f7f3 ff71 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d1ce:	2800      	cmp	r0, #0
    d1d0:	d0ef      	beq.n	d1b2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d1d2:	bd1c      	pop	{r2, r3, r4, pc}

0000d1d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d1d4:	b570      	push	{r4, r5, r6, lr}
    d1d6:	460e      	mov	r6, r1
    d1d8:	461d      	mov	r5, r3
    d1da:	4611      	mov	r1, r2
    d1dc:	f000 f813 	bl	d206 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d1e0:	4604      	mov	r4, r0
    d1e2:	4629      	mov	r1, r5
    d1e4:	4630      	mov	r0, r6
    d1e6:	f000 f804 	bl	d1f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d1ea:	4420      	add	r0, r4
    d1ec:	1d00      	adds	r0, r0, #4
    d1ee:	b280      	uxth	r0, r0
    d1f0:	bd70      	pop	{r4, r5, r6, pc}
    d1f2:	b510      	push	{r4, lr}
    d1f4:	460a      	mov	r2, r1
    d1f6:	2109      	movs	r1, #9
    d1f8:	f7ff ff0a 	bl	d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1fc:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d200:	1cc0      	adds	r0, r0, #3
    d202:	4008      	ands	r0, r1
    d204:	bd10      	pop	{r4, pc}
    d206:	b510      	push	{r4, lr}
    d208:	460a      	mov	r2, r1
    d20a:	210a      	movs	r1, #10
    d20c:	f7ff ff00 	bl	d010 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d210:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d214:	1cc0      	adds	r0, r0, #3
    d216:	4008      	ands	r0, r1
    d218:	bd10      	pop	{r4, pc}
    d21a:	b109      	cbz	r1, d220 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d21c:	2100      	movs	r1, #0
    d21e:	e000      	b.n	d222 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d220:	2102      	movs	r1, #2
    d222:	1843      	adds	r3, r0, r1
    d224:	7d1a      	ldrb	r2, [r3, #20]
    d226:	2a02      	cmp	r2, #2
    d228:	d008      	beq.n	d23c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d22a:	7d5b      	ldrb	r3, [r3, #21]
    d22c:	2b02      	cmp	r3, #2
    d22e:	d009      	beq.n	d244 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d230:	2a03      	cmp	r2, #3
    d232:	d003      	beq.n	d23c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d234:	2b03      	cmp	r3, #3
    d236:	d005      	beq.n	d244 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d238:	2000      	movs	r0, #0
    d23a:	4770      	bx	lr
    d23c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d240:	8b00      	ldrh	r0, [r0, #24]
    d242:	4770      	bx	lr
    d244:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d248:	8b40      	ldrh	r0, [r0, #26]
    d24a:	4770      	bx	lr
    d24c:	b109      	cbz	r1, d252 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d24e:	2100      	movs	r1, #0
    d250:	e000      	b.n	d254 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d252:	2102      	movs	r1, #2
    d254:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d258:	8b01      	ldrh	r1, [r0, #24]
    d25a:	b911      	cbnz	r1, d262 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d25c:	8b40      	ldrh	r0, [r0, #26]
    d25e:	2800      	cmp	r0, #0
    d260:	d000      	beq.n	d264 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d262:	2001      	movs	r0, #1
    d264:	4770      	bx	lr
    d266:	b538      	push	{r3, r4, r5, lr}
    d268:	7883      	ldrb	r3, [r0, #2]
    d26a:	f88d 3000 	strb.w	r3, [sp]
    d26e:	9b00      	ldr	r3, [sp, #0]
    d270:	9300      	str	r3, [sp, #0]
    d272:	f89d 3000 	ldrb.w	r3, [sp]
    d276:	b95b      	cbnz	r3, d290 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d278:	2400      	movs	r4, #0
    d27a:	b10a      	cbz	r2, d280 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d27c:	2300      	movs	r3, #0
    d27e:	e000      	b.n	d282 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d280:	2302      	movs	r3, #2
    d282:	18c2      	adds	r2, r0, r3
    d284:	7d15      	ldrb	r5, [r2, #20]
    d286:	2d02      	cmp	r5, #2
    d288:	d004      	beq.n	d294 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d28a:	7d52      	ldrb	r2, [r2, #21]
    d28c:	2a02      	cmp	r2, #2
    d28e:	d004      	beq.n	d29a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d290:	2000      	movs	r0, #0
    d292:	bd38      	pop	{r3, r4, r5, pc}
    d294:	461a      	mov	r2, r3
    d296:	1c5b      	adds	r3, r3, #1
    d298:	e000      	b.n	d29c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d29a:	1c5a      	adds	r2, r3, #1
    d29c:	b179      	cbz	r1, d2be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d29e:	18c5      	adds	r5, r0, r3
    d2a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d2a4:	752c      	strb	r4, [r5, #20]
    d2a6:	831c      	strh	r4, [r3, #24]
    d2a8:	2303      	movs	r3, #3
    d2aa:	1884      	adds	r4, r0, r2
    d2ac:	7523      	strb	r3, [r4, #20]
    d2ae:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d2b2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d2b6:	685b      	ldr	r3, [r3, #4]
    d2b8:	600b      	str	r3, [r1, #0]
    d2ba:	8b00      	ldrh	r0, [r0, #24]
    d2bc:	8088      	strh	r0, [r1, #4]
    d2be:	2001      	movs	r0, #1
    d2c0:	bd38      	pop	{r3, r4, r5, pc}
    d2c2:	b510      	push	{r4, lr}
    d2c4:	b109      	cbz	r1, d2ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d2c6:	2100      	movs	r1, #0
    d2c8:	e000      	b.n	d2cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d2ca:	2102      	movs	r1, #2
    d2cc:	1843      	adds	r3, r0, r1
    d2ce:	7d1c      	ldrb	r4, [r3, #20]
    d2d0:	4294      	cmp	r4, r2
    d2d2:	d103      	bne.n	d2dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d2d4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d2d8:	8b00      	ldrh	r0, [r0, #24]
    d2da:	bd10      	pop	{r4, pc}
    d2dc:	7d5b      	ldrb	r3, [r3, #21]
    d2de:	4293      	cmp	r3, r2
    d2e0:	d103      	bne.n	d2ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d2e2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d2e6:	8b40      	ldrh	r0, [r0, #26]
    d2e8:	bd10      	pop	{r4, pc}
    d2ea:	2000      	movs	r0, #0
    d2ec:	bd10      	pop	{r4, pc}
    d2ee:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d2f2:	d201      	bcs.n	d2f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d2f4:	0841      	lsrs	r1, r0, #1
    d2f6:	e000      	b.n	d2fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d2f8:	21ff      	movs	r1, #255	; 0xff
    d2fa:	1a40      	subs	r0, r0, r1
    d2fc:	f240 6172 	movw	r1, #1650	; 0x672
    d300:	4288      	cmp	r0, r1
    d302:	db00      	blt.n	d306 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d304:	4608      	mov	r0, r1
    d306:	b280      	uxth	r0, r0
    d308:	4770      	bx	lr

0000d30a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d30a:	2101      	movs	r1, #1
    d30c:	f7ff bf85 	b.w	d21a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d310 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d314:	4606      	mov	r6, r0
    d316:	f342 0780 	sbfx	r7, r2, #2, #1
    d31a:	7848      	ldrb	r0, [r1, #1]
    d31c:	460c      	mov	r4, r1
    d31e:	f022 0504 	bic.w	r5, r2, #4
    d322:	1c7f      	adds	r7, r7, #1
    d324:	b100      	cbz	r0, d328 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d326:	b90d      	cbnz	r5, d32c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d328:	4328      	orrs	r0, r5
    d32a:	d104      	bne.n	d336 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d32c:	b145      	cbz	r5, d340 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d32e:	2100      	movs	r1, #0
    d330:	4620      	mov	r0, r4
    d332:	f7f4 f82d 	bl	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    d336:	20ff      	movs	r0, #255	; 0xff
    d338:	70a0      	strb	r0, [r4, #2]
    d33a:	b11f      	cbz	r7, d344 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d33c:	2000      	movs	r0, #0
    d33e:	e002      	b.n	d346 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d340:	2101      	movs	r1, #1
    d342:	e7f5      	b.n	d330 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d344:	2002      	movs	r0, #2
    d346:	1821      	adds	r1, r4, r0
    d348:	7d09      	ldrb	r1, [r1, #20]
    d34a:	2903      	cmp	r1, #3
    d34c:	d102      	bne.n	d354 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d34e:	2d02      	cmp	r5, #2
    d350:	d000      	beq.n	d354 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d352:	1c40      	adds	r0, r0, #1
    d354:	1822      	adds	r2, r4, r0
    d356:	2101      	movs	r1, #1
    d358:	7511      	strb	r1, [r2, #20]
    d35a:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d35e:	2200      	movs	r2, #0
    d360:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d364:	830a      	strh	r2, [r1, #24]
    d366:	6840      	ldr	r0, [r0, #4]
    d368:	70a2      	strb	r2, [r4, #2]
    d36a:	4631      	mov	r1, r6
    d36c:	f362 010f 	bfi	r1, r2, #0, #16
    d370:	e9c6 0100 	strd	r0, r1, [r6]
    d374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d378 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d37c:	461e      	mov	r6, r3
    d37e:	4613      	mov	r3, r2
    d380:	4604      	mov	r4, r0
    d382:	b109      	cbz	r1, d388 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d384:	2000      	movs	r0, #0
    d386:	e000      	b.n	d38a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d388:	2002      	movs	r0, #2
    d38a:	21ff      	movs	r1, #255	; 0xff
    d38c:	70a1      	strb	r1, [r4, #2]
    d38e:	1821      	adds	r1, r4, r0
    d390:	7d0a      	ldrb	r2, [r1, #20]
    d392:	2a01      	cmp	r2, #1
    d394:	d003      	beq.n	d39e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d396:	7d49      	ldrb	r1, [r1, #21]
    d398:	2901      	cmp	r1, #1
    d39a:	d10c      	bne.n	d3b6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d39c:	1c40      	adds	r0, r0, #1
    d39e:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d3a2:	2700      	movs	r7, #0
    d3a4:	8b29      	ldrh	r1, [r5, #24]
    d3a6:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d3aa:	198a      	adds	r2, r1, r6
    d3ac:	4562      	cmp	r2, ip
    d3ae:	d905      	bls.n	d3bc <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d3b0:	4420      	add	r0, r4
    d3b2:	832f      	strh	r7, [r5, #24]
    d3b4:	7507      	strb	r7, [r0, #20]
    d3b6:	2000      	movs	r0, #0
    d3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3bc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d3c0:	4632      	mov	r2, r6
    d3c2:	6840      	ldr	r0, [r0, #4]
    d3c4:	4408      	add	r0, r1
    d3c6:	4619      	mov	r1, r3
    d3c8:	f003 f8a9 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3cc:	8b28      	ldrh	r0, [r5, #24]
    d3ce:	4430      	add	r0, r6
    d3d0:	8328      	strh	r0, [r5, #24]
    d3d2:	70a7      	strb	r7, [r4, #2]
    d3d4:	2001      	movs	r0, #1
    d3d6:	e7ef      	b.n	d3b8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d3d8 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d3d8:	b510      	push	{r4, lr}
    d3da:	2101      	movs	r1, #1
    d3dc:	f7ff ff36 	bl	d24c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d3e0:	2800      	cmp	r0, #0
    d3e2:	d000      	beq.n	d3e6 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d3e4:	2001      	movs	r0, #1
    d3e6:	bd10      	pop	{r4, pc}

0000d3e8 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d3e8:	2201      	movs	r2, #1
    d3ea:	f7ff bf3c 	b.w	d266 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d3ee <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d3ee:	2200      	movs	r2, #0
    d3f0:	f7ff bf39 	b.w	d266 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d3f4 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    d3f4:	b510      	push	{r4, lr}
    d3f6:	2100      	movs	r1, #0
    d3f8:	f7ff ff28 	bl	d24c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d3fc:	2800      	cmp	r0, #0
    d3fe:	d000      	beq.n	d402 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    d400:	2001      	movs	r0, #1
    d402:	bd10      	pop	{r4, pc}

0000d404 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d404:	b570      	push	{r4, r5, r6, lr}
    d406:	b109      	cbz	r1, d40c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d408:	2300      	movs	r3, #0
    d40a:	e000      	b.n	d40e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d40c:	2302      	movs	r3, #2
    d40e:	21ff      	movs	r1, #255	; 0xff
    d410:	7081      	strb	r1, [r0, #2]
    d412:	18c1      	adds	r1, r0, r3
    d414:	2402      	movs	r4, #2
    d416:	7d0d      	ldrb	r5, [r1, #20]
    d418:	2d01      	cmp	r5, #1
    d41a:	d007      	beq.n	d42c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d41c:	7d4d      	ldrb	r5, [r1, #21]
    d41e:	2d01      	cmp	r5, #1
    d420:	d009      	beq.n	d436 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d422:	f44f 718b 	mov.w	r1, #278	; 0x116
    d426:	2009      	movs	r0, #9
    d428:	f7f3 fac2 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d42c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d430:	831a      	strh	r2, [r3, #24]
    d432:	750c      	strb	r4, [r1, #20]
    d434:	e003      	b.n	d43e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d436:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d43a:	835a      	strh	r2, [r3, #26]
    d43c:	754c      	strb	r4, [r1, #21]
    d43e:	2100      	movs	r1, #0
    d440:	7081      	strb	r1, [r0, #2]
    d442:	bd70      	pop	{r4, r5, r6, pc}

0000d444 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d444:	2101      	movs	r1, #1
    d446:	7001      	strb	r1, [r0, #0]
    d448:	4770      	bx	lr

0000d44a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d44a:	2201      	movs	r2, #1
    d44c:	4611      	mov	r1, r2
    d44e:	f7ff bf38 	b.w	d2c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d452 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d452:	2201      	movs	r2, #1
    d454:	2100      	movs	r1, #0
    d456:	f7ff bf34 	b.w	d2c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d45a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d45a:	2100      	movs	r1, #0
    d45c:	f7ff bedd 	b.w	d21a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d460:	2800      	cmp	r0, #0
    d462:	db09      	blt.n	d478 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d464:	f000 021f 	and.w	r2, r0, #31
    d468:	2101      	movs	r1, #1
    d46a:	4091      	lsls	r1, r2
    d46c:	0940      	lsrs	r0, r0, #5
    d46e:	0080      	lsls	r0, r0, #2
    d470:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d474:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d478:	4770      	bx	lr
    d47a:	2800      	cmp	r0, #0
    d47c:	db0d      	blt.n	d49a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d47e:	f000 021f 	and.w	r2, r0, #31
    d482:	2101      	movs	r1, #1
    d484:	4091      	lsls	r1, r2
    d486:	0940      	lsrs	r0, r0, #5
    d488:	0080      	lsls	r0, r0, #2
    d48a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d48e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d492:	f3bf 8f4f 	dsb	sy
    d496:	f3bf 8f6f 	isb	sy
    d49a:	4770      	bx	lr
    d49c:	b510      	push	{r4, lr}
    d49e:	200e      	movs	r0, #14
    d4a0:	f7ff ffeb 	bl	d47a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d4a4:	200e      	movs	r0, #14
    d4a6:	f7ff ffdb 	bl	d460 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d4aa:	200f      	movs	r0, #15
    d4ac:	f7ff ffe5 	bl	d47a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d4b4:	200f      	movs	r0, #15
    d4b6:	f7ff bfd3 	b.w	d460 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d4ba:	2800      	cmp	r0, #0
    d4bc:	db09      	blt.n	d4d2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d4be:	f000 021f 	and.w	r2, r0, #31
    d4c2:	2101      	movs	r1, #1
    d4c4:	4091      	lsls	r1, r2
    d4c6:	0940      	lsrs	r0, r0, #5
    d4c8:	0080      	lsls	r0, r0, #2
    d4ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d4ce:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d4d2:	4770      	bx	lr
    d4d4:	5840      	ldr	r0, [r0, r1]
    d4d6:	2800      	cmp	r0, #0
    d4d8:	d000      	beq.n	d4dc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d4da:	2001      	movs	r0, #1
    d4dc:	4770      	bx	lr

0000d4de <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d4de:	b510      	push	{r4, lr}
    d4e0:	4604      	mov	r4, r0
    d4e2:	4620      	mov	r0, r4
    d4e4:	f7f4 f85c 	bl	15a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d4e8:	2811      	cmp	r0, #17
    d4ea:	d0fa      	beq.n	d4e2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d4ec:	bd10      	pop	{r4, pc}

0000d4ee <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d4ee:	b510      	push	{r4, lr}
    d4f0:	f7ff fff5 	bl	d4de <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d4f4:	2800      	cmp	r0, #0
    d4f6:	d003      	beq.n	d500 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d4f8:	21a9      	movs	r1, #169	; 0xa9
    d4fa:	201d      	movs	r0, #29
    d4fc:	f7f3 fa58 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d500:	bd10      	pop	{r4, pc}

0000d502 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d502:	f7f4 b9ab 	b.w	185c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d506 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d506:	f7f4 b999 	b.w	183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d50a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d50a:	b510      	push	{r4, lr}
    d50c:	4050      	eors	r0, r2
    d50e:	780a      	ldrb	r2, [r1, #0]
    d510:	781c      	ldrb	r4, [r3, #0]
    d512:	4062      	eors	r2, r4
    d514:	4410      	add	r0, r2
    d516:	784a      	ldrb	r2, [r1, #1]
    d518:	785c      	ldrb	r4, [r3, #1]
    d51a:	4062      	eors	r2, r4
    d51c:	4410      	add	r0, r2
    d51e:	788a      	ldrb	r2, [r1, #2]
    d520:	789c      	ldrb	r4, [r3, #2]
    d522:	4062      	eors	r2, r4
    d524:	4410      	add	r0, r2
    d526:	78ca      	ldrb	r2, [r1, #3]
    d528:	78dc      	ldrb	r4, [r3, #3]
    d52a:	4062      	eors	r2, r4
    d52c:	4410      	add	r0, r2
    d52e:	790a      	ldrb	r2, [r1, #4]
    d530:	791c      	ldrb	r4, [r3, #4]
    d532:	7949      	ldrb	r1, [r1, #5]
    d534:	4062      	eors	r2, r4
    d536:	4410      	add	r0, r2
    d538:	795a      	ldrb	r2, [r3, #5]
    d53a:	4051      	eors	r1, r2
    d53c:	42c1      	cmn	r1, r0
    d53e:	d101      	bne.n	d544 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d540:	2001      	movs	r0, #1
    d542:	bd10      	pop	{r4, pc}
    d544:	2000      	movs	r0, #0
    d546:	bd10      	pop	{r4, pc}

0000d548 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d548:	b510      	push	{r4, lr}
    d54a:	2900      	cmp	r1, #0
    d54c:	4604      	mov	r4, r0
    d54e:	f04f 0106 	mov.w	r1, #6
    d552:	d002      	beq.n	d55a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d554:	f7f3 face 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d558:	e001      	b.n	d55e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d55a:	f7f3 fad9 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d55e:	7960      	ldrb	r0, [r4, #5]
    d560:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d564:	7160      	strb	r0, [r4, #5]
    d566:	bd10      	pop	{r4, pc}

0000d568 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d568:	4770      	bx	lr

0000d56a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d56a:	b530      	push	{r4, r5, lr}
    d56c:	460c      	mov	r4, r1
    d56e:	4605      	mov	r5, r0
    d570:	b08d      	sub	sp, #52	; 0x34
    d572:	f04f 0103 	mov.w	r1, #3
    d576:	f104 0003 	add.w	r0, r4, #3
    d57a:	b112      	cbz	r2, d582 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d57c:	f7f3 faba 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d580:	e001      	b.n	d586 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d582:	f7f3 fac5 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d586:	7960      	ldrb	r0, [r4, #5]
    d588:	220d      	movs	r2, #13
    d58a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d58e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d592:	7160      	strb	r0, [r4, #5]
    d594:	2100      	movs	r1, #0
    d596:	a804      	add	r0, sp, #16
    d598:	f003 f83b 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d59c:	78e0      	ldrb	r0, [r4, #3]
    d59e:	f88d 001f 	strb.w	r0, [sp, #31]
    d5a2:	7920      	ldrb	r0, [r4, #4]
    d5a4:	f88d 001e 	strb.w	r0, [sp, #30]
    d5a8:	7960      	ldrb	r0, [r4, #5]
    d5aa:	f88d 001d 	strb.w	r0, [sp, #29]
    d5ae:	2210      	movs	r2, #16
    d5b0:	4629      	mov	r1, r5
    d5b2:	4668      	mov	r0, sp
    d5b4:	f002 ffb3 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5b8:	4668      	mov	r0, sp
    d5ba:	f7ff ff98 	bl	d4ee <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d5be:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d5c2:	7020      	strb	r0, [r4, #0]
    d5c4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d5c8:	7060      	strb	r0, [r4, #1]
    d5ca:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d5ce:	70a0      	strb	r0, [r4, #2]
    d5d0:	b00d      	add	sp, #52	; 0x34
    d5d2:	bd30      	pop	{r4, r5, pc}

0000d5d4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    d5d4:	f7f4 bcac 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    d5d8:	07c1      	lsls	r1, r0, #31
    d5da:	d001      	beq.n	d5e0 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    d5dc:	2001      	movs	r0, #1
    d5de:	4770      	bx	lr
    d5e0:	0780      	lsls	r0, r0, #30
    d5e2:	d501      	bpl.n	d5e8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    d5e4:	2002      	movs	r0, #2
    d5e6:	4770      	bx	lr
    d5e8:	2000      	movs	r0, #0
    d5ea:	4770      	bx	lr
    d5ec:	b510      	push	{r4, lr}
    d5ee:	2801      	cmp	r0, #1
    d5f0:	d008      	beq.n	d604 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    d5f2:	2802      	cmp	r0, #2
    d5f4:	d004      	beq.n	d600 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    d5f6:	f240 4121 	movw	r1, #1057	; 0x421
    d5fa:	2006      	movs	r0, #6
    d5fc:	f7f3 f9d8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d600:	2001      	movs	r0, #1
    d602:	bd10      	pop	{r4, pc}
    d604:	2000      	movs	r0, #0
    d606:	bd10      	pop	{r4, pc}
    d608:	2900      	cmp	r1, #0
    d60a:	d004      	beq.n	d616 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    d60c:	2801      	cmp	r0, #1
    d60e:	d003      	beq.n	d618 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    d610:	2901      	cmp	r1, #1
    d612:	d001      	beq.n	d618 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    d614:	2002      	movs	r0, #2
    d616:	4770      	bx	lr
    d618:	2001      	movs	r0, #1
    d61a:	4770      	bx	lr
    d61c:	f7ff bc90 	b.w	cf40 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d620 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d620:	2101      	movs	r1, #1
    d622:	f7f4 beff 	b.w	2424 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000d626 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d626:	b510      	push	{r4, lr}
    d628:	f002 fd4c 	bl	100c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d62c:	b118      	cbz	r0, d636 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d62e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d632:	f7f9 bee5 	b.w	7400 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d636:	20ff      	movs	r0, #255	; 0xff
    d638:	bd10      	pop	{r4, pc}

0000d63a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d63a:	b510      	push	{r4, lr}
    d63c:	f7f4 ff1e 	bl	247c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    d640:	2808      	cmp	r0, #8
    d642:	d003      	beq.n	d64c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d648:	f7f4 bf04 	b.w	2454 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    d64c:	bd10      	pop	{r4, pc}

0000d64e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d64e:	b570      	push	{r4, r5, r6, lr}
    d650:	460e      	mov	r6, r1
    d652:	b08c      	sub	sp, #48	; 0x30
    d654:	4614      	mov	r4, r2
    d656:	4601      	mov	r1, r0
    d658:	461d      	mov	r5, r3
    d65a:	2210      	movs	r2, #16
    d65c:	4668      	mov	r0, sp
    d65e:	f000 f929 	bl	d8b4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d662:	2210      	movs	r2, #16
    d664:	4631      	mov	r1, r6
    d666:	a804      	add	r0, sp, #16
    d668:	f000 f924 	bl	d8b4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d66c:	4668      	mov	r0, sp
    d66e:	f7ff ff3e 	bl	d4ee <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d672:	a908      	add	r1, sp, #32
    d674:	f04f 0210 	mov.w	r2, #16
    d678:	4628      	mov	r0, r5
    d67a:	b11c      	cbz	r4, d684 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d67c:	f000 f91a 	bl	d8b4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d680:	b00c      	add	sp, #48	; 0x30
    d682:	bd70      	pop	{r4, r5, r6, pc}
    d684:	f002 ff4b 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d688:	e7fa      	b.n	d680 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d68a:	b510      	push	{r4, lr}
    d68c:	460c      	mov	r4, r1
    d68e:	2100      	movs	r1, #0
    d690:	f7f3 fcbc 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d694:	6060      	str	r0, [r4, #4]
    d696:	b118      	cbz	r0, d6a0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d698:	2001      	movs	r0, #1
    d69a:	7020      	strb	r0, [r4, #0]
    d69c:	2000      	movs	r0, #0
    d69e:	bd10      	pop	{r4, pc}
    d6a0:	2002      	movs	r0, #2
    d6a2:	bd10      	pop	{r4, pc}

0000d6a4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d6a4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d6a8:	4348      	muls	r0, r1
    d6aa:	4770      	bx	lr

0000d6ac <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d6ac:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d6b0:	fbb0 f0f1 	udiv	r0, r0, r1
    d6b4:	b280      	uxth	r0, r0
    d6b6:	4770      	bx	lr

0000d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d6b8:	b510      	push	{r4, lr}
    d6ba:	f1a2 0310 	sub.w	r3, r2, #16
    d6be:	290d      	cmp	r1, #13
    d6c0:	d24d      	bcs.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6c2:	e8df f001 	tbb	[pc, r1]
    d6c6:	0907      	.short	0x0907
    d6c8:	1d1a150e 	.word	0x1d1a150e
    d6cc:	4e2c2921 	.word	0x4e2c2921
    d6d0:	0048362f 	.word	0x0048362f
    d6d4:	b3f2      	cbz	r2, d754 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d6d6:	e042      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6d8:	2a06      	cmp	r2, #6
    d6da:	d03e      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6dc:	2a07      	cmp	r2, #7
    d6de:	d03c      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6e0:	e03d      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6e2:	2a0b      	cmp	r2, #11
    d6e4:	d039      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6e6:	2a0c      	cmp	r2, #12
    d6e8:	d037      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6ea:	2a0a      	cmp	r2, #10
    d6ec:	d035      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6ee:	e036      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6f0:	2a0d      	cmp	r2, #13
    d6f2:	d032      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6f4:	2a0e      	cmp	r2, #14
    d6f6:	d030      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6f8:	e031      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6fa:	2b0c      	cmp	r3, #12
    d6fc:	d92d      	bls.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6fe:	e02e      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d700:	3a11      	subs	r2, #17
    d702:	2a0b      	cmp	r2, #11
    d704:	d929      	bls.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d706:	e02a      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d708:	2b03      	cmp	r3, #3
    d70a:	d926      	bls.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d70c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    d710:	b1f8      	cbz	r0, d752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d712:	2a1c      	cmp	r2, #28
    d714:	d921      	bls.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d716:	e022      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d718:	2a04      	cmp	r2, #4
    d71a:	d01e      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d71c:	e01f      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d71e:	2a01      	cmp	r2, #1
    d720:	d01b      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d722:	e01c      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d724:	2a1d      	cmp	r2, #29
    d726:	d018      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d728:	2a1e      	cmp	r2, #30
    d72a:	d016      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d72c:	2a1f      	cmp	r2, #31
    d72e:	d014      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d730:	e015      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d732:	2a20      	cmp	r2, #32
    d734:	d011      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d736:	2a21      	cmp	r2, #33	; 0x21
    d738:	d00f      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d73a:	2a22      	cmp	r2, #34	; 0x22
    d73c:	d00d      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d73e:	2a23      	cmp	r2, #35	; 0x23
    d740:	d00b      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d742:	2a24      	cmp	r2, #36	; 0x24
    d744:	d009      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d746:	2a25      	cmp	r2, #37	; 0x25
    d748:	d007      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d74a:	2a26      	cmp	r2, #38	; 0x26
    d74c:	d005      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d74e:	2a2e      	cmp	r2, #46	; 0x2e
    d750:	d003      	beq.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d752:	e004      	b.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d754:	e001      	b.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d756:	2a28      	cmp	r2, #40	; 0x28
    d758:	d101      	bne.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d75a:	2001      	movs	r0, #1
    d75c:	bd10      	pop	{r4, pc}
    d75e:	2000      	movs	r0, #0
    d760:	bd10      	pop	{r4, pc}
    d762:	2a0f      	cmp	r2, #15
    d764:	d1fb      	bne.n	d75e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d766:	e7f8      	b.n	d75a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d768 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d768:	280b      	cmp	r0, #11
    d76a:	d019      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d76c:	280c      	cmp	r0, #12
    d76e:	d017      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d770:	280a      	cmp	r0, #10
    d772:	d015      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d774:	280d      	cmp	r0, #13
    d776:	d013      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d778:	280e      	cmp	r0, #14
    d77a:	d011      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d77c:	2820      	cmp	r0, #32
    d77e:	d00f      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d780:	2821      	cmp	r0, #33	; 0x21
    d782:	d00d      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d784:	2822      	cmp	r0, #34	; 0x22
    d786:	d00b      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d788:	2823      	cmp	r0, #35	; 0x23
    d78a:	d009      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d78c:	2824      	cmp	r0, #36	; 0x24
    d78e:	d007      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d790:	2825      	cmp	r0, #37	; 0x25
    d792:	d005      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d794:	2826      	cmp	r0, #38	; 0x26
    d796:	d003      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d798:	282e      	cmp	r0, #46	; 0x2e
    d79a:	d001      	beq.n	d7a0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d79c:	2000      	movs	r0, #0
    d79e:	4770      	bx	lr
    d7a0:	2001      	movs	r0, #1
    d7a2:	4770      	bx	lr

0000d7a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d7a4:	f011 0f0c 	tst.w	r1, #12
    d7a8:	d018      	beq.n	d7dc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    d7aa:	074a      	lsls	r2, r1, #29
    d7ac:	f44f 7116 	mov.w	r1, #600	; 0x258
    d7b0:	2a00      	cmp	r2, #0
    d7b2:	da02      	bge.n	d7ba <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d7b4:	f04f 0210 	mov.w	r2, #16
    d7b8:	e001      	b.n	d7be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d7ba:	f04f 0240 	mov.w	r2, #64	; 0x40
    d7be:	da01      	bge.n	d7c4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d7c0:	f04f 0196 	mov.w	r1, #150	; 0x96
    d7c4:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d7c8:	eba0 0301 	sub.w	r3, r0, r1
    d7cc:	4288      	cmp	r0, r1
    d7ce:	d903      	bls.n	d7d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d7d0:	fb93 f0f2 	sdiv	r0, r3, r2
    d7d4:	b280      	uxth	r0, r0
    d7d6:	4770      	bx	lr
    d7d8:	2000      	movs	r0, #0
    d7da:	4770      	bx	lr
    d7dc:	2902      	cmp	r1, #2
    d7de:	d008      	beq.n	d7f2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d7e0:	2870      	cmp	r0, #112	; 0x70
    d7e2:	d9f9      	bls.n	d7d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d7e4:	3870      	subs	r0, #112	; 0x70
    d7e6:	17c1      	asrs	r1, r0, #31
    d7e8:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d7ec:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    d7f0:	4770      	bx	lr
    d7f2:	283c      	cmp	r0, #60	; 0x3c
    d7f4:	d9f0      	bls.n	d7d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d7f6:	383c      	subs	r0, #60	; 0x3c
    d7f8:	17c1      	asrs	r1, r0, #31
    d7fa:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d7fe:	f3c0 008f 	ubfx	r0, r0, #2, #16
    d802:	4770      	bx	lr

0000d804 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d804:	6809      	ldr	r1, [r1, #0]
    d806:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    d80a:	4770      	bx	lr

0000d80c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d80c:	07c1      	lsls	r1, r0, #31
    d80e:	d001      	beq.n	d814 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d810:	2001      	movs	r0, #1
    d812:	4770      	bx	lr
    d814:	0781      	lsls	r1, r0, #30
    d816:	d501      	bpl.n	d81c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d818:	2002      	movs	r0, #2
    d81a:	4770      	bx	lr
    d81c:	0740      	lsls	r0, r0, #29
    d81e:	d501      	bpl.n	d824 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d820:	2008      	movs	r0, #8
    d822:	4770      	bx	lr
    d824:	2000      	movs	r0, #0
    d826:	4770      	bx	lr

0000d828 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d828:	b510      	push	{r4, lr}
    d82a:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d82e:	2901      	cmp	r1, #1
    d830:	d006      	beq.n	d840 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d832:	2902      	cmp	r1, #2
    d834:	d005      	beq.n	d842 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d836:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    d83a:	2029      	movs	r0, #41	; 0x29
    d83c:	f7f3 f8b8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d840:	b108      	cbz	r0, d846 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d842:	4610      	mov	r0, r2
    d844:	bd10      	pop	{r4, pc}
    d846:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d84a:	bd10      	pop	{r4, pc}

0000d84c <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    d84c:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    d850:	f001 bcf8 	b.w	f244 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000d854 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d858:	4607      	mov	r7, r0
    d85a:	460e      	mov	r6, r1
    d85c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    d860:	f7fc fbdc 	bl	a01c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d864:	b198      	cbz	r0, d88e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    d866:	b31e      	cbz	r6, d8b0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d868:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    d86c:	1b40      	subs	r0, r0, r5
    d86e:	2300      	movs	r3, #0
    d870:	eb61 0104 	sbc.w	r1, r1, r4
    d874:	461a      	mov	r2, r3
    d876:	1a1b      	subs	r3, r3, r0
    d878:	418a      	sbcs	r2, r1
    d87a:	da19      	bge.n	d8b0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d87c:	1c42      	adds	r2, r0, #1
    d87e:	f171 0100 	sbcs.w	r1, r1, #0
    d882:	db07      	blt.n	d894 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    d884:	f240 211a 	movw	r1, #538	; 0x21a
    d888:	2029      	movs	r0, #41	; 0x29
    d88a:	f7f3 f891 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d88e:	f44f 7104 	mov.w	r1, #528	; 0x210
    d892:	e7f9      	b.n	d888 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    d894:	4430      	add	r0, r6
    d896:	1e40      	subs	r0, r0, #1
    d898:	fbb0 f1f6 	udiv	r1, r0, r6
    d89c:	fb01 f006 	mul.w	r0, r1, r6
    d8a0:	1828      	adds	r0, r5, r0
    d8a2:	f144 0400 	adc.w	r4, r4, #0
    d8a6:	e9c7 0404 	strd	r0, r4, [r7, #16]
    d8aa:	4608      	mov	r0, r1
    d8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8b0:	2000      	movs	r0, #0
    d8b2:	e7fb      	b.n	d8ac <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000d8b4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d8b4:	b530      	push	{r4, r5, lr}
    d8b6:	4613      	mov	r3, r2
    d8b8:	e006      	b.n	d8c8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d8ba:	18cc      	adds	r4, r1, r3
    d8bc:	1ad5      	subs	r5, r2, r3
    d8be:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d8c2:	1e5b      	subs	r3, r3, #1
    d8c4:	5544      	strb	r4, [r0, r5]
    d8c6:	b2db      	uxtb	r3, r3
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d1f6      	bne.n	d8ba <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d8cc:	bd30      	pop	{r4, r5, pc}

0000d8ce <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d8ce:	2300      	movs	r3, #0
    d8d0:	6403      	str	r3, [r0, #64]	; 0x40
    d8d2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    d8d6:	f240 2371 	movw	r3, #625	; 0x271
    d8da:	435a      	muls	r2, r3
    d8dc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d8e0:	1e52      	subs	r2, r2, #1
    d8e2:	fbb2 f1f1 	udiv	r1, r2, r1
    d8e6:	6441      	str	r1, [r0, #68]	; 0x44
    d8e8:	4770      	bx	lr

0000d8ea <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d8ea:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d8ee:	4607      	mov	r7, r0
    d8f0:	4690      	mov	r8, r2
    d8f2:	468b      	mov	fp, r1
    d8f4:	2601      	movs	r6, #1
    d8f6:	4608      	mov	r0, r1
    d8f8:	f000 f9e5 	bl	dcc6 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    d8fc:	4682      	mov	sl, r0
    d8fe:	4658      	mov	r0, fp
    d900:	f000 f9e3 	bl	dcca <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    d904:	4681      	mov	r9, r0
    d906:	f7ff ff81 	bl	d80c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d90a:	4604      	mov	r4, r0
    d90c:	4650      	mov	r0, sl
    d90e:	f7ff ff7d 	bl	d80c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d912:	4605      	mov	r5, r0
    d914:	ea54 0005 	orrs.w	r0, r4, r5
    d918:	d100      	bne.n	d91c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d91a:	2600      	movs	r6, #0
    d91c:	f7f9 fc98 	bl	7250 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d920:	ea10 0f09 	tst.w	r0, r9
    d924:	d100      	bne.n	d928 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d926:	2400      	movs	r4, #0
    d928:	f7f9 fc92 	bl	7250 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d92c:	ea10 0f0a 	tst.w	r0, sl
    d930:	d100      	bne.n	d934 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d932:	2500      	movs	r5, #0
    d934:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d938:	42a0      	cmp	r0, r4
    d93a:	d100      	bne.n	d93e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d93c:	2400      	movs	r4, #0
    d93e:	f888 4000 	strb.w	r4, [r8]
    d942:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d946:	42a8      	cmp	r0, r5
    d948:	d100      	bne.n	d94c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d94a:	2500      	movs	r5, #0
    d94c:	f888 5001 	strb.w	r5, [r8, #1]
    d950:	b974      	cbnz	r4, d970 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d952:	b96d      	cbnz	r5, d970 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d954:	4658      	mov	r0, fp
    d956:	f000 f9a4 	bl	dca2 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    d95a:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    d95e:	1a40      	subs	r0, r0, r1
    d960:	b200      	sxth	r0, r0
    d962:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d966:	4288      	cmp	r0, r1
    d968:	dc01      	bgt.n	d96e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d96a:	2800      	cmp	r0, #0
    d96c:	dc00      	bgt.n	d970 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d96e:	2600      	movs	r6, #0
    d970:	4630      	mov	r0, r6
    d972:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d976 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d976:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d97a:	4348      	muls	r0, r1
    d97c:	4770      	bx	lr

0000d97e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d97e:	f240 2171 	movw	r1, #625	; 0x271
    d982:	fb10 f001 	smulbb	r0, r0, r1
    d986:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d98a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    d98e:	4770      	bx	lr

0000d990 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d990:	b510      	push	{r4, lr}
    d992:	2300      	movs	r3, #0
    d994:	461a      	mov	r2, r3
    d996:	e003      	b.n	d9a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d998:	5c84      	ldrb	r4, [r0, r2]
    d99a:	4323      	orrs	r3, r4
    d99c:	1c52      	adds	r2, r2, #1
    d99e:	b2d2      	uxtb	r2, r2
    d9a0:	428a      	cmp	r2, r1
    d9a2:	d3f9      	bcc.n	d998 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d9a4:	b10b      	cbz	r3, d9aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d9a6:	2000      	movs	r0, #0
    d9a8:	bd10      	pop	{r4, pc}
    d9aa:	2001      	movs	r0, #1
    d9ac:	bd10      	pop	{r4, pc}

0000d9ae <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    d9ae:	2100      	movs	r1, #0
    d9b0:	4608      	mov	r0, r1
    d9b2:	f7f4 be51 	b.w	2658 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    d9b6:	4401      	add	r1, r0
    d9b8:	2914      	cmp	r1, #20
    d9ba:	dd01      	ble.n	d9c0 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    d9bc:	2014      	movs	r0, #20
    d9be:	4770      	bx	lr
    d9c0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    d9c4:	4281      	cmp	r1, r0
    d9c6:	dbfa      	blt.n	d9be <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    d9c8:	b248      	sxtb	r0, r1
    d9ca:	4770      	bx	lr

0000d9cc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    d9cc:	b570      	push	{r4, r5, r6, lr}
    d9ce:	4605      	mov	r5, r0
    d9d0:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    d9d4:	b286      	uxth	r6, r0
    d9d6:	4610      	mov	r0, r2
    d9d8:	7aec      	ldrb	r4, [r5, #11]
    d9da:	4631      	mov	r1, r6
    d9dc:	f000 f863 	bl	daa6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    d9e0:	4070      	eors	r0, r6
    d9e2:	2125      	movs	r1, #37	; 0x25
    d9e4:	fbb0 f2f1 	udiv	r2, r0, r1
    d9e8:	fb01 0112 	mls	r1, r1, r2, r0
    d9ec:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    d9f0:	f001 0307 	and.w	r3, r1, #7
    d9f4:	7852      	ldrb	r2, [r2, #1]
    d9f6:	2601      	movs	r6, #1
    d9f8:	409e      	lsls	r6, r3
    d9fa:	4232      	tst	r2, r6
    d9fc:	d001      	beq.n	da02 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    d9fe:	4608      	mov	r0, r1
    da00:	bd70      	pop	{r4, r5, r6, pc}
    da02:	4344      	muls	r4, r0
    da04:	0c21      	lsrs	r1, r4, #16
    da06:	4628      	mov	r0, r5
    da08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    da0c:	f7f4 be72 	b.w	26f4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000da10 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    da10:	b510      	push	{r4, lr}
    da12:	4604      	mov	r4, r0
    da14:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    da18:	b108      	cbz	r0, da1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    da1a:	2825      	cmp	r0, #37	; 0x25
    da1c:	d901      	bls.n	da22 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    da1e:	2012      	movs	r0, #18
    da20:	bd10      	pop	{r4, pc}
    da22:	b132      	cbz	r2, da32 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    da24:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    da28:	b128      	cbz	r0, da36 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    da2a:	2801      	cmp	r0, #1
    da2c:	d009      	beq.n	da42 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    da2e:	201f      	movs	r0, #31
    da30:	bd10      	pop	{r4, pc}
    da32:	2000      	movs	r0, #0
    da34:	bd10      	pop	{r4, pc}
    da36:	4620      	mov	r0, r4
    da38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da3c:	4611      	mov	r1, r2
    da3e:	f7f4 be11 	b.w	2664 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    da42:	8aa2      	ldrh	r2, [r4, #20]
    da44:	6949      	ldr	r1, [r1, #20]
    da46:	f104 0025 	add.w	r0, r4, #37	; 0x25
    da4a:	f7ff ffbf 	bl	d9cc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    da4e:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    da52:	e7ee      	b.n	da32 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000da54 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    da54:	b570      	push	{r4, r5, r6, lr}
    da56:	4604      	mov	r4, r0
    da58:	1c40      	adds	r0, r0, #1
    da5a:	4288      	cmp	r0, r1
    da5c:	d004      	beq.n	da68 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    da5e:	6808      	ldr	r0, [r1, #0]
    da60:	f8c4 0001 	str.w	r0, [r4, #1]
    da64:	7908      	ldrb	r0, [r1, #4]
    da66:	7160      	strb	r0, [r4, #5]
    da68:	7960      	ldrb	r0, [r4, #5]
    da6a:	f000 001f 	and.w	r0, r0, #31
    da6e:	7160      	strb	r0, [r4, #5]
    da70:	2000      	movs	r0, #0
    da72:	72e0      	strb	r0, [r4, #11]
    da74:	4605      	mov	r5, r0
    da76:	1966      	adds	r6, r4, r5
    da78:	7870      	ldrb	r0, [r6, #1]
    da7a:	f000 faed 	bl	e058 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    da7e:	71b0      	strb	r0, [r6, #6]
    da80:	7ae1      	ldrb	r1, [r4, #11]
    da82:	1c6d      	adds	r5, r5, #1
    da84:	4408      	add	r0, r1
    da86:	b2ed      	uxtb	r5, r5
    da88:	72e0      	strb	r0, [r4, #11]
    da8a:	2d05      	cmp	r5, #5
    da8c:	d3f3      	bcc.n	da76 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    da8e:	bd70      	pop	{r4, r5, r6, pc}
    da90:	b2c1      	uxtb	r1, r0
    da92:	fa91 f1a1 	rbit	r1, r1
    da96:	0a00      	lsrs	r0, r0, #8
    da98:	0e09      	lsrs	r1, r1, #24
    da9a:	fa90 f0a0 	rbit	r0, r0
    da9e:	0e00      	lsrs	r0, r0, #24
    daa0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    daa4:	4770      	bx	lr
    daa6:	b570      	push	{r4, r5, r6, lr}
    daa8:	460d      	mov	r5, r1
    daaa:	4048      	eors	r0, r1
    daac:	2400      	movs	r4, #0
    daae:	f7ff ffef 	bl	da90 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    dab2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    dab6:	1c64      	adds	r4, r4, #1
    dab8:	4428      	add	r0, r5
    daba:	b2e4      	uxtb	r4, r4
    dabc:	b280      	uxth	r0, r0
    dabe:	2c03      	cmp	r4, #3
    dac0:	d3f5      	bcc.n	daae <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    dac2:	bd70      	pop	{r4, r5, r6, pc}

0000dac4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    dac4:	7802      	ldrb	r2, [r0, #0]
    dac6:	f002 020f 	and.w	r2, r2, #15
    daca:	2a03      	cmp	r2, #3
    dacc:	d003      	beq.n	dad6 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    dace:	2a05      	cmp	r2, #5
    dad0:	d104      	bne.n	dadc <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    dad2:	f000 b92e 	b.w	dd32 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    dad6:	7840      	ldrb	r0, [r0, #1]
    dad8:	280c      	cmp	r0, #12
    dada:	d001      	beq.n	dae0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    dadc:	2000      	movs	r0, #0
    dade:	4770      	bx	lr
    dae0:	2001      	movs	r0, #1
    dae2:	4770      	bx	lr

0000dae4 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    dae4:	b570      	push	{r4, r5, r6, lr}
    dae6:	4614      	mov	r4, r2
    dae8:	4605      	mov	r5, r0
    daea:	2a1f      	cmp	r2, #31
    daec:	d903      	bls.n	daf6 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    daee:	21ee      	movs	r1, #238	; 0xee
    daf0:	202a      	movs	r0, #42	; 0x2a
    daf2:	f7f2 ff5d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daf6:	f105 0009 	add.w	r0, r5, #9
    dafa:	f002 fd10 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dafe:	1da4      	adds	r4, r4, #6
    db00:	706c      	strb	r4, [r5, #1]
    db02:	bd70      	pop	{r4, r5, r6, pc}

0000db04 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    db04:	b510      	push	{r4, lr}
    db06:	7802      	ldrb	r2, [r0, #0]
    db08:	f001 030f 	and.w	r3, r1, #15
    db0c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    db10:	431a      	orrs	r2, r3
    db12:	7002      	strb	r2, [r0, #0]
    db14:	2907      	cmp	r1, #7
    db16:	d20c      	bcs.n	db32 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    db18:	e8df f001 	tbb	[pc, r1]
    db1c:	06040604 	.word	0x06040604
    db20:	00040804 	.word	0x00040804
    db24:	2106      	movs	r1, #6
    db26:	e002      	b.n	db2e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    db28:	210c      	movs	r1, #12
    db2a:	e000      	b.n	db2e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    db2c:	2122      	movs	r1, #34	; 0x22
    db2e:	7041      	strb	r1, [r0, #1]
    db30:	bd10      	pop	{r4, pc}
    db32:	21a8      	movs	r1, #168	; 0xa8
    db34:	202a      	movs	r0, #42	; 0x2a
    db36:	f7f2 ff3b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000db3a <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    db3a:	680a      	ldr	r2, [r1, #0]
    db3c:	f840 2f09 	str.w	r2, [r0, #9]!
    db40:	8889      	ldrh	r1, [r1, #4]
    db42:	8081      	strh	r1, [r0, #4]
    db44:	4770      	bx	lr

0000db46 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    db46:	7802      	ldrb	r2, [r0, #0]
    db48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    db4c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    db50:	7002      	strb	r2, [r0, #0]
    db52:	4770      	bx	lr

0000db54 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    db54:	680a      	ldr	r2, [r1, #0]
    db56:	f840 2f03 	str.w	r2, [r0, #3]!
    db5a:	8889      	ldrh	r1, [r1, #4]
    db5c:	8081      	strh	r1, [r0, #4]
    db5e:	4770      	bx	lr

0000db60 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    db60:	7802      	ldrb	r2, [r0, #0]
    db62:	2340      	movs	r3, #64	; 0x40
    db64:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    db68:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    db6c:	430a      	orrs	r2, r1
    db6e:	7002      	strb	r2, [r0, #0]
    db70:	4770      	bx	lr

0000db72 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    db72:	b570      	push	{r4, r5, r6, lr}
    db74:	4614      	mov	r4, r2
    db76:	4605      	mov	r5, r0
    db78:	2a1f      	cmp	r2, #31
    db7a:	d904      	bls.n	db86 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    db7c:	f44f 7188 	mov.w	r1, #272	; 0x110
    db80:	202a      	movs	r0, #42	; 0x2a
    db82:	f7f2 ff15 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db86:	f105 0009 	add.w	r0, r5, #9
    db8a:	f002 fcc8 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db8e:	1da4      	adds	r4, r4, #6
    db90:	706c      	strb	r4, [r5, #1]
    db92:	bd70      	pop	{r4, r5, r6, pc}

0000db94 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    db94:	6842      	ldr	r2, [r0, #4]
    db96:	600a      	str	r2, [r1, #0]
    db98:	7a00      	ldrb	r0, [r0, #8]
    db9a:	7108      	strb	r0, [r1, #4]
    db9c:	4770      	bx	lr

0000db9e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    db9e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dba2:	4770      	bx	lr

0000dba4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    dba4:	b570      	push	{r4, r5, r6, lr}
    dba6:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    dbaa:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    dbae:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    dbb2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    dbb6:	88c0      	ldrh	r0, [r0, #6]
    dbb8:	b131      	cbz	r1, dbc8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    dbba:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dbbe:	d903      	bls.n	dbc8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    dbc0:	f640 5107 	movw	r1, #3335	; 0xd07
    dbc4:	428a      	cmp	r2, r1
    dbc6:	d90b      	bls.n	dbe0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    dbc8:	1f91      	subs	r1, r2, #6
    dbca:	f640 467a 	movw	r6, #3194	; 0xc7a
    dbce:	42b1      	cmp	r1, r6
    dbd0:	d810      	bhi.n	dbf4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbd2:	b17b      	cbz	r3, dbf4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbd4:	2b08      	cmp	r3, #8
    dbd6:	d80d      	bhi.n	dbf4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbd8:	4293      	cmp	r3, r2
    dbda:	d20b      	bcs.n	dbf4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbdc:	4295      	cmp	r5, r2
    dbde:	d809      	bhi.n	dbf4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbe0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    dbe4:	d206      	bcs.n	dbf4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbe6:	f640 4176 	movw	r1, #3190	; 0xc76
    dbea:	380a      	subs	r0, #10
    dbec:	4288      	cmp	r0, r1
    dbee:	d801      	bhi.n	dbf4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbf0:	2001      	movs	r0, #1
    dbf2:	bd70      	pop	{r4, r5, r6, pc}
    dbf4:	2000      	movs	r0, #0
    dbf6:	bd70      	pop	{r4, r5, r6, pc}

0000dbf8 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    dbf8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    dbfc:	4770      	bx	lr

0000dbfe <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    dbfe:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dc02:	4770      	bx	lr

0000dc04 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    dc04:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    dc08:	4770      	bx	lr

0000dc0a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    dc0a:	b510      	push	{r4, lr}
    dc0c:	29fb      	cmp	r1, #251	; 0xfb
    dc0e:	d904      	bls.n	dc1a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    dc10:	f240 61a1 	movw	r1, #1697	; 0x6a1
    dc14:	202a      	movs	r0, #42	; 0x2a
    dc16:	f7f2 fecb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc1a:	7041      	strb	r1, [r0, #1]
    dc1c:	bd10      	pop	{r4, pc}

0000dc1e <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    dc1e:	8980      	ldrh	r0, [r0, #12]
    dc20:	8008      	strh	r0, [r1, #0]
    dc22:	4770      	bx	lr

0000dc24 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    dc24:	f8d0 0016 	ldr.w	r0, [r0, #22]
    dc28:	6008      	str	r0, [r1, #0]
    dc2a:	4770      	bx	lr

0000dc2c <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    dc2c:	6842      	ldr	r2, [r0, #4]
    dc2e:	600a      	str	r2, [r1, #0]
    dc30:	6880      	ldr	r0, [r0, #8]
    dc32:	6048      	str	r0, [r1, #4]
    dc34:	4770      	bx	lr

0000dc36 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    dc36:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    dc3a:	600a      	str	r2, [r1, #0]
    dc3c:	6840      	ldr	r0, [r0, #4]
    dc3e:	6048      	str	r0, [r1, #4]
    dc40:	4770      	bx	lr

0000dc42 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    dc42:	6809      	ldr	r1, [r1, #0]
    dc44:	60c1      	str	r1, [r0, #12]
    dc46:	4770      	bx	lr

0000dc48 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    dc48:	680a      	ldr	r2, [r1, #0]
    dc4a:	6042      	str	r2, [r0, #4]
    dc4c:	6849      	ldr	r1, [r1, #4]
    dc4e:	6081      	str	r1, [r0, #8]
    dc50:	4770      	bx	lr

0000dc52 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    dc52:	7800      	ldrb	r0, [r0, #0]
    dc54:	f000 0003 	and.w	r0, r0, #3
    dc58:	4770      	bx	lr

0000dc5a <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    dc5a:	8880      	ldrh	r0, [r0, #4]
    dc5c:	4770      	bx	lr

0000dc5e <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    dc5e:	88c0      	ldrh	r0, [r0, #6]
    dc60:	4770      	bx	lr

0000dc62 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    dc62:	8900      	ldrh	r0, [r0, #8]
    dc64:	4770      	bx	lr

0000dc66 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    dc66:	8940      	ldrh	r0, [r0, #10]
    dc68:	4770      	bx	lr

0000dc6a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    dc6a:	8901      	ldrh	r1, [r0, #8]
    dc6c:	291b      	cmp	r1, #27
    dc6e:	d30c      	bcc.n	dc8a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc70:	8941      	ldrh	r1, [r0, #10]
    dc72:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dc76:	4291      	cmp	r1, r2
    dc78:	d307      	bcc.n	dc8a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc7a:	8881      	ldrh	r1, [r0, #4]
    dc7c:	291b      	cmp	r1, #27
    dc7e:	d304      	bcc.n	dc8a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc80:	88c0      	ldrh	r0, [r0, #6]
    dc82:	4290      	cmp	r0, r2
    dc84:	d301      	bcc.n	dc8a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc86:	2001      	movs	r0, #1
    dc88:	4770      	bx	lr
    dc8a:	2000      	movs	r0, #0
    dc8c:	4770      	bx	lr

0000dc8e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    dc8e:	7901      	ldrb	r1, [r0, #4]
    dc90:	0749      	lsls	r1, r1, #29
    dc92:	d004      	beq.n	dc9e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    dc94:	7940      	ldrb	r0, [r0, #5]
    dc96:	0740      	lsls	r0, r0, #29
    dc98:	d001      	beq.n	dc9e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    dc9a:	2001      	movs	r0, #1
    dc9c:	4770      	bx	lr
    dc9e:	2000      	movs	r0, #0
    dca0:	4770      	bx	lr

0000dca2 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    dca2:	88c0      	ldrh	r0, [r0, #6]
    dca4:	4770      	bx	lr

0000dca6 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    dca6:	7901      	ldrb	r1, [r0, #4]
    dca8:	7940      	ldrb	r0, [r0, #5]
    dcaa:	f001 0107 	and.w	r1, r1, #7
    dcae:	1e4a      	subs	r2, r1, #1
    dcb0:	f000 0007 	and.w	r0, r0, #7
    dcb4:	4011      	ands	r1, r2
    dcb6:	1e42      	subs	r2, r0, #1
    dcb8:	4010      	ands	r0, r2
    dcba:	4301      	orrs	r1, r0
    dcbc:	d001      	beq.n	dcc2 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    dcbe:	2000      	movs	r0, #0
    dcc0:	4770      	bx	lr
    dcc2:	2001      	movs	r0, #1
    dcc4:	4770      	bx	lr

0000dcc6 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    dcc6:	7900      	ldrb	r0, [r0, #4]
    dcc8:	4770      	bx	lr

0000dcca <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    dcca:	7940      	ldrb	r0, [r0, #5]
    dccc:	4770      	bx	lr

0000dcce <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    dcce:	7900      	ldrb	r0, [r0, #4]
    dcd0:	4770      	bx	lr

0000dcd2 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    dcd2:	7101      	strb	r1, [r0, #4]
    dcd4:	4770      	bx	lr

0000dcd6 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    dcd6:	7940      	ldrb	r0, [r0, #5]
    dcd8:	4770      	bx	lr

0000dcda <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    dcda:	7141      	strb	r1, [r0, #5]
    dcdc:	4770      	bx	lr

0000dcde <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    dcde:	b510      	push	{r4, lr}
    dce0:	2a1b      	cmp	r2, #27
    dce2:	d904      	bls.n	dcee <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    dce4:	f240 417e 	movw	r1, #1150	; 0x47e
    dce8:	202a      	movs	r0, #42	; 0x2a
    dcea:	f7f2 fe61 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcee:	7042      	strb	r2, [r0, #1]
    dcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcf4:	1cc0      	adds	r0, r0, #3
    dcf6:	f002 bc12 	b.w	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000dcfa <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    dcfa:	7802      	ldrb	r2, [r0, #0]
    dcfc:	f001 0103 	and.w	r1, r1, #3
    dd00:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    dd04:	430a      	orrs	r2, r1
    dd06:	7002      	strb	r2, [r0, #0]
    dd08:	4770      	bx	lr

0000dd0a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    dd0a:	7101      	strb	r1, [r0, #4]
    dd0c:	0a09      	lsrs	r1, r1, #8
    dd0e:	7141      	strb	r1, [r0, #5]
    dd10:	4770      	bx	lr

0000dd12 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    dd12:	7181      	strb	r1, [r0, #6]
    dd14:	0a09      	lsrs	r1, r1, #8
    dd16:	71c1      	strb	r1, [r0, #7]
    dd18:	4770      	bx	lr

0000dd1a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    dd1a:	7201      	strb	r1, [r0, #8]
    dd1c:	0a09      	lsrs	r1, r1, #8
    dd1e:	7241      	strb	r1, [r0, #9]
    dd20:	4770      	bx	lr

0000dd22 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    dd22:	7281      	strb	r1, [r0, #10]
    dd24:	0a09      	lsrs	r1, r1, #8
    dd26:	72c1      	strb	r1, [r0, #11]
    dd28:	4770      	bx	lr

0000dd2a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    dd2a:	7900      	ldrb	r0, [r0, #4]
    dd2c:	4770      	bx	lr

0000dd2e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    dd2e:	7900      	ldrb	r0, [r0, #4]
    dd30:	4770      	bx	lr
    dd32:	b570      	push	{r4, r5, r6, lr}
    dd34:	f8d0 201f 	ldr.w	r2, [r0, #31]
    dd38:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    dd3c:	f012 0fff 	tst.w	r2, #255	; 0xff
    dd40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    dd44:	d108      	bne.n	dd58 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd46:	f3c2 2407 	ubfx	r4, r2, #8, #8
    dd4a:	b92c      	cbnz	r4, dd58 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd4c:	f3c2 4407 	ubfx	r4, r2, #16, #8
    dd50:	b914      	cbnz	r4, dd58 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd52:	0e12      	lsrs	r2, r2, #24
    dd54:	d100      	bne.n	dd58 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd56:	b34b      	cbz	r3, ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd58:	7846      	ldrb	r6, [r0, #1]
    dd5a:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    dd5e:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    dd62:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    dd66:	7d83      	ldrb	r3, [r0, #22]
    dd68:	2e22      	cmp	r6, #34	; 0x22
    dd6a:	d11f      	bne.n	ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd6c:	b131      	cbz	r1, dd7c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dd6e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dd72:	d903      	bls.n	dd7c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dd74:	f640 5107 	movw	r1, #3335	; 0xd07
    dd78:	428a      	cmp	r2, r1
    dd7a:	d90b      	bls.n	dd94 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    dd7c:	1f91      	subs	r1, r2, #6
    dd7e:	f640 467a 	movw	r6, #3194	; 0xc7a
    dd82:	42b1      	cmp	r1, r6
    dd84:	d812      	bhi.n	ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd86:	b18b      	cbz	r3, ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd88:	2b08      	cmp	r3, #8
    dd8a:	d80f      	bhi.n	ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd8c:	4293      	cmp	r3, r2
    dd8e:	d20d      	bcs.n	ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd90:	4295      	cmp	r5, r2
    dd92:	d80b      	bhi.n	ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd94:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    dd98:	d208      	bcs.n	ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd9a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    dd9e:	f640 4176 	movw	r1, #3190	; 0xc76
    dda2:	380a      	subs	r0, #10
    dda4:	4288      	cmp	r0, r1
    dda6:	d801      	bhi.n	ddac <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dda8:	2001      	movs	r0, #1
    ddaa:	bd70      	pop	{r4, r5, r6, pc}
    ddac:	2000      	movs	r0, #0
    ddae:	bd70      	pop	{r4, r5, r6, pc}

0000ddb0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    ddb0:	6841      	ldr	r1, [r0, #4]
    ddb2:	2200      	movs	r2, #0
    ddb4:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d004      	beq.n	ddc6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    ddbc:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    ddc0:	6840      	ldr	r0, [r0, #4]
    ddc2:	f000 bdfc 	b.w	e9be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ddc6:	4770      	bx	lr

0000ddc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    ddc8:	b510      	push	{r4, lr}
    ddca:	7a01      	ldrb	r1, [r0, #8]
    ddcc:	b119      	cbz	r1, ddd6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    ddce:	2901      	cmp	r1, #1
    ddd0:	d006      	beq.n	dde0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    ddd2:	2000      	movs	r0, #0
    ddd4:	bd10      	pop	{r4, pc}
    ddd6:	88c2      	ldrh	r2, [r0, #6]
    ddd8:	6803      	ldr	r3, [r0, #0]
    ddda:	8880      	ldrh	r0, [r0, #4]
    dddc:	2102      	movs	r1, #2
    ddde:	e003      	b.n	dde8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    dde0:	88c2      	ldrh	r2, [r0, #6]
    dde2:	6803      	ldr	r3, [r0, #0]
    dde4:	8880      	ldrh	r0, [r0, #4]
    dde6:	2101      	movs	r1, #1
    dde8:	f7f4 fcee 	bl	27c8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    ddec:	b908      	cbnz	r0, ddf2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    ddee:	f7f4 fd3b 	bl	2868 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    ddf2:	2001      	movs	r0, #1
    ddf4:	bd10      	pop	{r4, pc}

0000ddf6 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    ddf6:	2203      	movs	r2, #3
    ddf8:	f000 b806 	b.w	de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000ddfc <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    ddfc:	2203      	movs	r2, #3
    ddfe:	f000 b817 	b.w	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000de02 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    de02:	2204      	movs	r2, #4
    de04:	f000 b814 	b.w	de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000de08 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    de08:	b508      	push	{r3, lr}
    de0a:	7a03      	ldrb	r3, [r0, #8]
    de0c:	f88d 3000 	strb.w	r3, [sp]
    de10:	9b00      	ldr	r3, [sp, #0]
    de12:	9300      	str	r3, [sp, #0]
    de14:	f89d 3000 	ldrb.w	r3, [sp]
    de18:	b123      	cbz	r3, de24 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    de1a:	f240 21c2 	movw	r1, #706	; 0x2c2
    de1e:	2010      	movs	r0, #16
    de20:	f7f2 fdc6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    de28:	f7f4 be90 	b.w	2b4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000de2c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    de2c:	f7f4 bebc 	b.w	2ba8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000de30 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    de30:	7a03      	ldrb	r3, [r0, #8]
    de32:	b082      	sub	sp, #8
    de34:	f88d 3000 	strb.w	r3, [sp]
    de38:	9b00      	ldr	r3, [sp, #0]
    de3a:	9300      	str	r3, [sp, #0]
    de3c:	f89d 3000 	ldrb.w	r3, [sp]
    de40:	b113      	cbz	r3, de48 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    de42:	7202      	strb	r2, [r0, #8]
    de44:	b002      	add	sp, #8
    de46:	4770      	bx	lr
    de48:	b002      	add	sp, #8
    de4a:	f7f4 be7f 	b.w	2b4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    de4e:	2000      	movs	r0, #0
    de50:	7048      	strb	r0, [r1, #1]
    de52:	2003      	movs	r0, #3
    de54:	7008      	strb	r0, [r1, #0]
    de56:	2001      	movs	r0, #1
    de58:	7108      	strb	r0, [r1, #4]
    de5a:	4770      	bx	lr

0000de5c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    de5c:	b510      	push	{r4, lr}
    de5e:	888c      	ldrh	r4, [r1, #4]
    de60:	890a      	ldrh	r2, [r1, #8]
    de62:	884b      	ldrh	r3, [r1, #2]
    de64:	88c9      	ldrh	r1, [r1, #6]
    de66:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    de6a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    de6e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    de72:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    de76:	bd10      	pop	{r4, pc}

0000de78 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    de78:	b570      	push	{r4, r5, r6, lr}
    de7a:	4615      	mov	r5, r2
    de7c:	460c      	mov	r4, r1
    de7e:	f000 f8b8 	bl	dff2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    de82:	3096      	adds	r0, #150	; 0x96
    de84:	4428      	add	r0, r5
    de86:	42a0      	cmp	r0, r4
    de88:	d801      	bhi.n	de8e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    de8a:	1a20      	subs	r0, r4, r0
    de8c:	bd70      	pop	{r4, r5, r6, pc}
    de8e:	2000      	movs	r0, #0
    de90:	bd70      	pop	{r4, r5, r6, pc}

0000de92 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    de92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de96:	4604      	mov	r4, r0
    de98:	f000 f87f 	bl	df9a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    de9c:	4680      	mov	r8, r0
    de9e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    dea2:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    dea6:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    dea8:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    deaa:	4285      	cmp	r5, r0
    deac:	d300      	bcc.n	deb0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    deae:	4605      	mov	r5, r0
    deb0:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    deb4:	4620      	mov	r0, r4
    deb6:	f000 f868 	bl	df8a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    deba:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    debe:	2902      	cmp	r1, #2
    dec0:	d108      	bne.n	ded4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    dec2:	42af      	cmp	r7, r5
    dec4:	d200      	bcs.n	dec8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    dec6:	463d      	mov	r5, r7
    dec8:	4286      	cmp	r6, r0
    deca:	d200      	bcs.n	dece <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    decc:	4630      	mov	r0, r6
    dece:	2100      	movs	r1, #0
    ded0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    ded4:	86a5      	strh	r5, [r4, #52]	; 0x34
    ded6:	8720      	strh	r0, [r4, #56]	; 0x38
    ded8:	42bd      	cmp	r5, r7
    deda:	d101      	bne.n	dee0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    dedc:	42b0      	cmp	r0, r6
    dede:	d001      	beq.n	dee4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    dee0:	2001      	movs	r0, #1
    dee2:	e000      	b.n	dee6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    dee4:	2000      	movs	r0, #0
    dee6:	ea40 0008 	orr.w	r0, r0, r8
    deea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000deee <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    deee:	221b      	movs	r2, #27
    def0:	8402      	strh	r2, [r0, #32]
    def2:	8382      	strh	r2, [r0, #28]
    def4:	82c2      	strh	r2, [r0, #22]
    def6:	8282      	strh	r2, [r0, #20]
    def8:	8142      	strh	r2, [r0, #10]
    defa:	8202      	strh	r2, [r0, #16]
    defc:	8102      	strh	r2, [r0, #8]
    defe:	8542      	strh	r2, [r0, #42]	; 0x2a
    df00:	8582      	strh	r2, [r0, #44]	; 0x2c
    df02:	8482      	strh	r2, [r0, #36]	; 0x24
    df04:	2900      	cmp	r1, #0
    df06:	d10a      	bne.n	df1e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    df08:	f44f 71a4 	mov.w	r1, #328	; 0x148
    df0c:	8441      	strh	r1, [r0, #34]	; 0x22
    df0e:	83c1      	strh	r1, [r0, #30]
    df10:	8341      	strh	r1, [r0, #26]
    df12:	8301      	strh	r1, [r0, #24]
    df14:	81c1      	strh	r1, [r0, #14]
    df16:	8241      	strh	r1, [r0, #18]
    df18:	8181      	strh	r1, [r0, #12]
    df1a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    df1c:	8601      	strh	r1, [r0, #48]	; 0x30
    df1e:	4770      	bx	lr

0000df20 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    df20:	6800      	ldr	r0, [r0, #0]
    df22:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    df26:	4290      	cmp	r0, r2
    df28:	d903      	bls.n	df32 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    df2a:	1a40      	subs	r0, r0, r1
    df2c:	389c      	subs	r0, #156	; 0x9c
    df2e:	0840      	lsrs	r0, r0, #1
    df30:	4770      	bx	lr
    df32:	2000      	movs	r0, #0
    df34:	4770      	bx	lr

0000df36 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    df36:	6840      	ldr	r0, [r0, #4]
    df38:	4770      	bx	lr

0000df3a <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    df3a:	b570      	push	{r4, r5, r6, lr}
    df3c:	460c      	mov	r4, r1
    df3e:	4605      	mov	r5, r0
    df40:	f000 f857 	bl	dff2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    df44:	4420      	add	r0, r4
    df46:	6328      	str	r0, [r5, #48]	; 0x30
    df48:	bd70      	pop	{r4, r5, r6, pc}

0000df4a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    df4a:	b510      	push	{r4, lr}
    df4c:	9c02      	ldr	r4, [sp, #8]
    df4e:	8281      	strh	r1, [r0, #20]
    df50:	82c2      	strh	r2, [r0, #22]
    df52:	8303      	strh	r3, [r0, #24]
    df54:	8344      	strh	r4, [r0, #26]
    df56:	bd10      	pop	{r4, pc}
    df58:	1d00      	adds	r0, r0, #4
    df5a:	b510      	push	{r4, lr}
    df5c:	b280      	uxth	r0, r0
    df5e:	2901      	cmp	r1, #1
    df60:	d006      	beq.n	df70 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    df62:	2902      	cmp	r1, #2
    df64:	d007      	beq.n	df76 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    df66:	f240 2123 	movw	r1, #547	; 0x223
    df6a:	2006      	movs	r0, #6
    df6c:	f7f2 fd20 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df70:	00c0      	lsls	r0, r0, #3
    df72:	3050      	adds	r0, #80	; 0x50
    df74:	e001      	b.n	df7a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    df76:	0080      	lsls	r0, r0, #2
    df78:	302c      	adds	r0, #44	; 0x2c
    df7a:	b280      	uxth	r0, r0
    df7c:	bd10      	pop	{r4, pc}
    df7e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    df80:	8b00      	ldrh	r0, [r0, #24]
    df82:	4281      	cmp	r1, r0
    df84:	d200      	bcs.n	df88 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    df86:	4608      	mov	r0, r1
    df88:	4770      	bx	lr
    df8a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    df8e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    df92:	4281      	cmp	r1, r0
    df94:	d200      	bcs.n	df98 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    df96:	4608      	mov	r0, r1
    df98:	4770      	bx	lr
    df9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df9e:	4606      	mov	r6, r0
    dfa0:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    dfa4:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    dfa8:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    dfac:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    dfb0:	42a0      	cmp	r0, r4
    dfb2:	d200      	bcs.n	dfb6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    dfb4:	4604      	mov	r4, r0
    dfb6:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    dfba:	4605      	mov	r5, r0
    dfbc:	f7ff ffdf 	bl	df7e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    dfc0:	4607      	mov	r7, r0
    dfc2:	4628      	mov	r0, r5
    dfc4:	f7ff ffdb 	bl	df7e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    dfc8:	816c      	strh	r4, [r5, #10]
    dfca:	81ef      	strh	r7, [r5, #14]
    dfcc:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    dfce:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    dfd0:	42a1      	cmp	r1, r4
    dfd2:	d200      	bcs.n	dfd6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    dfd4:	4621      	mov	r1, r4
    dfd6:	4282      	cmp	r2, r0
    dfd8:	d300      	bcc.n	dfdc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    dfda:	4610      	mov	r0, r2
    dfdc:	8229      	strh	r1, [r5, #16]
    dfde:	8268      	strh	r0, [r5, #18]
    dfe0:	454c      	cmp	r4, r9
    dfe2:	d101      	bne.n	dfe8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    dfe4:	4547      	cmp	r7, r8
    dfe6:	d002      	beq.n	dfee <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    dfe8:	2001      	movs	r0, #1
    dfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dfee:	2000      	movs	r0, #0
    dff0:	e7fb      	b.n	dfea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    dff2:	2196      	movs	r1, #150	; 0x96
    dff4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    dff8:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    dffc:	f000 b800 	b.w	e000 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e004:	460d      	mov	r5, r1
    e006:	4606      	mov	r6, r0
    e008:	4698      	mov	r8, r3
    e00a:	4617      	mov	r7, r2
    e00c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e00e:	4611      	mov	r1, r2
    e010:	f7ff ffa2 	bl	df58 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e014:	4604      	mov	r4, r0
    e016:	4639      	mov	r1, r7
    e018:	4630      	mov	r0, r6
    e01a:	f7ff ffb6 	bl	df8a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e01e:	42a0      	cmp	r0, r4
    e020:	d200      	bcs.n	e024 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e022:	4604      	mov	r4, r0
    e024:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e026:	4641      	mov	r1, r8
    e028:	f7ff ff96 	bl	df58 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e02c:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e02e:	4281      	cmp	r1, r0
    e030:	d200      	bcs.n	e034 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e032:	4608      	mov	r0, r1
    e034:	4420      	add	r0, r4
    e036:	4428      	add	r0, r5
    e038:	1d80      	adds	r0, r0, #6
    e03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e03e:	b510      	push	{r4, lr}
    e040:	4604      	mov	r4, r0
    e042:	2108      	movs	r1, #8
    e044:	4620      	mov	r0, r4
    e046:	f7f2 fd63 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e04a:	6820      	ldr	r0, [r4, #0]
    e04c:	2800      	cmp	r0, #0
    e04e:	d102      	bne.n	e056 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    e050:	6860      	ldr	r0, [r4, #4]
    e052:	2800      	cmp	r0, #0
    e054:	d0f5      	beq.n	e042 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    e056:	bd10      	pop	{r4, pc}

0000e058 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e058:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e05c:	2255      	movs	r2, #85	; 0x55
    e05e:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e062:	4408      	add	r0, r1
    e064:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e068:	2233      	movs	r2, #51	; 0x33
    e06a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e06e:	4408      	add	r0, r1
    e070:	f000 010f 	and.w	r1, r0, #15
    e074:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e078:	4770      	bx	lr

0000e07a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e07a:	6840      	ldr	r0, [r0, #4]
    e07c:	2100      	movs	r1, #0
    e07e:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e082:	7881      	ldrb	r1, [r0, #2]
    e084:	1c49      	adds	r1, r1, #1
    e086:	7081      	strb	r1, [r0, #2]
    e088:	4770      	bx	lr

0000e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e08a:	b510      	push	{r4, lr}
    e08c:	6840      	ldr	r0, [r0, #4]
    e08e:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e092:	1e49      	subs	r1, r1, #1
    e094:	b249      	sxtb	r1, r1
    e096:	7001      	strb	r1, [r0, #0]
    e098:	2900      	cmp	r1, #0
    e09a:	da03      	bge.n	e0a4 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e09c:	2135      	movs	r1, #53	; 0x35
    e09e:	204a      	movs	r0, #74	; 0x4a
    e0a0:	f7f2 fc86 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0a4:	bd10      	pop	{r4, pc}

0000e0a6 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e0a6:	6840      	ldr	r0, [r0, #4]
    e0a8:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e0ac:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e0b0:	4770      	bx	lr

0000e0b2 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e0b2:	6840      	ldr	r0, [r0, #4]
    e0b4:	2100      	movs	r1, #0
    e0b6:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e0ba:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e0be:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e0c2:	4770      	bx	lr

0000e0c4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e0c4:	b510      	push	{r4, lr}
    e0c6:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e0ca:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e0ce:	2000      	movs	r0, #0
    e0d0:	7048      	strb	r0, [r1, #1]
    e0d2:	230a      	movs	r3, #10
    e0d4:	700b      	strb	r3, [r1, #0]
    e0d6:	7108      	strb	r0, [r1, #4]
    e0d8:	f8a1 4005 	strh.w	r4, [r1, #5]
    e0dc:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e0e0:	71c8      	strb	r0, [r1, #7]
    e0e2:	4620      	mov	r0, r4
    e0e4:	f7f3 f926 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e0e8:	f7fe fe07 	bl	ccfa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e0ec:	b140      	cbz	r0, e100 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e0ee:	4620      	mov	r0, r4
    e0f0:	f7ff fa07 	bl	d502 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e0f4:	4620      	mov	r0, r4
    e0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0fa:	2100      	movs	r1, #0
    e0fc:	f7f3 b828 	b.w	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e100:	2173      	movs	r1, #115	; 0x73
    e102:	2063      	movs	r0, #99	; 0x63
    e104:	f7f2 fc54 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e108 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e108:	b570      	push	{r4, r5, r6, lr}
    e10a:	6844      	ldr	r4, [r0, #4]
    e10c:	460d      	mov	r5, r1
    e10e:	7803      	ldrb	r3, [r0, #0]
    e110:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e114:	3480      	adds	r4, #128	; 0x80
    e116:	2101      	movs	r1, #1
    e118:	4620      	mov	r0, r4
    e11a:	f7ff facd 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e11e:	b108      	cbz	r0, e124 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e120:	2000      	movs	r0, #0
    e122:	bd70      	pop	{r4, r5, r6, pc}
    e124:	4628      	mov	r0, r5
    e126:	f7ff fe00 	bl	dd2a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e12a:	f884 0020 	strb.w	r0, [r4, #32]
    e12e:	2006      	movs	r0, #6
    e130:	77e0      	strb	r0, [r4, #31]
    e132:	e7f5      	b.n	e120 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e134 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e134:	b510      	push	{r4, lr}
    e136:	6844      	ldr	r4, [r0, #4]
    e138:	7803      	ldrb	r3, [r0, #0]
    e13a:	2101      	movs	r1, #1
    e13c:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e140:	3480      	adds	r4, #128	; 0x80
    e142:	4620      	mov	r0, r4
    e144:	f7ff fab8 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e148:	2800      	cmp	r0, #0
    e14a:	d101      	bne.n	e150 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e14c:	2007      	movs	r0, #7
    e14e:	77e0      	strb	r0, [r4, #31]
    e150:	bd10      	pop	{r4, pc}

0000e152 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e152:	2200      	movs	r2, #0
    e154:	704a      	strb	r2, [r1, #1]
    e156:	2307      	movs	r3, #7
    e158:	700b      	strb	r3, [r1, #0]
    e15a:	f100 030a 	add.w	r3, r0, #10
    e15e:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e162:	84c2      	strh	r2, [r0, #38]	; 0x26
    e164:	6818      	ldr	r0, [r3, #0]
    e166:	6048      	str	r0, [r1, #4]
    e168:	6858      	ldr	r0, [r3, #4]
    e16a:	6088      	str	r0, [r1, #8]
    e16c:	8918      	ldrh	r0, [r3, #8]
    e16e:	8188      	strh	r0, [r1, #12]
    e170:	710a      	strb	r2, [r1, #4]
    e172:	4770      	bx	lr

0000e174 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e174:	b510      	push	{r4, lr}
    e176:	6844      	ldr	r4, [r0, #4]
    e178:	7803      	ldrb	r3, [r0, #0]
    e17a:	2100      	movs	r1, #0
    e17c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e180:	3480      	adds	r4, #128	; 0x80
    e182:	4620      	mov	r0, r4
    e184:	f7ff fa98 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e188:	b110      	cbz	r0, e190 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e18a:	201d      	movs	r0, #29
    e18c:	7760      	strb	r0, [r4, #29]
    e18e:	bd10      	pop	{r4, pc}
    e190:	2122      	movs	r1, #34	; 0x22
    e192:	2045      	movs	r0, #69	; 0x45
    e194:	f7f2 fc0c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e198 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e19c:	4606      	mov	r6, r0
    e19e:	7803      	ldrb	r3, [r0, #0]
    e1a0:	6840      	ldr	r0, [r0, #4]
    e1a2:	468b      	mov	fp, r1
    e1a4:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e1a8:	4605      	mov	r5, r0
    e1aa:	2700      	movs	r7, #0
    e1ac:	7f62      	ldrb	r2, [r4, #29]
    e1ae:	210a      	movs	r1, #10
    e1b0:	4620      	mov	r0, r4
    e1b2:	f7ff fa81 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e1b6:	b358      	cbz	r0, e210 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e1b8:	4658      	mov	r0, fp
    e1ba:	f7ff fd56 	bl	dc6a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e1be:	b1f0      	cbz	r0, e1fe <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e1c0:	4658      	mov	r0, fp
    e1c2:	f7ff fd4c 	bl	dc5e <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e1c6:	4682      	mov	sl, r0
    e1c8:	4658      	mov	r0, fp
    e1ca:	f7ff fd4c 	bl	dc66 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e1ce:	4681      	mov	r9, r0
    e1d0:	4658      	mov	r0, fp
    e1d2:	f7ff fd42 	bl	dc5a <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e1d6:	4680      	mov	r8, r0
    e1d8:	4658      	mov	r0, fp
    e1da:	f7ff fd42 	bl	dc62 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e1de:	4601      	mov	r1, r0
    e1e0:	464b      	mov	r3, r9
    e1e2:	4642      	mov	r2, r8
    e1e4:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e1e8:	f8cd a000 	str.w	sl, [sp]
    e1ec:	f7ff fead 	bl	df4a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e1f0:	4628      	mov	r0, r5
    e1f2:	f7ff fe4e 	bl	de92 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e1f6:	2105      	movs	r1, #5
    e1f8:	6870      	ldr	r0, [r6, #4]
    e1fa:	f7f6 f8c1 	bl	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e1fe:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e202:	7767      	strb	r7, [r4, #29]
    e204:	4630      	mov	r0, r6
    e206:	f000 f805 	bl	e214 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e20a:	2000      	movs	r0, #0
    e20c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e210:	2001      	movs	r0, #1
    e212:	e7fb      	b.n	e20c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e214 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e214:	6841      	ldr	r1, [r0, #4]
    e216:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e21a:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e21e:	2801      	cmp	r0, #1
    e220:	d004      	beq.n	e22c <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e222:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e226:	3218      	adds	r2, #24
    e228:	f7f4 bcd4 	b.w	2bd4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e22c:	2002      	movs	r0, #2
    e22e:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e232:	4770      	bx	lr

0000e234 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e234:	2200      	movs	r2, #0
    e236:	704a      	strb	r2, [r1, #1]
    e238:	220b      	movs	r2, #11
    e23a:	700a      	strb	r2, [r1, #0]
    e23c:	f100 020a 	add.w	r2, r0, #10
    e240:	7a83      	ldrb	r3, [r0, #10]
    e242:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e246:	710b      	strb	r3, [r1, #4]
    e248:	8800      	ldrh	r0, [r0, #0]
    e24a:	80c8      	strh	r0, [r1, #6]
    e24c:	7910      	ldrb	r0, [r2, #4]
    e24e:	7208      	strb	r0, [r1, #8]
    e250:	4770      	bx	lr

0000e252 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e252:	2200      	movs	r2, #0
    e254:	704a      	strb	r2, [r1, #1]
    e256:	220c      	movs	r2, #12
    e258:	700a      	strb	r2, [r1, #0]
    e25a:	7a82      	ldrb	r2, [r0, #10]
    e25c:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e260:	710a      	strb	r2, [r1, #4]
    e262:	8800      	ldrh	r0, [r0, #0]
    e264:	80c8      	strh	r0, [r1, #6]
    e266:	4770      	bx	lr

0000e268 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e268:	2200      	movs	r2, #0
    e26a:	704a      	strb	r2, [r1, #1]
    e26c:	2208      	movs	r2, #8
    e26e:	700a      	strb	r2, [r1, #0]
    e270:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e274:	8812      	ldrh	r2, [r2, #0]
    e276:	808a      	strh	r2, [r1, #4]
    e278:	68c2      	ldr	r2, [r0, #12]
    e27a:	f8c1 2006 	str.w	r2, [r1, #6]
    e27e:	6902      	ldr	r2, [r0, #16]
    e280:	f8c1 200a 	str.w	r2, [r1, #10]
    e284:	8a80      	ldrh	r0, [r0, #20]
    e286:	81c8      	strh	r0, [r1, #14]
    e288:	4770      	bx	lr
    e28a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e28e:	f001 0307 	and.w	r3, r1, #7
    e292:	7802      	ldrb	r2, [r0, #0]
    e294:	2101      	movs	r1, #1
    e296:	4099      	lsls	r1, r3
    e298:	430a      	orrs	r2, r1
    e29a:	7002      	strb	r2, [r0, #0]
    e29c:	4770      	bx	lr

0000e29e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e29e:	b510      	push	{r4, lr}
    e2a0:	6844      	ldr	r4, [r0, #4]
    e2a2:	7803      	ldrb	r3, [r0, #0]
    e2a4:	2100      	movs	r1, #0
    e2a6:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e2aa:	3480      	adds	r4, #128	; 0x80
    e2ac:	4620      	mov	r0, r4
    e2ae:	f7ff fa03 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e2b2:	b110      	cbz	r0, e2ba <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e2b4:	2004      	movs	r0, #4
    e2b6:	7760      	strb	r0, [r4, #29]
    e2b8:	bd10      	pop	{r4, pc}
    e2ba:	21ab      	movs	r1, #171	; 0xab
    e2bc:	201c      	movs	r0, #28
    e2be:	f7f2 fb77 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e2c2 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e2c2:	b510      	push	{r4, lr}
    e2c4:	6841      	ldr	r1, [r0, #4]
    e2c6:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e2ca:	07d2      	lsls	r2, r2, #31
    e2cc:	d00b      	beq.n	e2e6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e2ce:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e2d2:	1e52      	subs	r2, r2, #1
    e2d4:	b252      	sxtb	r2, r2
    e2d6:	700a      	strb	r2, [r1, #0]
    e2d8:	6840      	ldr	r0, [r0, #4]
    e2da:	2a00      	cmp	r2, #0
    e2dc:	da05      	bge.n	e2ea <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e2de:	21ba      	movs	r1, #186	; 0xba
    e2e0:	201c      	movs	r0, #28
    e2e2:	f7f2 fb65 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2e6:	21b8      	movs	r1, #184	; 0xb8
    e2e8:	e7fa      	b.n	e2e0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e2ea:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e2ee:	f021 0101 	bic.w	r1, r1, #1
    e2f2:	6001      	str	r1, [r0, #0]
    e2f4:	bd10      	pop	{r4, pc}
    e2f6:	2200      	movs	r2, #0
    e2f8:	704a      	strb	r2, [r1, #1]
    e2fa:	2206      	movs	r2, #6
    e2fc:	700a      	strb	r2, [r1, #0]
    e2fe:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e302:	604a      	str	r2, [r1, #4]
    e304:	6842      	ldr	r2, [r0, #4]
    e306:	608a      	str	r2, [r1, #8]
    e308:	8902      	ldrh	r2, [r0, #8]
    e30a:	818a      	strh	r2, [r1, #12]
    e30c:	7a80      	ldrb	r0, [r0, #10]
    e30e:	7388      	strb	r0, [r1, #14]
    e310:	4770      	bx	lr

0000e312 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e312:	2200      	movs	r2, #0
    e314:	704a      	strb	r2, [r1, #1]
    e316:	220e      	movs	r2, #14
    e318:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e31c:	700a      	strb	r2, [r1, #0]
    e31e:	8800      	ldrh	r0, [r0, #0]
    e320:	8088      	strh	r0, [r1, #4]
    e322:	4770      	bx	lr

0000e324 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    e324:	b510      	push	{r4, lr}
    e326:	6844      	ldr	r4, [r0, #4]
    e328:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    e32c:	3480      	adds	r4, #128	; 0x80
    e32e:	f011 0f04 	tst.w	r1, #4
    e332:	d001      	beq.n	e338 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    e334:	2001      	movs	r0, #1
    e336:	bd10      	pop	{r4, pc}
    e338:	f7ff fe9f 	bl	e07a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    e33c:	68e0      	ldr	r0, [r4, #12]
    e33e:	f040 0004 	orr.w	r0, r0, #4
    e342:	60e0      	str	r0, [r4, #12]
    e344:	2000      	movs	r0, #0
    e346:	bd10      	pop	{r4, pc}

0000e348 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    e348:	b510      	push	{r4, lr}
    e34a:	6844      	ldr	r4, [r0, #4]
    e34c:	7803      	ldrb	r3, [r0, #0]
    e34e:	2100      	movs	r1, #0
    e350:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e354:	3480      	adds	r4, #128	; 0x80
    e356:	4620      	mov	r0, r4
    e358:	f7ff f9ae 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e35c:	b110      	cbz	r0, e364 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    e35e:	200f      	movs	r0, #15
    e360:	7760      	strb	r0, [r4, #29]
    e362:	bd10      	pop	{r4, pc}
    e364:	216e      	movs	r1, #110	; 0x6e
    e366:	204b      	movs	r0, #75	; 0x4b
    e368:	f7f2 fb22 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e36c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    e36c:	b510      	push	{r4, lr}
    e36e:	6844      	ldr	r4, [r0, #4]
    e370:	7803      	ldrb	r3, [r0, #0]
    e372:	2109      	movs	r1, #9
    e374:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e378:	3480      	adds	r4, #128	; 0x80
    e37a:	4620      	mov	r0, r4
    e37c:	f7ff f99c 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e380:	2800      	cmp	r0, #0
    e382:	d005      	beq.n	e390 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    e384:	2000      	movs	r0, #0
    e386:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    e38a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e38e:	7760      	strb	r0, [r4, #29]
    e390:	bd10      	pop	{r4, pc}

0000e392 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    e392:	6841      	ldr	r1, [r0, #4]
    e394:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    e398:	f022 0204 	bic.w	r2, r2, #4
    e39c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    e3a0:	f7ff be73 	b.w	e08a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000e3a4 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e3a4:	b510      	push	{r4, lr}
    e3a6:	2300      	movs	r3, #0
    e3a8:	704b      	strb	r3, [r1, #1]
    e3aa:	2401      	movs	r4, #1
    e3ac:	700c      	strb	r4, [r1, #0]
    e3ae:	f100 0209 	add.w	r2, r0, #9
    e3b2:	710b      	strb	r3, [r1, #4]
    e3b4:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    e3b8:	f8a1 0005 	strh.w	r0, [r1, #5]
    e3bc:	f812 0b01 	ldrb.w	r0, [r2], #1
    e3c0:	71c8      	strb	r0, [r1, #7]
    e3c2:	8810      	ldrh	r0, [r2, #0]
    e3c4:	8108      	strh	r0, [r1, #8]
    e3c6:	8850      	ldrh	r0, [r2, #2]
    e3c8:	8148      	strh	r0, [r1, #10]
    e3ca:	bd10      	pop	{r4, pc}

0000e3cc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e3cc:	b570      	push	{r4, r5, r6, lr}
    e3ce:	7803      	ldrb	r3, [r0, #0]
    e3d0:	6840      	ldr	r0, [r0, #4]
    e3d2:	2500      	movs	r5, #0
    e3d4:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e3d8:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e3dc:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e3e0:	0789      	lsls	r1, r1, #30
    e3e2:	d40e      	bmi.n	e402 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e3e4:	7f62      	ldrb	r2, [r4, #29]
    e3e6:	2100      	movs	r1, #0
    e3e8:	4620      	mov	r0, r4
    e3ea:	f7ff f965 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e3ee:	b130      	cbz	r0, e3fe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e3f0:	2001      	movs	r0, #1
    e3f2:	7760      	strb	r0, [r4, #29]
    e3f4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e3f8:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e3fc:	bd70      	pop	{r4, r5, r6, pc}
    e3fe:	216e      	movs	r1, #110	; 0x6e
    e400:	e00b      	b.n	e41a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e402:	7b21      	ldrb	r1, [r4, #12]
    e404:	0789      	lsls	r1, r1, #30
    e406:	d50f      	bpl.n	e428 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e408:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    e40c:	1e49      	subs	r1, r1, #1
    e40e:	b249      	sxtb	r1, r1
    e410:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    e414:	2900      	cmp	r1, #0
    e416:	da03      	bge.n	e420 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    e418:	2180      	movs	r1, #128	; 0x80
    e41a:	2040      	movs	r0, #64	; 0x40
    e41c:	f7f2 fac8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e420:	68e1      	ldr	r1, [r4, #12]
    e422:	f021 0102 	bic.w	r1, r1, #2
    e426:	60e1      	str	r1, [r4, #12]
    e428:	7485      	strb	r5, [r0, #18]
    e42a:	bd70      	pop	{r4, r5, r6, pc}
    e42c:	2200      	movs	r2, #0
    e42e:	704a      	strb	r2, [r1, #1]
    e430:	2219      	movs	r2, #25
    e432:	700a      	strb	r2, [r1, #0]
    e434:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e438:	6048      	str	r0, [r1, #4]
    e43a:	4770      	bx	lr
    e43c:	b510      	push	{r4, lr}
    e43e:	4604      	mov	r4, r0
    e440:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e444:	e9d4 1000 	ldrd	r1, r0, [r4]
    e448:	4050      	eors	r0, r2
    e44a:	ea70 0101 	orns	r1, r0, r1
    e44e:	d008      	beq.n	e462 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e450:	f001 fed3 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e454:	e9d4 2300 	ldrd	r2, r3, [r4]
    e458:	1a80      	subs	r0, r0, r2
    e45a:	4199      	sbcs	r1, r3
    e45c:	d301      	bcc.n	e462 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e45e:	2001      	movs	r0, #1
    e460:	bd10      	pop	{r4, pc}
    e462:	2000      	movs	r0, #0
    e464:	bd10      	pop	{r4, pc}

0000e466 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    e466:	b508      	push	{r3, lr}
    e468:	f000 f804 	bl	e474 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    e46c:	466a      	mov	r2, sp
    e46e:	f7f4 ff07 	bl	3280 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    e472:	bd08      	pop	{r3, pc}
    e474:	b530      	push	{r4, r5, lr}
    e476:	784c      	ldrb	r4, [r1, #1]
    e478:	4603      	mov	r3, r0
    e47a:	7808      	ldrb	r0, [r1, #0]
    e47c:	788d      	ldrb	r5, [r1, #2]
    e47e:	0e22      	lsrs	r2, r4, #24
    e480:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    e484:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    e488:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    e48c:	78cd      	ldrb	r5, [r1, #3]
    e48e:	790c      	ldrb	r4, [r1, #4]
    e490:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    e494:	4322      	orrs	r2, r4
    e496:	7949      	ldrb	r1, [r1, #5]
    e498:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    e49c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e4a0:	4611      	mov	r1, r2
    e4a2:	2b01      	cmp	r3, #1
    e4a4:	d101      	bne.n	e4aa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    e4a6:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    e4aa:	bd30      	pop	{r4, r5, pc}
    e4ac:	2801      	cmp	r0, #1
    e4ae:	d102      	bne.n	e4b6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    e4b0:	7948      	ldrb	r0, [r1, #5]
    e4b2:	0980      	lsrs	r0, r0, #6
    e4b4:	d001      	beq.n	e4ba <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    e4b6:	2000      	movs	r0, #0
    e4b8:	4770      	bx	lr
    e4ba:	2001      	movs	r0, #1
    e4bc:	4770      	bx	lr
    e4be:	2801      	cmp	r0, #1
    e4c0:	d106      	bne.n	e4d0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    e4c2:	7948      	ldrb	r0, [r1, #5]
    e4c4:	2101      	movs	r1, #1
    e4c6:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e4ca:	d101      	bne.n	e4d0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    e4cc:	2001      	movs	r0, #1
    e4ce:	4770      	bx	lr
    e4d0:	2000      	movs	r0, #0
    e4d2:	4770      	bx	lr
    e4d4:	2802      	cmp	r0, #2
    e4d6:	d003      	beq.n	e4e0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    e4d8:	2803      	cmp	r0, #3
    e4da:	d001      	beq.n	e4e0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    e4dc:	2000      	movs	r0, #0
    e4de:	4770      	bx	lr
    e4e0:	2001      	movs	r0, #1
    e4e2:	4770      	bx	lr

0000e4e4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e4e4:	b510      	push	{r4, lr}
    e4e6:	4604      	mov	r4, r0
    e4e8:	7c00      	ldrb	r0, [r0, #16]
    e4ea:	f7ff fff3 	bl	e4d4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    e4ee:	b148      	cbz	r0, e504 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e4f0:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e4f4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e4f8:	f7ff f89f 	bl	d63a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e4fc:	2808      	cmp	r0, #8
    e4fe:	d001      	beq.n	e504 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e500:	2001      	movs	r0, #1
    e502:	bd10      	pop	{r4, pc}
    e504:	7c20      	ldrb	r0, [r4, #16]
    e506:	b118      	cbz	r0, e510 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e508:	2802      	cmp	r0, #2
    e50a:	d001      	beq.n	e510 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e50c:	7de0      	ldrb	r0, [r4, #23]
    e50e:	bd10      	pop	{r4, pc}
    e510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e514:	2000      	movs	r0, #0
    e516:	f7f3 b9db 	b.w	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e51a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e51a:	b508      	push	{r3, lr}
    e51c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e520:	f88d 1000 	strb.w	r1, [sp]
    e524:	9900      	ldr	r1, [sp, #0]
    e526:	9100      	str	r1, [sp, #0]
    e528:	f89d 1000 	ldrb.w	r1, [sp]
    e52c:	b941      	cbnz	r1, e540 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    e52e:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    e532:	f88d 1000 	strb.w	r1, [sp]
    e536:	9900      	ldr	r1, [sp, #0]
    e538:	9100      	str	r1, [sp, #0]
    e53a:	f89d 1000 	ldrb.w	r1, [sp]
    e53e:	b109      	cbz	r1, e544 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    e540:	2001      	movs	r0, #1
    e542:	bd08      	pop	{r3, pc}
    e544:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e548:	f88d 0000 	strb.w	r0, [sp]
    e54c:	9800      	ldr	r0, [sp, #0]
    e54e:	9000      	str	r0, [sp, #0]
    e550:	f89d 0000 	ldrb.w	r0, [sp]
    e554:	2000      	movs	r0, #0
    e556:	bd08      	pop	{r3, pc}

0000e558 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e558:	20ff      	movs	r0, #255	; 0xff
    e55a:	7008      	strb	r0, [r1, #0]
    e55c:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e55e:	f7fe bf71 	b.w	d444 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e562 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e562:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e564:	460d      	mov	r5, r1
    e566:	4604      	mov	r4, r0
    e568:	f44f 728c 	mov.w	r2, #280	; 0x118
    e56c:	2100      	movs	r1, #0
    e56e:	f002 f850 	bl	10612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e572:	20ff      	movs	r0, #255	; 0xff
    e574:	7020      	strb	r0, [r4, #0]
    e576:	207f      	movs	r0, #127	; 0x7f
    e578:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e57c:	2013      	movs	r0, #19
    e57e:	8060      	strh	r0, [r4, #2]
    e580:	f242 7010 	movw	r0, #10000	; 0x2710
    e584:	8460      	strh	r0, [r4, #34]	; 0x22
    e586:	f7f2 ff93 	bl	14b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e58a:	4601      	mov	r1, r0
    e58c:	6360      	str	r0, [r4, #52]	; 0x34
    e58e:	2200      	movs	r2, #0
    e590:	4668      	mov	r0, sp
    e592:	f7fe febd 	bl	d310 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e596:	2200      	movs	r2, #0
    e598:	2101      	movs	r1, #1
    e59a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e59c:	f7fe ff32 	bl	d404 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5a0:	2204      	movs	r2, #4
    e5a2:	4668      	mov	r0, sp
    e5a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e5a6:	f7fe feb3 	bl	d310 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e5aa:	2200      	movs	r2, #0
    e5ac:	4611      	mov	r1, r2
    e5ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e5b0:	f7fe ff28 	bl	d404 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5b4:	73a5      	strb	r5, [r4, #14]
    e5b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e5ba:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e5be:	f000 b958 	b.w	e872 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e5c2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e5c2:	7880      	ldrb	r0, [r0, #2]
    e5c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e5c8:	b108      	cbz	r0, e5ce <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e5ca:	2000      	movs	r0, #0
    e5cc:	4770      	bx	lr
    e5ce:	201f      	movs	r0, #31
    e5d0:	4770      	bx	lr

0000e5d2 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e5d2:	f7f5 bbbb 	b.w	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>

0000e5d6 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e5d6:	6880      	ldr	r0, [r0, #8]
    e5d8:	4770      	bx	lr

0000e5da <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e5da:	2001      	movs	r0, #1
    e5dc:	4770      	bx	lr

0000e5de <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e5de:	b510      	push	{r4, lr}
    e5e0:	4604      	mov	r4, r0
    e5e2:	3028      	adds	r0, #40	; 0x28
    e5e4:	f000 f905 	bl	e7f2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e5e8:	8861      	ldrh	r1, [r4, #2]
    e5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5ee:	2228      	movs	r2, #40	; 0x28
    e5f0:	f7f5 bd7c 	b.w	40ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e5f4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e5f4:	2200      	movs	r2, #0
    e5f6:	8602      	strh	r2, [r0, #48]	; 0x30
    e5f8:	8843      	ldrh	r3, [r0, #2]
    e5fa:	2b1d      	cmp	r3, #29
    e5fc:	d001      	beq.n	e602 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e5fe:	7341      	strb	r1, [r0, #13]
    e600:	4770      	bx	lr
    e602:	7342      	strb	r2, [r0, #13]
    e604:	4770      	bx	lr

0000e606 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    e606:	b510      	push	{r4, lr}
    e608:	2400      	movs	r4, #0
    e60a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e60c:	f7fe fef2 	bl	d3f4 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    e610:	4384      	bics	r4, r0
    e612:	f084 0001 	eor.w	r0, r4, #1
    e616:	bd10      	pop	{r4, pc}

0000e618 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e618:	2000      	movs	r0, #0
    e61a:	4770      	bx	lr

0000e61c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e61c:	7880      	ldrb	r0, [r0, #2]
    e61e:	f000 0001 	and.w	r0, r0, #1
    e622:	4770      	bx	lr

0000e624 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e624:	7880      	ldrb	r0, [r0, #2]
    e626:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e62a:	4770      	bx	lr

0000e62c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e62c:	2001      	movs	r0, #1
    e62e:	4770      	bx	lr

0000e630 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e630:	7880      	ldrb	r0, [r0, #2]
    e632:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e636:	4770      	bx	lr

0000e638 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e638:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e63c:	4770      	bx	lr

0000e63e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e63e:	7800      	ldrb	r0, [r0, #0]
    e640:	28ff      	cmp	r0, #255	; 0xff
    e642:	d001      	beq.n	e648 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e644:	2001      	movs	r0, #1
    e646:	4770      	bx	lr
    e648:	2000      	movs	r0, #0
    e64a:	4770      	bx	lr

0000e64c <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e64c:	f800 1f20 	strb.w	r1, [r0, #32]!
    e650:	7042      	strb	r2, [r0, #1]
    e652:	4770      	bx	lr

0000e654 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e654:	680a      	ldr	r2, [r1, #0]
    e656:	f840 2f11 	str.w	r2, [r0, #17]!
    e65a:	8889      	ldrh	r1, [r1, #4]
    e65c:	8081      	strh	r1, [r0, #4]
    e65e:	2101      	movs	r1, #1
    e660:	7181      	strb	r1, [r0, #6]
    e662:	4770      	bx	lr

0000e664 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e664:	7b00      	ldrb	r0, [r0, #12]
    e666:	4770      	bx	lr

0000e668 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e668:	2001      	movs	r0, #1
    e66a:	4770      	bx	lr

0000e66c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e66c:	61c1      	str	r1, [r0, #28]
    e66e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e672:	724a      	strb	r2, [r1, #9]
    e674:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e678:	f8c1 200a 	str.w	r2, [r1, #10]
    e67c:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e680:	81c8      	strh	r0, [r1, #14]
    e682:	4770      	bx	lr

0000e684 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e684:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e688:	4770      	bx	lr

0000e68a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e68a:	7bc0      	ldrb	r0, [r0, #15]
    e68c:	2800      	cmp	r0, #0
    e68e:	d000      	beq.n	e692 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e690:	2001      	movs	r0, #1
    e692:	4770      	bx	lr
    e694:	7802      	ldrb	r2, [r0, #0]
    e696:	2320      	movs	r3, #32
    e698:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e69c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e6a0:	430a      	orrs	r2, r1
    e6a2:	7002      	strb	r2, [r0, #0]
    e6a4:	4770      	bx	lr
    e6a6:	2101      	movs	r1, #1
    e6a8:	f7f4 bfa0 	b.w	35ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e6ac:	2101      	movs	r1, #1
    e6ae:	f7f4 bf9d 	b.w	35ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e6b2:	2200      	movs	r2, #0
    e6b4:	704a      	strb	r2, [r1, #1]
    e6b6:	2205      	movs	r2, #5
    e6b8:	700a      	strb	r2, [r1, #0]
    e6ba:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e6be:	6048      	str	r0, [r1, #4]
    e6c0:	4770      	bx	lr
    e6c2:	b510      	push	{r4, lr}
    e6c4:	460c      	mov	r4, r1
    e6c6:	2100      	movs	r1, #0
    e6c8:	7061      	strb	r1, [r4, #1]
    e6ca:	2112      	movs	r1, #18
    e6cc:	7021      	strb	r1, [r4, #0]
    e6ce:	f100 0109 	add.w	r1, r0, #9
    e6d2:	2221      	movs	r2, #33	; 0x21
    e6d4:	1d20      	adds	r0, r4, #4
    e6d6:	f001 ff22 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e6da:	2001      	movs	r0, #1
    e6dc:	71e0      	strb	r0, [r4, #7]
    e6de:	7920      	ldrb	r0, [r4, #4]
    e6e0:	2800      	cmp	r0, #0
    e6e2:	d015      	beq.n	e710 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e6e4:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    e6e8:	2100      	movs	r1, #0
    e6ea:	4620      	mov	r0, r4
    e6ec:	f7f2 fc8e 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e6f0:	2800      	cmp	r0, #0
    e6f2:	d00d      	beq.n	e710 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e6f4:	8800      	ldrh	r0, [r0, #0]
    e6f6:	f7fe ff04 	bl	d502 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6fa:	2100      	movs	r1, #0
    e6fc:	4620      	mov	r0, r4
    e6fe:	f7f2 fd27 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e702:	2800      	cmp	r0, #0
    e704:	d004      	beq.n	e710 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e706:	f240 2151 	movw	r1, #593	; 0x251
    e70a:	202d      	movs	r0, #45	; 0x2d
    e70c:	f7f2 f950 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e710:	bd10      	pop	{r4, pc}
    e712:	2200      	movs	r2, #0
    e714:	704a      	strb	r2, [r1, #1]
    e716:	221a      	movs	r2, #26
    e718:	700a      	strb	r2, [r1, #0]
    e71a:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e71e:	604a      	str	r2, [r1, #4]
    e720:	6842      	ldr	r2, [r0, #4]
    e722:	608a      	str	r2, [r1, #8]
    e724:	7a00      	ldrb	r0, [r0, #8]
    e726:	7308      	strb	r0, [r1, #12]
    e728:	4770      	bx	lr
    e72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e72e:	4604      	mov	r4, r0
    e730:	460f      	mov	r7, r1
    e732:	7e40      	ldrb	r0, [r0, #25]
    e734:	f7f3 fe08 	bl	2348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e738:	4606      	mov	r6, r0
    e73a:	7e20      	ldrb	r0, [r4, #24]
    e73c:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e740:	b120      	cbz	r0, e74c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e742:	b11e      	cbz	r6, e74c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e744:	7e60      	ldrb	r0, [r4, #25]
    e746:	f7f3 fdf3 	bl	2330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e74a:	b1a0      	cbz	r0, e776 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    e74c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e750:	2800      	cmp	r0, #0
    e752:	d024      	beq.n	e79e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    e754:	7ea0      	ldrb	r0, [r4, #26]
    e756:	2800      	cmp	r0, #0
    e758:	d021      	beq.n	e79e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    e75a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e75e:	4629      	mov	r1, r5
    e760:	f7ff fead 	bl	e4be <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    e764:	b1a8      	cbz	r0, e792 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    e766:	f7f3 fddf 	bl	2328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e76a:	463a      	mov	r2, r7
    e76c:	4629      	mov	r1, r5
    e76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e772:	f7fe befa 	b.w	d56a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e776:	2001      	movs	r0, #1
    e778:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e77c:	463a      	mov	r2, r7
    e77e:	4629      	mov	r1, r5
    e780:	4630      	mov	r0, r6
    e782:	f7fe fef2 	bl	d56a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e786:	7e61      	ldrb	r1, [r4, #25]
    e788:	4628      	mov	r0, r5
    e78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e78e:	f7f3 bde7 	b.w	2360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e792:	4639      	mov	r1, r7
    e794:	4628      	mov	r0, r5
    e796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e79a:	f7fe bed5 	b.w	d548 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7a2:	b510      	push	{r4, lr}
    e7a4:	4604      	mov	r4, r0
    e7a6:	4608      	mov	r0, r1
    e7a8:	f7f9 fb50 	bl	7e4c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e7ac:	7921      	ldrb	r1, [r4, #4]
    e7ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7b2:	2025      	movs	r0, #37	; 0x25
    e7b4:	f7f9 bb20 	b.w	7df8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e7b8:	b570      	push	{r4, r5, r6, lr}
    e7ba:	4614      	mov	r4, r2
    e7bc:	461d      	mov	r5, r3
    e7be:	4606      	mov	r6, r0
    e7c0:	f001 fd1b 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e7c4:	1900      	adds	r0, r0, r4
    e7c6:	4169      	adcs	r1, r5
    e7c8:	e9c6 0100 	strd	r0, r1, [r6]
    e7cc:	bd70      	pop	{r4, r5, r6, pc}

0000e7ce <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e7ce:	b570      	push	{r4, r5, r6, lr}
    e7d0:	7001      	strb	r1, [r0, #0]
    e7d2:	7042      	strb	r2, [r0, #1]
    e7d4:	4614      	mov	r4, r2
    e7d6:	460d      	mov	r5, r1
    e7d8:	7880      	ldrb	r0, [r0, #2]
    e7da:	f000 f87f 	bl	e8dc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e7de:	fb10 f005 	smulbb	r0, r0, r5
    e7e2:	4360      	muls	r0, r4
    e7e4:	28ff      	cmp	r0, #255	; 0xff
    e7e6:	d303      	bcc.n	e7f0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e7e8:	215c      	movs	r1, #92	; 0x5c
    e7ea:	202e      	movs	r0, #46	; 0x2e
    e7ec:	f7f2 f8e0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7f0:	bd70      	pop	{r4, r5, r6, pc}

0000e7f2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e7f2:	b510      	push	{r4, lr}
    e7f4:	4604      	mov	r4, r0
    e7f6:	7880      	ldrb	r0, [r0, #2]
    e7f8:	f000 f870 	bl	e8dc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e7fc:	7861      	ldrb	r1, [r4, #1]
    e7fe:	7822      	ldrb	r2, [r4, #0]
    e800:	fb11 f102 	smulbb	r1, r1, r2
    e804:	4348      	muls	r0, r1
    e806:	b2c0      	uxtb	r0, r0
    e808:	bd10      	pop	{r4, pc}

0000e80a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e80a:	b510      	push	{r4, lr}
    e80c:	4604      	mov	r4, r0
    e80e:	f000 f84d 	bl	e8ac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e812:	7961      	ldrb	r1, [r4, #5]
    e814:	1c49      	adds	r1, r1, #1
    e816:	b2c9      	uxtb	r1, r1
    e818:	7161      	strb	r1, [r4, #5]
    e81a:	7862      	ldrb	r2, [r4, #1]
    e81c:	4291      	cmp	r1, r2
    e81e:	d10b      	bne.n	e838 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e820:	2200      	movs	r2, #0
    e822:	7162      	strb	r2, [r4, #5]
    e824:	78e1      	ldrb	r1, [r4, #3]
    e826:	4301      	orrs	r1, r0
    e828:	70e1      	strb	r1, [r4, #3]
    e82a:	78a3      	ldrb	r3, [r4, #2]
    e82c:	4299      	cmp	r1, r3
    e82e:	d103      	bne.n	e838 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e830:	70e2      	strb	r2, [r4, #3]
    e832:	7921      	ldrb	r1, [r4, #4]
    e834:	1c49      	adds	r1, r1, #1
    e836:	7121      	strb	r1, [r4, #4]
    e838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e83c:	f000 b825 	b.w	e88a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e840 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e840:	7081      	strb	r1, [r0, #2]
    e842:	4770      	bx	lr

0000e844 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e844:	b570      	push	{r4, r5, r6, lr}
    e846:	4604      	mov	r4, r0
    e848:	7880      	ldrb	r0, [r0, #2]
    e84a:	f000 f847 	bl	e8dc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e84e:	7861      	ldrb	r1, [r4, #1]
    e850:	fb11 f500 	smulbb	r5, r1, r0
    e854:	78e0      	ldrb	r0, [r4, #3]
    e856:	f000 f841 	bl	e8dc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e85a:	7861      	ldrb	r1, [r4, #1]
    e85c:	7962      	ldrb	r2, [r4, #5]
    e85e:	fb10 2001 	smlabb	r0, r0, r1, r2
    e862:	7821      	ldrb	r1, [r4, #0]
    e864:	7922      	ldrb	r2, [r4, #4]
    e866:	1a89      	subs	r1, r1, r2
    e868:	fb11 f105 	smulbb	r1, r1, r5
    e86c:	1a08      	subs	r0, r1, r0
    e86e:	b2c0      	uxtb	r0, r0
    e870:	bd70      	pop	{r4, r5, r6, pc}

0000e872 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e872:	2100      	movs	r1, #0
    e874:	6001      	str	r1, [r0, #0]
    e876:	8081      	strh	r1, [r0, #4]
    e878:	2101      	movs	r1, #1
    e87a:	7041      	strb	r1, [r0, #1]
    e87c:	7001      	strb	r1, [r0, #0]
    e87e:	4770      	bx	lr

0000e880 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e880:	2100      	movs	r1, #0
    e882:	70c1      	strb	r1, [r0, #3]
    e884:	7141      	strb	r1, [r0, #5]
    e886:	7101      	strb	r1, [r0, #4]
    e888:	4770      	bx	lr
    e88a:	b510      	push	{r4, lr}
    e88c:	2801      	cmp	r0, #1
    e88e:	d007      	beq.n	e8a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e890:	2802      	cmp	r0, #2
    e892:	d007      	beq.n	e8a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e894:	2804      	cmp	r0, #4
    e896:	d007      	beq.n	e8a8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e898:	2139      	movs	r1, #57	; 0x39
    e89a:	202e      	movs	r0, #46	; 0x2e
    e89c:	f7f2 f888 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8a0:	2025      	movs	r0, #37	; 0x25
    e8a2:	bd10      	pop	{r4, pc}
    e8a4:	2026      	movs	r0, #38	; 0x26
    e8a6:	bd10      	pop	{r4, pc}
    e8a8:	2027      	movs	r0, #39	; 0x27
    e8aa:	bd10      	pop	{r4, pc}
    e8ac:	4601      	mov	r1, r0
    e8ae:	2000      	movs	r0, #0
    e8b0:	788a      	ldrb	r2, [r1, #2]
    e8b2:	07d3      	lsls	r3, r2, #31
    e8b4:	d002      	beq.n	e8bc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e8b6:	78cb      	ldrb	r3, [r1, #3]
    e8b8:	07db      	lsls	r3, r3, #31
    e8ba:	d006      	beq.n	e8ca <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e8bc:	0793      	lsls	r3, r2, #30
    e8be:	d506      	bpl.n	e8ce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e8c0:	78cb      	ldrb	r3, [r1, #3]
    e8c2:	079b      	lsls	r3, r3, #30
    e8c4:	d403      	bmi.n	e8ce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e8c6:	2002      	movs	r0, #2
    e8c8:	4770      	bx	lr
    e8ca:	2001      	movs	r0, #1
    e8cc:	4770      	bx	lr
    e8ce:	0752      	lsls	r2, r2, #29
    e8d0:	d5fc      	bpl.n	e8cc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e8d2:	78c9      	ldrb	r1, [r1, #3]
    e8d4:	0749      	lsls	r1, r1, #29
    e8d6:	d4f9      	bmi.n	e8cc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e8d8:	2004      	movs	r0, #4
    e8da:	4770      	bx	lr
    e8dc:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e8e0:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e8e4:	4411      	add	r1, r2
    e8e6:	f000 0001 	and.w	r0, r0, #1
    e8ea:	4408      	add	r0, r1
    e8ec:	4770      	bx	lr

0000e8ee <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e8ee:	f240 315a 	movw	r1, #858	; 0x35a
    e8f2:	4348      	muls	r0, r1
    e8f4:	4770      	bx	lr

0000e8f6 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e8f6:	f240 20ef 	movw	r0, #751	; 0x2ef
    e8fa:	4770      	bx	lr
    e8fc:	041c020e 	.word	0x041c020e
    e900:	0c600630 	.word	0x0c600630
    e904:	06b4035a 	.word	0x06b4035a
    e908:	0bf505c5 	.word	0x0bf505c5
    e90c:	01a31225 	.word	0x01a31225
    e910:	05bf03b1 	.word	0x05bf03b1
    e914:	064902ef 	.word	0x064902ef
    e918:	09a3      	.short	0x09a3

0000e91a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e91a:	b510      	push	{r4, lr}
    e91c:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    e920:	b109      	cbz	r1, e926 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e922:	2000      	movs	r0, #0
    e924:	bd10      	pop	{r4, pc}
    e926:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e92a:	b131      	cbz	r1, e93a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e92c:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    e930:	428a      	cmp	r2, r1
    e932:	d902      	bls.n	e93a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e934:	f7f4 fe42 	bl	35bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e938:	e7f3      	b.n	e922 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e93a:	2001      	movs	r0, #1
    e93c:	bd10      	pop	{r4, pc}

0000e93e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e93e:	b510      	push	{r4, lr}
    e940:	b131      	cbz	r1, e950 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e942:	2901      	cmp	r1, #1
    e944:	d008      	beq.n	e958 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e946:	f240 71d3 	movw	r1, #2003	; 0x7d3
    e94a:	2030      	movs	r0, #48	; 0x30
    e94c:	f7f2 f830 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e954:	f000 b9c7 	b.w	ece6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    e958:	2100      	movs	r1, #0
    e95a:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    e95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e962:	f000 b923 	b.w	ebac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000e966 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    e966:	b510      	push	{r4, lr}
    e968:	4604      	mov	r4, r0
    e96a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e96e:	2800      	cmp	r0, #0
    e970:	d019      	beq.n	e9a6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    e972:	2001      	movs	r0, #1
    e974:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    e978:	4601      	mov	r1, r0
    e97a:	4620      	mov	r0, r4
    e97c:	f7ff fe82 	bl	e684 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e980:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    e984:	b170      	cbz	r0, e9a4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    e986:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    e98a:	f7fb fd01 	bl	a390 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e98e:	7820      	ldrb	r0, [r4, #0]
    e990:	f7fb fe76 	bl	a680 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e994:	f814 09c8 	ldrb.w	r0, [r4], #-200
    e998:	f7fb fe50 	bl	a63c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e99c:	b120      	cbz	r0, e9a8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    e99e:	2000      	movs	r0, #0
    e9a0:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    e9a4:	2000      	movs	r0, #0
    e9a6:	bd10      	pop	{r4, pc}
    e9a8:	f240 210b 	movw	r1, #523	; 0x20b
    e9ac:	2030      	movs	r0, #48	; 0x30
    e9ae:	f7f1 ffff 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e9b2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    e9b2:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    e9b6:	4770      	bx	lr

0000e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e9b8:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e9bc:	4770      	bx	lr

0000e9be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    e9be:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e9c0:	4604      	mov	r4, r0
    e9c2:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    e9c6:	2800      	cmp	r0, #0
    e9c8:	d15f      	bne.n	ea8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e9ca:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    e9ce:	2803      	cmp	r0, #3
    e9d0:	d15b      	bne.n	ea8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e9d2:	f001 fc12 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e9d6:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    e9da:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    e9de:	1ac0      	subs	r0, r0, r3
    e9e0:	eb61 0102 	sbc.w	r1, r1, r2
    e9e4:	2300      	movs	r3, #0
    e9e6:	461a      	mov	r2, r3
    e9e8:	1a1b      	subs	r3, r3, r0
    e9ea:	418a      	sbcs	r2, r1
    e9ec:	da4d      	bge.n	ea8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e9ee:	1c42      	adds	r2, r0, #1
    e9f0:	f171 0100 	sbcs.w	r1, r1, #0
    e9f4:	db02      	blt.n	e9fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    e9f6:	f240 610b 	movw	r1, #1547	; 0x60b
    e9fa:	e036      	b.n	ea6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    e9fc:	6921      	ldr	r1, [r4, #16]
    e9fe:	b111      	cbz	r1, ea06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    ea00:	fbb0 f0f1 	udiv	r0, r0, r1
    ea04:	e000      	b.n	ea08 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    ea06:	2000      	movs	r0, #0
    ea08:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ea0c:	1c40      	adds	r0, r0, #1
    ea0e:	4408      	add	r0, r1
    ea10:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ea14:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ea18:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    ea1c:	1a08      	subs	r0, r1, r0
    ea1e:	b200      	sxth	r0, r0
    ea20:	2800      	cmp	r0, #0
    ea22:	dd32      	ble.n	ea8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ea24:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ea28:	f7fb fcb2 	bl	a390 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ea2c:	2800      	cmp	r0, #0
    ea2e:	d02c      	beq.n	ea8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ea30:	20ff      	movs	r0, #255	; 0xff
    ea32:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    ea36:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    ea3a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    ea3e:	ae01      	add	r6, sp, #4
    ea40:	1a40      	subs	r0, r0, r1
    ea42:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ea46:	1e40      	subs	r0, r0, #1
    ea48:	4408      	add	r0, r1
    ea4a:	b285      	uxth	r5, r0
    ea4c:	e017      	b.n	ea7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    ea4e:	9600      	str	r6, [sp, #0]
    ea50:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    ea54:	2300      	movs	r3, #0
    ea56:	2201      	movs	r2, #1
    ea58:	4620      	mov	r0, r4
    ea5a:	f7f5 fe4f 	bl	46fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    ea5e:	2800      	cmp	r0, #0
    ea60:	d013      	beq.n	ea8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ea62:	2801      	cmp	r0, #1
    ea64:	d004      	beq.n	ea70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    ea66:	f240 6144 	movw	r1, #1604	; 0x644
    ea6a:	2030      	movs	r0, #48	; 0x30
    ea6c:	f7f1 ffa0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea70:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ea74:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ea78:	4408      	add	r0, r1
    ea7a:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ea7e:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ea82:	1a28      	subs	r0, r5, r0
    ea84:	b200      	sxth	r0, r0
    ea86:	2800      	cmp	r0, #0
    ea88:	dae1      	bge.n	ea4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    ea8a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ea8c:	2000      	movs	r0, #0
    ea8e:	4770      	bx	lr
    ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea94:	4604      	mov	r4, r0
    ea96:	f000 f8ff 	bl	ec98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    ea9a:	2700      	movs	r7, #0
    ea9c:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    eaa0:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    eaa4:	2601      	movs	r6, #1
    eaa6:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    eaaa:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    eaac:	463d      	mov	r5, r7
    eaae:	b130      	cbz	r0, eabe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
    eab0:	f001 fba3 	bl	101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eab4:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    eab6:	fbb0 f2f1 	udiv	r2, r0, r1
    eaba:	fb01 0512 	mls	r5, r1, r2, r0
    eabe:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    eac2:	2100      	movs	r1, #0
    eac4:	4680      	mov	r8, r0
    eac6:	f7fe fec5 	bl	d854 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    eaca:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    eace:	1949      	adds	r1, r1, r5
    ead0:	4178      	adcs	r0, r7
    ead2:	e9c4 1000 	strd	r1, r0, [r4]
    ead6:	8920      	ldrh	r0, [r4, #8]
    ead8:	3cf8      	subs	r4, #248	; 0xf8
    eada:	1c40      	adds	r0, r0, #1
    eadc:	280a      	cmp	r0, #10
    eade:	d201      	bcs.n	eae4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
    eae0:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    eae4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    eae8:	b138      	cbz	r0, eafa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    eaea:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    eaee:	1c40      	adds	r0, r0, #1
    eaf0:	280a      	cmp	r0, #10
    eaf2:	d302      	bcc.n	eafa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    eaf4:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    eaf8:	e002      	b.n	eb00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    eafa:	2002      	movs	r0, #2
    eafc:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    eb00:	4620      	mov	r0, r4
    eb02:	f000 f823 	bl	eb4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    eb06:	b120      	cbz	r0, eb12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
    eb08:	4620      	mov	r0, r4
    eb0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb0e:	f000 b80e 	b.w	eb2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    eb12:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    eb16:	4641      	mov	r1, r8
    eb18:	f000 f8bc 	bl	ec94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    eb1c:	2800      	cmp	r0, #0
    eb1e:	d104      	bne.n	eb2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
    eb20:	f240 61e7 	movw	r1, #1767	; 0x6e7
    eb24:	2030      	movs	r0, #48	; 0x30
    eb26:	f7f1 ff43 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb2e:	b510      	push	{r4, lr}
    eb30:	4604      	mov	r4, r0
    eb32:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    eb36:	f7fb fd81 	bl	a63c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eb3a:	2000      	movs	r0, #0
    eb3c:	7620      	strb	r0, [r4, #24]
    eb3e:	bd10      	pop	{r4, pc}
    eb40:	b510      	push	{r4, lr}
    eb42:	f7ff fd4c 	bl	e5de <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    eb46:	f200 1015 	addw	r0, r0, #277	; 0x115
    eb4a:	bd10      	pop	{r4, pc}
    eb4c:	b570      	push	{r4, r5, r6, lr}
    eb4e:	4605      	mov	r5, r0
    eb50:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    eb54:	b108      	cbz	r0, eb5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    eb56:	2001      	movs	r0, #1
    eb58:	bd70      	pop	{r4, r5, r6, pc}
    eb5a:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    eb5e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    eb62:	4050      	eors	r0, r2
    eb64:	ea70 0101 	orns	r1, r0, r1
    eb68:	d012      	beq.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    eb6a:	2400      	movs	r4, #0
    eb6c:	4621      	mov	r1, r4
    eb6e:	4628      	mov	r0, r5
    eb70:	f7ff ffe6 	bl	eb40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    eb74:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    eb78:	1840      	adds	r0, r0, r1
    eb7a:	4154      	adcs	r4, r2
    eb7c:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    eb80:	3df8      	subs	r5, #248	; 0xf8
    eb82:	1a10      	subs	r0, r2, r0
    eb84:	41a1      	sbcs	r1, r4
    eb86:	d503      	bpl.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    eb88:	4628      	mov	r0, r5
    eb8a:	f7f4 fd17 	bl	35bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eb8e:	e7e2      	b.n	eb56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
    eb90:	2000      	movs	r0, #0
    eb92:	bd70      	pop	{r4, r5, r6, pc}
    eb94:	b510      	push	{r4, lr}
    eb96:	4604      	mov	r4, r0
    eb98:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    eb9c:	f000 f988 	bl	eeb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    eba0:	4601      	mov	r1, r0
    eba2:	4620      	mov	r0, r4
    eba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eba8:	f7ff b9c7 	b.w	df3a <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    ebac:	b510      	push	{r4, lr}
    ebae:	f7f8 ff7f 	bl	7ab0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ebb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebb6:	f7fb be9f 	b.w	a8f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ebba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ebbe:	4604      	mov	r4, r0
    ebc0:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    ebc4:	2800      	cmp	r0, #0
    ebc6:	d051      	beq.n	ec6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    ebc8:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ebcc:	2803      	cmp	r0, #3
    ebce:	d14d      	bne.n	ec6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    ebd0:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ebd4:	f001 fa2a 	bl	1002c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ebd8:	4605      	mov	r5, r0
    ebda:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ebde:	f7f5 fc59 	bl	4494 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    ebe2:	4428      	add	r0, r5
    ebe4:	b286      	uxth	r6, r0
    ebe6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ebea:	f7f5 fc53 	bl	4494 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    ebee:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ebf2:	fa1f f880 	uxth.w	r8, r0
    ebf6:	4648      	mov	r0, r9
    ebf8:	f7f9 f818 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ebfc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    ec00:	1a0d      	subs	r5, r1, r0
    ec02:	4648      	mov	r0, r9
    ec04:	f7f9 f83e 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ec08:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ec0c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ec10:	fbb0 f0fa 	udiv	r0, r0, sl
    ec14:	1a2d      	subs	r5, r5, r0
    ec16:	4648      	mov	r0, r9
    ec18:	f7f9 f808 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ec1c:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    ec20:	1a0f      	subs	r7, r1, r0
    ec22:	4648      	mov	r0, r9
    ec24:	f7f9 f82e 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ec28:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ec2c:	4401      	add	r1, r0
    ec2e:	fbb1 f0fa 	udiv	r0, r1, sl
    ec32:	1a39      	subs	r1, r7, r0
    ec34:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    ec38:	4370      	muls	r0, r6
    ec3a:	fbb0 f2f8 	udiv	r2, r0, r8
    ec3e:	2029      	movs	r0, #41	; 0x29
    ec40:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    ec44:	3260      	adds	r2, #96	; 0x60
    ec46:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    ec4a:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    ec4e:	42a9      	cmp	r1, r5
    ec50:	d801      	bhi.n	ec56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
    ec52:	4285      	cmp	r5, r0
    ec54:	d901      	bls.n	ec5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
    ec56:	f7fd f849 	bl	bcec <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    ec5a:	4631      	mov	r1, r6
    ec5c:	6920      	ldr	r0, [r4, #16]
    ec5e:	f7fd f8ad 	bl	bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ec62:	2100      	movs	r1, #0
    ec64:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    ec68:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    ec6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ec70:	b570      	push	{r4, r5, r6, lr}
    ec72:	460c      	mov	r4, r1
    ec74:	4605      	mov	r5, r0
    ec76:	f7f9 f805 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ec7a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ec7e:	4408      	add	r0, r1
    ec80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ec84:	fbb0 f6f1 	udiv	r6, r0, r1
    ec88:	4628      	mov	r0, r5
    ec8a:	f7f8 ffcf 	bl	7c2c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ec8e:	4430      	add	r0, r6
    ec90:	4420      	add	r0, r4
    ec92:	bd70      	pop	{r4, r5, r6, pc}
    ec94:	f7fa bf1e 	b.w	9ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ec98:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ec9a:	4604      	mov	r4, r0
    ec9c:	f7ff fcc6 	bl	e62c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    eca0:	b1f8      	cbz	r0, ece2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
    eca2:	4620      	mov	r0, r4
    eca4:	f7ff fcba 	bl	e61c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eca8:	b918      	cbnz	r0, ecb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
    ecaa:	4620      	mov	r0, r4
    ecac:	f7ff fcc0 	bl	e630 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ecb0:	b140      	cbz	r0, ecc4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
    ecb2:	245a      	movs	r4, #90	; 0x5a
    ecb4:	4668      	mov	r0, sp
    ecb6:	f7fd fad7 	bl	c268 <mpsl_fem_pa_is_configured>
    ecba:	f89d 0000 	ldrb.w	r0, [sp]
    ecbe:	b118      	cbz	r0, ecc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    ecc0:	2501      	movs	r5, #1
    ecc2:	e002      	b.n	ecca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    ecc4:	2450      	movs	r4, #80	; 0x50
    ecc6:	e7f5      	b.n	ecb4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    ecc8:	2500      	movs	r5, #0
    ecca:	a801      	add	r0, sp, #4
    eccc:	f7fd fab4 	bl	c238 <mpsl_fem_lna_is_configured>
    ecd0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ecd4:	b100      	cbz	r0, ecd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
    ecd6:	2001      	movs	r0, #1
    ecd8:	4305      	orrs	r5, r0
    ecda:	d000      	beq.n	ecde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    ecdc:	340a      	adds	r4, #10
    ecde:	4620      	mov	r0, r4
    ece0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ece2:	2061      	movs	r0, #97	; 0x61
    ece4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ece6:	b570      	push	{r4, r5, r6, lr}
    ece8:	4604      	mov	r4, r0
    ecea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    ecec:	2500      	movs	r5, #0
    ecee:	b130      	cbz	r0, ecfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    ecf0:	f7f4 f852 	bl	2d98 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    ecf4:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    ecf6:	fbb0 f2f1 	udiv	r2, r0, r1
    ecfa:	fb01 0512 	mls	r5, r1, r2, r0
    ecfe:	4620      	mov	r0, r4
    ed00:	f7ff fc69 	bl	e5d6 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ed04:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    ed08:	4428      	add	r0, r5
    ed0a:	34e8      	adds	r4, #232	; 0xe8
    ed0c:	2500      	movs	r5, #0
    ed0e:	1882      	adds	r2, r0, r2
    ed10:	eb45 0001 	adc.w	r0, r5, r1
    ed14:	e9c4 2004 	strd	r2, r0, [r4, #16]
    ed18:	f804 5b0b 	strb.w	r5, [r4], #11
    ed1c:	2001      	movs	r0, #1
    ed1e:	f804 0901 	strb.w	r0, [r4], #-1
    ed22:	2002      	movs	r0, #2
    ed24:	f804 09f2 	strb.w	r0, [r4], #-242
    ed28:	4620      	mov	r0, r4
    ed2a:	f7ff ffb5 	bl	ec98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    ed2e:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ed32:	4620      	mov	r0, r4
    ed34:	f7ff ff0a 	bl	eb4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ed38:	b930      	cbnz	r0, ed48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
    ed3a:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ed3e:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    ed42:	f7ff ffa7 	bl	ec94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    ed46:	b128      	cbz	r0, ed54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
    ed48:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    ed4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed50:	f7ff bf2c 	b.w	ebac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    ed54:	f240 712d 	movw	r1, #1837	; 0x72d
    ed58:	2030      	movs	r0, #48	; 0x30
    ed5a:	f7f1 fe29 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed5e:	b510      	push	{r4, lr}
    ed60:	4604      	mov	r4, r0
    ed62:	2000      	movs	r0, #0
    ed64:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    ed68:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ed6c:	f7fb fc66 	bl	a63c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed70:	2020      	movs	r0, #32
    ed72:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    ed76:	bd10      	pop	{r4, pc}
    ed78:	b510      	push	{r4, lr}
    ed7a:	b140      	cbz	r0, ed8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
    ed7c:	2909      	cmp	r1, #9
    ed7e:	d22f      	bcs.n	ede0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x422>
    ed80:	e8df f001 	tbb	[pc, r1]
    ed84:	1e1e1607 	.word	0x1e1e1607
    ed88:	26222e1a 	.word	0x26222e1a
    ed8c:	002a      	.short	0x002a
    ed8e:	21cd      	movs	r1, #205	; 0xcd
    ed90:	e023      	b.n	edda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    ed92:	4604      	mov	r4, r0
    ed94:	f7f4 fbe2 	bl	355c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ed98:	b110      	cbz	r0, eda0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e2>
    ed9a:	f240 2187 	movw	r1, #647	; 0x287
    ed9e:	e01c      	b.n	edda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    eda0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    eda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eda8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    edac:	f7fb be80 	b.w	aab0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    edb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edb4:	f000 b8b1 	b.w	ef1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x55c>
    edb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edbc:	f7f9 b84c 	b.w	7e58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    edc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edc4:	f7ff be64 	b.w	ea90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    edc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edcc:	f7ff bc01 	b.w	e5d2 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edd4:	f7ff beab 	b.w	eb2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    edd8:	21ed      	movs	r1, #237	; 0xed
    edda:	2030      	movs	r0, #48	; 0x30
    eddc:	f7f1 fde8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede0:	21f1      	movs	r1, #241	; 0xf1
    ede2:	e7fa      	b.n	edda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    ede4:	b510      	push	{r4, lr}
    ede6:	0004      	movs	r4, r0
    ede8:	d009      	beq.n	edfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    edea:	2200      	movs	r2, #0
    edec:	2909      	cmp	r1, #9
    edee:	d25d      	bcs.n	eeac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    edf0:	e8df f001 	tbb	[pc, r1]
    edf4:	43433b07 	.word	0x43433b07
    edf8:	4f485c3f 	.word	0x4f485c3f
    edfc:	0058      	.short	0x0058
    edfe:	2196      	movs	r1, #150	; 0x96
    ee00:	e051      	b.n	eea6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    ee02:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    ee06:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    ee0a:	4620      	mov	r0, r4
    ee0c:	b189      	cbz	r1, ee32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x474>
    ee0e:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    ee12:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    ee16:	428a      	cmp	r2, r1
    ee18:	d106      	bne.n	ee28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    ee1a:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    ee1e:	1a51      	subs	r1, r2, r1
    ee20:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ee24:	4611      	mov	r1, r2
    ee26:	e00d      	b.n	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    ee28:	1a51      	subs	r1, r2, r1
    ee2a:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ee2e:	b291      	uxth	r1, r2
    ee30:	e008      	b.n	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    ee32:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    ee36:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    ee3a:	1a89      	subs	r1, r1, r2
    ee3c:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ee40:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    ee44:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    ee48:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    ee4c:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    ee50:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    ee54:	f7f5 ffec 	bl	4e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    ee58:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    ee5c:	2800      	cmp	r0, #0
    ee5e:	d020      	beq.n	eea2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e4>
    ee60:	4620      	mov	r0, r4
    ee62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee66:	f7f5 bbcd 	b.w	4604 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    ee6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee6e:	f000 b8a0 	b.w	efb2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    ee72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee76:	f7f8 bfef 	b.w	7e58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ee7a:	4620      	mov	r0, r4
    ee7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee80:	f7f5 be46 	b.w	4b10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
    ee84:	2001      	movs	r0, #1
    ee86:	f7fa fbe5 	bl	9654 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    ee8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee8e:	f7fe bba1 	b.w	d5d4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    ee92:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ee96:	2804      	cmp	r0, #4
    ee98:	d001      	beq.n	ee9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e0>
    ee9a:	21bb      	movs	r1, #187	; 0xbb
    ee9c:	e003      	b.n	eea6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    ee9e:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    eea2:	bd10      	pop	{r4, pc}
    eea4:	21c1      	movs	r1, #193	; 0xc1
    eea6:	2030      	movs	r0, #48	; 0x30
    eea8:	f7f1 fd82 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeac:	21c5      	movs	r1, #197	; 0xc5
    eeae:	e7fa      	b.n	eea6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    eeb0:	b510      	push	{r4, lr}
    eeb2:	f7f8 fee7 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    eeb6:	f64d 7141 	movw	r1, #57153	; 0xdf41
    eeba:	4408      	add	r0, r1
    eebc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eec0:	fbb0 f0f1 	udiv	r0, r0, r1
    eec4:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
    eec8:	bd10      	pop	{r4, pc}
    eeca:	b538      	push	{r3, r4, r5, lr}
    eecc:	2500      	movs	r5, #0
    eece:	4604      	mov	r4, r0
    eed0:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    eed4:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    eed8:	462b      	mov	r3, r5
    eeda:	462a      	mov	r2, r5
    eedc:	4629      	mov	r1, r5
    eede:	9500      	str	r5, [sp, #0]
    eee0:	f7f5 fc0c 	bl	46fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    eee4:	b120      	cbz	r0, eef0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x532>
    eee6:	f240 211f 	movw	r1, #543	; 0x21f
    eeea:	2030      	movs	r0, #48	; 0x30
    eeec:	f7f1 fd60 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eef0:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    eef4:	2001      	movs	r0, #1
    eef6:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    eefa:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    eefe:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    ef02:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    ef06:	3494      	adds	r4, #148	; 0x94
    ef08:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    ef0c:	8820      	ldrh	r0, [r4, #0]
    ef0e:	1e40      	subs	r0, r0, #1
    ef10:	8020      	strh	r0, [r4, #0]
    ef12:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    ef16:	2000      	movs	r0, #0
    ef18:	bd38      	pop	{r3, r4, r5, pc}
    ef1a:	b570      	push	{r4, r5, r6, lr}
    ef1c:	4605      	mov	r5, r0
    ef1e:	f7ff fb81 	bl	e624 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ef22:	b9c8      	cbnz	r0, ef58 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59a>
    ef24:	2100      	movs	r1, #0
    ef26:	4628      	mov	r0, r5
    ef28:	f7ff fe0a 	bl	eb40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    ef2c:	4604      	mov	r4, r0
    ef2e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    ef32:	42a0      	cmp	r0, r4
    ef34:	d20e      	bcs.n	ef54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    ef36:	1a20      	subs	r0, r4, r0
    ef38:	2867      	cmp	r0, #103	; 0x67
    ef3a:	d200      	bcs.n	ef3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x580>
    ef3c:	2067      	movs	r0, #103	; 0x67
    ef3e:	2103      	movs	r1, #3
    ef40:	f7fa fb98 	bl	9674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ef44:	b130      	cbz	r0, ef54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    ef46:	4628      	mov	r0, r5
    ef48:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef50:	f7ff bb3f 	b.w	e5d2 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ef54:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef58:	4628      	mov	r0, r5
    ef5a:	f7f4 fb1b 	bl	3594 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ef5e:	2800      	cmp	r0, #0
    ef60:	d004      	beq.n	ef6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ae>
    ef62:	f240 21bd 	movw	r1, #701	; 0x2bd
    ef66:	2030      	movs	r0, #48	; 0x30
    ef68:	f7f1 fd22 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef6c:	bd70      	pop	{r4, r5, r6, pc}
    ef6e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ef72:	f001 0307 	and.w	r3, r1, #7
    ef76:	7802      	ldrb	r2, [r0, #0]
    ef78:	2101      	movs	r1, #1
    ef7a:	4099      	lsls	r1, r3
    ef7c:	438a      	bics	r2, r1
    ef7e:	7002      	strb	r2, [r0, #0]
    ef80:	4770      	bx	lr

0000ef82 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ef82:	b510      	push	{r4, lr}
    ef84:	460c      	mov	r4, r1
    ef86:	f7f2 f963 	bl	1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    ef8a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ef8e:	2820      	cmp	r0, #32
    ef90:	d00c      	beq.n	efac <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    ef92:	f7fb fb75 	bl	a680 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ef96:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ef9a:	f7fb fb4f 	bl	a63c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef9e:	2800      	cmp	r0, #0
    efa0:	d104      	bne.n	efac <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    efa2:	f640 4129 	movw	r1, #3113	; 0xc29
    efa6:	2031      	movs	r0, #49	; 0x31
    efa8:	f7f1 fd02 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efac:	bd10      	pop	{r4, pc}

0000efae <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    efae:	2000      	movs	r0, #0
    efb0:	4770      	bx	lr

0000efb2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    efb2:	f7f2 bde1 	b.w	1b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000efb6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    efb6:	2100      	movs	r1, #0
    efb8:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    efbc:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    efc0:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    efc4:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    efc8:	b109      	cbz	r1, efce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    efca:	2102      	movs	r1, #2
    efcc:	e000      	b.n	efd0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    efce:	2103      	movs	r1, #3
    efd0:	f7f5 b9d6 	b.w	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    efd4:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    efd8:	28fe      	cmp	r0, #254	; 0xfe
    efda:	d001      	beq.n	efe0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    efdc:	2001      	movs	r0, #1
    efde:	4770      	bx	lr
    efe0:	2000      	movs	r0, #0
    efe2:	4770      	bx	lr
    efe4:	b510      	push	{r4, lr}
    efe6:	2801      	cmp	r0, #1
    efe8:	d006      	beq.n	eff8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    efea:	2802      	cmp	r0, #2
    efec:	d004      	beq.n	eff8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    efee:	f240 21d7 	movw	r1, #727	; 0x2d7
    eff2:	2006      	movs	r0, #6
    eff4:	f7f1 fcdc 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eff8:	bd10      	pop	{r4, pc}
    effa:	2801      	cmp	r0, #1
    effc:	d002      	beq.n	f004 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    effe:	2802      	cmp	r0, #2
    f000:	d105      	bne.n	f00e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f002:	e002      	b.n	f00a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f004:	2901      	cmp	r1, #1
    f006:	d004      	beq.n	f012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f008:	e001      	b.n	f00e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f00a:	2902      	cmp	r1, #2
    f00c:	d001      	beq.n	f012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f00e:	2000      	movs	r0, #0
    f010:	4770      	bx	lr
    f012:	2001      	movs	r0, #1
    f014:	4770      	bx	lr
    f016:	1a40      	subs	r0, r0, r1
    f018:	b200      	sxth	r0, r0
    f01a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f01e:	4288      	cmp	r0, r1
    f020:	dc01      	bgt.n	f026 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f022:	2800      	cmp	r0, #0
    f024:	dc01      	bgt.n	f02a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f026:	2001      	movs	r0, #1
    f028:	4770      	bx	lr
    f02a:	2000      	movs	r0, #0
    f02c:	4770      	bx	lr
    f02e:	6840      	ldr	r0, [r0, #4]
    f030:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f034:	2912      	cmp	r1, #18
    f036:	d001      	beq.n	f03c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f038:	2002      	movs	r0, #2
    f03a:	4770      	bx	lr
    f03c:	2113      	movs	r1, #19
    f03e:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f042:	2000      	movs	r0, #0
    f044:	4770      	bx	lr
    f046:	b510      	push	{r4, lr}
    f048:	6843      	ldr	r3, [r0, #4]
    f04a:	4604      	mov	r4, r0
    f04c:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f050:	2808      	cmp	r0, #8
    f052:	d20d      	bcs.n	f070 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f054:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f058:	f1c0 0008 	rsb	r0, r0, #8
    f05c:	b2c1      	uxtb	r1, r0
    f05e:	1898      	adds	r0, r3, r2
    f060:	f7f1 fd48 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f064:	6861      	ldr	r1, [r4, #4]
    f066:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f06a:	4410      	add	r0, r2
    f06c:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f070:	6862      	ldr	r2, [r4, #4]
    f072:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f076:	3908      	subs	r1, #8
    f078:	2904      	cmp	r1, #4
    f07a:	d20d      	bcs.n	f098 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f07c:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f080:	f1c1 0104 	rsb	r1, r1, #4
    f084:	b2c9      	uxtb	r1, r1
    f086:	4410      	add	r0, r2
    f088:	f7f1 fd34 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f08c:	6861      	ldr	r1, [r4, #4]
    f08e:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f092:	4410      	add	r0, r2
    f094:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f098:	6860      	ldr	r0, [r4, #4]
    f09a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f09e:	290c      	cmp	r1, #12
    f0a0:	d30f      	bcc.n	f0c2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f0a2:	d005      	beq.n	f0b0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f0a4:	f640 01c2 	movw	r1, #2242	; 0x8c2
    f0a8:	f04f 0031 	mov.w	r0, #49	; 0x31
    f0ac:	f7f1 fc80 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0b0:	2100      	movs	r1, #0
    f0b2:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f0b6:	2101      	movs	r1, #1
    f0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0bc:	2004      	movs	r0, #4
    f0be:	f7f6 bd43 	b.w	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f0c2:	bd10      	pop	{r4, pc}
    f0c4:	6842      	ldr	r2, [r0, #4]
    f0c6:	2131      	movs	r1, #49	; 0x31
    f0c8:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f0cc:	6840      	ldr	r0, [r0, #4]
    f0ce:	2100      	movs	r1, #0
    f0d0:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f0d4:	4770      	bx	lr
    f0d6:	b510      	push	{r4, lr}
    f0d8:	6841      	ldr	r1, [r0, #4]
    f0da:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f0de:	2a15      	cmp	r2, #21
    f0e0:	d004      	beq.n	f0ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f0e2:	f240 7183 	movw	r1, #1923	; 0x783
    f0e6:	2031      	movs	r0, #49	; 0x31
    f0e8:	f7f1 fc62 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0ec:	2201      	movs	r2, #1
    f0ee:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f0f2:	6840      	ldr	r0, [r0, #4]
    f0f4:	2116      	movs	r1, #22
    f0f6:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f0fa:	bd10      	pop	{r4, pc}
    f0fc:	f7ff b8e1 	b.w	e2c2 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f100:	b510      	push	{r4, lr}
    f102:	6841      	ldr	r1, [r0, #4]
    f104:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f108:	2a11      	cmp	r2, #17
    f10a:	d004      	beq.n	f116 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f10c:	f240 717b 	movw	r1, #1915	; 0x77b
    f110:	2031      	movs	r0, #49	; 0x31
    f112:	f7f1 fc4d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f116:	2201      	movs	r2, #1
    f118:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f11c:	6840      	ldr	r0, [r0, #4]
    f11e:	2112      	movs	r1, #18
    f120:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f124:	bd10      	pop	{r4, pc}
    f126:	b510      	push	{r4, lr}
    f128:	6841      	ldr	r1, [r0, #4]
    f12a:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f12e:	2822      	cmp	r0, #34	; 0x22
    f130:	d005      	beq.n	f13e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f132:	b120      	cbz	r0, f13e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f134:	f240 71e7 	movw	r1, #2023	; 0x7e7
    f138:	2031      	movs	r0, #49	; 0x31
    f13a:	f7f1 fc39 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f13e:	2023      	movs	r0, #35	; 0x23
    f140:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f144:	bd10      	pop	{r4, pc}
    f146:	b510      	push	{r4, lr}
    f148:	6840      	ldr	r0, [r0, #4]
    f14a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f14e:	2916      	cmp	r1, #22
    f150:	d004      	beq.n	f15c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f152:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    f156:	2031      	movs	r0, #49	; 0x31
    f158:	f7f1 fc2a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f15c:	211a      	movs	r1, #26
    f15e:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f162:	bd10      	pop	{r4, pc}
    f164:	f7ff b89b 	b.w	e29e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f168:	b510      	push	{r4, lr}
    f16a:	6840      	ldr	r0, [r0, #4]
    f16c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f170:	2916      	cmp	r1, #22
    f172:	d004      	beq.n	f17e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f174:	f240 718a 	movw	r1, #1930	; 0x78a
    f178:	2031      	movs	r0, #49	; 0x31
    f17a:	f7f1 fc19 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f17e:	2118      	movs	r1, #24
    f180:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f184:	bd10      	pop	{r4, pc}
    f186:	f7ff b921 	b.w	e3cc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f18a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f18e:	f001 0107 	and.w	r1, r1, #7
    f192:	7800      	ldrb	r0, [r0, #0]
    f194:	40c8      	lsrs	r0, r1
    f196:	f000 0001 	and.w	r0, r0, #1
    f19a:	4770      	bx	lr

0000f19c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f19c:	b510      	push	{r4, lr}
    f19e:	2801      	cmp	r0, #1
    f1a0:	d006      	beq.n	f1b0 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f1a2:	2802      	cmp	r0, #2
    f1a4:	d006      	beq.n	f1b4 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f1a6:	f240 2175 	movw	r1, #629	; 0x275
    f1aa:	2078      	movs	r0, #120	; 0x78
    f1ac:	f7f1 fc00 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1b0:	2000      	movs	r0, #0
    f1b2:	bd10      	pop	{r4, pc}
    f1b4:	2001      	movs	r0, #1
    f1b6:	bd10      	pop	{r4, pc}

0000f1b8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f1b8:	207f      	movs	r0, #127	; 0x7f
    f1ba:	f000 b88c 	b.w	f2d6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f1be <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f1be:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f1c2:	f000 b888 	b.w	f2d6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f1c6 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f1c6:	b510      	push	{r4, lr}
    f1c8:	4604      	mov	r4, r0
    f1ca:	f7f8 f83b 	bl	7244 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f1ce:	1e64      	subs	r4, r4, #1
    f1d0:	b2e2      	uxtb	r2, r4
    f1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1d6:	f000 b85b 	b.w	f290 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f1da <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f1da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f1de:	4607      	mov	r7, r0
    f1e0:	461e      	mov	r6, r3
    f1e2:	4690      	mov	r8, r2
    f1e4:	460c      	mov	r4, r1
    f1e6:	4608      	mov	r0, r1
    f1e8:	f7ff ffed 	bl	f1c6 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f1ec:	b1e8      	cbz	r0, f22a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f1ee:	687d      	ldr	r5, [r7, #4]
    f1f0:	2121      	movs	r1, #33	; 0x21
    f1f2:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f1f6:	3580      	adds	r5, #128	; 0x80
    f1f8:	f7ff ffc7 	bl	f18a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f1fc:	b1b8      	cbz	r0, f22e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f1fe:	1e64      	subs	r4, r4, #1
    f200:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f202:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f204:	b2e2      	uxtb	r2, r4
    f206:	f000 f843 	bl	f290 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f20a:	b180      	cbz	r0, f22e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f20c:	6878      	ldr	r0, [r7, #4]
    f20e:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f212:	f88d 1000 	strb.w	r1, [sp]
    f216:	9900      	ldr	r1, [sp, #0]
    f218:	9100      	str	r1, [sp, #0]
    f21a:	f89d 1000 	ldrb.w	r1, [sp]
    f21e:	f200 1047 	addw	r0, r0, #327	; 0x147
    f222:	b131      	cbz	r1, f232 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f224:	203a      	movs	r0, #58	; 0x3a
    f226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f22a:	2011      	movs	r0, #17
    f22c:	e7fb      	b.n	f226 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f22e:	201a      	movs	r0, #26
    f230:	e7f9      	b.n	f226 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f232:	1c81      	adds	r1, r0, #2
    f234:	700e      	strb	r6, [r1, #0]
    f236:	2101      	movs	r1, #1
    f238:	40a1      	lsls	r1, r4
    f23a:	7001      	strb	r1, [r0, #0]
    f23c:	f880 8001 	strb.w	r8, [r0, #1]
    f240:	2000      	movs	r0, #0
    f242:	e7f0      	b.n	f226 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f244 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f248:	460d      	mov	r5, r1
    f24a:	4606      	mov	r6, r0
    f24c:	f7ff ffb4 	bl	f1b8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f250:	4607      	mov	r7, r0
    f252:	f7ff ffb4 	bl	f1be <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f256:	2400      	movs	r4, #0
    f258:	4285      	cmp	r5, r0
    f25a:	d100      	bne.n	f25e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f25c:	2401      	movs	r4, #1
    f25e:	42bd      	cmp	r5, r7
    f260:	d101      	bne.n	f266 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f262:	f044 0402 	orr.w	r4, r4, #2
    f266:	f000 f826 	bl	f2b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f26a:	2200      	movs	r2, #0
    f26c:	4601      	mov	r1, r0
    f26e:	2301      	movs	r3, #1
    f270:	fa03 f002 	lsl.w	r0, r3, r2
    f274:	4208      	tst	r0, r1
    f276:	d005      	beq.n	f284 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f278:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f27c:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f280:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f284:	1c52      	adds	r2, r2, #1
    f286:	b2d2      	uxtb	r2, r2
    f288:	2a02      	cmp	r2, #2
    f28a:	d3f1      	bcc.n	f270 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f290:	b510      	push	{r4, lr}
    f292:	4614      	mov	r4, r2
    f294:	4602      	mov	r2, r0
    f296:	2000      	movs	r0, #0
    f298:	4603      	mov	r3, r0
    f29a:	2c02      	cmp	r4, #2
    f29c:	d205      	bcs.n	f2aa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    f29e:	4610      	mov	r0, r2
    f2a0:	f000 f810 	bl	f2c4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f2a4:	2101      	movs	r1, #1
    f2a6:	40a1      	lsls	r1, r4
    f2a8:	b2cb      	uxtb	r3, r1
    f2aa:	4203      	tst	r3, r0
    f2ac:	d001      	beq.n	f2b2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    f2ae:	2001      	movs	r0, #1
    f2b0:	bd10      	pop	{r4, pc}
    f2b2:	2000      	movs	r0, #0
    f2b4:	bd10      	pop	{r4, pc}
    f2b6:	b510      	push	{r4, lr}
    f2b8:	f7f7 ffc4 	bl	7244 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2c0:	f000 b800 	b.w	f2c4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f2c4:	0a00      	lsrs	r0, r0, #8
    f2c6:	2201      	movs	r2, #1
    f2c8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f2cc:	07c0      	lsls	r0, r0, #31
    f2ce:	d000      	beq.n	f2d2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    f2d0:	2203      	movs	r2, #3
    f2d2:	4610      	mov	r0, r2
    f2d4:	4770      	bx	lr
    f2d6:	b508      	push	{r3, lr}
    f2d8:	2301      	movs	r3, #1
    f2da:	f640 1288 	movw	r2, #2440	; 0x988
    f2de:	4669      	mov	r1, sp
    f2e0:	f7fc ffc8 	bl	c274 <mpsl_fem_tx_power_split>
    f2e4:	bd08      	pop	{r3, pc}
    f2e6:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f2ea:	f001 0107 	and.w	r1, r1, #7
    f2ee:	7800      	ldrb	r0, [r0, #0]
    f2f0:	40c8      	lsrs	r0, r1
    f2f2:	f000 0001 	and.w	r0, r0, #1
    f2f6:	4770      	bx	lr
    f2f8:	b118      	cbz	r0, f302 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f2fa:	2802      	cmp	r0, #2
    f2fc:	d001      	beq.n	f302 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f2fe:	2001      	movs	r0, #1
    f300:	4770      	bx	lr
    f302:	2000      	movs	r0, #0
    f304:	4770      	bx	lr

0000f306 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f306:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f308:	7881      	ldrb	r1, [r0, #2]
    f30a:	2500      	movs	r5, #0
    f30c:	4604      	mov	r4, r0
    f30e:	291a      	cmp	r1, #26
    f310:	d024      	beq.n	f35c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f312:	dc0e      	bgt.n	f332 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f314:	2916      	cmp	r1, #22
    f316:	d22b      	bcs.n	f370 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f318:	e8df f001 	tbb	[pc, r1]
    f31c:	2a2a2a2a 	.word	0x2a2a2a2a
    f320:	2a2a202a 	.word	0x2a2a202a
    f324:	2a2a2a2a 	.word	0x2a2a2a2a
    f328:	2a2a2a2a 	.word	0x2a2a2a2a
    f32c:	202a2a2a 	.word	0x202a2a2a
    f330:	2020      	.short	0x2020
    f332:	292a      	cmp	r1, #42	; 0x2a
    f334:	d01c      	beq.n	f370 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f336:	dc0b      	bgt.n	f350 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f338:	f1a1 011e 	sub.w	r1, r1, #30
    f33c:	290c      	cmp	r1, #12
    f33e:	d217      	bcs.n	f370 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f340:	e8df f001 	tbb	[pc, r1]
    f344:	16161616 	.word	0x16161616
    f348:	16161616 	.word	0x16161616
    f34c:	0c161616 	.word	0x0c161616
    f350:	393a      	subs	r1, #58	; 0x3a
    f352:	2902      	cmp	r1, #2
    f354:	d20c      	bcs.n	f370 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f356:	e8df f001 	tbb	[pc, r1]
    f35a:	010b      	.short	0x010b
    f35c:	8820      	ldrh	r0, [r4, #0]
    f35e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f362:	d205      	bcs.n	f370 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f364:	4669      	mov	r1, sp
    f366:	f7fe f990 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f36a:	b118      	cbz	r0, f374 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f36c:	2002      	movs	r0, #2
    f36e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f370:	2012      	movs	r0, #18
    f372:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f374:	9901      	ldr	r1, [sp, #4]
    f376:	4668      	mov	r0, sp
    f378:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    f37c:	f88d 2008 	strb.w	r2, [sp, #8]
    f380:	9a02      	ldr	r2, [sp, #8]
    f382:	9202      	str	r2, [sp, #8]
    f384:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f388:	f501 7198 	add.w	r1, r1, #304	; 0x130
    f38c:	b10a      	cbz	r2, f392 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f38e:	200c      	movs	r0, #12
    f390:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f392:	78a2      	ldrb	r2, [r4, #2]
    f394:	704a      	strb	r2, [r1, #1]
    f396:	22ff      	movs	r2, #255	; 0xff
    f398:	700a      	strb	r2, [r1, #0]
    f39a:	f7fe fd09 	bl	ddb0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f39e:	4628      	mov	r0, r5
    f3a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f3a2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f3a2:	b510      	push	{r4, lr}
    f3a4:	4604      	mov	r4, r0
    f3a6:	f7f7 fe77 	bl	7098 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f3aa:	b108      	cbz	r0, f3b0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f3ac:	200c      	movs	r0, #12
    f3ae:	bd10      	pop	{r4, pc}
    f3b0:	7820      	ldrb	r0, [r4, #0]
    f3b2:	b118      	cbz	r0, f3bc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f3b4:	2801      	cmp	r0, #1
    f3b6:	d001      	beq.n	f3bc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f3b8:	2012      	movs	r0, #18
    f3ba:	bd10      	pop	{r4, pc}
    f3bc:	f7ff ff9c 	bl	f2f8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f3c0:	1c61      	adds	r1, r4, #1
    f3c2:	f7f3 fef3 	bl	31ac <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    f3c6:	b108      	cbz	r0, f3cc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f3c8:	2000      	movs	r0, #0
    f3ca:	bd10      	pop	{r4, pc}
    f3cc:	2007      	movs	r0, #7
    f3ce:	bd10      	pop	{r4, pc}

0000f3d0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f3d0:	b510      	push	{r4, lr}
    f3d2:	f7f7 fe61 	bl	7098 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f3d6:	b108      	cbz	r0, f3dc <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f3d8:	200c      	movs	r0, #12
    f3da:	bd10      	pop	{r4, pc}
    f3dc:	f7f3 ff44 	bl	3268 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    f3e0:	2000      	movs	r0, #0
    f3e2:	f7f3 f819 	bl	2418 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    f3e6:	2000      	movs	r0, #0
    f3e8:	bd10      	pop	{r4, pc}

0000f3ea <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f3ea:	b510      	push	{r4, lr}
    f3ec:	460b      	mov	r3, r1
    f3ee:	2201      	movs	r2, #1
    f3f0:	f100 0110 	add.w	r1, r0, #16
    f3f4:	f7fe f92b 	bl	d64e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f3f8:	2000      	movs	r0, #0
    f3fa:	bd10      	pop	{r4, pc}

0000f3fc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f3fc:	b510      	push	{r4, lr}
    f3fe:	8800      	ldrh	r0, [r0, #0]
    f400:	2100      	movs	r1, #0
    f402:	f7f1 fe03 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f406:	b118      	cbz	r0, f410 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f408:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    f40c:	b111      	cbz	r1, f414 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f40e:	e007      	b.n	f420 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f410:	2002      	movs	r0, #2
    f412:	bd10      	pop	{r4, pc}
    f414:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f418:	2915      	cmp	r1, #21
    f41a:	d003      	beq.n	f424 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f41c:	2916      	cmp	r1, #22
    f41e:	d001      	beq.n	f424 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f420:	200c      	movs	r0, #12
    f422:	bd10      	pop	{r4, pc}
    f424:	2102      	movs	r1, #2
    f426:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    f42a:	2000      	movs	r0, #0
    f42c:	bd10      	pop	{r4, pc}

0000f42e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f430:	4605      	mov	r5, r0
    f432:	8800      	ldrh	r0, [r0, #0]
    f434:	2100      	movs	r1, #0
    f436:	f7f1 fde9 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f43a:	0004      	movs	r4, r0
    f43c:	d003      	beq.n	f446 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f43e:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    f442:	b110      	cbz	r0, f44a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f444:	e011      	b.n	f46a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f446:	2002      	movs	r0, #2
    f448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f44a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    f44e:	2815      	cmp	r0, #21
    f450:	d001      	beq.n	f456 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f452:	2816      	cmp	r0, #22
    f454:	d109      	bne.n	f46a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f456:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    f45a:	f88d 0000 	strb.w	r0, [sp]
    f45e:	9800      	ldr	r0, [sp, #0]
    f460:	9000      	str	r0, [sp, #0]
    f462:	f89d 0000 	ldrb.w	r0, [sp]
    f466:	2601      	movs	r6, #1
    f468:	b108      	cbz	r0, f46e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    f46a:	200c      	movs	r0, #12
    f46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f46e:	2210      	movs	r2, #16
    f470:	1ca9      	adds	r1, r5, #2
    f472:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    f476:	f001 f852 	bl	1051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f47a:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    f47e:	2000      	movs	r0, #0
    f480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f482 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f482:	b510      	push	{r4, lr}
    f484:	2108      	movs	r1, #8
    f486:	f7f1 fb43 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f48a:	2000      	movs	r0, #0
    f48c:	bd10      	pop	{r4, pc}

0000f48e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f48e:	b510      	push	{r4, lr}
    f490:	4604      	mov	r4, r0
    f492:	f7f7 fcdf 	bl	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f496:	f7ff f8cf 	bl	e638 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f49a:	f7f3 f8bf 	bl	261c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f49e:	7020      	strb	r0, [r4, #0]
    f4a0:	2000      	movs	r0, #0
    f4a2:	bd10      	pop	{r4, pc}

0000f4a4 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f4a4:	21fb      	movs	r1, #251	; 0xfb
    f4a6:	8001      	strh	r1, [r0, #0]
    f4a8:	f640 0248 	movw	r2, #2120	; 0x848
    f4ac:	8042      	strh	r2, [r0, #2]
    f4ae:	8081      	strh	r1, [r0, #4]
    f4b0:	80c2      	strh	r2, [r0, #6]
    f4b2:	2000      	movs	r0, #0
    f4b4:	4770      	bx	lr

0000f4b6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f4b6:	b51c      	push	{r2, r3, r4, lr}
    f4b8:	8800      	ldrh	r0, [r0, #0]
    f4ba:	4669      	mov	r1, sp
    f4bc:	f7fe f8e5 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4c0:	2800      	cmp	r0, #0
    f4c2:	d10d      	bne.n	f4e0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f4c4:	f89d 0000 	ldrb.w	r0, [sp]
    f4c8:	9c01      	ldr	r4, [sp, #4]
    f4ca:	2801      	cmp	r0, #1
    f4cc:	f504 7498 	add.w	r4, r4, #304	; 0x130
    f4d0:	d103      	bne.n	f4da <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    f4d2:	9801      	ldr	r0, [sp, #4]
    f4d4:	f000 fce2 	bl	fe9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    f4d8:	b118      	cbz	r0, f4e2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    f4da:	7ce0      	ldrb	r0, [r4, #19]
    f4dc:	b118      	cbz	r0, f4e6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    f4de:	203a      	movs	r0, #58	; 0x3a
    f4e0:	bd1c      	pop	{r2, r3, r4, pc}
    f4e2:	2002      	movs	r0, #2
    f4e4:	bd1c      	pop	{r2, r3, r4, pc}
    f4e6:	2001      	movs	r0, #1
    f4e8:	74e0      	strb	r0, [r4, #19]
    f4ea:	2000      	movs	r0, #0
    f4ec:	bd1c      	pop	{r2, r3, r4, pc}

0000f4ee <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f4ee:	b510      	push	{r4, lr}
    f4f0:	4604      	mov	r4, r0
    f4f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f4f6:	f000 fd0d 	bl	ff14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    f4fa:	f7f3 f88f 	bl	261c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f4fe:	7020      	strb	r0, [r4, #0]
    f500:	f000 fcc9 	bl	fe96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f504:	f7f3 f88a 	bl	261c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f508:	7060      	strb	r0, [r4, #1]
    f50a:	2000      	movs	r0, #0
    f50c:	bd10      	pop	{r4, pc}

0000f50e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f50e:	b510      	push	{r4, lr}
    f510:	4604      	mov	r4, r0
    f512:	f7f3 feaf 	bl	3274 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    f516:	7020      	strb	r0, [r4, #0]
    f518:	2000      	movs	r0, #0
    f51a:	bd10      	pop	{r4, pc}

0000f51c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f51c:	b510      	push	{r4, lr}
    f51e:	4604      	mov	r4, r0
    f520:	f7f7 fdba 	bl	7098 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f524:	b108      	cbz	r0, f52a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f526:	200c      	movs	r0, #12
    f528:	bd10      	pop	{r4, pc}
    f52a:	7820      	ldrb	r0, [r4, #0]
    f52c:	b108      	cbz	r0, f532 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f52e:	2801      	cmp	r0, #1
    f530:	d107      	bne.n	f542 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f532:	f7ff fee1 	bl	f2f8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f536:	1c61      	adds	r1, r4, #1
    f538:	f7f3 fe76 	bl	3228 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    f53c:	b108      	cbz	r0, f542 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f53e:	2000      	movs	r0, #0
    f540:	bd10      	pop	{r4, pc}
    f542:	2012      	movs	r0, #18
    f544:	bd10      	pop	{r4, pc}

0000f546 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f546:	b51c      	push	{r2, r3, r4, lr}
    f548:	4604      	mov	r4, r0
    f54a:	f7f7 fc83 	bl	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f54e:	2000      	movs	r0, #0
    f550:	f88d 0002 	strb.w	r0, [sp, #2]
    f554:	2103      	movs	r1, #3
    f556:	f88d 1001 	strb.w	r1, [sp, #1]
    f55a:	f814 1b01 	ldrb.w	r1, [r4], #1
    f55e:	f88d 1003 	strb.w	r1, [sp, #3]
    f562:	f88d 0000 	strb.w	r0, [sp]
    f566:	4668      	mov	r0, sp
    f568:	9401      	str	r4, [sp, #4]
    f56a:	f000 f9a2 	bl	f8b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f56e:	bd1c      	pop	{r2, r3, r4, pc}

0000f570 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f570:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f572:	4605      	mov	r5, r0
    f574:	f7f7 fc6e 	bl	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f578:	4606      	mov	r6, r0
    f57a:	7828      	ldrb	r0, [r5, #0]
    f57c:	2400      	movs	r4, #0
    f57e:	b160      	cbz	r0, f59a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f580:	f88d 4000 	strb.w	r4, [sp]
    f584:	2001      	movs	r0, #1
    f586:	f10d 0101 	add.w	r1, sp, #1
    f58a:	f7f2 f975 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f58e:	b120      	cbz	r0, f59a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f590:	4668      	mov	r0, sp
    f592:	f000 f897 	bl	f6c4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f596:	2800      	cmp	r0, #0
    f598:	d112      	bne.n	f5c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f59a:	f88d 400c 	strb.w	r4, [sp, #12]
    f59e:	4630      	mov	r0, r6
    f5a0:	f7ff f840 	bl	e624 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f5a4:	b118      	cbz	r0, f5ae <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f5a6:	2080      	movs	r0, #128	; 0x80
    f5a8:	f8ad 000d 	strh.w	r0, [sp, #13]
    f5ac:	e001      	b.n	f5b2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f5ae:	f8ad 400d 	strh.w	r4, [sp, #13]
    f5b2:	f88d 400f 	strb.w	r4, [sp, #15]
    f5b6:	7828      	ldrb	r0, [r5, #0]
    f5b8:	2801      	cmp	r0, #1
    f5ba:	d003      	beq.n	f5c4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f5bc:	b138      	cbz	r0, f5ce <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f5be:	2012      	movs	r0, #18
    f5c0:	b004      	add	sp, #16
    f5c2:	bd70      	pop	{r4, r5, r6, pc}
    f5c4:	a903      	add	r1, sp, #12
    f5c6:	4630      	mov	r0, r6
    f5c8:	f7f7 fc60 	bl	6e8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f5cc:	e7f8      	b.n	f5c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f5ce:	4630      	mov	r0, r6
    f5d0:	f000 fc7a 	bl	fec8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f5d4:	e7f4      	b.n	f5c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f5d6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f5d6:	b530      	push	{r4, r5, lr}
    f5d8:	b08b      	sub	sp, #44	; 0x2c
    f5da:	4604      	mov	r4, r0
    f5dc:	f7f7 fc3a 	bl	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f5e0:	4602      	mov	r2, r0
    f5e2:	7920      	ldrb	r0, [r4, #4]
    f5e4:	2804      	cmp	r0, #4
    f5e6:	d803      	bhi.n	f5f0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f5e8:	8860      	ldrh	r0, [r4, #2]
    f5ea:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f5ee:	d902      	bls.n	f5f6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f5f0:	2012      	movs	r0, #18
    f5f2:	b00b      	add	sp, #44	; 0x2c
    f5f4:	bd30      	pop	{r4, r5, pc}
    f5f6:	2500      	movs	r5, #0
    f5f8:	f88d 5004 	strb.w	r5, [sp, #4]
    f5fc:	7921      	ldrb	r1, [r4, #4]
    f5fe:	9500      	str	r5, [sp, #0]
    f600:	f89d 0000 	ldrb.w	r0, [sp]
    f604:	2905      	cmp	r1, #5
    f606:	f040 0010 	orr.w	r0, r0, #16
    f60a:	f88d 0000 	strb.w	r0, [sp]
    f60e:	d254      	bcs.n	f6ba <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f610:	e8df f001 	tbb	[pc, r1]
    f614:	11050803 	.word	0x11050803
    f618:	000b      	.short	0x000b
    f61a:	f040 0001 	orr.w	r0, r0, #1
    f61e:	f040 0002 	orr.w	r0, r0, #2
    f622:	e006      	b.n	f632 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f624:	f040 0009 	orr.w	r0, r0, #9
    f628:	e001      	b.n	f62e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f62a:	f040 0001 	orr.w	r0, r0, #1
    f62e:	f040 0004 	orr.w	r0, r0, #4
    f632:	f88d 0000 	strb.w	r0, [sp]
    f636:	f8bd 0000 	ldrh.w	r0, [sp]
    f63a:	9000      	str	r0, [sp, #0]
    f63c:	f8bd 0000 	ldrh.w	r0, [sp]
    f640:	f8ad 0005 	strh.w	r0, [sp, #5]
    f644:	8821      	ldrh	r1, [r4, #0]
    f646:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f64a:	f361 201f 	bfi	r0, r1, #8, #24
    f64e:	f8cd 0006 	str.w	r0, [sp, #6]
    f652:	8861      	ldrh	r1, [r4, #2]
    f654:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f658:	f361 201f 	bfi	r0, r1, #8, #24
    f65c:	f8cd 0009 	str.w	r0, [sp, #9]
    f660:	7b60      	ldrb	r0, [r4, #13]
    f662:	f88d 000d 	strb.w	r0, [sp, #13]
    f666:	7960      	ldrb	r0, [r4, #5]
    f668:	f88d 000e 	strb.w	r0, [sp, #14]
    f66c:	79a0      	ldrb	r0, [r4, #6]
    f66e:	f88d 000f 	strb.w	r0, [sp, #15]
    f672:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f676:	9004      	str	r0, [sp, #16]
    f678:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f67c:	f8ad 0014 	strh.w	r0, [sp, #20]
    f680:	7ba0      	ldrb	r0, [r4, #14]
    f682:	f88d 0016 	strb.w	r0, [sp, #22]
    f686:	207f      	movs	r0, #127	; 0x7f
    f688:	f88d 0017 	strb.w	r0, [sp, #23]
    f68c:	2001      	movs	r0, #1
    f68e:	f88d 0018 	strb.w	r0, [sp, #24]
    f692:	f88d 5019 	strb.w	r5, [sp, #25]
    f696:	f88d 001a 	strb.w	r0, [sp, #26]
    f69a:	f88d 501b 	strb.w	r5, [sp, #27]
    f69e:	4610      	mov	r0, r2
    f6a0:	f7fe ffe0 	bl	e664 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f6a4:	f88d 001c 	strb.w	r0, [sp, #28]
    f6a8:	f88d 501d 	strb.w	r5, [sp, #29]
    f6ac:	f88d 501e 	strb.w	r5, [sp, #30]
    f6b0:	a909      	add	r1, sp, #36	; 0x24
    f6b2:	a801      	add	r0, sp, #4
    f6b4:	f7f7 fa04 	bl	6ac0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f6b8:	e79b      	b.n	f5f2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f6ba:	f241 31a9 	movw	r1, #5033	; 0x13a9
    f6be:	2039      	movs	r0, #57	; 0x39
    f6c0:	f7f1 f976 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f6c4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f6c4:	b570      	push	{r4, r5, r6, lr}
    f6c6:	4604      	mov	r4, r0
    f6c8:	7800      	ldrb	r0, [r0, #0]
    f6ca:	2101      	movs	r1, #1
    f6cc:	f7f1 fc9e 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f6d0:	0005      	movs	r5, r0
    f6d2:	d007      	beq.n	f6e4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f6d4:	f7ff f970 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f6d8:	b160      	cbz	r0, f6f4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f6da:	4628      	mov	r0, r5
    f6dc:	f7fe ffa8 	bl	e630 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f6e0:	b110      	cbz	r0, f6e8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f6e2:	e005      	b.n	f6f0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f6e4:	2042      	movs	r0, #66	; 0x42
    f6e6:	bd70      	pop	{r4, r5, r6, pc}
    f6e8:	4628      	mov	r0, r5
    f6ea:	f7fe ff97 	bl	e61c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f6ee:	b108      	cbz	r0, f6f4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f6f0:	200c      	movs	r0, #12
    f6f2:	bd70      	pop	{r4, r5, r6, pc}
    f6f4:	1c61      	adds	r1, r4, #1
    f6f6:	4628      	mov	r0, r5
    f6f8:	f7fe ffac 	bl	e654 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f6fc:	2000      	movs	r0, #0
    f6fe:	bd70      	pop	{r4, r5, r6, pc}

0000f700 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f700:	b50e      	push	{r1, r2, r3, lr}
    f702:	8882      	ldrh	r2, [r0, #4]
    f704:	f244 2390 	movw	r3, #17040	; 0x4290
    f708:	429a      	cmp	r2, r3
    f70a:	d901      	bls.n	f710 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f70c:	2012      	movs	r0, #18
    f70e:	bd0e      	pop	{r1, r2, r3, pc}
    f710:	f640 0348 	movw	r3, #2120	; 0x848
    f714:	429a      	cmp	r2, r3
    f716:	d300      	bcc.n	f71a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f718:	461a      	mov	r2, r3
    f71a:	8803      	ldrh	r3, [r0, #0]
    f71c:	f8ad 3000 	strh.w	r3, [sp]
    f720:	8843      	ldrh	r3, [r0, #2]
    f722:	f8ad 3002 	strh.w	r3, [sp, #2]
    f726:	f8ad 2004 	strh.w	r2, [sp, #4]
    f72a:	8843      	ldrh	r3, [r0, #2]
    f72c:	f8ad 3006 	strh.w	r3, [sp, #6]
    f730:	f8ad 2008 	strh.w	r2, [sp, #8]
    f734:	8800      	ldrh	r0, [r0, #0]
    f736:	8008      	strh	r0, [r1, #0]
    f738:	4668      	mov	r0, sp
    f73a:	f7f7 fc29 	bl	6f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    f73e:	bd0e      	pop	{r1, r2, r3, pc}

0000f740 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    f740:	b510      	push	{r4, lr}
    f742:	4604      	mov	r4, r0
    f744:	f7f7 fb86 	bl	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f748:	7861      	ldrb	r1, [r4, #1]
    f74a:	f3c1 0240 	ubfx	r2, r1, #1, #1
    f74e:	f001 0101 	and.w	r1, r1, #1
    f752:	f7fe ff7b 	bl	e64c <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    f756:	2000      	movs	r0, #0
    f758:	bd10      	pop	{r4, pc}

0000f75a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f75a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f75c:	4604      	mov	r4, r0
    f75e:	f10d 0007 	add.w	r0, sp, #7
    f762:	9000      	str	r0, [sp, #0]
    f764:	7922      	ldrb	r2, [r4, #4]
    f766:	78e1      	ldrb	r1, [r4, #3]
    f768:	78a0      	ldrb	r0, [r4, #2]
    f76a:	f10d 0306 	add.w	r3, sp, #6
    f76e:	f000 fbd9 	bl	ff24 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    f772:	2800      	cmp	r0, #0
    f774:	d109      	bne.n	f78a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f776:	8820      	ldrh	r0, [r4, #0]
    f778:	f8ad 0004 	strh.w	r0, [sp, #4]
    f77c:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f780:	f8ad 0008 	strh.w	r0, [sp, #8]
    f784:	a801      	add	r0, sp, #4
    f786:	f000 f94f 	bl	fa28 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f78a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f78c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f78c:	b510      	push	{r4, lr}
    f78e:	4604      	mov	r4, r0
    f790:	2001      	movs	r0, #1
    f792:	f000 fa5e 	bl	fc52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f796:	b128      	cbz	r0, f7a4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f798:	4621      	mov	r1, r4
    f79a:	2001      	movs	r0, #1
    f79c:	f7f2 f884 	bl	18a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f7a0:	2000      	movs	r0, #0
    f7a2:	bd10      	pop	{r4, pc}
    f7a4:	200c      	movs	r0, #12
    f7a6:	bd10      	pop	{r4, pc}

0000f7a8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f7a8:	b51c      	push	{r2, r3, r4, lr}
    f7aa:	4604      	mov	r4, r0
    f7ac:	f7f7 fb52 	bl	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f7b0:	2000      	movs	r0, #0
    f7b2:	f88d 0000 	strb.w	r0, [sp]
    f7b6:	f88d 0002 	strb.w	r0, [sp, #2]
    f7ba:	2003      	movs	r0, #3
    f7bc:	f88d 0001 	strb.w	r0, [sp, #1]
    f7c0:	f814 0b01 	ldrb.w	r0, [r4], #1
    f7c4:	f88d 0003 	strb.w	r0, [sp, #3]
    f7c8:	4668      	mov	r0, sp
    f7ca:	9401      	str	r4, [sp, #4]
    f7cc:	f000 f8da 	bl	f984 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f7d0:	bd1c      	pop	{r2, r3, r4, pc}

0000f7d2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f7d2:	b51c      	push	{r2, r3, r4, lr}
    f7d4:	8801      	ldrh	r1, [r0, #0]
    f7d6:	f8ad 1000 	strh.w	r1, [sp]
    f7da:	8841      	ldrh	r1, [r0, #2]
    f7dc:	f8ad 1002 	strh.w	r1, [sp, #2]
    f7e0:	8801      	ldrh	r1, [r0, #0]
    f7e2:	f8ad 1004 	strh.w	r1, [sp, #4]
    f7e6:	8840      	ldrh	r0, [r0, #2]
    f7e8:	f8ad 0006 	strh.w	r0, [sp, #6]
    f7ec:	4668      	mov	r0, sp
    f7ee:	f7f7 fc6f 	bl	70d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
    f7f2:	bd1c      	pop	{r2, r3, r4, pc}

0000f7f4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f7f4:	b510      	push	{r4, lr}
    f7f6:	f7f2 f87b 	bl	18f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    f7fa:	2000      	movs	r0, #0
    f7fc:	bd10      	pop	{r4, pc}

0000f7fe <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    f7fe:	b510      	push	{r4, lr}
    f800:	460c      	mov	r4, r1
    f802:	2100      	movs	r1, #0
    f804:	f7f1 fc02 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f808:	b118      	cbz	r0, f812 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    f80a:	2c02      	cmp	r4, #2
    f80c:	d903      	bls.n	f816 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    f80e:	2012      	movs	r0, #18
    f810:	bd10      	pop	{r4, pc}
    f812:	2002      	movs	r0, #2
    f814:	bd10      	pop	{r4, pc}
    f816:	f014 0101 	ands.w	r1, r4, #1
    f81a:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    f81e:	f3c4 0240 	ubfx	r2, r4, #1, #1
    f822:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    f826:	d004      	beq.n	f832 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f828:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    f82c:	b109      	cbz	r1, f832 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f82e:	f7ff f8c6 	bl	e9be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f832:	2000      	movs	r0, #0
    f834:	bd10      	pop	{r4, pc}

0000f836 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f836:	b51c      	push	{r2, r3, r4, lr}
    f838:	460c      	mov	r4, r1
    f83a:	4669      	mov	r1, sp
    f83c:	f7fd ff25 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f840:	2800      	cmp	r0, #0
    f842:	d105      	bne.n	f850 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f844:	2100      	movs	r1, #0
    f846:	4622      	mov	r2, r4
    f848:	9801      	ldr	r0, [sp, #4]
    f84a:	f000 face 	bl	fdea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    f84e:	2000      	movs	r0, #0
    f850:	bd1c      	pop	{r2, r3, r4, pc}

0000f852 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    f852:	b510      	push	{r4, lr}
    f854:	4604      	mov	r4, r0
    f856:	7800      	ldrb	r0, [r0, #0]
    f858:	28ff      	cmp	r0, #255	; 0xff
    f85a:	d009      	beq.n	f870 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    f85c:	2101      	movs	r1, #1
    f85e:	f7f1 fbd5 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f862:	b118      	cbz	r0, f86c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    f864:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    f868:	8441      	strh	r1, [r0, #34]	; 0x22
    f86a:	e005      	b.n	f878 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    f86c:	2042      	movs	r0, #66	; 0x42
    f86e:	bd10      	pop	{r4, pc}
    f870:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f874:	f7f4 fd30 	bl	42d8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    f878:	2000      	movs	r0, #0
    f87a:	bd10      	pop	{r4, pc}

0000f87c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f87c:	b510      	push	{r4, lr}
    f87e:	4604      	mov	r4, r0
    f880:	f7f7 fc66 	bl	7150 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    f884:	b118      	cbz	r0, f88e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    f886:	2000      	movs	r0, #0
    f888:	f000 f9e3 	bl	fc52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f88c:	b128      	cbz	r0, f89a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    f88e:	4621      	mov	r1, r4
    f890:	2000      	movs	r0, #0
    f892:	f7f2 f809 	bl	18a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f896:	2000      	movs	r0, #0
    f898:	bd10      	pop	{r4, pc}
    f89a:	200c      	movs	r0, #12
    f89c:	bd10      	pop	{r4, pc}

0000f89e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f89e:	b510      	push	{r4, lr}
    f8a0:	7800      	ldrb	r0, [r0, #0]
    f8a2:	b100      	cbz	r0, f8a6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    f8a4:	2001      	movs	r0, #1
    f8a6:	f7f4 fd41 	bl	432c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f8aa:	2000      	movs	r0, #0
    f8ac:	bd10      	pop	{r4, pc}

0000f8ae <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f8ae:	f7f7 bb6f 	b.w	6f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

0000f8b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f8b2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f8b6:	4606      	mov	r6, r0
    f8b8:	7845      	ldrb	r5, [r0, #1]
    f8ba:	7800      	ldrb	r0, [r0, #0]
    f8bc:	2101      	movs	r1, #1
    f8be:	f7f1 fba5 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f8c2:	0004      	movs	r4, r0
    f8c4:	d01e      	beq.n	f904 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f8c6:	f7fe fe7c 	bl	e5c2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f8ca:	78f1      	ldrb	r1, [r6, #3]
    f8cc:	4281      	cmp	r1, r0
    f8ce:	d800      	bhi.n	f8d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f8d0:	4608      	mov	r0, r1
    f8d2:	4607      	mov	r7, r0
    f8d4:	2d04      	cmp	r5, #4
    f8d6:	d018      	beq.n	f90a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f8d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8da:	f7fd fdb6 	bl	d44a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f8de:	4438      	add	r0, r7
    f8e0:	b281      	uxth	r1, r0
    f8e2:	4620      	mov	r0, r4
    f8e4:	2201      	movs	r2, #1
    f8e6:	f000 f9c6 	bl	fc76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f8ea:	2800      	cmp	r0, #0
    f8ec:	d10b      	bne.n	f906 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f8ee:	2d03      	cmp	r5, #3
    f8f0:	d000      	beq.n	f8f4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f8f2:	b1df      	cbz	r7, f92c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f8f4:	4620      	mov	r0, r4
    f8f6:	f7fe fe99 	bl	e62c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f8fa:	7871      	ldrb	r1, [r6, #1]
    f8fc:	2903      	cmp	r1, #3
    f8fe:	d010      	beq.n	f922 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f900:	b9a0      	cbnz	r0, f92c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f902:	e004      	b.n	f90e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f904:	2042      	movs	r0, #66	; 0x42
    f906:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f90a:	b97f      	cbnz	r7, f92c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f90c:	e7f2      	b.n	f8f4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f90e:	2904      	cmp	r1, #4
    f910:	d107      	bne.n	f922 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f912:	4620      	mov	r0, r4
    f914:	f7ff f850 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f918:	b140      	cbz	r0, f92c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f91a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f91c:	f7fd fd5c 	bl	d3d8 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f920:	b120      	cbz	r0, f92c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f922:	2d01      	cmp	r5, #1
    f924:	d004      	beq.n	f930 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f926:	2d03      	cmp	r5, #3
    f928:	d002      	beq.n	f930 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f92a:	e00e      	b.n	f94a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f92c:	2012      	movs	r0, #18
    f92e:	e7ea      	b.n	f906 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f930:	4620      	mov	r0, r4
    f932:	f7fe fe7b 	bl	e62c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f936:	b108      	cbz	r0, f93c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f938:	2200      	movs	r2, #0
    f93a:	e002      	b.n	f942 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f93c:	2d01      	cmp	r5, #1
    f93e:	d013      	beq.n	f968 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f940:	2201      	movs	r2, #1
    f942:	4668      	mov	r0, sp
    f944:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f946:	f7fd fce3 	bl	d310 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f94a:	2d04      	cmp	r5, #4
    f94c:	d018      	beq.n	f980 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f94e:	6872      	ldr	r2, [r6, #4]
    f950:	463b      	mov	r3, r7
    f952:	2101      	movs	r1, #1
    f954:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f956:	f7fd fd0f 	bl	d378 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f95a:	b138      	cbz	r0, f96c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f95c:	7870      	ldrb	r0, [r6, #1]
    f95e:	2802      	cmp	r0, #2
    f960:	d006      	beq.n	f970 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f962:	2803      	cmp	r0, #3
    f964:	d004      	beq.n	f970 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f966:	e00b      	b.n	f980 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f968:	2202      	movs	r2, #2
    f96a:	e7ea      	b.n	f942 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f96c:	2007      	movs	r0, #7
    f96e:	e7ca      	b.n	f906 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f970:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f972:	f7fd fd6a 	bl	d44a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f976:	4602      	mov	r2, r0
    f978:	2101      	movs	r1, #1
    f97a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f97c:	f7fd fd42 	bl	d404 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f980:	2000      	movs	r0, #0
    f982:	e7c0      	b.n	f906 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f984 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f984:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f988:	4607      	mov	r7, r0
    f98a:	7845      	ldrb	r5, [r0, #1]
    f98c:	78c6      	ldrb	r6, [r0, #3]
    f98e:	7800      	ldrb	r0, [r0, #0]
    f990:	2101      	movs	r1, #1
    f992:	f7f1 fb3b 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f996:	0004      	movs	r4, r0
    f998:	d003      	beq.n	f9a2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f99a:	f7fe fe49 	bl	e630 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f99e:	b118      	cbz	r0, f9a8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f9a0:	e003      	b.n	f9aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f9a2:	2042      	movs	r0, #66	; 0x42
    f9a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f9a8:	2600      	movs	r6, #0
    f9aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f9ac:	f7fd fd51 	bl	d452 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f9b0:	4430      	add	r0, r6
    f9b2:	b281      	uxth	r1, r0
    f9b4:	4688      	mov	r8, r1
    f9b6:	4620      	mov	r0, r4
    f9b8:	2201      	movs	r2, #1
    f9ba:	f000 f95c 	bl	fc76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f9be:	2800      	cmp	r0, #0
    f9c0:	d1f0      	bne.n	f9a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f9c2:	2d04      	cmp	r5, #4
    f9c4:	d008      	beq.n	f9d8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f9c6:	2d03      	cmp	r5, #3
    f9c8:	d00a      	beq.n	f9e0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f9ca:	b12e      	cbz	r6, f9d8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f9cc:	4620      	mov	r0, r4
    f9ce:	f7fe fff3 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f9d2:	b118      	cbz	r0, f9dc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f9d4:	200c      	movs	r0, #12
    f9d6:	e7e5      	b.n	f9a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f9d8:	2012      	movs	r0, #18
    f9da:	e7e3      	b.n	f9a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f9dc:	2d01      	cmp	r5, #1
    f9de:	d10c      	bne.n	f9fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f9e0:	4620      	mov	r0, r4
    f9e2:	f7fe fe23 	bl	e62c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f9e6:	b108      	cbz	r0, f9ec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f9e8:	2204      	movs	r2, #4
    f9ea:	e002      	b.n	f9f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f9ec:	2d01      	cmp	r5, #1
    f9ee:	d010      	beq.n	fa12 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f9f0:	2205      	movs	r2, #5
    f9f2:	4668      	mov	r0, sp
    f9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f9f6:	f7fd fc8b 	bl	d310 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f9fa:	687a      	ldr	r2, [r7, #4]
    f9fc:	4633      	mov	r3, r6
    f9fe:	2100      	movs	r1, #0
    fa00:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fa02:	f7fd fcb9 	bl	d378 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fa06:	b130      	cbz	r0, fa16 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    fa08:	2d02      	cmp	r5, #2
    fa0a:	d006      	beq.n	fa1a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fa0c:	2d03      	cmp	r5, #3
    fa0e:	d004      	beq.n	fa1a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fa10:	e008      	b.n	fa24 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    fa12:	2206      	movs	r2, #6
    fa14:	e7ed      	b.n	f9f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fa16:	2007      	movs	r0, #7
    fa18:	e7c4      	b.n	f9a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fa1a:	4642      	mov	r2, r8
    fa1c:	2100      	movs	r1, #0
    fa1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fa20:	f7fd fcf0 	bl	d404 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa24:	2000      	movs	r0, #0
    fa26:	e7bd      	b.n	f9a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000fa28 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fa28:	b510      	push	{r4, lr}
    fa2a:	4604      	mov	r4, r0
    fa2c:	8880      	ldrh	r0, [r0, #4]
    fa2e:	b128      	cbz	r0, fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa30:	2801      	cmp	r0, #1
    fa32:	d003      	beq.n	fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa34:	2802      	cmp	r0, #2
    fa36:	d001      	beq.n	fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa38:	2012      	movs	r0, #18
    fa3a:	bd10      	pop	{r4, pc}
    fa3c:	78e0      	ldrb	r0, [r4, #3]
    fa3e:	f000 f9b1 	bl	fda4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    fa42:	b148      	cbz	r0, fa58 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa44:	78a0      	ldrb	r0, [r4, #2]
    fa46:	f000 f9ad 	bl	fda4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    fa4a:	b128      	cbz	r0, fa58 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa4c:	4620      	mov	r0, r4
    fa4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa52:	2101      	movs	r1, #1
    fa54:	f000 b862 	b.w	fb1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fa58:	2011      	movs	r0, #17
    fa5a:	bd10      	pop	{r4, pc}

0000fa5c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fa5c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa5e:	460c      	mov	r4, r1
    fa60:	4605      	mov	r5, r0
    fa62:	8800      	ldrh	r0, [r0, #0]
    fa64:	4669      	mov	r1, sp
    fa66:	f7fd fe10 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa6a:	2800      	cmp	r0, #0
    fa6c:	d106      	bne.n	fa7c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fa6e:	9801      	ldr	r0, [sp, #4]
    fa70:	8829      	ldrh	r1, [r5, #0]
    fa72:	8021      	strh	r1, [r4, #0]
    fa74:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
    fa78:	8060      	strh	r0, [r4, #2]
    fa7a:	2000      	movs	r0, #0
    fa7c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fa7e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fa7e:	b510      	push	{r4, lr}
    fa80:	4604      	mov	r4, r0
    fa82:	4601      	mov	r1, r0
    fa84:	2000      	movs	r0, #0
    fa86:	f7f1 fef7 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fa8a:	b910      	cbnz	r0, fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fa8c:	2000      	movs	r0, #0
    fa8e:	6020      	str	r0, [r4, #0]
    fa90:	80a0      	strh	r0, [r4, #4]
    fa92:	2000      	movs	r0, #0
    fa94:	bd10      	pop	{r4, pc}

0000fa96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    fa96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa98:	460c      	mov	r4, r1
    fa9a:	4605      	mov	r5, r0
    fa9c:	8800      	ldrh	r0, [r0, #0]
    fa9e:	4669      	mov	r1, sp
    faa0:	f7fd fdf3 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    faa4:	b108      	cbz	r0, faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    faa6:	2002      	movs	r0, #2
    faa8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    faaa:	78a8      	ldrb	r0, [r5, #2]
    faac:	b158      	cbz	r0, fac6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    faae:	f000 f9f2 	bl	fe96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fab2:	70a0      	strb	r0, [r4, #2]
    fab4:	8828      	ldrh	r0, [r5, #0]
    fab6:	8020      	strh	r0, [r4, #0]
    fab8:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fabc:	f7f2 fdae 	bl	261c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fac0:	70a0      	strb	r0, [r4, #2]
    fac2:	2000      	movs	r0, #0
    fac4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fac6:	9801      	ldr	r0, [sp, #4]
    fac8:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    facc:	e7f1      	b.n	fab2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000face <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    face:	b510      	push	{r4, lr}
    fad0:	f7f7 fb44 	bl	715c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fad4:	2000      	movs	r0, #0
    fad6:	bd10      	pop	{r4, pc}

0000fad8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fad8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fadc:	4604      	mov	r4, r0
    fade:	8840      	ldrh	r0, [r0, #2]
    fae0:	460d      	mov	r5, r1
    fae2:	b1b8      	cbz	r0, fb14 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fae4:	8820      	ldrh	r0, [r4, #0]
    fae6:	4669      	mov	r1, sp
    fae8:	f7fd fdcf 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    faec:	2800      	cmp	r0, #0
    faee:	d10f      	bne.n	fb10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    faf0:	8820      	ldrh	r0, [r4, #0]
    faf2:	8028      	strh	r0, [r5, #0]
    faf4:	9e01      	ldr	r6, [sp, #4]
    faf6:	f106 0510 	add.w	r5, r6, #16
    fafa:	3680      	adds	r6, #128	; 0x80
    fafc:	682f      	ldr	r7, [r5, #0]
    fafe:	8862      	ldrh	r2, [r4, #2]
    fb00:	4639      	mov	r1, r7
    fb02:	4630      	mov	r0, r6
    fb04:	f7fd fee3 	bl	d8ce <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fb08:	6828      	ldr	r0, [r5, #0]
    fb0a:	42b8      	cmp	r0, r7
    fb0c:	d1f6      	bne.n	fafc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fb0e:	2000      	movs	r0, #0
    fb10:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb14:	2012      	movs	r0, #18
    fb16:	e7fb      	b.n	fb10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fb18 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fb18:	f000 b868 	b.w	fbec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fb1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb20:	b085      	sub	sp, #20
    fb22:	4688      	mov	r8, r1
    fb24:	4606      	mov	r6, r0
    fb26:	8800      	ldrh	r0, [r0, #0]
    fb28:	a901      	add	r1, sp, #4
    fb2a:	f7fd fdae 	bl	d68a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb2e:	2800      	cmp	r0, #0
    fb30:	d13b      	bne.n	fbaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fb32:	9802      	ldr	r0, [sp, #8]
    fb34:	4601      	mov	r1, r0
    fb36:	468a      	mov	sl, r1
    fb38:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
    fb3c:	f500 7498 	add.w	r4, r0, #304	; 0x130
    fb40:	f88d 1000 	strb.w	r1, [sp]
    fb44:	9900      	ldr	r1, [sp, #0]
    fb46:	9100      	str	r1, [sp, #0]
    fb48:	f89d 1000 	ldrb.w	r1, [sp]
    fb4c:	f04f 0900 	mov.w	r9, #0
    fb50:	3080      	adds	r0, #128	; 0x80
    fb52:	b121      	cbz	r1, fb5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb54:	f1b8 0f02 	cmp.w	r8, #2
    fb58:	d001      	beq.n	fb5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb5a:	2701      	movs	r7, #1
    fb5c:	e000      	b.n	fb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fb5e:	2700      	movs	r7, #0
    fb60:	7f81      	ldrb	r1, [r0, #30]
    fb62:	2922      	cmp	r1, #34	; 0x22
    fb64:	d100      	bne.n	fb68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    fb66:	b13f      	cbz	r7, fb78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fb68:	2500      	movs	r5, #0
    fb6a:	306c      	adds	r0, #108	; 0x6c
    fb6c:	2108      	movs	r1, #8
    fb6e:	4683      	mov	fp, r0
    fb70:	f7ff fbb9 	bl	f2e6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    fb74:	b110      	cbz	r0, fb7c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
    fb76:	e007      	b.n	fb88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    fb78:	2501      	movs	r5, #1
    fb7a:	e7f6      	b.n	fb6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
    fb7c:	210b      	movs	r1, #11
    fb7e:	4658      	mov	r0, fp
    fb80:	f7ff fbb1 	bl	f2e6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    fb84:	b900      	cbnz	r0, fb88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    fb86:	b17d      	cbz	r5, fba8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
    fb88:	a804      	add	r0, sp, #16
    fb8a:	9000      	str	r0, [sp, #0]
    fb8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb90:	ab03      	add	r3, sp, #12
    fb92:	4632      	mov	r2, r6
    fb94:	4651      	mov	r1, sl
    fb96:	f000 f95e 	bl	fe56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    fb9a:	0005      	movs	r5, r0
    fb9c:	d105      	bne.n	fbaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fb9e:	340c      	adds	r4, #12
    fba0:	20ff      	movs	r0, #255	; 0xff
    fba2:	7060      	strb	r0, [r4, #1]
    fba4:	b937      	cbnz	r7, fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    fba6:	e003      	b.n	fbb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    fba8:	201a      	movs	r0, #26
    fbaa:	b005      	add	sp, #20
    fbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbb0:	7820      	ldrb	r0, [r4, #0]
    fbb2:	b108      	cbz	r0, fbb8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    fbb4:	253a      	movs	r5, #58	; 0x3a
    fbb6:	e012      	b.n	fbde <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    fbb8:	f884 8000 	strb.w	r8, [r4]
    fbbc:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fbc0:	70a0      	strb	r0, [r4, #2]
    fbc2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fbc6:	70e1      	strb	r1, [r4, #3]
    fbc8:	f88d 0000 	strb.w	r0, [sp]
    fbcc:	f88d 1001 	strb.w	r1, [sp, #1]
    fbd0:	88b0      	ldrh	r0, [r6, #4]
    fbd2:	f8ad 0002 	strh.w	r0, [sp, #2]
    fbd6:	4669      	mov	r1, sp
    fbd8:	4650      	mov	r0, sl
    fbda:	f7fd fe13 	bl	d804 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fbde:	f884 9001 	strb.w	r9, [r4, #1]
    fbe2:	4628      	mov	r0, r5
    fbe4:	e7e1      	b.n	fbaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

0000fbe6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fbe6:	2008      	movs	r0, #8
    fbe8:	f7f7 bb20 	b.w	722c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fbec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fbec:	b510      	push	{r4, lr}
    fbee:	f7fd fcbb 	bl	d568 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fbf2:	f7f2 fbcf 	bl	2394 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fbf6:	f7f7 fb3b 	bl	7270 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fbfa:	f7fe f917 	bl	de2c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fbfe:	f7fd fed6 	bl	d9ae <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    fc02:	f7f3 fb31 	bl	3268 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc0a:	f7f7 b903 	b.w	6e14 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>

0000fc0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
    fc0e:	f7f5 b8f7 	b.w	4e00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    fc12:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fc16:	4288      	cmp	r0, r1
    fc18:	d303      	bcc.n	fc22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
    fc1a:	f640 0148 	movw	r1, #2120	; 0x848
    fc1e:	4288      	cmp	r0, r1
    fc20:	d300      	bcc.n	fc24 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
    fc22:	4608      	mov	r0, r1
    fc24:	b280      	uxth	r0, r0
    fc26:	4770      	bx	lr
    fc28:	07c1      	lsls	r1, r0, #31
    fc2a:	d001      	beq.n	fc30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
    fc2c:	2001      	movs	r0, #1
    fc2e:	4770      	bx	lr
    fc30:	0780      	lsls	r0, r0, #30
    fc32:	d501      	bpl.n	fc38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
    fc34:	2002      	movs	r0, #2
    fc36:	4770      	bx	lr
    fc38:	2000      	movs	r0, #0
    fc3a:	4770      	bx	lr
    fc3c:	b510      	push	{r4, lr}
    fc3e:	2801      	cmp	r0, #1
    fc40:	d006      	beq.n	fc50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    fc42:	2802      	cmp	r0, #2
    fc44:	d004      	beq.n	fc50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    fc46:	f240 21d7 	movw	r1, #727	; 0x2d7
    fc4a:	2006      	movs	r0, #6
    fc4c:	f7f0 feb0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc50:	bd10      	pop	{r4, pc}
    fc52:	b510      	push	{r4, lr}
    fc54:	f7f7 f8c8 	bl	6de8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
    fc58:	b158      	cbz	r0, fc72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fc5a:	f7f7 f8fb 	bl	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fc5e:	4604      	mov	r4, r0
    fc60:	f7fe fce6 	bl	e630 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fc64:	b918      	cbnz	r0, fc6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
    fc66:	4620      	mov	r0, r4
    fc68:	f7fe fcd8 	bl	e61c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fc6c:	b108      	cbz	r0, fc72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fc6e:	2000      	movs	r0, #0
    fc70:	bd10      	pop	{r4, pc}
    fc72:	2001      	movs	r0, #1
    fc74:	bd10      	pop	{r4, pc}
    fc76:	b570      	push	{r4, r5, r6, lr}
    fc78:	460c      	mov	r4, r1
    fc7a:	4605      	mov	r5, r0
    fc7c:	b112      	cbz	r2, fc84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
    fc7e:	291f      	cmp	r1, #31
    fc80:	d80c      	bhi.n	fc9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
    fc82:	e016      	b.n	fcb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
    fc84:	f7f1 fc38 	bl	14f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    fc88:	42a0      	cmp	r0, r4
    fc8a:	d201      	bcs.n	fc90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
    fc8c:	2007      	movs	r0, #7
    fc8e:	bd70      	pop	{r4, r5, r6, pc}
    fc90:	4628      	mov	r0, r5
    fc92:	f7fe fccb 	bl	e62c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fc96:	b118      	cbz	r0, fca0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fc98:	2c1f      	cmp	r4, #31
    fc9a:	d901      	bls.n	fca0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fc9c:	2012      	movs	r0, #18
    fc9e:	bd70      	pop	{r4, r5, r6, pc}
    fca0:	4628      	mov	r0, r5
    fca2:	f7fe fccc 	bl	e63e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fca6:	b130      	cbz	r0, fcb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
    fca8:	4621      	mov	r1, r4
    fcaa:	4628      	mov	r0, r5
    fcac:	f7fe fc95 	bl	e5da <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    fcb0:	b118      	cbz	r0, fcba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
    fcb2:	2000      	movs	r0, #0
    fcb4:	bd70      	pop	{r4, r5, r6, pc}
    fcb6:	2042      	movs	r0, #66	; 0x42
    fcb8:	bd70      	pop	{r4, r5, r6, pc}
    fcba:	2045      	movs	r0, #69	; 0x45
    fcbc:	bd70      	pop	{r4, r5, r6, pc}
    fcbe:	b510      	push	{r4, lr}
    fcc0:	4604      	mov	r4, r0
    fcc2:	7840      	ldrb	r0, [r0, #1]
    fcc4:	06c1      	lsls	r1, r0, #27
    fcc6:	d51c      	bpl.n	fd02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fcc8:	07c0      	lsls	r0, r0, #31
    fcca:	d00b      	beq.n	fce4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fccc:	f7f7 fa82 	bl	71d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    fcd0:	b1b8      	cbz	r0, fd02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fcd2:	7860      	ldrb	r0, [r4, #1]
    fcd4:	06c1      	lsls	r1, r0, #27
    fcd6:	d405      	bmi.n	fce4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fcd8:	0700      	lsls	r0, r0, #28
    fcda:	d503      	bpl.n	fce4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fcdc:	7d20      	ldrb	r0, [r4, #20]
    fcde:	2802      	cmp	r0, #2
    fce0:	d10f      	bne.n	fd02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fce2:	e010      	b.n	fd06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fce4:	7d20      	ldrb	r0, [r4, #20]
    fce6:	2802      	cmp	r0, #2
    fce8:	d001      	beq.n	fcee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    fcea:	7ea0      	ldrb	r0, [r4, #26]
    fcec:	b948      	cbnz	r0, fd02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fcee:	7860      	ldrb	r0, [r4, #1]
    fcf0:	0700      	lsls	r0, r0, #28
    fcf2:	d408      	bmi.n	fd06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fcf4:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fcf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    fcfc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    fd00:	d201      	bcs.n	fd06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fd02:	2011      	movs	r0, #17
    fd04:	bd10      	pop	{r4, pc}
    fd06:	2000      	movs	r0, #0
    fd08:	bd10      	pop	{r4, pc}
    fd0a:	b538      	push	{r3, r4, r5, lr}
    fd0c:	4604      	mov	r4, r0
    fd0e:	7800      	ldrb	r0, [r0, #0]
    fd10:	28ef      	cmp	r0, #239	; 0xef
    fd12:	d843      	bhi.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd14:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fd18:	f8ad 0000 	strh.w	r0, [sp]
    fd1c:	9800      	ldr	r0, [sp, #0]
    fd1e:	f000 f918 	bl	ff52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
    fd22:	b3a0      	cbz	r0, fd8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fd24:	7861      	ldrb	r1, [r4, #1]
    fd26:	0708      	lsls	r0, r1, #28
    fd28:	d40b      	bmi.n	fd42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
    fd2a:	f8d4 0002 	ldr.w	r0, [r4, #2]
    fd2e:	f8d4 3005 	ldr.w	r3, [r4, #5]
    fd32:	0a02      	lsrs	r2, r0, #8
    fd34:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    fd38:	d830      	bhi.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd3a:	2220      	movs	r2, #32
    fd3c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    fd40:	d82c      	bhi.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd42:	7a60      	ldrb	r0, [r4, #9]
    fd44:	b318      	cbz	r0, fd8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fd46:	2807      	cmp	r0, #7
    fd48:	d828      	bhi.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd4a:	7aa0      	ldrb	r0, [r4, #10]
    fd4c:	b128      	cbz	r0, fd5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fd4e:	2801      	cmp	r0, #1
    fd50:	d003      	beq.n	fd5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fd52:	2802      	cmp	r0, #2
    fd54:	d001      	beq.n	fd5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fd56:	2803      	cmp	r0, #3
    fd58:	d120      	bne.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd5a:	074a      	lsls	r2, r1, #29
    fd5c:	d403      	bmi.n	fd66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fd5e:	2802      	cmp	r0, #2
    fd60:	d001      	beq.n	fd66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fd62:	2803      	cmp	r0, #3
    fd64:	d105      	bne.n	fd72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
    fd66:	7ae0      	ldrb	r0, [r4, #11]
    fd68:	b108      	cbz	r0, fd6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
    fd6a:	2801      	cmp	r0, #1
    fd6c:	d116      	bne.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd6e:	0748      	lsls	r0, r1, #29
    fd70:	d407      	bmi.n	fd82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd72:	7ca0      	ldrb	r0, [r4, #18]
    fd74:	b128      	cbz	r0, fd82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd76:	2801      	cmp	r0, #1
    fd78:	d003      	beq.n	fd82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd7a:	2802      	cmp	r0, #2
    fd7c:	d001      	beq.n	fd82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd7e:	2803      	cmp	r0, #3
    fd80:	d10c      	bne.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd82:	06c8      	lsls	r0, r1, #27
    fd84:	7d20      	ldrb	r0, [r4, #20]
    fd86:	d503      	bpl.n	fd90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
    fd88:	2801      	cmp	r0, #1
    fd8a:	d107      	bne.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd8c:	e002      	b.n	fd94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
    fd8e:	e005      	b.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd90:	2802      	cmp	r0, #2
    fd92:	d003      	beq.n	fd9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd94:	7e20      	ldrb	r0, [r4, #24]
    fd96:	b118      	cbz	r0, fda0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fd98:	2801      	cmp	r0, #1
    fd9a:	d001      	beq.n	fda0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fd9c:	2012      	movs	r0, #18
    fd9e:	bd38      	pop	{r3, r4, r5, pc}
    fda0:	2000      	movs	r0, #0
    fda2:	bd38      	pop	{r3, r4, r5, pc}
    fda4:	b510      	push	{r4, lr}
    fda6:	0004      	movs	r4, r0
    fda8:	d005      	beq.n	fdb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fdaa:	f7f7 fa51 	bl	7250 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fdae:	4384      	bics	r4, r0
    fdb0:	d001      	beq.n	fdb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fdb2:	2000      	movs	r0, #0
    fdb4:	bd10      	pop	{r4, pc}
    fdb6:	2001      	movs	r0, #1
    fdb8:	bd10      	pop	{r4, pc}
    fdba:	28fb      	cmp	r0, #251	; 0xfb
    fdbc:	d803      	bhi.n	fdc6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
    fdbe:	f640 0048 	movw	r0, #2120	; 0x848
    fdc2:	4281      	cmp	r1, r0
    fdc4:	d901      	bls.n	fdca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
    fdc6:	2011      	movs	r0, #17
    fdc8:	4770      	bx	lr
    fdca:	2000      	movs	r0, #0
    fdcc:	4770      	bx	lr
    fdce:	381b      	subs	r0, #27
    fdd0:	28e1      	cmp	r0, #225	; 0xe1
    fdd2:	d206      	bcs.n	fde2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fdd4:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fdd8:	d303      	bcc.n	fde2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fdda:	f244 2090 	movw	r0, #17040	; 0x4290
    fdde:	4281      	cmp	r1, r0
    fde0:	d901      	bls.n	fde6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
    fde2:	2012      	movs	r0, #18
    fde4:	4770      	bx	lr
    fde6:	2000      	movs	r0, #0
    fde8:	4770      	bx	lr
    fdea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdee:	4606      	mov	r6, r0
    fdf0:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    fdf4:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    fdf8:	4615      	mov	r5, r2
    fdfa:	302c      	adds	r0, #44	; 0x2c
    fdfc:	f7f4 fa9c 	bl	4338 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    fe00:	4680      	mov	r8, r0
    fe02:	2102      	movs	r1, #2
    fe04:	f7fd fcce 	bl	d7a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fe08:	4287      	cmp	r7, r0
    fe0a:	d200      	bcs.n	fe0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
    fe0c:	4638      	mov	r0, r7
    fe0e:	4607      	mov	r7, r0
    fe10:	2102      	movs	r1, #2
    fe12:	4640      	mov	r0, r8
    fe14:	f7fd fcc6 	bl	d7a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fe18:	4284      	cmp	r4, r0
    fe1a:	d200      	bcs.n	fe1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
    fe1c:	4620      	mov	r0, r4
    fe1e:	8831      	ldrh	r1, [r6, #0]
    fe20:	8029      	strh	r1, [r5, #0]
    fe22:	2f1b      	cmp	r7, #27
    fe24:	d913      	bls.n	fe4e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
    fe26:	2ffb      	cmp	r7, #251	; 0xfb
    fe28:	d300      	bcc.n	fe2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fe2a:	27fb      	movs	r7, #251	; 0xfb
    fe2c:	806f      	strh	r7, [r5, #2]
    fe2e:	281b      	cmp	r0, #27
    fe30:	d90f      	bls.n	fe52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
    fe32:	28fb      	cmp	r0, #251	; 0xfb
    fe34:	d300      	bcc.n	fe38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fe36:	20fb      	movs	r0, #251	; 0xfb
    fe38:	80e8      	strh	r0, [r5, #6]
    fe3a:	4640      	mov	r0, r8
    fe3c:	f7ff fee9 	bl	fc12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fe40:	80a8      	strh	r0, [r5, #4]
    fe42:	4640      	mov	r0, r8
    fe44:	f7ff fee5 	bl	fc12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fe48:	8128      	strh	r0, [r5, #8]
    fe4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe4e:	271b      	movs	r7, #27
    fe50:	e7ec      	b.n	fe2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fe52:	201b      	movs	r0, #27
    fe54:	e7f0      	b.n	fe38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fe56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe5a:	7890      	ldrb	r0, [r2, #2]
    fe5c:	9e06      	ldr	r6, [sp, #24]
    fe5e:	461d      	mov	r5, r3
    fe60:	4614      	mov	r4, r2
    fe62:	b908      	cbnz	r0, fe68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
    fe64:	f7f7 f9f4 	bl	7250 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe68:	78e4      	ldrb	r4, [r4, #3]
    fe6a:	4607      	mov	r7, r0
    fe6c:	b914      	cbnz	r4, fe74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
    fe6e:	f7f7 f9ef 	bl	7250 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe72:	4604      	mov	r4, r0
    fe74:	b16f      	cbz	r7, fe92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe76:	b164      	cbz	r4, fe92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe78:	4638      	mov	r0, r7
    fe7a:	f7ff fed5 	bl	fc28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fe7e:	4620      	mov	r0, r4
    fe80:	f7ff fed2 	bl	fc28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fe84:	b12f      	cbz	r7, fe92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe86:	b124      	cbz	r4, fe92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe88:	702f      	strb	r7, [r5, #0]
    fe8a:	7034      	strb	r4, [r6, #0]
    fe8c:	2000      	movs	r0, #0
    fe8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe92:	2009      	movs	r0, #9
    fe94:	e7fb      	b.n	fe8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
    fe96:	207f      	movs	r0, #127	; 0x7f
    fe98:	f000 b83c 	b.w	ff14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fe9c:	b508      	push	{r3, lr}
    fe9e:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    fea2:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    fea6:	f88d 0000 	strb.w	r0, [sp]
    feaa:	9800      	ldr	r0, [sp, #0]
    feac:	9000      	str	r0, [sp, #0]
    feae:	f89d 0000 	ldrb.w	r0, [sp]
    feb2:	b100      	cbz	r0, feb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
    feb4:	2001      	movs	r0, #1
    feb6:	1e40      	subs	r0, r0, #1
    feb8:	4208      	tst	r0, r1
    feba:	d003      	beq.n	fec4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    febc:	2904      	cmp	r1, #4
    febe:	d001      	beq.n	fec4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    fec0:	2001      	movs	r0, #1
    fec2:	bd08      	pop	{r3, pc}
    fec4:	2000      	movs	r0, #0
    fec6:	bd08      	pop	{r3, pc}
    fec8:	b570      	push	{r4, r5, r6, lr}
    feca:	4605      	mov	r5, r0
    fecc:	f7fe fbb7 	bl	e63e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fed0:	b170      	cbz	r0, fef0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
    fed2:	4628      	mov	r0, r5
    fed4:	f7fe fd70 	bl	e9b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fed8:	2800      	cmp	r0, #0
    feda:	d008      	beq.n	feee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
    fedc:	4628      	mov	r0, r5
    fede:	f7fe fd68 	bl	e9b2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    fee2:	4604      	mov	r4, r0
    fee4:	4628      	mov	r0, r5
    fee6:	f7fe fd3e 	bl	e966 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    feea:	b118      	cbz	r0, fef4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
    feec:	200c      	movs	r0, #12
    feee:	bd70      	pop	{r4, r5, r6, pc}
    fef0:	2042      	movs	r0, #66	; 0x42
    fef2:	bd70      	pop	{r4, r5, r6, pc}
    fef4:	b164      	cbz	r4, ff10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    fef6:	8820      	ldrh	r0, [r4, #0]
    fef8:	f7fd fb03 	bl	d502 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fefc:	8820      	ldrh	r0, [r4, #0]
    fefe:	2100      	movs	r1, #0
    ff00:	f7f1 f926 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ff04:	b120      	cbz	r0, ff10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    ff06:	f241 71ae 	movw	r1, #6062	; 0x17ae
    ff0a:	2039      	movs	r0, #57	; 0x39
    ff0c:	f7f0 fd50 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff10:	2000      	movs	r0, #0
    ff12:	bd70      	pop	{r4, r5, r6, pc}
    ff14:	b508      	push	{r3, lr}
    ff16:	f640 1288 	movw	r2, #2440	; 0x988
    ff1a:	2300      	movs	r3, #0
    ff1c:	4669      	mov	r1, sp
    ff1e:	f7fc f9a9 	bl	c274 <mpsl_fem_tx_power_split>
    ff22:	bd08      	pop	{r3, pc}
    ff24:	b530      	push	{r4, r5, lr}
    ff26:	f340 0400 	sbfx	r4, r0, #0, #1
    ff2a:	f340 0040 	sbfx	r0, r0, #1, #1
    ff2e:	1c40      	adds	r0, r0, #1
    ff30:	9d03      	ldr	r5, [sp, #12]
    ff32:	1c64      	adds	r4, r4, #1
    ff34:	d000      	beq.n	ff38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
    ff36:	b119      	cbz	r1, ff40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
    ff38:	b100      	cbz	r0, ff3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
    ff3a:	b10a      	cbz	r2, ff40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
    ff3c:	b91c      	cbnz	r4, ff46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
    ff3e:	e001      	b.n	ff44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
    ff40:	2011      	movs	r0, #17
    ff42:	bd30      	pop	{r4, r5, pc}
    ff44:	2100      	movs	r1, #0
    ff46:	7019      	strb	r1, [r3, #0]
    ff48:	b900      	cbnz	r0, ff4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
    ff4a:	2200      	movs	r2, #0
    ff4c:	702a      	strb	r2, [r5, #0]
    ff4e:	2000      	movs	r0, #0
    ff50:	bd30      	pop	{r4, r5, pc}
    ff52:	b2c0      	uxtb	r0, r0
    ff54:	06c1      	lsls	r1, r0, #27
    ff56:	d40c      	bmi.n	ff72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
    ff58:	0681      	lsls	r1, r0, #26
    ff5a:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    ff5e:	d503      	bpl.n	ff68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
    ff60:	b9d1      	cbnz	r1, ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff62:	0781      	lsls	r1, r0, #30
    ff64:	d418      	bmi.n	ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff66:	e001      	b.n	ff6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
    ff68:	2900      	cmp	r1, #0
    ff6a:	d1fa      	bne.n	ff62 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
    ff6c:	0700      	lsls	r0, r0, #28
    ff6e:	d413      	bmi.n	ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff70:	e010      	b.n	ff94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
    ff72:	0641      	lsls	r1, r0, #25
    ff74:	d410      	bmi.n	ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff76:	0681      	lsls	r1, r0, #26
    ff78:	d40e      	bmi.n	ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff7a:	07c1      	lsls	r1, r0, #31
    ff7c:	ea4f 7180 	mov.w	r1, r0, lsl #30
    ff80:	d004      	beq.n	ff8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
    ff82:	2900      	cmp	r1, #0
    ff84:	db02      	blt.n	ff8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
    ff86:	0740      	lsls	r0, r0, #29
    ff88:	d404      	bmi.n	ff94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
    ff8a:	e005      	b.n	ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff8c:	0701      	lsls	r1, r0, #28
    ff8e:	d403      	bmi.n	ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff90:	0740      	lsls	r0, r0, #29
    ff92:	d401      	bmi.n	ff98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff94:	2001      	movs	r0, #1
    ff96:	4770      	bx	lr
    ff98:	2000      	movs	r0, #0
    ff9a:	4770      	bx	lr
    ff9c:	b510      	push	{r4, lr}
    ff9e:	f7f4 f9af 	bl	4300 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    ffa2:	b110      	cbz	r0, ffaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
    ffa4:	f44f 7188 	mov.w	r1, #272	; 0x110
    ffa8:	e004      	b.n	ffb4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
    ffaa:	f7f3 fadf 	bl	356c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ffae:	b120      	cbz	r0, ffba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
    ffb0:	f240 1115 	movw	r1, #277	; 0x115
    ffb4:	2001      	movs	r0, #1
    ffb6:	f7f0 fcfb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffbe:	2001      	movs	r0, #1
    ffc0:	f7fd b8ef 	b.w	d1a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ffc4:	6802      	ldr	r2, [r0, #0]
    ffc6:	b912      	cbnz	r2, ffce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c0>
    ffc8:	6001      	str	r1, [r0, #0]
    ffca:	4770      	bx	lr
    ffcc:	4602      	mov	r2, r0
    ffce:	6850      	ldr	r0, [r2, #4]
    ffd0:	b108      	cbz	r0, ffd6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c8>
    ffd2:	428a      	cmp	r2, r1
    ffd4:	d1fa      	bne.n	ffcc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
    ffd6:	428a      	cmp	r2, r1
    ffd8:	d0f7      	beq.n	ffca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
    ffda:	6051      	str	r1, [r2, #4]
    ffdc:	4770      	bx	lr
    ffde:	b510      	push	{r4, lr}
    ffe0:	4604      	mov	r4, r0
    ffe2:	e002      	b.n	ffea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3dc>
    ffe4:	6820      	ldr	r0, [r4, #0]
    ffe6:	4780      	blx	r0
    ffe8:	6864      	ldr	r4, [r4, #4]
    ffea:	2c00      	cmp	r4, #0
    ffec:	d1fa      	bne.n	ffe4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
    ffee:	bd10      	pop	{r4, pc}
    fff0:	b510      	push	{r4, lr}
    fff2:	2000      	movs	r0, #0
    fff4:	f7fd f8d5 	bl	d1a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fff8:	f7f1 f988 	bl	130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fffc:	f7f1 fc1e 	bl	183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10000:	f7f1 fdac 	bl	1b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   10004:	2800      	cmp	r0, #0
   10006:	d003      	beq.n	10010 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   10008:	21f2      	movs	r1, #242	; 0xf2
   1000a:	2001      	movs	r0, #1
   1000c:	f7f0 fcd0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10010:	bd10      	pop	{r4, pc}
   10012:	b510      	push	{r4, lr}
   10014:	f7ff ffc2 	bl	ff9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   10018:	f7fe ffc9 	bl	efae <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1001c:	2800      	cmp	r0, #0
   1001e:	d004      	beq.n	1002a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
   10020:	f44f 7195 	mov.w	r1, #298	; 0x12a
   10024:	2001      	movs	r0, #1
   10026:	f7f0 fcc3 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1002a:	bd10      	pop	{r4, pc}

0001002c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1002c:	f7fb be58 	b.w	bce0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10030:	000b0001 	.word	0x000b0001
   10034:	000a0002 	.word	0x000a0002
   10038:	00090005 	.word	0x00090005
   1003c:	0008000a 	.word	0x0008000a
   10040:	00070014 	.word	0x00070014
   10044:	0006001e 	.word	0x0006001e
   10048:	00050032 	.word	0x00050032
   1004c:	0004004b 	.word	0x0004004b
   10050:	00030064 	.word	0x00030064
   10054:	00020096 	.word	0x00020096
   10058:	000100fa 	.word	0x000100fa
   1005c:	000001f4 	.word	0x000001f4

00010060 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   10060:	b510      	push	{r4, lr}
   10062:	6844      	ldr	r4, [r0, #4]
   10064:	7803      	ldrb	r3, [r0, #0]
   10066:	2100      	movs	r1, #0
   10068:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   1006c:	3480      	adds	r4, #128	; 0x80
   1006e:	4620      	mov	r0, r4
   10070:	f7fd fb22 	bl	d6b8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10074:	b110      	cbz	r0, 1007c <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   10076:	2020      	movs	r0, #32
   10078:	7760      	strb	r0, [r4, #29]
   1007a:	bd10      	pop	{r4, pc}
   1007c:	2180      	movs	r1, #128	; 0x80
   1007e:	207e      	movs	r0, #126	; 0x7e
   10080:	f7f0 fc96 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010084 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10084:	2200      	movs	r2, #0
   10086:	704a      	strb	r2, [r1, #1]
   10088:	2214      	movs	r2, #20
   1008a:	700a      	strb	r2, [r1, #0]
   1008c:	f8d0 200a 	ldr.w	r2, [r0, #10]
   10090:	604a      	str	r2, [r1, #4]
   10092:	89c0      	ldrh	r0, [r0, #14]
   10094:	8108      	strh	r0, [r1, #8]
   10096:	4770      	bx	lr
   10098:	b510      	push	{r4, lr}
   1009a:	2801      	cmp	r0, #1
   1009c:	d006      	beq.n	100ac <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   1009e:	2802      	cmp	r0, #2
   100a0:	d004      	beq.n	100ac <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   100a2:	f240 21d7 	movw	r1, #727	; 0x2d7
   100a6:	2006      	movs	r0, #6
   100a8:	f7f0 fc82 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100ac:	bd10      	pop	{r4, pc}

000100ae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   100ae:	b510      	push	{r4, lr}
   100b0:	f7f7 fcbc 	bl	7a2c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   100b4:	f000 f81d 	bl	100f2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   100b8:	f7f7 f998 	bl	73ec <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   100bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100c0:	f7f7 ba92 	b.w	75e8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000100c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   100c4:	b510      	push	{r4, lr}
   100c6:	24c8      	movs	r4, #200	; 0xc8
   100c8:	1e64      	subs	r4, r4, #1
   100ca:	b2e4      	uxtb	r4, r4
   100cc:	f7f7 f9ac 	bl	7428 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   100d0:	2802      	cmp	r0, #2
   100d2:	d003      	beq.n	100dc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   100d4:	2801      	cmp	r0, #1
   100d6:	d000      	beq.n	100da <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   100d8:	2000      	movs	r0, #0
   100da:	bd10      	pop	{r4, pc}
   100dc:	2c00      	cmp	r4, #0
   100de:	d1f3      	bne.n	100c8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   100e0:	21ed      	movs	r1, #237	; 0xed
   100e2:	203b      	movs	r0, #59	; 0x3b
   100e4:	f7f0 fc64 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100e8:	5840      	ldr	r0, [r0, r1]
   100ea:	2800      	cmp	r0, #0
   100ec:	d000      	beq.n	100f0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   100ee:	2001      	movs	r0, #1
   100f0:	4770      	bx	lr

000100f2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   100f2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   100f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   100fa:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   100fe:	f3bf 8f4f 	dsb	sy
   10102:	f3bf 8f6f 	isb	sy
   10106:	f7f7 bb09 	b.w	771c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1010a:	2800      	cmp	r0, #0
   1010c:	db09      	blt.n	10122 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1010e:	f000 021f 	and.w	r2, r0, #31
   10112:	2101      	movs	r1, #1
   10114:	4091      	lsls	r1, r2
   10116:	0940      	lsrs	r0, r0, #5
   10118:	0080      	lsls	r0, r0, #2
   1011a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1011e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10122:	4770      	bx	lr
   10124:	2800      	cmp	r0, #0
   10126:	db0d      	blt.n	10144 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10128:	f000 021f 	and.w	r2, r0, #31
   1012c:	2101      	movs	r1, #1
   1012e:	4091      	lsls	r1, r2
   10130:	0940      	lsrs	r0, r0, #5
   10132:	0080      	lsls	r0, r0, #2
   10134:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10138:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1013c:	f3bf 8f4f 	dsb	sy
   10140:	f3bf 8f6f 	isb	sy
   10144:	4770      	bx	lr
   10146:	5840      	ldr	r0, [r0, r1]
   10148:	2800      	cmp	r0, #0
   1014a:	d000      	beq.n	1014e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   1014c:	2001      	movs	r0, #1
   1014e:	4770      	bx	lr
   10150:	5840      	ldr	r0, [r0, r1]
   10152:	2800      	cmp	r0, #0
   10154:	d000      	beq.n	10158 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10156:	2001      	movs	r0, #1
   10158:	4770      	bx	lr

0001015a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1015a:	b510      	push	{r4, lr}
   1015c:	4604      	mov	r4, r0
   1015e:	4608      	mov	r0, r1
   10160:	f7f7 fd90 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10168:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1016c:	fbb0 f0f1 	udiv	r0, r0, r1
   10170:	1a20      	subs	r0, r4, r0
   10172:	1e80      	subs	r0, r0, #2
   10174:	bd10      	pop	{r4, pc}

00010176 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10176:	b510      	push	{r4, lr}
   10178:	4604      	mov	r4, r0
   1017a:	4608      	mov	r0, r1
   1017c:	f7f7 fd82 	bl	7c84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10180:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10184:	fbb0 f0f1 	udiv	r0, r0, r1
   10188:	1a20      	subs	r0, r4, r0
   1018a:	bd10      	pop	{r4, pc}
   1018c:	2804      	cmp	r0, #4
   1018e:	d202      	bcs.n	10196 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10190:	f04f 0028 	mov.w	r0, #40	; 0x28
   10194:	4770      	bx	lr
   10196:	d102      	bne.n	1019e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10198:	f04f 0010 	mov.w	r0, #16
   1019c:	4770      	bx	lr
   1019e:	f04f 0000 	mov.w	r0, #0
   101a2:	4770      	bx	lr
   101a4:	2100      	movs	r1, #0
   101a6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   101aa:	f800 1f24 	strb.w	r1, [r0, #36]!
   101ae:	7041      	strb	r1, [r0, #1]
   101b0:	4770      	bx	lr

000101b2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   101b2:	b570      	push	{r4, r5, r6, lr}
   101b4:	f7f8 fac6 	bl	8744 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   101b8:	4605      	mov	r5, r0
   101ba:	2400      	movs	r4, #0
   101bc:	e006      	b.n	101cc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   101be:	4620      	mov	r0, r4
   101c0:	f7f8 fac6 	bl	8750 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   101c4:	f7ff ffee 	bl	101a4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   101c8:	1c64      	adds	r4, r4, #1
   101ca:	b2e4      	uxtb	r4, r4
   101cc:	42ac      	cmp	r4, r5
   101ce:	d3f6      	bcc.n	101be <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   101d0:	bd70      	pop	{r4, r5, r6, pc}

000101d2 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   101d2:	f7fa bf27 	b.w	b024 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

000101d6 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   101d6:	b510      	push	{r4, lr}
   101d8:	2000      	movs	r0, #0
   101da:	f7fb fa7f 	bl	b6dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   101de:	6800      	ldr	r0, [r0, #0]
   101e0:	2800      	cmp	r0, #0
   101e2:	bf18      	it	ne
   101e4:	2001      	movne	r0, #1
   101e6:	bd10      	pop	{r4, pc}

000101e8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   101e8:	b510      	push	{r4, lr}
   101ea:	f7fb faef 	bl	b7cc <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   101ee:	f7fa fdd3 	bl	ad98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   101f2:	f000 f804 	bl	101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   101f6:	b280      	uxth	r0, r0
   101f8:	bd10      	pop	{r4, pc}

000101fa <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   101fa:	f7fb ba49 	b.w	b690 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

000101fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   101fe:	0a41      	lsrs	r1, r0, #9
   10200:	f643 5209 	movw	r2, #15625	; 0x3d09
   10204:	4351      	muls	r1, r2
   10206:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1020a:	fb10 f002 	smulbb	r0, r0, r2
   1020e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10212:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10216:	4770      	bx	lr
   10218:	2800      	cmp	r0, #0
   1021a:	db09      	blt.n	10230 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   1021c:	f000 021f 	and.w	r2, r0, #31
   10220:	2101      	movs	r1, #1
   10222:	4091      	lsls	r1, r2
   10224:	0940      	lsrs	r0, r0, #5
   10226:	0080      	lsls	r0, r0, #2
   10228:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1022c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10230:	4770      	bx	lr
   10232:	2800      	cmp	r0, #0
   10234:	db0d      	blt.n	10252 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10236:	f000 021f 	and.w	r2, r0, #31
   1023a:	2101      	movs	r1, #1
   1023c:	4091      	lsls	r1, r2
   1023e:	0940      	lsrs	r0, r0, #5
   10240:	0080      	lsls	r0, r0, #2
   10242:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10246:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1024a:	f3bf 8f4f 	dsb	sy
   1024e:	f3bf 8f6f 	isb	sy
   10252:	4770      	bx	lr
   10254:	5840      	ldr	r0, [r0, r1]
   10256:	2800      	cmp	r0, #0
   10258:	d000      	beq.n	1025c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   1025a:	2001      	movs	r0, #1
   1025c:	4770      	bx	lr
   1025e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10262:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10266:	f002 0201 	and.w	r2, r2, #1
   1026a:	03c0      	lsls	r0, r0, #15
   1026c:	d503      	bpl.n	10276 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   1026e:	428a      	cmp	r2, r1
   10270:	d101      	bne.n	10276 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10272:	2001      	movs	r0, #1
   10274:	4770      	bx	lr
   10276:	2000      	movs	r0, #0
   10278:	4770      	bx	lr

0001027a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   1027a:	b510      	push	{r4, lr}
   1027c:	2101      	movs	r1, #1
   1027e:	0788      	lsls	r0, r1, #30
   10280:	f7fb fde4 	bl	be4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10284:	2800      	cmp	r0, #0
   10286:	d000      	beq.n	1028a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10288:	2001      	movs	r0, #1
   1028a:	bd10      	pop	{r4, pc}

0001028c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   1028c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10290:	2101      	movs	r1, #1
   10292:	6001      	str	r1, [r0, #0]
   10294:	4770      	bx	lr

00010296 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10296:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1029a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   1029e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   102a2:	f002 0203 	and.w	r2, r2, #3
   102a6:	03c9      	lsls	r1, r1, #15
   102a8:	d503      	bpl.n	102b2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   102aa:	4282      	cmp	r2, r0
   102ac:	d101      	bne.n	102b2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   102ae:	2001      	movs	r0, #1
   102b0:	4770      	bx	lr
   102b2:	2000      	movs	r0, #0
   102b4:	4770      	bx	lr

000102b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   102b6:	b510      	push	{r4, lr}
   102b8:	2100      	movs	r1, #0
   102ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   102be:	f7fb fdc5 	bl	be4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   102c2:	2800      	cmp	r0, #0
   102c4:	d000      	beq.n	102c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   102c6:	2001      	movs	r0, #1
   102c8:	bd10      	pop	{r4, pc}
   102ca:	2800      	cmp	r0, #0
   102cc:	db09      	blt.n	102e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   102ce:	f000 021f 	and.w	r2, r0, #31
   102d2:	2101      	movs	r1, #1
   102d4:	4091      	lsls	r1, r2
   102d6:	0940      	lsrs	r0, r0, #5
   102d8:	0080      	lsls	r0, r0, #2
   102da:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102de:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   102e2:	4770      	bx	lr
   102e4:	2800      	cmp	r0, #0
   102e6:	db0d      	blt.n	10304 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   102e8:	f000 021f 	and.w	r2, r0, #31
   102ec:	2101      	movs	r1, #1
   102ee:	4091      	lsls	r1, r2
   102f0:	0940      	lsrs	r0, r0, #5
   102f2:	0080      	lsls	r0, r0, #2
   102f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102f8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   102fc:	f3bf 8f4f 	dsb	sy
   10300:	f3bf 8f6f 	isb	sy
   10304:	4770      	bx	lr
   10306:	1000      	.short	0x1000
   10308:	00fa0002 	.word	0x00fa0002
   1030c:	e8ff0000 	.word	0xe8ff0000
   10310:	95775fae 	.word	0x95775fae
   10314:	6227c87c 	.word	0x6227c87c
   10318:	eae61814 	.word	0xeae61814
   1031c:	3992c65d 	.word	0x3992c65d
   10320:	3a72      	.short	0x3a72
   10322:	2800      	cmp	r0, #0
   10324:	db09      	blt.n	1033a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10326:	f000 021f 	and.w	r2, r0, #31
   1032a:	2101      	movs	r1, #1
   1032c:	4091      	lsls	r1, r2
   1032e:	0940      	lsrs	r0, r0, #5
   10330:	0080      	lsls	r0, r0, #2
   10332:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10336:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1033a:	4770      	bx	lr

0001033c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   1033c:	f3ef 8110 	mrs	r1, PRIMASK
   10340:	b672      	cpsid	i
   10342:	7802      	ldrb	r2, [r0, #0]
   10344:	2a01      	cmp	r2, #1
   10346:	d001      	beq.n	1034c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10348:	2201      	movs	r2, #1
   1034a:	e000      	b.n	1034e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   1034c:	2200      	movs	r2, #0
   1034e:	2301      	movs	r3, #1
   10350:	7003      	strb	r3, [r0, #0]
   10352:	b901      	cbnz	r1, 10356 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10354:	b662      	cpsie	i
   10356:	b10a      	cbz	r2, 1035c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10358:	2000      	movs	r0, #0
   1035a:	4770      	bx	lr
   1035c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10360:	4770      	bx	lr

00010362 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10362:	2100      	movs	r1, #0
   10364:	7001      	strb	r1, [r0, #0]
   10366:	4608      	mov	r0, r1
   10368:	4770      	bx	lr

0001036a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   1036a:	f3ef 8110 	mrs	r1, PRIMASK
   1036e:	b672      	cpsid	i
   10370:	2200      	movs	r2, #0
   10372:	7002      	strb	r2, [r0, #0]
   10374:	b901      	cbnz	r1, 10378 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10376:	b662      	cpsie	i
   10378:	2000      	movs	r0, #0
   1037a:	4770      	bx	lr

0001037c <mpsl_low_priority_process>:
   1037c:	f7fb beba 	b.w	c0f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010380 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10380:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10384:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10388:	280f      	cmp	r0, #15
   1038a:	d001      	beq.n	10390 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   1038c:	2000      	movs	r0, #0
   1038e:	4770      	bx	lr
   10390:	2001      	movs	r0, #1
   10392:	4770      	bx	lr

00010394 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10394:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10398:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1039c:	280a      	cmp	r0, #10
   1039e:	d001      	beq.n	103a4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   103a0:	2000      	movs	r0, #0
   103a2:	4770      	bx	lr
   103a4:	2001      	movs	r0, #1
   103a6:	4770      	bx	lr

000103a8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   103a8:	b500      	push	{lr}
   103aa:	f7ff fff3 	bl	10394 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   103ae:	b120      	cbz	r0, 103ba <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   103b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103b4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   103b8:	b108      	cbz	r0, 103be <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   103ba:	2000      	movs	r0, #0
   103bc:	bd00      	pop	{pc}
   103be:	2001      	movs	r0, #1
   103c0:	bd00      	pop	{pc}

000103c2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   103c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103c6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   103ca:	280e      	cmp	r0, #14
   103cc:	d001      	beq.n	103d2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   103ce:	2000      	movs	r0, #0
   103d0:	4770      	bx	lr
   103d2:	2001      	movs	r0, #1
   103d4:	4770      	bx	lr

000103d6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   103d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103da:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   103de:	2810      	cmp	r0, #16
   103e0:	d001      	beq.n	103e6 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   103e2:	2000      	movs	r0, #0
   103e4:	4770      	bx	lr
   103e6:	2001      	movs	r0, #1
   103e8:	4770      	bx	lr

000103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   103ea:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103ee:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   103f2:	2806      	cmp	r0, #6
   103f4:	d003      	beq.n	103fe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   103f6:	1c40      	adds	r0, r0, #1
   103f8:	d001      	beq.n	103fe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   103fa:	2000      	movs	r0, #0
   103fc:	4770      	bx	lr
   103fe:	2001      	movs	r0, #1
   10400:	4770      	bx	lr

00010402 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10402:	b500      	push	{lr}
   10404:	f7ff fff1 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10408:	b148      	cbz	r0, 1041e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1040a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1040e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10412:	2806      	cmp	r0, #6
   10414:	d303      	bcc.n	1041e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10416:	1c40      	adds	r0, r0, #1
   10418:	d001      	beq.n	1041e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1041a:	2001      	movs	r0, #1
   1041c:	bd00      	pop	{pc}
   1041e:	2000      	movs	r0, #0
   10420:	bd00      	pop	{pc}

00010422 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10422:	b500      	push	{lr}
   10424:	f7ff ffe1 	bl	103ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10428:	b138      	cbz	r0, 1043a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   1042a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1042e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10432:	2806      	cmp	r0, #6
   10434:	d303      	bcc.n	1043e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10436:	1c40      	adds	r0, r0, #1
   10438:	d001      	beq.n	1043e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   1043a:	2000      	movs	r0, #0
   1043c:	bd00      	pop	{pc}
   1043e:	2001      	movs	r0, #1
   10440:	bd00      	pop	{pc}

00010442 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10442:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10446:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1044a:	280d      	cmp	r0, #13
   1044c:	d001      	beq.n	10452 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   1044e:	2000      	movs	r0, #0
   10450:	4770      	bx	lr
   10452:	2001      	movs	r0, #1
   10454:	4770      	bx	lr

00010456 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10456:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1045a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1045e:	2808      	cmp	r0, #8
   10460:	d001      	beq.n	10466 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10462:	2000      	movs	r0, #0
   10464:	4770      	bx	lr
   10466:	2001      	movs	r0, #1
   10468:	4770      	bx	lr

0001046a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   1046a:	f7fb be7d 	b.w	c168 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0001046e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   1046e:	f7fb be7b 	b.w	c168 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010472 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10476:	428a      	cmp	r2, r1
   10478:	d803      	bhi.n	10482 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   1047a:	2179      	movs	r1, #121	; 0x79
   1047c:	2096      	movs	r0, #150	; 0x96
   1047e:	f7fb fd3b 	bl	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10482:	fab2 f382 	clz	r3, r2
   10486:	b143      	cbz	r3, 1049a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10488:	4099      	lsls	r1, r3
   1048a:	f1c3 0c20 	rsb	ip, r3, #32
   1048e:	fa20 fc0c 	lsr.w	ip, r0, ip
   10492:	4098      	lsls	r0, r3
   10494:	ea41 010c 	orr.w	r1, r1, ip
   10498:	409a      	lsls	r2, r3
   1049a:	0c13      	lsrs	r3, r2, #16
   1049c:	fbb1 f5f3 	udiv	r5, r1, r3
   104a0:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   104a4:	b287      	uxth	r7, r0
   104a6:	fbb1 f0f3 	udiv	r0, r1, r3
   104aa:	fb03 1615 	mls	r6, r3, r5, r1
   104ae:	b294      	uxth	r4, r2
   104b0:	fb00 f504 	mul.w	r5, r0, r4
   104b4:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   104b8:	42b5      	cmp	r5, r6
   104ba:	d905      	bls.n	104c8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   104bc:	1bad      	subs	r5, r5, r6
   104be:	4295      	cmp	r5, r2
   104c0:	bf94      	ite	ls
   104c2:	2501      	movls	r5, #1
   104c4:	2502      	movhi	r5, #2
   104c6:	1b40      	subs	r0, r0, r5
   104c8:	0409      	lsls	r1, r1, #16
   104ca:	0405      	lsls	r5, r0, #16
   104cc:	eb11 010c 	adds.w	r1, r1, ip
   104d0:	fba0 0c02 	umull	r0, ip, r0, r2
   104d4:	1a09      	subs	r1, r1, r0
   104d6:	fbb1 f0f3 	udiv	r0, r1, r3
   104da:	fbb1 fcf3 	udiv	ip, r1, r3
   104de:	fb03 131c 	mls	r3, r3, ip, r1
   104e2:	fb00 f104 	mul.w	r1, r0, r4
   104e6:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   104ea:	4299      	cmp	r1, r3
   104ec:	d905      	bls.n	104fa <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   104ee:	1ac9      	subs	r1, r1, r3
   104f0:	4291      	cmp	r1, r2
   104f2:	bf94      	ite	ls
   104f4:	2101      	movls	r1, #1
   104f6:	2102      	movhi	r1, #2
   104f8:	1a40      	subs	r0, r0, r1
   104fa:	4328      	orrs	r0, r5
   104fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010500 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   10500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10504:	461e      	mov	r6, r3
   10506:	4615      	mov	r5, r2
   10508:	4604      	mov	r4, r0
   1050a:	9f06      	ldr	r7, [sp, #24]
   1050c:	f7ff ffb1 	bl	10472 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   10510:	6030      	str	r0, [r6, #0]
   10512:	fba0 0105 	umull	r0, r1, r0, r5
   10516:	1a20      	subs	r0, r4, r0
   10518:	6038      	str	r0, [r7, #0]
   1051a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001051e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   1051e:	b4f0      	push	{r4, r5, r6, r7}
   10520:	ea80 0c01 	eor.w	ip, r0, r1
   10524:	4603      	mov	r3, r0
   10526:	f01c 0f03 	tst.w	ip, #3
   1052a:	d13c      	bne.n	105a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1052c:	f013 0f03 	tst.w	r3, #3
   10530:	d00b      	beq.n	1054a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10532:	2a00      	cmp	r2, #0
   10534:	bf04      	itt	eq
   10536:	bcf0      	popeq	{r4, r5, r6, r7}
   10538:	4770      	bxeq	lr
   1053a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1053e:	f803 cb01 	strb.w	ip, [r3], #1
   10542:	1e52      	subs	r2, r2, #1
   10544:	f013 0f03 	tst.w	r3, #3
   10548:	d1f3      	bne.n	10532 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   1054a:	2a03      	cmp	r2, #3
   1054c:	d94f      	bls.n	105ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1054e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10552:	d24c      	bcs.n	105ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10554:	f1c2 0c00 	rsb	ip, r2, #0
   10558:	ea4f 74ec 	mov.w	r4, ip, asr #31
   1055c:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10560:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10564:	f1cc 0c00 	rsb	ip, ip, #0
   10568:	f1bc 0f00 	cmp.w	ip, #0
   1056c:	dd1b      	ble.n	105a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1056e:	1f0d      	subs	r5, r1, #4
   10570:	1f1c      	subs	r4, r3, #4
   10572:	f01c 0f01 	tst.w	ip, #1
   10576:	d003      	beq.n	10580 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10578:	f855 6f04 	ldr.w	r6, [r5, #4]!
   1057c:	f844 6f04 	str.w	r6, [r4, #4]!
   10580:	ea5f 066c 	movs.w	r6, ip, asr #1
   10584:	d007      	beq.n	10596 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10586:	686f      	ldr	r7, [r5, #4]
   10588:	6067      	str	r7, [r4, #4]
   1058a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1058e:	f844 7f08 	str.w	r7, [r4, #8]!
   10592:	1e76      	subs	r6, r6, #1
   10594:	d1f7      	bne.n	10586 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10596:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   1059a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1059e:	f1cc 0c00 	rsb	ip, ip, #0
   105a2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   105a6:	2a00      	cmp	r2, #0
   105a8:	bf04      	itt	eq
   105aa:	bcf0      	popeq	{r4, r5, r6, r7}
   105ac:	4770      	bxeq	lr
   105ae:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   105b2:	d226      	bcs.n	10602 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   105b4:	2a00      	cmp	r2, #0
   105b6:	bfdc      	itt	le
   105b8:	bcf0      	pople	{r4, r5, r6, r7}
   105ba:	4770      	bxle	lr
   105bc:	1e49      	subs	r1, r1, #1
   105be:	1e5b      	subs	r3, r3, #1
   105c0:	f012 0f01 	tst.w	r2, #1
   105c4:	d003      	beq.n	105ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   105c6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   105ca:	f803 cf01 	strb.w	ip, [r3, #1]!
   105ce:	1052      	asrs	r2, r2, #1
   105d0:	bf04      	itt	eq
   105d2:	bcf0      	popeq	{r4, r5, r6, r7}
   105d4:	4770      	bxeq	lr
   105d6:	f891 c001 	ldrb.w	ip, [r1, #1]
   105da:	f883 c001 	strb.w	ip, [r3, #1]
   105de:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   105e2:	f803 cf02 	strb.w	ip, [r3, #2]!
   105e6:	1e52      	subs	r2, r2, #1
   105e8:	d1f5      	bne.n	105d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   105ea:	bcf0      	pop	{r4, r5, r6, r7}
   105ec:	4770      	bx	lr
   105ee:	2a04      	cmp	r2, #4
   105f0:	d3d9      	bcc.n	105a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   105f2:	f851 cb04 	ldr.w	ip, [r1], #4
   105f6:	1f12      	subs	r2, r2, #4
   105f8:	f843 cb04 	str.w	ip, [r3], #4
   105fc:	2a04      	cmp	r2, #4
   105fe:	d2f8      	bcs.n	105f2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10600:	e7d1      	b.n	105a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10602:	f811 cb01 	ldrb.w	ip, [r1], #1
   10606:	f803 cb01 	strb.w	ip, [r3], #1
   1060a:	1e52      	subs	r2, r2, #1
   1060c:	d1f9      	bne.n	10602 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1060e:	bcf0      	pop	{r4, r5, r6, r7}
   10610:	4770      	bx	lr

00010612 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10612:	b470      	push	{r4, r5, r6}
   10614:	4603      	mov	r3, r0
   10616:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   1061a:	f010 0f03 	tst.w	r0, #3
   1061e:	d009      	beq.n	10634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10620:	2a00      	cmp	r2, #0
   10622:	bf04      	itt	eq
   10624:	bc70      	popeq	{r4, r5, r6}
   10626:	4770      	bxeq	lr
   10628:	f803 cb01 	strb.w	ip, [r3], #1
   1062c:	1e52      	subs	r2, r2, #1
   1062e:	f013 0f03 	tst.w	r3, #3
   10632:	d1f5      	bne.n	10620 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10634:	b2c9      	uxtb	r1, r1
   10636:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1063a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1063e:	2a03      	cmp	r2, #3
   10640:	d939      	bls.n	106b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10642:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10646:	d236      	bcs.n	106b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10648:	4251      	negs	r1, r2
   1064a:	17cc      	asrs	r4, r1, #31
   1064c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10650:	1089      	asrs	r1, r1, #2
   10652:	424e      	negs	r6, r1
   10654:	2e00      	cmp	r6, #0
   10656:	dd11      	ble.n	1067c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10658:	1f19      	subs	r1, r3, #4
   1065a:	f016 0f01 	tst.w	r6, #1
   1065e:	bf18      	it	ne
   10660:	f841 5f04 	strne.w	r5, [r1, #4]!
   10664:	1074      	asrs	r4, r6, #1
   10666:	d004      	beq.n	10672 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10668:	604d      	str	r5, [r1, #4]
   1066a:	f841 5f08 	str.w	r5, [r1, #8]!
   1066e:	1e64      	subs	r4, r4, #1
   10670:	d1fa      	bne.n	10668 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10672:	4271      	negs	r1, r6
   10674:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10678:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1067c:	2a00      	cmp	r2, #0
   1067e:	bf04      	itt	eq
   10680:	bc70      	popeq	{r4, r5, r6}
   10682:	4770      	bxeq	lr
   10684:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10688:	d21d      	bcs.n	106c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1068a:	2a00      	cmp	r2, #0
   1068c:	bfdc      	itt	le
   1068e:	bc70      	pople	{r4, r5, r6}
   10690:	4770      	bxle	lr
   10692:	1e59      	subs	r1, r3, #1
   10694:	f012 0f01 	tst.w	r2, #1
   10698:	bf18      	it	ne
   1069a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   1069e:	1052      	asrs	r2, r2, #1
   106a0:	bf04      	itt	eq
   106a2:	bc70      	popeq	{r4, r5, r6}
   106a4:	4770      	bxeq	lr
   106a6:	f881 c001 	strb.w	ip, [r1, #1]
   106aa:	f801 cf02 	strb.w	ip, [r1, #2]!
   106ae:	1e52      	subs	r2, r2, #1
   106b0:	d1f9      	bne.n	106a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   106b2:	bc70      	pop	{r4, r5, r6}
   106b4:	4770      	bx	lr
   106b6:	2a04      	cmp	r2, #4
   106b8:	d3e0      	bcc.n	1067c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   106ba:	1f12      	subs	r2, r2, #4
   106bc:	f843 5b04 	str.w	r5, [r3], #4
   106c0:	2a04      	cmp	r2, #4
   106c2:	d2fa      	bcs.n	106ba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   106c4:	e7da      	b.n	1067c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   106c6:	f803 cb01 	strb.w	ip, [r3], #1
   106ca:	1e52      	subs	r2, r2, #1
   106cc:	d1fb      	bne.n	106c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   106ce:	bc70      	pop	{r4, r5, r6}
   106d0:	4770      	bx	lr
   106d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106d6:	4770      	bx	lr
   106d8:	2000      	movs	r0, #0
   106da:	4770      	bx	lr
   106dc:	2000      	movs	r0, #0
   106de:	4770      	bx	lr
   106e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106e4:	4770      	bx	lr
   106e6:	4770      	bx	lr
   106e8:	4770      	bx	lr
   106ea:	2000      	movs	r0, #0
   106ec:	4770      	bx	lr
   106ee:	2100      	movs	r1, #0
   106f0:	7001      	strb	r1, [r0, #0]
   106f2:	4770      	bx	lr
   106f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106f8:	4770      	bx	lr
   106fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106fe:	4770      	bx	lr
   10700:	2100      	movs	r1, #0
   10702:	7001      	strb	r1, [r0, #0]
   10704:	4770      	bx	lr
   10706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1070a:	4770      	bx	lr
   1070c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10710:	4770      	bx	lr
   10712:	7800      	ldrb	r0, [r0, #0]
   10714:	2800      	cmp	r0, #0
   10716:	d001      	beq.n	1071c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10718:	f06f 0015 	mvn.w	r0, #21
   1071c:	4770      	bx	lr
   1071e:	2000      	movs	r0, #0
   10720:	4770      	bx	lr
   10722:	2200      	movs	r2, #0
   10724:	f000 b802 	b.w	1072c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010728 <mpsl_fem_init>:
   10728:	f7f7 bf7a 	b.w	8620 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0001072c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   1072c:	b570      	push	{r4, r5, r6, lr}
   1072e:	4614      	mov	r4, r2
   10730:	460d      	mov	r5, r1
   10732:	1b00      	subs	r0, r0, r4
   10734:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10738:	4288      	cmp	r0, r1
   1073a:	da01      	bge.n	10740 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   1073c:	4608      	mov	r0, r1
   1073e:	e002      	b.n	10746 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10740:	287f      	cmp	r0, #127	; 0x7f
   10742:	dd00      	ble.n	10746 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10744:	207f      	movs	r0, #127	; 0x7f
   10746:	4619      	mov	r1, r3
   10748:	b240      	sxtb	r0, r0
   1074a:	f7f7 ff9d 	bl	8688 <mpsl_tx_power_radio_supported_power_adjust>
   1074e:	7028      	strb	r0, [r5, #0]
   10750:	706c      	strb	r4, [r5, #1]
   10752:	2100      	movs	r1, #0
   10754:	4420      	add	r0, r4
   10756:	70a9      	strb	r1, [r5, #2]
   10758:	b240      	sxtb	r0, r0
   1075a:	bd70      	pop	{r4, r5, r6, pc}
   1075c:	1702080c 	.word	0x1702080c
   10760:	0201010d 	.word	0x0201010d
   10764:	01010909 	.word	0x01010909
   10768:	18090206 	.word	0x18090206
   1076c:	01010318 	.word	0x01010318
   10770:	03030909 	.word	0x03030909
   10774:	01020305 	.word	0x01020305
   10778:	24020223 	.word	0x24020223
   1077c:	04041009 	.word	0x04041009
   10780:	0b0b0505 	.word	0x0b0b0505
   10784:	0b04      	.short	0x0b04
   10786:	2b          	.byte	0x2b
   10787:	d8          	.byte	0xd8
   10788:	f8f4f0ec 	.word	0xf8f4f0ec
   1078c:	030200fc 	.word	0x030200fc
   10790:	07060504 	.word	0x07060504
   10794:	00000008 	.word	0x00000008
	...
   107a8:	01010100 	.word	0x01010100
   107ac:	02020201 	.word	0x02020201
   107b0:	03030302 	.word	0x03030302
   107b4:	04040403 	.word	0x04040403
   107b8:	05050504 	.word	0x05050504
   107bc:	07060605 	.word	0x07060605
   107c0:	0b0a0908 	.word	0x0b0a0908
   107c4:	00000d0c 	.word	0x00000d0c
	...
   107d8:	01010000 	.word	0x01010000
   107dc:	02020101 	.word	0x02020101
   107e0:	03030202 	.word	0x03030202
   107e4:	04040303 	.word	0x04040303
   107e8:	05050404 	.word	0x05050404
   107ec:	06060505 	.word	0x06060505
   107f0:	00090806 	.word	0x00090806

000107f4 <main>:
#include <zephyr/kernel.h>
#include <zephyr/bluetooth/bluetooth.h>
#include "serial.h"

void main(void)
{
   107f4:	b538      	push	{r3, r4, r5, lr}
	serial_enable(SERIAL_TYPE_ALL|SERIAL_TYPE_BLE);
   107f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   107fa:	f000 f8c5 	bl	10988 <serial_enable>
	serial_set_end_character_list("\n", 1);
   107fe:	2101      	movs	r1, #1
   10800:	480e      	ldr	r0, [pc, #56]	; (1083c <main+0x48>)
   10802:	f000 fbc3 	bl	10f8c <serial_set_end_character_list>
	serial_sendf(K_FOREVER, "Hello World!\n");
   10806:	4a0e      	ldr	r2, [pc, #56]	; (10840 <main+0x4c>)
   10808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1080c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10810:	f000 fb08 	bl	10e24 <serial_sendf>
	
	while (true)
	{
		serial_line_t const * p_line = serial_get_line(K_FOREVER);
   10814:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10818:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1081c:	4620      	mov	r0, r4
   1081e:	4629      	mov	r1, r5
   10820:	f000 f9e2 	bl	10be8 <serial_get_line>
		serial_send(K_FOREVER, p_line->p_data, p_line->len);
   10824:	6803      	ldr	r3, [r0, #0]
   10826:	6842      	ldr	r2, [r0, #4]
   10828:	4620      	mov	r0, r4
   1082a:	4629      	mov	r1, r5
   1082c:	f000 fa50 	bl	10cd0 <serial_send>
		serial_sendf(K_FOREVER, "hallo welt\n");
   10830:	4a04      	ldr	r2, [pc, #16]	; (10844 <main+0x50>)
   10832:	4620      	mov	r0, r4
   10834:	4629      	mov	r1, r5
   10836:	f000 faf5 	bl	10e24 <serial_sendf>
	while (true)
   1083a:	e7eb      	b.n	10814 <main+0x20>
   1083c:	00031ef4 	.word	0x00031ef4
   10840:	00031ee8 	.word	0x00031ee8
   10844:	00031ef8 	.word	0x00031ef8

00010848 <uart_serial_callback>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EVENT HANDLERS
void uart_serial_callback(serial_event_t const * p_evt)
{
	switch (p_evt->type)
   10848:	7803      	ldrb	r3, [r0, #0]
   1084a:	b103      	cbz	r3, 1084e <uart_serial_callback+0x6>
   1084c:	4770      	bx	lr
{
   1084e:	b5b0      	push	{r4, r5, r7, lr}
   10850:	b082      	sub	sp, #8
   10852:	af00      	add	r7, sp, #0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10854:	4820      	ldr	r0, [pc, #128]	; (108d8 <uart_serial_callback+0x90>)
   10856:	f015 fd09 	bl	2626c <z_impl_k_sem_give>
	{
	case SERIAL_EVENT_TYPE_NEW_DATA_RECEIVED:
		k_sem_give(&sem_wait_for_data);
		LOG_DBG("new data from uart_serial received");
   1085a:	466c      	mov	r4, sp
   1085c:	b088      	sub	sp, #32
   1085e:	466b      	mov	r3, sp
   10860:	f113 0210 	adds.w	r2, r3, #16
   10864:	d031      	beq.n	108ca <uart_serial_callback+0x82>
   10866:	210c      	movs	r1, #12
   10868:	b142      	cbz	r2, 1087c <uart_serial_callback+0x34>
   1086a:	4608      	mov	r0, r1
   1086c:	2904      	cmp	r1, #4
   1086e:	dd01      	ble.n	10874 <uart_serial_callback+0x2c>
   10870:	4d1a      	ldr	r5, [pc, #104]	; (108dc <uart_serial_callback+0x94>)
   10872:	615d      	str	r5, [r3, #20]
   10874:	2808      	cmp	r0, #8
   10876:	dd01      	ble.n	1087c <uart_serial_callback+0x34>
   10878:	4819      	ldr	r0, [pc, #100]	; (108e0 <uart_serial_callback+0x98>)
   1087a:	6198      	str	r0, [r3, #24]
   1087c:	290b      	cmp	r1, #11
   1087e:	dd27      	ble.n	108d0 <uart_serial_callback+0x88>
   10880:	f04f 0c0c 	mov.w	ip, #12
   10884:	b13a      	cbz	r2, 10896 <uart_serial_callback+0x4e>
   10886:	2103      	movs	r1, #3
   10888:	7139      	strb	r1, [r7, #4]
   1088a:	2100      	movs	r1, #0
   1088c:	7179      	strb	r1, [r7, #5]
   1088e:	71b9      	strb	r1, [r7, #6]
   10890:	71f9      	strb	r1, [r7, #7]
   10892:	6878      	ldr	r0, [r7, #4]
   10894:	6118      	str	r0, [r3, #16]
   10896:	2100      	movs	r1, #0
   10898:	f36f 0100 	bfc	r1, #0, #1
   1089c:	f36f 0141 	bfc	r1, #1, #1
   108a0:	f36f 0182 	bfc	r1, #2, #1
   108a4:	f36f 01c5 	bfc	r1, #3, #3
   108a8:	2304      	movs	r3, #4
   108aa:	f363 1188 	bfi	r1, r3, #6, #3
   108ae:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   108b2:	f36c 2153 	bfi	r1, ip, #9, #11
   108b6:	f36f 511f 	bfc	r1, #20, #12
   108ba:	2300      	movs	r3, #0
   108bc:	4809      	ldr	r0, [pc, #36]	; (108e4 <uart_serial_callback+0x9c>)
   108be:	f003 fc1d 	bl	140fc <z_impl_z_log_msg_static_create>
   108c2:	46a5      	mov	sp, r4
		break;
	default:
		break;
	}
}
   108c4:	3708      	adds	r7, #8
   108c6:	46bd      	mov	sp, r7
   108c8:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_DBG("new data from uart_serial received");
   108ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   108ce:	e7cb      	b.n	10868 <uart_serial_callback+0x20>
   108d0:	f06f 0c1b 	mvn.w	ip, #27
   108d4:	e7d6      	b.n	10884 <uart_serial_callback+0x3c>
   108d6:	bf00      	nop
   108d8:	20000aa0 	.word	0x20000aa0
   108dc:	00031f04 	.word	0x00031f04
   108e0:	000320e0 	.word	0x000320e0
   108e4:	00031d9c 	.word	0x00031d9c

000108e8 <ble_serial_callback>:

void ble_serial_callback(serial_event_t const * p_evt)
{
	switch (p_evt->type)
   108e8:	7803      	ldrb	r3, [r0, #0]
   108ea:	b103      	cbz	r3, 108ee <ble_serial_callback+0x6>
   108ec:	4770      	bx	lr
{
   108ee:	b5b0      	push	{r4, r5, r7, lr}
   108f0:	b082      	sub	sp, #8
   108f2:	af00      	add	r7, sp, #0
   108f4:	4820      	ldr	r0, [pc, #128]	; (10978 <ble_serial_callback+0x90>)
   108f6:	f015 fcb9 	bl	2626c <z_impl_k_sem_give>
	{
	case SERIAL_EVENT_TYPE_NEW_DATA_RECEIVED:
		k_sem_give(&sem_wait_for_data);
		LOG_DBG("new data from uart_serial received");
   108fa:	466c      	mov	r4, sp
   108fc:	b088      	sub	sp, #32
   108fe:	466b      	mov	r3, sp
   10900:	f113 0210 	adds.w	r2, r3, #16
   10904:	d031      	beq.n	1096a <ble_serial_callback+0x82>
   10906:	210c      	movs	r1, #12
   10908:	b142      	cbz	r2, 1091c <ble_serial_callback+0x34>
   1090a:	4608      	mov	r0, r1
   1090c:	2904      	cmp	r1, #4
   1090e:	dd01      	ble.n	10914 <ble_serial_callback+0x2c>
   10910:	4d1a      	ldr	r5, [pc, #104]	; (1097c <ble_serial_callback+0x94>)
   10912:	615d      	str	r5, [r3, #20]
   10914:	2808      	cmp	r0, #8
   10916:	dd01      	ble.n	1091c <ble_serial_callback+0x34>
   10918:	4819      	ldr	r0, [pc, #100]	; (10980 <ble_serial_callback+0x98>)
   1091a:	6198      	str	r0, [r3, #24]
   1091c:	290b      	cmp	r1, #11
   1091e:	dd27      	ble.n	10970 <ble_serial_callback+0x88>
   10920:	f04f 0c0c 	mov.w	ip, #12
   10924:	b13a      	cbz	r2, 10936 <ble_serial_callback+0x4e>
   10926:	2103      	movs	r1, #3
   10928:	7139      	strb	r1, [r7, #4]
   1092a:	2100      	movs	r1, #0
   1092c:	7179      	strb	r1, [r7, #5]
   1092e:	71b9      	strb	r1, [r7, #6]
   10930:	71f9      	strb	r1, [r7, #7]
   10932:	6878      	ldr	r0, [r7, #4]
   10934:	6118      	str	r0, [r3, #16]
   10936:	2100      	movs	r1, #0
   10938:	f36f 0100 	bfc	r1, #0, #1
   1093c:	f36f 0141 	bfc	r1, #1, #1
   10940:	f36f 0182 	bfc	r1, #2, #1
   10944:	f36f 01c5 	bfc	r1, #3, #3
   10948:	2304      	movs	r3, #4
   1094a:	f363 1188 	bfi	r1, r3, #6, #3
   1094e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   10952:	f36c 2153 	bfi	r1, ip, #9, #11
   10956:	f36f 511f 	bfc	r1, #20, #12
   1095a:	2300      	movs	r3, #0
   1095c:	4809      	ldr	r0, [pc, #36]	; (10984 <ble_serial_callback+0x9c>)
   1095e:	f003 fbcd 	bl	140fc <z_impl_z_log_msg_static_create>
   10962:	46a5      	mov	sp, r4
		break;
	default:
		break;
	}
}
   10964:	3708      	adds	r7, #8
   10966:	46bd      	mov	sp, r7
   10968:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_DBG("new data from uart_serial received");
   1096a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1096e:	e7cb      	b.n	10908 <ble_serial_callback+0x20>
   10970:	f06f 0c1b 	mvn.w	ip, #27
   10974:	e7d6      	b.n	10924 <ble_serial_callback+0x3c>
   10976:	bf00      	nop
   10978:	20000aa0 	.word	0x20000aa0
   1097c:	00031f04 	.word	0x00031f04
   10980:	000320cc 	.word	0x000320cc
   10984:	00031d9c 	.word	0x00031d9c

00010988 <serial_enable>:
// STATIC FUNCTIONS

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

serial_ret_code_t serial_enable(serial_type_t type)
{
   10988:	b530      	push	{r4, r5, lr}
   1098a:	b0a7      	sub	sp, #156	; 0x9c
   1098c:	4604      	mov	r4, r0
	serial_ret_code_t ret_code = SERIAL_RET_CODE_ERROR_UNKNOWN;
	
	if (type & SERIAL_TYPE_UART)
   1098e:	f010 0f01 	tst.w	r0, #1
   10992:	d108      	bne.n	109a6 <serial_enable+0x1e>
	serial_ret_code_t ret_code = SERIAL_RET_CODE_ERROR_UNKNOWN;
   10994:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			return ret_code;
		}
		enabled_serial_types |= SERIAL_TYPE_UART;
	}
	
	if (type & SERIAL_TYPE_BLE)
   10998:	f014 0f02 	tst.w	r4, #2
   1099c:	f040 8087 	bne.w	10aae <serial_enable+0x126>
		}
		enabled_serial_types |= SERIAL_TYPE_BLE;
	}
	
	return ret_code;
}
   109a0:	4628      	mov	r0, r5
   109a2:	b027      	add	sp, #156	; 0x9c
   109a4:	bd30      	pop	{r4, r5, pc}
		ret_code = uart_serial_set_end_character_list(end_character_list, end_character_count);
   109a6:	4b84      	ldr	r3, [pc, #528]	; (10bb8 <serial_enable+0x230>)
   109a8:	6819      	ldr	r1, [r3, #0]
   109aa:	4b84      	ldr	r3, [pc, #528]	; (10bbc <serial_enable+0x234>)
   109ac:	6818      	ldr	r0, [r3, #0]
   109ae:	f001 fa77 	bl	11ea0 <uart_serial_set_end_character_list>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   109b2:	4605      	mov	r5, r0
   109b4:	b978      	cbnz	r0, 109d6 <serial_enable+0x4e>
		ret_code = uart_serial_enable();
   109b6:	f001 f843 	bl	11a40 <uart_serial_enable>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   109ba:	4605      	mov	r5, r0
   109bc:	bb78      	cbnz	r0, 10a1e <serial_enable+0x96>
		ret_code = uart_serial_add_callback(uart_serial_callback);
   109be:	4880      	ldr	r0, [pc, #512]	; (10bc0 <serial_enable+0x238>)
   109c0:	f001 f82a 	bl	11a18 <uart_serial_add_callback>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   109c4:	4605      	mov	r5, r0
   109c6:	2800      	cmp	r0, #0
   109c8:	d14d      	bne.n	10a66 <serial_enable+0xde>
		enabled_serial_types |= SERIAL_TYPE_UART;
   109ca:	4a7e      	ldr	r2, [pc, #504]	; (10bc4 <serial_enable+0x23c>)
   109cc:	6813      	ldr	r3, [r2, #0]
   109ce:	f043 0301 	orr.w	r3, r3, #1
   109d2:	6013      	str	r3, [r2, #0]
   109d4:	e7e0      	b.n	10998 <serial_enable+0x10>
			LOG_ERR("unable to set end-character-list for uart_serial!");
   109d6:	4b7c      	ldr	r3, [pc, #496]	; (10bc8 <serial_enable+0x240>)
   109d8:	9313      	str	r3, [sp, #76]	; 0x4c
   109da:	2302      	movs	r3, #2
   109dc:	f88d 3004 	strb.w	r3, [sp, #4]
   109e0:	2300      	movs	r3, #0
   109e2:	f88d 3005 	strb.w	r3, [sp, #5]
   109e6:	f88d 3006 	strb.w	r3, [sp, #6]
   109ea:	f88d 3007 	strb.w	r3, [sp, #7]
   109ee:	9a01      	ldr	r2, [sp, #4]
   109f0:	9212      	str	r2, [sp, #72]	; 0x48
   109f2:	4619      	mov	r1, r3
   109f4:	f363 0100 	bfi	r1, r3, #0, #1
   109f8:	f363 0141 	bfi	r1, r3, #1, #1
   109fc:	f363 0182 	bfi	r1, r3, #2, #1
   10a00:	f363 01c5 	bfi	r1, r3, #3, #3
   10a04:	2201      	movs	r2, #1
   10a06:	f362 1188 	bfi	r1, r2, #6, #3
   10a0a:	2208      	movs	r2, #8
   10a0c:	f362 2153 	bfi	r1, r2, #9, #11
   10a10:	f363 511f 	bfi	r1, r3, #20, #12
   10a14:	aa12      	add	r2, sp, #72	; 0x48
   10a16:	486d      	ldr	r0, [pc, #436]	; (10bcc <serial_enable+0x244>)
   10a18:	f003 fb70 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   10a1c:	e7c0      	b.n	109a0 <serial_enable+0x18>
			LOG_ERR("unable to enable uart_serial!");
   10a1e:	4b6c      	ldr	r3, [pc, #432]	; (10bd0 <serial_enable+0x248>)
   10a20:	930d      	str	r3, [sp, #52]	; 0x34
   10a22:	2302      	movs	r3, #2
   10a24:	f88d 3004 	strb.w	r3, [sp, #4]
   10a28:	2300      	movs	r3, #0
   10a2a:	f88d 3005 	strb.w	r3, [sp, #5]
   10a2e:	f88d 3006 	strb.w	r3, [sp, #6]
   10a32:	f88d 3007 	strb.w	r3, [sp, #7]
   10a36:	9a01      	ldr	r2, [sp, #4]
   10a38:	920c      	str	r2, [sp, #48]	; 0x30
   10a3a:	4619      	mov	r1, r3
   10a3c:	f363 0100 	bfi	r1, r3, #0, #1
   10a40:	f363 0141 	bfi	r1, r3, #1, #1
   10a44:	f363 0182 	bfi	r1, r3, #2, #1
   10a48:	f363 01c5 	bfi	r1, r3, #3, #3
   10a4c:	2201      	movs	r2, #1
   10a4e:	f362 1188 	bfi	r1, r2, #6, #3
   10a52:	2208      	movs	r2, #8
   10a54:	f362 2153 	bfi	r1, r2, #9, #11
   10a58:	f363 511f 	bfi	r1, r3, #20, #12
   10a5c:	aa0c      	add	r2, sp, #48	; 0x30
   10a5e:	485b      	ldr	r0, [pc, #364]	; (10bcc <serial_enable+0x244>)
   10a60:	f003 fb4c 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   10a64:	e79c      	b.n	109a0 <serial_enable+0x18>
			LOG_ERR("unable to add uart_serial callback!");
   10a66:	4b5b      	ldr	r3, [pc, #364]	; (10bd4 <serial_enable+0x24c>)
   10a68:	9307      	str	r3, [sp, #28]
   10a6a:	2302      	movs	r3, #2
   10a6c:	f88d 3004 	strb.w	r3, [sp, #4]
   10a70:	2300      	movs	r3, #0
   10a72:	f88d 3005 	strb.w	r3, [sp, #5]
   10a76:	f88d 3006 	strb.w	r3, [sp, #6]
   10a7a:	f88d 3007 	strb.w	r3, [sp, #7]
   10a7e:	9a01      	ldr	r2, [sp, #4]
   10a80:	9206      	str	r2, [sp, #24]
   10a82:	4619      	mov	r1, r3
   10a84:	f363 0100 	bfi	r1, r3, #0, #1
   10a88:	f363 0141 	bfi	r1, r3, #1, #1
   10a8c:	f363 0182 	bfi	r1, r3, #2, #1
   10a90:	f363 01c5 	bfi	r1, r3, #3, #3
   10a94:	2201      	movs	r2, #1
   10a96:	f362 1188 	bfi	r1, r2, #6, #3
   10a9a:	2208      	movs	r2, #8
   10a9c:	f362 2153 	bfi	r1, r2, #9, #11
   10aa0:	f363 511f 	bfi	r1, r3, #20, #12
   10aa4:	aa06      	add	r2, sp, #24
   10aa6:	4849      	ldr	r0, [pc, #292]	; (10bcc <serial_enable+0x244>)
   10aa8:	f003 fb28 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   10aac:	e778      	b.n	109a0 <serial_enable+0x18>
		ret_code = ble_serial_set_end_character_list(end_character_list, end_character_count);
   10aae:	4b42      	ldr	r3, [pc, #264]	; (10bb8 <serial_enable+0x230>)
   10ab0:	6819      	ldr	r1, [r3, #0]
   10ab2:	4b42      	ldr	r3, [pc, #264]	; (10bbc <serial_enable+0x234>)
   10ab4:	6818      	ldr	r0, [r3, #0]
   10ab6:	f001 fef9 	bl	128ac <ble_serial_set_end_character_list>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10aba:	4605      	mov	r5, r0
   10abc:	b978      	cbnz	r0, 10ade <serial_enable+0x156>
		ret_code = ble_serial_enable();
   10abe:	f001 fbe7 	bl	12290 <ble_serial_enable>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10ac2:	4605      	mov	r5, r0
   10ac4:	bb78      	cbnz	r0, 10b26 <serial_enable+0x19e>
		ret_code = ble_serial_add_callback(ble_serial_callback);
   10ac6:	4844      	ldr	r0, [pc, #272]	; (10bd8 <serial_enable+0x250>)
   10ac8:	f001 fb70 	bl	121ac <ble_serial_add_callback>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10acc:	4605      	mov	r5, r0
   10ace:	2800      	cmp	r0, #0
   10ad0:	d14d      	bne.n	10b6e <serial_enable+0x1e6>
		enabled_serial_types |= SERIAL_TYPE_BLE;
   10ad2:	4a3c      	ldr	r2, [pc, #240]	; (10bc4 <serial_enable+0x23c>)
   10ad4:	6813      	ldr	r3, [r2, #0]
   10ad6:	f043 0302 	orr.w	r3, r3, #2
   10ada:	6013      	str	r3, [r2, #0]
   10adc:	e760      	b.n	109a0 <serial_enable+0x18>
			LOG_ERR("unable to set end-character-list for ble_serial!");
   10ade:	4b3f      	ldr	r3, [pc, #252]	; (10bdc <serial_enable+0x254>)
   10ae0:	9325      	str	r3, [sp, #148]	; 0x94
   10ae2:	2302      	movs	r3, #2
   10ae4:	f88d 3004 	strb.w	r3, [sp, #4]
   10ae8:	2300      	movs	r3, #0
   10aea:	f88d 3005 	strb.w	r3, [sp, #5]
   10aee:	f88d 3006 	strb.w	r3, [sp, #6]
   10af2:	f88d 3007 	strb.w	r3, [sp, #7]
   10af6:	9a01      	ldr	r2, [sp, #4]
   10af8:	9224      	str	r2, [sp, #144]	; 0x90
   10afa:	4619      	mov	r1, r3
   10afc:	f363 0100 	bfi	r1, r3, #0, #1
   10b00:	f363 0141 	bfi	r1, r3, #1, #1
   10b04:	f363 0182 	bfi	r1, r3, #2, #1
   10b08:	f363 01c5 	bfi	r1, r3, #3, #3
   10b0c:	2201      	movs	r2, #1
   10b0e:	f362 1188 	bfi	r1, r2, #6, #3
   10b12:	2208      	movs	r2, #8
   10b14:	f362 2153 	bfi	r1, r2, #9, #11
   10b18:	f363 511f 	bfi	r1, r3, #20, #12
   10b1c:	aa24      	add	r2, sp, #144	; 0x90
   10b1e:	482b      	ldr	r0, [pc, #172]	; (10bcc <serial_enable+0x244>)
   10b20:	f003 faec 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   10b24:	e73c      	b.n	109a0 <serial_enable+0x18>
			LOG_ERR("unable to enable ble_serial!");
   10b26:	4b2e      	ldr	r3, [pc, #184]	; (10be0 <serial_enable+0x258>)
   10b28:	931f      	str	r3, [sp, #124]	; 0x7c
   10b2a:	2302      	movs	r3, #2
   10b2c:	f88d 3004 	strb.w	r3, [sp, #4]
   10b30:	2300      	movs	r3, #0
   10b32:	f88d 3005 	strb.w	r3, [sp, #5]
   10b36:	f88d 3006 	strb.w	r3, [sp, #6]
   10b3a:	f88d 3007 	strb.w	r3, [sp, #7]
   10b3e:	9a01      	ldr	r2, [sp, #4]
   10b40:	921e      	str	r2, [sp, #120]	; 0x78
   10b42:	4619      	mov	r1, r3
   10b44:	f363 0100 	bfi	r1, r3, #0, #1
   10b48:	f363 0141 	bfi	r1, r3, #1, #1
   10b4c:	f363 0182 	bfi	r1, r3, #2, #1
   10b50:	f363 01c5 	bfi	r1, r3, #3, #3
   10b54:	2201      	movs	r2, #1
   10b56:	f362 1188 	bfi	r1, r2, #6, #3
   10b5a:	2208      	movs	r2, #8
   10b5c:	f362 2153 	bfi	r1, r2, #9, #11
   10b60:	f363 511f 	bfi	r1, r3, #20, #12
   10b64:	aa1e      	add	r2, sp, #120	; 0x78
   10b66:	4819      	ldr	r0, [pc, #100]	; (10bcc <serial_enable+0x244>)
   10b68:	f003 fac8 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   10b6c:	e718      	b.n	109a0 <serial_enable+0x18>
			LOG_ERR("unable to add ble_serial callback!");
   10b6e:	4b1d      	ldr	r3, [pc, #116]	; (10be4 <serial_enable+0x25c>)
   10b70:	9319      	str	r3, [sp, #100]	; 0x64
   10b72:	2302      	movs	r3, #2
   10b74:	f88d 3004 	strb.w	r3, [sp, #4]
   10b78:	2300      	movs	r3, #0
   10b7a:	f88d 3005 	strb.w	r3, [sp, #5]
   10b7e:	f88d 3006 	strb.w	r3, [sp, #6]
   10b82:	f88d 3007 	strb.w	r3, [sp, #7]
   10b86:	9a01      	ldr	r2, [sp, #4]
   10b88:	9218      	str	r2, [sp, #96]	; 0x60
   10b8a:	4619      	mov	r1, r3
   10b8c:	f363 0100 	bfi	r1, r3, #0, #1
   10b90:	f363 0141 	bfi	r1, r3, #1, #1
   10b94:	f363 0182 	bfi	r1, r3, #2, #1
   10b98:	f363 01c5 	bfi	r1, r3, #3, #3
   10b9c:	2201      	movs	r2, #1
   10b9e:	f362 1188 	bfi	r1, r2, #6, #3
   10ba2:	2208      	movs	r2, #8
   10ba4:	f362 2153 	bfi	r1, r2, #9, #11
   10ba8:	f363 511f 	bfi	r1, r3, #20, #12
   10bac:	aa18      	add	r2, sp, #96	; 0x60
   10bae:	4807      	ldr	r0, [pc, #28]	; (10bcc <serial_enable+0x244>)
   10bb0:	f003 faa4 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   10bb4:	e6f4      	b.n	109a0 <serial_enable+0x18>
   10bb6:	bf00      	nop
   10bb8:	20003060 	.word	0x20003060
   10bbc:	20003064 	.word	0x20003064
   10bc0:	00010849 	.word	0x00010849
   10bc4:	20003068 	.word	0x20003068
   10bc8:	00031f2c 	.word	0x00031f2c
   10bcc:	00031d9c 	.word	0x00031d9c
   10bd0:	00031f60 	.word	0x00031f60
   10bd4:	00031f80 	.word	0x00031f80
   10bd8:	000108e9 	.word	0x000108e9
   10bdc:	00031fa4 	.word	0x00031fa4
   10be0:	00031fd8 	.word	0x00031fd8
   10be4:	00031ff8 	.word	0x00031ff8

00010be8 <serial_get_line>:
	
	return ret_code;
}

serial_line_t const * serial_get_line(k_timeout_t timeout)
{
   10be8:	b5b0      	push	{r4, r5, r7, lr}
   10bea:	b082      	sub	sp, #8
   10bec:	af00      	add	r7, sp, #0
   10bee:	4605      	mov	r5, r0
   10bf0:	460c      	mov	r4, r1
   10bf2:	e00c      	b.n	10c0e <serial_get_line+0x26>
	{
		serial_line_t const * p_line = &empty_line;
		
		if (enabled_serial_types & SERIAL_TYPE_UART)
		{
			p_line = uart_serial_get_line(K_NO_WAIT);
   10bf4:	2000      	movs	r0, #0
   10bf6:	2100      	movs	r1, #0
   10bf8:	f001 f800 	bl	11bfc <uart_serial_get_line>
			if (p_line->len > 0) return p_line;
   10bfc:	6803      	ldr	r3, [r0, #0]
   10bfe:	b15b      	cbz	r3, 10c18 <serial_get_line+0x30>
   10c00:	e051      	b.n	10ca6 <serial_get_line+0xbe>
	return z_impl_k_sem_take(sem, timeout);
   10c02:	462a      	mov	r2, r5
   10c04:	4623      	mov	r3, r4
   10c06:	482c      	ldr	r0, [pc, #176]	; (10cb8 <serial_get_line+0xd0>)
   10c08:	f015 fb58 	bl	262bc <z_impl_k_sem_take>
		{
			p_line = ble_serial_get_line(K_NO_WAIT);
			if (p_line->len > 0) return p_line;
		}
		
		if (k_sem_take(&sem_wait_for_data, timeout) != 0)
   10c0c:	b988      	cbnz	r0, 10c32 <serial_get_line+0x4a>
		if (enabled_serial_types & SERIAL_TYPE_UART)
   10c0e:	4b2b      	ldr	r3, [pc, #172]	; (10cbc <serial_get_line+0xd4>)
   10c10:	681b      	ldr	r3, [r3, #0]
   10c12:	f013 0f01 	tst.w	r3, #1
   10c16:	d1ed      	bne.n	10bf4 <serial_get_line+0xc>
		if (enabled_serial_types & SERIAL_TYPE_BLE)
   10c18:	4b28      	ldr	r3, [pc, #160]	; (10cbc <serial_get_line+0xd4>)
   10c1a:	681b      	ldr	r3, [r3, #0]
   10c1c:	f013 0f02 	tst.w	r3, #2
   10c20:	d0ef      	beq.n	10c02 <serial_get_line+0x1a>
			p_line = ble_serial_get_line(K_NO_WAIT);
   10c22:	2000      	movs	r0, #0
   10c24:	2100      	movs	r1, #0
   10c26:	f001 fcb3 	bl	12590 <ble_serial_get_line>
			if (p_line->len > 0) return p_line;
   10c2a:	6803      	ldr	r3, [r0, #0]
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d0e8      	beq.n	10c02 <serial_get_line+0x1a>
   10c30:	e039      	b.n	10ca6 <serial_get_line+0xbe>
		{
			LOG_DBG("timeout reached");
   10c32:	466d      	mov	r5, sp
   10c34:	b088      	sub	sp, #32
   10c36:	466b      	mov	r3, sp
   10c38:	f113 0210 	adds.w	r2, r3, #16
   10c3c:	d036      	beq.n	10cac <serial_get_line+0xc4>
   10c3e:	210c      	movs	r1, #12
   10c40:	b142      	cbz	r2, 10c54 <serial_get_line+0x6c>
   10c42:	4608      	mov	r0, r1
   10c44:	2904      	cmp	r1, #4
   10c46:	dd01      	ble.n	10c4c <serial_get_line+0x64>
   10c48:	4c1d      	ldr	r4, [pc, #116]	; (10cc0 <serial_get_line+0xd8>)
   10c4a:	615c      	str	r4, [r3, #20]
   10c4c:	2808      	cmp	r0, #8
   10c4e:	dd01      	ble.n	10c54 <serial_get_line+0x6c>
   10c50:	481c      	ldr	r0, [pc, #112]	; (10cc4 <serial_get_line+0xdc>)
   10c52:	6198      	str	r0, [r3, #24]
   10c54:	290b      	cmp	r1, #11
   10c56:	dd2c      	ble.n	10cb2 <serial_get_line+0xca>
   10c58:	240c      	movs	r4, #12
   10c5a:	b13a      	cbz	r2, 10c6c <serial_get_line+0x84>
   10c5c:	2103      	movs	r1, #3
   10c5e:	7139      	strb	r1, [r7, #4]
   10c60:	2100      	movs	r1, #0
   10c62:	7179      	strb	r1, [r7, #5]
   10c64:	71b9      	strb	r1, [r7, #6]
   10c66:	71f9      	strb	r1, [r7, #7]
   10c68:	6878      	ldr	r0, [r7, #4]
   10c6a:	6118      	str	r0, [r3, #16]
   10c6c:	2100      	movs	r1, #0
   10c6e:	f36f 0100 	bfc	r1, #0, #1
   10c72:	f36f 0141 	bfc	r1, #1, #1
   10c76:	f36f 0182 	bfc	r1, #2, #1
   10c7a:	f36f 01c5 	bfc	r1, #3, #3
   10c7e:	2304      	movs	r3, #4
   10c80:	f363 1188 	bfi	r1, r3, #6, #3
   10c84:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10c88:	f363 2153 	bfi	r1, r3, #9, #11
   10c8c:	f36f 511f 	bfc	r1, #20, #12
   10c90:	2300      	movs	r3, #0
   10c92:	480d      	ldr	r0, [pc, #52]	; (10cc8 <serial_get_line+0xe0>)
   10c94:	f003 fa32 	bl	140fc <z_impl_z_log_msg_static_create>
   10c98:	46ad      	mov	sp, r5
	return z_impl_k_sleep(timeout);
   10c9a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10c9e:	2100      	movs	r1, #0
   10ca0:	f016 f83c 	bl	26d1c <z_impl_k_sleep>
			k_sleep(K_MSEC(10));
			return &empty_line;
   10ca4:	4809      	ldr	r0, [pc, #36]	; (10ccc <serial_get_line+0xe4>)
		}
		
	}
	
}
   10ca6:	3708      	adds	r7, #8
   10ca8:	46bd      	mov	sp, r7
   10caa:	bdb0      	pop	{r4, r5, r7, pc}
			LOG_DBG("timeout reached");
   10cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10cb0:	e7c6      	b.n	10c40 <serial_get_line+0x58>
   10cb2:	f06f 041b 	mvn.w	r4, #27
   10cb6:	e7d0      	b.n	10c5a <serial_get_line+0x72>
   10cb8:	20000aa0 	.word	0x20000aa0
   10cbc:	20003068 	.word	0x20003068
   10cc0:	0003201c 	.word	0x0003201c
   10cc4:	000320bc 	.word	0x000320bc
   10cc8:	00031d9c 	.word	0x00031d9c
   10ccc:	20003058 	.word	0x20003058

00010cd0 <serial_send>:

serial_ret_code_t serial_send(k_timeout_t timeout, char const * p_data, int len)
{
   10cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cd4:	b082      	sub	sp, #8
   10cd6:	af00      	add	r7, sp, #0
   10cd8:	4605      	mov	r5, r0
   10cda:	460c      	mov	r4, r1
   10cdc:	4616      	mov	r6, r2
   10cde:	4698      	mov	r8, r3
	serial_ret_code_t ret_code = SERIAL_RET_CODE_ERROR_UNKNOWN;
	
	if (enabled_serial_types & SERIAL_TYPE_UART)
   10ce0:	4b4c      	ldr	r3, [pc, #304]	; (10e14 <serial_send+0x144>)
   10ce2:	681b      	ldr	r3, [r3, #0]
   10ce4:	f013 0f01 	tst.w	r3, #1
   10ce8:	d10b      	bne.n	10d02 <serial_send+0x32>
	serial_ret_code_t ret_code = SERIAL_RET_CODE_ERROR_UNKNOWN;
   10cea:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		{
			LOG_ERR("unable to send over uart_serial (code: %d)", ret_code);
		}
	}
	
	if (enabled_serial_types & SERIAL_TYPE_BLE)
   10cee:	4b49      	ldr	r3, [pc, #292]	; (10e14 <serial_send+0x144>)
   10cf0:	681b      	ldr	r3, [r3, #0]
   10cf2:	f013 0f02 	tst.w	r3, #2
   10cf6:	d149      	bne.n	10d8c <serial_send+0xbc>
			LOG_ERR("unable to send over ble_serial (code: %d)", ret_code);
		}
	}
	
	return ret_code;
}
   10cf8:	4648      	mov	r0, r9
   10cfa:	3708      	adds	r7, #8
   10cfc:	46bd      	mov	sp, r7
   10cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret_code = uart_serial_send(timeout, p_data, len);
   10d02:	4643      	mov	r3, r8
   10d04:	f001 f81e 	bl	11d44 <uart_serial_send>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10d08:	4681      	mov	r9, r0
   10d0a:	2800      	cmp	r0, #0
   10d0c:	d0ef      	beq.n	10cee <serial_send+0x1e>
			LOG_ERR("unable to send over uart_serial (code: %d)", ret_code);
   10d0e:	4684      	mov	ip, r0
   10d10:	46ea      	mov	sl, sp
   10d12:	b088      	sub	sp, #32
   10d14:	466b      	mov	r3, sp
   10d16:	f113 0210 	adds.w	r2, r3, #16
   10d1a:	d031      	beq.n	10d80 <serial_send+0xb0>
   10d1c:	210c      	movs	r1, #12
   10d1e:	b152      	cbz	r2, 10d36 <serial_send+0x66>
   10d20:	4608      	mov	r0, r1
   10d22:	2904      	cmp	r1, #4
   10d24:	dd03      	ble.n	10d2e <serial_send+0x5e>
   10d26:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 10e18 <serial_send+0x148>
   10d2a:	f8c3 e014 	str.w	lr, [r3, #20]
   10d2e:	2808      	cmp	r0, #8
   10d30:	dd01      	ble.n	10d36 <serial_send+0x66>
   10d32:	f8c3 c018 	str.w	ip, [r3, #24]
   10d36:	290b      	cmp	r1, #11
   10d38:	dd25      	ble.n	10d86 <serial_send+0xb6>
   10d3a:	f04f 0c0c 	mov.w	ip, #12
   10d3e:	b13a      	cbz	r2, 10d50 <serial_send+0x80>
   10d40:	2103      	movs	r1, #3
   10d42:	7139      	strb	r1, [r7, #4]
   10d44:	2100      	movs	r1, #0
   10d46:	7179      	strb	r1, [r7, #5]
   10d48:	71b9      	strb	r1, [r7, #6]
   10d4a:	71f9      	strb	r1, [r7, #7]
   10d4c:	6878      	ldr	r0, [r7, #4]
   10d4e:	6118      	str	r0, [r3, #16]
   10d50:	2100      	movs	r1, #0
   10d52:	f36f 0100 	bfc	r1, #0, #1
   10d56:	f36f 0141 	bfc	r1, #1, #1
   10d5a:	f36f 0182 	bfc	r1, #2, #1
   10d5e:	f36f 01c5 	bfc	r1, #3, #3
   10d62:	2301      	movs	r3, #1
   10d64:	f363 1188 	bfi	r1, r3, #6, #3
   10d68:	f3cc 030a 	ubfx	r3, ip, #0, #11
   10d6c:	f363 2153 	bfi	r1, r3, #9, #11
   10d70:	f36f 511f 	bfc	r1, #20, #12
   10d74:	2300      	movs	r3, #0
   10d76:	4829      	ldr	r0, [pc, #164]	; (10e1c <serial_send+0x14c>)
   10d78:	f003 f9c0 	bl	140fc <z_impl_z_log_msg_static_create>
   10d7c:	46d5      	mov	sp, sl
   10d7e:	e7b6      	b.n	10cee <serial_send+0x1e>
   10d80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10d84:	e7cb      	b.n	10d1e <serial_send+0x4e>
   10d86:	f06f 0c1b 	mvn.w	ip, #27
   10d8a:	e7d8      	b.n	10d3e <serial_send+0x6e>
		ret_code = ble_serial_send(timeout, p_data, len);
   10d8c:	4643      	mov	r3, r8
   10d8e:	4632      	mov	r2, r6
   10d90:	4628      	mov	r0, r5
   10d92:	4621      	mov	r1, r4
   10d94:	f001 fc5a 	bl	1264c <ble_serial_send>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10d98:	4681      	mov	r9, r0
   10d9a:	2800      	cmp	r0, #0
   10d9c:	d0ac      	beq.n	10cf8 <serial_send+0x28>
			LOG_ERR("unable to send over ble_serial (code: %d)", ret_code);
   10d9e:	4604      	mov	r4, r0
   10da0:	466d      	mov	r5, sp
   10da2:	b088      	sub	sp, #32
   10da4:	466b      	mov	r3, sp
   10da6:	f113 0210 	adds.w	r2, r3, #16
   10daa:	d02d      	beq.n	10e08 <serial_send+0x138>
   10dac:	210c      	movs	r1, #12
   10dae:	b13a      	cbz	r2, 10dc0 <serial_send+0xf0>
   10db0:	4608      	mov	r0, r1
   10db2:	2904      	cmp	r1, #4
   10db4:	dd01      	ble.n	10dba <serial_send+0xea>
   10db6:	4e1a      	ldr	r6, [pc, #104]	; (10e20 <serial_send+0x150>)
   10db8:	615e      	str	r6, [r3, #20]
   10dba:	2808      	cmp	r0, #8
   10dbc:	dd00      	ble.n	10dc0 <serial_send+0xf0>
   10dbe:	619c      	str	r4, [r3, #24]
   10dc0:	290b      	cmp	r1, #11
   10dc2:	dd24      	ble.n	10e0e <serial_send+0x13e>
   10dc4:	240c      	movs	r4, #12
   10dc6:	b13a      	cbz	r2, 10dd8 <serial_send+0x108>
   10dc8:	2103      	movs	r1, #3
   10dca:	7139      	strb	r1, [r7, #4]
   10dcc:	2100      	movs	r1, #0
   10dce:	7179      	strb	r1, [r7, #5]
   10dd0:	71b9      	strb	r1, [r7, #6]
   10dd2:	71f9      	strb	r1, [r7, #7]
   10dd4:	6878      	ldr	r0, [r7, #4]
   10dd6:	6118      	str	r0, [r3, #16]
   10dd8:	2100      	movs	r1, #0
   10dda:	f36f 0100 	bfc	r1, #0, #1
   10dde:	f36f 0141 	bfc	r1, #1, #1
   10de2:	f36f 0182 	bfc	r1, #2, #1
   10de6:	f36f 01c5 	bfc	r1, #3, #3
   10dea:	2301      	movs	r3, #1
   10dec:	f363 1188 	bfi	r1, r3, #6, #3
   10df0:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10df4:	f363 2153 	bfi	r1, r3, #9, #11
   10df8:	f36f 511f 	bfc	r1, #20, #12
   10dfc:	2300      	movs	r3, #0
   10dfe:	4807      	ldr	r0, [pc, #28]	; (10e1c <serial_send+0x14c>)
   10e00:	f003 f97c 	bl	140fc <z_impl_z_log_msg_static_create>
   10e04:	46ad      	mov	sp, r5
   10e06:	e777      	b.n	10cf8 <serial_send+0x28>
   10e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10e0c:	e7cf      	b.n	10dae <serial_send+0xde>
   10e0e:	f06f 041b 	mvn.w	r4, #27
   10e12:	e7d8      	b.n	10dc6 <serial_send+0xf6>
   10e14:	20003068 	.word	0x20003068
   10e18:	00032030 	.word	0x00032030
   10e1c:	00031d9c 	.word	0x00031d9c
   10e20:	0003205c 	.word	0x0003205c

00010e24 <serial_sendf>:

serial_ret_code_t serial_sendf(k_timeout_t timeout, char const * format, ...)
{
   10e24:	b40c      	push	{r2, r3}
   10e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e2a:	b083      	sub	sp, #12
   10e2c:	af00      	add	r7, sp, #0
   10e2e:	4605      	mov	r5, r0
   10e30:	460c      	mov	r4, r1
   10e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
   10e36:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list args;
	va_start(args, format);
   10e3a:	607b      	str	r3, [r7, #4]
	serial_ret_code_t ret_code = SERIAL_RET_CODE_ERROR_UNKNOWN;
	
	if (enabled_serial_types & SERIAL_TYPE_UART)
   10e3c:	4b4f      	ldr	r3, [pc, #316]	; (10f7c <serial_sendf+0x158>)
   10e3e:	681b      	ldr	r3, [r3, #0]
   10e40:	f013 0f01 	tst.w	r3, #1
   10e44:	d10d      	bne.n	10e62 <serial_sendf+0x3e>
	serial_ret_code_t ret_code = SERIAL_RET_CODE_ERROR_UNKNOWN;
   10e46:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		{
			LOG_ERR("unable to send over uart_serial (code: %d)", ret_code);
		}
	}
	
	if (enabled_serial_types & SERIAL_TYPE_BLE)
   10e4a:	4b4c      	ldr	r3, [pc, #304]	; (10f7c <serial_sendf+0x158>)
   10e4c:	681b      	ldr	r3, [r3, #0]
   10e4e:	f013 0f02 	tst.w	r3, #2
   10e52:	d14c      	bne.n	10eee <serial_sendf+0xca>
		}
	}
	
	va_end(args);
	return ret_code;
}
   10e54:	4630      	mov	r0, r6
   10e56:	370c      	adds	r7, #12
   10e58:	46bd      	mov	sp, r7
   10e5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e5e:	b002      	add	sp, #8
   10e60:	4770      	bx	lr
		ret_code = uart_serial_vsendf(timeout, format, args);
   10e62:	687b      	ldr	r3, [r7, #4]
   10e64:	4642      	mov	r2, r8
   10e66:	f000 ffc9 	bl	11dfc <uart_serial_vsendf>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10e6a:	4606      	mov	r6, r0
   10e6c:	2800      	cmp	r0, #0
   10e6e:	d0ec      	beq.n	10e4a <serial_sendf+0x26>
			LOG_ERR("unable to send over uart_serial (code: %d)", ret_code);
   10e70:	4684      	mov	ip, r0
   10e72:	46e9      	mov	r9, sp
   10e74:	b088      	sub	sp, #32
   10e76:	466b      	mov	r3, sp
   10e78:	f113 0210 	adds.w	r2, r3, #16
   10e7c:	d031      	beq.n	10ee2 <serial_sendf+0xbe>
   10e7e:	210c      	movs	r1, #12
   10e80:	b152      	cbz	r2, 10e98 <serial_sendf+0x74>
   10e82:	4608      	mov	r0, r1
   10e84:	2904      	cmp	r1, #4
   10e86:	dd03      	ble.n	10e90 <serial_sendf+0x6c>
   10e88:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 10f80 <serial_sendf+0x15c>
   10e8c:	f8c3 e014 	str.w	lr, [r3, #20]
   10e90:	2808      	cmp	r0, #8
   10e92:	dd01      	ble.n	10e98 <serial_sendf+0x74>
   10e94:	f8c3 c018 	str.w	ip, [r3, #24]
   10e98:	290b      	cmp	r1, #11
   10e9a:	dd25      	ble.n	10ee8 <serial_sendf+0xc4>
   10e9c:	f04f 0c0c 	mov.w	ip, #12
   10ea0:	b13a      	cbz	r2, 10eb2 <serial_sendf+0x8e>
   10ea2:	2103      	movs	r1, #3
   10ea4:	7039      	strb	r1, [r7, #0]
   10ea6:	2100      	movs	r1, #0
   10ea8:	7079      	strb	r1, [r7, #1]
   10eaa:	70b9      	strb	r1, [r7, #2]
   10eac:	70f9      	strb	r1, [r7, #3]
   10eae:	6838      	ldr	r0, [r7, #0]
   10eb0:	6118      	str	r0, [r3, #16]
   10eb2:	2100      	movs	r1, #0
   10eb4:	f36f 0100 	bfc	r1, #0, #1
   10eb8:	f36f 0141 	bfc	r1, #1, #1
   10ebc:	f36f 0182 	bfc	r1, #2, #1
   10ec0:	f36f 01c5 	bfc	r1, #3, #3
   10ec4:	2301      	movs	r3, #1
   10ec6:	f363 1188 	bfi	r1, r3, #6, #3
   10eca:	f3cc 030a 	ubfx	r3, ip, #0, #11
   10ece:	f363 2153 	bfi	r1, r3, #9, #11
   10ed2:	f36f 511f 	bfc	r1, #20, #12
   10ed6:	2300      	movs	r3, #0
   10ed8:	482a      	ldr	r0, [pc, #168]	; (10f84 <serial_sendf+0x160>)
   10eda:	f003 f90f 	bl	140fc <z_impl_z_log_msg_static_create>
   10ede:	46cd      	mov	sp, r9
   10ee0:	e7b3      	b.n	10e4a <serial_sendf+0x26>
   10ee2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10ee6:	e7cb      	b.n	10e80 <serial_sendf+0x5c>
   10ee8:	f06f 0c1b 	mvn.w	ip, #27
   10eec:	e7d8      	b.n	10ea0 <serial_sendf+0x7c>
		ret_code = ble_serial_vsendf(timeout, format, args);
   10eee:	687b      	ldr	r3, [r7, #4]
   10ef0:	4642      	mov	r2, r8
   10ef2:	4628      	mov	r0, r5
   10ef4:	4621      	mov	r1, r4
   10ef6:	f001 fc87 	bl	12808 <ble_serial_vsendf>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10efa:	4606      	mov	r6, r0
   10efc:	2800      	cmp	r0, #0
   10efe:	d0a9      	beq.n	10e54 <serial_sendf+0x30>
			LOG_ERR("unable to send over ble_serial (code: %d)", ret_code);
   10f00:	4604      	mov	r4, r0
   10f02:	466d      	mov	r5, sp
   10f04:	b088      	sub	sp, #32
   10f06:	466b      	mov	r3, sp
   10f08:	f113 0210 	adds.w	r2, r3, #16
   10f0c:	d02f      	beq.n	10f6e <serial_sendf+0x14a>
   10f0e:	210c      	movs	r1, #12
   10f10:	b14a      	cbz	r2, 10f26 <serial_sendf+0x102>
   10f12:	4608      	mov	r0, r1
   10f14:	2904      	cmp	r1, #4
   10f16:	dd03      	ble.n	10f20 <serial_sendf+0xfc>
   10f18:	f8df c06c 	ldr.w	ip, [pc, #108]	; 10f88 <serial_sendf+0x164>
   10f1c:	f8c3 c014 	str.w	ip, [r3, #20]
   10f20:	2808      	cmp	r0, #8
   10f22:	dd00      	ble.n	10f26 <serial_sendf+0x102>
   10f24:	619c      	str	r4, [r3, #24]
   10f26:	290b      	cmp	r1, #11
   10f28:	dd24      	ble.n	10f74 <serial_sendf+0x150>
   10f2a:	240c      	movs	r4, #12
   10f2c:	b13a      	cbz	r2, 10f3e <serial_sendf+0x11a>
   10f2e:	2103      	movs	r1, #3
   10f30:	7039      	strb	r1, [r7, #0]
   10f32:	2100      	movs	r1, #0
   10f34:	7079      	strb	r1, [r7, #1]
   10f36:	70b9      	strb	r1, [r7, #2]
   10f38:	70f9      	strb	r1, [r7, #3]
   10f3a:	6838      	ldr	r0, [r7, #0]
   10f3c:	6118      	str	r0, [r3, #16]
   10f3e:	2100      	movs	r1, #0
   10f40:	f36f 0100 	bfc	r1, #0, #1
   10f44:	f36f 0141 	bfc	r1, #1, #1
   10f48:	f36f 0182 	bfc	r1, #2, #1
   10f4c:	f36f 01c5 	bfc	r1, #3, #3
   10f50:	2301      	movs	r3, #1
   10f52:	f363 1188 	bfi	r1, r3, #6, #3
   10f56:	f3c4 030a 	ubfx	r3, r4, #0, #11
   10f5a:	f363 2153 	bfi	r1, r3, #9, #11
   10f5e:	f36f 511f 	bfc	r1, #20, #12
   10f62:	2300      	movs	r3, #0
   10f64:	4807      	ldr	r0, [pc, #28]	; (10f84 <serial_sendf+0x160>)
   10f66:	f003 f8c9 	bl	140fc <z_impl_z_log_msg_static_create>
   10f6a:	46ad      	mov	sp, r5
   10f6c:	e772      	b.n	10e54 <serial_sendf+0x30>
   10f6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10f72:	e7cd      	b.n	10f10 <serial_sendf+0xec>
   10f74:	f06f 041b 	mvn.w	r4, #27
   10f78:	e7d8      	b.n	10f2c <serial_sendf+0x108>
   10f7a:	bf00      	nop
   10f7c:	20003068 	.word	0x20003068
   10f80:	00032030 	.word	0x00032030
   10f84:	00031d9c 	.word	0x00031d9c
   10f88:	0003205c 	.word	0x0003205c

00010f8c <serial_set_end_character_list>:

serial_ret_code_t serial_set_end_character_list(char const * p_list, int len)
{
   10f8c:	b570      	push	{r4, r5, r6, lr}
   10f8e:	b08e      	sub	sp, #56	; 0x38
   10f90:	4604      	mov	r4, r0
   10f92:	460d      	mov	r5, r1
	serial_ret_code_t ret_code = SERIAL_RET_CODE_SUCCESS;
	
	end_character_list = p_list;
   10f94:	4b32      	ldr	r3, [pc, #200]	; (11060 <serial_set_end_character_list+0xd4>)
   10f96:	6018      	str	r0, [r3, #0]
	end_character_count = len;
   10f98:	4b32      	ldr	r3, [pc, #200]	; (11064 <serial_set_end_character_list+0xd8>)
   10f9a:	6019      	str	r1, [r3, #0]
	
	if (enabled_serial_types & SERIAL_TYPE_UART)
   10f9c:	4b32      	ldr	r3, [pc, #200]	; (11068 <serial_set_end_character_list+0xdc>)
   10f9e:	681b      	ldr	r3, [r3, #0]
   10fa0:	f013 0f01 	tst.w	r3, #1
   10fa4:	d108      	bne.n	10fb8 <serial_set_end_character_list+0x2c>
	serial_ret_code_t ret_code = SERIAL_RET_CODE_SUCCESS;
   10fa6:	2600      	movs	r6, #0
			LOG_ERR("unable to update uart_serial end-character list!");
			return ret_code;
		}
	}
	
	if (enabled_serial_types & SERIAL_TYPE_BLE)
   10fa8:	4b2f      	ldr	r3, [pc, #188]	; (11068 <serial_set_end_character_list+0xdc>)
   10faa:	681b      	ldr	r3, [r3, #0]
   10fac:	f013 0f02 	tst.w	r3, #2
   10fb0:	d12b      	bne.n	1100a <serial_set_end_character_list+0x7e>
			return ret_code;
		}
	}
	
	return ret_code;
   10fb2:	4630      	mov	r0, r6
   10fb4:	b00e      	add	sp, #56	; 0x38
   10fb6:	bd70      	pop	{r4, r5, r6, pc}
		ret_code = uart_serial_set_end_character_list(p_list, len);
   10fb8:	f000 ff72 	bl	11ea0 <uart_serial_set_end_character_list>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   10fbc:	4606      	mov	r6, r0
   10fbe:	2800      	cmp	r0, #0
   10fc0:	d0f2      	beq.n	10fa8 <serial_set_end_character_list+0x1c>
			LOG_ERR("unable to update uart_serial end-character list!");
   10fc2:	4b2a      	ldr	r3, [pc, #168]	; (1106c <serial_set_end_character_list+0xe0>)
   10fc4:	9307      	str	r3, [sp, #28]
   10fc6:	2302      	movs	r3, #2
   10fc8:	f88d 3004 	strb.w	r3, [sp, #4]
   10fcc:	2300      	movs	r3, #0
   10fce:	f88d 3005 	strb.w	r3, [sp, #5]
   10fd2:	f88d 3006 	strb.w	r3, [sp, #6]
   10fd6:	f88d 3007 	strb.w	r3, [sp, #7]
   10fda:	9a01      	ldr	r2, [sp, #4]
   10fdc:	9206      	str	r2, [sp, #24]
   10fde:	4619      	mov	r1, r3
   10fe0:	f363 0100 	bfi	r1, r3, #0, #1
   10fe4:	f363 0141 	bfi	r1, r3, #1, #1
   10fe8:	f363 0182 	bfi	r1, r3, #2, #1
   10fec:	f363 01c5 	bfi	r1, r3, #3, #3
   10ff0:	2201      	movs	r2, #1
   10ff2:	f362 1188 	bfi	r1, r2, #6, #3
   10ff6:	2208      	movs	r2, #8
   10ff8:	f362 2153 	bfi	r1, r2, #9, #11
   10ffc:	f363 511f 	bfi	r1, r3, #20, #12
   11000:	aa06      	add	r2, sp, #24
   11002:	481b      	ldr	r0, [pc, #108]	; (11070 <serial_set_end_character_list+0xe4>)
   11004:	f003 f87a 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   11008:	e7d3      	b.n	10fb2 <serial_set_end_character_list+0x26>
		ret_code = ble_serial_set_end_character_list(p_list, len);
   1100a:	4629      	mov	r1, r5
   1100c:	4620      	mov	r0, r4
   1100e:	f001 fc4d 	bl	128ac <ble_serial_set_end_character_list>
		if (ret_code != SERIAL_RET_CODE_SUCCESS)
   11012:	4606      	mov	r6, r0
   11014:	2800      	cmp	r0, #0
   11016:	d0cc      	beq.n	10fb2 <serial_set_end_character_list+0x26>
			LOG_ERR("unable to update uart_serial end-character list!");
   11018:	4b14      	ldr	r3, [pc, #80]	; (1106c <serial_set_end_character_list+0xe0>)
   1101a:	930d      	str	r3, [sp, #52]	; 0x34
   1101c:	2302      	movs	r3, #2
   1101e:	f88d 3004 	strb.w	r3, [sp, #4]
   11022:	2300      	movs	r3, #0
   11024:	f88d 3005 	strb.w	r3, [sp, #5]
   11028:	f88d 3006 	strb.w	r3, [sp, #6]
   1102c:	f88d 3007 	strb.w	r3, [sp, #7]
   11030:	9a01      	ldr	r2, [sp, #4]
   11032:	920c      	str	r2, [sp, #48]	; 0x30
   11034:	4619      	mov	r1, r3
   11036:	f363 0100 	bfi	r1, r3, #0, #1
   1103a:	f363 0141 	bfi	r1, r3, #1, #1
   1103e:	f363 0182 	bfi	r1, r3, #2, #1
   11042:	f363 01c5 	bfi	r1, r3, #3, #3
   11046:	2201      	movs	r2, #1
   11048:	f362 1188 	bfi	r1, r2, #6, #3
   1104c:	2208      	movs	r2, #8
   1104e:	f362 2153 	bfi	r1, r2, #9, #11
   11052:	f363 511f 	bfi	r1, r3, #20, #12
   11056:	aa0c      	add	r2, sp, #48	; 0x30
   11058:	4805      	ldr	r0, [pc, #20]	; (11070 <serial_set_end_character_list+0xe4>)
   1105a:	f003 f84f 	bl	140fc <z_impl_z_log_msg_static_create>
			return ret_code;
   1105e:	e7a8      	b.n	10fb2 <serial_set_end_character_list+0x26>
   11060:	20003064 	.word	0x20003064
   11064:	20003060 	.word	0x20003060
   11068:	20003068 	.word	0x20003068
   1106c:	00032088 	.word	0x00032088
   11070:	00031d9c 	.word	0x00031d9c

00011074 <serial_internal_get_line>:
	int * p_input_buffer_index,
	int volatile * p_bytes_in_buffer,
	char const * end_character_list,
	int const end_character_count, 
	serial_event_callback_t fire_callbacks_function)
{
   11074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11078:	b097      	sub	sp, #92	; 0x5c
   1107a:	af00      	add	r7, sp, #0
   1107c:	60f8      	str	r0, [r7, #12]
   1107e:	60ba      	str	r2, [r7, #8]
   11080:	607b      	str	r3, [r7, #4]
   11082:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
   11086:	f8d7 9088 	ldr.w	r9, [r7, #136]	; 0x88
   1108a:	f8d7 a08c 	ldr.w	sl, [r7, #140]	; 0x8c
   1108e:	f8d7 8094 	ldr.w	r8, [r7, #148]	; 0x94
   11092:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
	static serial_event_t event;
	static serial_line_t const empty_line = { 0 };
	
	LOG_DBG("getting next line");
   11096:	f8c7 d01c 	str.w	sp, [r7, #28]
   1109a:	b088      	sub	sp, #32
   1109c:	466b      	mov	r3, sp
   1109e:	f113 0210 	adds.w	r2, r3, #16
   110a2:	d011      	beq.n	110c8 <serial_internal_get_line+0x54>
   110a4:	210c      	movs	r1, #12
   110a6:	b152      	cbz	r2, 110be <serial_internal_get_line+0x4a>
   110a8:	4608      	mov	r0, r1
   110aa:	2904      	cmp	r1, #4
   110ac:	dd03      	ble.n	110b6 <serial_internal_get_line+0x42>
   110ae:	f8df c27c 	ldr.w	ip, [pc, #636]	; 1132c <serial_internal_get_line+0x2b8>
   110b2:	f8c3 c014 	str.w	ip, [r3, #20]
   110b6:	2808      	cmp	r0, #8
   110b8:	dd09      	ble.n	110ce <serial_internal_get_line+0x5a>
   110ba:	489d      	ldr	r0, [pc, #628]	; (11330 <serial_internal_get_line+0x2bc>)
   110bc:	6198      	str	r0, [r3, #24]
   110be:	290b      	cmp	r1, #11
   110c0:	dd2f      	ble.n	11122 <serial_internal_get_line+0xae>
   110c2:	f04f 0c0c 	mov.w	ip, #12
   110c6:	e004      	b.n	110d2 <serial_internal_get_line+0x5e>
   110c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   110cc:	e7eb      	b.n	110a6 <serial_internal_get_line+0x32>
   110ce:	f06f 0c1b 	mvn.w	ip, #27
   110d2:	b15a      	cbz	r2, 110ec <serial_internal_get_line+0x78>
   110d4:	2103      	movs	r1, #3
   110d6:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
   110da:	2100      	movs	r1, #0
   110dc:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
   110e0:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
   110e4:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
   110e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   110ea:	6118      	str	r0, [r3, #16]
   110ec:	2100      	movs	r1, #0
   110ee:	f36f 0100 	bfc	r1, #0, #1
   110f2:	f36f 0141 	bfc	r1, #1, #1
   110f6:	f36f 0182 	bfc	r1, #2, #1
   110fa:	f36f 01c5 	bfc	r1, #3, #3
   110fe:	2304      	movs	r3, #4
   11100:	f363 1188 	bfi	r1, r3, #6, #3
   11104:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   11108:	f36c 2153 	bfi	r1, ip, #9, #11
   1110c:	f36f 511f 	bfc	r1, #20, #12
   11110:	2300      	movs	r3, #0
   11112:	4888      	ldr	r0, [pc, #544]	; (11334 <serial_internal_get_line+0x2c0>)
   11114:	f002 fff2 	bl	140fc <z_impl_z_log_msg_static_create>
   11118:	f8d7 d01c 	ldr.w	sp, [r7, #28]
	p_line->mutable.len = 0;
   1111c:	2300      	movs	r3, #0
   1111e:	6023      	str	r3, [r4, #0]
   11120:	e1bb      	b.n	1149a <serial_internal_get_line+0x426>
	LOG_DBG("getting next line");
   11122:	f06f 0c1b 	mvn.w	ip, #27
   11126:	e7d4      	b.n	110d2 <serial_internal_get_line+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   11128:	68ba      	ldr	r2, [r7, #8]
   1112a:	687b      	ldr	r3, [r7, #4]
   1112c:	68f8      	ldr	r0, [r7, #12]
   1112e:	f015 f8c5 	bl	262bc <z_impl_k_sem_take>
	
	while (true)
	{
		if ((*p_bytes_in_buffer == p_line->mutable.len) && (k_sem_take(p_sem_data_ready, timeout) != 0))
   11132:	2800      	cmp	r0, #0
   11134:	f000 81b8 	beq.w	114a8 <serial_internal_get_line+0x434>
		{
			LOG_DBG("timeout reached");
   11138:	466c      	mov	r4, sp
   1113a:	b088      	sub	sp, #32
   1113c:	4669      	mov	r1, sp
   1113e:	f111 0210 	adds.w	r2, r1, #16
   11142:	d00e      	beq.n	11162 <serial_internal_get_line+0xee>
   11144:	230c      	movs	r3, #12
   11146:	b142      	cbz	r2, 1115a <serial_internal_get_line+0xe6>
   11148:	4618      	mov	r0, r3
   1114a:	2b04      	cmp	r3, #4
   1114c:	dd01      	ble.n	11152 <serial_internal_get_line+0xde>
   1114e:	4d7a      	ldr	r5, [pc, #488]	; (11338 <serial_internal_get_line+0x2c4>)
   11150:	614d      	str	r5, [r1, #20]
   11152:	2808      	cmp	r0, #8
   11154:	dd08      	ble.n	11168 <serial_internal_get_line+0xf4>
   11156:	4876      	ldr	r0, [pc, #472]	; (11330 <serial_internal_get_line+0x2bc>)
   11158:	6188      	str	r0, [r1, #24]
   1115a:	2b0b      	cmp	r3, #11
   1115c:	dd2c      	ble.n	111b8 <serial_internal_get_line+0x144>
   1115e:	230c      	movs	r3, #12
   11160:	e004      	b.n	1116c <serial_internal_get_line+0xf8>
   11162:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11166:	e7ee      	b.n	11146 <serial_internal_get_line+0xd2>
   11168:	f06f 031b 	mvn.w	r3, #27
   1116c:	b15a      	cbz	r2, 11186 <serial_internal_get_line+0x112>
   1116e:	2003      	movs	r0, #3
   11170:	f887 0024 	strb.w	r0, [r7, #36]	; 0x24
   11174:	2000      	movs	r0, #0
   11176:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
   1117a:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26
   1117e:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
   11182:	6a78      	ldr	r0, [r7, #36]	; 0x24
   11184:	6108      	str	r0, [r1, #16]
   11186:	2100      	movs	r1, #0
   11188:	f36f 0100 	bfc	r1, #0, #1
   1118c:	f36f 0141 	bfc	r1, #1, #1
   11190:	f36f 0182 	bfc	r1, #2, #1
   11194:	f36f 01c5 	bfc	r1, #3, #3
   11198:	2004      	movs	r0, #4
   1119a:	f360 1188 	bfi	r1, r0, #6, #3
   1119e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   111a2:	f363 2153 	bfi	r1, r3, #9, #11
   111a6:	f36f 511f 	bfc	r1, #20, #12
   111aa:	2300      	movs	r3, #0
   111ac:	4861      	ldr	r0, [pc, #388]	; (11334 <serial_internal_get_line+0x2c0>)
   111ae:	f002 ffa5 	bl	140fc <z_impl_z_log_msg_static_create>
   111b2:	46a5      	mov	sp, r4
			return &empty_line;
   111b4:	4861      	ldr	r0, [pc, #388]	; (1133c <serial_internal_get_line+0x2c8>)
   111b6:	e13f      	b.n	11438 <serial_internal_get_line+0x3c4>
			LOG_DBG("timeout reached");
   111b8:	f06f 031b 	mvn.w	r3, #27
   111bc:	e7d6      	b.n	1116c <serial_internal_get_line+0xf8>
			int lost_bytes = *p_bytes_in_buffer - input_buffer_size; 
			*p_bytes_in_buffer -= lost_bytes;
			bytes_to_check = input_buffer_size;
			*p_input_buffer_index = (*p_input_buffer_index + lost_bytes) % input_buffer_size;
			p_line->mutable.len = 0;
			LOG_WRN("overflow! %d bytes overwritten! (StartIndex: %d, BytesInBuffer: %d)", lost_bytes, *p_input_buffer_index, *p_bytes_in_buffer);
   111be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   111c2:	e1a0      	b.n	11506 <serial_internal_get_line+0x492>
   111c4:	f06f 011b 	mvn.w	r1, #27
   111c8:	b15a      	cbz	r2, 111e2 <serial_internal_get_line+0x16e>
   111ca:	2005      	movs	r0, #5
   111cc:	f887 0024 	strb.w	r0, [r7, #36]	; 0x24
   111d0:	2000      	movs	r0, #0
   111d2:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
   111d6:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26
   111da:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
   111de:	6a78      	ldr	r0, [r7, #36]	; 0x24
   111e0:	6118      	str	r0, [r3, #16]
   111e2:	f36f 0b00 	bfc	fp, #0, #1
   111e6:	f36f 0b41 	bfc	fp, #1, #1
   111ea:	f36f 0b82 	bfc	fp, #2, #1
   111ee:	f36f 0bc5 	bfc	fp, #3, #3
   111f2:	2302      	movs	r3, #2
   111f4:	f363 1b88 	bfi	fp, r3, #6, #3
   111f8:	f3c1 030a 	ubfx	r3, r1, #0, #11
   111fc:	f363 2b53 	bfi	fp, r3, #9, #11
   11200:	f36f 5b1f 	bfc	fp, #20, #12
   11204:	2300      	movs	r3, #0
   11206:	4659      	mov	r1, fp
   11208:	484a      	ldr	r0, [pc, #296]	; (11334 <serial_internal_get_line+0x2c0>)
   1120a:	f002 ff77 	bl	140fc <z_impl_z_log_msg_static_create>
   1120e:	f8d7 d014 	ldr.w	sp, [r7, #20]
			event.type = SERIAL_EVENT_TYPE_BUFFER_OVERFLOW;
   11212:	484b      	ldr	r0, [pc, #300]	; (11340 <serial_internal_get_line+0x2cc>)
   11214:	2301      	movs	r3, #1
   11216:	7003      	strb	r3, [r0, #0]
			event.data.buf_ovf.count = lost_bytes;
   11218:	69bb      	ldr	r3, [r7, #24]
   1121a:	6043      	str	r3, [r0, #4]
			fire_callbacks_function(&event);
   1121c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   11220:	4798      	blx	r3
		}
		
		for (int i = p_line->mutable.len; i < bytes_to_check; i++)
   11222:	6820      	ldr	r0, [r4, #0]
   11224:	69fb      	ldr	r3, [r7, #28]
   11226:	4298      	cmp	r0, r3
   11228:	da49      	bge.n	112be <serial_internal_get_line+0x24a>
		{
			int buffer_index = (*p_input_buffer_index + i) % input_buffer_size;
   1122a:	f8da 3000 	ldr.w	r3, [sl]
   1122e:	4403      	add	r3, r0
   11230:	fbb3 f2f9 	udiv	r2, r3, r9
   11234:	fb09 3312 	mls	r3, r9, r2, r3
			p_line->mutable.p_buffer[i] = input_buffer[buffer_index];
   11238:	6862      	ldr	r2, [r4, #4]
   1123a:	4684      	mov	ip, r0
   1123c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   11240:	5ccb      	ldrb	r3, [r1, r3]
   11242:	5413      	strb	r3, [r2, r0]
			p_line->mutable.len++;
   11244:	6823      	ldr	r3, [r4, #0]
   11246:	f103 0e01 	add.w	lr, r3, #1
   1124a:	f8c4 e000 	str.w	lr, [r4]
			for (int j = 0; j < end_character_count; j++)
   1124e:	2300      	movs	r3, #0
   11250:	f8c7 e018 	str.w	lr, [r7, #24]
   11254:	42ab      	cmp	r3, r5
   11256:	da30      	bge.n	112ba <serial_internal_get_line+0x246>
			{
				if (p_line->mutable.p_buffer[i] == end_character_list[j])
   11258:	6862      	ldr	r2, [r4, #4]
   1125a:	f812 e00c 	ldrb.w	lr, [r2, ip]
   1125e:	f818 1003 	ldrb.w	r1, [r8, r3]
   11262:	458e      	cmp	lr, r1
   11264:	d004      	beq.n	11270 <serial_internal_get_line+0x1fc>
			for (int j = 0; j < end_character_count; j++)
   11266:	3301      	adds	r3, #1
   11268:	e7f4      	b.n	11254 <serial_internal_get_line+0x1e0>
			LOG_WRN("overflow! %d bytes overwritten! (StartIndex: %d, BytesInBuffer: %d)", lost_bytes, *p_input_buffer_index, *p_bytes_in_buffer);
   1126a:	f06f 011b 	mvn.w	r1, #27
   1126e:	e7ab      	b.n	111c8 <serial_internal_get_line+0x154>
				{
					p_line->mutable.p_buffer[p_line->mutable.len] = '\0';
   11270:	f8d7 e018 	ldr.w	lr, [r7, #24]
   11274:	2300      	movs	r3, #0
   11276:	f802 300e 	strb.w	r3, [r2, lr]
					line_end_found = true;
   1127a:	2301      	movs	r3, #1
			{
				break;
			}
		}
		
		if ((end_character_count == 0 && p_line->mutable.len > 0) || line_end_found)
   1127c:	b90d      	cbnz	r5, 11282 <serial_internal_get_line+0x20e>
   1127e:	6822      	ldr	r2, [r4, #0]
   11280:	b9fa      	cbnz	r2, 112c2 <serial_internal_get_line+0x24e>
   11282:	b9f3      	cbnz	r3, 112c2 <serial_internal_get_line+0x24e>
			*p_bytes_in_buffer -= p_line->mutable.len;
			LOG_INF("line with length %d returned, bytes left in buffer: %d", p_line->mutable.len, *p_bytes_in_buffer);
			return &(p_line->fixed);
		}
		
		LOG_DBG("no line in received data, waiting for new data...");
   11284:	f8c7 d01c 	str.w	sp, [r7, #28]
   11288:	b088      	sub	sp, #32
   1128a:	466b      	mov	r3, sp
   1128c:	f113 0210 	adds.w	r2, r3, #16
   11290:	f000 80d9 	beq.w	11446 <serial_internal_get_line+0x3d2>
   11294:	210c      	movs	r1, #12
   11296:	b15a      	cbz	r2, 112b0 <serial_internal_get_line+0x23c>
   11298:	4608      	mov	r0, r1
   1129a:	2904      	cmp	r1, #4
   1129c:	dd03      	ble.n	112a6 <serial_internal_get_line+0x232>
   1129e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 11344 <serial_internal_get_line+0x2d0>
   112a2:	f8c3 c014 	str.w	ip, [r3, #20]
   112a6:	2808      	cmp	r0, #8
   112a8:	f340 80d0 	ble.w	1144c <serial_internal_get_line+0x3d8>
   112ac:	4820      	ldr	r0, [pc, #128]	; (11330 <serial_internal_get_line+0x2bc>)
   112ae:	6198      	str	r0, [r3, #24]
   112b0:	290b      	cmp	r1, #11
   112b2:	f340 8146 	ble.w	11542 <serial_internal_get_line+0x4ce>
   112b6:	210c      	movs	r1, #12
   112b8:	e0ca      	b.n	11450 <serial_internal_get_line+0x3dc>
		for (int i = p_line->mutable.len; i < bytes_to_check; i++)
   112ba:	3001      	adds	r0, #1
   112bc:	e7b2      	b.n	11224 <serial_internal_get_line+0x1b0>
   112be:	2300      	movs	r3, #0
   112c0:	e7dc      	b.n	1127c <serial_internal_get_line+0x208>
			if (*p_bytes_in_buffer > input_buffer_size)
   112c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   112c6:	681b      	ldr	r3, [r3, #0]
   112c8:	454b      	cmp	r3, r9
   112ca:	d83f      	bhi.n	1134c <serial_internal_get_line+0x2d8>
			*p_input_buffer_index = (*p_input_buffer_index + p_line->mutable.len) % input_buffer_size;
   112cc:	f8da 3000 	ldr.w	r3, [sl]
   112d0:	6822      	ldr	r2, [r4, #0]
   112d2:	4413      	add	r3, r2
   112d4:	fbb3 f2f9 	udiv	r2, r3, r9
   112d8:	fb09 3312 	mls	r3, r9, r2, r3
   112dc:	f8ca 3000 	str.w	r3, [sl]
			*p_bytes_in_buffer -= p_line->mutable.len;
   112e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   112e4:	681b      	ldr	r3, [r3, #0]
   112e6:	6822      	ldr	r2, [r4, #0]
   112e8:	1a9b      	subs	r3, r3, r2
   112ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   112ee:	6013      	str	r3, [r2, #0]
			LOG_INF("line with length %d returned, bytes left in buffer: %d", p_line->mutable.len, *p_bytes_in_buffer);
   112f0:	f8d4 c000 	ldr.w	ip, [r4]
   112f4:	6815      	ldr	r5, [r2, #0]
   112f6:	466e      	mov	r6, sp
   112f8:	b088      	sub	sp, #32
   112fa:	466b      	mov	r3, sp
   112fc:	f113 0210 	adds.w	r2, r3, #16
   11300:	d070      	beq.n	113e4 <serial_internal_get_line+0x370>
   11302:	2110      	movs	r1, #16
   11304:	b16a      	cbz	r2, 11322 <serial_internal_get_line+0x2ae>
   11306:	4608      	mov	r0, r1
   11308:	2904      	cmp	r1, #4
   1130a:	dd03      	ble.n	11314 <serial_internal_get_line+0x2a0>
   1130c:	f8df e038 	ldr.w	lr, [pc, #56]	; 11348 <serial_internal_get_line+0x2d4>
   11310:	f8c3 e014 	str.w	lr, [r3, #20]
   11314:	2808      	cmp	r0, #8
   11316:	dd01      	ble.n	1131c <serial_internal_get_line+0x2a8>
   11318:	f8c3 c018 	str.w	ip, [r3, #24]
   1131c:	280c      	cmp	r0, #12
   1131e:	dd64      	ble.n	113ea <serial_internal_get_line+0x376>
   11320:	61dd      	str	r5, [r3, #28]
   11322:	290f      	cmp	r1, #15
   11324:	f340 808c 	ble.w	11440 <serial_internal_get_line+0x3cc>
   11328:	2510      	movs	r5, #16
   1132a:	e060      	b.n	113ee <serial_internal_get_line+0x37a>
   1132c:	000320f8 	.word	0x000320f8
   11330:	0003221c 	.word	0x0003221c
   11334:	00031da4 	.word	0x00031da4
   11338:	0003201c 	.word	0x0003201c
   1133c:	00032214 	.word	0x00032214
   11340:	2000306c 	.word	0x2000306c
   11344:	000321dc 	.word	0x000321dc
   11348:	000321a4 	.word	0x000321a4
				p_line->mutable.len = 0;
   1134c:	2500      	movs	r5, #0
   1134e:	6025      	str	r5, [r4, #0]
				LOG_WRN("overflow while copying data to line structure!");
   11350:	4b7d      	ldr	r3, [pc, #500]	; (11548 <serial_internal_get_line+0x4d4>)
   11352:	63fb      	str	r3, [r7, #60]	; 0x3c
   11354:	2602      	movs	r6, #2
   11356:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
   1135a:	f887 5025 	strb.w	r5, [r7, #37]	; 0x25
   1135e:	f887 5026 	strb.w	r5, [r7, #38]	; 0x26
   11362:	f887 5027 	strb.w	r5, [r7, #39]	; 0x27
   11366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11368:	63bb      	str	r3, [r7, #56]	; 0x38
   1136a:	4629      	mov	r1, r5
   1136c:	f365 0100 	bfi	r1, r5, #0, #1
   11370:	f365 0141 	bfi	r1, r5, #1, #1
   11374:	f365 0182 	bfi	r1, r5, #2, #1
   11378:	f365 01c5 	bfi	r1, r5, #3, #3
   1137c:	f366 1188 	bfi	r1, r6, #6, #3
   11380:	f04f 0908 	mov.w	r9, #8
   11384:	f369 2153 	bfi	r1, r9, #9, #11
   11388:	f365 511f 	bfi	r1, r5, #20, #12
   1138c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1154c <serial_internal_get_line+0x4d8>
   11390:	462b      	mov	r3, r5
   11392:	f107 0238 	add.w	r2, r7, #56	; 0x38
   11396:	4640      	mov	r0, r8
   11398:	f002 feb0 	bl	140fc <z_impl_z_log_msg_static_create>
	}
	
	LOG_ERR("fell through line preparation!");
   1139c:	4b6c      	ldr	r3, [pc, #432]	; (11550 <serial_internal_get_line+0x4dc>)
   1139e:	657b      	str	r3, [r7, #84]	; 0x54
   113a0:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
   113a4:	f887 5025 	strb.w	r5, [r7, #37]	; 0x25
   113a8:	f887 5026 	strb.w	r5, [r7, #38]	; 0x26
   113ac:	f887 5027 	strb.w	r5, [r7, #39]	; 0x27
   113b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   113b2:	653b      	str	r3, [r7, #80]	; 0x50
   113b4:	4629      	mov	r1, r5
   113b6:	f365 0100 	bfi	r1, r5, #0, #1
   113ba:	f365 0141 	bfi	r1, r5, #1, #1
   113be:	f365 0182 	bfi	r1, r5, #2, #1
   113c2:	f365 01c5 	bfi	r1, r5, #3, #3
   113c6:	2301      	movs	r3, #1
   113c8:	f363 1188 	bfi	r1, r3, #6, #3
   113cc:	f369 2153 	bfi	r1, r9, #9, #11
   113d0:	f365 511f 	bfi	r1, r5, #20, #12
   113d4:	462b      	mov	r3, r5
   113d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
   113da:	4640      	mov	r0, r8
   113dc:	f002 fe8e 	bl	140fc <z_impl_z_log_msg_static_create>
	return &(p_line->fixed);
   113e0:	4620      	mov	r0, r4
   113e2:	e029      	b.n	11438 <serial_internal_get_line+0x3c4>
			LOG_INF("line with length %d returned, bytes left in buffer: %d", p_line->mutable.len, *p_bytes_in_buffer);
   113e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   113e8:	e78c      	b.n	11304 <serial_internal_get_line+0x290>
   113ea:	f06f 051b 	mvn.w	r5, #27
   113ee:	b15a      	cbz	r2, 11408 <serial_internal_get_line+0x394>
   113f0:	2104      	movs	r1, #4
   113f2:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
   113f6:	2100      	movs	r1, #0
   113f8:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
   113fc:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
   11400:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
   11404:	6a78      	ldr	r0, [r7, #36]	; 0x24
   11406:	6118      	str	r0, [r3, #16]
   11408:	2100      	movs	r1, #0
   1140a:	f36f 0100 	bfc	r1, #0, #1
   1140e:	f36f 0141 	bfc	r1, #1, #1
   11412:	f36f 0182 	bfc	r1, #2, #1
   11416:	f36f 01c5 	bfc	r1, #3, #3
   1141a:	2303      	movs	r3, #3
   1141c:	f363 1188 	bfi	r1, r3, #6, #3
   11420:	f3c5 050a 	ubfx	r5, r5, #0, #11
   11424:	f365 2153 	bfi	r1, r5, #9, #11
   11428:	f36f 511f 	bfc	r1, #20, #12
   1142c:	2300      	movs	r3, #0
   1142e:	4847      	ldr	r0, [pc, #284]	; (1154c <serial_internal_get_line+0x4d8>)
   11430:	f002 fe64 	bl	140fc <z_impl_z_log_msg_static_create>
   11434:	46b5      	mov	sp, r6
			return &(p_line->fixed);
   11436:	4620      	mov	r0, r4
   11438:	375c      	adds	r7, #92	; 0x5c
   1143a:	46bd      	mov	sp, r7
   1143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_INF("line with length %d returned, bytes left in buffer: %d", p_line->mutable.len, *p_bytes_in_buffer);
   11440:	f06f 051b 	mvn.w	r5, #27
   11444:	e7d3      	b.n	113ee <serial_internal_get_line+0x37a>
		LOG_DBG("no line in received data, waiting for new data...");
   11446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1144a:	e724      	b.n	11296 <serial_internal_get_line+0x222>
   1144c:	f06f 011b 	mvn.w	r1, #27
   11450:	b15a      	cbz	r2, 1146a <serial_internal_get_line+0x3f6>
   11452:	2003      	movs	r0, #3
   11454:	f887 0024 	strb.w	r0, [r7, #36]	; 0x24
   11458:	2000      	movs	r0, #0
   1145a:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
   1145e:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26
   11462:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
   11466:	6a78      	ldr	r0, [r7, #36]	; 0x24
   11468:	6118      	str	r0, [r3, #16]
   1146a:	f36f 0600 	bfc	r6, #0, #1
   1146e:	f36f 0641 	bfc	r6, #1, #1
   11472:	f36f 0682 	bfc	r6, #2, #1
   11476:	f36f 06c5 	bfc	r6, #3, #3
   1147a:	2304      	movs	r3, #4
   1147c:	f363 1688 	bfi	r6, r3, #6, #3
   11480:	f3c1 030a 	ubfx	r3, r1, #0, #11
   11484:	f363 2653 	bfi	r6, r3, #9, #11
   11488:	f36f 561f 	bfc	r6, #20, #12
   1148c:	2300      	movs	r3, #0
   1148e:	4631      	mov	r1, r6
   11490:	482e      	ldr	r0, [pc, #184]	; (1154c <serial_internal_get_line+0x4d8>)
   11492:	f002 fe33 	bl	140fc <z_impl_z_log_msg_static_create>
   11496:	f8d7 d01c 	ldr.w	sp, [r7, #28]
		if ((*p_bytes_in_buffer == p_line->mutable.len) && (k_sem_take(p_sem_data_ready, timeout) != 0))
   1149a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1149e:	681a      	ldr	r2, [r3, #0]
   114a0:	6823      	ldr	r3, [r4, #0]
   114a2:	429a      	cmp	r2, r3
   114a4:	f43f ae40 	beq.w	11128 <serial_internal_get_line+0xb4>
		int bytes_to_check = *p_bytes_in_buffer;
   114a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   114ac:	681b      	ldr	r3, [r3, #0]
   114ae:	61fb      	str	r3, [r7, #28]
		if (bytes_to_check > input_buffer_size)
   114b0:	454b      	cmp	r3, r9
   114b2:	f67f aeb6 	bls.w	11222 <serial_internal_get_line+0x1ae>
			int lost_bytes = *p_bytes_in_buffer - input_buffer_size; 
   114b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   114ba:	681b      	ldr	r3, [r3, #0]
   114bc:	eba3 0209 	sub.w	r2, r3, r9
   114c0:	61ba      	str	r2, [r7, #24]
			*p_bytes_in_buffer -= lost_bytes;
   114c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   114c6:	681b      	ldr	r3, [r3, #0]
   114c8:	1a9b      	subs	r3, r3, r2
   114ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   114ce:	600b      	str	r3, [r1, #0]
			bytes_to_check = input_buffer_size;
   114d0:	f8c7 901c 	str.w	r9, [r7, #28]
			*p_input_buffer_index = (*p_input_buffer_index + lost_bytes) % input_buffer_size;
   114d4:	f8da 3000 	ldr.w	r3, [sl]
   114d8:	4413      	add	r3, r2
   114da:	fbb3 f2f9 	udiv	r2, r3, r9
   114de:	fb09 3312 	mls	r3, r9, r2, r3
   114e2:	f8ca 3000 	str.w	r3, [sl]
			p_line->mutable.len = 0;
   114e6:	2300      	movs	r3, #0
   114e8:	6023      	str	r3, [r4, #0]
			LOG_WRN("overflow! %d bytes overwritten! (StartIndex: %d, BytesInBuffer: %d)", lost_bytes, *p_input_buffer_index, *p_bytes_in_buffer);
   114ea:	f8da 3000 	ldr.w	r3, [sl]
   114ee:	613b      	str	r3, [r7, #16]
   114f0:	f8d1 e000 	ldr.w	lr, [r1]
   114f4:	f8c7 d014 	str.w	sp, [r7, #20]
   114f8:	b08a      	sub	sp, #40	; 0x28
   114fa:	466b      	mov	r3, sp
   114fc:	f113 0210 	adds.w	r2, r3, #16
   11500:	f43f ae5d 	beq.w	111be <serial_internal_get_line+0x14a>
   11504:	2114      	movs	r1, #20
   11506:	b1ba      	cbz	r2, 11538 <serial_internal_get_line+0x4c4>
   11508:	4608      	mov	r0, r1
   1150a:	2904      	cmp	r1, #4
   1150c:	dd03      	ble.n	11516 <serial_internal_get_line+0x4a2>
   1150e:	f8df c044 	ldr.w	ip, [pc, #68]	; 11554 <serial_internal_get_line+0x4e0>
   11512:	f8c3 c014 	str.w	ip, [r3, #20]
   11516:	2808      	cmp	r0, #8
   11518:	dd03      	ble.n	11522 <serial_internal_get_line+0x4ae>
   1151a:	f8d7 c018 	ldr.w	ip, [r7, #24]
   1151e:	f8c3 c018 	str.w	ip, [r3, #24]
   11522:	280c      	cmp	r0, #12
   11524:	dd03      	ble.n	1152e <serial_internal_get_line+0x4ba>
   11526:	f8d7 c010 	ldr.w	ip, [r7, #16]
   1152a:	f8c3 c01c 	str.w	ip, [r3, #28]
   1152e:	2810      	cmp	r0, #16
   11530:	f77f ae48 	ble.w	111c4 <serial_internal_get_line+0x150>
   11534:	f8c3 e020 	str.w	lr, [r3, #32]
   11538:	2913      	cmp	r1, #19
   1153a:	f77f ae96 	ble.w	1126a <serial_internal_get_line+0x1f6>
   1153e:	2114      	movs	r1, #20
   11540:	e642      	b.n	111c8 <serial_internal_get_line+0x154>
		LOG_DBG("no line in received data, waiting for new data...");
   11542:	f06f 011b 	mvn.w	r1, #27
   11546:	e783      	b.n	11450 <serial_internal_get_line+0x3dc>
   11548:	00032154 	.word	0x00032154
   1154c:	00031da4 	.word	0x00031da4
   11550:	00032184 	.word	0x00032184
   11554:	00032110 	.word	0x00032110

00011558 <fire_callbacks>:


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC FUNCTIONS
static void fire_callbacks(serial_event_t const * p_evt)
{
   11558:	b538      	push	{r3, r4, r5, lr}
   1155a:	4605      	mov	r5, r0
	for (int i = 0; i < UART_SERIAL_CALLBACK_LIMIT; i++)
   1155c:	2400      	movs	r4, #0
   1155e:	2c00      	cmp	r4, #0
   11560:	dd00      	ble.n	11564 <fire_callbacks+0xc>
		if (callback_list[i] != NULL)
		{
			callback_list[i](p_evt);
		}
	}
}
   11562:	bd38      	pop	{r3, r4, r5, pc}
		if (callback_list[i] != NULL)
   11564:	4b03      	ldr	r3, [pc, #12]	; (11574 <fire_callbacks+0x1c>)
   11566:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1156a:	b10b      	cbz	r3, 11570 <fire_callbacks+0x18>
			callback_list[i](p_evt);
   1156c:	4628      	mov	r0, r5
   1156e:	4798      	blx	r3
	for (int i = 0; i < UART_SERIAL_CALLBACK_LIMIT; i++)
   11570:	3401      	adds	r4, #1
   11572:	e7f4      	b.n	1155e <fire_callbacks+0x6>
   11574:	20003088 	.word	0x20003088

00011578 <uart_callback>:
{
   11578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1157a:	b089      	sub	sp, #36	; 0x24
   1157c:	af00      	add	r7, sp, #0
   1157e:	460c      	mov	r4, r1
	switch (evt->type)
   11580:	780b      	ldrb	r3, [r1, #0]
   11582:	2b06      	cmp	r3, #6
   11584:	d861      	bhi.n	1164a <uart_callback+0xd2>
   11586:	e8df f013 	tbh	[pc, r3, lsl #1]
   1158a:	01b9      	.short	0x01b9
   1158c:	000701fa 	.word	0x000701fa
   11590:	017b00cb 	.word	0x017b00cb
   11594:	006600a4 	.word	0x006600a4
			bytes_in_buffer += evt->data.rx.len;
   11598:	68ca      	ldr	r2, [r1, #12]
   1159a:	4daa      	ldr	r5, [pc, #680]	; (11844 <uart_callback+0x2cc>)
   1159c:	682b      	ldr	r3, [r5, #0]
   1159e:	4413      	add	r3, r2
   115a0:	602b      	str	r3, [r5, #0]
	z_impl_k_sem_give(sem);
   115a2:	48a9      	ldr	r0, [pc, #676]	; (11848 <uart_callback+0x2d0>)
   115a4:	f014 fe62 	bl	2626c <z_impl_k_sem_give>
			event.type = SERIAL_EVENT_TYPE_NEW_DATA_RECEIVED;
   115a8:	48a8      	ldr	r0, [pc, #672]	; (1184c <uart_callback+0x2d4>)
   115aa:	2300      	movs	r3, #0
   115ac:	7003      	strb	r3, [r0, #0]
			event.data.new_data.count = evt->data.rx.len;
   115ae:	68e3      	ldr	r3, [r4, #12]
   115b0:	6043      	str	r3, [r0, #4]
			event.data.new_data.p_buf = evt->data.rx.buf + evt->data.rx.offset;
   115b2:	6863      	ldr	r3, [r4, #4]
   115b4:	68a2      	ldr	r2, [r4, #8]
   115b6:	4413      	add	r3, r2
   115b8:	6083      	str	r3, [r0, #8]
			fire_callbacks(&event);
   115ba:	f7ff ffcd 	bl	11558 <fire_callbacks>
			LOG_DBG("received %d bytes, %d bytes in buffer", evt->data.rx.len, bytes_in_buffer);
   115be:	68e6      	ldr	r6, [r4, #12]
   115c0:	682c      	ldr	r4, [r5, #0]
   115c2:	466d      	mov	r5, sp
   115c4:	b08a      	sub	sp, #40	; 0x28
   115c6:	466b      	mov	r3, sp
   115c8:	f113 0210 	adds.w	r2, r3, #16
   115cc:	d018      	beq.n	11600 <uart_callback+0x88>
   115ce:	2114      	movs	r1, #20
   115d0:	b192      	cbz	r2, 115f8 <uart_callback+0x80>
   115d2:	4608      	mov	r0, r1
   115d4:	2904      	cmp	r1, #4
   115d6:	dd03      	ble.n	115e0 <uart_callback+0x68>
   115d8:	f8df c274 	ldr.w	ip, [pc, #628]	; 11850 <uart_callback+0x2d8>
   115dc:	f8c3 c014 	str.w	ip, [r3, #20]
   115e0:	2808      	cmp	r0, #8
   115e2:	dd03      	ble.n	115ec <uart_callback+0x74>
   115e4:	f8df c26c 	ldr.w	ip, [pc, #620]	; 11854 <uart_callback+0x2dc>
   115e8:	f8c3 c018 	str.w	ip, [r3, #24]
   115ec:	280c      	cmp	r0, #12
   115ee:	dd00      	ble.n	115f2 <uart_callback+0x7a>
   115f0:	61de      	str	r6, [r3, #28]
   115f2:	2810      	cmp	r0, #16
   115f4:	dd07      	ble.n	11606 <uart_callback+0x8e>
   115f6:	621c      	str	r4, [r3, #32]
   115f8:	2913      	cmp	r1, #19
   115fa:	dd29      	ble.n	11650 <uart_callback+0xd8>
   115fc:	2414      	movs	r4, #20
   115fe:	e004      	b.n	1160a <uart_callback+0x92>
   11600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11604:	e7e4      	b.n	115d0 <uart_callback+0x58>
   11606:	f06f 041b 	mvn.w	r4, #27
   1160a:	b13a      	cbz	r2, 1161c <uart_callback+0xa4>
   1160c:	2105      	movs	r1, #5
   1160e:	7139      	strb	r1, [r7, #4]
   11610:	2100      	movs	r1, #0
   11612:	7179      	strb	r1, [r7, #5]
   11614:	71b9      	strb	r1, [r7, #6]
   11616:	71f9      	strb	r1, [r7, #7]
   11618:	6878      	ldr	r0, [r7, #4]
   1161a:	6118      	str	r0, [r3, #16]
   1161c:	2100      	movs	r1, #0
   1161e:	f36f 0100 	bfc	r1, #0, #1
   11622:	f36f 0141 	bfc	r1, #1, #1
   11626:	f36f 0182 	bfc	r1, #2, #1
   1162a:	f36f 01c5 	bfc	r1, #3, #3
   1162e:	2304      	movs	r3, #4
   11630:	f363 1188 	bfi	r1, r3, #6, #3
   11634:	f3c4 030a 	ubfx	r3, r4, #0, #11
   11638:	f363 2153 	bfi	r1, r3, #9, #11
   1163c:	f36f 511f 	bfc	r1, #20, #12
   11640:	2300      	movs	r3, #0
   11642:	4885      	ldr	r0, [pc, #532]	; (11858 <uart_callback+0x2e0>)
   11644:	f002 fd5a 	bl	140fc <z_impl_z_log_msg_static_create>
   11648:	46ad      	mov	sp, r5
}
   1164a:	3724      	adds	r7, #36	; 0x24
   1164c:	46bd      	mov	sp, r7
   1164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_DBG("received %d bytes, %d bytes in buffer", evt->data.rx.len, bytes_in_buffer);
   11650:	f06f 041b 	mvn.w	r4, #27
   11654:	e7d9      	b.n	1160a <uart_callback+0x92>
		LOG_DBG("RX stopped");
   11656:	466d      	mov	r5, sp
   11658:	b088      	sub	sp, #32
   1165a:	466b      	mov	r3, sp
   1165c:	f113 0210 	adds.w	r2, r3, #16
   11660:	d00e      	beq.n	11680 <uart_callback+0x108>
   11662:	210c      	movs	r1, #12
   11664:	b142      	cbz	r2, 11678 <uart_callback+0x100>
   11666:	4608      	mov	r0, r1
   11668:	2904      	cmp	r1, #4
   1166a:	dd01      	ble.n	11670 <uart_callback+0xf8>
   1166c:	4c7b      	ldr	r4, [pc, #492]	; (1185c <uart_callback+0x2e4>)
   1166e:	615c      	str	r4, [r3, #20]
   11670:	2808      	cmp	r0, #8
   11672:	dd08      	ble.n	11686 <uart_callback+0x10e>
   11674:	4877      	ldr	r0, [pc, #476]	; (11854 <uart_callback+0x2dc>)
   11676:	6198      	str	r0, [r3, #24]
   11678:	290b      	cmp	r1, #11
   1167a:	dd27      	ble.n	116cc <uart_callback+0x154>
   1167c:	240c      	movs	r4, #12
   1167e:	e004      	b.n	1168a <uart_callback+0x112>
   11680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11684:	e7ee      	b.n	11664 <uart_callback+0xec>
   11686:	f06f 041b 	mvn.w	r4, #27
   1168a:	b13a      	cbz	r2, 1169c <uart_callback+0x124>
   1168c:	2103      	movs	r1, #3
   1168e:	7139      	strb	r1, [r7, #4]
   11690:	2100      	movs	r1, #0
   11692:	7179      	strb	r1, [r7, #5]
   11694:	71b9      	strb	r1, [r7, #6]
   11696:	71f9      	strb	r1, [r7, #7]
   11698:	6878      	ldr	r0, [r7, #4]
   1169a:	6118      	str	r0, [r3, #16]
   1169c:	2100      	movs	r1, #0
   1169e:	f36f 0100 	bfc	r1, #0, #1
   116a2:	f36f 0141 	bfc	r1, #1, #1
   116a6:	f36f 0182 	bfc	r1, #2, #1
   116aa:	f36f 01c5 	bfc	r1, #3, #3
   116ae:	2304      	movs	r3, #4
   116b0:	f363 1188 	bfi	r1, r3, #6, #3
   116b4:	f3c4 030a 	ubfx	r3, r4, #0, #11
   116b8:	f363 2153 	bfi	r1, r3, #9, #11
   116bc:	f36f 511f 	bfc	r1, #20, #12
   116c0:	2300      	movs	r3, #0
   116c2:	4865      	ldr	r0, [pc, #404]	; (11858 <uart_callback+0x2e0>)
   116c4:	f002 fd1a 	bl	140fc <z_impl_z_log_msg_static_create>
   116c8:	46ad      	mov	sp, r5
   116ca:	e7be      	b.n	1164a <uart_callback+0xd2>
   116cc:	f06f 041b 	mvn.w	r4, #27
   116d0:	e7db      	b.n	1168a <uart_callback+0x112>
		enabled = false;
   116d2:	2400      	movs	r4, #0
   116d4:	4b62      	ldr	r3, [pc, #392]	; (11860 <uart_callback+0x2e8>)
   116d6:	701c      	strb	r4, [r3, #0]
   116d8:	4862      	ldr	r0, [pc, #392]	; (11864 <uart_callback+0x2ec>)
   116da:	f014 fdc7 	bl	2626c <z_impl_k_sem_give>
		LOG_INF("uart_serial disabled");
   116de:	4b62      	ldr	r3, [pc, #392]	; (11868 <uart_callback+0x2f0>)
   116e0:	61fb      	str	r3, [r7, #28]
   116e2:	2302      	movs	r3, #2
   116e4:	713b      	strb	r3, [r7, #4]
   116e6:	717c      	strb	r4, [r7, #5]
   116e8:	71bc      	strb	r4, [r7, #6]
   116ea:	71fc      	strb	r4, [r7, #7]
   116ec:	687b      	ldr	r3, [r7, #4]
   116ee:	61bb      	str	r3, [r7, #24]
   116f0:	4621      	mov	r1, r4
   116f2:	f364 0100 	bfi	r1, r4, #0, #1
   116f6:	f364 0141 	bfi	r1, r4, #1, #1
   116fa:	f364 0182 	bfi	r1, r4, #2, #1
   116fe:	f364 01c5 	bfi	r1, r4, #3, #3
   11702:	2303      	movs	r3, #3
   11704:	f363 1188 	bfi	r1, r3, #6, #3
   11708:	2308      	movs	r3, #8
   1170a:	f363 2153 	bfi	r1, r3, #9, #11
   1170e:	f364 511f 	bfi	r1, r4, #20, #12
   11712:	4623      	mov	r3, r4
   11714:	f107 0218 	add.w	r2, r7, #24
   11718:	484f      	ldr	r0, [pc, #316]	; (11858 <uart_callback+0x2e0>)
   1171a:	f002 fcef 	bl	140fc <z_impl_z_log_msg_static_create>
   1171e:	e794      	b.n	1164a <uart_callback+0xd2>
   11720:	4605      	mov	r5, r0
		LOG_DBG("RX buffer requested");
   11722:	466e      	mov	r6, sp
   11724:	b088      	sub	sp, #32
   11726:	466b      	mov	r3, sp
   11728:	f113 0210 	adds.w	r2, r3, #16
   1172c:	d00e      	beq.n	1174c <uart_callback+0x1d4>
   1172e:	210c      	movs	r1, #12
   11730:	b142      	cbz	r2, 11744 <uart_callback+0x1cc>
   11732:	4608      	mov	r0, r1
   11734:	2904      	cmp	r1, #4
   11736:	dd01      	ble.n	1173c <uart_callback+0x1c4>
   11738:	4c4c      	ldr	r4, [pc, #304]	; (1186c <uart_callback+0x2f4>)
   1173a:	615c      	str	r4, [r3, #20]
   1173c:	2808      	cmp	r0, #8
   1173e:	dd08      	ble.n	11752 <uart_callback+0x1da>
   11740:	4844      	ldr	r0, [pc, #272]	; (11854 <uart_callback+0x2dc>)
   11742:	6198      	str	r0, [r3, #24]
   11744:	290b      	cmp	r1, #11
   11746:	dd46      	ble.n	117d6 <uart_callback+0x25e>
   11748:	240c      	movs	r4, #12
   1174a:	e004      	b.n	11756 <uart_callback+0x1de>
   1174c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11750:	e7ee      	b.n	11730 <uart_callback+0x1b8>
   11752:	f06f 041b 	mvn.w	r4, #27
   11756:	b13a      	cbz	r2, 11768 <uart_callback+0x1f0>
   11758:	2103      	movs	r1, #3
   1175a:	7139      	strb	r1, [r7, #4]
   1175c:	2100      	movs	r1, #0
   1175e:	7179      	strb	r1, [r7, #5]
   11760:	71b9      	strb	r1, [r7, #6]
   11762:	71f9      	strb	r1, [r7, #7]
   11764:	6878      	ldr	r0, [r7, #4]
   11766:	6118      	str	r0, [r3, #16]
   11768:	2100      	movs	r1, #0
   1176a:	f36f 0100 	bfc	r1, #0, #1
   1176e:	f36f 0141 	bfc	r1, #1, #1
   11772:	f36f 0182 	bfc	r1, #2, #1
   11776:	f36f 01c5 	bfc	r1, #3, #3
   1177a:	2304      	movs	r3, #4
   1177c:	f363 1188 	bfi	r1, r3, #6, #3
   11780:	f3c4 030a 	ubfx	r3, r4, #0, #11
   11784:	f363 2153 	bfi	r1, r3, #9, #11
   11788:	f36f 511f 	bfc	r1, #20, #12
   1178c:	2300      	movs	r3, #0
   1178e:	4832      	ldr	r0, [pc, #200]	; (11858 <uart_callback+0x2e0>)
   11790:	f002 fcb4 	bl	140fc <z_impl_z_log_msg_static_create>
   11794:	46b5      	mov	sp, r6
		uart_rx_buf_rsp(dev, next_buffer, PARTITION_SIZE);
   11796:	4c36      	ldr	r4, [pc, #216]	; (11870 <uart_callback+0x2f8>)
 */
static inline int uart_rx_buf_rsp(const struct device *dev, uint8_t *buf,
				  size_t len)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
   11798:	68ab      	ldr	r3, [r5, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1179a:	691b      	ldr	r3, [r3, #16]
   1179c:	2280      	movs	r2, #128	; 0x80
   1179e:	6821      	ldr	r1, [r4, #0]
   117a0:	4628      	mov	r0, r5
   117a2:	4798      	blx	r3
		LOG_DBG("new buffer: 0x%032x", (uint32_t)next_buffer);
   117a4:	6824      	ldr	r4, [r4, #0]
   117a6:	466d      	mov	r5, sp
   117a8:	b088      	sub	sp, #32
   117aa:	466b      	mov	r3, sp
   117ac:	f113 0210 	adds.w	r2, r3, #16
   117b0:	d014      	beq.n	117dc <uart_callback+0x264>
   117b2:	2110      	movs	r1, #16
   117b4:	b15a      	cbz	r2, 117ce <uart_callback+0x256>
   117b6:	4608      	mov	r0, r1
   117b8:	2904      	cmp	r1, #4
   117ba:	dd01      	ble.n	117c0 <uart_callback+0x248>
   117bc:	4e2d      	ldr	r6, [pc, #180]	; (11874 <uart_callback+0x2fc>)
   117be:	615e      	str	r6, [r3, #20]
   117c0:	2808      	cmp	r0, #8
   117c2:	dd01      	ble.n	117c8 <uart_callback+0x250>
   117c4:	4e23      	ldr	r6, [pc, #140]	; (11854 <uart_callback+0x2dc>)
   117c6:	619e      	str	r6, [r3, #24]
   117c8:	280c      	cmp	r0, #12
   117ca:	dd0a      	ble.n	117e2 <uart_callback+0x26a>
   117cc:	61dc      	str	r4, [r3, #28]
   117ce:	290f      	cmp	r1, #15
   117d0:	dd32      	ble.n	11838 <uart_callback+0x2c0>
   117d2:	2410      	movs	r4, #16
   117d4:	e007      	b.n	117e6 <uart_callback+0x26e>
		LOG_DBG("RX buffer requested");
   117d6:	f06f 041b 	mvn.w	r4, #27
   117da:	e7bc      	b.n	11756 <uart_callback+0x1de>
		LOG_DBG("new buffer: 0x%032x", (uint32_t)next_buffer);
   117dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   117e0:	e7e8      	b.n	117b4 <uart_callback+0x23c>
   117e2:	f06f 041b 	mvn.w	r4, #27
   117e6:	b13a      	cbz	r2, 117f8 <uart_callback+0x280>
   117e8:	2104      	movs	r1, #4
   117ea:	7139      	strb	r1, [r7, #4]
   117ec:	2100      	movs	r1, #0
   117ee:	7179      	strb	r1, [r7, #5]
   117f0:	71b9      	strb	r1, [r7, #6]
   117f2:	71f9      	strb	r1, [r7, #7]
   117f4:	6878      	ldr	r0, [r7, #4]
   117f6:	6118      	str	r0, [r3, #16]
   117f8:	2100      	movs	r1, #0
   117fa:	f36f 0100 	bfc	r1, #0, #1
   117fe:	f36f 0141 	bfc	r1, #1, #1
   11802:	f36f 0182 	bfc	r1, #2, #1
   11806:	f36f 01c5 	bfc	r1, #3, #3
   1180a:	2304      	movs	r3, #4
   1180c:	f363 1188 	bfi	r1, r3, #6, #3
   11810:	f3c4 030a 	ubfx	r3, r4, #0, #11
   11814:	f363 2153 	bfi	r1, r3, #9, #11
   11818:	f36f 511f 	bfc	r1, #20, #12
   1181c:	2300      	movs	r3, #0
   1181e:	480e      	ldr	r0, [pc, #56]	; (11858 <uart_callback+0x2e0>)
   11820:	f002 fc6c 	bl	140fc <z_impl_z_log_msg_static_create>
   11824:	46ad      	mov	sp, r5
		next_buffer = (next_buffer == buffer1) ? buffer2 : buffer1;
   11826:	4b12      	ldr	r3, [pc, #72]	; (11870 <uart_callback+0x2f8>)
   11828:	681a      	ldr	r2, [r3, #0]
   1182a:	4b13      	ldr	r3, [pc, #76]	; (11878 <uart_callback+0x300>)
   1182c:	429a      	cmp	r2, r3
   1182e:	d006      	beq.n	1183e <uart_callback+0x2c6>
   11830:	461a      	mov	r2, r3
   11832:	4b0f      	ldr	r3, [pc, #60]	; (11870 <uart_callback+0x2f8>)
   11834:	601a      	str	r2, [r3, #0]
		break;
   11836:	e708      	b.n	1164a <uart_callback+0xd2>
		LOG_DBG("new buffer: 0x%032x", (uint32_t)next_buffer);
   11838:	f06f 041b 	mvn.w	r4, #27
   1183c:	e7d3      	b.n	117e6 <uart_callback+0x26e>
		next_buffer = (next_buffer == buffer1) ? buffer2 : buffer1;
   1183e:	4a0f      	ldr	r2, [pc, #60]	; (1187c <uart_callback+0x304>)
   11840:	e7f7      	b.n	11832 <uart_callback+0x2ba>
   11842:	bf00      	nop
   11844:	20003094 	.word	0x20003094
   11848:	20000a70 	.word	0x20000a70
   1184c:	2000307c 	.word	0x2000307c
   11850:	00032248 	.word	0x00032248
   11854:	000323fc 	.word	0x000323fc
   11858:	00031dbc 	.word	0x00031dbc
   1185c:	00032274 	.word	0x00032274
   11860:	20005d3a 	.word	0x20005d3a
   11864:	20000ab8 	.word	0x20000ab8
   11868:	00032284 	.word	0x00032284
   1186c:	0003229c 	.word	0x0003229c
   11870:	20003078 	.word	0x20003078
   11874:	000322b4 	.word	0x000322b4
   11878:	200032a4 	.word	0x200032a4
   1187c:	20003324 	.word	0x20003324
		LOG_DBG("RX buffer released");
   11880:	466d      	mov	r5, sp
   11882:	b088      	sub	sp, #32
   11884:	466b      	mov	r3, sp
   11886:	f113 0210 	adds.w	r2, r3, #16
   1188a:	d00e      	beq.n	118aa <uart_callback+0x332>
   1188c:	210c      	movs	r1, #12
   1188e:	b142      	cbz	r2, 118a2 <uart_callback+0x32a>
   11890:	4608      	mov	r0, r1
   11892:	2904      	cmp	r1, #4
   11894:	dd01      	ble.n	1189a <uart_callback+0x322>
   11896:	4c5a      	ldr	r4, [pc, #360]	; (11a00 <uart_callback+0x488>)
   11898:	615c      	str	r4, [r3, #20]
   1189a:	2808      	cmp	r0, #8
   1189c:	dd08      	ble.n	118b0 <uart_callback+0x338>
   1189e:	4859      	ldr	r0, [pc, #356]	; (11a04 <uart_callback+0x48c>)
   118a0:	6198      	str	r0, [r3, #24]
   118a2:	290b      	cmp	r1, #11
   118a4:	dd27      	ble.n	118f6 <uart_callback+0x37e>
   118a6:	240c      	movs	r4, #12
   118a8:	e004      	b.n	118b4 <uart_callback+0x33c>
   118aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   118ae:	e7ee      	b.n	1188e <uart_callback+0x316>
   118b0:	f06f 041b 	mvn.w	r4, #27
   118b4:	b13a      	cbz	r2, 118c6 <uart_callback+0x34e>
   118b6:	2103      	movs	r1, #3
   118b8:	7139      	strb	r1, [r7, #4]
   118ba:	2100      	movs	r1, #0
   118bc:	7179      	strb	r1, [r7, #5]
   118be:	71b9      	strb	r1, [r7, #6]
   118c0:	71f9      	strb	r1, [r7, #7]
   118c2:	6878      	ldr	r0, [r7, #4]
   118c4:	6118      	str	r0, [r3, #16]
   118c6:	2100      	movs	r1, #0
   118c8:	f36f 0100 	bfc	r1, #0, #1
   118cc:	f36f 0141 	bfc	r1, #1, #1
   118d0:	f36f 0182 	bfc	r1, #2, #1
   118d4:	f36f 01c5 	bfc	r1, #3, #3
   118d8:	2304      	movs	r3, #4
   118da:	f363 1188 	bfi	r1, r3, #6, #3
   118de:	f3c4 030a 	ubfx	r3, r4, #0, #11
   118e2:	f363 2153 	bfi	r1, r3, #9, #11
   118e6:	f36f 511f 	bfc	r1, #20, #12
   118ea:	2300      	movs	r3, #0
   118ec:	4846      	ldr	r0, [pc, #280]	; (11a08 <uart_callback+0x490>)
   118ee:	f002 fc05 	bl	140fc <z_impl_z_log_msg_static_create>
   118f2:	46ad      	mov	sp, r5
   118f4:	e6a9      	b.n	1164a <uart_callback+0xd2>
   118f6:	f06f 041b 	mvn.w	r4, #27
   118fa:	e7db      	b.n	118b4 <uart_callback+0x33c>
   118fc:	4843      	ldr	r0, [pc, #268]	; (11a0c <uart_callback+0x494>)
   118fe:	f014 fcb5 	bl	2626c <z_impl_k_sem_give>
		LOG_INF("%d bytes sent", evt->data.tx.len);
   11902:	68a4      	ldr	r4, [r4, #8]
   11904:	466d      	mov	r5, sp
   11906:	b088      	sub	sp, #32
   11908:	466b      	mov	r3, sp
   1190a:	f113 0210 	adds.w	r2, r3, #16
   1190e:	d00d      	beq.n	1192c <uart_callback+0x3b4>
   11910:	210c      	movs	r1, #12
   11912:	b13a      	cbz	r2, 11924 <uart_callback+0x3ac>
   11914:	4608      	mov	r0, r1
   11916:	2904      	cmp	r1, #4
   11918:	dd01      	ble.n	1191e <uart_callback+0x3a6>
   1191a:	4e3d      	ldr	r6, [pc, #244]	; (11a10 <uart_callback+0x498>)
   1191c:	615e      	str	r6, [r3, #20]
   1191e:	2808      	cmp	r0, #8
   11920:	dd07      	ble.n	11932 <uart_callback+0x3ba>
   11922:	619c      	str	r4, [r3, #24]
   11924:	290b      	cmp	r1, #11
   11926:	dd27      	ble.n	11978 <uart_callback+0x400>
   11928:	240c      	movs	r4, #12
   1192a:	e004      	b.n	11936 <uart_callback+0x3be>
   1192c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11930:	e7ef      	b.n	11912 <uart_callback+0x39a>
   11932:	f06f 041b 	mvn.w	r4, #27
   11936:	b13a      	cbz	r2, 11948 <uart_callback+0x3d0>
   11938:	2103      	movs	r1, #3
   1193a:	7139      	strb	r1, [r7, #4]
   1193c:	2100      	movs	r1, #0
   1193e:	7179      	strb	r1, [r7, #5]
   11940:	71b9      	strb	r1, [r7, #6]
   11942:	71f9      	strb	r1, [r7, #7]
   11944:	6878      	ldr	r0, [r7, #4]
   11946:	6118      	str	r0, [r3, #16]
   11948:	2100      	movs	r1, #0
   1194a:	f36f 0100 	bfc	r1, #0, #1
   1194e:	f36f 0141 	bfc	r1, #1, #1
   11952:	f36f 0182 	bfc	r1, #2, #1
   11956:	f36f 01c5 	bfc	r1, #3, #3
   1195a:	2303      	movs	r3, #3
   1195c:	f363 1188 	bfi	r1, r3, #6, #3
   11960:	f3c4 030a 	ubfx	r3, r4, #0, #11
   11964:	f363 2153 	bfi	r1, r3, #9, #11
   11968:	f36f 511f 	bfc	r1, #20, #12
   1196c:	2300      	movs	r3, #0
   1196e:	4826      	ldr	r0, [pc, #152]	; (11a08 <uart_callback+0x490>)
   11970:	f002 fbc4 	bl	140fc <z_impl_z_log_msg_static_create>
   11974:	46ad      	mov	sp, r5
   11976:	e668      	b.n	1164a <uart_callback+0xd2>
   11978:	f06f 041b 	mvn.w	r4, #27
   1197c:	e7db      	b.n	11936 <uart_callback+0x3be>
   1197e:	4823      	ldr	r0, [pc, #140]	; (11a0c <uart_callback+0x494>)
   11980:	f014 fc74 	bl	2626c <z_impl_k_sem_give>
		LOG_DBG("TX aborted");
   11984:	466d      	mov	r5, sp
   11986:	b088      	sub	sp, #32
   11988:	466b      	mov	r3, sp
   1198a:	f113 0210 	adds.w	r2, r3, #16
   1198e:	d00e      	beq.n	119ae <uart_callback+0x436>
   11990:	210c      	movs	r1, #12
   11992:	b142      	cbz	r2, 119a6 <uart_callback+0x42e>
   11994:	4608      	mov	r0, r1
   11996:	2904      	cmp	r1, #4
   11998:	dd01      	ble.n	1199e <uart_callback+0x426>
   1199a:	4c1e      	ldr	r4, [pc, #120]	; (11a14 <uart_callback+0x49c>)
   1199c:	615c      	str	r4, [r3, #20]
   1199e:	2808      	cmp	r0, #8
   119a0:	dd08      	ble.n	119b4 <uart_callback+0x43c>
   119a2:	4818      	ldr	r0, [pc, #96]	; (11a04 <uart_callback+0x48c>)
   119a4:	6198      	str	r0, [r3, #24]
   119a6:	290b      	cmp	r1, #11
   119a8:	dd27      	ble.n	119fa <uart_callback+0x482>
   119aa:	240c      	movs	r4, #12
   119ac:	e004      	b.n	119b8 <uart_callback+0x440>
   119ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   119b2:	e7ee      	b.n	11992 <uart_callback+0x41a>
   119b4:	f06f 041b 	mvn.w	r4, #27
   119b8:	b13a      	cbz	r2, 119ca <uart_callback+0x452>
   119ba:	2103      	movs	r1, #3
   119bc:	7139      	strb	r1, [r7, #4]
   119be:	2100      	movs	r1, #0
   119c0:	7179      	strb	r1, [r7, #5]
   119c2:	71b9      	strb	r1, [r7, #6]
   119c4:	71f9      	strb	r1, [r7, #7]
   119c6:	6878      	ldr	r0, [r7, #4]
   119c8:	6118      	str	r0, [r3, #16]
   119ca:	2100      	movs	r1, #0
   119cc:	f36f 0100 	bfc	r1, #0, #1
   119d0:	f36f 0141 	bfc	r1, #1, #1
   119d4:	f36f 0182 	bfc	r1, #2, #1
   119d8:	f36f 01c5 	bfc	r1, #3, #3
   119dc:	2304      	movs	r3, #4
   119de:	f363 1188 	bfi	r1, r3, #6, #3
   119e2:	f3c4 030a 	ubfx	r3, r4, #0, #11
   119e6:	f363 2153 	bfi	r1, r3, #9, #11
   119ea:	f36f 511f 	bfc	r1, #20, #12
   119ee:	2300      	movs	r3, #0
   119f0:	4805      	ldr	r0, [pc, #20]	; (11a08 <uart_callback+0x490>)
   119f2:	f002 fb83 	bl	140fc <z_impl_z_log_msg_static_create>
   119f6:	46ad      	mov	sp, r5
}
   119f8:	e627      	b.n	1164a <uart_callback+0xd2>
		LOG_DBG("TX aborted");
   119fa:	f06f 041b 	mvn.w	r4, #27
   119fe:	e7db      	b.n	119b8 <uart_callback+0x440>
   11a00:	000322cc 	.word	0x000322cc
   11a04:	000323fc 	.word	0x000323fc
   11a08:	00031dbc 	.word	0x00031dbc
   11a0c:	20000ad0 	.word	0x20000ad0
   11a10:	000322e4 	.word	0x000322e4
   11a14:	000322f4 	.word	0x000322f4

00011a18 <uart_serial_add_callback>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

serial_ret_code_t uart_serial_add_callback(serial_event_callback_t callback)
{
	for (int i = 0; i < UART_SERIAL_CALLBACK_LIMIT; i++)
   11a18:	2300      	movs	r3, #0
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	dd02      	ble.n	11a24 <uart_serial_add_callback+0xc>
		{
			callback_list[i] = callback;
			return SERIAL_RET_CODE_SUCCESS;
		}
	}
	return SERIAL_RET_CODE_ERROR_NO_MEMORY;
   11a1e:	f06f 0005 	mvn.w	r0, #5
}
   11a22:	4770      	bx	lr
		if (callback_list[i] == NULL)
   11a24:	4a05      	ldr	r2, [pc, #20]	; (11a3c <uart_serial_add_callback+0x24>)
   11a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11a2a:	b10a      	cbz	r2, 11a30 <uart_serial_add_callback+0x18>
	for (int i = 0; i < UART_SERIAL_CALLBACK_LIMIT; i++)
   11a2c:	3301      	adds	r3, #1
   11a2e:	e7f4      	b.n	11a1a <uart_serial_add_callback+0x2>
			callback_list[i] = callback;
   11a30:	4a02      	ldr	r2, [pc, #8]	; (11a3c <uart_serial_add_callback+0x24>)
   11a32:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return SERIAL_RET_CODE_SUCCESS;
   11a36:	2000      	movs	r0, #0
   11a38:	4770      	bx	lr
   11a3a:	bf00      	nop
   11a3c:	20003088 	.word	0x20003088

00011a40 <uart_serial_enable>:
	return SERIAL_RET_CODE_ERROR_NO_MEMORY;
}

serial_ret_code_t uart_serial_enable()
{
	if (enabled) return SERIAL_RET_CODE_SUCCESS;
   11a40:	4b62      	ldr	r3, [pc, #392]	; (11bcc <uart_serial_enable+0x18c>)
   11a42:	781b      	ldrb	r3, [r3, #0]
   11a44:	b10b      	cbz	r3, 11a4a <uart_serial_enable+0xa>
   11a46:	2000      	movs	r0, #0
	input_buffer[UART_SERIAL_INPUT_BUFFER_SIZE] = '\0';
	enabled = true;
	
	LOG_INF("uart_serial enabled");
	return SERIAL_RET_CODE_SUCCESS;
}
   11a48:	4770      	bx	lr
{
   11a4a:	b510      	push	{r4, lr}
   11a4c:	b09a      	sub	sp, #104	; 0x68
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11a4e:	4860      	ldr	r0, [pc, #384]	; (11bd0 <uart_serial_enable+0x190>)
   11a50:	f01e ff96 	bl	30980 <z_device_is_ready>
	if (!device_is_ready(uart)) {
   11a54:	2800      	cmp	r0, #0
   11a56:	d046      	beq.n	11ae6 <uart_serial_enable+0xa6>
	const struct uart_driver_api *api =
   11a58:	4b5d      	ldr	r3, [pc, #372]	; (11bd0 <uart_serial_enable+0x190>)
   11a5a:	689b      	ldr	r3, [r3, #8]
	if (api->callback_set == NULL) {
   11a5c:	681b      	ldr	r3, [r3, #0]
   11a5e:	2b00      	cmp	r3, #0
   11a60:	d067      	beq.n	11b32 <uart_serial_enable+0xf2>
	return api->callback_set(dev, callback, user_data);
   11a62:	2200      	movs	r2, #0
   11a64:	495b      	ldr	r1, [pc, #364]	; (11bd4 <uart_serial_enable+0x194>)
   11a66:	485a      	ldr	r0, [pc, #360]	; (11bd0 <uart_serial_enable+0x190>)
   11a68:	4798      	blx	r3
	if (err)
   11a6a:	2800      	cmp	r0, #0
   11a6c:	d161      	bne.n	11b32 <uart_serial_enable+0xf2>
	next_buffer = buffer2;
   11a6e:	495a      	ldr	r1, [pc, #360]	; (11bd8 <uart_serial_enable+0x198>)
   11a70:	4b5a      	ldr	r3, [pc, #360]	; (11bdc <uart_serial_enable+0x19c>)
   11a72:	6019      	str	r1, [r3, #0]
	const struct uart_driver_api *api =
   11a74:	4856      	ldr	r0, [pc, #344]	; (11bd0 <uart_serial_enable+0x190>)
   11a76:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
   11a78:	68dc      	ldr	r4, [r3, #12]
   11a7a:	2364      	movs	r3, #100	; 0x64
   11a7c:	2280      	movs	r2, #128	; 0x80
   11a7e:	3980      	subs	r1, #128	; 0x80
   11a80:	47a0      	blx	r4
	if (err)
   11a82:	2800      	cmp	r0, #0
   11a84:	d17b      	bne.n	11b7e <uart_serial_enable+0x13e>
   11a86:	4856      	ldr	r0, [pc, #344]	; (11be0 <uart_serial_enable+0x1a0>)
   11a88:	f014 fbf0 	bl	2626c <z_impl_k_sem_give>
	input_buffer[UART_SERIAL_INPUT_BUFFER_SIZE] = '\0';
   11a8c:	2400      	movs	r4, #0
   11a8e:	4b55      	ldr	r3, [pc, #340]	; (11be4 <uart_serial_enable+0x1a4>)
   11a90:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	enabled = true;
   11a94:	4b4d      	ldr	r3, [pc, #308]	; (11bcc <uart_serial_enable+0x18c>)
   11a96:	2201      	movs	r2, #1
   11a98:	701a      	strb	r2, [r3, #0]
	LOG_INF("uart_serial enabled");
   11a9a:	4b53      	ldr	r3, [pc, #332]	; (11be8 <uart_serial_enable+0x1a8>)
   11a9c:	9307      	str	r3, [sp, #28]
   11a9e:	2302      	movs	r3, #2
   11aa0:	f88d 3004 	strb.w	r3, [sp, #4]
   11aa4:	f88d 4005 	strb.w	r4, [sp, #5]
   11aa8:	f88d 4006 	strb.w	r4, [sp, #6]
   11aac:	f88d 4007 	strb.w	r4, [sp, #7]
   11ab0:	9b01      	ldr	r3, [sp, #4]
   11ab2:	9306      	str	r3, [sp, #24]
   11ab4:	4621      	mov	r1, r4
   11ab6:	f364 0100 	bfi	r1, r4, #0, #1
   11aba:	f364 0141 	bfi	r1, r4, #1, #1
   11abe:	f364 0182 	bfi	r1, r4, #2, #1
   11ac2:	f364 01c5 	bfi	r1, r4, #3, #3
   11ac6:	2303      	movs	r3, #3
   11ac8:	f363 1188 	bfi	r1, r3, #6, #3
   11acc:	2308      	movs	r3, #8
   11ace:	f363 2153 	bfi	r1, r3, #9, #11
   11ad2:	f364 511f 	bfi	r1, r4, #20, #12
   11ad6:	4623      	mov	r3, r4
   11ad8:	aa06      	add	r2, sp, #24
   11ada:	4844      	ldr	r0, [pc, #272]	; (11bec <uart_serial_enable+0x1ac>)
   11adc:	f002 fb0e 	bl	140fc <z_impl_z_log_msg_static_create>
	return SERIAL_RET_CODE_SUCCESS;
   11ae0:	4620      	mov	r0, r4
}
   11ae2:	b01a      	add	sp, #104	; 0x68
   11ae4:	bd10      	pop	{r4, pc}
		LOG_ERR("UART device not ready!");
   11ae6:	4b42      	ldr	r3, [pc, #264]	; (11bf0 <uart_serial_enable+0x1b0>)
   11ae8:	9319      	str	r3, [sp, #100]	; 0x64
   11aea:	2302      	movs	r3, #2
   11aec:	f88d 3004 	strb.w	r3, [sp, #4]
   11af0:	2300      	movs	r3, #0
   11af2:	f88d 3005 	strb.w	r3, [sp, #5]
   11af6:	f88d 3006 	strb.w	r3, [sp, #6]
   11afa:	f88d 3007 	strb.w	r3, [sp, #7]
   11afe:	9a01      	ldr	r2, [sp, #4]
   11b00:	9218      	str	r2, [sp, #96]	; 0x60
   11b02:	4619      	mov	r1, r3
   11b04:	f363 0100 	bfi	r1, r3, #0, #1
   11b08:	f363 0141 	bfi	r1, r3, #1, #1
   11b0c:	f363 0182 	bfi	r1, r3, #2, #1
   11b10:	f363 01c5 	bfi	r1, r3, #3, #3
   11b14:	2201      	movs	r2, #1
   11b16:	f362 1188 	bfi	r1, r2, #6, #3
   11b1a:	2208      	movs	r2, #8
   11b1c:	f362 2153 	bfi	r1, r2, #9, #11
   11b20:	f363 511f 	bfi	r1, r3, #20, #12
   11b24:	aa18      	add	r2, sp, #96	; 0x60
   11b26:	4831      	ldr	r0, [pc, #196]	; (11bec <uart_serial_enable+0x1ac>)
   11b28:	f002 fae8 	bl	140fc <z_impl_z_log_msg_static_create>
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   11b2c:	f06f 0001 	mvn.w	r0, #1
   11b30:	e7d7      	b.n	11ae2 <uart_serial_enable+0xa2>
		LOG_ERR("unable to set uart_callback, make sure CONFIG_SERIAL=y and CONFIG_UART_ASYNC_API=y are set!");
   11b32:	4b30      	ldr	r3, [pc, #192]	; (11bf4 <uart_serial_enable+0x1b4>)
   11b34:	9313      	str	r3, [sp, #76]	; 0x4c
   11b36:	2302      	movs	r3, #2
   11b38:	f88d 3004 	strb.w	r3, [sp, #4]
   11b3c:	2300      	movs	r3, #0
   11b3e:	f88d 3005 	strb.w	r3, [sp, #5]
   11b42:	f88d 3006 	strb.w	r3, [sp, #6]
   11b46:	f88d 3007 	strb.w	r3, [sp, #7]
   11b4a:	9a01      	ldr	r2, [sp, #4]
   11b4c:	9212      	str	r2, [sp, #72]	; 0x48
   11b4e:	4619      	mov	r1, r3
   11b50:	f363 0100 	bfi	r1, r3, #0, #1
   11b54:	f363 0141 	bfi	r1, r3, #1, #1
   11b58:	f363 0182 	bfi	r1, r3, #2, #1
   11b5c:	f363 01c5 	bfi	r1, r3, #3, #3
   11b60:	2201      	movs	r2, #1
   11b62:	f362 1188 	bfi	r1, r2, #6, #3
   11b66:	2208      	movs	r2, #8
   11b68:	f362 2153 	bfi	r1, r2, #9, #11
   11b6c:	f363 511f 	bfi	r1, r3, #20, #12
   11b70:	aa12      	add	r2, sp, #72	; 0x48
   11b72:	481e      	ldr	r0, [pc, #120]	; (11bec <uart_serial_enable+0x1ac>)
   11b74:	f002 fac2 	bl	140fc <z_impl_z_log_msg_static_create>
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   11b78:	f06f 0001 	mvn.w	r0, #1
   11b7c:	e7b1      	b.n	11ae2 <uart_serial_enable+0xa2>
		LOG_ERR("unable to enable rx");
   11b7e:	4b1e      	ldr	r3, [pc, #120]	; (11bf8 <uart_serial_enable+0x1b8>)
   11b80:	930d      	str	r3, [sp, #52]	; 0x34
   11b82:	2302      	movs	r3, #2
   11b84:	f88d 3004 	strb.w	r3, [sp, #4]
   11b88:	2300      	movs	r3, #0
   11b8a:	f88d 3005 	strb.w	r3, [sp, #5]
   11b8e:	f88d 3006 	strb.w	r3, [sp, #6]
   11b92:	f88d 3007 	strb.w	r3, [sp, #7]
   11b96:	9a01      	ldr	r2, [sp, #4]
   11b98:	920c      	str	r2, [sp, #48]	; 0x30
   11b9a:	4619      	mov	r1, r3
   11b9c:	f363 0100 	bfi	r1, r3, #0, #1
   11ba0:	f363 0141 	bfi	r1, r3, #1, #1
   11ba4:	f363 0182 	bfi	r1, r3, #2, #1
   11ba8:	f363 01c5 	bfi	r1, r3, #3, #3
   11bac:	2201      	movs	r2, #1
   11bae:	f362 1188 	bfi	r1, r2, #6, #3
   11bb2:	2208      	movs	r2, #8
   11bb4:	f362 2153 	bfi	r1, r2, #9, #11
   11bb8:	f363 511f 	bfi	r1, r3, #20, #12
   11bbc:	aa0c      	add	r2, sp, #48	; 0x30
   11bbe:	480b      	ldr	r0, [pc, #44]	; (11bec <uart_serial_enable+0x1ac>)
   11bc0:	f002 fa9c 	bl	140fc <z_impl_z_log_msg_static_create>
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   11bc4:	f06f 0001 	mvn.w	r0, #1
   11bc8:	e78b      	b.n	11ae2 <uart_serial_enable+0xa2>
   11bca:	bf00      	nop
   11bcc:	20005d3a 	.word	0x20005d3a
   11bd0:	00031ac0 	.word	0x00031ac0
   11bd4:	00011579 	.word	0x00011579
   11bd8:	20003324 	.word	0x20003324
   11bdc:	20003078 	.word	0x20003078
   11be0:	20000ad0 	.word	0x20000ad0
   11be4:	200032a4 	.word	0x200032a4
   11be8:	0003238c 	.word	0x0003238c
   11bec:	00031dbc 	.word	0x00031dbc
   11bf0:	00032304 	.word	0x00032304
   11bf4:	0003231c 	.word	0x0003231c
   11bf8:	00032378 	.word	0x00032378

00011bfc <uart_serial_get_line>:
	
	return SERIAL_RET_CODE_SUCCESS;
}

serial_line_t const * uart_serial_get_line(k_timeout_t timeout)
{
   11bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bfe:	b091      	sub	sp, #68	; 0x44
   11c00:	af08      	add	r7, sp, #32
   11c02:	4605      	mov	r5, r0
   11c04:	460c      	mov	r4, r1
	LOG_DBG("getting next line");
   11c06:	466e      	mov	r6, sp
   11c08:	b088      	sub	sp, #32
   11c0a:	46b4      	mov	ip, r6
   11c0c:	f116 0210 	adds.w	r2, r6, #16
   11c10:	d011      	beq.n	11c36 <uart_serial_get_line+0x3a>
   11c12:	230c      	movs	r3, #12
   11c14:	b152      	cbz	r2, 11c2c <uart_serial_get_line+0x30>
   11c16:	4619      	mov	r1, r3
   11c18:	2b04      	cmp	r3, #4
   11c1a:	dd02      	ble.n	11c22 <uart_serial_get_line+0x26>
   11c1c:	483c      	ldr	r0, [pc, #240]	; (11d10 <uart_serial_get_line+0x114>)
   11c1e:	f8cc 0014 	str.w	r0, [ip, #20]
   11c22:	2908      	cmp	r1, #8
   11c24:	dd0a      	ble.n	11c3c <uart_serial_get_line+0x40>
   11c26:	493b      	ldr	r1, [pc, #236]	; (11d14 <uart_serial_get_line+0x118>)
   11c28:	f8cc 1018 	str.w	r1, [ip, #24]
   11c2c:	2b0b      	cmp	r3, #11
   11c2e:	dd49      	ble.n	11cc4 <uart_serial_get_line+0xc8>
   11c30:	f04f 0e0c 	mov.w	lr, #12
   11c34:	e004      	b.n	11c40 <uart_serial_get_line+0x44>
   11c36:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11c3a:	e7eb      	b.n	11c14 <uart_serial_get_line+0x18>
   11c3c:	f06f 0e1b 	mvn.w	lr, #27
   11c40:	b142      	cbz	r2, 11c54 <uart_serial_get_line+0x58>
   11c42:	2303      	movs	r3, #3
   11c44:	713b      	strb	r3, [r7, #4]
   11c46:	2300      	movs	r3, #0
   11c48:	717b      	strb	r3, [r7, #5]
   11c4a:	71bb      	strb	r3, [r7, #6]
   11c4c:	71fb      	strb	r3, [r7, #7]
   11c4e:	6878      	ldr	r0, [r7, #4]
   11c50:	f8cc 0010 	str.w	r0, [ip, #16]
   11c54:	2100      	movs	r1, #0
   11c56:	f36f 0100 	bfc	r1, #0, #1
   11c5a:	f36f 0141 	bfc	r1, #1, #1
   11c5e:	f36f 0182 	bfc	r1, #2, #1
   11c62:	f36f 01c5 	bfc	r1, #3, #3
   11c66:	2304      	movs	r3, #4
   11c68:	f363 1188 	bfi	r1, r3, #6, #3
   11c6c:	f3ce 0e0a 	ubfx	lr, lr, #0, #11
   11c70:	f36e 2153 	bfi	r1, lr, #9, #11
   11c74:	f36f 511f 	bfc	r1, #20, #12
   11c78:	2300      	movs	r3, #0
   11c7a:	4827      	ldr	r0, [pc, #156]	; (11d18 <uart_serial_get_line+0x11c>)
   11c7c:	f002 fa3e 	bl	140fc <z_impl_z_log_msg_static_create>
   11c80:	46b5      	mov	sp, r6
	line.mutable.len = 0;
   11c82:	4b26      	ldr	r3, [pc, #152]	; (11d1c <uart_serial_get_line+0x120>)
   11c84:	2200      	movs	r2, #0
   11c86:	601a      	str	r2, [r3, #0]
	if (!enabled)
   11c88:	4b25      	ldr	r3, [pc, #148]	; (11d20 <uart_serial_get_line+0x124>)
   11c8a:	781b      	ldrb	r3, [r3, #0]
   11c8c:	b1eb      	cbz	r3, 11cca <uart_serial_get_line+0xce>
	{
		LOG_ERR("uart_serial not enabled");
		return &(line.fixed);
	}
	
	return serial_internal_get_line(&sem_data_ready, timeout, &line, input_buffer, UART_SERIAL_INPUT_BUFFER_SIZE, &start_index, &bytes_in_buffer, end_character_list, end_character_count, fire_callbacks);
   11c8e:	4b25      	ldr	r3, [pc, #148]	; (11d24 <uart_serial_get_line+0x128>)
   11c90:	9307      	str	r3, [sp, #28]
   11c92:	4b25      	ldr	r3, [pc, #148]	; (11d28 <uart_serial_get_line+0x12c>)
   11c94:	681b      	ldr	r3, [r3, #0]
   11c96:	9306      	str	r3, [sp, #24]
   11c98:	4b24      	ldr	r3, [pc, #144]	; (11d2c <uart_serial_get_line+0x130>)
   11c9a:	681b      	ldr	r3, [r3, #0]
   11c9c:	9305      	str	r3, [sp, #20]
   11c9e:	4b24      	ldr	r3, [pc, #144]	; (11d30 <uart_serial_get_line+0x134>)
   11ca0:	9304      	str	r3, [sp, #16]
   11ca2:	4b24      	ldr	r3, [pc, #144]	; (11d34 <uart_serial_get_line+0x138>)
   11ca4:	9303      	str	r3, [sp, #12]
   11ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
   11caa:	9302      	str	r3, [sp, #8]
   11cac:	4b22      	ldr	r3, [pc, #136]	; (11d38 <uart_serial_get_line+0x13c>)
   11cae:	9301      	str	r3, [sp, #4]
   11cb0:	4b1a      	ldr	r3, [pc, #104]	; (11d1c <uart_serial_get_line+0x120>)
   11cb2:	9300      	str	r3, [sp, #0]
   11cb4:	462a      	mov	r2, r5
   11cb6:	4623      	mov	r3, r4
   11cb8:	4820      	ldr	r0, [pc, #128]	; (11d3c <uart_serial_get_line+0x140>)
   11cba:	f7ff f9db 	bl	11074 <serial_internal_get_line>
}
   11cbe:	3724      	adds	r7, #36	; 0x24
   11cc0:	46bd      	mov	sp, r7
   11cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("getting next line");
   11cc4:	f06f 0e1b 	mvn.w	lr, #27
   11cc8:	e7ba      	b.n	11c40 <uart_serial_get_line+0x44>
		LOG_ERR("uart_serial not enabled");
   11cca:	4b1d      	ldr	r3, [pc, #116]	; (11d40 <uart_serial_get_line+0x144>)
   11ccc:	61fb      	str	r3, [r7, #28]
   11cce:	2302      	movs	r3, #2
   11cd0:	713b      	strb	r3, [r7, #4]
   11cd2:	4613      	mov	r3, r2
   11cd4:	717a      	strb	r2, [r7, #5]
   11cd6:	71ba      	strb	r2, [r7, #6]
   11cd8:	71fa      	strb	r2, [r7, #7]
   11cda:	687a      	ldr	r2, [r7, #4]
   11cdc:	61ba      	str	r2, [r7, #24]
   11cde:	4619      	mov	r1, r3
   11ce0:	f363 0100 	bfi	r1, r3, #0, #1
   11ce4:	f363 0141 	bfi	r1, r3, #1, #1
   11ce8:	f363 0182 	bfi	r1, r3, #2, #1
   11cec:	f363 01c5 	bfi	r1, r3, #3, #3
   11cf0:	2201      	movs	r2, #1
   11cf2:	f362 1188 	bfi	r1, r2, #6, #3
   11cf6:	2208      	movs	r2, #8
   11cf8:	f362 2153 	bfi	r1, r2, #9, #11
   11cfc:	f363 511f 	bfi	r1, r3, #20, #12
   11d00:	f107 0218 	add.w	r2, r7, #24
   11d04:	4804      	ldr	r0, [pc, #16]	; (11d18 <uart_serial_get_line+0x11c>)
   11d06:	f002 f9f9 	bl	140fc <z_impl_z_log_msg_static_create>
		return &(line.fixed);
   11d0a:	4804      	ldr	r0, [pc, #16]	; (11d1c <uart_serial_get_line+0x120>)
   11d0c:	e7d7      	b.n	11cbe <uart_serial_get_line+0xc2>
   11d0e:	bf00      	nop
   11d10:	000320f8 	.word	0x000320f8
   11d14:	000323e4 	.word	0x000323e4
   11d18:	00031dbc 	.word	0x00031dbc
   11d1c:	20000598 	.word	0x20000598
   11d20:	20005d3a 	.word	0x20005d3a
   11d24:	00011559 	.word	0x00011559
   11d28:	2000308c 	.word	0x2000308c
   11d2c:	20003090 	.word	0x20003090
   11d30:	20003094 	.word	0x20003094
   11d34:	20003098 	.word	0x20003098
   11d38:	200032a4 	.word	0x200032a4
   11d3c:	20000a70 	.word	0x20000a70
   11d40:	000323a0 	.word	0x000323a0

00011d44 <uart_serial_send>:

serial_ret_code_t uart_serial_send(k_timeout_t timeout, char const * p_data, int len)
{
	if (len == 0) return SERIAL_RET_CODE_SUCCESS;
   11d44:	b90b      	cbnz	r3, 11d4a <uart_serial_send+0x6>
   11d46:	2000      	movs	r0, #0
	case -ENOTSUP:
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
	default:
		return SERIAL_RET_CODE_ERROR_UNKNOWN;
	}
}
   11d48:	4770      	bx	lr
{
   11d4a:	b570      	push	{r4, r5, r6, lr}
   11d4c:	b088      	sub	sp, #32
   11d4e:	4614      	mov	r4, r2
   11d50:	461d      	mov	r5, r3
	return z_impl_k_sem_take(sem, timeout);
   11d52:	4602      	mov	r2, r0
   11d54:	460b      	mov	r3, r1
   11d56:	4825      	ldr	r0, [pc, #148]	; (11dec <uart_serial_send+0xa8>)
   11d58:	f014 fab0 	bl	262bc <z_impl_k_sem_take>
	if (k_sem_take(&sem_wait_for_tx, timeout) != 0)
   11d5c:	b958      	cbnz	r0, 11d76 <uart_serial_send+0x32>
	const struct uart_driver_api *api =
   11d5e:	4824      	ldr	r0, [pc, #144]	; (11df0 <uart_serial_send+0xac>)
   11d60:	6883      	ldr	r3, [r0, #8]
	return api->tx(dev, buf, len, timeout);
   11d62:	685e      	ldr	r6, [r3, #4]
   11d64:	2364      	movs	r3, #100	; 0x64
   11d66:	462a      	mov	r2, r5
   11d68:	4621      	mov	r1, r4
   11d6a:	47b0      	blx	r6
	if (err < 0)
   11d6c:	1e04      	subs	r4, r0, #0
   11d6e:	db27      	blt.n	11dc0 <uart_serial_send+0x7c>
		return SERIAL_RET_CODE_SUCCESS;
   11d70:	2000      	movs	r0, #0
}
   11d72:	b008      	add	sp, #32
   11d74:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("uart tx busy");
   11d76:	4b1f      	ldr	r3, [pc, #124]	; (11df4 <uart_serial_send+0xb0>)
   11d78:	9307      	str	r3, [sp, #28]
   11d7a:	2202      	movs	r2, #2
   11d7c:	f88d 2004 	strb.w	r2, [sp, #4]
   11d80:	2300      	movs	r3, #0
   11d82:	f88d 3005 	strb.w	r3, [sp, #5]
   11d86:	f88d 3006 	strb.w	r3, [sp, #6]
   11d8a:	f88d 3007 	strb.w	r3, [sp, #7]
   11d8e:	9901      	ldr	r1, [sp, #4]
   11d90:	9106      	str	r1, [sp, #24]
   11d92:	4619      	mov	r1, r3
   11d94:	f363 0100 	bfi	r1, r3, #0, #1
   11d98:	f363 0141 	bfi	r1, r3, #1, #1
   11d9c:	f363 0182 	bfi	r1, r3, #2, #1
   11da0:	f363 01c5 	bfi	r1, r3, #3, #3
   11da4:	f362 1188 	bfi	r1, r2, #6, #3
   11da8:	2208      	movs	r2, #8
   11daa:	f362 2153 	bfi	r1, r2, #9, #11
   11dae:	f363 511f 	bfi	r1, r3, #20, #12
   11db2:	aa06      	add	r2, sp, #24
   11db4:	4810      	ldr	r0, [pc, #64]	; (11df8 <uart_serial_send+0xb4>)
   11db6:	f002 f9a1 	bl	140fc <z_impl_z_log_msg_static_create>
		return SERIAL_RET_CODE_ERROR_BUSY;
   11dba:	f06f 0004 	mvn.w	r0, #4
   11dbe:	e7d8      	b.n	11d72 <uart_serial_send+0x2e>
	z_impl_k_sem_give(sem);
   11dc0:	480a      	ldr	r0, [pc, #40]	; (11dec <uart_serial_send+0xa8>)
   11dc2:	f014 fa53 	bl	2626c <z_impl_k_sem_give>
	switch (err)
   11dc6:	f114 0f10 	cmn.w	r4, #16
   11dca:	d009      	beq.n	11de0 <uart_serial_send+0x9c>
   11dcc:	b15c      	cbz	r4, 11de6 <uart_serial_send+0xa2>
   11dce:	f114 0f86 	cmn.w	r4, #134	; 0x86
   11dd2:	d002      	beq.n	11dda <uart_serial_send+0x96>
		return SERIAL_RET_CODE_ERROR_UNKNOWN;
   11dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11dd8:	e7cb      	b.n	11d72 <uart_serial_send+0x2e>
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   11dda:	f06f 0001 	mvn.w	r0, #1
   11dde:	e7c8      	b.n	11d72 <uart_serial_send+0x2e>
		return SERIAL_RET_CODE_ERROR_BUSY;
   11de0:	f06f 0004 	mvn.w	r0, #4
   11de4:	e7c5      	b.n	11d72 <uart_serial_send+0x2e>
	switch (err)
   11de6:	2000      	movs	r0, #0
   11de8:	e7c3      	b.n	11d72 <uart_serial_send+0x2e>
   11dea:	bf00      	nop
   11dec:	20000ad0 	.word	0x20000ad0
   11df0:	00031ac0 	.word	0x00031ac0
   11df4:	000323b8 	.word	0x000323b8
   11df8:	00031dbc 	.word	0x00031dbc

00011dfc <uart_serial_vsendf>:
	va_end(args);
	return result;
}

serial_ret_code_t uart_serial_vsendf(k_timeout_t timeout, const char * format, va_list args)
{
   11dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dfe:	b089      	sub	sp, #36	; 0x24
   11e00:	4605      	mov	r5, r0
   11e02:	460c      	mov	r4, r1
   11e04:	4616      	mov	r6, r2
   11e06:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   11e08:	4602      	mov	r2, r0
   11e0a:	460b      	mov	r3, r1
   11e0c:	4820      	ldr	r0, [pc, #128]	; (11e90 <uart_serial_vsendf+0x94>)
   11e0e:	f014 fa55 	bl	262bc <z_impl_k_sem_take>
	if (k_sem_take(&sem_wait_for_tx, timeout) != 0)
   11e12:	b9a0      	cbnz	r0, 11e3e <uart_serial_vsendf+0x42>
	z_impl_k_sem_give(sem);
   11e14:	481e      	ldr	r0, [pc, #120]	; (11e90 <uart_serial_vsendf+0x94>)
   11e16:	f014 fa29 	bl	2626c <z_impl_k_sem_give>
		LOG_WRN("uart tx busy");
		return SERIAL_RET_CODE_ERROR_BUSY;
	}
	k_sem_give(&sem_wait_for_tx);
	
	int len = vsnprintf(output_buffer, UART_SERIAL_OUTPUT_BUFFER_SIZE, format, args);
   11e1a:	463b      	mov	r3, r7
   11e1c:	4632      	mov	r2, r6
   11e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
   11e22:	481c      	ldr	r0, [pc, #112]	; (11e94 <uart_serial_vsendf+0x98>)
   11e24:	f006 fea8 	bl	18b78 <vsnprintf>
   11e28:	4603      	mov	r3, r0
	if ((len < 0) || (len > UART_SERIAL_OUTPUT_BUFFER_SIZE)) return SERIAL_RET_CODE_ERROR_BUFFER_FULL;
   11e2a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   11e2e:	d82b      	bhi.n	11e88 <uart_serial_vsendf+0x8c>
	return uart_serial_send(timeout, output_buffer, len);
   11e30:	4a18      	ldr	r2, [pc, #96]	; (11e94 <uart_serial_vsendf+0x98>)
   11e32:	4628      	mov	r0, r5
   11e34:	4621      	mov	r1, r4
   11e36:	f7ff ff85 	bl	11d44 <uart_serial_send>
}
   11e3a:	b009      	add	sp, #36	; 0x24
   11e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("uart tx busy");
   11e3e:	4b16      	ldr	r3, [pc, #88]	; (11e98 <uart_serial_vsendf+0x9c>)
   11e40:	9307      	str	r3, [sp, #28]
   11e42:	2202      	movs	r2, #2
   11e44:	f88d 2004 	strb.w	r2, [sp, #4]
   11e48:	2300      	movs	r3, #0
   11e4a:	f88d 3005 	strb.w	r3, [sp, #5]
   11e4e:	f88d 3006 	strb.w	r3, [sp, #6]
   11e52:	f88d 3007 	strb.w	r3, [sp, #7]
   11e56:	9901      	ldr	r1, [sp, #4]
   11e58:	9106      	str	r1, [sp, #24]
   11e5a:	4619      	mov	r1, r3
   11e5c:	f363 0100 	bfi	r1, r3, #0, #1
   11e60:	f363 0141 	bfi	r1, r3, #1, #1
   11e64:	f363 0182 	bfi	r1, r3, #2, #1
   11e68:	f363 01c5 	bfi	r1, r3, #3, #3
   11e6c:	f362 1188 	bfi	r1, r2, #6, #3
   11e70:	2208      	movs	r2, #8
   11e72:	f362 2153 	bfi	r1, r2, #9, #11
   11e76:	f363 511f 	bfi	r1, r3, #20, #12
   11e7a:	aa06      	add	r2, sp, #24
   11e7c:	4807      	ldr	r0, [pc, #28]	; (11e9c <uart_serial_vsendf+0xa0>)
   11e7e:	f002 f93d 	bl	140fc <z_impl_z_log_msg_static_create>
		return SERIAL_RET_CODE_ERROR_BUSY;
   11e82:	f06f 0004 	mvn.w	r0, #4
   11e86:	e7d8      	b.n	11e3a <uart_serial_vsendf+0x3e>
	if ((len < 0) || (len > UART_SERIAL_OUTPUT_BUFFER_SIZE)) return SERIAL_RET_CODE_ERROR_BUFFER_FULL;
   11e88:	f06f 0003 	mvn.w	r0, #3
   11e8c:	e7d5      	b.n	11e3a <uart_serial_vsendf+0x3e>
   11e8e:	bf00      	nop
   11e90:	20000ad0 	.word	0x20000ad0
   11e94:	200031a0 	.word	0x200031a0
   11e98:	000323b8 	.word	0x000323b8
   11e9c:	00031dbc 	.word	0x00031dbc

00011ea0 <uart_serial_set_end_character_list>:

serial_ret_code_t uart_serial_set_end_character_list(char const * p_list, int len)
{
   11ea0:	b510      	push	{r4, lr}
   11ea2:	b088      	sub	sp, #32
	end_character_count = len;
   11ea4:	4b15      	ldr	r3, [pc, #84]	; (11efc <uart_serial_set_end_character_list+0x5c>)
   11ea6:	6019      	str	r1, [r3, #0]
	end_character_list = p_list;
   11ea8:	4b15      	ldr	r3, [pc, #84]	; (11f00 <uart_serial_set_end_character_list+0x60>)
   11eaa:	6018      	str	r0, [r3, #0]
	LOG_INF("end character list updated");
   11eac:	4b15      	ldr	r3, [pc, #84]	; (11f04 <uart_serial_set_end_character_list+0x64>)
   11eae:	9307      	str	r3, [sp, #28]
   11eb0:	2302      	movs	r3, #2
   11eb2:	f88d 3004 	strb.w	r3, [sp, #4]
   11eb6:	2400      	movs	r4, #0
   11eb8:	f88d 4005 	strb.w	r4, [sp, #5]
   11ebc:	f88d 4006 	strb.w	r4, [sp, #6]
   11ec0:	f88d 4007 	strb.w	r4, [sp, #7]
   11ec4:	9b01      	ldr	r3, [sp, #4]
   11ec6:	9306      	str	r3, [sp, #24]
   11ec8:	4621      	mov	r1, r4
   11eca:	f364 0100 	bfi	r1, r4, #0, #1
   11ece:	f364 0141 	bfi	r1, r4, #1, #1
   11ed2:	f364 0182 	bfi	r1, r4, #2, #1
   11ed6:	f364 01c5 	bfi	r1, r4, #3, #3
   11eda:	2303      	movs	r3, #3
   11edc:	f363 1188 	bfi	r1, r3, #6, #3
   11ee0:	2308      	movs	r3, #8
   11ee2:	f363 2153 	bfi	r1, r3, #9, #11
   11ee6:	f364 511f 	bfi	r1, r4, #20, #12
   11eea:	4623      	mov	r3, r4
   11eec:	aa06      	add	r2, sp, #24
   11eee:	4806      	ldr	r0, [pc, #24]	; (11f08 <uart_serial_set_end_character_list+0x68>)
   11ef0:	f002 f904 	bl	140fc <z_impl_z_log_msg_static_create>
	return SERIAL_RET_CODE_SUCCESS;
}
   11ef4:	4620      	mov	r0, r4
   11ef6:	b008      	add	sp, #32
   11ef8:	bd10      	pop	{r4, pc}
   11efa:	bf00      	nop
   11efc:	2000308c 	.word	0x2000308c
   11f00:	20003090 	.word	0x20003090
   11f04:	000323c8 	.word	0x000323c8
   11f08:	00031dbc 	.word	0x00031dbc

00011f0c <fire_callbacks>:


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC FUNCTIONS
static void fire_callbacks(serial_event_t const * p_evt)
{
   11f0c:	b538      	push	{r3, r4, r5, lr}
   11f0e:	4605      	mov	r5, r0
	for (int i = 0; i < BLE_SERIAL_CALLBACK_LIMIT; i++)
   11f10:	2400      	movs	r4, #0
   11f12:	2c00      	cmp	r4, #0
   11f14:	dd00      	ble.n	11f18 <fire_callbacks+0xc>
		if (callback_list[i] != NULL)
		{
			callback_list[i](p_evt);
		}
	}
}
   11f16:	bd38      	pop	{r3, r4, r5, pc}
		if (callback_list[i] != NULL)
   11f18:	4b03      	ldr	r3, [pc, #12]	; (11f28 <fire_callbacks+0x1c>)
   11f1a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   11f1e:	b10b      	cbz	r3, 11f24 <fire_callbacks+0x18>
			callback_list[i](p_evt);
   11f20:	4628      	mov	r0, r5
   11f22:	4798      	blx	r3
	for (int i = 0; i < BLE_SERIAL_CALLBACK_LIMIT; i++)
   11f24:	3401      	adds	r4, #1
   11f26:	e7f4      	b.n	11f12 <fire_callbacks+0x6>
   11f28:	200033b4 	.word	0x200033b4

00011f2c <disconnected>:
{
   11f2c:	b590      	push	{r4, r7, lr}
   11f2e:	b083      	sub	sp, #12
   11f30:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (Reason: %d)", reason);
   11f32:	b088      	sub	sp, #32
   11f34:	466b      	mov	r3, sp
   11f36:	f113 0210 	adds.w	r2, r3, #16
   11f3a:	d030      	beq.n	11f9e <disconnected+0x72>
   11f3c:	200c      	movs	r0, #12
   11f3e:	b142      	cbz	r2, 11f52 <disconnected+0x26>
   11f40:	4684      	mov	ip, r0
   11f42:	2804      	cmp	r0, #4
   11f44:	dd01      	ble.n	11f4a <disconnected+0x1e>
   11f46:	4c19      	ldr	r4, [pc, #100]	; (11fac <disconnected+0x80>)
   11f48:	615c      	str	r4, [r3, #20]
   11f4a:	f1bc 0f08 	cmp.w	ip, #8
   11f4e:	dd00      	ble.n	11f52 <disconnected+0x26>
   11f50:	6199      	str	r1, [r3, #24]
   11f52:	280b      	cmp	r0, #11
   11f54:	dd26      	ble.n	11fa4 <disconnected+0x78>
   11f56:	f04f 0c0c 	mov.w	ip, #12
   11f5a:	b13a      	cbz	r2, 11f6c <disconnected+0x40>
   11f5c:	2103      	movs	r1, #3
   11f5e:	7139      	strb	r1, [r7, #4]
   11f60:	2100      	movs	r1, #0
   11f62:	7179      	strb	r1, [r7, #5]
   11f64:	71b9      	strb	r1, [r7, #6]
   11f66:	71f9      	strb	r1, [r7, #7]
   11f68:	6878      	ldr	r0, [r7, #4]
   11f6a:	6118      	str	r0, [r3, #16]
   11f6c:	2100      	movs	r1, #0
   11f6e:	f36f 0100 	bfc	r1, #0, #1
   11f72:	f36f 0141 	bfc	r1, #1, #1
   11f76:	f36f 0182 	bfc	r1, #2, #1
   11f7a:	f36f 01c5 	bfc	r1, #3, #3
   11f7e:	2303      	movs	r3, #3
   11f80:	f363 1188 	bfi	r1, r3, #6, #3
   11f84:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   11f88:	f36c 2153 	bfi	r1, ip, #9, #11
   11f8c:	f36f 511f 	bfc	r1, #20, #12
   11f90:	2300      	movs	r3, #0
   11f92:	4807      	ldr	r0, [pc, #28]	; (11fb0 <disconnected+0x84>)
   11f94:	f002 f8b2 	bl	140fc <z_impl_z_log_msg_static_create>
}
   11f98:	370c      	adds	r7, #12
   11f9a:	46bd      	mov	sp, r7
   11f9c:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Disconnected (Reason: %d)", reason);
   11f9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11fa2:	e7cc      	b.n	11f3e <disconnected+0x12>
   11fa4:	f06f 0c1b 	mvn.w	ip, #27
   11fa8:	e7d7      	b.n	11f5a <disconnected+0x2e>
   11faa:	bf00      	nop
   11fac:	00032418 	.word	0x00032418
   11fb0:	00031ccc 	.word	0x00031ccc

00011fb4 <connected>:
{
   11fb4:	b5b0      	push	{r4, r5, r7, lr}
   11fb6:	b088      	sub	sp, #32
   11fb8:	af00      	add	r7, sp, #0
	if (err)
   11fba:	2900      	cmp	r1, #0
   11fbc:	d041      	beq.n	12042 <connected+0x8e>
   11fbe:	4608      	mov	r0, r1
		LOG_ERR("Connect failed (err: %d)", err);
   11fc0:	466c      	mov	r4, sp
   11fc2:	b088      	sub	sp, #32
   11fc4:	466b      	mov	r3, sp
   11fc6:	f113 0210 	adds.w	r2, r3, #16
   11fca:	d00f      	beq.n	11fec <connected+0x38>
   11fcc:	210c      	movs	r1, #12
   11fce:	b142      	cbz	r2, 11fe2 <connected+0x2e>
   11fd0:	468c      	mov	ip, r1
   11fd2:	2904      	cmp	r1, #4
   11fd4:	dd01      	ble.n	11fda <connected+0x26>
   11fd6:	4d2b      	ldr	r5, [pc, #172]	; (12084 <connected+0xd0>)
   11fd8:	615d      	str	r5, [r3, #20]
   11fda:	f1bc 0f08 	cmp.w	ip, #8
   11fde:	dd08      	ble.n	11ff2 <connected+0x3e>
   11fe0:	6198      	str	r0, [r3, #24]
   11fe2:	290b      	cmp	r1, #11
   11fe4:	dd2a      	ble.n	1203c <connected+0x88>
   11fe6:	f04f 0c0c 	mov.w	ip, #12
   11fea:	e004      	b.n	11ff6 <connected+0x42>
   11fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11ff0:	e7ed      	b.n	11fce <connected+0x1a>
   11ff2:	f06f 0c1b 	mvn.w	ip, #27
   11ff6:	b13a      	cbz	r2, 12008 <connected+0x54>
   11ff8:	2103      	movs	r1, #3
   11ffa:	7139      	strb	r1, [r7, #4]
   11ffc:	2100      	movs	r1, #0
   11ffe:	7179      	strb	r1, [r7, #5]
   12000:	71b9      	strb	r1, [r7, #6]
   12002:	71f9      	strb	r1, [r7, #7]
   12004:	6878      	ldr	r0, [r7, #4]
   12006:	6118      	str	r0, [r3, #16]
   12008:	2100      	movs	r1, #0
   1200a:	f36f 0100 	bfc	r1, #0, #1
   1200e:	f36f 0141 	bfc	r1, #1, #1
   12012:	f36f 0182 	bfc	r1, #2, #1
   12016:	f36f 01c5 	bfc	r1, #3, #3
   1201a:	2301      	movs	r3, #1
   1201c:	f363 1188 	bfi	r1, r3, #6, #3
   12020:	f3cc 030a 	ubfx	r3, ip, #0, #11
   12024:	f363 2153 	bfi	r1, r3, #9, #11
   12028:	f36f 511f 	bfc	r1, #20, #12
   1202c:	2300      	movs	r3, #0
   1202e:	4816      	ldr	r0, [pc, #88]	; (12088 <connected+0xd4>)
   12030:	f002 f864 	bl	140fc <z_impl_z_log_msg_static_create>
   12034:	46a5      	mov	sp, r4
}
   12036:	3720      	adds	r7, #32
   12038:	46bd      	mov	sp, r7
   1203a:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Connect failed (err: %d)", err);
   1203c:	f06f 0c1b 	mvn.w	ip, #27
   12040:	e7d9      	b.n	11ff6 <connected+0x42>
		LOG_INF("Connected");
   12042:	4b12      	ldr	r3, [pc, #72]	; (1208c <connected+0xd8>)
   12044:	61fb      	str	r3, [r7, #28]
   12046:	2302      	movs	r3, #2
   12048:	713b      	strb	r3, [r7, #4]
   1204a:	2300      	movs	r3, #0
   1204c:	717b      	strb	r3, [r7, #5]
   1204e:	71bb      	strb	r3, [r7, #6]
   12050:	71fb      	strb	r3, [r7, #7]
   12052:	687a      	ldr	r2, [r7, #4]
   12054:	61ba      	str	r2, [r7, #24]
   12056:	4619      	mov	r1, r3
   12058:	f363 0100 	bfi	r1, r3, #0, #1
   1205c:	f363 0141 	bfi	r1, r3, #1, #1
   12060:	f363 0182 	bfi	r1, r3, #2, #1
   12064:	f363 01c5 	bfi	r1, r3, #3, #3
   12068:	2203      	movs	r2, #3
   1206a:	f362 1188 	bfi	r1, r2, #6, #3
   1206e:	2208      	movs	r2, #8
   12070:	f362 2153 	bfi	r1, r2, #9, #11
   12074:	f363 511f 	bfi	r1, r3, #20, #12
   12078:	f107 0218 	add.w	r2, r7, #24
   1207c:	4802      	ldr	r0, [pc, #8]	; (12088 <connected+0xd4>)
   1207e:	f002 f83d 	bl	140fc <z_impl_z_log_msg_static_create>
}
   12082:	e7d8      	b.n	12036 <connected+0x82>
   12084:	00032434 	.word	0x00032434
   12088:	00031ccc 	.word	0x00031ccc
   1208c:	00032450 	.word	0x00032450

00012090 <bt_ready>:
{
   12090:	b5f0      	push	{r4, r5, r6, r7, lr}
   12092:	b083      	sub	sp, #12
   12094:	af00      	add	r7, sp, #0
	if (err)
   12096:	2800      	cmp	r0, #0
   12098:	d03d      	beq.n	12116 <bt_ready+0x86>
   1209a:	4605      	mov	r5, r0
		LOG_ERR("bt_enable returned %d", err);
   1209c:	466c      	mov	r4, sp
   1209e:	b088      	sub	sp, #32
   120a0:	466b      	mov	r3, sp
   120a2:	f113 0210 	adds.w	r2, r3, #16
   120a6:	d030      	beq.n	1210a <bt_ready+0x7a>
   120a8:	210c      	movs	r1, #12
   120aa:	b13a      	cbz	r2, 120bc <bt_ready+0x2c>
   120ac:	4608      	mov	r0, r1
   120ae:	2904      	cmp	r1, #4
   120b0:	dd01      	ble.n	120b6 <bt_ready+0x26>
   120b2:	4e1b      	ldr	r6, [pc, #108]	; (12120 <bt_ready+0x90>)
   120b4:	615e      	str	r6, [r3, #20]
   120b6:	2808      	cmp	r0, #8
   120b8:	dd00      	ble.n	120bc <bt_ready+0x2c>
   120ba:	619d      	str	r5, [r3, #24]
   120bc:	290b      	cmp	r1, #11
   120be:	dd27      	ble.n	12110 <bt_ready+0x80>
   120c0:	f04f 0c0c 	mov.w	ip, #12
   120c4:	b13a      	cbz	r2, 120d6 <bt_ready+0x46>
   120c6:	2103      	movs	r1, #3
   120c8:	7139      	strb	r1, [r7, #4]
   120ca:	2100      	movs	r1, #0
   120cc:	7179      	strb	r1, [r7, #5]
   120ce:	71b9      	strb	r1, [r7, #6]
   120d0:	71f9      	strb	r1, [r7, #7]
   120d2:	6878      	ldr	r0, [r7, #4]
   120d4:	6118      	str	r0, [r3, #16]
   120d6:	2100      	movs	r1, #0
   120d8:	f36f 0100 	bfc	r1, #0, #1
   120dc:	f36f 0141 	bfc	r1, #1, #1
   120e0:	f36f 0182 	bfc	r1, #2, #1
   120e4:	f36f 01c5 	bfc	r1, #3, #3
   120e8:	2301      	movs	r3, #1
   120ea:	f363 1188 	bfi	r1, r3, #6, #3
   120ee:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   120f2:	f36c 2153 	bfi	r1, ip, #9, #11
   120f6:	f36f 511f 	bfc	r1, #20, #12
   120fa:	2300      	movs	r3, #0
   120fc:	4809      	ldr	r0, [pc, #36]	; (12124 <bt_ready+0x94>)
   120fe:	f001 fffd 	bl	140fc <z_impl_z_log_msg_static_create>
   12102:	46a5      	mov	sp, r4
}
   12104:	370c      	adds	r7, #12
   12106:	46bd      	mov	sp, r7
   12108:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("bt_enable returned %d", err);
   1210a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1210e:	e7cc      	b.n	120aa <bt_ready+0x1a>
   12110:	f06f 0c1b 	mvn.w	ip, #27
   12114:	e7d6      	b.n	120c4 <bt_ready+0x34>
   12116:	4804      	ldr	r0, [pc, #16]	; (12128 <bt_ready+0x98>)
   12118:	f014 f8a8 	bl	2626c <z_impl_k_sem_give>
}
   1211c:	e7f2      	b.n	12104 <bt_ready+0x74>
   1211e:	bf00      	nop
   12120:	0003245c 	.word	0x0003245c
   12124:	00031ccc 	.word	0x00031ccc
   12128:	20000b00 	.word	0x20000b00

0001212c <nus_sent>:
{
   1212c:	b508      	push	{r3, lr}
   1212e:	4802      	ldr	r0, [pc, #8]	; (12138 <nus_sent+0xc>)
   12130:	f014 f89c 	bl	2626c <z_impl_k_sem_give>
}
   12134:	bd08      	pop	{r3, pc}
   12136:	bf00      	nop
   12138:	20000ae8 	.word	0x20000ae8

0001213c <nus_received>:
{
   1213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12140:	4688      	mov	r8, r1
   12142:	4617      	mov	r7, r2
	int bytes_to_copy = len;
   12144:	4616      	mov	r6, r2
	while (bytes_to_copy > 0)
   12146:	e018      	b.n	1217a <nus_received+0x3e>
		int buffer_index = (start_index + bytes_in_buffer) % BLE_SERIAL_INPUT_BUFFER_SIZE;
   12148:	4d13      	ldr	r5, [pc, #76]	; (12198 <nus_received+0x5c>)
   1214a:	4b14      	ldr	r3, [pc, #80]	; (1219c <nus_received+0x60>)
   1214c:	681b      	ldr	r3, [r3, #0]
   1214e:	682a      	ldr	r2, [r5, #0]
   12150:	4413      	add	r3, r2
   12152:	425a      	negs	r2, r3
   12154:	b2db      	uxtb	r3, r3
   12156:	b2d2      	uxtb	r2, r2
   12158:	bf58      	it	pl
   1215a:	4253      	negpl	r3, r2
		int free_space = (BLE_SERIAL_INPUT_BUFFER_SIZE - buffer_index);
   1215c:	f5c3 7480 	rsb	r4, r3, #256	; 0x100
		int part_to_copy = (len < free_space) ? len : free_space;
   12160:	42bc      	cmp	r4, r7
   12162:	bfa8      	it	ge
   12164:	463c      	movge	r4, r7
		memcpy(input_buffer + buffer_index, data, part_to_copy);
   12166:	4622      	mov	r2, r4
   12168:	4641      	mov	r1, r8
   1216a:	480d      	ldr	r0, [pc, #52]	; (121a0 <nus_received+0x64>)
   1216c:	4418      	add	r0, r3
   1216e:	f01a fb3d 	bl	2c7ec <memcpy>
		bytes_to_copy -= part_to_copy;
   12172:	1b36      	subs	r6, r6, r4
		bytes_in_buffer += part_to_copy;
   12174:	682b      	ldr	r3, [r5, #0]
   12176:	4423      	add	r3, r4
   12178:	602b      	str	r3, [r5, #0]
	while (bytes_to_copy > 0)
   1217a:	2e00      	cmp	r6, #0
   1217c:	dce4      	bgt.n	12148 <nus_received+0xc>
   1217e:	4809      	ldr	r0, [pc, #36]	; (121a4 <nus_received+0x68>)
   12180:	f014 f874 	bl	2626c <z_impl_k_sem_give>
	event.type = SERIAL_EVENT_TYPE_NEW_DATA_RECEIVED;
   12184:	4808      	ldr	r0, [pc, #32]	; (121a8 <nus_received+0x6c>)
   12186:	2300      	movs	r3, #0
   12188:	7003      	strb	r3, [r0, #0]
	event.data.new_data.count = len;
   1218a:	6047      	str	r7, [r0, #4]
	event.data.new_data.p_buf = data;
   1218c:	f8c0 8008 	str.w	r8, [r0, #8]
	fire_callbacks(&event);
   12190:	f7ff febc 	bl	11f0c <fire_callbacks>
}
   12194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12198:	200033c0 	.word	0x200033c0
   1219c:	200033c4 	.word	0x200033c4
   121a0:	200035d0 	.word	0x200035d0
   121a4:	20000a88 	.word	0x20000a88
   121a8:	200033a8 	.word	0x200033a8

000121ac <ble_serial_add_callback>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

serial_ret_code_t ble_serial_add_callback(serial_event_callback_t callback)
{
	for (int i = 0; i < BLE_SERIAL_CALLBACK_LIMIT; i++)
   121ac:	2300      	movs	r3, #0
   121ae:	2b00      	cmp	r3, #0
   121b0:	dd02      	ble.n	121b8 <ble_serial_add_callback+0xc>
		{
			callback_list[i] = callback;
			return SERIAL_RET_CODE_SUCCESS;
		}
	}
	return SERIAL_RET_CODE_ERROR_NO_MEMORY;
   121b2:	f06f 0005 	mvn.w	r0, #5
}
   121b6:	4770      	bx	lr
		if (callback_list[i] == NULL)
   121b8:	4a05      	ldr	r2, [pc, #20]	; (121d0 <ble_serial_add_callback+0x24>)
   121ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   121be:	b10a      	cbz	r2, 121c4 <ble_serial_add_callback+0x18>
	for (int i = 0; i < BLE_SERIAL_CALLBACK_LIMIT; i++)
   121c0:	3301      	adds	r3, #1
   121c2:	e7f4      	b.n	121ae <ble_serial_add_callback+0x2>
			callback_list[i] = callback;
   121c4:	4a02      	ldr	r2, [pc, #8]	; (121d0 <ble_serial_add_callback+0x24>)
   121c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return SERIAL_RET_CODE_SUCCESS;
   121ca:	2000      	movs	r0, #0
   121cc:	4770      	bx	lr
   121ce:	bf00      	nop
   121d0:	200033b4 	.word	0x200033b4

000121d4 <ble_serial_attach>:
	
	return SERIAL_RET_CODE_SUCCESS;
}

serial_ret_code_t ble_serial_attach()
{
   121d4:	b5b0      	push	{r4, r5, r7, lr}
   121d6:	b082      	sub	sp, #8
   121d8:	af00      	add	r7, sp, #0
		.connected = connected,
		.disconnected = disconnected,
		.le_param_req = le_param_req,
		.le_param_updated = le_param_updated,
	};
	bt_conn_cb_register(&connection_callbacks);
   121da:	4827      	ldr	r0, [pc, #156]	; (12278 <ble_serial_attach+0xa4>)
   121dc:	f00b fae2 	bl	1d7a4 <bt_conn_cb_register>
	static struct bt_nus_cb nus_callbacks = {
		.received = nus_received,
		.sent = nus_sent,
		.send_enabled = nus_send_enabled,
	};
	err = bt_nus_init(&nus_callbacks);
   121e0:	4826      	ldr	r0, [pc, #152]	; (1227c <ble_serial_attach+0xa8>)
   121e2:	f004 ff93 	bl	1710c <bt_nus_init>
	if (err)
   121e6:	b948      	cbnz	r0, 121fc <ble_serial_attach+0x28>
   121e8:	4825      	ldr	r0, [pc, #148]	; (12280 <ble_serial_attach+0xac>)
   121ea:	f014 f83f 	bl	2626c <z_impl_k_sem_give>
		LOG_ERR("could not init nus (err = %d)", err);
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
	}
	
	k_sem_give(&sem_wait_for_tx);
	enabled = true;
   121ee:	4b25      	ldr	r3, [pc, #148]	; (12284 <ble_serial_attach+0xb0>)
   121f0:	2201      	movs	r2, #1
   121f2:	701a      	strb	r2, [r3, #0]
	
	return SERIAL_RET_CODE_SUCCESS;
   121f4:	2000      	movs	r0, #0
}
   121f6:	3708      	adds	r7, #8
   121f8:	46bd      	mov	sp, r7
   121fa:	bdb0      	pop	{r4, r5, r7, pc}
   121fc:	4603      	mov	r3, r0
		LOG_ERR("could not init nus (err = %d)", err);
   121fe:	466c      	mov	r4, sp
   12200:	b088      	sub	sp, #32
   12202:	4669      	mov	r1, sp
   12204:	f111 0210 	adds.w	r2, r1, #16
   12208:	d030      	beq.n	1226c <ble_serial_attach+0x98>
   1220a:	200c      	movs	r0, #12
   1220c:	b142      	cbz	r2, 12220 <ble_serial_attach+0x4c>
   1220e:	4684      	mov	ip, r0
   12210:	2804      	cmp	r0, #4
   12212:	dd01      	ble.n	12218 <ble_serial_attach+0x44>
   12214:	4d1c      	ldr	r5, [pc, #112]	; (12288 <ble_serial_attach+0xb4>)
   12216:	614d      	str	r5, [r1, #20]
   12218:	f1bc 0f08 	cmp.w	ip, #8
   1221c:	dd00      	ble.n	12220 <ble_serial_attach+0x4c>
   1221e:	618b      	str	r3, [r1, #24]
   12220:	280b      	cmp	r0, #11
   12222:	dd26      	ble.n	12272 <ble_serial_attach+0x9e>
   12224:	230c      	movs	r3, #12
   12226:	b13a      	cbz	r2, 12238 <ble_serial_attach+0x64>
   12228:	2003      	movs	r0, #3
   1222a:	7138      	strb	r0, [r7, #4]
   1222c:	2000      	movs	r0, #0
   1222e:	7178      	strb	r0, [r7, #5]
   12230:	71b8      	strb	r0, [r7, #6]
   12232:	71f8      	strb	r0, [r7, #7]
   12234:	6878      	ldr	r0, [r7, #4]
   12236:	6108      	str	r0, [r1, #16]
   12238:	2100      	movs	r1, #0
   1223a:	f36f 0100 	bfc	r1, #0, #1
   1223e:	f36f 0141 	bfc	r1, #1, #1
   12242:	f36f 0182 	bfc	r1, #2, #1
   12246:	f36f 01c5 	bfc	r1, #3, #3
   1224a:	2001      	movs	r0, #1
   1224c:	f360 1188 	bfi	r1, r0, #6, #3
   12250:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12254:	f363 2153 	bfi	r1, r3, #9, #11
   12258:	f36f 511f 	bfc	r1, #20, #12
   1225c:	2300      	movs	r3, #0
   1225e:	480b      	ldr	r0, [pc, #44]	; (1228c <ble_serial_attach+0xb8>)
   12260:	f001 ff4c 	bl	140fc <z_impl_z_log_msg_static_create>
   12264:	46a5      	mov	sp, r4
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   12266:	f06f 0001 	mvn.w	r0, #1
   1226a:	e7c4      	b.n	121f6 <ble_serial_attach+0x22>
		LOG_ERR("could not init nus (err = %d)", err);
   1226c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12270:	e7cc      	b.n	1220c <ble_serial_attach+0x38>
   12272:	f06f 031b 	mvn.w	r3, #27
   12276:	e7d6      	b.n	12226 <ble_serial_attach+0x52>
   12278:	200005ac 	.word	0x200005ac
   1227c:	200005a0 	.word	0x200005a0
   12280:	20000ae8 	.word	0x20000ae8
   12284:	20005d3b 	.word	0x20005d3b
   12288:	00032474 	.word	0x00032474
   1228c:	00031ccc 	.word	0x00031ccc

00012290 <ble_serial_enable>:
{
   12290:	b5f0      	push	{r4, r5, r6, r7, lr}
   12292:	b08f      	sub	sp, #60	; 0x3c
   12294:	af02      	add	r7, sp, #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   12296:	48b0      	ldr	r0, [pc, #704]	; (12558 <ble_serial_enable+0x2c8>)
   12298:	f014 f838 	bl	2630c <z_impl_k_sem_reset>
	bt_conn_cb_register(&connection_callbacks);
   1229c:	48af      	ldr	r0, [pc, #700]	; (1255c <ble_serial_enable+0x2cc>)
   1229e:	f00b fa81 	bl	1d7a4 <bt_conn_cb_register>
	err = bt_enable(bt_ready);
   122a2:	48af      	ldr	r0, [pc, #700]	; (12560 <ble_serial_enable+0x2d0>)
   122a4:	f009 fbda 	bl	1ba5c <bt_enable>
	if (err == -EALREADY)
   122a8:	f110 0f78 	cmn.w	r0, #120	; 0x78
   122ac:	d034      	beq.n	12318 <ble_serial_enable+0x88>
	else if (err)
   122ae:	2800      	cmp	r0, #0
   122b0:	d155      	bne.n	1235e <ble_serial_enable+0xce>
	return z_impl_k_sem_take(sem, timeout);
   122b2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   122b6:	2300      	movs	r3, #0
   122b8:	48a7      	ldr	r0, [pc, #668]	; (12558 <ble_serial_enable+0x2c8>)
   122ba:	f013 ffff 	bl	262bc <z_impl_k_sem_take>
	if (err)
   122be:	4603      	mov	r3, r0
   122c0:	2800      	cmp	r0, #0
   122c2:	f040 808b 	bne.w	123dc <ble_serial_enable+0x14c>
	err = bt_nus_init(&nus_callbacks);
   122c6:	48a7      	ldr	r0, [pc, #668]	; (12564 <ble_serial_enable+0x2d4>)
   122c8:	f004 ff20 	bl	1710c <bt_nus_init>
	if (err)
   122cc:	4603      	mov	r3, r0
   122ce:	2800      	cmp	r0, #0
   122d0:	f040 80c3 	bne.w	1245a <ble_serial_enable+0x1ca>
	struct bt_le_adv_param * adv_params = BT_LE_ADV_CONN;
   122d4:	f107 0c04 	add.w	ip, r7, #4
   122d8:	4ca3      	ldr	r4, [pc, #652]	; (12568 <ble_serial_enable+0x2d8>)
   122da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   122dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   122e0:	6823      	ldr	r3, [r4, #0]
   122e2:	f8cc 3000 	str.w	r3, [ip]
	adv_params->interval_min = BT_GAP_ADV_FAST_INT_MIN_1;
   122e6:	2330      	movs	r3, #48	; 0x30
   122e8:	60fb      	str	r3, [r7, #12]
	adv_params->interval_max = BT_GAP_ADV_FAST_INT_MAX_1;
   122ea:	2360      	movs	r3, #96	; 0x60
   122ec:	613b      	str	r3, [r7, #16]
	err = bt_le_adv_start(adv_params, advertising_data, ARRAY_SIZE(advertising_data), NULL, 0);
   122ee:	2300      	movs	r3, #0
   122f0:	9300      	str	r3, [sp, #0]
   122f2:	2202      	movs	r2, #2
   122f4:	499d      	ldr	r1, [pc, #628]	; (1256c <ble_serial_enable+0x2dc>)
   122f6:	1d38      	adds	r0, r7, #4
   122f8:	f00a fab2 	bl	1c860 <bt_le_adv_start>
	if (err)
   122fc:	4603      	mov	r3, r0
   122fe:	2800      	cmp	r0, #0
   12300:	f040 80ea 	bne.w	124d8 <ble_serial_enable+0x248>
	z_impl_k_sem_give(sem);
   12304:	489a      	ldr	r0, [pc, #616]	; (12570 <ble_serial_enable+0x2e0>)
   12306:	f013 ffb1 	bl	2626c <z_impl_k_sem_give>
	enabled = true;
   1230a:	4b9a      	ldr	r3, [pc, #616]	; (12574 <ble_serial_enable+0x2e4>)
   1230c:	2201      	movs	r2, #1
   1230e:	701a      	strb	r2, [r3, #0]
	return SERIAL_RET_CODE_SUCCESS;
   12310:	2000      	movs	r0, #0
}
   12312:	3734      	adds	r7, #52	; 0x34
   12314:	46bd      	mov	sp, r7
   12316:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("bt already enabled, will instead attach nus service to existing ble interface");
   12318:	4b97      	ldr	r3, [pc, #604]	; (12578 <ble_serial_enable+0x2e8>)
   1231a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1231c:	2302      	movs	r3, #2
   1231e:	703b      	strb	r3, [r7, #0]
   12320:	2300      	movs	r3, #0
   12322:	707b      	strb	r3, [r7, #1]
   12324:	70bb      	strb	r3, [r7, #2]
   12326:	70fb      	strb	r3, [r7, #3]
   12328:	683a      	ldr	r2, [r7, #0]
   1232a:	62ba      	str	r2, [r7, #40]	; 0x28
   1232c:	4619      	mov	r1, r3
   1232e:	f363 0100 	bfi	r1, r3, #0, #1
   12332:	f363 0141 	bfi	r1, r3, #1, #1
   12336:	f363 0182 	bfi	r1, r3, #2, #1
   1233a:	f363 01c5 	bfi	r1, r3, #3, #3
   1233e:	2203      	movs	r2, #3
   12340:	f362 1188 	bfi	r1, r2, #6, #3
   12344:	2208      	movs	r2, #8
   12346:	f362 2153 	bfi	r1, r2, #9, #11
   1234a:	f363 511f 	bfi	r1, r3, #20, #12
   1234e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   12352:	488a      	ldr	r0, [pc, #552]	; (1257c <ble_serial_enable+0x2ec>)
   12354:	f001 fed2 	bl	140fc <z_impl_z_log_msg_static_create>
		return ble_serial_attach();
   12358:	f7ff ff3c 	bl	121d4 <ble_serial_attach>
   1235c:	e7d9      	b.n	12312 <ble_serial_enable+0x82>
		LOG_ERR("bt_enable returned %d", err);
   1235e:	466d      	mov	r5, sp
   12360:	b088      	sub	sp, #32
   12362:	ab02      	add	r3, sp, #8
   12364:	f113 0210 	adds.w	r2, r3, #16
   12368:	d00d      	beq.n	12386 <ble_serial_enable+0xf6>
   1236a:	210c      	movs	r1, #12
   1236c:	b13a      	cbz	r2, 1237e <ble_serial_enable+0xee>
   1236e:	460c      	mov	r4, r1
   12370:	2904      	cmp	r1, #4
   12372:	dd01      	ble.n	12378 <ble_serial_enable+0xe8>
   12374:	4e82      	ldr	r6, [pc, #520]	; (12580 <ble_serial_enable+0x2f0>)
   12376:	615e      	str	r6, [r3, #20]
   12378:	2c08      	cmp	r4, #8
   1237a:	dd07      	ble.n	1238c <ble_serial_enable+0xfc>
   1237c:	6198      	str	r0, [r3, #24]
   1237e:	290b      	cmp	r1, #11
   12380:	dd29      	ble.n	123d6 <ble_serial_enable+0x146>
   12382:	240c      	movs	r4, #12
   12384:	e004      	b.n	12390 <ble_serial_enable+0x100>
   12386:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1238a:	e7ef      	b.n	1236c <ble_serial_enable+0xdc>
   1238c:	f06f 041b 	mvn.w	r4, #27
   12390:	b13a      	cbz	r2, 123a2 <ble_serial_enable+0x112>
   12392:	2103      	movs	r1, #3
   12394:	7039      	strb	r1, [r7, #0]
   12396:	2100      	movs	r1, #0
   12398:	7079      	strb	r1, [r7, #1]
   1239a:	70b9      	strb	r1, [r7, #2]
   1239c:	70f9      	strb	r1, [r7, #3]
   1239e:	6838      	ldr	r0, [r7, #0]
   123a0:	6118      	str	r0, [r3, #16]
   123a2:	2100      	movs	r1, #0
   123a4:	f36f 0100 	bfc	r1, #0, #1
   123a8:	f36f 0141 	bfc	r1, #1, #1
   123ac:	f36f 0182 	bfc	r1, #2, #1
   123b0:	f36f 01c5 	bfc	r1, #3, #3
   123b4:	2301      	movs	r3, #1
   123b6:	f363 1188 	bfi	r1, r3, #6, #3
   123ba:	f3c4 040a 	ubfx	r4, r4, #0, #11
   123be:	f364 2153 	bfi	r1, r4, #9, #11
   123c2:	f36f 511f 	bfc	r1, #20, #12
   123c6:	2300      	movs	r3, #0
   123c8:	486c      	ldr	r0, [pc, #432]	; (1257c <ble_serial_enable+0x2ec>)
   123ca:	f001 fe97 	bl	140fc <z_impl_z_log_msg_static_create>
   123ce:	46ad      	mov	sp, r5
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   123d0:	f06f 0001 	mvn.w	r0, #1
   123d4:	e79d      	b.n	12312 <ble_serial_enable+0x82>
		LOG_ERR("bt_enable returned %d", err);
   123d6:	f06f 041b 	mvn.w	r4, #27
   123da:	e7d9      	b.n	12390 <ble_serial_enable+0x100>
		LOG_ERR("bt_enable timed out %d", err);
   123dc:	466c      	mov	r4, sp
   123de:	b088      	sub	sp, #32
   123e0:	a902      	add	r1, sp, #8
   123e2:	f111 0210 	adds.w	r2, r1, #16
   123e6:	d00d      	beq.n	12404 <ble_serial_enable+0x174>
   123e8:	200c      	movs	r0, #12
   123ea:	b13a      	cbz	r2, 123fc <ble_serial_enable+0x16c>
   123ec:	4605      	mov	r5, r0
   123ee:	2804      	cmp	r0, #4
   123f0:	dd01      	ble.n	123f6 <ble_serial_enable+0x166>
   123f2:	4e64      	ldr	r6, [pc, #400]	; (12584 <ble_serial_enable+0x2f4>)
   123f4:	614e      	str	r6, [r1, #20]
   123f6:	2d08      	cmp	r5, #8
   123f8:	dd07      	ble.n	1240a <ble_serial_enable+0x17a>
   123fa:	618b      	str	r3, [r1, #24]
   123fc:	280b      	cmp	r0, #11
   123fe:	dd29      	ble.n	12454 <ble_serial_enable+0x1c4>
   12400:	230c      	movs	r3, #12
   12402:	e004      	b.n	1240e <ble_serial_enable+0x17e>
   12404:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12408:	e7ef      	b.n	123ea <ble_serial_enable+0x15a>
   1240a:	f06f 031b 	mvn.w	r3, #27
   1240e:	b13a      	cbz	r2, 12420 <ble_serial_enable+0x190>
   12410:	2003      	movs	r0, #3
   12412:	7038      	strb	r0, [r7, #0]
   12414:	2000      	movs	r0, #0
   12416:	7078      	strb	r0, [r7, #1]
   12418:	70b8      	strb	r0, [r7, #2]
   1241a:	70f8      	strb	r0, [r7, #3]
   1241c:	6838      	ldr	r0, [r7, #0]
   1241e:	6108      	str	r0, [r1, #16]
   12420:	2100      	movs	r1, #0
   12422:	f36f 0100 	bfc	r1, #0, #1
   12426:	f36f 0141 	bfc	r1, #1, #1
   1242a:	f36f 0182 	bfc	r1, #2, #1
   1242e:	f36f 01c5 	bfc	r1, #3, #3
   12432:	2001      	movs	r0, #1
   12434:	f360 1188 	bfi	r1, r0, #6, #3
   12438:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1243c:	f363 2153 	bfi	r1, r3, #9, #11
   12440:	f36f 511f 	bfc	r1, #20, #12
   12444:	2300      	movs	r3, #0
   12446:	484d      	ldr	r0, [pc, #308]	; (1257c <ble_serial_enable+0x2ec>)
   12448:	f001 fe58 	bl	140fc <z_impl_z_log_msg_static_create>
   1244c:	46a5      	mov	sp, r4
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   1244e:	f06f 0001 	mvn.w	r0, #1
   12452:	e75e      	b.n	12312 <ble_serial_enable+0x82>
		LOG_ERR("bt_enable timed out %d", err);
   12454:	f06f 031b 	mvn.w	r3, #27
   12458:	e7d9      	b.n	1240e <ble_serial_enable+0x17e>
		LOG_ERR("could not init nus (err = %d)", err);
   1245a:	466c      	mov	r4, sp
   1245c:	b088      	sub	sp, #32
   1245e:	a902      	add	r1, sp, #8
   12460:	f111 0210 	adds.w	r2, r1, #16
   12464:	d00d      	beq.n	12482 <ble_serial_enable+0x1f2>
   12466:	200c      	movs	r0, #12
   12468:	b13a      	cbz	r2, 1247a <ble_serial_enable+0x1ea>
   1246a:	4605      	mov	r5, r0
   1246c:	2804      	cmp	r0, #4
   1246e:	dd01      	ble.n	12474 <ble_serial_enable+0x1e4>
   12470:	4e45      	ldr	r6, [pc, #276]	; (12588 <ble_serial_enable+0x2f8>)
   12472:	614e      	str	r6, [r1, #20]
   12474:	2d08      	cmp	r5, #8
   12476:	dd07      	ble.n	12488 <ble_serial_enable+0x1f8>
   12478:	618b      	str	r3, [r1, #24]
   1247a:	280b      	cmp	r0, #11
   1247c:	dd29      	ble.n	124d2 <ble_serial_enable+0x242>
   1247e:	230c      	movs	r3, #12
   12480:	e004      	b.n	1248c <ble_serial_enable+0x1fc>
   12482:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12486:	e7ef      	b.n	12468 <ble_serial_enable+0x1d8>
   12488:	f06f 031b 	mvn.w	r3, #27
   1248c:	b13a      	cbz	r2, 1249e <ble_serial_enable+0x20e>
   1248e:	2003      	movs	r0, #3
   12490:	7038      	strb	r0, [r7, #0]
   12492:	2000      	movs	r0, #0
   12494:	7078      	strb	r0, [r7, #1]
   12496:	70b8      	strb	r0, [r7, #2]
   12498:	70f8      	strb	r0, [r7, #3]
   1249a:	6838      	ldr	r0, [r7, #0]
   1249c:	6108      	str	r0, [r1, #16]
   1249e:	2100      	movs	r1, #0
   124a0:	f36f 0100 	bfc	r1, #0, #1
   124a4:	f36f 0141 	bfc	r1, #1, #1
   124a8:	f36f 0182 	bfc	r1, #2, #1
   124ac:	f36f 01c5 	bfc	r1, #3, #3
   124b0:	2001      	movs	r0, #1
   124b2:	f360 1188 	bfi	r1, r0, #6, #3
   124b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   124ba:	f363 2153 	bfi	r1, r3, #9, #11
   124be:	f36f 511f 	bfc	r1, #20, #12
   124c2:	2300      	movs	r3, #0
   124c4:	482d      	ldr	r0, [pc, #180]	; (1257c <ble_serial_enable+0x2ec>)
   124c6:	f001 fe19 	bl	140fc <z_impl_z_log_msg_static_create>
   124ca:	46a5      	mov	sp, r4
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   124cc:	f06f 0001 	mvn.w	r0, #1
   124d0:	e71f      	b.n	12312 <ble_serial_enable+0x82>
		LOG_ERR("could not init nus (err = %d)", err);
   124d2:	f06f 031b 	mvn.w	r3, #27
   124d6:	e7d9      	b.n	1248c <ble_serial_enable+0x1fc>
		LOG_ERR("could not start advertising (err = %d)", err);
   124d8:	466c      	mov	r4, sp
   124da:	b088      	sub	sp, #32
   124dc:	a902      	add	r1, sp, #8
   124de:	f111 0210 	adds.w	r2, r1, #16
   124e2:	d00d      	beq.n	12500 <ble_serial_enable+0x270>
   124e4:	200c      	movs	r0, #12
   124e6:	b13a      	cbz	r2, 124f8 <ble_serial_enable+0x268>
   124e8:	4605      	mov	r5, r0
   124ea:	2804      	cmp	r0, #4
   124ec:	dd01      	ble.n	124f2 <ble_serial_enable+0x262>
   124ee:	4e27      	ldr	r6, [pc, #156]	; (1258c <ble_serial_enable+0x2fc>)
   124f0:	614e      	str	r6, [r1, #20]
   124f2:	2d08      	cmp	r5, #8
   124f4:	dd07      	ble.n	12506 <ble_serial_enable+0x276>
   124f6:	618b      	str	r3, [r1, #24]
   124f8:	280b      	cmp	r0, #11
   124fa:	dd29      	ble.n	12550 <ble_serial_enable+0x2c0>
   124fc:	230c      	movs	r3, #12
   124fe:	e004      	b.n	1250a <ble_serial_enable+0x27a>
   12500:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12504:	e7ef      	b.n	124e6 <ble_serial_enable+0x256>
   12506:	f06f 031b 	mvn.w	r3, #27
   1250a:	b13a      	cbz	r2, 1251c <ble_serial_enable+0x28c>
   1250c:	2003      	movs	r0, #3
   1250e:	7038      	strb	r0, [r7, #0]
   12510:	2000      	movs	r0, #0
   12512:	7078      	strb	r0, [r7, #1]
   12514:	70b8      	strb	r0, [r7, #2]
   12516:	70f8      	strb	r0, [r7, #3]
   12518:	6838      	ldr	r0, [r7, #0]
   1251a:	6108      	str	r0, [r1, #16]
   1251c:	2100      	movs	r1, #0
   1251e:	f36f 0100 	bfc	r1, #0, #1
   12522:	f36f 0141 	bfc	r1, #1, #1
   12526:	f36f 0182 	bfc	r1, #2, #1
   1252a:	f36f 01c5 	bfc	r1, #3, #3
   1252e:	2001      	movs	r0, #1
   12530:	f360 1188 	bfi	r1, r0, #6, #3
   12534:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12538:	f363 2153 	bfi	r1, r3, #9, #11
   1253c:	f36f 511f 	bfc	r1, #20, #12
   12540:	2300      	movs	r3, #0
   12542:	480e      	ldr	r0, [pc, #56]	; (1257c <ble_serial_enable+0x2ec>)
   12544:	f001 fdda 	bl	140fc <z_impl_z_log_msg_static_create>
   12548:	46a5      	mov	sp, r4
		return SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   1254a:	f06f 0001 	mvn.w	r0, #1
   1254e:	e6e0      	b.n	12312 <ble_serial_enable+0x82>
		LOG_ERR("could not start advertising (err = %d)", err);
   12550:	f06f 031b 	mvn.w	r3, #27
   12554:	e7d9      	b.n	1250a <ble_serial_enable+0x27a>
   12556:	bf00      	nop
   12558:	20000b00 	.word	0x20000b00
   1255c:	200005cc 	.word	0x200005cc
   12560:	00012091 	.word	0x00012091
   12564:	200005c0 	.word	0x200005c0
   12568:	00031e40 	.word	0x00031e40
   1256c:	00032588 	.word	0x00032588
   12570:	20000ae8 	.word	0x20000ae8
   12574:	20005d3b 	.word	0x20005d3b
   12578:	00032494 	.word	0x00032494
   1257c:	00031ccc 	.word	0x00031ccc
   12580:	0003245c 	.word	0x0003245c
   12584:	000324e4 	.word	0x000324e4
   12588:	00032474 	.word	0x00032474
   1258c:	000324fc 	.word	0x000324fc

00012590 <ble_serial_get_line>:
	
	return SERIAL_RET_CODE_ERROR_UNKNOWN;
}

serial_line_t const * ble_serial_get_line(k_timeout_t timeout)
{
   12590:	b530      	push	{r4, r5, lr}
   12592:	b091      	sub	sp, #68	; 0x44
	LOG_DBG("getting next line");
	line.mutable.len = 0;
   12594:	4c22      	ldr	r4, [pc, #136]	; (12620 <ble_serial_get_line+0x90>)
   12596:	2500      	movs	r5, #0
   12598:	6025      	str	r5, [r4, #0]
	if (!enabled)
   1259a:	4c22      	ldr	r4, [pc, #136]	; (12624 <ble_serial_get_line+0x94>)
   1259c:	7824      	ldrb	r4, [r4, #0]
   1259e:	b1cc      	cbz	r4, 125d4 <ble_serial_get_line+0x44>
   125a0:	4602      	mov	r2, r0
   125a2:	460b      	mov	r3, r1
	{
		LOG_ERR("ble_serial not enabled");
		return &(line.fixed);
	}
	
	return serial_internal_get_line(&sem_data_ready, timeout, &line, input_buffer, BLE_SERIAL_INPUT_BUFFER_SIZE, &start_index, &bytes_in_buffer, end_character_list, end_character_count, fire_callbacks);
   125a4:	4920      	ldr	r1, [pc, #128]	; (12628 <ble_serial_get_line+0x98>)
   125a6:	9107      	str	r1, [sp, #28]
   125a8:	4920      	ldr	r1, [pc, #128]	; (1262c <ble_serial_get_line+0x9c>)
   125aa:	6809      	ldr	r1, [r1, #0]
   125ac:	9106      	str	r1, [sp, #24]
   125ae:	4920      	ldr	r1, [pc, #128]	; (12630 <ble_serial_get_line+0xa0>)
   125b0:	6809      	ldr	r1, [r1, #0]
   125b2:	9105      	str	r1, [sp, #20]
   125b4:	491f      	ldr	r1, [pc, #124]	; (12634 <ble_serial_get_line+0xa4>)
   125b6:	9104      	str	r1, [sp, #16]
   125b8:	491f      	ldr	r1, [pc, #124]	; (12638 <ble_serial_get_line+0xa8>)
   125ba:	9103      	str	r1, [sp, #12]
   125bc:	f44f 7180 	mov.w	r1, #256	; 0x100
   125c0:	9102      	str	r1, [sp, #8]
   125c2:	491e      	ldr	r1, [pc, #120]	; (1263c <ble_serial_get_line+0xac>)
   125c4:	9101      	str	r1, [sp, #4]
   125c6:	4916      	ldr	r1, [pc, #88]	; (12620 <ble_serial_get_line+0x90>)
   125c8:	9100      	str	r1, [sp, #0]
   125ca:	481d      	ldr	r0, [pc, #116]	; (12640 <ble_serial_get_line+0xb0>)
   125cc:	f7fe fd52 	bl	11074 <serial_internal_get_line>
}
   125d0:	b011      	add	sp, #68	; 0x44
   125d2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("ble_serial not enabled");
   125d4:	4b1b      	ldr	r3, [pc, #108]	; (12644 <ble_serial_get_line+0xb4>)
   125d6:	930f      	str	r3, [sp, #60]	; 0x3c
   125d8:	2302      	movs	r3, #2
   125da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   125de:	462b      	mov	r3, r5
   125e0:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
   125e4:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
   125e8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   125ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   125ee:	920e      	str	r2, [sp, #56]	; 0x38
   125f0:	4629      	mov	r1, r5
   125f2:	f365 0100 	bfi	r1, r5, #0, #1
   125f6:	f365 0141 	bfi	r1, r5, #1, #1
   125fa:	f365 0182 	bfi	r1, r5, #2, #1
   125fe:	f365 01c5 	bfi	r1, r5, #3, #3
   12602:	2201      	movs	r2, #1
   12604:	f362 1188 	bfi	r1, r2, #6, #3
   12608:	2208      	movs	r2, #8
   1260a:	f362 2153 	bfi	r1, r2, #9, #11
   1260e:	f365 511f 	bfi	r1, r5, #20, #12
   12612:	aa0e      	add	r2, sp, #56	; 0x38
   12614:	480c      	ldr	r0, [pc, #48]	; (12648 <ble_serial_get_line+0xb8>)
   12616:	f001 fd71 	bl	140fc <z_impl_z_log_msg_static_create>
		return &(line.fixed);
   1261a:	4801      	ldr	r0, [pc, #4]	; (12620 <ble_serial_get_line+0x90>)
   1261c:	e7d8      	b.n	125d0 <ble_serial_get_line+0x40>
   1261e:	bf00      	nop
   12620:	200005e0 	.word	0x200005e0
   12624:	20005d3b 	.word	0x20005d3b
   12628:	00011f0d 	.word	0x00011f0d
   1262c:	200033b8 	.word	0x200033b8
   12630:	200033bc 	.word	0x200033bc
   12634:	200033c0 	.word	0x200033c0
   12638:	200033c4 	.word	0x200033c4
   1263c:	200035d0 	.word	0x200035d0
   12640:	20000a88 	.word	0x20000a88
   12644:	00032524 	.word	0x00032524
   12648:	00031ccc 	.word	0x00031ccc

0001264c <ble_serial_send>:

serial_ret_code_t ble_serial_send(k_timeout_t timeout, char const * p_data, int len)
{
	if (len == 0) return SERIAL_RET_CODE_SUCCESS;
   1264c:	b90b      	cbnz	r3, 12652 <ble_serial_send+0x6>
   1264e:	2000      	movs	r0, #0
		bytes_sent += bytes_to_send;
		LOG_INF("%d bytes sent (of %d)", bytes_sent, len);
	}
	
	return ret_code;
}
   12650:	4770      	bx	lr
{
   12652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12656:	b088      	sub	sp, #32
   12658:	af00      	add	r7, sp, #0
   1265a:	4691      	mov	r9, r2
   1265c:	4698      	mov	r8, r3
	return z_impl_k_sem_take(sem, timeout);
   1265e:	4602      	mov	r2, r0
   12660:	460b      	mov	r3, r1
   12662:	4864      	ldr	r0, [pc, #400]	; (127f4 <ble_serial_send+0x1a8>)
   12664:	f013 fe2a 	bl	262bc <z_impl_k_sem_take>
	if (k_sem_take(&sem_wait_for_tx, timeout) != 0)
   12668:	4605      	mov	r5, r0
   1266a:	2800      	cmp	r0, #0
   1266c:	f000 808f 	beq.w	1278e <ble_serial_send+0x142>
		LOG_WRN("uart tx busy");
   12670:	4b61      	ldr	r3, [pc, #388]	; (127f8 <ble_serial_send+0x1ac>)
   12672:	61fb      	str	r3, [r7, #28]
   12674:	2202      	movs	r2, #2
   12676:	713a      	strb	r2, [r7, #4]
   12678:	2300      	movs	r3, #0
   1267a:	717b      	strb	r3, [r7, #5]
   1267c:	71bb      	strb	r3, [r7, #6]
   1267e:	71fb      	strb	r3, [r7, #7]
   12680:	6879      	ldr	r1, [r7, #4]
   12682:	61b9      	str	r1, [r7, #24]
   12684:	4619      	mov	r1, r3
   12686:	f363 0100 	bfi	r1, r3, #0, #1
   1268a:	f363 0141 	bfi	r1, r3, #1, #1
   1268e:	f363 0182 	bfi	r1, r3, #2, #1
   12692:	f363 01c5 	bfi	r1, r3, #3, #3
   12696:	f362 1188 	bfi	r1, r2, #6, #3
   1269a:	2208      	movs	r2, #8
   1269c:	f362 2153 	bfi	r1, r2, #9, #11
   126a0:	f363 511f 	bfi	r1, r3, #20, #12
   126a4:	f107 0218 	add.w	r2, r7, #24
   126a8:	4854      	ldr	r0, [pc, #336]	; (127fc <ble_serial_send+0x1b0>)
   126aa:	f001 fd27 	bl	140fc <z_impl_z_log_msg_static_create>
		return SERIAL_RET_CODE_ERROR_BUSY;
   126ae:	f06f 0004 	mvn.w	r0, #4
   126b2:	e09b      	b.n	127ec <ble_serial_send+0x1a0>
	z_impl_k_sem_give(sem);
   126b4:	484f      	ldr	r0, [pc, #316]	; (127f4 <ble_serial_send+0x1a8>)
   126b6:	f013 fdd9 	bl	2626c <z_impl_k_sem_give>
			if (err != -ENOTCONN)
   126ba:	f11a 0f80 	cmn.w	sl, #128	; 0x80
   126be:	d101      	bne.n	126c4 <ble_serial_send+0x78>
	serial_ret_code_t ret_code = SERIAL_RET_CODE_SUCCESS;
   126c0:	2000      	movs	r0, #0
   126c2:	e093      	b.n	127ec <ble_serial_send+0x1a0>
				LOG_ERR("bt_nus_send returned error: %d", err);
   126c4:	466c      	mov	r4, sp
   126c6:	b088      	sub	sp, #32
   126c8:	4669      	mov	r1, sp
   126ca:	f111 0210 	adds.w	r2, r1, #16
   126ce:	d00e      	beq.n	126ee <ble_serial_send+0xa2>
   126d0:	230c      	movs	r3, #12
   126d2:	b142      	cbz	r2, 126e6 <ble_serial_send+0x9a>
   126d4:	4618      	mov	r0, r3
   126d6:	2b04      	cmp	r3, #4
   126d8:	dd01      	ble.n	126de <ble_serial_send+0x92>
   126da:	4d49      	ldr	r5, [pc, #292]	; (12800 <ble_serial_send+0x1b4>)
   126dc:	614d      	str	r5, [r1, #20]
   126de:	2808      	cmp	r0, #8
   126e0:	dd08      	ble.n	126f4 <ble_serial_send+0xa8>
   126e2:	f8c1 a018 	str.w	sl, [r1, #24]
   126e6:	2b0b      	cmp	r3, #11
   126e8:	dd29      	ble.n	1273e <ble_serial_send+0xf2>
   126ea:	230c      	movs	r3, #12
   126ec:	e004      	b.n	126f8 <ble_serial_send+0xac>
   126ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   126f2:	e7ee      	b.n	126d2 <ble_serial_send+0x86>
   126f4:	f06f 031b 	mvn.w	r3, #27
   126f8:	b13a      	cbz	r2, 1270a <ble_serial_send+0xbe>
   126fa:	2003      	movs	r0, #3
   126fc:	7138      	strb	r0, [r7, #4]
   126fe:	2000      	movs	r0, #0
   12700:	7178      	strb	r0, [r7, #5]
   12702:	71b8      	strb	r0, [r7, #6]
   12704:	71f8      	strb	r0, [r7, #7]
   12706:	6878      	ldr	r0, [r7, #4]
   12708:	6108      	str	r0, [r1, #16]
   1270a:	2100      	movs	r1, #0
   1270c:	f36f 0100 	bfc	r1, #0, #1
   12710:	f36f 0141 	bfc	r1, #1, #1
   12714:	f36f 0182 	bfc	r1, #2, #1
   12718:	f36f 01c5 	bfc	r1, #3, #3
   1271c:	2001      	movs	r0, #1
   1271e:	f360 1188 	bfi	r1, r0, #6, #3
   12722:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12726:	f363 2153 	bfi	r1, r3, #9, #11
   1272a:	f36f 511f 	bfc	r1, #20, #12
   1272e:	2300      	movs	r3, #0
   12730:	4832      	ldr	r0, [pc, #200]	; (127fc <ble_serial_send+0x1b0>)
   12732:	f001 fce3 	bl	140fc <z_impl_z_log_msg_static_create>
   12736:	46a5      	mov	sp, r4
				ret_code = SERIAL_RET_CODE_ERROR_DEVICE_NOT_READY;
   12738:	f06f 0001 	mvn.w	r0, #1
   1273c:	e056      	b.n	127ec <ble_serial_send+0x1a0>
				LOG_ERR("bt_nus_send returned error: %d", err);
   1273e:	f06f 031b 	mvn.w	r3, #27
   12742:	e7d9      	b.n	126f8 <ble_serial_send+0xac>
		LOG_INF("%d bytes sent (of %d)", bytes_sent, len);
   12744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12748:	e039      	b.n	127be <ble_serial_send+0x172>
   1274a:	f06f 011b 	mvn.w	r1, #27
   1274e:	b13a      	cbz	r2, 12760 <ble_serial_send+0x114>
   12750:	2004      	movs	r0, #4
   12752:	7138      	strb	r0, [r7, #4]
   12754:	2000      	movs	r0, #0
   12756:	7178      	strb	r0, [r7, #5]
   12758:	71b8      	strb	r0, [r7, #6]
   1275a:	71f8      	strb	r0, [r7, #7]
   1275c:	6878      	ldr	r0, [r7, #4]
   1275e:	6118      	str	r0, [r3, #16]
   12760:	f36f 0400 	bfc	r4, #0, #1
   12764:	f36f 0441 	bfc	r4, #1, #1
   12768:	f36f 0482 	bfc	r4, #2, #1
   1276c:	f36f 04c5 	bfc	r4, #3, #3
   12770:	2303      	movs	r3, #3
   12772:	f363 1488 	bfi	r4, r3, #6, #3
   12776:	f3c1 030a 	ubfx	r3, r1, #0, #11
   1277a:	f363 2453 	bfi	r4, r3, #9, #11
   1277e:	f36f 541f 	bfc	r4, #20, #12
   12782:	2300      	movs	r3, #0
   12784:	4621      	mov	r1, r4
   12786:	481d      	ldr	r0, [pc, #116]	; (127fc <ble_serial_send+0x1b0>)
   12788:	f001 fcb8 	bl	140fc <z_impl_z_log_msg_static_create>
   1278c:	46b5      	mov	sp, r6
	while (bytes_sent < len)
   1278e:	45a8      	cmp	r8, r5
   12790:	dd2b      	ble.n	127ea <ble_serial_send+0x19e>
		int bytes_to_send = ((len - bytes_sent) < bt_data_len) ? (len - bytes_sent) : bt_data_len;
   12792:	eba8 0605 	sub.w	r6, r8, r5
   12796:	2e14      	cmp	r6, #20
   12798:	bfa8      	it	ge
   1279a:	2614      	movge	r6, #20
		int err = bt_nus_send(NULL, p_data + bytes_sent, bytes_to_send);
   1279c:	b2b2      	uxth	r2, r6
   1279e:	eb09 0105 	add.w	r1, r9, r5
   127a2:	2000      	movs	r0, #0
   127a4:	f004 fcbe 	bl	17124 <bt_nus_send>
		if (err != 0)
   127a8:	4682      	mov	sl, r0
   127aa:	2800      	cmp	r0, #0
   127ac:	d182      	bne.n	126b4 <ble_serial_send+0x68>
		bytes_sent += bytes_to_send;
   127ae:	4435      	add	r5, r6
		LOG_INF("%d bytes sent (of %d)", bytes_sent, len);
   127b0:	466e      	mov	r6, sp
   127b2:	b088      	sub	sp, #32
   127b4:	466b      	mov	r3, sp
   127b6:	f113 0210 	adds.w	r2, r3, #16
   127ba:	d0c3      	beq.n	12744 <ble_serial_send+0xf8>
   127bc:	2110      	movs	r1, #16
   127be:	b16a      	cbz	r2, 127dc <ble_serial_send+0x190>
   127c0:	4608      	mov	r0, r1
   127c2:	2904      	cmp	r1, #4
   127c4:	dd03      	ble.n	127ce <ble_serial_send+0x182>
   127c6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 12804 <ble_serial_send+0x1b8>
   127ca:	f8c3 c014 	str.w	ip, [r3, #20]
   127ce:	2808      	cmp	r0, #8
   127d0:	dd00      	ble.n	127d4 <ble_serial_send+0x188>
   127d2:	619d      	str	r5, [r3, #24]
   127d4:	280c      	cmp	r0, #12
   127d6:	ddb8      	ble.n	1274a <ble_serial_send+0xfe>
   127d8:	f8c3 801c 	str.w	r8, [r3, #28]
   127dc:	290f      	cmp	r1, #15
   127de:	dd01      	ble.n	127e4 <ble_serial_send+0x198>
   127e0:	2110      	movs	r1, #16
   127e2:	e7b4      	b.n	1274e <ble_serial_send+0x102>
   127e4:	f06f 011b 	mvn.w	r1, #27
   127e8:	e7b1      	b.n	1274e <ble_serial_send+0x102>
	serial_ret_code_t ret_code = SERIAL_RET_CODE_SUCCESS;
   127ea:	2000      	movs	r0, #0
}
   127ec:	3720      	adds	r7, #32
   127ee:	46bd      	mov	sp, r7
   127f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   127f4:	20000ae8 	.word	0x20000ae8
   127f8:	000323b8 	.word	0x000323b8
   127fc:	00031ccc 	.word	0x00031ccc
   12800:	0003253c 	.word	0x0003253c
   12804:	0003255c 	.word	0x0003255c

00012808 <ble_serial_vsendf>:

serial_ret_code_t ble_serial_vsendf(k_timeout_t timeout, const char * format, va_list args)
{
   12808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1280a:	b089      	sub	sp, #36	; 0x24
   1280c:	4605      	mov	r5, r0
   1280e:	460c      	mov	r4, r1
   12810:	4616      	mov	r6, r2
   12812:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   12814:	4602      	mov	r2, r0
   12816:	460b      	mov	r3, r1
   12818:	4820      	ldr	r0, [pc, #128]	; (1289c <ble_serial_vsendf+0x94>)
   1281a:	f013 fd4f 	bl	262bc <z_impl_k_sem_take>
	if (k_sem_take(&sem_wait_for_tx, timeout) != 0)
   1281e:	b9a0      	cbnz	r0, 1284a <ble_serial_vsendf+0x42>
	z_impl_k_sem_give(sem);
   12820:	481e      	ldr	r0, [pc, #120]	; (1289c <ble_serial_vsendf+0x94>)
   12822:	f013 fd23 	bl	2626c <z_impl_k_sem_give>
		LOG_WRN("uart tx busy");
		return SERIAL_RET_CODE_ERROR_BUSY;
	}
	k_sem_give(&sem_wait_for_tx);
	
	int len = vsnprintf(output_buffer, BLE_SERIAL_OUTPUT_BUFFER_SIZE, format, args);
   12826:	463b      	mov	r3, r7
   12828:	4632      	mov	r2, r6
   1282a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1282e:	481c      	ldr	r0, [pc, #112]	; (128a0 <ble_serial_vsendf+0x98>)
   12830:	f006 f9a2 	bl	18b78 <vsnprintf>
   12834:	4603      	mov	r3, r0
	if ((len < 0) || (len > BLE_SERIAL_OUTPUT_BUFFER_SIZE)) return SERIAL_RET_CODE_ERROR_BUFFER_FULL;
   12836:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1283a:	d82b      	bhi.n	12894 <ble_serial_vsendf+0x8c>
	return ble_serial_send(timeout, output_buffer, len);
   1283c:	4a18      	ldr	r2, [pc, #96]	; (128a0 <ble_serial_vsendf+0x98>)
   1283e:	4628      	mov	r0, r5
   12840:	4621      	mov	r1, r4
   12842:	f7ff ff03 	bl	1264c <ble_serial_send>
}
   12846:	b009      	add	sp, #36	; 0x24
   12848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("uart tx busy");
   1284a:	4b16      	ldr	r3, [pc, #88]	; (128a4 <ble_serial_vsendf+0x9c>)
   1284c:	9307      	str	r3, [sp, #28]
   1284e:	2202      	movs	r2, #2
   12850:	f88d 2004 	strb.w	r2, [sp, #4]
   12854:	2300      	movs	r3, #0
   12856:	f88d 3005 	strb.w	r3, [sp, #5]
   1285a:	f88d 3006 	strb.w	r3, [sp, #6]
   1285e:	f88d 3007 	strb.w	r3, [sp, #7]
   12862:	9901      	ldr	r1, [sp, #4]
   12864:	9106      	str	r1, [sp, #24]
   12866:	4619      	mov	r1, r3
   12868:	f363 0100 	bfi	r1, r3, #0, #1
   1286c:	f363 0141 	bfi	r1, r3, #1, #1
   12870:	f363 0182 	bfi	r1, r3, #2, #1
   12874:	f363 01c5 	bfi	r1, r3, #3, #3
   12878:	f362 1188 	bfi	r1, r2, #6, #3
   1287c:	2208      	movs	r2, #8
   1287e:	f362 2153 	bfi	r1, r2, #9, #11
   12882:	f363 511f 	bfi	r1, r3, #20, #12
   12886:	aa06      	add	r2, sp, #24
   12888:	4807      	ldr	r0, [pc, #28]	; (128a8 <ble_serial_vsendf+0xa0>)
   1288a:	f001 fc37 	bl	140fc <z_impl_z_log_msg_static_create>
		return SERIAL_RET_CODE_ERROR_BUSY;
   1288e:	f06f 0004 	mvn.w	r0, #4
   12892:	e7d8      	b.n	12846 <ble_serial_vsendf+0x3e>
	if ((len < 0) || (len > BLE_SERIAL_OUTPUT_BUFFER_SIZE)) return SERIAL_RET_CODE_ERROR_BUFFER_FULL;
   12894:	f06f 0003 	mvn.w	r0, #3
   12898:	e7d5      	b.n	12846 <ble_serial_vsendf+0x3e>
   1289a:	bf00      	nop
   1289c:	20000ae8 	.word	0x20000ae8
   128a0:	200034cc 	.word	0x200034cc
   128a4:	000323b8 	.word	0x000323b8
   128a8:	00031ccc 	.word	0x00031ccc

000128ac <ble_serial_set_end_character_list>:
	va_end(args);
	return result;
}

serial_ret_code_t ble_serial_set_end_character_list(char const * p_list, int len)
{
   128ac:	b510      	push	{r4, lr}
   128ae:	b088      	sub	sp, #32
	end_character_count = len;
   128b0:	4b15      	ldr	r3, [pc, #84]	; (12908 <ble_serial_set_end_character_list+0x5c>)
   128b2:	6019      	str	r1, [r3, #0]
	end_character_list = p_list;
   128b4:	4b15      	ldr	r3, [pc, #84]	; (1290c <ble_serial_set_end_character_list+0x60>)
   128b6:	6018      	str	r0, [r3, #0]
	LOG_INF("end character list updated");
   128b8:	4b15      	ldr	r3, [pc, #84]	; (12910 <ble_serial_set_end_character_list+0x64>)
   128ba:	9307      	str	r3, [sp, #28]
   128bc:	2302      	movs	r3, #2
   128be:	f88d 3004 	strb.w	r3, [sp, #4]
   128c2:	2400      	movs	r4, #0
   128c4:	f88d 4005 	strb.w	r4, [sp, #5]
   128c8:	f88d 4006 	strb.w	r4, [sp, #6]
   128cc:	f88d 4007 	strb.w	r4, [sp, #7]
   128d0:	9b01      	ldr	r3, [sp, #4]
   128d2:	9306      	str	r3, [sp, #24]
   128d4:	4621      	mov	r1, r4
   128d6:	f364 0100 	bfi	r1, r4, #0, #1
   128da:	f364 0141 	bfi	r1, r4, #1, #1
   128de:	f364 0182 	bfi	r1, r4, #2, #1
   128e2:	f364 01c5 	bfi	r1, r4, #3, #3
   128e6:	2303      	movs	r3, #3
   128e8:	f363 1188 	bfi	r1, r3, #6, #3
   128ec:	2308      	movs	r3, #8
   128ee:	f363 2153 	bfi	r1, r3, #9, #11
   128f2:	f364 511f 	bfi	r1, r4, #20, #12
   128f6:	4623      	mov	r3, r4
   128f8:	aa06      	add	r2, sp, #24
   128fa:	4806      	ldr	r0, [pc, #24]	; (12914 <ble_serial_set_end_character_list+0x68>)
   128fc:	f001 fbfe 	bl	140fc <z_impl_z_log_msg_static_create>
	return SERIAL_RET_CODE_SUCCESS;
}
   12900:	4620      	mov	r0, r4
   12902:	b008      	add	sp, #32
   12904:	bd10      	pop	{r4, pc}
   12906:	bf00      	nop
   12908:	200033b8 	.word	0x200033b8
   1290c:	200033bc 	.word	0x200033bc
   12910:	000323c8 	.word	0x000323c8
   12914:	00031ccc 	.word	0x00031ccc

00012918 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1291c:	b091      	sub	sp, #68	; 0x44
   1291e:	9205      	str	r2, [sp, #20]
   12920:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   12922:	4613      	mov	r3, r2
   12924:	f002 0204 	and.w	r2, r2, #4
   12928:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1292a:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1292e:	f010 0303 	ands.w	r3, r0, #3
   12932:	9301      	str	r3, [sp, #4]
   12934:	f040 8223 	bne.w	12d7e <cbvprintf_package+0x466>
   12938:	4607      	mov	r7, r0
   1293a:	468a      	mov	sl, r1
   1293c:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   1293e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   12940:	2800      	cmp	r0, #0
   12942:	d047      	beq.n	129d4 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12944:	b127      	cbz	r7, 12950 <cbvprintf_package+0x38>
   12946:	1be3      	subs	r3, r4, r7
   12948:	3304      	adds	r3, #4
   1294a:	4553      	cmp	r3, sl
   1294c:	f200 821a 	bhi.w	12d84 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   12950:	9b02      	ldr	r3, [sp, #8]
   12952:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   12958:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   1295a:	9303      	str	r3, [sp, #12]
	bool parsing = false;
   1295c:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1295e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	align = VA_STACK_ALIGN(char *);
   12962:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
   12966:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   12968:	b10f      	cbz	r7, 1296e <cbvprintf_package+0x56>
				*(const char **)buf = s;
   1296a:	9b02      	ldr	r3, [sp, #8]
   1296c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1296e:	1e53      	subs	r3, r2, #1
   12970:	9307      	str	r3, [sp, #28]
   12972:	2a00      	cmp	r2, #0
   12974:	f340 815f 	ble.w	12c36 <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   12978:	9b05      	ldr	r3, [sp, #20]
   1297a:	f013 0202 	ands.w	r2, r3, #2
   1297e:	d026      	beq.n	129ce <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12980:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12982:	1be1      	subs	r1, r4, r7
   12984:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12986:	b11a      	cbz	r2, 12990 <cbvprintf_package+0x78>
   12988:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1298c:	f080 8200 	bcs.w	12d90 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12990:	9903      	ldr	r1, [sp, #12]
   12992:	290f      	cmp	r1, #15
   12994:	f200 81ff 	bhi.w	12d96 <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
   12998:	2f00      	cmp	r7, #0
   1299a:	f000 8164 	beq.w	12c66 <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
   1299e:	b2db      	uxtb	r3, r3
   129a0:	f101 0240 	add.w	r2, r1, #64	; 0x40
   129a4:	446a      	add	r2, sp
   129a6:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
   129aa:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
   129ae:	2800      	cmp	r0, #0
   129b0:	f000 8155 	beq.w	12c5e <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   129b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   129b8:	f101 0240 	add.w	r2, r1, #64	; 0x40
   129bc:	446a      	add	r2, sp
   129be:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
   129c2:	9b04      	ldr	r3, [sp, #16]
   129c4:	3301      	adds	r3, #1
   129c6:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
   129c8:	9b03      	ldr	r3, [sp, #12]
   129ca:	3301      	adds	r3, #1
   129cc:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
   129ce:	3404      	adds	r4, #4

			is_str_arg = false;
   129d0:	2200      	movs	r2, #0
   129d2:	e03d      	b.n	12a50 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   129d4:	f001 0a07 	and.w	sl, r1, #7
   129d8:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   129da:	f1ca 0a08 	rsb	sl, sl, #8
   129de:	e7b1      	b.n	12944 <cbvprintf_package+0x2c>
				parsing = false;
   129e0:	2600      	movs	r6, #0
   129e2:	e034      	b.n	12a4e <cbvprintf_package+0x136>
   129e4:	2600      	movs	r6, #0
   129e6:	e032      	b.n	12a4e <cbvprintf_package+0x136>
   129e8:	2600      	movs	r6, #0
   129ea:	e030      	b.n	12a4e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
   129ec:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
   129f0:	46c1      	mov	r9, r8
   129f2:	e02c      	b.n	12a4e <cbvprintf_package+0x136>
				if (*fmt == '%') {
   129f4:	2925      	cmp	r1, #37	; 0x25
   129f6:	d12a      	bne.n	12a4e <cbvprintf_package+0x136>
					arg_idx++;
   129f8:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
   129fc:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
   129fe:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
   12a02:	46c1      	mov	r9, r8
				continue;
   12a04:	e023      	b.n	12a4e <cbvprintf_package+0x136>
			switch (*fmt) {
   12a06:	2947      	cmp	r1, #71	; 0x47
   12a08:	d8ec      	bhi.n	129e4 <cbvprintf_package+0xcc>
   12a0a:	292a      	cmp	r1, #42	; 0x2a
   12a0c:	d312      	bcc.n	12a34 <cbvprintf_package+0x11c>
   12a0e:	392a      	subs	r1, #42	; 0x2a
   12a10:	b2c9      	uxtb	r1, r1
   12a12:	2001      	movs	r0, #1
   12a14:	fa00 f101 	lsl.w	r1, r0, r1
   12a18:	f64f 70da 	movw	r0, #65498	; 0xffda
   12a1c:	4201      	tst	r1, r0
   12a1e:	d116      	bne.n	12a4e <cbvprintf_package+0x136>
   12a20:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
   12a24:	f040 80c4 	bne.w	12bb0 <cbvprintf_package+0x298>
   12a28:	f011 0f01 	tst.w	r1, #1
   12a2c:	f040 808e 	bne.w	12b4c <cbvprintf_package+0x234>
				parsing = false;
   12a30:	2600      	movs	r6, #0
   12a32:	e00c      	b.n	12a4e <cbvprintf_package+0x136>
			switch (*fmt) {
   12a34:	2925      	cmp	r1, #37	; 0x25
   12a36:	d103      	bne.n	12a40 <cbvprintf_package+0x128>
				arg_idx--;
   12a38:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
				parsing = false;
   12a3c:	2600      	movs	r6, #0
				continue;
   12a3e:	e006      	b.n	12a4e <cbvprintf_package+0x136>
			switch (*fmt) {
   12a40:	d901      	bls.n	12a46 <cbvprintf_package+0x12e>
				parsing = false;
   12a42:	2600      	movs	r6, #0
   12a44:	e003      	b.n	12a4e <cbvprintf_package+0x136>
			switch (*fmt) {
   12a46:	2920      	cmp	r1, #32
   12a48:	d001      	beq.n	12a4e <cbvprintf_package+0x136>
   12a4a:	2923      	cmp	r1, #35	; 0x23
   12a4c:	d1cc      	bne.n	129e8 <cbvprintf_package+0xd0>
				parsing = false;
   12a4e:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
   12a50:	1c6b      	adds	r3, r5, #1
   12a52:	7869      	ldrb	r1, [r5, #1]
   12a54:	2900      	cmp	r1, #0
   12a56:	f000 811d 	beq.w	12c94 <cbvprintf_package+0x37c>
			if (!parsing) {
   12a5a:	2e00      	cmp	r6, #0
   12a5c:	d0ca      	beq.n	129f4 <cbvprintf_package+0xdc>
			switch (*fmt) {
   12a5e:	297a      	cmp	r1, #122	; 0x7a
   12a60:	d8be      	bhi.n	129e0 <cbvprintf_package+0xc8>
   12a62:	294c      	cmp	r1, #76	; 0x4c
   12a64:	d3cf      	bcc.n	12a06 <cbvprintf_package+0xee>
   12a66:	394c      	subs	r1, #76	; 0x4c
   12a68:	292e      	cmp	r1, #46	; 0x2e
   12a6a:	d861      	bhi.n	12b30 <cbvprintf_package+0x218>
   12a6c:	a001      	add	r0, pc, #4	; (adr r0, 12a74 <cbvprintf_package+0x15c>)
   12a6e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12a72:	bf00      	nop
   12a74:	00012a4f 	.word	0x00012a4f
   12a78:	00012b31 	.word	0x00012b31
   12a7c:	00012b31 	.word	0x00012b31
   12a80:	00012b31 	.word	0x00012b31
   12a84:	00012b31 	.word	0x00012b31
   12a88:	00012b31 	.word	0x00012b31
   12a8c:	00012b31 	.word	0x00012b31
   12a90:	00012b31 	.word	0x00012b31
   12a94:	00012b31 	.word	0x00012b31
   12a98:	00012b31 	.word	0x00012b31
   12a9c:	00012b31 	.word	0x00012b31
   12aa0:	00012b31 	.word	0x00012b31
   12aa4:	00012b45 	.word	0x00012b45
   12aa8:	00012b31 	.word	0x00012b31
   12aac:	00012b31 	.word	0x00012b31
   12ab0:	00012b31 	.word	0x00012b31
   12ab4:	00012b31 	.word	0x00012b31
   12ab8:	00012b31 	.word	0x00012b31
   12abc:	00012b31 	.word	0x00012b31
   12ac0:	00012b31 	.word	0x00012b31
   12ac4:	00012b31 	.word	0x00012b31
   12ac8:	00012bb1 	.word	0x00012bb1
   12acc:	00012b31 	.word	0x00012b31
   12ad0:	00012b45 	.word	0x00012b45
   12ad4:	00012b45 	.word	0x00012b45
   12ad8:	00012bb1 	.word	0x00012bb1
   12adc:	00012bb1 	.word	0x00012bb1
   12ae0:	00012bb1 	.word	0x00012bb1
   12ae4:	00012a4f 	.word	0x00012a4f
   12ae8:	00012b45 	.word	0x00012b45
   12aec:	000129ed 	.word	0x000129ed
   12af0:	00012b31 	.word	0x00012b31
   12af4:	00012a4f 	.word	0x00012a4f
   12af8:	00012b31 	.word	0x00012b31
   12afc:	00012c0f 	.word	0x00012c0f
   12b00:	00012b45 	.word	0x00012b45
   12b04:	00012c0f 	.word	0x00012c0f
   12b08:	00012b31 	.word	0x00012b31
   12b0c:	00012b31 	.word	0x00012b31
   12b10:	00012c19 	.word	0x00012c19
   12b14:	00012b3d 	.word	0x00012b3d
   12b18:	00012b45 	.word	0x00012b45
   12b1c:	00012b31 	.word	0x00012b31
   12b20:	00012b31 	.word	0x00012b31
   12b24:	00012b45 	.word	0x00012b45
   12b28:	00012b31 	.word	0x00012b31
   12b2c:	00012b35 	.word	0x00012b35
				parsing = false;
   12b30:	2600      	movs	r6, #0
   12b32:	e78c      	b.n	12a4e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
   12b34:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
   12b38:	46c1      	mov	r9, r8
				continue;
   12b3a:	e788      	b.n	12a4e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
   12b3c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
   12b40:	46c1      	mov	r9, r8
				continue;
   12b42:	e784      	b.n	12a4e <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
   12b44:	7829      	ldrb	r1, [r5, #0]
   12b46:	296c      	cmp	r1, #108	; 0x6c
   12b48:	d024      	beq.n	12b94 <cbvprintf_package+0x27c>
				parsing = false;
   12b4a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   12b4c:	4444      	add	r4, r8
   12b4e:	3c01      	subs	r4, #1
   12b50:	f1c8 0100 	rsb	r1, r8, #0
   12b54:	400c      	ands	r4, r1
   12b56:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   12b58:	b127      	cbz	r7, 12b64 <cbvprintf_package+0x24c>
   12b5a:	1be1      	subs	r1, r4, r7
   12b5c:	4449      	add	r1, r9
   12b5e:	4551      	cmp	r1, sl
   12b60:	f200 8113 	bhi.w	12d8a <cbvprintf_package+0x472>
		if (is_str_arg) {
   12b64:	2a00      	cmp	r2, #0
   12b66:	d15d      	bne.n	12c24 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   12b68:	f1b9 0f04 	cmp.w	r9, #4
   12b6c:	f000 808a 	beq.w	12c84 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   12b70:	f1b9 0f08 	cmp.w	r9, #8
   12b74:	f040 8112 	bne.w	12d9c <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
   12b78:	991a      	ldr	r1, [sp, #104]	; 0x68
   12b7a:	3107      	adds	r1, #7
   12b7c:	f021 0107 	bic.w	r1, r1, #7
   12b80:	f101 0008 	add.w	r0, r1, #8
   12b84:	901a      	str	r0, [sp, #104]	; 0x68
   12b86:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
   12b8a:	b10f      	cbz	r7, 12b90 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   12b8c:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
   12b90:	3408      	adds	r4, #8
   12b92:	e75c      	b.n	12a4e <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
   12b94:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   12b98:	296c      	cmp	r1, #108	; 0x6c
   12b9a:	d004      	beq.n	12ba6 <cbvprintf_package+0x28e>
				parsing = false;
   12b9c:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
   12b9e:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
   12ba2:	46c1      	mov	r9, r8
   12ba4:	e7d2      	b.n	12b4c <cbvprintf_package+0x234>
				parsing = false;
   12ba6:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
   12ba8:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
   12bac:	46c1      	mov	r9, r8
   12bae:	e7cd      	b.n	12b4c <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
   12bb0:	7829      	ldrb	r1, [r5, #0]
   12bb2:	294c      	cmp	r1, #76	; 0x4c
   12bb4:	d01b      	beq.n	12bee <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
   12bb6:	991a      	ldr	r1, [sp, #104]	; 0x68
   12bb8:	3107      	adds	r1, #7
   12bba:	f021 0107 	bic.w	r1, r1, #7
   12bbe:	f101 0008 	add.w	r0, r1, #8
   12bc2:	901a      	str	r0, [sp, #104]	; 0x68
   12bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
   12bc8:	3407      	adds	r4, #7
   12bca:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   12bce:	b147      	cbz	r7, 12be2 <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
   12bd0:	1be6      	subs	r6, r4, r7
   12bd2:	3608      	adds	r6, #8
   12bd4:	4556      	cmp	r6, sl
   12bd6:	d814      	bhi.n	12c02 <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
   12bd8:	782d      	ldrb	r5, [r5, #0]
   12bda:	2d4c      	cmp	r5, #76	; 0x4c
   12bdc:	d014      	beq.n	12c08 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
   12bde:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
   12be2:	3408      	adds	r4, #8
				parsing = false;
   12be4:	2600      	movs	r6, #0
				continue;
   12be6:	f04f 0808 	mov.w	r8, #8
   12bea:	46c1      	mov	r9, r8
   12bec:	e72f      	b.n	12a4e <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
   12bee:	991a      	ldr	r1, [sp, #104]	; 0x68
   12bf0:	3107      	adds	r1, #7
   12bf2:	f021 0107 	bic.w	r1, r1, #7
   12bf6:	f101 0008 	add.w	r0, r1, #8
   12bfa:	901a      	str	r0, [sp, #104]	; 0x68
   12bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
   12c00:	e7e2      	b.n	12bc8 <cbvprintf_package+0x2b0>
						return -ENOSPC;
   12c02:	f06f 001b 	mvn.w	r0, #27
   12c06:	e0b7      	b.n	12d78 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
   12c08:	e9c4 0100 	strd	r0, r1, [r4]
   12c0c:	e7e9      	b.n	12be2 <cbvprintf_package+0x2ca>
				parsing = false;
   12c0e:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   12c10:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   12c14:	46c1      	mov	r9, r8
   12c16:	e799      	b.n	12b4c <cbvprintf_package+0x234>
				is_str_arg = true;
   12c18:	4632      	mov	r2, r6
				parsing = false;
   12c1a:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   12c1c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   12c20:	46c1      	mov	r9, r8
   12c22:	e793      	b.n	12b4c <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
   12c24:	4604      	mov	r4, r0
   12c26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12c28:	1d11      	adds	r1, r2, #4
   12c2a:	911a      	str	r1, [sp, #104]	; 0x68
   12c2c:	6812      	ldr	r2, [r2, #0]
   12c2e:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12c30:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
   12c32:	461d      	mov	r5, r3
   12c34:	e698      	b.n	12968 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12c36:	4b5f      	ldr	r3, [pc, #380]	; (12db4 <cbvprintf_package+0x49c>)
   12c38:	9a02      	ldr	r2, [sp, #8]
   12c3a:	429a      	cmp	r2, r3
   12c3c:	d304      	bcc.n	12c48 <cbvprintf_package+0x330>
   12c3e:	4b5e      	ldr	r3, [pc, #376]	; (12db8 <cbvprintf_package+0x4a0>)
   12c40:	429a      	cmp	r2, r3
   12c42:	d30a      	bcc.n	12c5a <cbvprintf_package+0x342>
   12c44:	2300      	movs	r3, #0
   12c46:	e000      	b.n	12c4a <cbvprintf_package+0x332>
   12c48:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12c4a:	2b00      	cmp	r3, #0
   12c4c:	f47f ae94 	bne.w	12978 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   12c50:	9b05      	ldr	r3, [sp, #20]
   12c52:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12c56:	2000      	movs	r0, #0
   12c58:	e693      	b.n	12982 <cbvprintf_package+0x6a>
   12c5a:	2301      	movs	r3, #1
   12c5c:	e7f5      	b.n	12c4a <cbvprintf_package+0x332>
						s_rw_cnt++;
   12c5e:	9b06      	ldr	r3, [sp, #24]
   12c60:	3301      	adds	r3, #1
   12c62:	9306      	str	r3, [sp, #24]
   12c64:	e6b0      	b.n	129c8 <cbvprintf_package+0xb0>
				} else if (is_ro) {
   12c66:	b110      	cbz	r0, 12c6e <cbvprintf_package+0x356>
					len += 1;
   12c68:	f10a 0a01 	add.w	sl, sl, #1
   12c6c:	e6ac      	b.n	129c8 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
   12c6e:	9b00      	ldr	r3, [sp, #0]
   12c70:	b113      	cbz	r3, 12c78 <cbvprintf_package+0x360>
					len += 2;
   12c72:	f10a 0a02 	add.w	sl, sl, #2
   12c76:	e6a7      	b.n	129c8 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
   12c78:	9802      	ldr	r0, [sp, #8]
   12c7a:	f019 fd7f 	bl	2c77c <strlen>
   12c7e:	1c83      	adds	r3, r0, #2
   12c80:	449a      	add	sl, r3
   12c82:	e6a1      	b.n	129c8 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
   12c84:	991a      	ldr	r1, [sp, #104]	; 0x68
   12c86:	1d08      	adds	r0, r1, #4
   12c88:	901a      	str	r0, [sp, #104]	; 0x68
   12c8a:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
   12c8c:	b107      	cbz	r7, 12c90 <cbvprintf_package+0x378>
				*(int *)buf = v;
   12c8e:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
   12c90:	3404      	adds	r4, #4
   12c92:	e6dc      	b.n	12a4e <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
   12c94:	1be3      	subs	r3, r4, r7
   12c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12c9a:	f080 8082 	bcs.w	12da2 <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
   12c9e:	b197      	cbz	r7, 12cc6 <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   12ca0:	2200      	movs	r2, #0
   12ca2:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12ca4:	089b      	lsrs	r3, r3, #2
   12ca6:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
   12ca8:	9b00      	ldr	r3, [sp, #0]
   12caa:	b183      	cbz	r3, 12cce <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12cac:	9b06      	ldr	r3, [sp, #24]
   12cae:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   12cb0:	9b04      	ldr	r3, [sp, #16]
   12cb2:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   12cb4:	bb1b      	cbnz	r3, 12cfe <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
   12cb6:	9d01      	ldr	r5, [sp, #4]
   12cb8:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12cbc:	f8dd b010 	ldr.w	fp, [sp, #16]
   12cc0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   12cc4:	e03b      	b.n	12d3e <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12cc6:	4453      	add	r3, sl
   12cc8:	f1a3 0008 	sub.w	r0, r3, #8
   12ccc:	e054      	b.n	12d78 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   12cce:	9b06      	ldr	r3, [sp, #24]
   12cd0:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   12cd2:	e7ed      	b.n	12cb0 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
   12cd4:	3301      	adds	r3, #1
   12cd6:	4298      	cmp	r0, r3
   12cd8:	d9ed      	bls.n	12cb6 <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   12cda:	f103 0240 	add.w	r2, r3, #64	; 0x40
   12cde:	446a      	add	r2, sp
   12ce0:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   12ce4:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   12ce8:	2a00      	cmp	r2, #0
   12cea:	daf3      	bge.n	12cd4 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   12cec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   12cf0:	1be2      	subs	r2, r4, r7
   12cf2:	3201      	adds	r2, #1
   12cf4:	4552      	cmp	r2, sl
   12cf6:	d857      	bhi.n	12da8 <cbvprintf_package+0x490>
			*buf++ = pos;
   12cf8:	f804 1b01 	strb.w	r1, [r4], #1
   12cfc:	e7ea      	b.n	12cd4 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
   12cfe:	9b01      	ldr	r3, [sp, #4]
   12d00:	9803      	ldr	r0, [sp, #12]
   12d02:	e7e8      	b.n	12cd6 <cbvprintf_package+0x3be>
		if (rws_pos_en) {
   12d04:	9b00      	ldr	r3, [sp, #0]
   12d06:	b33b      	cbz	r3, 12d58 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
   12d08:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12d0c:	446b      	add	r3, sp
   12d0e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
   12d12:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
   12d16:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
   12d18:	1be3      	subs	r3, r4, r7
   12d1a:	4433      	add	r3, r6
   12d1c:	3301      	adds	r3, #1
   12d1e:	4553      	cmp	r3, sl
   12d20:	d845      	bhi.n	12dae <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   12d22:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12d26:	446b      	add	r3, sp
   12d28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12d2c:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
   12d30:	4632      	mov	r2, r6
   12d32:	4641      	mov	r1, r8
   12d34:	4620      	mov	r0, r4
   12d36:	f019 fd59 	bl	2c7ec <memcpy>
		buf += size;
   12d3a:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
   12d3c:	3501      	adds	r5, #1
   12d3e:	45a9      	cmp	r9, r5
   12d40:	d919      	bls.n	12d76 <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   12d42:	f1bb 0f00 	cmp.w	fp, #0
   12d46:	d0dd      	beq.n	12d04 <cbvprintf_package+0x3ec>
   12d48:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12d4c:	446b      	add	r3, sp
   12d4e:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   12d52:	2b00      	cmp	r3, #0
   12d54:	dad6      	bge.n	12d04 <cbvprintf_package+0x3ec>
   12d56:	e7f1      	b.n	12d3c <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   12d58:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12d5c:	446b      	add	r3, sp
   12d5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12d62:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12d66:	2200      	movs	r2, #0
   12d68:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
   12d6c:	4640      	mov	r0, r8
   12d6e:	f019 fd05 	bl	2c77c <strlen>
   12d72:	1c46      	adds	r6, r0, #1
   12d74:	e7d0      	b.n	12d18 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
   12d76:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12d78:	b011      	add	sp, #68	; 0x44
   12d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   12d7e:	f06f 000d 	mvn.w	r0, #13
   12d82:	e7f9      	b.n	12d78 <cbvprintf_package+0x460>
		return -ENOSPC;
   12d84:	f06f 001b 	mvn.w	r0, #27
   12d88:	e7f6      	b.n	12d78 <cbvprintf_package+0x460>
			return -ENOSPC;
   12d8a:	f06f 001b 	mvn.w	r0, #27
   12d8e:	e7f3      	b.n	12d78 <cbvprintf_package+0x460>
					return -EINVAL;
   12d90:	f06f 0015 	mvn.w	r0, #21
   12d94:	e7f0      	b.n	12d78 <cbvprintf_package+0x460>
					return -EINVAL;
   12d96:	f06f 0015 	mvn.w	r0, #21
   12d9a:	e7ed      	b.n	12d78 <cbvprintf_package+0x460>
			return -EINVAL;
   12d9c:	f06f 0015 	mvn.w	r0, #21
   12da0:	e7ea      	b.n	12d78 <cbvprintf_package+0x460>
		return -EINVAL;
   12da2:	f06f 0015 	mvn.w	r0, #21
   12da6:	e7e7      	b.n	12d78 <cbvprintf_package+0x460>
				return -ENOSPC;
   12da8:	f06f 001b 	mvn.w	r0, #27
   12dac:	e7e4      	b.n	12d78 <cbvprintf_package+0x460>
			return -ENOSPC;
   12dae:	f06f 001b 	mvn.w	r0, #27
   12db2:	e7e1      	b.n	12d78 <cbvprintf_package+0x460>
   12db4:	0003196c 	.word	0x0003196c
   12db8:	000354c8 	.word	0x000354c8

00012dbc <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc0:	b097      	sub	sp, #92	; 0x5c
   12dc2:	af00      	add	r7, sp, #0
   12dc4:	4683      	mov	fp, r0
   12dc6:	61ba      	str	r2, [r7, #24]
   12dc8:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   12dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12dce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   12dd2:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12dd4:	60f9      	str	r1, [r7, #12]
   12dd6:	b151      	cbz	r1, 12dee <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   12dd8:	f89b 6002 	ldrb.w	r6, [fp, #2]
   12ddc:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
   12dde:	b156      	cbz	r6, 12df6 <cbprintf_package_convert+0x3a>
   12de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12de4:	f013 0f01 	tst.w	r3, #1
   12de8:	d111      	bne.n	12e0e <cbprintf_package_convert+0x52>
   12dea:	2300      	movs	r3, #0
   12dec:	e004      	b.n	12df8 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12dee:	f017 faa3 	bl	2a338 <get_package_len>
   12df2:	60f8      	str	r0, [r7, #12]
   12df4:	e7f0      	b.n	12dd8 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
   12df6:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12df8:	f89b 2003 	ldrb.w	r2, [fp, #3]
   12dfc:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
   12dfe:	b142      	cbz	r2, 12e12 <cbprintf_package_convert+0x56>
   12e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   12e04:	f012 0f02 	tst.w	r2, #2
   12e08:	d122      	bne.n	12e50 <cbprintf_package_convert+0x94>
   12e0a:	2200      	movs	r2, #0
   12e0c:	e002      	b.n	12e14 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
   12e0e:	2301      	movs	r3, #1
   12e10:	e7f2      	b.n	12df8 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
   12e12:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   12e14:	b902      	cbnz	r2, 12e18 <cbprintf_package_convert+0x5c>
   12e16:	b1eb      	cbz	r3, 12e54 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   12e18:	f89b 5000 	ldrb.w	r5, [fp]
   12e1c:	00aa      	lsls	r2, r5, #2
   12e1e:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   12e20:	f8db 2004 	ldr.w	r2, [fp, #4]
   12e24:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
   12e26:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   12e2a:	69ba      	ldr	r2, [r7, #24]
   12e2c:	b1f2      	cbz	r2, 12e6c <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   12e2e:	2b00      	cmp	r3, #0
   12e30:	f040 8110 	bne.w	13054 <cbprintf_package_convert+0x298>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12e34:	f1b9 0f00 	cmp.w	r9, #0
   12e38:	f000 811b 	beq.w	13072 <cbprintf_package_convert+0x2b6>
   12e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12e40:	f013 0f04 	tst.w	r3, #4
   12e44:	f040 8119 	bne.w	1307a <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   12e48:	2000      	movs	r0, #0
		keep_cnt = 0;
   12e4a:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   12e4c:	4606      	mov	r6, r0
   12e4e:	e105      	b.n	1305c <cbprintf_package_convert+0x2a0>
	rw_cpy = rws_nbr > 0 &&
   12e50:	2201      	movs	r2, #1
   12e52:	e7df      	b.n	12e14 <cbprintf_package_convert+0x58>
		if (cb) {
   12e54:	69bb      	ldr	r3, [r7, #24]
   12e56:	b11b      	cbz	r3, 12e60 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
   12e58:	693a      	ldr	r2, [r7, #16]
   12e5a:	68f9      	ldr	r1, [r7, #12]
   12e5c:	4658      	mov	r0, fp
   12e5e:	4798      	blx	r3
		return in_len;
   12e60:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   12e62:	4620      	mov	r0, r4
   12e64:	375c      	adds	r7, #92	; 0x5c
   12e66:	46bd      	mov	sp, r7
   12e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   12e6c:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
   12e6e:	bb2b      	cbnz	r3, 12ebc <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12e70:	f1b9 0f00 	cmp.w	r9, #0
   12e74:	d038      	beq.n	12ee8 <cbprintf_package_convert+0x12c>
   12e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12e7a:	f013 0304 	ands.w	r3, r3, #4
   12e7e:	613b      	str	r3, [r7, #16]
   12e80:	d027      	beq.n	12ed2 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
   12e82:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   12e84:	2300      	movs	r3, #0
   12e86:	613b      	str	r3, [r7, #16]
   12e88:	e023      	b.n	12ed2 <cbprintf_package_convert+0x116>
				out_len += len;
   12e8a:	4404      	add	r4, r0
				str_pos++;
   12e8c:	3501      	adds	r5, #1
			for (unsigned int i = 0; i < ros_nbr; i++) {
   12e8e:	3601      	adds	r6, #1
   12e90:	454e      	cmp	r6, r9
   12e92:	d21a      	bcs.n	12eca <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
   12e94:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   12e96:	2300      	movs	r3, #0
   12e98:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   12e9c:	4619      	mov	r1, r3
   12e9e:	69b8      	ldr	r0, [r7, #24]
   12ea0:	f017 fa5f 	bl	2a362 <append_string>
				if (strl && strl_cnt < strl_len) {
   12ea4:	f1ba 0f00 	cmp.w	sl, #0
   12ea8:	d0ef      	beq.n	12e8a <cbprintf_package_convert+0xce>
   12eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   12eae:	4598      	cmp	r8, r3
   12eb0:	d2eb      	bcs.n	12e8a <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
   12eb2:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
   12eb6:	f108 0801 	add.w	r8, r8, #1
   12eba:	e7e6      	b.n	12e8a <cbprintf_package_convert+0xce>
			for (unsigned int i = 0; i < ros_nbr; i++) {
   12ebc:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
   12ebe:	f8c7 801c 	str.w	r8, [r7, #28]
   12ec2:	46b0      	mov	r8, r6
   12ec4:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
   12ec8:	e7e2      	b.n	12e90 <cbprintf_package_convert+0xd4>
   12eca:	f8c7 8010 	str.w	r8, [r7, #16]
   12ece:	f8d7 801c 	ldr.w	r8, [r7, #28]
		bool drop_ro_str_pos = !(flags &
   12ed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12ed6:	f003 0305 	and.w	r3, r3, #5
   12eda:	60fb      	str	r3, [r7, #12]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12edc:	f04f 0a00 	mov.w	sl, #0
   12ee0:	46a1      	mov	r9, r4
   12ee2:	f8c7 b01c 	str.w	fp, [r7, #28]
   12ee6:	e09f      	b.n	13028 <cbprintf_package_convert+0x26c>
	size_t strl_cnt = 0;
   12ee8:	f8c7 9010 	str.w	r9, [r7, #16]
   12eec:	e7f1      	b.n	12ed2 <cbprintf_package_convert+0x116>
   12eee:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12ef0:	6a3b      	ldr	r3, [r7, #32]
   12ef2:	b97b      	cbnz	r3, 12f14 <cbprintf_package_convert+0x158>
			if (is_ro) {
   12ef4:	2d00      	cmp	r5, #0
   12ef6:	d079      	beq.n	12fec <cbprintf_package_convert+0x230>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12efc:	f013 0f01 	tst.w	r3, #1
   12f00:	d179      	bne.n	12ff6 <cbprintf_package_convert+0x23a>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12f02:	68fb      	ldr	r3, [r7, #12]
   12f04:	2b00      	cmp	r3, #0
   12f06:	d16f      	bne.n	12fe8 <cbprintf_package_convert+0x22c>
   12f08:	2302      	movs	r3, #2
   12f0a:	eba9 0903 	sub.w	r9, r9, r3
   12f0e:	e088      	b.n	13022 <cbprintf_package_convert+0x266>
   12f10:	2501      	movs	r5, #1
   12f12:	e7ed      	b.n	12ef0 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12f14:	4659      	mov	r1, fp
   12f16:	6978      	ldr	r0, [r7, #20]
   12f18:	f017 fa6a 	bl	2a3f0 <is_ptr>
   12f1c:	2800      	cmp	r0, #0
   12f1e:	d0e9      	beq.n	12ef4 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12f20:	466c      	mov	r4, sp
   12f22:	2300      	movs	r3, #0
   12f24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   12f28:	2302      	movs	r3, #2
   12f2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   12f2e:	b08a      	sub	sp, #40	; 0x28
   12f30:	4669      	mov	r1, sp
   12f32:	f111 0210 	adds.w	r2, r1, #16
   12f36:	d037      	beq.n	12fa8 <cbprintf_package_convert+0x1ec>
   12f38:	2512      	movs	r5, #18
   12f3a:	b11a      	cbz	r2, 12f44 <cbprintf_package_convert+0x188>
   12f3c:	2d04      	cmp	r5, #4
   12f3e:	dd01      	ble.n	12f44 <cbprintf_package_convert+0x188>
   12f40:	4bb2      	ldr	r3, [pc, #712]	; (1320c <cbprintf_package_convert+0x450>)
   12f42:	614b      	str	r3, [r1, #20]
   12f44:	2300      	movs	r3, #0
   12f46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   12f4a:	2302      	movs	r3, #2
   12f4c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   12f50:	bb6a      	cbnz	r2, 12fae <cbprintf_package_convert+0x1f2>
   12f52:	2d11      	cmp	r5, #17
   12f54:	dd45      	ble.n	12fe2 <cbprintf_package_convert+0x226>
   12f56:	2312      	movs	r3, #18
   12f58:	b162      	cbz	r2, 12f74 <cbprintf_package_convert+0x1b8>
   12f5a:	2004      	movs	r0, #4
   12f5c:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   12f60:	2000      	movs	r0, #0
   12f62:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   12f66:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   12f6a:	2001      	movs	r0, #1
   12f6c:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   12f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12f72:	6108      	str	r0, [r1, #16]
   12f74:	f36f 0800 	bfc	r8, #0, #1
   12f78:	f36f 0841 	bfc	r8, #1, #1
   12f7c:	f36f 0882 	bfc	r8, #2, #1
   12f80:	f36f 08c5 	bfc	r8, #3, #3
   12f84:	2102      	movs	r1, #2
   12f86:	f361 1888 	bfi	r8, r1, #6, #3
   12f8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   12f8e:	f363 2853 	bfi	r8, r3, #9, #11
   12f92:	f36f 581f 	bfc	r8, #20, #12
   12f96:	2300      	movs	r3, #0
   12f98:	4641      	mov	r1, r8
   12f9a:	489d      	ldr	r0, [pc, #628]	; (13210 <cbprintf_package_convert+0x454>)
   12f9c:	f001 f8ae 	bl	140fc <z_impl_z_log_msg_static_create>
   12fa0:	46a5      	mov	sp, r4
				out_len -= 2;
   12fa2:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   12fa6:	e03c      	b.n	13022 <cbprintf_package_convert+0x266>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12fa8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   12fac:	e7c5      	b.n	12f3a <cbprintf_package_convert+0x17e>
   12fae:	462b      	mov	r3, r5
   12fb0:	2d08      	cmp	r5, #8
   12fb2:	dd01      	ble.n	12fb8 <cbprintf_package_convert+0x1fc>
   12fb4:	6978      	ldr	r0, [r7, #20]
   12fb6:	6188      	str	r0, [r1, #24]
   12fb8:	2b0c      	cmp	r3, #12
   12fba:	dd01      	ble.n	12fc0 <cbprintf_package_convert+0x204>
   12fbc:	f8c1 b01c 	str.w	fp, [r1, #28]
   12fc0:	f101 0320 	add.w	r3, r1, #32
   12fc4:	2000      	movs	r0, #0
   12fc6:	e009      	b.n	12fdc <cbprintf_package_convert+0x220>
   12fc8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   12fcc:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   12fd0:	44f4      	add	ip, lr
   12fd2:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   12fd6:	f803 cb01 	strb.w	ip, [r3], #1
   12fda:	3001      	adds	r0, #1
   12fdc:	2801      	cmp	r0, #1
   12fde:	d9f3      	bls.n	12fc8 <cbprintf_package_convert+0x20c>
   12fe0:	e7b7      	b.n	12f52 <cbprintf_package_convert+0x196>
   12fe2:	f06f 031b 	mvn.w	r3, #27
   12fe6:	e7b7      	b.n	12f58 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12fe8:	2301      	movs	r3, #1
   12fea:	e78e      	b.n	12f0a <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12ff0:	f013 0f02 	tst.w	r3, #2
   12ff4:	d015      	beq.n	13022 <cbprintf_package_convert+0x266>
				len = append_string(cb, NULL, str, 0);
   12ff6:	2300      	movs	r3, #0
   12ff8:	4622      	mov	r2, r4
   12ffa:	4619      	mov	r1, r3
   12ffc:	69b8      	ldr	r0, [r7, #24]
   12ffe:	f017 f9b0 	bl	2a362 <append_string>
				if (strl && strl_cnt < strl_len) {
   13002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13006:	b153      	cbz	r3, 1301e <cbprintf_package_convert+0x262>
   13008:	693b      	ldr	r3, [r7, #16]
   1300a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1300e:	4293      	cmp	r3, r2
   13010:	d205      	bcs.n	1301e <cbprintf_package_convert+0x262>
					strl[strl_cnt++] = (uint16_t)len;
   13012:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13016:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   1301a:	3301      	adds	r3, #1
   1301c:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   1301e:	3801      	subs	r0, #1
   13020:	4481      	add	r9, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   13022:	f10a 0a01 	add.w	sl, sl, #1
			uint8_t arg_pos = *str_pos++;
   13026:	4635      	mov	r5, r6
		for (unsigned int i = 0; i < rws_nbr; i++) {
   13028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1302a:	459a      	cmp	sl, r3
   1302c:	d210      	bcs.n	13050 <cbprintf_package_convert+0x294>
			uint8_t arg_idx = *str_pos++;
   1302e:	462e      	mov	r6, r5
   13030:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
   13034:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   13036:	69fa      	ldr	r2, [r7, #28]
   13038:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   1303c:	4b75      	ldr	r3, [pc, #468]	; (13214 <cbprintf_package_convert+0x458>)
   1303e:	429c      	cmp	r4, r3
   13040:	f4ff af55 	bcc.w	12eee <cbprintf_package_convert+0x132>
   13044:	4b74      	ldr	r3, [pc, #464]	; (13218 <cbprintf_package_convert+0x45c>)
   13046:	429c      	cmp	r4, r3
   13048:	f4ff af62 	bcc.w	12f10 <cbprintf_package_convert+0x154>
   1304c:	2500      	movs	r5, #0
   1304e:	e74f      	b.n	12ef0 <cbprintf_package_convert+0x134>
   13050:	464c      	mov	r4, r9
   13052:	e706      	b.n	12e62 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
   13054:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   13058:	2300      	movs	r3, #0
   1305a:	61fb      	str	r3, [r7, #28]
	if (dst) {
   1305c:	b118      	cbz	r0, 13066 <cbprintf_package_convert+0x2aa>
		memcpy(dst, str_pos, ros_nbr);
   1305e:	464a      	mov	r2, r9
   13060:	4629      	mov	r1, r5
   13062:	f019 fbc3 	bl	2c7ec <memcpy>
	str_pos += ros_nbr;
   13066:	444d      	add	r5, r9
	for (unsigned int i = 0; i < rws_nbr; i++) {
   13068:	f04f 0800 	mov.w	r8, #0
   1306c:	f8c7 9004 	str.w	r9, [r7, #4]
   13070:	e01e      	b.n	130b0 <cbprintf_package_convert+0x2f4>
		dst = NULL;
   13072:	2000      	movs	r0, #0
		keep_cnt = 0;
   13074:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   13076:	4606      	mov	r6, r0
   13078:	e7f0      	b.n	1305c <cbprintf_package_convert+0x2a0>
		keep_cnt = ros_nbr;
   1307a:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
   1307c:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   13080:	2600      	movs	r6, #0
   13082:	e7eb      	b.n	1305c <cbprintf_package_convert+0x2a0>
   13084:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   13086:	6a3b      	ldr	r3, [r7, #32]
   13088:	bb33      	cbnz	r3, 130d8 <cbprintf_package_convert+0x31c>
		if (is_ro) {
   1308a:	2d00      	cmp	r5, #0
   1308c:	d03b      	beq.n	13106 <cbprintf_package_convert+0x34a>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1308e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13092:	f013 0f01 	tst.w	r3, #1
   13096:	d026      	beq.n	130e6 <cbprintf_package_convert+0x32a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   13098:	1c73      	adds	r3, r6, #1
   1309a:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1309e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   130a2:	1856      	adds	r6, r2, r1
   130a4:	f806 9c14 	strb.w	r9, [r6, #-20]
   130a8:	b2de      	uxtb	r6, r3
	for (unsigned int i = 0; i < rws_nbr; i++) {
   130aa:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
   130ae:	4625      	mov	r5, r4
	for (unsigned int i = 0; i < rws_nbr; i++) {
   130b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130b2:	4598      	cmp	r8, r3
   130b4:	d24a      	bcs.n	1314c <cbprintf_package_convert+0x390>
		uint8_t arg_idx = *str_pos++;
   130b6:	462c      	mov	r4, r5
   130b8:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
   130bc:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   130c0:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   130c4:	4a53      	ldr	r2, [pc, #332]	; (13214 <cbprintf_package_convert+0x458>)
   130c6:	4293      	cmp	r3, r2
   130c8:	d3dc      	bcc.n	13084 <cbprintf_package_convert+0x2c8>
   130ca:	4a53      	ldr	r2, [pc, #332]	; (13218 <cbprintf_package_convert+0x45c>)
   130cc:	4293      	cmp	r3, r2
   130ce:	d301      	bcc.n	130d4 <cbprintf_package_convert+0x318>
   130d0:	2500      	movs	r5, #0
   130d2:	e7d8      	b.n	13086 <cbprintf_package_convert+0x2ca>
   130d4:	2501      	movs	r5, #1
   130d6:	e7d6      	b.n	13086 <cbprintf_package_convert+0x2ca>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   130d8:	4651      	mov	r1, sl
   130da:	6978      	ldr	r0, [r7, #20]
   130dc:	f017 f988 	bl	2a3f0 <is_ptr>
   130e0:	2800      	cmp	r0, #0
   130e2:	d0d2      	beq.n	1308a <cbprintf_package_convert+0x2ce>
   130e4:	e7e1      	b.n	130aa <cbprintf_package_convert+0x2ee>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   130e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   130ea:	f013 0f04 	tst.w	r3, #4
   130ee:	d0dc      	beq.n	130aa <cbprintf_package_convert+0x2ee>
				keep_str_pos[keep_cnt++] = arg_pos;
   130f0:	69fa      	ldr	r2, [r7, #28]
   130f2:	1c53      	adds	r3, r2, #1
   130f4:	3230      	adds	r2, #48	; 0x30
   130f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   130fa:	440a      	add	r2, r1
   130fc:	f802 9c24 	strb.w	r9, [r2, #-36]
   13100:	b2db      	uxtb	r3, r3
   13102:	61fb      	str	r3, [r7, #28]
   13104:	e7d1      	b.n	130aa <cbprintf_package_convert+0x2ee>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   13106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1310a:	f013 0f02 	tst.w	r3, #2
   1310e:	d009      	beq.n	13124 <cbprintf_package_convert+0x368>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   13110:	1c73      	adds	r3, r6, #1
   13112:	f106 0230 	add.w	r2, r6, #48	; 0x30
   13116:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1311a:	1856      	adds	r6, r2, r1
   1311c:	f806 9c14 	strb.w	r9, [r6, #-20]
   13120:	b2de      	uxtb	r6, r3
   13122:	e7c2      	b.n	130aa <cbprintf_package_convert+0x2ee>
				keep_str_pos[keep_cnt++] = arg_idx;
   13124:	69f8      	ldr	r0, [r7, #28]
   13126:	1c43      	adds	r3, r0, #1
   13128:	f100 0130 	add.w	r1, r0, #48	; 0x30
   1312c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13130:	188a      	adds	r2, r1, r2
   13132:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   13136:	4602      	mov	r2, r0
   13138:	3202      	adds	r2, #2
   1313a:	b2d2      	uxtb	r2, r2
   1313c:	61fa      	str	r2, [r7, #28]
   1313e:	f107 0258 	add.w	r2, r7, #88	; 0x58
   13142:	fa52 f383 	uxtab	r3, r2, r3
   13146:	f803 9c24 	strb.w	r9, [r3, #-36]
   1314a:	e7ae      	b.n	130aa <cbprintf_package_convert+0x2ee>
	out_desc.len = in_desc->len;
   1314c:	f8d7 9004 	ldr.w	r9, [r7, #4]
   13150:	f89b 3000 	ldrb.w	r3, [fp]
   13154:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   13158:	f89b 3001 	ldrb.w	r3, [fp, #1]
   1315c:	4433      	add	r3, r6
   1315e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   13162:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13166:	f013 0f02 	tst.w	r3, #2
   1316a:	d10e      	bne.n	1318a <cbprintf_package_convert+0x3ce>
   1316c:	69fb      	ldr	r3, [r7, #28]
   1316e:	f3c3 0347 	ubfx	r3, r3, #1, #8
   13172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1317a:	f013 0f01 	tst.w	r3, #1
   1317e:	d106      	bne.n	1318e <cbprintf_package_convert+0x3d2>
   13180:	f013 0f04 	tst.w	r3, #4
   13184:	d13f      	bne.n	13206 <cbprintf_package_convert+0x44a>
   13186:	2300      	movs	r3, #0
   13188:	e002      	b.n	13190 <cbprintf_package_convert+0x3d4>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1318a:	2300      	movs	r3, #0
   1318c:	e7f1      	b.n	13172 <cbprintf_package_convert+0x3b6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1318e:	2300      	movs	r3, #0
   13190:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   13194:	f8db 0000 	ldr.w	r0, [fp]
   13198:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   1319a:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1319c:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
   131a0:	f8d7 8010 	ldr.w	r8, [r7, #16]
   131a4:	4642      	mov	r2, r8
   131a6:	68b9      	ldr	r1, [r7, #8]
   131a8:	4658      	mov	r0, fp
   131aa:	f8d7 a018 	ldr.w	sl, [r7, #24]
   131ae:	47d0      	blx	sl
	if (rv < 0) {
   131b0:	1e04      	subs	r4, r0, #0
   131b2:	f6ff ae56 	blt.w	12e62 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
   131b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   131b8:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   131bc:	f8c7 8010 	str.w	r8, [r7, #16]
   131c0:	4642      	mov	r2, r8
   131c2:	69f9      	ldr	r1, [r7, #28]
   131c4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   131c8:	47d0      	blx	sl
	if (rv < 0) {
   131ca:	2800      	cmp	r0, #0
   131cc:	db57      	blt.n	1327e <cbprintf_package_convert+0x4c2>
	out_len += rv;
   131ce:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   131d2:	68b9      	ldr	r1, [r7, #8]
   131d4:	4449      	add	r1, r9
   131d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131d8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   131dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
   131e0:	464a      	mov	r2, r9
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	1a59      	subs	r1, r3, r1
   131e6:	4628      	mov	r0, r5
   131e8:	47d0      	blx	sl
	if (rv < 0) {
   131ea:	1e04      	subs	r4, r0, #0
   131ec:	f6ff ae39 	blt.w	12e62 <cbprintf_package_convert+0xa6>
	out_len += rv;
   131f0:	eb08 0504 	add.w	r5, r8, r4
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   131f4:	f04f 0800 	mov.w	r8, #0
   131f8:	627e      	str	r6, [r7, #36]	; 0x24
   131fa:	f8c7 b020 	str.w	fp, [r7, #32]
   131fe:	4656      	mov	r6, sl
   13200:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
   13204:	e01f      	b.n	13246 <cbprintf_package_convert+0x48a>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13206:	69fb      	ldr	r3, [r7, #28]
   13208:	e7c2      	b.n	13190 <cbprintf_package_convert+0x3d4>
   1320a:	bf00      	nop
   1320c:	00032598 	.word	0x00032598
   13210:	00031d3c 	.word	0x00031d3c
   13214:	0003196c 	.word	0x0003196c
   13218:	000354c8 	.word	0x000354c8
		uint16_t str_len = strl ? strl[i] : 0;
   1321c:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   13220:	464a      	mov	r2, r9
   13222:	2101      	movs	r1, #1
   13224:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   13228:	47b0      	blx	r6
		if (rv < 0) {
   1322a:	2800      	cmp	r0, #0
   1322c:	db29      	blt.n	13282 <cbprintf_package_convert+0x4c6>
		out_len += rv;
   1322e:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
   13230:	4653      	mov	r3, sl
   13232:	4622      	mov	r2, r4
   13234:	4649      	mov	r1, r9
   13236:	4630      	mov	r0, r6
   13238:	f017 f893 	bl	2a362 <append_string>
		if (rv < 0) {
   1323c:	2800      	cmp	r0, #0
   1323e:	db22      	blt.n	13286 <cbprintf_package_convert+0x4ca>
		out_len += rv;
   13240:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   13242:	f108 0801 	add.w	r8, r8, #1
   13246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13248:	4598      	cmp	r8, r3
   1324a:	d211      	bcs.n	13270 <cbprintf_package_convert+0x4b4>
		uint8_t loc = cpy_str_pos[i];
   1324c:	f108 0330 	add.w	r3, r8, #48	; 0x30
   13250:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13254:	4413      	add	r3, r2
   13256:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1325a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   1325e:	6a3a      	ldr	r2, [r7, #32]
   13260:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   13264:	f1bb 0f00 	cmp.w	fp, #0
   13268:	d0d8      	beq.n	1321c <cbprintf_package_convert+0x460>
   1326a:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
   1326e:	e7d7      	b.n	13220 <cbprintf_package_convert+0x464>
	(void)cb(NULL, 0, ctx);
   13270:	693a      	ldr	r2, [r7, #16]
   13272:	2100      	movs	r1, #0
   13274:	4608      	mov	r0, r1
   13276:	69bb      	ldr	r3, [r7, #24]
   13278:	4798      	blx	r3
	return out_len;
   1327a:	462c      	mov	r4, r5
   1327c:	e5f1      	b.n	12e62 <cbprintf_package_convert+0xa6>
		return rv;
   1327e:	4604      	mov	r4, r0
   13280:	e5ef      	b.n	12e62 <cbprintf_package_convert+0xa6>
   13282:	4604      	mov	r4, r0
   13284:	e5ed      	b.n	12e62 <cbprintf_package_convert+0xa6>
   13286:	4604      	mov	r4, r0
   13288:	e5eb      	b.n	12e62 <cbprintf_package_convert+0xa6>
   1328a:	bf00      	nop

0001328c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   1328c:	4b01      	ldr	r3, [pc, #4]	; (13294 <__printk_hook_install+0x8>)
   1328e:	6018      	str	r0, [r3, #0]
}
   13290:	4770      	bx	lr
   13292:	bf00      	nop
   13294:	200005ec 	.word	0x200005ec

00013298 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   13298:	b510      	push	{r4, lr}
   1329a:	b086      	sub	sp, #24
   1329c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1329e:	9003      	str	r0, [sp, #12]
   132a0:	9104      	str	r1, [sp, #16]
   132a2:	2100      	movs	r1, #0
   132a4:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   132a6:	9100      	str	r1, [sp, #0]
   132a8:	a903      	add	r1, sp, #12
   132aa:	4806      	ldr	r0, [pc, #24]	; (132c4 <vsnprintk+0x2c>)
   132ac:	f000 f924 	bl	134f8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   132b0:	9b05      	ldr	r3, [sp, #20]
   132b2:	9a04      	ldr	r2, [sp, #16]
   132b4:	4293      	cmp	r3, r2
   132b6:	da01      	bge.n	132bc <vsnprintk+0x24>
		str[ctx.count] = '\0';
   132b8:	2200      	movs	r2, #0
   132ba:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   132bc:	9805      	ldr	r0, [sp, #20]
   132be:	b006      	add	sp, #24
   132c0:	bd10      	pop	{r4, pc}
   132c2:	bf00      	nop
   132c4:	0002a443 	.word	0x0002a443

000132c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   132c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   132cc:	b083      	sub	sp, #12
   132ce:	4604      	mov	r4, r0
   132d0:	4608      	mov	r0, r1
   132d2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   132d4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   132d6:	f013 0f08 	tst.w	r3, #8
   132da:	d105      	bne.n	132e8 <process_event+0x20>
   132dc:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   132e0:	2300      	movs	r3, #0
   132e2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   132e4:	9301      	str	r3, [sp, #4]
}
   132e6:	e055      	b.n	13394 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   132e8:	2901      	cmp	r1, #1
   132ea:	d009      	beq.n	13300 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   132ec:	f043 0320 	orr.w	r3, r3, #32
   132f0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   132f2:	f385 8811 	msr	BASEPRI, r5
   132f6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   132fa:	b003      	add	sp, #12
   132fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13300:	f043 0310 	orr.w	r3, r3, #16
   13304:	8323      	strh	r3, [r4, #24]
   13306:	e7f4      	b.n	132f2 <process_event+0x2a>
			evt = process_recheck(mgr);
   13308:	4620      	mov	r0, r4
   1330a:	f017 fb2e 	bl	2a96a <process_recheck>
   1330e:	e043      	b.n	13398 <process_event+0xd0>
			res = mgr->last_res;
   13310:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   13314:	464a      	mov	r2, r9
   13316:	4669      	mov	r1, sp
   13318:	4620      	mov	r0, r4
   1331a:	f017 fb3f 	bl	2a99c <process_complete>
		onoff_transition_fn transit = NULL;
   1331e:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13322:	8b23      	ldrh	r3, [r4, #24]
   13324:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13328:	42b7      	cmp	r7, r6
   1332a:	d069      	beq.n	13400 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1332c:	68a2      	ldr	r2, [r4, #8]
   1332e:	2a00      	cmp	r2, #0
   13330:	d066      	beq.n	13400 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13332:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13334:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   13338:	8323      	strh	r3, [r4, #24]
   1333a:	f385 8811 	msr	BASEPRI, r5
   1333e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13342:	2a00      	cmp	r2, #0
   13344:	d164      	bne.n	13410 <process_event+0x148>
   13346:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   13348:	b12b      	cbz	r3, 13356 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   1334a:	464b      	mov	r3, r9
   1334c:	463a      	mov	r2, r7
   1334e:	4669      	mov	r1, sp
   13350:	4620      	mov	r0, r4
   13352:	f017 fb9c 	bl	2aa8e <notify_all>
			if (transit != NULL) {
   13356:	f1b8 0f00 	cmp.w	r8, #0
   1335a:	d002      	beq.n	13362 <process_event+0x9a>
				transit(mgr, transition_complete);
   1335c:	4934      	ldr	r1, [pc, #208]	; (13430 <process_event+0x168>)
   1335e:	4620      	mov	r0, r4
   13360:	47c0      	blx	r8
	__asm__ volatile(
   13362:	f04f 0340 	mov.w	r3, #64	; 0x40
   13366:	f3ef 8511 	mrs	r5, BASEPRI
   1336a:	f383 8812 	msr	BASEPRI_MAX, r3
   1336e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13372:	8b23      	ldrh	r3, [r4, #24]
   13374:	f023 0308 	bic.w	r3, r3, #8
   13378:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1337a:	8b23      	ldrh	r3, [r4, #24]
   1337c:	f013 0f10 	tst.w	r3, #16
   13380:	d04c      	beq.n	1341c <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13382:	f023 0310 	bic.w	r3, r3, #16
   13386:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   13388:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1338a:	8b26      	ldrh	r6, [r4, #24]
   1338c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   13390:	2800      	cmp	r0, #0
   13392:	d0ae      	beq.n	132f2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   13394:	2802      	cmp	r0, #2
   13396:	d0b7      	beq.n	13308 <process_event+0x40>
		if (evt == EVT_NOP) {
   13398:	2800      	cmp	r0, #0
   1339a:	d0aa      	beq.n	132f2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   1339c:	3801      	subs	r0, #1
   1339e:	2804      	cmp	r0, #4
   133a0:	d82a      	bhi.n	133f8 <process_event+0x130>
   133a2:	a301      	add	r3, pc, #4	; (adr r3, 133a8 <process_event+0xe0>)
   133a4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   133a8:	00013311 	.word	0x00013311
   133ac:	000133f9 	.word	0x000133f9
   133b0:	000133bd 	.word	0x000133bd
   133b4:	000133d1 	.word	0x000133d1
   133b8:	000133e5 	.word	0x000133e5
			transit = mgr->transitions->start;
   133bc:	6923      	ldr	r3, [r4, #16]
   133be:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   133c2:	2106      	movs	r1, #6
   133c4:	4620      	mov	r0, r4
   133c6:	f017 faa6 	bl	2a916 <set_state>
		res = 0;
   133ca:	f04f 0900 	mov.w	r9, #0
   133ce:	e7a8      	b.n	13322 <process_event+0x5a>
			transit = mgr->transitions->stop;
   133d0:	6923      	ldr	r3, [r4, #16]
   133d2:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   133d6:	2104      	movs	r1, #4
   133d8:	4620      	mov	r0, r4
   133da:	f017 fa9c 	bl	2a916 <set_state>
		res = 0;
   133de:	f04f 0900 	mov.w	r9, #0
   133e2:	e79e      	b.n	13322 <process_event+0x5a>
			transit = mgr->transitions->reset;
   133e4:	6923      	ldr	r3, [r4, #16]
   133e6:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   133ea:	2105      	movs	r1, #5
   133ec:	4620      	mov	r0, r4
   133ee:	f017 fa92 	bl	2a916 <set_state>
		res = 0;
   133f2:	f04f 0900 	mov.w	r9, #0
   133f6:	e794      	b.n	13322 <process_event+0x5a>
		if (evt == EVT_NOP) {
   133f8:	f04f 0800 	mov.w	r8, #0
   133fc:	46c1      	mov	r9, r8
   133fe:	e790      	b.n	13322 <process_event+0x5a>
   13400:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   13402:	b10a      	cbz	r2, 13408 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13404:	2200      	movs	r2, #0
   13406:	e795      	b.n	13334 <process_event+0x6c>
		    || (transit != NULL)) {
   13408:	f1b8 0f00 	cmp.w	r8, #0
   1340c:	d192      	bne.n	13334 <process_event+0x6c>
   1340e:	e7b4      	b.n	1337a <process_event+0xb2>
				notify_monitors(mgr, state, res);
   13410:	464a      	mov	r2, r9
   13412:	4639      	mov	r1, r7
   13414:	4620      	mov	r0, r4
   13416:	f017 fa86 	bl	2a926 <notify_monitors>
   1341a:	e794      	b.n	13346 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1341c:	f013 0f20 	tst.w	r3, #32
   13420:	d004      	beq.n	1342c <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13422:	f023 0320 	bic.w	r3, r3, #32
   13426:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   13428:	2002      	movs	r0, #2
   1342a:	e7ae      	b.n	1338a <process_event+0xc2>
		evt = EVT_NOP;
   1342c:	2000      	movs	r0, #0
   1342e:	e7ac      	b.n	1338a <process_event+0xc2>
   13430:	0002aabd 	.word	0x0002aabd

00013434 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   13434:	4684      	mov	ip, r0
   13436:	4608      	mov	r0, r1
	bool loop = true;
   13438:	2201      	movs	r2, #1
   1343a:	e026      	b.n	1348a <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   1343c:	f89c 3000 	ldrb.w	r3, [ip]
   13440:	f043 0304 	orr.w	r3, r3, #4
   13444:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   13448:	b1f2      	cbz	r2, 13488 <extract_flags+0x54>
			++sp;
   1344a:	3001      	adds	r0, #1
   1344c:	e01c      	b.n	13488 <extract_flags+0x54>
			conv->flag_plus = true;
   1344e:	f89c 3000 	ldrb.w	r3, [ip]
   13452:	f043 0308 	orr.w	r3, r3, #8
   13456:	f88c 3000 	strb.w	r3, [ip]
			break;
   1345a:	e7f5      	b.n	13448 <extract_flags+0x14>
			conv->flag_space = true;
   1345c:	f89c 3000 	ldrb.w	r3, [ip]
   13460:	f043 0310 	orr.w	r3, r3, #16
   13464:	f88c 3000 	strb.w	r3, [ip]
			break;
   13468:	e7ee      	b.n	13448 <extract_flags+0x14>
			conv->flag_hash = true;
   1346a:	f89c 3000 	ldrb.w	r3, [ip]
   1346e:	f043 0320 	orr.w	r3, r3, #32
   13472:	f88c 3000 	strb.w	r3, [ip]
			break;
   13476:	e7e7      	b.n	13448 <extract_flags+0x14>
			conv->flag_zero = true;
   13478:	f89c 3000 	ldrb.w	r3, [ip]
   1347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13480:	f88c 3000 	strb.w	r3, [ip]
			break;
   13484:	e7e0      	b.n	13448 <extract_flags+0x14>
		switch (*sp) {
   13486:	2200      	movs	r2, #0
		}
	} while (loop);
   13488:	b342      	cbz	r2, 134dc <extract_flags+0xa8>
		switch (*sp) {
   1348a:	7803      	ldrb	r3, [r0, #0]
   1348c:	3b20      	subs	r3, #32
   1348e:	2b10      	cmp	r3, #16
   13490:	d8f9      	bhi.n	13486 <extract_flags+0x52>
   13492:	a101      	add	r1, pc, #4	; (adr r1, 13498 <extract_flags+0x64>)
   13494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   13498:	0001345d 	.word	0x0001345d
   1349c:	00013487 	.word	0x00013487
   134a0:	00013487 	.word	0x00013487
   134a4:	0001346b 	.word	0x0001346b
   134a8:	00013487 	.word	0x00013487
   134ac:	00013487 	.word	0x00013487
   134b0:	00013487 	.word	0x00013487
   134b4:	00013487 	.word	0x00013487
   134b8:	00013487 	.word	0x00013487
   134bc:	00013487 	.word	0x00013487
   134c0:	00013487 	.word	0x00013487
   134c4:	0001344f 	.word	0x0001344f
   134c8:	00013487 	.word	0x00013487
   134cc:	0001343d 	.word	0x0001343d
   134d0:	00013487 	.word	0x00013487
   134d4:	00013487 	.word	0x00013487
   134d8:	00013479 	.word	0x00013479

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   134dc:	f89c 3000 	ldrb.w	r3, [ip]
   134e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
   134e4:	2b44      	cmp	r3, #68	; 0x44
   134e6:	d000      	beq.n	134ea <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   134e8:	4770      	bx	lr
		conv->flag_zero = false;
   134ea:	f89c 3000 	ldrb.w	r3, [ip]
   134ee:	f36f 1386 	bfc	r3, #6, #1
   134f2:	f88c 3000 	strb.w	r3, [ip]
   134f6:	e7f7      	b.n	134e8 <extract_flags+0xb4>

000134f8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   134f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134fc:	b091      	sub	sp, #68	; 0x44
   134fe:	4606      	mov	r6, r0
   13500:	460d      	mov	r5, r1
   13502:	4691      	mov	r9, r2
   13504:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13506:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13508:	f899 0000 	ldrb.w	r0, [r9]
   1350c:	2800      	cmp	r0, #0
   1350e:	f000 82b9 	beq.w	13a84 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   13512:	2825      	cmp	r0, #37	; 0x25
   13514:	d008      	beq.n	13528 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   13516:	f109 0901 	add.w	r9, r9, #1
   1351a:	4629      	mov	r1, r5
   1351c:	47b0      	blx	r6
   1351e:	2800      	cmp	r0, #0
   13520:	f2c0 82b1 	blt.w	13a86 <z_cbvprintf_impl+0x58e>
   13524:	3401      	adds	r4, #1
			continue;
   13526:	e7ef      	b.n	13508 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   13528:	2300      	movs	r3, #0
   1352a:	9304      	str	r3, [sp, #16]
   1352c:	9305      	str	r3, [sp, #20]
   1352e:	9306      	str	r3, [sp, #24]
   13530:	9307      	str	r3, [sp, #28]
   13532:	9308      	str	r3, [sp, #32]
   13534:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   13536:	4649      	mov	r1, r9
   13538:	a806      	add	r0, sp, #24
   1353a:	f017 fd36 	bl	2afaa <extract_conversion>
   1353e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   13540:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13544:	f013 0f01 	tst.w	r3, #1
   13548:	f000 8097 	beq.w	1367a <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   1354c:	9b03      	ldr	r3, [sp, #12]
   1354e:	1d1a      	adds	r2, r3, #4
   13550:	9203      	str	r2, [sp, #12]
   13552:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   13554:	2f00      	cmp	r7, #0
   13556:	f2c0 8088 	blt.w	1366a <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1355a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1355e:	f013 0f04 	tst.w	r3, #4
   13562:	f000 809c 	beq.w	1369e <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   13566:	9b03      	ldr	r3, [sp, #12]
   13568:	1d1a      	adds	r2, r3, #4
   1356a:	9203      	str	r2, [sp, #12]
   1356c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   13570:	f1ba 0f00 	cmp.w	sl, #0
   13574:	f2c0 808a 	blt.w	1368c <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   13578:	2300      	movs	r3, #0
   1357a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   1357c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   1357e:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13582:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   13586:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1358a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   1358e:	2b01      	cmp	r3, #1
   13590:	f000 808e 	beq.w	136b0 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   13594:	2b02      	cmp	r3, #2
   13596:	f000 80d3 	beq.w	13740 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1359a:	2b04      	cmp	r3, #4
   1359c:	f000 8124 	beq.w	137e8 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   135a0:	2b03      	cmp	r3, #3
   135a2:	f000 813b 	beq.w	1381c <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   135a6:	f89d 8018 	ldrb.w	r8, [sp, #24]
   135aa:	f018 0b03 	ands.w	fp, r8, #3
   135ae:	f040 813b 	bne.w	13828 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   135b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   135b6:	3b25      	subs	r3, #37	; 0x25
   135b8:	2b53      	cmp	r3, #83	; 0x53
   135ba:	f200 81ca 	bhi.w	13952 <z_cbvprintf_impl+0x45a>
   135be:	e8df f013 	tbh	[pc, r3, lsl #1]
   135c2:	0140      	.short	0x0140
   135c4:	01c801c8 	.word	0x01c801c8
   135c8:	01c801c8 	.word	0x01c801c8
   135cc:	01c801c8 	.word	0x01c801c8
   135d0:	01c801c8 	.word	0x01c801c8
   135d4:	01c801c8 	.word	0x01c801c8
   135d8:	01c801c8 	.word	0x01c801c8
   135dc:	01c801c8 	.word	0x01c801c8
   135e0:	01c801c8 	.word	0x01c801c8
   135e4:	01c801c8 	.word	0x01c801c8
   135e8:	01c801c8 	.word	0x01c801c8
   135ec:	01c801c8 	.word	0x01c801c8
   135f0:	01c801c8 	.word	0x01c801c8
   135f4:	01c801c8 	.word	0x01c801c8
   135f8:	01c801c8 	.word	0x01c801c8
   135fc:	01c801c8 	.word	0x01c801c8
   13600:	01c801c8 	.word	0x01c801c8
   13604:	01c801c8 	.word	0x01c801c8
   13608:	01c801c8 	.word	0x01c801c8
   1360c:	01c801c8 	.word	0x01c801c8
   13610:	01c801c8 	.word	0x01c801c8
   13614:	01c801c8 	.word	0x01c801c8
   13618:	01c801c8 	.word	0x01c801c8
   1361c:	01c801c8 	.word	0x01c801c8
   13620:	01c801c8 	.word	0x01c801c8
   13624:	01c801c8 	.word	0x01c801c8
   13628:	01c80181 	.word	0x01c80181
   1362c:	01c801c8 	.word	0x01c801c8
   13630:	01c801c8 	.word	0x01c801c8
   13634:	01c801c8 	.word	0x01c801c8
   13638:	01c801c8 	.word	0x01c801c8
   1363c:	015e01c8 	.word	0x015e01c8
   13640:	01c80167 	.word	0x01c80167
   13644:	01c801c8 	.word	0x01c801c8
   13648:	016701c8 	.word	0x016701c8
   1364c:	01c801c8 	.word	0x01c801c8
   13650:	01c801c8 	.word	0x01c801c8
   13654:	018101bd 	.word	0x018101bd
   13658:	01c801a1 	.word	0x01c801a1
   1365c:	014d01c8 	.word	0x014d01c8
   13660:	018101c8 	.word	0x018101c8
   13664:	01c801c8 	.word	0x01c801c8
   13668:	0181      	.short	0x0181
				conv->flag_dash = true;
   1366a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1366e:	f043 0304 	orr.w	r3, r3, #4
   13672:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   13676:	427f      	negs	r7, r7
   13678:	e76f      	b.n	1355a <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   1367a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   1367e:	2b00      	cmp	r3, #0
   13680:	db02      	blt.n	13688 <z_cbvprintf_impl+0x190>
		int width = -1;
   13682:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13686:	e768      	b.n	1355a <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   13688:	9f07      	ldr	r7, [sp, #28]
   1368a:	e766      	b.n	1355a <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   1368c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13690:	f36f 0341 	bfc	r3, #1, #1
   13694:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   13698:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1369c:	e76c      	b.n	13578 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   1369e:	f013 0f02 	tst.w	r3, #2
   136a2:	d002      	beq.n	136aa <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   136a4:	f8dd a020 	ldr.w	sl, [sp, #32]
   136a8:	e766      	b.n	13578 <z_cbvprintf_impl+0x80>
		int precision = -1;
   136aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   136ae:	e763      	b.n	13578 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   136b0:	1ecb      	subs	r3, r1, #3
   136b2:	2b04      	cmp	r3, #4
   136b4:	d804      	bhi.n	136c0 <z_cbvprintf_impl+0x1c8>
   136b6:	e8df f003 	tbb	[pc, r3]
   136ba:	1d0b      	.short	0x1d0b
   136bc:	3529      	.short	0x3529
   136be:	35          	.byte	0x35
   136bf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   136c0:	9b03      	ldr	r3, [sp, #12]
   136c2:	1d1a      	adds	r2, r3, #4
   136c4:	9203      	str	r2, [sp, #12]
   136c6:	681b      	ldr	r3, [r3, #0]
   136c8:	17da      	asrs	r2, r3, #31
   136ca:	9304      	str	r3, [sp, #16]
   136cc:	9205      	str	r2, [sp, #20]
				break;
   136ce:	e006      	b.n	136de <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   136d0:	9b03      	ldr	r3, [sp, #12]
   136d2:	1d1a      	adds	r2, r3, #4
   136d4:	9203      	str	r2, [sp, #12]
   136d6:	681b      	ldr	r3, [r3, #0]
   136d8:	17da      	asrs	r2, r3, #31
   136da:	9304      	str	r3, [sp, #16]
   136dc:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   136de:	2901      	cmp	r1, #1
   136e0:	d028      	beq.n	13734 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   136e2:	2902      	cmp	r1, #2
   136e4:	f47f af5f 	bne.w	135a6 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   136e8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   136ec:	17da      	asrs	r2, r3, #31
   136ee:	9304      	str	r3, [sp, #16]
   136f0:	9205      	str	r2, [sp, #20]
   136f2:	e758      	b.n	135a6 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   136f4:	9b03      	ldr	r3, [sp, #12]
   136f6:	3307      	adds	r3, #7
   136f8:	f023 0307 	bic.w	r3, r3, #7
   136fc:	f103 0208 	add.w	r2, r3, #8
   13700:	9203      	str	r2, [sp, #12]
   13702:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13706:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1370a:	e7e8      	b.n	136de <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   1370c:	9b03      	ldr	r3, [sp, #12]
   1370e:	3307      	adds	r3, #7
   13710:	f023 0307 	bic.w	r3, r3, #7
   13714:	f103 0208 	add.w	r2, r3, #8
   13718:	9203      	str	r2, [sp, #12]
   1371a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1371e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   13722:	e7dc      	b.n	136de <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13724:	9b03      	ldr	r3, [sp, #12]
   13726:	1d1a      	adds	r2, r3, #4
   13728:	9203      	str	r2, [sp, #12]
   1372a:	681b      	ldr	r3, [r3, #0]
   1372c:	17da      	asrs	r2, r3, #31
				value->sint =
   1372e:	9304      	str	r3, [sp, #16]
   13730:	9205      	str	r2, [sp, #20]
				break;
   13732:	e7d4      	b.n	136de <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   13734:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   13738:	17da      	asrs	r2, r3, #31
   1373a:	9304      	str	r3, [sp, #16]
   1373c:	9205      	str	r2, [sp, #20]
   1373e:	e732      	b.n	135a6 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   13740:	1ecb      	subs	r3, r1, #3
   13742:	2b04      	cmp	r3, #4
   13744:	d804      	bhi.n	13750 <z_cbvprintf_impl+0x258>
   13746:	e8df f003 	tbb	[pc, r3]
   1374a:	1f0b      	.short	0x1f0b
   1374c:	4135      	.short	0x4135
   1374e:	41          	.byte	0x41
   1374f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   13750:	9b03      	ldr	r3, [sp, #12]
   13752:	1d1a      	adds	r2, r3, #4
   13754:	9203      	str	r2, [sp, #12]
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	9304      	str	r3, [sp, #16]
   1375a:	2300      	movs	r3, #0
   1375c:	9305      	str	r3, [sp, #20]
				break;
   1375e:	e01e      	b.n	1379e <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   13760:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   13764:	2b63      	cmp	r3, #99	; 0x63
   13766:	d007      	beq.n	13778 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   13768:	9b03      	ldr	r3, [sp, #12]
   1376a:	1d1a      	adds	r2, r3, #4
   1376c:	9203      	str	r2, [sp, #12]
   1376e:	681b      	ldr	r3, [r3, #0]
   13770:	9304      	str	r3, [sp, #16]
   13772:	2300      	movs	r3, #0
   13774:	9305      	str	r3, [sp, #20]
   13776:	e012      	b.n	1379e <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   13778:	9b03      	ldr	r3, [sp, #12]
   1377a:	1d1a      	adds	r2, r3, #4
   1377c:	9203      	str	r2, [sp, #12]
   1377e:	681b      	ldr	r3, [r3, #0]
   13780:	9304      	str	r3, [sp, #16]
   13782:	2300      	movs	r3, #0
   13784:	9305      	str	r3, [sp, #20]
   13786:	e00a      	b.n	1379e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   13788:	9b03      	ldr	r3, [sp, #12]
   1378a:	3307      	adds	r3, #7
   1378c:	f023 0307 	bic.w	r3, r3, #7
   13790:	f103 0208 	add.w	r2, r3, #8
   13794:	9203      	str	r2, [sp, #12]
   13796:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1379a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   1379e:	2901      	cmp	r1, #1
   137a0:	d01c      	beq.n	137dc <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   137a2:	2902      	cmp	r1, #2
   137a4:	f47f aeff 	bne.w	135a6 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   137a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   137ac:	9304      	str	r3, [sp, #16]
   137ae:	2300      	movs	r3, #0
   137b0:	9305      	str	r3, [sp, #20]
   137b2:	e6f8      	b.n	135a6 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   137b4:	9b03      	ldr	r3, [sp, #12]
   137b6:	3307      	adds	r3, #7
   137b8:	f023 0307 	bic.w	r3, r3, #7
   137bc:	f103 0208 	add.w	r2, r3, #8
   137c0:	9203      	str	r2, [sp, #12]
   137c2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   137c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   137ca:	e7e8      	b.n	1379e <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   137cc:	9b03      	ldr	r3, [sp, #12]
   137ce:	1d1a      	adds	r2, r3, #4
   137d0:	9203      	str	r2, [sp, #12]
   137d2:	681b      	ldr	r3, [r3, #0]
				value->uint =
   137d4:	9304      	str	r3, [sp, #16]
   137d6:	2300      	movs	r3, #0
   137d8:	9305      	str	r3, [sp, #20]
				break;
   137da:	e7e0      	b.n	1379e <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   137dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   137e0:	9304      	str	r3, [sp, #16]
   137e2:	2300      	movs	r3, #0
   137e4:	9305      	str	r3, [sp, #20]
   137e6:	e6de      	b.n	135a6 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   137e8:	2908      	cmp	r1, #8
   137ea:	d00b      	beq.n	13804 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   137ec:	9b03      	ldr	r3, [sp, #12]
   137ee:	3307      	adds	r3, #7
   137f0:	f023 0307 	bic.w	r3, r3, #7
   137f4:	f103 0208 	add.w	r2, r3, #8
   137f8:	9203      	str	r2, [sp, #12]
   137fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   137fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13802:	e6d0      	b.n	135a6 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   13804:	9b03      	ldr	r3, [sp, #12]
   13806:	3307      	adds	r3, #7
   13808:	f023 0307 	bic.w	r3, r3, #7
   1380c:	f103 0208 	add.w	r2, r3, #8
   13810:	9203      	str	r2, [sp, #12]
   13812:	e9d3 2300 	ldrd	r2, r3, [r3]
   13816:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1381a:	e6c4      	b.n	135a6 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   1381c:	9b03      	ldr	r3, [sp, #12]
   1381e:	1d1a      	adds	r2, r3, #4
   13820:	9203      	str	r2, [sp, #12]
   13822:	681b      	ldr	r3, [r3, #0]
   13824:	9304      	str	r3, [sp, #16]
   13826:	e6be      	b.n	135a6 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   13828:	9f02      	ldr	r7, [sp, #8]
   1382a:	463b      	mov	r3, r7
   1382c:	464a      	mov	r2, r9
   1382e:	4629      	mov	r1, r5
   13830:	4630      	mov	r0, r6
   13832:	f017 fc60 	bl	2b0f6 <outs>
   13836:	2800      	cmp	r0, #0
   13838:	f2c0 8125 	blt.w	13a86 <z_cbvprintf_impl+0x58e>
   1383c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1383e:	46b9      	mov	r9, r7
			continue;
   13840:	e662      	b.n	13508 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   13842:	4629      	mov	r1, r5
   13844:	2025      	movs	r0, #37	; 0x25
   13846:	47b0      	blx	r6
   13848:	2800      	cmp	r0, #0
   1384a:	f2c0 811c 	blt.w	13a86 <z_cbvprintf_impl+0x58e>
   1384e:	3401      	adds	r4, #1
		char sign = 0;
   13850:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   13852:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   13856:	f04f 0900 	mov.w	r9, #0
			break;
   1385a:	e07f      	b.n	1395c <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   1385c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   13860:	f1ba 0f00 	cmp.w	sl, #0
   13864:	db07      	blt.n	13876 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   13866:	4651      	mov	r1, sl
   13868:	4648      	mov	r0, r9
   1386a:	f018 ff90 	bl	2c78e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   1386e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   13872:	46d8      	mov	r8, fp
			precision = -1;

			break;
   13874:	e072      	b.n	1395c <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   13876:	4648      	mov	r0, r9
   13878:	f018 ff80 	bl	2c77c <strlen>
   1387c:	e7f7      	b.n	1386e <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1387e:	9b04      	ldr	r3, [sp, #16]
   13880:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   13884:	46d8      	mov	r8, fp
			bpe = buf + 1;
   13886:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   1388a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   1388e:	e065      	b.n	1395c <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   13890:	f018 0f08 	tst.w	r8, #8
   13894:	d105      	bne.n	138a2 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   13896:	f018 0810 	ands.w	r8, r8, #16
   1389a:	d004      	beq.n	138a6 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   1389c:	f04f 0820 	mov.w	r8, #32
   138a0:	e001      	b.n	138a6 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   138a2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   138a6:	9a04      	ldr	r2, [sp, #16]
   138a8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   138aa:	2b00      	cmp	r3, #0
   138ac:	db02      	blt.n	138b4 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   138ae:	9204      	str	r2, [sp, #16]
   138b0:	9305      	str	r3, [sp, #20]
   138b2:	e008      	b.n	138c6 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   138b4:	4252      	negs	r2, r2
   138b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   138ba:	9204      	str	r2, [sp, #16]
   138bc:	9305      	str	r3, [sp, #20]
				sign = '-';
   138be:	f04f 082d 	mov.w	r8, #45	; 0x2d
   138c2:	e000      	b.n	138c6 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   138c4:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   138c6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   138ca:	9300      	str	r3, [sp, #0]
   138cc:	ab0a      	add	r3, sp, #40	; 0x28
   138ce:	aa06      	add	r2, sp, #24
   138d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   138d4:	f017 fba0 	bl	2b018 <encode_uint>
   138d8:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   138da:	f1ba 0f00 	cmp.w	sl, #0
   138de:	db6c      	blt.n	139ba <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   138e0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   138e4:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   138e8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   138ec:	f36f 1286 	bfc	r2, #6, #1
   138f0:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   138f4:	459a      	cmp	sl, r3
   138f6:	d963      	bls.n	139c0 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   138f8:	ebaa 0303 	sub.w	r3, sl, r3
   138fc:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   138fe:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   13902:	e02b      	b.n	1395c <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   13904:	9804      	ldr	r0, [sp, #16]
   13906:	b928      	cbnz	r0, 13914 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   13908:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1390a:	f8df a180 	ldr.w	sl, [pc, #384]	; 13a8c <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   1390e:	f1aa 0905 	sub.w	r9, sl, #5
   13912:	e023      	b.n	1395c <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13914:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   13918:	9300      	str	r3, [sp, #0]
   1391a:	ab0a      	add	r3, sp, #40	; 0x28
   1391c:	aa06      	add	r2, sp, #24
   1391e:	2100      	movs	r1, #0
   13920:	f017 fb7a 	bl	2b018 <encode_uint>
   13924:	4681      	mov	r9, r0
				conv->altform_0c = true;
   13926:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1392a:	f043 0310 	orr.w	r3, r3, #16
   1392e:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   13932:	2378      	movs	r3, #120	; 0x78
   13934:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   13938:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1393a:	e7ce      	b.n	138da <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1393c:	4622      	mov	r2, r4
   1393e:	9904      	ldr	r1, [sp, #16]
   13940:	a806      	add	r0, sp, #24
   13942:	f017 fbb9 	bl	2b0b8 <store_count>
		char sign = 0;
   13946:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   13948:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1394c:	f04f 0900 	mov.w	r9, #0
			}

			break;
   13950:	e004      	b.n	1395c <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   13952:	46d8      	mov	r8, fp
   13954:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   13958:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   1395c:	f1b9 0f00 	cmp.w	r9, #0
   13960:	f000 808d 	beq.w	13a7e <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   13964:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   13968:	f1b8 0f00 	cmp.w	r8, #0
   1396c:	d000      	beq.n	13970 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   1396e:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   13970:	f89d 201a 	ldrb.w	r2, [sp, #26]
   13974:	f012 0f10 	tst.w	r2, #16
   13978:	d025      	beq.n	139c6 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   1397a:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   1397c:	9907      	ldr	r1, [sp, #28]
   1397e:	440b      	add	r3, r1
		if (conv->pad_fp) {
   13980:	f012 0f40 	tst.w	r2, #64	; 0x40
   13984:	d001      	beq.n	1398a <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   13986:	9a08      	ldr	r2, [sp, #32]
   13988:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1398a:	2f00      	cmp	r7, #0
   1398c:	dd31      	ble.n	139f2 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   1398e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   13990:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13994:	f013 0f04 	tst.w	r3, #4
   13998:	d12b      	bne.n	139f2 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1399a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1399e:	d017      	beq.n	139d0 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   139a0:	f1b8 0f00 	cmp.w	r8, #0
   139a4:	d017      	beq.n	139d6 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   139a6:	4629      	mov	r1, r5
   139a8:	4640      	mov	r0, r8
   139aa:	47b0      	blx	r6
   139ac:	2800      	cmp	r0, #0
   139ae:	db6a      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   139b0:	3401      	adds	r4, #1
						sign = 0;
   139b2:	46d8      	mov	r8, fp
					}
					pad = '0';
   139b4:	f04f 0b30 	mov.w	fp, #48	; 0x30
   139b8:	e00f      	b.n	139da <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   139ba:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   139be:	e7cd      	b.n	1395c <z_cbvprintf_impl+0x464>
   139c0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   139c4:	e7ca      	b.n	1395c <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   139c6:	f012 0f08 	tst.w	r2, #8
   139ca:	d0d7      	beq.n	1397c <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   139cc:	3301      	adds	r3, #1
   139ce:	e7d5      	b.n	1397c <z_cbvprintf_impl+0x484>
				char pad = ' ';
   139d0:	f04f 0b20 	mov.w	fp, #32
   139d4:	e001      	b.n	139da <z_cbvprintf_impl+0x4e2>
					pad = '0';
   139d6:	f04f 0b30 	mov.w	fp, #48	; 0x30
   139da:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   139dc:	1e5f      	subs	r7, r3, #1
   139de:	2b00      	cmp	r3, #0
   139e0:	dd07      	ble.n	139f2 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   139e2:	4629      	mov	r1, r5
   139e4:	4658      	mov	r0, fp
   139e6:	47b0      	blx	r6
   139e8:	2800      	cmp	r0, #0
   139ea:	db4c      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   139ec:	3401      	adds	r4, #1
				while (width-- > 0) {
   139ee:	463b      	mov	r3, r7
   139f0:	e7f4      	b.n	139dc <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   139f2:	f1b8 0f00 	cmp.w	r8, #0
   139f6:	d005      	beq.n	13a04 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   139f8:	4629      	mov	r1, r5
   139fa:	4640      	mov	r0, r8
   139fc:	47b0      	blx	r6
   139fe:	2800      	cmp	r0, #0
   13a00:	db41      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   13a02:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   13a04:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13a08:	f3c3 1200 	ubfx	r2, r3, #4, #1
   13a0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13a10:	431a      	orrs	r2, r3
   13a12:	d005      	beq.n	13a20 <z_cbvprintf_impl+0x528>
				OUTC('0');
   13a14:	4629      	mov	r1, r5
   13a16:	2030      	movs	r0, #48	; 0x30
   13a18:	47b0      	blx	r6
   13a1a:	2800      	cmp	r0, #0
   13a1c:	db33      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   13a1e:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   13a20:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13a24:	f013 0f10 	tst.w	r3, #16
   13a28:	d006      	beq.n	13a38 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   13a2a:	4629      	mov	r1, r5
   13a2c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   13a30:	47b0      	blx	r6
   13a32:	2800      	cmp	r0, #0
   13a34:	db27      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   13a36:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   13a38:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   13a3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   13a3e:	2b00      	cmp	r3, #0
   13a40:	dd07      	ble.n	13a52 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   13a42:	4629      	mov	r1, r5
   13a44:	2030      	movs	r0, #48	; 0x30
   13a46:	47b0      	blx	r6
   13a48:	2800      	cmp	r0, #0
   13a4a:	db1c      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   13a4c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   13a4e:	4643      	mov	r3, r8
   13a50:	e7f3      	b.n	13a3a <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   13a52:	4653      	mov	r3, sl
   13a54:	464a      	mov	r2, r9
   13a56:	4629      	mov	r1, r5
   13a58:	4630      	mov	r0, r6
   13a5a:	f017 fb4c 	bl	2b0f6 <outs>
   13a5e:	2800      	cmp	r0, #0
   13a60:	db11      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   13a62:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   13a64:	2f00      	cmp	r7, #0
   13a66:	dd07      	ble.n	13a78 <z_cbvprintf_impl+0x580>
			OUTC(' ');
   13a68:	4629      	mov	r1, r5
   13a6a:	2020      	movs	r0, #32
   13a6c:	47b0      	blx	r6
   13a6e:	2800      	cmp	r0, #0
   13a70:	db09      	blt.n	13a86 <z_cbvprintf_impl+0x58e>
   13a72:	3401      	adds	r4, #1
			--width;
   13a74:	3f01      	subs	r7, #1
   13a76:	e7f5      	b.n	13a64 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   13a78:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13a7c:	e544      	b.n	13508 <z_cbvprintf_impl+0x10>
   13a7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13a82:	e541      	b.n	13508 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   13a84:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   13a86:	b011      	add	sp, #68	; 0x44
   13a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a8c:	00032655 	.word	0x00032655

00013a90 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13a90:	b508      	push	{r3, lr}
   13a92:	4604      	mov	r4, r0
   13a94:	f04f 0240 	mov.w	r2, #64	; 0x40
   13a98:	f3ef 8311 	mrs	r3, BASEPRI
   13a9c:	f382 8812 	msr	BASEPRI_MAX, r2
   13aa0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   13aa4:	f00f fbb8 	bl	23218 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   13aa8:	4620      	mov	r0, r4
   13aaa:	f018 fefc 	bl	2c8a6 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13aae:	4803      	ldr	r0, [pc, #12]	; (13abc <sys_reboot+0x2c>)
   13ab0:	f016 fce3 	bl	2a47a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   13ab4:	f003 fd30 	bl	17518 <arch_cpu_idle>
   13ab8:	e7fc      	b.n	13ab4 <sys_reboot+0x24>
   13aba:	bf00      	nop
   13abc:	00032658 	.word	0x00032658

00013ac0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13ac0:	f010 bbb0 	b.w	24224 <SystemInit>

00013ac4 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   13ac4:	b538      	push	{r3, r4, r5, lr}
   13ac6:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ac8:	4c0b      	ldr	r4, [pc, #44]	; (13af8 <msg_process+0x34>)
   13aca:	e000      	b.n	13ace <msg_process+0xa>
   13acc:	3410      	adds	r4, #16
   13ace:	4b0b      	ldr	r3, [pc, #44]	; (13afc <msg_process+0x38>)
   13ad0:	429c      	cmp	r4, r3
   13ad2:	d20f      	bcs.n	13af4 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13ad4:	6863      	ldr	r3, [r4, #4]
   13ad6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
   13ad8:	2b00      	cmp	r3, #0
   13ada:	d0f7      	beq.n	13acc <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   13adc:	4629      	mov	r1, r5
   13ade:	4620      	mov	r0, r4
   13ae0:	f017 fef6 	bl	2b8d0 <msg_filter_check>
		if (log_backend_is_active(backend) &&
   13ae4:	2800      	cmp	r0, #0
   13ae6:	d0f1      	beq.n	13acc <msg_process+0x8>
	backend->api->process(backend, msg);
   13ae8:	6823      	ldr	r3, [r4, #0]
   13aea:	681b      	ldr	r3, [r3, #0]
   13aec:	4629      	mov	r1, r5
   13aee:	4620      	mov	r0, r4
   13af0:	4798      	blx	r3
}
   13af2:	e7eb      	b.n	13acc <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
   13af4:	bd38      	pop	{r3, r4, r5, pc}
   13af6:	bf00      	nop
   13af8:	00031dec 	.word	0x00031dec
   13afc:	00031dfc 	.word	0x00031dfc

00013b00 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   13b00:	b570      	push	{r4, r5, r6, lr}
   13b02:	4606      	mov	r6, r0
   13b04:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13b06:	4c08      	ldr	r4, [pc, #32]	; (13b28 <log_backend_notify_all+0x28>)
   13b08:	e004      	b.n	13b14 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
   13b0a:	462a      	mov	r2, r5
   13b0c:	4631      	mov	r1, r6
   13b0e:	4620      	mov	r0, r4
   13b10:	4798      	blx	r3
   13b12:	3410      	adds	r4, #16
   13b14:	4b05      	ldr	r3, [pc, #20]	; (13b2c <log_backend_notify_all+0x2c>)
   13b16:	429c      	cmp	r4, r3
   13b18:	d204      	bcs.n	13b24 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
   13b1a:	6823      	ldr	r3, [r4, #0]
   13b1c:	699b      	ldr	r3, [r3, #24]
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d1f3      	bne.n	13b0a <log_backend_notify_all+0xa>
   13b22:	e7f6      	b.n	13b12 <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
   13b24:	bd70      	pop	{r4, r5, r6, pc}
   13b26:	bf00      	nop
   13b28:	00031dec 	.word	0x00031dec
   13b2c:	00031dfc 	.word	0x00031dfc

00013b30 <activate_foreach_backend>:
{
   13b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b34:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   13b36:	4605      	mov	r5, r0
	while (mask_cpy) {
   13b38:	e00a      	b.n	13b50 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
   13b3a:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   13b3e:	4b14      	ldr	r3, [pc, #80]	; (13b90 <activate_foreach_backend+0x60>)
   13b40:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   13b44:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   13b46:	2204      	movs	r2, #4
   13b48:	6819      	ldr	r1, [r3, #0]
   13b4a:	4620      	mov	r0, r4
   13b4c:	f000 faa8 	bl	140a0 <log_backend_enable>
	while (mask_cpy) {
   13b50:	b1d5      	cbz	r5, 13b88 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
   13b52:	fa95 f6a5 	rbit	r6, r5
   13b56:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   13b5a:	4c0d      	ldr	r4, [pc, #52]	; (13b90 <activate_foreach_backend+0x60>)
   13b5c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   13b60:	2301      	movs	r3, #1
   13b62:	40b3      	lsls	r3, r6
   13b64:	ea6f 0803 	mvn.w	r8, r3
   13b68:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b6c:	7b23      	ldrb	r3, [r4, #12]
   13b6e:	2b00      	cmp	r3, #0
   13b70:	d0ee      	beq.n	13b50 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
   13b72:	0133      	lsls	r3, r6, #4
   13b74:	4a06      	ldr	r2, [pc, #24]	; (13b90 <activate_foreach_backend+0x60>)
   13b76:	58d3      	ldr	r3, [r2, r3]
   13b78:	691b      	ldr	r3, [r3, #16]
   13b7a:	2b00      	cmp	r3, #0
   13b7c:	d0dd      	beq.n	13b3a <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
   13b7e:	4620      	mov	r0, r4
   13b80:	4798      	blx	r3
   13b82:	2800      	cmp	r0, #0
   13b84:	d1e4      	bne.n	13b50 <activate_foreach_backend+0x20>
   13b86:	e7d8      	b.n	13b3a <activate_foreach_backend+0xa>
}
   13b88:	4638      	mov	r0, r7
   13b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b8e:	bf00      	nop
   13b90:	00031dec 	.word	0x00031dec

00013b94 <z_log_init>:
{
   13b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b98:	4680      	mov	r8, r0
   13b9a:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13b9c:	4b20      	ldr	r3, [pc, #128]	; (13c20 <z_log_init+0x8c>)
   13b9e:	f3bf 8f5b 	dmb	ish
   13ba2:	e853 5f00 	ldrex	r5, [r3]
   13ba6:	1c6a      	adds	r2, r5, #1
   13ba8:	e843 2100 	strex	r1, r2, [r3]
   13bac:	2900      	cmp	r1, #0
   13bae:	d1f8      	bne.n	13ba2 <z_log_init+0xe>
   13bb0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   13bb4:	2d00      	cmp	r5, #0
   13bb6:	d12f      	bne.n	13c18 <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13bb8:	4c1a      	ldr	r4, [pc, #104]	; (13c24 <z_log_init+0x90>)
	int i = 0;
   13bba:	2600      	movs	r6, #0
   13bbc:	e007      	b.n	13bce <z_log_init+0x3a>
						   backend->cb->ctx,
   13bbe:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   13bc0:	2204      	movs	r2, #4
   13bc2:	6819      	ldr	r1, [r3, #0]
   13bc4:	4620      	mov	r0, r4
   13bc6:	f000 fa6b 	bl	140a0 <log_backend_enable>
			i++;
   13bca:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13bcc:	3410      	adds	r4, #16
   13bce:	4b16      	ldr	r3, [pc, #88]	; (13c28 <z_log_init+0x94>)
   13bd0:	429c      	cmp	r4, r3
   13bd2:	d213      	bcs.n	13bfc <z_log_init+0x68>
		if (backend->autostart) {
   13bd4:	7b23      	ldrb	r3, [r4, #12]
   13bd6:	2b00      	cmp	r3, #0
   13bd8:	d0f8      	beq.n	13bcc <z_log_init+0x38>
	if (backend->api->init) {
   13bda:	6823      	ldr	r3, [r4, #0]
   13bdc:	68db      	ldr	r3, [r3, #12]
   13bde:	b10b      	cbz	r3, 13be4 <z_log_init+0x50>
		backend->api->init(backend);
   13be0:	4620      	mov	r0, r4
   13be2:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13be4:	6823      	ldr	r3, [r4, #0]
   13be6:	691b      	ldr	r3, [r3, #16]
   13be8:	2b00      	cmp	r3, #0
   13bea:	d0e8      	beq.n	13bbe <z_log_init+0x2a>
		return backend->api->is_ready(backend);
   13bec:	4620      	mov	r0, r4
   13bee:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13bf0:	2800      	cmp	r0, #0
   13bf2:	d0e4      	beq.n	13bbe <z_log_init+0x2a>
				mask |= BIT(i);
   13bf4:	2301      	movs	r3, #1
   13bf6:	40b3      	lsls	r3, r6
   13bf8:	431d      	orrs	r5, r3
   13bfa:	e7e6      	b.n	13bca <z_log_init+0x36>
	if (blocking) {
   13bfc:	f1b8 0f00 	cmp.w	r8, #0
   13c00:	d00b      	beq.n	13c1a <z_log_init+0x86>
		while (mask) {
   13c02:	b155      	cbz	r5, 13c1a <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
   13c04:	4628      	mov	r0, r5
   13c06:	f7ff ff93 	bl	13b30 <activate_foreach_backend>
   13c0a:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13c0c:	2f00      	cmp	r7, #0
   13c0e:	d0f8      	beq.n	13c02 <z_log_init+0x6e>
				k_msleep(10);
   13c10:	200a      	movs	r0, #10
   13c12:	f017 fe63 	bl	2b8dc <k_msleep>
   13c16:	e7f4      	b.n	13c02 <z_log_init+0x6e>
		return 0;
   13c18:	2500      	movs	r5, #0
}
   13c1a:	4628      	mov	r0, r5
   13c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c20:	200036e8 	.word	0x200036e8
   13c24:	00031dec 	.word	0x00031dec
   13c28:	00031dfc 	.word	0x00031dfc

00013c2c <thread_set>:
{
   13c2c:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   13c2e:	4b06      	ldr	r3, [pc, #24]	; (13c48 <thread_set+0x1c>)
   13c30:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13c32:	b118      	cbz	r0, 13c3c <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13c34:	4b05      	ldr	r3, [pc, #20]	; (13c4c <thread_set+0x20>)
   13c36:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   13c38:	2b09      	cmp	r3, #9
   13c3a:	dc00      	bgt.n	13c3e <thread_set+0x12>
}
   13c3c:	bd08      	pop	{r3, pc}
   13c3e:	4804      	ldr	r0, [pc, #16]	; (13c50 <thread_set+0x24>)
   13c40:	f012 fb14 	bl	2626c <z_impl_k_sem_give>
}
   13c44:	e7fa      	b.n	13c3c <thread_set+0x10>
   13c46:	bf00      	nop
   13c48:	200036dc 	.word	0x200036dc
   13c4c:	200036e4 	.word	0x200036e4
   13c50:	20000a58 	.word	0x20000a58

00013c54 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   13c54:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   13c56:	4802      	ldr	r0, [pc, #8]	; (13c60 <log_process_thread_timer_expiry_fn+0xc>)
   13c58:	f012 fb08 	bl	2626c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   13c5c:	bd08      	pop	{r3, pc}
   13c5e:	bf00      	nop
   13c60:	20000a58 	.word	0x20000a58

00013c64 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   13c64:	b530      	push	{r4, r5, lr}
   13c66:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13c68:	2200      	movs	r2, #0
   13c6a:	490f      	ldr	r1, [pc, #60]	; (13ca8 <enable_logger+0x44>)
   13c6c:	480f      	ldr	r0, [pc, #60]	; (13cac <enable_logger+0x48>)
   13c6e:	f01d fc83 	bl	31578 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13c72:	4d0f      	ldr	r5, [pc, #60]	; (13cb0 <enable_logger+0x4c>)
   13c74:	2200      	movs	r2, #0
   13c76:	2300      	movs	r3, #0
   13c78:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13c7c:	2400      	movs	r4, #0
   13c7e:	9404      	str	r4, [sp, #16]
   13c80:	230e      	movs	r3, #14
   13c82:	9303      	str	r3, [sp, #12]
   13c84:	9402      	str	r4, [sp, #8]
   13c86:	9401      	str	r4, [sp, #4]
   13c88:	9400      	str	r4, [sp, #0]
   13c8a:	4b0a      	ldr	r3, [pc, #40]	; (13cb4 <enable_logger+0x50>)
   13c8c:	f44f 7240 	mov.w	r2, #768	; 0x300
   13c90:	4909      	ldr	r1, [pc, #36]	; (13cb8 <enable_logger+0x54>)
   13c92:	4628      	mov	r0, r5
   13c94:	f01c ff85 	bl	30ba2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13c98:	4908      	ldr	r1, [pc, #32]	; (13cbc <enable_logger+0x58>)
   13c9a:	4628      	mov	r0, r5
   13c9c:	f012 f8fa 	bl	25e94 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13ca0:	4620      	mov	r0, r4
   13ca2:	b009      	add	sp, #36	; 0x24
   13ca4:	bd30      	pop	{r4, r5, pc}
   13ca6:	bf00      	nop
   13ca8:	00013c55 	.word	0x00013c55
   13cac:	20001e70 	.word	0x20001e70
   13cb0:	200019b0 	.word	0x200019b0
   13cb4:	00014001 	.word	0x00014001
   13cb8:	20005d80 	.word	0x20005d80
   13cbc:	00032684 	.word	0x00032684

00013cc0 <log_format_func_t_get>:
}
   13cc0:	4b01      	ldr	r3, [pc, #4]	; (13cc8 <log_format_func_t_get+0x8>)
   13cc2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13cc6:	4770      	bx	lr
   13cc8:	000326a0 	.word	0x000326a0

00013ccc <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   13ccc:	b148      	cbz	r0, 13ce2 <log_set_timestamp_func+0x16>
{
   13cce:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   13cd0:	4a05      	ldr	r2, [pc, #20]	; (13ce8 <log_set_timestamp_func+0x1c>)
   13cd2:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   13cd4:	4b05      	ldr	r3, [pc, #20]	; (13cec <log_set_timestamp_func+0x20>)
   13cd6:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   13cd8:	4608      	mov	r0, r1
   13cda:	f000 fcaf 	bl	1463c <log_output_timestamp_freq_set>
	return 0;
   13cde:	2000      	movs	r0, #0
}
   13ce0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13ce2:	f06f 0015 	mvn.w	r0, #21
}
   13ce6:	4770      	bx	lr
   13ce8:	200005f0 	.word	0x200005f0
   13cec:	200036d8 	.word	0x200036d8

00013cf0 <z_log_notify_backend_enabled>:
{
   13cf0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13cf2:	4b05      	ldr	r3, [pc, #20]	; (13d08 <z_log_notify_backend_enabled+0x18>)
   13cf4:	781b      	ldrb	r3, [r3, #0]
   13cf6:	b11b      	cbz	r3, 13d00 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   13cf8:	4b03      	ldr	r3, [pc, #12]	; (13d08 <z_log_notify_backend_enabled+0x18>)
   13cfa:	2201      	movs	r2, #1
   13cfc:	701a      	strb	r2, [r3, #0]
}
   13cfe:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   13d00:	4802      	ldr	r0, [pc, #8]	; (13d0c <z_log_notify_backend_enabled+0x1c>)
   13d02:	f012 fab3 	bl	2626c <z_impl_k_sem_give>
}
   13d06:	e7f7      	b.n	13cf8 <z_log_notify_backend_enabled+0x8>
   13d08:	20005d3c 	.word	0x20005d3c
   13d0c:	20000a58 	.word	0x20000a58

00013d10 <z_log_dropped>:
   13d10:	4b0d      	ldr	r3, [pc, #52]	; (13d48 <z_log_dropped+0x38>)
   13d12:	f3bf 8f5b 	dmb	ish
   13d16:	e853 1f00 	ldrex	r1, [r3]
   13d1a:	3101      	adds	r1, #1
   13d1c:	e843 1200 	strex	r2, r1, [r3]
   13d20:	2a00      	cmp	r2, #0
   13d22:	d1f8      	bne.n	13d16 <z_log_dropped+0x6>
   13d24:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   13d28:	b900      	cbnz	r0, 13d2c <z_log_dropped+0x1c>
}
   13d2a:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13d2c:	4b07      	ldr	r3, [pc, #28]	; (13d4c <z_log_dropped+0x3c>)
   13d2e:	f3bf 8f5b 	dmb	ish
   13d32:	e853 1f00 	ldrex	r1, [r3]
   13d36:	3901      	subs	r1, #1
   13d38:	e843 1200 	strex	r2, r1, [r3]
   13d3c:	2a00      	cmp	r2, #0
   13d3e:	d1f8      	bne.n	13d32 <z_log_dropped+0x22>
   13d40:	f3bf 8f5b 	dmb	ish
   13d44:	e7f1      	b.n	13d2a <z_log_dropped+0x1a>
   13d46:	bf00      	nop
   13d48:	200036e0 	.word	0x200036e0
   13d4c:	200036e4 	.word	0x200036e4

00013d50 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13d50:	4b06      	ldr	r3, [pc, #24]	; (13d6c <z_log_dropped_read_and_clear+0x1c>)
}
   13d52:	2000      	movs	r0, #0
   13d54:	4601      	mov	r1, r0
   13d56:	f3bf 8f5b 	dmb	ish
   13d5a:	e853 0f00 	ldrex	r0, [r3]
   13d5e:	e843 1200 	strex	r2, r1, [r3]
   13d62:	2a00      	cmp	r2, #0
   13d64:	d1f9      	bne.n	13d5a <z_log_dropped_read_and_clear+0xa>
   13d66:	f3bf 8f5b 	dmb	ish
   13d6a:	4770      	bx	lr
   13d6c:	200036e0 	.word	0x200036e0

00013d70 <dropped_notify>:
{
   13d70:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13d72:	f7ff ffed 	bl	13d50 <z_log_dropped_read_and_clear>
   13d76:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d78:	4c09      	ldr	r4, [pc, #36]	; (13da0 <dropped_notify+0x30>)
   13d7a:	e000      	b.n	13d7e <dropped_notify+0xe>
   13d7c:	3410      	adds	r4, #16
   13d7e:	4b09      	ldr	r3, [pc, #36]	; (13da4 <dropped_notify+0x34>)
   13d80:	429c      	cmp	r4, r3
   13d82:	d20b      	bcs.n	13d9c <dropped_notify+0x2c>
	return backend->cb->active;
   13d84:	6863      	ldr	r3, [r4, #4]
   13d86:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d0f7      	beq.n	13d7c <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   13d8c:	6823      	ldr	r3, [r4, #0]
   13d8e:	685b      	ldr	r3, [r3, #4]
   13d90:	2b00      	cmp	r3, #0
   13d92:	d0f3      	beq.n	13d7c <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   13d94:	4629      	mov	r1, r5
   13d96:	4620      	mov	r0, r4
   13d98:	4798      	blx	r3
   13d9a:	e7ef      	b.n	13d7c <dropped_notify+0xc>
}
   13d9c:	bd38      	pop	{r3, r4, r5, pc}
   13d9e:	bf00      	nop
   13da0:	00031dec 	.word	0x00031dec
   13da4:	00031dfc 	.word	0x00031dfc

00013da8 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   13da8:	4b03      	ldr	r3, [pc, #12]	; (13db8 <z_log_dropped_pending+0x10>)
   13daa:	6818      	ldr	r0, [r3, #0]
}
   13dac:	2800      	cmp	r0, #0
   13dae:	bfd4      	ite	le
   13db0:	2000      	movle	r0, #0
   13db2:	2001      	movgt	r0, #1
   13db4:	4770      	bx	lr
   13db6:	bf00      	nop
   13db8:	200036e0 	.word	0x200036e0

00013dbc <z_log_msg_init>:
{
   13dbc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13dbe:	4c04      	ldr	r4, [pc, #16]	; (13dd0 <z_log_msg_init+0x14>)
   13dc0:	4904      	ldr	r1, [pc, #16]	; (13dd4 <z_log_msg_init+0x18>)
   13dc2:	4620      	mov	r0, r4
   13dc4:	f017 fbd3 	bl	2b56e <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13dc8:	4b03      	ldr	r3, [pc, #12]	; (13dd8 <z_log_msg_init+0x1c>)
   13dca:	601c      	str	r4, [r3, #0]
}
   13dcc:	bd10      	pop	{r4, pc}
   13dce:	bf00      	nop
   13dd0:	20000918 	.word	0x20000918
   13dd4:	0003268c 	.word	0x0003268c
   13dd8:	200036d4 	.word	0x200036d4

00013ddc <log_core_init>:
{
   13ddc:	b508      	push	{r3, lr}
	panic_mode = false;
   13dde:	2300      	movs	r3, #0
   13de0:	4a06      	ldr	r2, [pc, #24]	; (13dfc <log_core_init+0x20>)
   13de2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13de4:	4a06      	ldr	r2, [pc, #24]	; (13e00 <log_core_init+0x24>)
   13de6:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   13de8:	4a06      	ldr	r2, [pc, #24]	; (13e04 <log_core_init+0x28>)
   13dea:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13df0:	4805      	ldr	r0, [pc, #20]	; (13e08 <log_core_init+0x2c>)
   13df2:	f7ff ff6b 	bl	13ccc <log_set_timestamp_func>
		z_log_msg_init();
   13df6:	f7ff ffe1 	bl	13dbc <z_log_msg_init>
}
   13dfa:	bd08      	pop	{r3, pc}
   13dfc:	20005d3d 	.word	0x20005d3d
   13e00:	200036e0 	.word	0x200036e0
   13e04:	200036e4 	.word	0x200036e4
   13e08:	0002b8d5 	.word	0x0002b8d5

00013e0c <z_log_msg_alloc>:
{
   13e0c:	b508      	push	{r3, lr}
   13e0e:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   13e10:	4801      	ldr	r0, [pc, #4]	; (13e18 <z_log_msg_alloc+0xc>)
   13e12:	f017 fd79 	bl	2b908 <msg_alloc>
}
   13e16:	bd08      	pop	{r3, pc}
   13e18:	20000918 	.word	0x20000918

00013e1c <z_log_msg_local_claim>:
{
   13e1c:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13e1e:	4802      	ldr	r0, [pc, #8]	; (13e28 <z_log_msg_local_claim+0xc>)
   13e20:	f017 fc89 	bl	2b736 <mpsc_pbuf_claim>
}
   13e24:	bd08      	pop	{r3, pc}
   13e26:	bf00      	nop
   13e28:	20000918 	.word	0x20000918

00013e2c <z_log_msg_free>:
{
   13e2c:	b508      	push	{r3, lr}
   13e2e:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   13e30:	4b02      	ldr	r3, [pc, #8]	; (13e3c <z_log_msg_free+0x10>)
   13e32:	6818      	ldr	r0, [r3, #0]
   13e34:	f017 fd6e 	bl	2b914 <msg_free>
}
   13e38:	bd08      	pop	{r3, pc}
   13e3a:	bf00      	nop
   13e3c:	200036d4 	.word	0x200036d4

00013e40 <z_log_msg_pending>:
{
   13e40:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   13e42:	4802      	ldr	r0, [pc, #8]	; (13e4c <z_log_msg_pending+0xc>)
   13e44:	f017 fd6a 	bl	2b91c <msg_pending>
}
   13e48:	bd08      	pop	{r3, pc}
   13e4a:	bf00      	nop
   13e4c:	20000918 	.word	0x20000918

00013e50 <z_impl_log_process>:
{
   13e50:	b510      	push	{r4, lr}
   13e52:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   13e54:	2200      	movs	r2, #0
   13e56:	2300      	movs	r3, #0
   13e58:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   13e5c:	4b28      	ldr	r3, [pc, #160]	; (13f00 <z_impl_log_process+0xb0>)
   13e5e:	7818      	ldrb	r0, [r3, #0]
   13e60:	b908      	cbnz	r0, 13e66 <z_impl_log_process+0x16>
}
   13e62:	b002      	add	sp, #8
   13e64:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   13e66:	4668      	mov	r0, sp
   13e68:	f017 fd70 	bl	2b94c <z_log_msg_claim>
	if (msg) {
   13e6c:	4604      	mov	r4, r0
   13e6e:	b188      	cbz	r0, 13e94 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13e70:	4b24      	ldr	r3, [pc, #144]	; (13f04 <z_impl_log_process+0xb4>)
   13e72:	f3bf 8f5b 	dmb	ish
   13e76:	e853 1f00 	ldrex	r1, [r3]
   13e7a:	3901      	subs	r1, #1
   13e7c:	e843 1200 	strex	r2, r1, [r3]
   13e80:	2a00      	cmp	r2, #0
   13e82:	d1f8      	bne.n	13e76 <z_impl_log_process+0x26>
   13e84:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
   13e88:	4620      	mov	r0, r4
   13e8a:	f7ff fe1b 	bl	13ac4 <msg_process>
		z_log_msg_free(msg);
   13e8e:	4620      	mov	r0, r4
   13e90:	f7ff ffcc 	bl	13e2c <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   13e94:	f7ff ff88 	bl	13da8 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   13e98:	b958      	cbnz	r0, 13eb2 <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13e9a:	4a1b      	ldr	r2, [pc, #108]	; (13f08 <z_impl_log_process+0xb8>)
   13e9c:	6813      	ldr	r3, [r2, #0]
   13e9e:	6851      	ldr	r1, [r2, #4]
   13ea0:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13ea4:	f141 0100 	adc.w	r1, r1, #0
   13ea8:	6013      	str	r3, [r2, #0]
   13eaa:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   13eac:	f7ff ffc8 	bl	13e40 <z_log_msg_pending>
   13eb0:	e7d7      	b.n	13e62 <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   13eb2:	f01d fb1e 	bl	314f2 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13eb6:	014a      	lsls	r2, r1, #5
   13eb8:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   13ebc:	0143      	lsls	r3, r0, #5
   13ebe:	1a1b      	subs	r3, r3, r0
   13ec0:	eb62 0201 	sbc.w	r2, r2, r1
   13ec4:	0092      	lsls	r2, r2, #2
   13ec6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   13eca:	009b      	lsls	r3, r3, #2
   13ecc:	181b      	adds	r3, r3, r0
   13ece:	eb42 0201 	adc.w	r2, r2, r1
   13ed2:	00d2      	lsls	r2, r2, #3
   13ed4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   13ed8:	f3c3 3310 	ubfx	r3, r3, #12, #17
   13edc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   13ee0:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13ee2:	4809      	ldr	r0, [pc, #36]	; (13f08 <z_impl_log_process+0xb8>)
   13ee4:	6801      	ldr	r1, [r0, #0]
   13ee6:	6840      	ldr	r0, [r0, #4]
   13ee8:	1a5b      	subs	r3, r3, r1
   13eea:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   13eee:	f240 31e9 	movw	r1, #1001	; 0x3e9
   13ef2:	428b      	cmp	r3, r1
   13ef4:	f172 0200 	sbcs.w	r2, r2, #0
   13ef8:	d3cf      	bcc.n	13e9a <z_impl_log_process+0x4a>
				dropped_notify();
   13efa:	f7ff ff39 	bl	13d70 <dropped_notify>
			if (unordered_pend) {
   13efe:	e7cc      	b.n	13e9a <z_impl_log_process+0x4a>
   13f00:	20005d3c 	.word	0x20005d3c
   13f04:	200036e4 	.word	0x200036e4
   13f08:	20001e68 	.word	0x20001e68

00013f0c <z_impl_log_panic>:
	if (panic_mode) {
   13f0c:	4b0f      	ldr	r3, [pc, #60]	; (13f4c <z_impl_log_panic+0x40>)
   13f0e:	781b      	ldrb	r3, [r3, #0]
   13f10:	b103      	cbz	r3, 13f14 <z_impl_log_panic+0x8>
   13f12:	4770      	bx	lr
{
   13f14:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   13f16:	2100      	movs	r1, #0
   13f18:	2001      	movs	r0, #1
   13f1a:	f7ff fe3b 	bl	13b94 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13f1e:	4c0c      	ldr	r4, [pc, #48]	; (13f50 <z_impl_log_panic+0x44>)
   13f20:	e000      	b.n	13f24 <z_impl_log_panic+0x18>
   13f22:	3410      	adds	r4, #16
   13f24:	4b0b      	ldr	r3, [pc, #44]	; (13f54 <z_impl_log_panic+0x48>)
   13f26:	429c      	cmp	r4, r3
   13f28:	d208      	bcs.n	13f3c <z_impl_log_panic+0x30>
	return backend->cb->active;
   13f2a:	6863      	ldr	r3, [r4, #4]
   13f2c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13f2e:	2b00      	cmp	r3, #0
   13f30:	d0f7      	beq.n	13f22 <z_impl_log_panic+0x16>
	backend->api->panic(backend);
   13f32:	6823      	ldr	r3, [r4, #0]
   13f34:	689b      	ldr	r3, [r3, #8]
   13f36:	4620      	mov	r0, r4
   13f38:	4798      	blx	r3
}
   13f3a:	e7f2      	b.n	13f22 <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13f3c:	f7ff ff88 	bl	13e50 <z_impl_log_process>
		while (log_process() == true) {
   13f40:	2800      	cmp	r0, #0
   13f42:	d1fb      	bne.n	13f3c <z_impl_log_panic+0x30>
	panic_mode = true;
   13f44:	4b01      	ldr	r3, [pc, #4]	; (13f4c <z_impl_log_panic+0x40>)
   13f46:	2201      	movs	r2, #1
   13f48:	701a      	strb	r2, [r3, #0]
}
   13f4a:	bd10      	pop	{r4, pc}
   13f4c:	20005d3d 	.word	0x20005d3d
   13f50:	00031dec 	.word	0x00031dec
   13f54:	00031dfc 	.word	0x00031dfc

00013f58 <z_log_msg_post_finalize>:
{
   13f58:	b510      	push	{r4, lr}
   13f5a:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13f5c:	4b1b      	ldr	r3, [pc, #108]	; (13fcc <z_log_msg_post_finalize+0x74>)
   13f5e:	f3bf 8f5b 	dmb	ish
   13f62:	e853 2f00 	ldrex	r2, [r3]
   13f66:	1c51      	adds	r1, r2, #1
   13f68:	e843 1000 	strex	r0, r1, [r3]
   13f6c:	2800      	cmp	r0, #0
   13f6e:	d1f8      	bne.n	13f62 <z_log_msg_post_finalize+0xa>
   13f70:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   13f74:	4b16      	ldr	r3, [pc, #88]	; (13fd0 <z_log_msg_post_finalize+0x78>)
   13f76:	781b      	ldrb	r3, [r3, #0]
   13f78:	b963      	cbnz	r3, 13f94 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
   13f7a:	4b16      	ldr	r3, [pc, #88]	; (13fd4 <z_log_msg_post_finalize+0x7c>)
   13f7c:	681b      	ldr	r3, [r3, #0]
   13f7e:	b1bb      	cbz	r3, 13fb0 <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
   13f80:	b1c2      	cbz	r2, 13fb4 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13f82:	2a0a      	cmp	r2, #10
   13f84:	d114      	bne.n	13fb0 <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
   13f86:	4814      	ldr	r0, [pc, #80]	; (13fd8 <z_log_msg_post_finalize+0x80>)
   13f88:	f01d fb02 	bl	31590 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13f8c:	4813      	ldr	r0, [pc, #76]	; (13fdc <z_log_msg_post_finalize+0x84>)
   13f8e:	f012 f96d 	bl	2626c <z_impl_k_sem_give>
}
   13f92:	e00d      	b.n	13fb0 <z_log_msg_post_finalize+0x58>
   13f94:	f04f 0340 	mov.w	r3, #64	; 0x40
   13f98:	f3ef 8411 	mrs	r4, BASEPRI
   13f9c:	f383 8812 	msr	BASEPRI_MAX, r3
   13fa0:	f3bf 8f6f 	isb	sy
   13fa4:	f7ff ff54 	bl	13e50 <z_impl_log_process>
	__asm__ volatile(
   13fa8:	f384 8811 	msr	BASEPRI, r4
   13fac:	f3bf 8f6f 	isb	sy
   13fb0:	b002      	add	sp, #8
   13fb2:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
   13fb4:	2200      	movs	r2, #0
   13fb6:	2300      	movs	r3, #0
   13fb8:	e9cd 2300 	strd	r2, r3, [sp]
   13fbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13fc0:	2300      	movs	r3, #0
   13fc2:	4805      	ldr	r0, [pc, #20]	; (13fd8 <z_log_msg_post_finalize+0x80>)
   13fc4:	f013 f91c 	bl	27200 <z_impl_k_timer_start>
   13fc8:	e7f2      	b.n	13fb0 <z_log_msg_post_finalize+0x58>
   13fca:	bf00      	nop
   13fcc:	200036e4 	.word	0x200036e4
   13fd0:	20005d3d 	.word	0x20005d3d
   13fd4:	200036dc 	.word	0x200036dc
   13fd8:	20001e70 	.word	0x20001e70
   13fdc:	20000a58 	.word	0x20000a58

00013fe0 <z_log_msg_commit>:
{
   13fe0:	b510      	push	{r4, lr}
   13fe2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13fe4:	4b04      	ldr	r3, [pc, #16]	; (13ff8 <z_log_msg_commit+0x18>)
   13fe6:	681b      	ldr	r3, [r3, #0]
   13fe8:	4798      	blx	r3
   13fea:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   13fec:	4621      	mov	r1, r4
   13fee:	4803      	ldr	r0, [pc, #12]	; (13ffc <z_log_msg_commit+0x1c>)
   13ff0:	f017 fcb0 	bl	2b954 <msg_commit>
}
   13ff4:	bd10      	pop	{r4, pc}
   13ff6:	bf00      	nop
   13ff8:	200005f0 	.word	0x200005f0
   13ffc:	20000918 	.word	0x20000918

00014000 <log_process_thread_func>:
{
   14000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
   14004:	2100      	movs	r1, #0
   14006:	4608      	mov	r0, r1
   14008:	f7ff fdc4 	bl	13b94 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1400c:	4680      	mov	r8, r0
   1400e:	b140      	cbz	r0, 14022 <log_process_thread_func+0x22>
   14010:	f240 6667 	movw	r6, #1639	; 0x667
   14014:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   14016:	f012 fee1 	bl	26ddc <z_impl_z_current_get>
	thread_set(k_current_get());
   1401a:	f7ff fe07 	bl	13c2c <thread_set>
	bool processed_any = false;
   1401e:	2500      	movs	r5, #0
   14020:	e015      	b.n	1404e <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14022:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   14026:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1402a:	e7f4      	b.n	14016 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
   1402c:	4640      	mov	r0, r8
   1402e:	f7ff fd7f 	bl	13b30 <activate_foreach_backend>
			if (!activate_mask) {
   14032:	4680      	mov	r8, r0
   14034:	b970      	cbnz	r0, 14054 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
   14036:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1403a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1403e:	e009      	b.n	14054 <log_process_thread_func+0x54>
   14040:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
   14042:	4632      	mov	r2, r6
   14044:	463b      	mov	r3, r7
   14046:	4809      	ldr	r0, [pc, #36]	; (1406c <log_process_thread_func+0x6c>)
   14048:	f012 f938 	bl	262bc <z_impl_k_sem_take>
{
   1404c:	4625      	mov	r5, r4
		if (activate_mask) {
   1404e:	f1b8 0f00 	cmp.w	r8, #0
   14052:	d1eb      	bne.n	1402c <log_process_thread_func+0x2c>
   14054:	f7ff fefc 	bl	13e50 <z_impl_log_process>
		if (log_process() == false) {
   14058:	4604      	mov	r4, r0
   1405a:	2800      	cmp	r0, #0
   1405c:	d1f6      	bne.n	1404c <log_process_thread_func+0x4c>
			if (processed_any) {
   1405e:	2d00      	cmp	r5, #0
   14060:	d0ee      	beq.n	14040 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   14062:	2100      	movs	r1, #0
   14064:	4608      	mov	r0, r1
   14066:	f7ff fd4b 	bl	13b00 <log_backend_notify_all>
   1406a:	e7ea      	b.n	14042 <log_process_thread_func+0x42>
   1406c:	20000a58 	.word	0x20000a58

00014070 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   14070:	4802      	ldr	r0, [pc, #8]	; (1407c <log_src_cnt_get+0xc>)
   14072:	4b03      	ldr	r3, [pc, #12]	; (14080 <log_src_cnt_get+0x10>)
   14074:	1ac0      	subs	r0, r0, r3
   14076:	08c0      	lsrs	r0, r0, #3
   14078:	4770      	bx	lr
   1407a:	bf00      	nop
   1407c:	00031dec 	.word	0x00031dec
   14080:	00031cbc 	.word	0x00031cbc

00014084 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   14084:	b510      	push	{r4, lr}
   14086:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   14088:	f7ff fff2 	bl	14070 <log_src_cnt_get>
   1408c:	42a0      	cmp	r0, r4
   1408e:	d903      	bls.n	14098 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   14090:	4b02      	ldr	r3, [pc, #8]	; (1409c <log_source_name_get+0x18>)
   14092:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   14096:	bd10      	pop	{r4, pc}
			return NULL;
   14098:	2000      	movs	r0, #0
   1409a:	e7fc      	b.n	14096 <log_source_name_get+0x12>
   1409c:	00031cbc 	.word	0x00031cbc

000140a0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   140a0:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   140a2:	4b09      	ldr	r3, [pc, #36]	; (140c8 <log_backend_enable+0x28>)
   140a4:	1ac3      	subs	r3, r0, r3
   140a6:	111b      	asrs	r3, r3, #4
   140a8:	3301      	adds	r3, #1
	backend->cb->id = id;
   140aa:	f8d0 c004 	ldr.w	ip, [r0, #4]
   140ae:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
   140b2:	6843      	ldr	r3, [r0, #4]
   140b4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   140b6:	6843      	ldr	r3, [r0, #4]
   140b8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   140ba:	6843      	ldr	r3, [r0, #4]
   140bc:	2201      	movs	r2, #1
   140be:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   140c0:	f7ff fe16 	bl	13cf0 <z_log_notify_backend_enabled>
}
   140c4:	bd08      	pop	{r3, pc}
   140c6:	bf00      	nop
   140c8:	00031dec 	.word	0x00031dec

000140cc <cbprintf_package_copy>:
{
   140cc:	b500      	push	{lr}
   140ce:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   140d0:	9205      	str	r2, [sp, #20]
   140d2:	9306      	str	r3, [sp, #24]
   140d4:	2300      	movs	r3, #0
   140d6:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   140d8:	b162      	cbz	r2, 140f4 <cbprintf_package_copy+0x28>
   140da:	4a07      	ldr	r2, [pc, #28]	; (140f8 <cbprintf_package_copy+0x2c>)
   140dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   140de:	9302      	str	r3, [sp, #8]
   140e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140e2:	9301      	str	r3, [sp, #4]
   140e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140e6:	9300      	str	r3, [sp, #0]
   140e8:	ab05      	add	r3, sp, #20
   140ea:	f7fe fe67 	bl	12dbc <cbprintf_package_convert>
}
   140ee:	b009      	add	sp, #36	; 0x24
   140f0:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   140f4:	2200      	movs	r2, #0
   140f6:	e7f1      	b.n	140dc <cbprintf_package_copy+0x10>
   140f8:	0002b965 	.word	0x0002b965

000140fc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   140fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14100:	b08b      	sub	sp, #44	; 0x2c
   14102:	af04      	add	r7, sp, #16
   14104:	4605      	mov	r5, r0
   14106:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   14108:	4688      	mov	r8, r1
	int inlen = desc.package_len;
   1410a:	f3c1 244a 	ubfx	r4, r1, #9, #11
	struct log_msg *msg;

	if (inlen > 0) {
   1410e:	2c00      	cmp	r4, #0
   14110:	f000 8089 	beq.w	14226 <z_impl_z_log_msg_static_create+0x12a>
   14114:	4691      	mov	r9, r2
	struct z_cbprintf_buf_desc buf_desc = {
   14116:	2200      	movs	r2, #0
   14118:	60fa      	str	r2, [r7, #12]
   1411a:	613a      	str	r2, [r7, #16]
   1411c:	617a      	str	r2, [r7, #20]
	return cbprintf_package_convert(in_packaged, in_len,
   1411e:	2304      	movs	r3, #4
   14120:	9302      	str	r3, [sp, #8]
   14122:	18fb      	adds	r3, r7, r3
   14124:	9301      	str	r3, [sp, #4]
   14126:	230a      	movs	r3, #10
   14128:	9300      	str	r3, [sp, #0]
   1412a:	f107 030c 	add.w	r3, r7, #12
   1412e:	4621      	mov	r1, r4
   14130:	4648      	mov	r0, r9
   14132:	f7fe fe43 	bl	12dbc <cbprintf_package_convert>

		len = cbprintf_package_copy(package, inlen,
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   14136:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1413a:	d358      	bcc.n	141ee <z_impl_z_log_msg_static_create+0xf2>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   1413c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   14140:	466d      	mov	r5, sp
   14142:	2300      	movs	r3, #0
   14144:	733b      	strb	r3, [r7, #12]
   14146:	2302      	movs	r3, #2
   14148:	737b      	strb	r3, [r7, #13]
   1414a:	b08a      	sub	sp, #40	; 0x28
   1414c:	ac04      	add	r4, sp, #16
   1414e:	f114 0210 	adds.w	r2, r4, #16
   14152:	d017      	beq.n	14184 <z_impl_z_log_msg_static_create+0x88>
   14154:	2012      	movs	r0, #18
   14156:	b11a      	cbz	r2, 14160 <z_impl_z_log_msg_static_create+0x64>
   14158:	2804      	cmp	r0, #4
   1415a:	dd01      	ble.n	14160 <z_impl_z_log_msg_static_create+0x64>
   1415c:	4b3b      	ldr	r3, [pc, #236]	; (1424c <z_impl_z_log_msg_static_create+0x150>)
   1415e:	6163      	str	r3, [r4, #20]
   14160:	2300      	movs	r3, #0
   14162:	703b      	strb	r3, [r7, #0]
   14164:	2302      	movs	r3, #2
   14166:	707b      	strb	r3, [r7, #1]
   14168:	b1ca      	cbz	r2, 1419e <z_impl_z_log_msg_static_create+0xa2>
   1416a:	4603      	mov	r3, r0
   1416c:	2808      	cmp	r0, #8
   1416e:	dd00      	ble.n	14172 <z_impl_z_log_msg_static_create+0x76>
   14170:	61a1      	str	r1, [r4, #24]
   14172:	2b0c      	cmp	r3, #12
   14174:	dd02      	ble.n	1417c <z_impl_z_log_msg_static_create+0x80>
   14176:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1417a:	61e3      	str	r3, [r4, #28]
   1417c:	f104 0320 	add.w	r3, r4, #32
   14180:	2100      	movs	r1, #0
   14182:	e00a      	b.n	1419a <z_impl_z_log_msg_static_create+0x9e>
   14184:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14188:	e7e5      	b.n	14156 <z_impl_z_log_msg_static_create+0x5a>
   1418a:	f101 0618 	add.w	r6, r1, #24
   1418e:	443e      	add	r6, r7
   14190:	f816 6c18 	ldrb.w	r6, [r6, #-24]
   14194:	f803 6b01 	strb.w	r6, [r3], #1
   14198:	3101      	adds	r1, #1
   1419a:	2901      	cmp	r1, #1
   1419c:	d9f5      	bls.n	1418a <z_impl_z_log_msg_static_create+0x8e>
   1419e:	2811      	cmp	r0, #17
   141a0:	dd22      	ble.n	141e8 <z_impl_z_log_msg_static_create+0xec>
   141a2:	2312      	movs	r3, #18
   141a4:	b142      	cbz	r2, 141b8 <z_impl_z_log_msg_static_create+0xbc>
   141a6:	2104      	movs	r1, #4
   141a8:	7339      	strb	r1, [r7, #12]
   141aa:	2100      	movs	r1, #0
   141ac:	7379      	strb	r1, [r7, #13]
   141ae:	73b9      	strb	r1, [r7, #14]
   141b0:	2101      	movs	r1, #1
   141b2:	73f9      	strb	r1, [r7, #15]
   141b4:	68f8      	ldr	r0, [r7, #12]
   141b6:	6120      	str	r0, [r4, #16]
   141b8:	2100      	movs	r1, #0
   141ba:	f36f 0100 	bfc	r1, #0, #1
   141be:	f36f 0141 	bfc	r1, #1, #1
   141c2:	f36f 0182 	bfc	r1, #2, #1
   141c6:	f36f 01c5 	bfc	r1, #3, #3
   141ca:	2002      	movs	r0, #2
   141cc:	f360 1188 	bfi	r1, r0, #6, #3
   141d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
   141d4:	f363 2153 	bfi	r1, r3, #9, #11
   141d8:	2300      	movs	r3, #0
   141da:	f3c1 0113 	ubfx	r1, r1, #0, #20
   141de:	481c      	ldr	r0, [pc, #112]	; (14250 <z_impl_z_log_msg_static_create+0x154>)
   141e0:	f017 fbed 	bl	2b9be <z_log_msg_static_create>
   141e4:	46ad      	mov	sp, r5
				pkg->fmt, (uint32_t)Z_LOG_MSG_MAX_PACKAGE);
			return;
   141e6:	e02d      	b.n	14244 <z_impl_z_log_msg_static_create+0x148>
			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   141e8:	f06f 031b 	mvn.w	r3, #27
   141ec:	e7da      	b.n	141a4 <z_impl_z_log_msg_static_create+0xa8>
		}
		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   141ee:	f360 2853 	bfi	r8, r0, #9, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   141f2:	f3c0 0a0a 	ubfx	sl, r0, #0, #11
   141f6:	eb0a 5018 	add.w	r0, sl, r8, lsr #20
   141fa:	3017      	adds	r0, #23
   141fc:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14200:	0880      	lsrs	r0, r0, #2
   14202:	f7ff fe03 	bl	13e0c <z_log_msg_alloc>
		if (msg) {
   14206:	4683      	mov	fp, r0
   14208:	b1b0      	cbz	r0, 14238 <z_impl_z_log_msg_static_create+0x13c>
			len = cbprintf_package_copy(package, inlen,
   1420a:	2304      	movs	r3, #4
   1420c:	9302      	str	r3, [sp, #8]
   1420e:	18fb      	adds	r3, r7, r3
   14210:	9301      	str	r3, [sp, #4]
   14212:	230a      	movs	r3, #10
   14214:	9300      	str	r3, [sp, #0]
   14216:	4653      	mov	r3, sl
   14218:	f100 0210 	add.w	r2, r0, #16
   1421c:	4621      	mov	r1, r4
   1421e:	4648      	mov	r0, r9
   14220:	f7ff ff54 	bl	140cc <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   14224:	e008      	b.n	14238 <z_impl_z_log_msg_static_create+0x13c>
   14226:	eb04 5411 	add.w	r4, r4, r1, lsr #20
   1422a:	3417      	adds	r4, #23
   1422c:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14230:	08a0      	lsrs	r0, r4, #2
   14232:	f7ff fdeb 	bl	13e0c <z_log_msg_alloc>
   14236:	4683      	mov	fp, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   14238:	4633      	mov	r3, r6
   1423a:	4642      	mov	r2, r8
   1423c:	4629      	mov	r1, r5
   1423e:	4658      	mov	r0, fp
   14240:	f017 fba6 	bl	2b990 <z_log_msg_finalize>
}
   14244:	371c      	adds	r7, #28
   14246:	46bd      	mov	sp, r7
   14248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1424c:	000326c0 	.word	0x000326c0
   14250:	00031d54 	.word	0x00031d54

00014254 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   14254:	b40e      	push	{r1, r2, r3}
   14256:	b500      	push	{lr}
   14258:	b084      	sub	sp, #16
   1425a:	4601      	mov	r1, r0
   1425c:	ab05      	add	r3, sp, #20
   1425e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   14262:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14264:	2000      	movs	r0, #0
   14266:	9000      	str	r0, [sp, #0]
   14268:	4803      	ldr	r0, [pc, #12]	; (14278 <print_formatted+0x24>)
   1426a:	f7ff f945 	bl	134f8 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   1426e:	b004      	add	sp, #16
   14270:	f85d eb04 	ldr.w	lr, [sp], #4
   14274:	b003      	add	sp, #12
   14276:	4770      	bx	lr
   14278:	0002baf5 	.word	0x0002baf5

0001427c <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   1427c:	b530      	push	{r4, r5, lr}
   1427e:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_CUSTOM_TIMESTAMP);


	if (!format) {
   14280:	f011 0f44 	tst.w	r1, #68	; 0x44
   14284:	d005      	beq.n	14292 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   14286:	4b1a      	ldr	r3, [pc, #104]	; (142f0 <timestamp_print+0x74>)
   14288:	681c      	ldr	r4, [r3, #0]
   1428a:	b934      	cbnz	r4, 1429a <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   1428c:	2000      	movs	r0, #0
	}

	return length;
}
   1428e:	b005      	add	sp, #20
   14290:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   14292:	4918      	ldr	r1, [pc, #96]	; (142f4 <timestamp_print+0x78>)
   14294:	f7ff ffde 	bl	14254 <print_formatted>
   14298:	e7f9      	b.n	1428e <timestamp_print+0x12>
		timestamp /= timestamp_div;
   1429a:	4b17      	ldr	r3, [pc, #92]	; (142f8 <timestamp_print+0x7c>)
   1429c:	6819      	ldr	r1, [r3, #0]
   1429e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   142a2:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   142a6:	4a15      	ldr	r2, [pc, #84]	; (142fc <timestamp_print+0x80>)
   142a8:	fba2 320c 	umull	r3, r2, r2, ip
   142ac:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   142ae:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   142b2:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   142b6:	4b12      	ldr	r3, [pc, #72]	; (14300 <timestamp_print+0x84>)
   142b8:	fba3 530e 	umull	r5, r3, r3, lr
   142bc:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   142be:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   142c2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   142c6:	fb0c f101 	mul.w	r1, ip, r1
   142ca:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   142ce:	fb04 1115 	mls	r1, r4, r5, r1
   142d2:	fb0c f101 	mul.w	r1, ip, r1
   142d6:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   142da:	9102      	str	r1, [sp, #8]
   142dc:	9501      	str	r5, [sp, #4]
   142de:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   142e2:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   142e6:	9100      	str	r1, [sp, #0]
   142e8:	4906      	ldr	r1, [pc, #24]	; (14304 <timestamp_print+0x88>)
   142ea:	f7ff ffb3 	bl	14254 <print_formatted>
   142ee:	e7ce      	b.n	1428e <timestamp_print+0x12>
   142f0:	200036f0 	.word	0x200036f0
   142f4:	00032700 	.word	0x00032700
   142f8:	200036ec 	.word	0x200036ec
   142fc:	91a2b3c5 	.word	0x91a2b3c5
   14300:	88888889 	.word	0x88888889
   14304:	0003270c 	.word	0x0003270c

00014308 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   14308:	b161      	cbz	r1, 14324 <color_print+0x1c>
{
   1430a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1430c:	b12a      	cbz	r2, 1431a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   1430e:	4a06      	ldr	r2, [pc, #24]	; (14328 <color_print+0x20>)
   14310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   14314:	b912      	cbnz	r2, 1431c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   14316:	4a05      	ldr	r2, [pc, #20]	; (1432c <color_print+0x24>)
   14318:	e000      	b.n	1431c <color_print+0x14>
   1431a:	4a04      	ldr	r2, [pc, #16]	; (1432c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   1431c:	4904      	ldr	r1, [pc, #16]	; (14330 <color_print+0x28>)
   1431e:	f7ff ff99 	bl	14254 <print_formatted>
	}
}
   14322:	bd08      	pop	{r3, pc}
   14324:	4770      	bx	lr
   14326:	bf00      	nop
   14328:	000327a8 	.word	0x000327a8
   1432c:	00032728 	.word	0x00032728
   14330:	000335d4 	.word	0x000335d4

00014334 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   14334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14338:	4605      	mov	r5, r0
   1433a:	4690      	mov	r8, r2
   1433c:	461e      	mov	r6, r3
   1433e:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   14340:	b981      	cbnz	r1, 14364 <ids_print+0x30>
	int total = 0;
   14342:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   14344:	b12e      	cbz	r6, 14352 <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   14346:	4632      	mov	r2, r6
   14348:	4910      	ldr	r1, [pc, #64]	; (1438c <ids_print+0x58>)
   1434a:	4628      	mov	r0, r5
   1434c:	f7ff ff82 	bl	14254 <print_formatted>
   14350:	4404      	add	r4, r0
	}

	if (source) {
   14352:	b1b7      	cbz	r7, 14382 <ids_print+0x4e>
		total += print_formatted(output,
   14354:	f1b8 0f00 	cmp.w	r8, #0
   14358:	d00d      	beq.n	14376 <ids_print+0x42>
				(func_on &&
   1435a:	9b07      	ldr	r3, [sp, #28]
   1435c:	2b04      	cmp	r3, #4
   1435e:	d013      	beq.n	14388 <ids_print+0x54>
		total += print_formatted(output,
   14360:	490b      	ldr	r1, [pc, #44]	; (14390 <ids_print+0x5c>)
   14362:	e009      	b.n	14378 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   14364:	4b0b      	ldr	r3, [pc, #44]	; (14394 <ids_print+0x60>)
   14366:	9a07      	ldr	r2, [sp, #28]
   14368:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1436c:	490a      	ldr	r1, [pc, #40]	; (14398 <ids_print+0x64>)
   1436e:	f7ff ff71 	bl	14254 <print_formatted>
   14372:	4604      	mov	r4, r0
   14374:	e7e6      	b.n	14344 <ids_print+0x10>
		total += print_formatted(output,
   14376:	4906      	ldr	r1, [pc, #24]	; (14390 <ids_print+0x5c>)
   14378:	463a      	mov	r2, r7
   1437a:	4628      	mov	r0, r5
   1437c:	f7ff ff6a 	bl	14254 <print_formatted>
   14380:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   14382:	4620      	mov	r0, r4
   14384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   14388:	4904      	ldr	r1, [pc, #16]	; (1439c <ids_print+0x68>)
   1438a:	e7f5      	b.n	14378 <ids_print+0x44>
   1438c:	00032744 	.word	0x00032744
   14390:	00032734 	.word	0x00032734
   14394:	000327bc 	.word	0x000327bc
   14398:	0003273c 	.word	0x0003273c
   1439c:	00032730 	.word	0x00032730

000143a0 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   143a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a4:	b085      	sub	sp, #20
   143a6:	4605      	mov	r5, r0
   143a8:	460c      	mov	r4, r1
   143aa:	4616      	mov	r6, r2
   143ac:	9303      	str	r3, [sp, #12]
   143ae:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   143b2:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   143b6:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   143ba:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   143be:	f017 facf 	bl	2b960 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   143c2:	b1d8      	cbz	r0, 143fc <prefix_print+0x5c>
   143c4:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   143c6:	4912      	ldr	r1, [pc, #72]	; (14410 <prefix_print+0x70>)
   143c8:	4628      	mov	r0, r5
   143ca:	f7ff ff43 	bl	14254 <print_formatted>
   143ce:	4607      	mov	r7, r0
	}

	if (stamp) {
   143d0:	f1bb 0f00 	cmp.w	fp, #0
   143d4:	d114      	bne.n	14400 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   143d6:	4642      	mov	r2, r8
   143d8:	4651      	mov	r1, sl
   143da:	4628      	mov	r0, r5
   143dc:	f017 fb4a 	bl	2ba74 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   143e0:	f8cd 8004 	str.w	r8, [sp, #4]
   143e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   143e6:	9300      	str	r3, [sp, #0]
   143e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   143ea:	4632      	mov	r2, r6
   143ec:	4649      	mov	r1, r9
   143ee:	4628      	mov	r0, r5
   143f0:	f7ff ffa0 	bl	14334 <ids_print>

	return length;
}
   143f4:	4438      	add	r0, r7
   143f6:	b005      	add	sp, #20
   143f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   143fc:	2700      	movs	r7, #0
   143fe:	e7e7      	b.n	143d0 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   14400:	9a03      	ldr	r2, [sp, #12]
   14402:	4621      	mov	r1, r4
   14404:	4628      	mov	r0, r5
   14406:	f7ff ff39 	bl	1427c <timestamp_print>
   1440a:	4407      	add	r7, r0
   1440c:	e7e3      	b.n	143d6 <prefix_print+0x36>
   1440e:	bf00      	nop
   14410:	00032748 	.word	0x00032748

00014414 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14414:	f011 0f10 	tst.w	r1, #16
   14418:	d10b      	bne.n	14432 <newline_print+0x1e>
{
   1441a:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1441c:	f011 0f20 	tst.w	r1, #32
   14420:	d003      	beq.n	1442a <newline_print+0x16>
		print_formatted(ctx, "\n");
   14422:	4904      	ldr	r1, [pc, #16]	; (14434 <newline_print+0x20>)
   14424:	f7ff ff16 	bl	14254 <print_formatted>
}
   14428:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   1442a:	4903      	ldr	r1, [pc, #12]	; (14438 <newline_print+0x24>)
   1442c:	f7ff ff12 	bl	14254 <print_formatted>
   14430:	e7fa      	b.n	14428 <newline_print+0x14>
   14432:	4770      	bx	lr
   14434:	00031ef4 	.word	0x00031ef4
   14438:	000353a4 	.word	0x000353a4

0001443c <hexdump_line_print>:
{
   1443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14440:	4605      	mov	r5, r0
   14442:	460f      	mov	r7, r1
   14444:	4616      	mov	r6, r2
   14446:	4698      	mov	r8, r3
	newline_print(output, flags);
   14448:	9906      	ldr	r1, [sp, #24]
   1444a:	f7ff ffe3 	bl	14414 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   1444e:	2400      	movs	r4, #0
   14450:	4544      	cmp	r4, r8
   14452:	da05      	bge.n	14460 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   14454:	4923      	ldr	r1, [pc, #140]	; (144e4 <hexdump_line_print+0xa8>)
   14456:	4628      	mov	r0, r5
   14458:	f7ff fefc 	bl	14254 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1445c:	3401      	adds	r4, #1
   1445e:	e7f7      	b.n	14450 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14460:	2400      	movs	r4, #0
   14462:	e009      	b.n	14478 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   14464:	491f      	ldr	r1, [pc, #124]	; (144e4 <hexdump_line_print+0xa8>)
   14466:	4628      	mov	r0, r5
   14468:	f7ff fef4 	bl	14254 <print_formatted>
   1446c:	e00b      	b.n	14486 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   1446e:	491e      	ldr	r1, [pc, #120]	; (144e8 <hexdump_line_print+0xac>)
   14470:	4628      	mov	r0, r5
   14472:	f7ff feef 	bl	14254 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14476:	3401      	adds	r4, #1
   14478:	2c0f      	cmp	r4, #15
   1447a:	dc0c      	bgt.n	14496 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   1447c:	2c00      	cmp	r4, #0
   1447e:	dd02      	ble.n	14486 <hexdump_line_print+0x4a>
   14480:	f014 0f07 	tst.w	r4, #7
   14484:	d0ee      	beq.n	14464 <hexdump_line_print+0x28>
		if (i < length) {
   14486:	42b4      	cmp	r4, r6
   14488:	d2f1      	bcs.n	1446e <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   1448a:	5d3a      	ldrb	r2, [r7, r4]
   1448c:	4917      	ldr	r1, [pc, #92]	; (144ec <hexdump_line_print+0xb0>)
   1448e:	4628      	mov	r0, r5
   14490:	f7ff fee0 	bl	14254 <print_formatted>
   14494:	e7ef      	b.n	14476 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   14496:	4916      	ldr	r1, [pc, #88]	; (144f0 <hexdump_line_print+0xb4>)
   14498:	4628      	mov	r0, r5
   1449a:	f7ff fedb 	bl	14254 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1449e:	2400      	movs	r4, #0
   144a0:	e009      	b.n	144b6 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   144a2:	4910      	ldr	r1, [pc, #64]	; (144e4 <hexdump_line_print+0xa8>)
   144a4:	4628      	mov	r0, r5
   144a6:	f7ff fed5 	bl	14254 <print_formatted>
   144aa:	e00b      	b.n	144c4 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   144ac:	4911      	ldr	r1, [pc, #68]	; (144f4 <hexdump_line_print+0xb8>)
   144ae:	4628      	mov	r0, r5
   144b0:	f7ff fed0 	bl	14254 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   144b4:	3401      	adds	r4, #1
   144b6:	2c0f      	cmp	r4, #15
   144b8:	dc12      	bgt.n	144e0 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   144ba:	2c00      	cmp	r4, #0
   144bc:	dd02      	ble.n	144c4 <hexdump_line_print+0x88>
   144be:	f014 0f07 	tst.w	r4, #7
   144c2:	d0ee      	beq.n	144a2 <hexdump_line_print+0x66>
		if (i < length) {
   144c4:	42b4      	cmp	r4, r6
   144c6:	d206      	bcs.n	144d6 <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   144c8:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   144ca:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   144ce:	2b5e      	cmp	r3, #94	; 0x5e
   144d0:	d9ec      	bls.n	144ac <hexdump_line_print+0x70>
   144d2:	222e      	movs	r2, #46	; 0x2e
   144d4:	e7ea      	b.n	144ac <hexdump_line_print+0x70>
			print_formatted(output, " ");
   144d6:	4903      	ldr	r1, [pc, #12]	; (144e4 <hexdump_line_print+0xa8>)
   144d8:	4628      	mov	r0, r5
   144da:	f7ff febb 	bl	14254 <print_formatted>
   144de:	e7e9      	b.n	144b4 <hexdump_line_print+0x78>
}
   144e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144e4:	00032740 	.word	0x00032740
   144e8:	00032754 	.word	0x00032754
   144ec:	0003274c 	.word	0x0003274c
   144f0:	00032758 	.word	0x00032758
   144f4:	0003275c 	.word	0x0003275c

000144f8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   144f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144fc:	b084      	sub	sp, #16
   144fe:	4604      	mov	r4, r0
   14500:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   14504:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   14506:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   14508:	b995      	cbnz	r5, 14530 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1450a:	2b01      	cmp	r3, #1
   1450c:	d01b      	beq.n	14546 <log_output_process+0x4e>
   1450e:	4817      	ldr	r0, [pc, #92]	; (1456c <log_output_process+0x74>)
		prefix_offset = 0;
   14510:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   14514:	b127      	cbz	r7, 14520 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14516:	463b      	mov	r3, r7
   14518:	4622      	mov	r2, r4
   1451a:	4915      	ldr	r1, [pc, #84]	; (14570 <log_output_process+0x78>)
   1451c:	f015 ff38 	bl	2a390 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   14520:	b9ae      	cbnz	r6, 1454e <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14522:	b9ed      	cbnz	r5, 14560 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14524:	4620      	mov	r0, r4
   14526:	f017 fad8 	bl	2bada <log_output_flush>
}
   1452a:	b004      	add	sp, #16
   1452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   14530:	9502      	str	r5, [sp, #8]
   14532:	9301      	str	r3, [sp, #4]
   14534:	9200      	str	r2, [sp, #0]
   14536:	460b      	mov	r3, r1
   14538:	2200      	movs	r2, #0
   1453a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1453c:	f7ff ff30 	bl	143a0 <prefix_print>
   14540:	4680      	mov	r8, r0
		cb = out_func;
   14542:	480c      	ldr	r0, [pc, #48]	; (14574 <log_output_process+0x7c>)
   14544:	e7e6      	b.n	14514 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14546:	480b      	ldr	r0, [pc, #44]	; (14574 <log_output_process+0x7c>)
		prefix_offset = 0;
   14548:	f04f 0800 	mov.w	r8, #0
   1454c:	e7e2      	b.n	14514 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   1454e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14550:	9300      	str	r3, [sp, #0]
   14552:	4643      	mov	r3, r8
   14554:	4632      	mov	r2, r6
   14556:	990c      	ldr	r1, [sp, #48]	; 0x30
   14558:	4620      	mov	r0, r4
   1455a:	f017 faa3 	bl	2baa4 <log_msg_hexdump>
   1455e:	e7e0      	b.n	14522 <log_output_process+0x2a>
		postfix_print(output, flags, level);
   14560:	462a      	mov	r2, r5
   14562:	990e      	ldr	r1, [sp, #56]	; 0x38
   14564:	4620      	mov	r0, r4
   14566:	f017 fa91 	bl	2ba8c <postfix_print>
   1456a:	e7db      	b.n	14524 <log_output_process+0x2c>
   1456c:	0002bb2d 	.word	0x0002bb2d
   14570:	0002ba65 	.word	0x0002ba65
   14574:	0002baf5 	.word	0x0002baf5

00014578 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   14578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1457c:	b086      	sub	sp, #24
   1457e:	4605      	mov	r5, r0
   14580:	460c      	mov	r4, r1
   14582:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   14584:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   14588:	880e      	ldrh	r6, [r1, #0]
   1458a:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   1458e:	7808      	ldrb	r0, [r1, #0]
   14590:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   14594:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   14596:	b133      	cbz	r3, 145a6 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14598:	4a11      	ldr	r2, [pc, #68]	; (145e0 <log_output_msg_process+0x68>)
   1459a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1459c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   145a0:	2900      	cmp	r1, #0
   145a2:	da18      	bge.n	145d6 <log_output_msg_process+0x5e>
   145a4:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   145a6:	4622      	mov	r2, r4
   145a8:	f852 1b10 	ldr.w	r1, [r2], #16
   145ac:	f3c1 214a 	ubfx	r1, r1, #9, #11
	*len = msg->hdr.desc.data_len;
   145b0:	8860      	ldrh	r0, [r4, #2]
   145b2:	f3c0 100b 	ubfx	r0, r0, #4, #12
	return msg->data + msg->hdr.desc.package_len;
   145b6:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   145b8:	b901      	cbnz	r1, 145bc <log_output_msg_process+0x44>
   145ba:	2200      	movs	r2, #0
   145bc:	9704      	str	r7, [sp, #16]
   145be:	9003      	str	r0, [sp, #12]
   145c0:	9402      	str	r4, [sp, #8]
   145c2:	9201      	str	r2, [sp, #4]
   145c4:	9600      	str	r6, [sp, #0]
   145c6:	2200      	movs	r2, #0
   145c8:	4641      	mov	r1, r8
   145ca:	4628      	mov	r0, r5
   145cc:	f7ff ff94 	bl	144f8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   145d0:	b006      	add	sp, #24
   145d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   145d6:	f7ff fd55 	bl	14084 <log_source_name_get>
   145da:	4603      	mov	r3, r0
   145dc:	e7e3      	b.n	145a6 <log_output_msg_process+0x2e>
   145de:	bf00      	nop
   145e0:	00031cbc 	.word	0x00031cbc

000145e4 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   145e4:	b570      	push	{r4, r5, r6, lr}
   145e6:	b082      	sub	sp, #8
   145e8:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   145ea:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   145ec:	f242 730f 	movw	r3, #9999	; 0x270f
   145f0:	428b      	cmp	r3, r1
   145f2:	bf28      	it	cs
   145f4:	460b      	movcs	r3, r1
   145f6:	4a0e      	ldr	r2, [pc, #56]	; (14630 <log_output_dropped_process+0x4c>)
   145f8:	2105      	movs	r1, #5
   145fa:	4668      	mov	r0, sp
   145fc:	f015 ff4b 	bl	2a496 <snprintk>
   14600:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   14602:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14604:	685b      	ldr	r3, [r3, #4]
   14606:	220b      	movs	r2, #11
   14608:	490a      	ldr	r1, [pc, #40]	; (14634 <log_output_dropped_process+0x50>)
   1460a:	4628      	mov	r0, r5
   1460c:	f017 fa1d 	bl	2ba4a <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   14610:	6863      	ldr	r3, [r4, #4]
   14612:	685b      	ldr	r3, [r3, #4]
   14614:	4632      	mov	r2, r6
   14616:	4669      	mov	r1, sp
   14618:	4628      	mov	r0, r5
   1461a:	f017 fa16 	bl	2ba4a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   1461e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14620:	685b      	ldr	r3, [r3, #4]
   14622:	221b      	movs	r2, #27
   14624:	4904      	ldr	r1, [pc, #16]	; (14638 <log_output_dropped_process+0x54>)
   14626:	4628      	mov	r0, r5
   14628:	f017 fa0f 	bl	2ba4a <buffer_write>
}
   1462c:	b002      	add	sp, #8
   1462e:	bd70      	pop	{r4, r5, r6, pc}
   14630:	00033f74 	.word	0x00033f74
   14634:	0003277c 	.word	0x0003277c
   14638:	00032760 	.word	0x00032760

0001463c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1463c:	4b07      	ldr	r3, [pc, #28]	; (1465c <log_output_timestamp_freq_set+0x20>)
   1463e:	2201      	movs	r2, #1
   14640:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14642:	e004      	b.n	1464e <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   14644:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   14646:	4a05      	ldr	r2, [pc, #20]	; (1465c <log_output_timestamp_freq_set+0x20>)
   14648:	6813      	ldr	r3, [r2, #0]
   1464a:	005b      	lsls	r3, r3, #1
   1464c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1464e:	4b04      	ldr	r3, [pc, #16]	; (14660 <log_output_timestamp_freq_set+0x24>)
   14650:	4298      	cmp	r0, r3
   14652:	d8f7      	bhi.n	14644 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   14654:	4b03      	ldr	r3, [pc, #12]	; (14664 <log_output_timestamp_freq_set+0x28>)
   14656:	6018      	str	r0, [r3, #0]
}
   14658:	4770      	bx	lr
   1465a:	bf00      	nop
   1465c:	200036ec 	.word	0x200036ec
   14660:	000f4240 	.word	0x000f4240
   14664:	200036f0 	.word	0x200036f0

00014668 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   14668:	4b03      	ldr	r3, [pc, #12]	; (14678 <log_backend_rtt_init+0x10>)
   1466a:	2201      	movs	r2, #1
   1466c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
   1466e:	4b03      	ldr	r3, [pc, #12]	; (1467c <log_backend_rtt_init+0x14>)
   14670:	4a03      	ldr	r2, [pc, #12]	; (14680 <log_backend_rtt_init+0x18>)
   14672:	601a      	str	r2, [r3, #0]
}
   14674:	4770      	bx	lr
   14676:	bf00      	nop
   14678:	20005d3e 	.word	0x20005d3e
   1467c:	2000371c 	.word	0x2000371c
   14680:	20003720 	.word	0x20003720

00014684 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14684:	4b01      	ldr	r3, [pc, #4]	; (1468c <format_set+0x8>)
   14686:	6019      	str	r1, [r3, #0]
	return 0;
}
   14688:	2000      	movs	r0, #0
   1468a:	4770      	bx	lr
   1468c:	20003708 	.word	0x20003708

00014690 <on_failed_write>:
{
   14690:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   14692:	b918      	cbnz	r0, 1469c <on_failed_write+0xc>
		host_present = false;
   14694:	4b07      	ldr	r3, [pc, #28]	; (146b4 <on_failed_write+0x24>)
   14696:	2200      	movs	r2, #0
   14698:	701a      	strb	r2, [r3, #0]
}
   1469a:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   1469c:	4b06      	ldr	r3, [pc, #24]	; (146b8 <on_failed_write+0x28>)
   1469e:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   146a0:	b123      	cbz	r3, 146ac <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   146a2:	f241 3088 	movw	r0, #5000	; 0x1388
   146a6:	f01c ff28 	bl	314fa <z_impl_k_busy_wait>
}
   146aa:	e7f6      	b.n	1469a <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
   146ac:	2005      	movs	r0, #5
   146ae:	f017 fa4c 	bl	2bb4a <k_msleep>
}
   146b2:	e7f2      	b.n	1469a <on_failed_write+0xa>
   146b4:	20005d3e 	.word	0x20005d3e
   146b8:	20005d3f 	.word	0x20005d3f

000146bc <on_write>:
{
   146bc:	b538      	push	{r3, r4, r5, lr}
   146be:	4604      	mov	r4, r0
	host_present = true;
   146c0:	4b0a      	ldr	r3, [pc, #40]	; (146ec <on_write+0x30>)
   146c2:	2201      	movs	r2, #1
   146c4:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   146c6:	4b0a      	ldr	r3, [pc, #40]	; (146f0 <on_write+0x34>)
   146c8:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   146ca:	b92b      	cbnz	r3, 146d8 <on_write+0x1c>
}
   146cc:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
   146ce:	1e65      	subs	r5, r4, #1
   146d0:	4620      	mov	r0, r4
   146d2:	f7ff ffdd 	bl	14690 <on_failed_write>
   146d6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   146d8:	2000      	movs	r0, #0
   146da:	f011 f8bb 	bl	25854 <SEGGER_RTT_HasDataUp>
   146de:	2800      	cmp	r0, #0
   146e0:	d0f4      	beq.n	146cc <on_write+0x10>
   146e2:	4b02      	ldr	r3, [pc, #8]	; (146ec <on_write+0x30>)
   146e4:	781b      	ldrb	r3, [r3, #0]
   146e6:	2b00      	cmp	r3, #0
   146e8:	d1f1      	bne.n	146ce <on_write+0x12>
   146ea:	e7ef      	b.n	146cc <on_write+0x10>
   146ec:	20005d3e 	.word	0x20005d3e
   146f0:	20005d3f 	.word	0x20005d3f

000146f4 <data_out_block_mode>:
{
   146f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146f6:	4606      	mov	r6, r0
   146f8:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   146fa:	2704      	movs	r7, #4
   146fc:	e00d      	b.n	1471a <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   146fe:	462a      	mov	r2, r5
   14700:	4631      	mov	r1, r6
   14702:	2000      	movs	r0, #0
   14704:	f011 f842 	bl	2578c <SEGGER_RTT_WriteSkipNoLock>
   14708:	4604      	mov	r4, r0
   1470a:	e014      	b.n	14736 <data_out_block_mode+0x42>
			on_write(retry_cnt);
   1470c:	4638      	mov	r0, r7
   1470e:	f7ff ffd5 	bl	146bc <on_write>
	} while ((ret == 0) && host_present);
   14712:	b9dc      	cbnz	r4, 1474c <data_out_block_mode+0x58>
   14714:	4b11      	ldr	r3, [pc, #68]	; (1475c <data_out_block_mode+0x68>)
   14716:	781b      	ldrb	r3, [r3, #0]
   14718:	b1c3      	cbz	r3, 1474c <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   1471a:	4b11      	ldr	r3, [pc, #68]	; (14760 <data_out_block_mode+0x6c>)
   1471c:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   1471e:	2b00      	cmp	r3, #0
   14720:	d1ed      	bne.n	146fe <data_out_block_mode+0xa>
			RTT_LOCK();
   14722:	f011 f8a7 	bl	25874 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   14726:	462a      	mov	r2, r5
   14728:	4631      	mov	r1, r6
   1472a:	2000      	movs	r0, #0
   1472c:	f011 f82e 	bl	2578c <SEGGER_RTT_WriteSkipNoLock>
   14730:	4604      	mov	r4, r0
			RTT_UNLOCK();
   14732:	f011 f8ab 	bl	2588c <zephyr_rtt_mutex_unlock>
		if (ret) {
   14736:	2c00      	cmp	r4, #0
   14738:	d1e8      	bne.n	1470c <data_out_block_mode+0x18>
		} else if (host_present) {
   1473a:	4b08      	ldr	r3, [pc, #32]	; (1475c <data_out_block_mode+0x68>)
   1473c:	781b      	ldrb	r3, [r3, #0]
   1473e:	2b00      	cmp	r3, #0
   14740:	d0e7      	beq.n	14712 <data_out_block_mode+0x1e>
			retry_cnt--;
   14742:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   14744:	4638      	mov	r0, r7
   14746:	f7ff ffa3 	bl	14690 <on_failed_write>
   1474a:	e7e2      	b.n	14712 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
   1474c:	b914      	cbnz	r4, 14754 <data_out_block_mode+0x60>
   1474e:	4b03      	ldr	r3, [pc, #12]	; (1475c <data_out_block_mode+0x68>)
   14750:	781b      	ldrb	r3, [r3, #0]
   14752:	b903      	cbnz	r3, 14756 <data_out_block_mode+0x62>
   14754:	462c      	mov	r4, r5
}
   14756:	4620      	mov	r0, r4
   14758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1475a:	bf00      	nop
   1475c:	20005d3e 	.word	0x20005d3e
   14760:	20005d3f 	.word	0x20005d3f

00014764 <panic>:
{
   14764:	b508      	push	{r3, lr}
	panic_mode = true;
   14766:	4b03      	ldr	r3, [pc, #12]	; (14774 <panic+0x10>)
   14768:	2201      	movs	r2, #1
   1476a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1476c:	4802      	ldr	r0, [pc, #8]	; (14778 <panic+0x14>)
   1476e:	f017 f9b4 	bl	2bada <log_output_flush>
}
   14772:	bd08      	pop	{r3, pc}
   14774:	20005d3f 	.word	0x20005d3f
   14778:	000327fc 	.word	0x000327fc

0001477c <dropped>:
{
   1477c:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1477e:	4802      	ldr	r0, [pc, #8]	; (14788 <dropped+0xc>)
   14780:	f7ff ff30 	bl	145e4 <log_output_dropped_process>
}
   14784:	bd08      	pop	{r3, pc}
   14786:	bf00      	nop
   14788:	000327fc 	.word	0x000327fc

0001478c <process>:
{
   1478c:	b510      	push	{r4, lr}
   1478e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14790:	4b04      	ldr	r3, [pc, #16]	; (147a4 <process+0x18>)
   14792:	6818      	ldr	r0, [r3, #0]
   14794:	f7ff fa94 	bl	13cc0 <log_format_func_t_get>
   14798:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
   1479a:	220f      	movs	r2, #15
   1479c:	4621      	mov	r1, r4
   1479e:	4802      	ldr	r0, [pc, #8]	; (147a8 <process+0x1c>)
   147a0:	4798      	blx	r3
}
   147a2:	bd10      	pop	{r4, pc}
   147a4:	20003708 	.word	0x20003708
   147a8:	000327fc 	.word	0x000327fc

000147ac <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   147ac:	b570      	push	{r4, r5, r6, lr}
   147ae:	4605      	mov	r5, r0
	__asm__ volatile(
   147b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   147b4:	f3ef 8611 	mrs	r6, BASEPRI
   147b8:	f383 8812 	msr	BASEPRI_MAX, r3
   147bc:	f3bf 8f6f 	isb	sy
   147c0:	4b0e      	ldr	r3, [pc, #56]	; (147fc <pm_state_notify+0x50>)
   147c2:	681c      	ldr	r4, [r3, #0]
   147c4:	e00d      	b.n	147e2 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   147c6:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   147c8:	b13a      	cbz	r2, 147da <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   147ca:	4b0d      	ldr	r3, [pc, #52]	; (14800 <pm_state_notify+0x54>)
   147cc:	7c1b      	ldrb	r3, [r3, #16]
   147ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   147d2:	490c      	ldr	r1, [pc, #48]	; (14804 <pm_state_notify+0x58>)
   147d4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   147d8:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   147da:	4623      	mov	r3, r4
	return node->next;
   147dc:	6824      	ldr	r4, [r4, #0]
   147de:	b104      	cbz	r4, 147e2 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   147e0:	b123      	cbz	r3, 147ec <pm_state_notify+0x40>
   147e2:	b12c      	cbz	r4, 147f0 <pm_state_notify+0x44>
		if (entering_state) {
   147e4:	2d00      	cmp	r5, #0
   147e6:	d0ee      	beq.n	147c6 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   147e8:	6862      	ldr	r2, [r4, #4]
   147ea:	e7ed      	b.n	147c8 <pm_state_notify+0x1c>
   147ec:	461c      	mov	r4, r3
   147ee:	e7f8      	b.n	147e2 <pm_state_notify+0x36>
	__asm__ volatile(
   147f0:	f386 8811 	msr	BASEPRI, r6
   147f4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   147f8:	bd70      	pop	{r4, r5, r6, pc}
   147fa:	bf00      	nop
   147fc:	20003754 	.word	0x20003754
   14800:	2000522c 	.word	0x2000522c
   14804:	20003748 	.word	0x20003748

00014808 <pm_exit_pos_ops>:
{
   14808:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   1480a:	4b06      	ldr	r3, [pc, #24]	; (14824 <pm_exit_pos_ops+0x1c>)
   1480c:	b123      	cbz	r3, 14818 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1480e:	7841      	ldrb	r1, [r0, #1]
   14810:	7800      	ldrb	r0, [r0, #0]
   14812:	f018 f85f 	bl	2c8d4 <pm_state_exit_post_ops>
}
   14816:	bd08      	pop	{r3, pc}
   14818:	2300      	movs	r3, #0
   1481a:	f383 8811 	msr	BASEPRI, r3
   1481e:	f3bf 8f6f 	isb	sy
   14822:	e7f8      	b.n	14816 <pm_exit_pos_ops+0xe>
   14824:	0002c8d5 	.word	0x0002c8d5

00014828 <pm_resume_devices>:
{
   14828:	b510      	push	{r4, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   1482a:	4b08      	ldr	r3, [pc, #32]	; (1484c <pm_resume_devices+0x24>)
   1482c:	681c      	ldr	r4, [r3, #0]
   1482e:	3c01      	subs	r4, #1
   14830:	e006      	b.n	14840 <pm_resume_devices+0x18>
		pm_device_action_run(__pm_device_slots_start[i],
   14832:	2101      	movs	r1, #1
   14834:	4b06      	ldr	r3, [pc, #24]	; (14850 <pm_resume_devices+0x28>)
   14836:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1483a:	f000 fa19 	bl	14c70 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   1483e:	3c01      	subs	r4, #1
   14840:	2c00      	cmp	r4, #0
   14842:	daf6      	bge.n	14832 <pm_resume_devices+0xa>
	num_susp = 0;
   14844:	4b01      	ldr	r3, [pc, #4]	; (1484c <pm_resume_devices+0x24>)
   14846:	2200      	movs	r2, #0
   14848:	601a      	str	r2, [r3, #0]
}
   1484a:	bd10      	pop	{r4, pc}
   1484c:	20003738 	.word	0x20003738
   14850:	20000914 	.word	0x20000914

00014854 <pm_suspend_devices>:
{
   14854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14858:	b084      	sub	sp, #16
   1485a:	af00      	add	r7, sp, #0
	devc = z_device_get_all_static(&devs);
   1485c:	f107 000c 	add.w	r0, r7, #12
   14860:	f011 f828 	bl	258b4 <z_device_get_all_static>
	num_susp = 0;
   14864:	4b55      	ldr	r3, [pc, #340]	; (149bc <pm_suspend_devices+0x168>)
   14866:	2200      	movs	r2, #0
   14868:	601a      	str	r2, [r3, #0]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   1486a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1486e:	0083      	lsls	r3, r0, #2
   14870:	3b1c      	subs	r3, #28
   14872:	68fc      	ldr	r4, [r7, #12]
   14874:	441c      	add	r4, r3
   14876:	e06a      	b.n	1494e <pm_suspend_devices+0xfa>
			LOG_ERR("Device %s did not enter %s state (%d)",
   14878:	6826      	ldr	r6, [r4, #0]
   1487a:	2001      	movs	r0, #1
   1487c:	f000 f9e2 	bl	14c44 <pm_device_state_str>
   14880:	46e8      	mov	r8, sp
   14882:	2200      	movs	r2, #0
   14884:	723a      	strb	r2, [r7, #8]
   14886:	2202      	movs	r2, #2
   14888:	727a      	strb	r2, [r7, #9]
   1488a:	2201      	movs	r2, #1
   1488c:	72ba      	strb	r2, [r7, #10]
   1488e:	2203      	movs	r2, #3
   14890:	72fa      	strb	r2, [r7, #11]
   14892:	b08a      	sub	sp, #40	; 0x28
   14894:	466c      	mov	r4, sp
   14896:	f114 0210 	adds.w	r2, r4, #16
   1489a:	d021      	beq.n	148e0 <pm_suspend_devices+0x8c>
   1489c:	f04f 0c18 	mov.w	ip, #24
   148a0:	b122      	cbz	r2, 148ac <pm_suspend_devices+0x58>
   148a2:	f1bc 0f04 	cmp.w	ip, #4
   148a6:	dd01      	ble.n	148ac <pm_suspend_devices+0x58>
   148a8:	4945      	ldr	r1, [pc, #276]	; (149c0 <pm_suspend_devices+0x16c>)
   148aa:	6161      	str	r1, [r4, #20]
   148ac:	2100      	movs	r1, #0
   148ae:	7139      	strb	r1, [r7, #4]
   148b0:	2102      	movs	r1, #2
   148b2:	7179      	strb	r1, [r7, #5]
   148b4:	b11a      	cbz	r2, 148be <pm_suspend_devices+0x6a>
   148b6:	f1bc 0f08 	cmp.w	ip, #8
   148ba:	dd00      	ble.n	148be <pm_suspend_devices+0x6a>
   148bc:	61a6      	str	r6, [r4, #24]
   148be:	2101      	movs	r1, #1
   148c0:	71b9      	strb	r1, [r7, #6]
   148c2:	2103      	movs	r1, #3
   148c4:	71f9      	strb	r1, [r7, #7]
   148c6:	b1c2      	cbz	r2, 148fa <pm_suspend_devices+0xa6>
   148c8:	4661      	mov	r1, ip
   148ca:	f1bc 0f0c 	cmp.w	ip, #12
   148ce:	dd00      	ble.n	148d2 <pm_suspend_devices+0x7e>
   148d0:	61e0      	str	r0, [r4, #28]
   148d2:	2910      	cmp	r1, #16
   148d4:	dd00      	ble.n	148d8 <pm_suspend_devices+0x84>
   148d6:	6225      	str	r5, [r4, #32]
   148d8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   148dc:	2100      	movs	r1, #0
   148de:	e00a      	b.n	148f6 <pm_suspend_devices+0xa2>
   148e0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   148e4:	e7dc      	b.n	148a0 <pm_suspend_devices+0x4c>
   148e6:	f101 0010 	add.w	r0, r1, #16
   148ea:	4438      	add	r0, r7
   148ec:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
   148f0:	f803 0b01 	strb.w	r0, [r3], #1
   148f4:	3101      	adds	r1, #1
   148f6:	2903      	cmp	r1, #3
   148f8:	d9f5      	bls.n	148e6 <pm_suspend_devices+0x92>
   148fa:	f1bc 0f17 	cmp.w	ip, #23
   148fe:	dd22      	ble.n	14946 <pm_suspend_devices+0xf2>
   14900:	2318      	movs	r3, #24
   14902:	b142      	cbz	r2, 14916 <pm_suspend_devices+0xc2>
   14904:	2105      	movs	r1, #5
   14906:	7239      	strb	r1, [r7, #8]
   14908:	2100      	movs	r1, #0
   1490a:	7279      	strb	r1, [r7, #9]
   1490c:	72b9      	strb	r1, [r7, #10]
   1490e:	2102      	movs	r1, #2
   14910:	72f9      	strb	r1, [r7, #11]
   14912:	68b8      	ldr	r0, [r7, #8]
   14914:	6120      	str	r0, [r4, #16]
   14916:	2100      	movs	r1, #0
   14918:	f36f 0100 	bfc	r1, #0, #1
   1491c:	f36f 0141 	bfc	r1, #1, #1
   14920:	f36f 0182 	bfc	r1, #2, #1
   14924:	f36f 01c5 	bfc	r1, #3, #3
   14928:	2001      	movs	r0, #1
   1492a:	f360 1188 	bfi	r1, r0, #6, #3
   1492e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   14932:	f363 2153 	bfi	r1, r3, #9, #11
   14936:	f36f 511f 	bfc	r1, #20, #12
   1493a:	2300      	movs	r3, #0
   1493c:	4821      	ldr	r0, [pc, #132]	; (149c4 <pm_suspend_devices+0x170>)
   1493e:	f7ff fbdd 	bl	140fc <z_impl_z_log_msg_static_create>
   14942:	46c5      	mov	sp, r8
			return ret;
   14944:	e034      	b.n	149b0 <pm_suspend_devices+0x15c>
			LOG_ERR("Device %s did not enter %s state (%d)",
   14946:	f06f 031b 	mvn.w	r3, #27
   1494a:	e7da      	b.n	14902 <pm_suspend_devices+0xae>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   1494c:	3c1c      	subs	r4, #28
   1494e:	68fb      	ldr	r3, [r7, #12]
   14950:	429c      	cmp	r4, r3
   14952:	d32c      	bcc.n	149ae <pm_suspend_devices+0x15a>
   14954:	4620      	mov	r0, r4
   14956:	f01c f813 	bl	30980 <z_device_is_ready>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
   1495a:	2800      	cmp	r0, #0
   1495c:	d0f6      	beq.n	1494c <pm_suspend_devices+0xf8>
   1495e:	4620      	mov	r0, r4
   14960:	f017 f950 	bl	2bc04 <pm_device_is_busy>
   14964:	2800      	cmp	r0, #0
   14966:	d1f1      	bne.n	1494c <pm_suspend_devices+0xf8>
		    pm_device_state_is_locked(dev) ||
   14968:	4620      	mov	r0, r4
   1496a:	f017 f95f 	bl	2bc2c <pm_device_state_is_locked>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
   1496e:	2800      	cmp	r0, #0
   14970:	d1ec      	bne.n	1494c <pm_suspend_devices+0xf8>
		    pm_device_wakeup_is_enabled(dev) ||
   14972:	4620      	mov	r0, r4
   14974:	f017 f950 	bl	2bc18 <pm_device_wakeup_is_enabled>
		    pm_device_state_is_locked(dev) ||
   14978:	2800      	cmp	r0, #0
   1497a:	d1e7      	bne.n	1494c <pm_suspend_devices+0xf8>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   1497c:	2100      	movs	r1, #0
   1497e:	4620      	mov	r0, r4
   14980:	f000 f976 	bl	14c70 <pm_device_action_run>
   14984:	4605      	mov	r5, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   14986:	f110 0f58 	cmn.w	r0, #88	; 0x58
   1498a:	d0df      	beq.n	1494c <pm_suspend_devices+0xf8>
   1498c:	f110 0f86 	cmn.w	r0, #134	; 0x86
   14990:	d0dc      	beq.n	1494c <pm_suspend_devices+0xf8>
   14992:	f110 0f78 	cmn.w	r0, #120	; 0x78
   14996:	d0d9      	beq.n	1494c <pm_suspend_devices+0xf8>
		} else if (ret < 0) {
   14998:	2800      	cmp	r0, #0
   1499a:	f6ff af6d 	blt.w	14878 <pm_suspend_devices+0x24>
		__pm_device_slots_start[num_susp] = dev;
   1499e:	4a07      	ldr	r2, [pc, #28]	; (149bc <pm_suspend_devices+0x168>)
   149a0:	6813      	ldr	r3, [r2, #0]
   149a2:	4909      	ldr	r1, [pc, #36]	; (149c8 <pm_suspend_devices+0x174>)
   149a4:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		num_susp++;
   149a8:	3301      	adds	r3, #1
   149aa:	6013      	str	r3, [r2, #0]
   149ac:	e7ce      	b.n	1494c <pm_suspend_devices+0xf8>
	return 0;
   149ae:	2500      	movs	r5, #0
}
   149b0:	4628      	mov	r0, r5
   149b2:	3710      	adds	r7, #16
   149b4:	46bd      	mov	sp, r7
   149b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149ba:	bf00      	nop
   149bc:	20003738 	.word	0x20003738
   149c0:	0003280c 	.word	0x0003280c
   149c4:	00031d8c 	.word	0x00031d8c
   149c8:	20000914 	.word	0x20000914

000149cc <pm_system_resume>:

void pm_system_resume(void)
{
   149cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   149ce:	4b0e      	ldr	r3, [pc, #56]	; (14a08 <pm_system_resume+0x3c>)
   149d0:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   149d2:	4621      	mov	r1, r4
   149d4:	480d      	ldr	r0, [pc, #52]	; (14a0c <pm_system_resume+0x40>)
   149d6:	f017 f8ce 	bl	2bb76 <atomic_test_and_clear_bit>
   149da:	b900      	cbnz	r0, 149de <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   149dc:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   149de:	0065      	lsls	r5, r4, #1
   149e0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   149e4:	4e0a      	ldr	r6, [pc, #40]	; (14a10 <pm_system_resume+0x44>)
   149e6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   149ea:	f7ff ff0d 	bl	14808 <pm_exit_pos_ops>
		pm_state_notify(false);
   149ee:	2000      	movs	r0, #0
   149f0:	f7ff fedc 	bl	147ac <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   149f4:	192b      	adds	r3, r5, r4
   149f6:	0099      	lsls	r1, r3, #2
   149f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   149fc:	2200      	movs	r2, #0
   149fe:	5072      	str	r2, [r6, r1]
   14a00:	605a      	str	r2, [r3, #4]
   14a02:	609a      	str	r2, [r3, #8]
}
   14a04:	e7ea      	b.n	149dc <pm_system_resume+0x10>
   14a06:	bf00      	nop
   14a08:	2000522c 	.word	0x2000522c
   14a0c:	2000375c 	.word	0x2000375c
   14a10:	20003748 	.word	0x20003748

00014a14 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   14a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a16:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   14a18:	4b58      	ldr	r3, [pc, #352]	; (14b7c <pm_system_suspend+0x168>)
   14a1a:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
   14a1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14a20:	f3ef 8611 	mrs	r6, BASEPRI
   14a24:	f383 8812 	msr	BASEPRI_MAX, r3
   14a28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14a2c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14a30:	4b53      	ldr	r3, [pc, #332]	; (14b80 <pm_system_suspend+0x16c>)
   14a32:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   14a36:	2b00      	cmp	r3, #0
   14a38:	d05c      	beq.n	14af4 <pm_system_suspend+0xe0>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14a3a:	4b52      	ldr	r3, [pc, #328]	; (14b84 <pm_system_suspend+0x170>)
   14a3c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   14a40:	4f4f      	ldr	r7, [pc, #316]	; (14b80 <pm_system_suspend+0x16c>)
   14a42:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   14a46:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   14a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14a4e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14a52:	2300      	movs	r3, #0
   14a54:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   14a58:	f386 8811 	msr	BASEPRI, r6
   14a5c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14a60:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14a64:	4a47      	ldr	r2, [pc, #284]	; (14b84 <pm_system_suspend+0x170>)
   14a66:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	f000 8083 	beq.w	14b76 <pm_system_suspend+0x162>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14a70:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   14a74:	d14d      	bne.n	14b12 <pm_system_suspend+0xfe>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14a76:	4b44      	ldr	r3, [pc, #272]	; (14b88 <pm_system_suspend+0x174>)
   14a78:	f3bf 8f5b 	dmb	ish
   14a7c:	e853 2f00 	ldrex	r2, [r3]
   14a80:	3a01      	subs	r2, #1
   14a82:	e843 2100 	strex	r1, r2, [r3]
   14a86:	2900      	cmp	r1, #0
   14a88:	d1f8      	bne.n	14a7c <pm_system_suspend+0x68>
   14a8a:	f3bf 8f5b 	dmb	ish
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_sub(&z_cpus_active, 1) == 1) {
   14a8e:	b932      	cbnz	r2, 14a9e <pm_system_suspend+0x8a>
		if (z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) {
   14a90:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14a94:	4a3b      	ldr	r2, [pc, #236]	; (14b84 <pm_system_suspend+0x170>)
   14a96:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14a9a:	2b01      	cmp	r3, #1
   14a9c:	d14f      	bne.n	14b3e <pm_system_suspend+0x12a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14a9e:	f011 fe65 	bl	2676c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14aa2:	2001      	movs	r0, #1
   14aa4:	f7ff fe82 	bl	147ac <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   14aa8:	4621      	mov	r1, r4
   14aaa:	4838      	ldr	r0, [pc, #224]	; (14b8c <pm_system_suspend+0x178>)
   14aac:	f017 f87f 	bl	2bbae <atomic_set_bit>
	if (pm_state_set != NULL) {
   14ab0:	4b37      	ldr	r3, [pc, #220]	; (14b90 <pm_system_suspend+0x17c>)
   14ab2:	b15b      	cbz	r3, 14acc <pm_system_suspend+0xb8>
		pm_state_set(info->state, info->substate_id);
   14ab4:	4a33      	ldr	r2, [pc, #204]	; (14b84 <pm_system_suspend+0x170>)
   14ab6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14aba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14abe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   14ac2:	7859      	ldrb	r1, [r3, #1]
   14ac4:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   14ac8:	f017 fefc 	bl	2c8c4 <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14acc:	4b2e      	ldr	r3, [pc, #184]	; (14b88 <pm_system_suspend+0x174>)
   14ace:	f3bf 8f5b 	dmb	ish
   14ad2:	e853 2f00 	ldrex	r2, [r3]
   14ad6:	1c51      	adds	r1, r2, #1
   14ad8:	e843 1000 	strex	r0, r1, [r3]
   14adc:	2800      	cmp	r0, #0
   14ade:	d1f8      	bne.n	14ad2 <pm_system_suspend+0xbe>
   14ae0:	f3bf 8f5b 	dmb	ish
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
   14ae4:	2a00      	cmp	r2, #0
   14ae6:	d043      	beq.n	14b70 <pm_system_suspend+0x15c>
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14ae8:	f7ff ff70 	bl	149cc <pm_system_resume>
	k_sched_unlock();
   14aec:	f012 f82a 	bl	26b44 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   14af0:	2001      	movs	r0, #1
}
   14af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   14af4:	4601      	mov	r1, r0
   14af6:	4620      	mov	r0, r4
   14af8:	f000 f850 	bl	14b9c <pm_policy_next_state>
		if (info != NULL) {
   14afc:	2800      	cmp	r0, #0
   14afe:	d0ab      	beq.n	14a58 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   14b00:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   14b04:	4b1f      	ldr	r3, [pc, #124]	; (14b84 <pm_system_suspend+0x170>)
   14b06:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14b0a:	c807      	ldmia	r0, {r0, r1, r2}
   14b0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   14b10:	e7a2      	b.n	14a58 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   14b12:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14b16:	4b1b      	ldr	r3, [pc, #108]	; (14b84 <pm_system_suspend+0x170>)
   14b18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14b1c:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   14b1e:	0c41      	lsrs	r1, r0, #17
   14b20:	03c0      	lsls	r0, r0, #15
   14b22:	4b1c      	ldr	r3, [pc, #112]	; (14b94 <pm_system_suspend+0x180>)
   14b24:	18c0      	adds	r0, r0, r3
   14b26:	4a1c      	ldr	r2, [pc, #112]	; (14b98 <pm_system_suspend+0x184>)
   14b28:	f04f 0300 	mov.w	r3, #0
   14b2c:	f141 0100 	adc.w	r1, r1, #0
   14b30:	f7eb fae6 	bl	100 <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
   14b34:	2101      	movs	r1, #1
   14b36:	1a28      	subs	r0, r5, r0
   14b38:	f00e fb28 	bl	2318c <sys_clock_set_timeout>
   14b3c:	e79b      	b.n	14a76 <pm_system_suspend+0x62>
			if (pm_suspend_devices()) {
   14b3e:	f7ff fe89 	bl	14854 <pm_suspend_devices>
   14b42:	2800      	cmp	r0, #0
   14b44:	d0ab      	beq.n	14a9e <pm_system_suspend+0x8a>
				pm_resume_devices();
   14b46:	f7ff fe6f 	bl	14828 <pm_resume_devices>
				z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
   14b4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   14b4e:	00a4      	lsls	r4, r4, #2
   14b50:	2000      	movs	r0, #0
   14b52:	4b0c      	ldr	r3, [pc, #48]	; (14b84 <pm_system_suspend+0x170>)
   14b54:	5518      	strb	r0, [r3, r4]
   14b56:	4b0c      	ldr	r3, [pc, #48]	; (14b88 <pm_system_suspend+0x174>)
   14b58:	f3bf 8f5b 	dmb	ish
   14b5c:	e853 1f00 	ldrex	r1, [r3]
   14b60:	3101      	adds	r1, #1
   14b62:	e843 1200 	strex	r2, r1, [r3]
   14b66:	2a00      	cmp	r2, #0
   14b68:	d1f8      	bne.n	14b5c <pm_system_suspend+0x148>
   14b6a:	f3bf 8f5b 	dmb	ish
				return false;
   14b6e:	e7c0      	b.n	14af2 <pm_system_suspend+0xde>
		pm_resume_devices();
   14b70:	f7ff fe5a 	bl	14828 <pm_resume_devices>
   14b74:	e7b8      	b.n	14ae8 <pm_system_suspend+0xd4>
		return false;
   14b76:	2000      	movs	r0, #0
   14b78:	e7bb      	b.n	14af2 <pm_system_suspend+0xde>
   14b7a:	bf00      	nop
   14b7c:	2000522c 	.word	0x2000522c
   14b80:	2000373c 	.word	0x2000373c
   14b84:	20003748 	.word	0x20003748
   14b88:	200005f4 	.word	0x200005f4
   14b8c:	2000375c 	.word	0x2000375c
   14b90:	0002c8c5 	.word	0x0002c8c5
   14b94:	000f423f 	.word	0x000f423f
   14b98:	000f4240 	.word	0x000f4240

00014b9c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   14b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ba0:	b082      	sub	sp, #8
   14ba2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14ba4:	a901      	add	r1, sp, #4
   14ba6:	f000 f845 	bl	14c34 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14baa:	1e44      	subs	r4, r0, #1
   14bac:	b224      	sxth	r4, r4
   14bae:	e007      	b.n	14bc0 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   14bb0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   14bb4:	d033      	beq.n	14c1e <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   14bb6:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   14bb8:	45b0      	cmp	r8, r6
   14bba:	d930      	bls.n	14c1e <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14bbc:	3c01      	subs	r4, #1
   14bbe:	b224      	sxth	r4, r4
   14bc0:	2c00      	cmp	r4, #0
   14bc2:	db2b      	blt.n	14c1c <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   14bc4:	9b01      	ldr	r3, [sp, #4]
   14bc6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14bca:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   14bce:	7869      	ldrb	r1, [r5, #1]
   14bd0:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   14bd4:	f016 fffe 	bl	2bbd4 <pm_policy_state_lock_is_active>
   14bd8:	2800      	cmp	r0, #0
   14bda:	d1ef      	bne.n	14bbc <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   14bdc:	6868      	ldr	r0, [r5, #4]
   14bde:	0c41      	lsrs	r1, r0, #17
   14be0:	03c0      	lsls	r0, r0, #15
   14be2:	4f11      	ldr	r7, [pc, #68]	; (14c28 <pm_policy_next_state+0x8c>)
   14be4:	19c0      	adds	r0, r0, r7
   14be6:	4a11      	ldr	r2, [pc, #68]	; (14c2c <pm_policy_next_state+0x90>)
   14be8:	f04f 0300 	mov.w	r3, #0
   14bec:	f141 0100 	adc.w	r1, r1, #0
   14bf0:	f7eb fa86 	bl	100 <__aeabi_uldivmod>
   14bf4:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   14bf6:	68ab      	ldr	r3, [r5, #8]
   14bf8:	0c59      	lsrs	r1, r3, #17
   14bfa:	03db      	lsls	r3, r3, #15
   14bfc:	19d8      	adds	r0, r3, r7
   14bfe:	4a0b      	ldr	r2, [pc, #44]	; (14c2c <pm_policy_next_state+0x90>)
   14c00:	f04f 0300 	mov.w	r3, #0
   14c04:	f141 0100 	adc.w	r1, r1, #0
   14c08:	f7eb fa7a 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14c0c:	4b08      	ldr	r3, [pc, #32]	; (14c30 <pm_policy_next_state+0x94>)
   14c0e:	681b      	ldr	r3, [r3, #0]
   14c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14c14:	d0cc      	beq.n	14bb0 <pm_policy_next_state+0x14>
   14c16:	4283      	cmp	r3, r0
   14c18:	d8ca      	bhi.n	14bb0 <pm_policy_next_state+0x14>
   14c1a:	e7cf      	b.n	14bbc <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   14c1c:	2500      	movs	r5, #0
}
   14c1e:	4628      	mov	r0, r5
   14c20:	b002      	add	sp, #8
   14c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c26:	bf00      	nop
   14c28:	000f423f 	.word	0x000f423f
   14c2c:	000f4240 	.word	0x000f4240
   14c30:	200005f8 	.word	0x200005f8

00014c34 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14c34:	b908      	cbnz	r0, 14c3a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14c36:	4b02      	ldr	r3, [pc, #8]	; (14c40 <pm_state_cpu_get_all+0xc>)
   14c38:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14c3a:	2000      	movs	r0, #0
   14c3c:	4770      	bx	lr
   14c3e:	bf00      	nop
   14c40:	00032838 	.word	0x00032838

00014c44 <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
   14c44:	2801      	cmp	r0, #1
   14c46:	d006      	beq.n	14c56 <pm_device_state_str+0x12>
   14c48:	2803      	cmp	r0, #3
   14c4a:	d006      	beq.n	14c5a <pm_device_state_str+0x16>
   14c4c:	b108      	cbz	r0, 14c52 <pm_device_state_str+0xe>
	case PM_DEVICE_STATE_SUSPENDED:
		return "suspended";
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
   14c4e:	4804      	ldr	r0, [pc, #16]	; (14c60 <pm_device_state_str+0x1c>)
	}
}
   14c50:	4770      	bx	lr
	switch (state) {
   14c52:	4804      	ldr	r0, [pc, #16]	; (14c64 <pm_device_state_str+0x20>)
   14c54:	4770      	bx	lr
		return "suspended";
   14c56:	4804      	ldr	r0, [pc, #16]	; (14c68 <pm_device_state_str+0x24>)
   14c58:	4770      	bx	lr
		return "off";
   14c5a:	4804      	ldr	r0, [pc, #16]	; (14c6c <pm_device_state_str+0x28>)
   14c5c:	4770      	bx	lr
   14c5e:	bf00      	nop
   14c60:	00032680 	.word	0x00032680
   14c64:	00032838 	.word	0x00032838
   14c68:	00032840 	.word	0x00032840
   14c6c:	0003284c 	.word	0x0003284c

00014c70 <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
   14c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct pm_device *pm = dev->pm;
   14c72:	6987      	ldr	r7, [r0, #24]
	int ret;

	if (pm == NULL) {
   14c74:	2f00      	cmp	r7, #0
   14c76:	d03e      	beq.n	14cf6 <pm_device_action_run+0x86>
   14c78:	4605      	mov	r5, r0
   14c7a:	460c      	mov	r4, r1
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
   14c7c:	f016 ffd6 	bl	2bc2c <pm_device_state_is_locked>
   14c80:	2800      	cmp	r0, #0
   14c82:	d13b      	bne.n	14cfc <pm_device_action_run+0x8c>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
   14c84:	7a3b      	ldrb	r3, [r7, #8]
   14c86:	4a22      	ldr	r2, [pc, #136]	; (14d10 <pm_device_action_run+0xa0>)
   14c88:	5d16      	ldrb	r6, [r2, r4]
   14c8a:	42b3      	cmp	r3, r6
   14c8c:	d039      	beq.n	14d02 <pm_device_action_run+0x92>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
   14c8e:	4a21      	ldr	r2, [pc, #132]	; (14d14 <pm_device_action_run+0xa4>)
   14c90:	5d12      	ldrb	r2, [r2, r4]
   14c92:	4293      	cmp	r3, r2
   14c94:	d138      	bne.n	14d08 <pm_device_action_run+0x98>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
   14c96:	68fb      	ldr	r3, [r7, #12]
   14c98:	4621      	mov	r1, r4
   14c9a:	4628      	mov	r0, r5
   14c9c:	4798      	blx	r3
	if (ret < 0) {
   14c9e:	2800      	cmp	r0, #0
   14ca0:	db04      	blt.n	14cac <pm_device_action_run+0x3c>
			break;
		}
		return ret;
	}

	pm->state = action_target_state[action];
   14ca2:	723e      	strb	r6, [r7, #8]
	/* Power up failure flag is no longer relevant */
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
   14ca4:	2c02      	cmp	r4, #2
   14ca6:	d017      	beq.n	14cd8 <pm_device_action_run+0x68>
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
   14ca8:	2000      	movs	r0, #0
}
   14caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (action) {
   14cac:	2c02      	cmp	r4, #2
   14cae:	d011      	beq.n	14cd4 <pm_device_action_run+0x64>
   14cb0:	2c03      	cmp	r4, #3
   14cb2:	d1fa      	bne.n	14caa <pm_device_action_run+0x3a>
			if (ret != -ENOTSUP) {
   14cb4:	f110 0f86 	cmn.w	r0, #134	; 0x86
   14cb8:	d00c      	beq.n	14cd4 <pm_device_action_run+0x64>
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
   14cba:	1d3b      	adds	r3, r7, #4
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14cbc:	f3bf 8f5b 	dmb	ish
   14cc0:	e853 1f00 	ldrex	r1, [r3]
   14cc4:	f041 0102 	orr.w	r1, r1, #2
   14cc8:	e843 1200 	strex	r2, r1, [r3]
   14ccc:	2a00      	cmp	r2, #0
   14cce:	d1f7      	bne.n	14cc0 <pm_device_action_run+0x50>
   14cd0:	f3bf 8f5b 	dmb	ish
			pm->state = action_target_state[action];
   14cd4:	723e      	strb	r6, [r7, #8]
		return ret;
   14cd6:	e7e8      	b.n	14caa <pm_device_action_run+0x3a>
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
   14cd8:	1d3b      	adds	r3, r7, #4
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14cda:	f3bf 8f5b 	dmb	ish
   14cde:	e853 1f00 	ldrex	r1, [r3]
   14ce2:	f021 0102 	bic.w	r1, r1, #2
   14ce6:	e843 1200 	strex	r2, r1, [r3]
   14cea:	2a00      	cmp	r2, #0
   14cec:	d1f7      	bne.n	14cde <pm_device_action_run+0x6e>
   14cee:	f3bf 8f5b 	dmb	ish
	return 0;
   14cf2:	2000      	movs	r0, #0
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
}
   14cf4:	e7d9      	b.n	14caa <pm_device_action_run+0x3a>
		return -ENOSYS;
   14cf6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   14cfa:	e7d6      	b.n	14caa <pm_device_action_run+0x3a>
		return -EPERM;
   14cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d00:	e7d3      	b.n	14caa <pm_device_action_run+0x3a>
		return -EALREADY;
   14d02:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14d06:	e7d0      	b.n	14caa <pm_device_action_run+0x3a>
		return -ENOTSUP;
   14d08:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14d0c:	e7cd      	b.n	14caa <pm_device_action_run+0x3a>
   14d0e:	bf00      	nop
   14d10:	00032854 	.word	0x00032854
   14d14:	00032850 	.word	0x00032850

00014d18 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   14d18:	2807      	cmp	r0, #7
   14d1a:	d901      	bls.n	14d20 <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
   14d1c:	2000      	movs	r0, #0
}
   14d1e:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
   14d20:	4b02      	ldr	r3, [pc, #8]	; (14d2c <usb_set_alt_setting+0x14>)
   14d22:	4403      	add	r3, r0
   14d24:	f883 10bb 	strb.w	r1, [r3, #187]	; 0xbb
		return true;
   14d28:	2001      	movs	r0, #1
   14d2a:	4770      	bx	lr
   14d2c:	20003760 	.word	0x20003760

00014d30 <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   14d30:	2807      	cmp	r0, #7
   14d32:	d901      	bls.n	14d38 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
   14d34:	2000      	movs	r0, #0
}
   14d36:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
   14d38:	4b02      	ldr	r3, [pc, #8]	; (14d44 <usb_get_alt_setting+0x14>)
   14d3a:	4403      	add	r3, r0
   14d3c:	f893 00bb 	ldrb.w	r0, [r3, #187]	; 0xbb
   14d40:	4770      	bx	lr
   14d42:	bf00      	nop
   14d44:	20003760 	.word	0x20003760

00014d48 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   14d48:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
   14d4a:	7803      	ldrb	r3, [r0, #0]
   14d4c:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
   14d50:	330a      	adds	r3, #10
   14d52:	4c06      	ldr	r4, [pc, #24]	; (14d6c <usb_handle_request+0x24>)
   14d54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
   14d58:	b123      	cbz	r3, 14d64 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
   14d5a:	4798      	blx	r3
   14d5c:	2800      	cmp	r0, #0
   14d5e:	db03      	blt.n	14d68 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
   14d60:	2001      	movs	r0, #1
}
   14d62:	bd10      	pop	{r4, pc}
		return false;
   14d64:	2000      	movs	r0, #0
   14d66:	e7fc      	b.n	14d62 <usb_handle_request+0x1a>
		return false;
   14d68:	2000      	movs	r0, #0
   14d6a:	e7fa      	b.n	14d62 <usb_handle_request+0x1a>
   14d6c:	20003760 	.word	0x20003760

00014d70 <usb_register_request_handler>:
 * @param [in] handler    Callback function pointer
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
   14d70:	300a      	adds	r0, #10
   14d72:	4b02      	ldr	r3, [pc, #8]	; (14d7c <usb_register_request_handler+0xc>)
   14d74:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   14d78:	4770      	bx	lr
   14d7a:	bf00      	nop
   14d7c:	20003760 	.word	0x20003760

00014d80 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
   14d80:	4b01      	ldr	r3, [pc, #4]	; (14d88 <usb_register_descriptors+0x8>)
   14d82:	6258      	str	r0, [r3, #36]	; 0x24
}
   14d84:	4770      	bx	lr
   14d86:	bf00      	nop
   14d88:	20003760 	.word	0x20003760

00014d8c <usb_get_status>:

static bool usb_get_status(struct usb_setup_packet *setup,
			   int32_t *len, uint8_t **data_buf)
{
	uint8_t *data = *data_buf;
   14d8c:	6813      	ldr	r3, [r2, #0]

	LOG_DBG("Get Status request");
	data[0] = 0U;
   14d8e:	2200      	movs	r2, #0
   14d90:	701a      	strb	r2, [r3, #0]
	data[1] = 0U;
   14d92:	705a      	strb	r2, [r3, #1]

	if (IS_ENABLED(CONFIG_USB_SELF_POWERED)) {
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   14d94:	2201      	movs	r2, #1
   14d96:	701a      	strb	r2, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
		data[0] |= (usb_dev.remote_wakeup ?
   14d98:	4a06      	ldr	r2, [pc, #24]	; (14db4 <usb_get_status+0x28>)
   14d9a:	f892 20c3 	ldrb.w	r2, [r2, #195]	; 0xc3
   14d9e:	b13a      	cbz	r2, 14db0 <usb_get_status+0x24>
   14da0:	2202      	movs	r2, #2
   14da2:	f042 0201 	orr.w	r2, r2, #1
   14da6:	701a      	strb	r2, [r3, #0]
			    USB_GET_STATUS_REMOTE_WAKEUP : 0);
	}

	*len = 2;
   14da8:	2302      	movs	r3, #2
   14daa:	600b      	str	r3, [r1, #0]

	return true;
}
   14dac:	2001      	movs	r0, #1
   14dae:	4770      	bx	lr
		data[0] |= (usb_dev.remote_wakeup ?
   14db0:	2200      	movs	r2, #0
   14db2:	e7f6      	b.n	14da2 <usb_get_status+0x16>
   14db4:	20003760 	.word	0x20003760

00014db8 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   14db8:	b530      	push	{r4, r5, lr}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   14dba:	8845      	ldrh	r5, [r0, #2]
   14dbc:	ea4f 2e15 	mov.w	lr, r5, lsr #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   14dc0:	f1ae 0304 	sub.w	r3, lr, #4
   14dc4:	b2db      	uxtb	r3, r3
   14dc6:	2b01      	cmp	r3, #1
   14dc8:	d921      	bls.n	14e0e <usb_get_descriptor+0x56>
   14dca:	b2ed      	uxtb	r5, r5
   14dcc:	f1be 0f07 	cmp.w	lr, #7
   14dd0:	d81f      	bhi.n	14e12 <usb_get_descriptor+0x5a>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
   14dd2:	4b11      	ldr	r3, [pc, #68]	; (14e18 <usb_get_descriptor+0x60>)
   14dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
   14dd6:	2400      	movs	r4, #0

	while (p[DESC_bLength] != 0U) {
   14dd8:	e000      	b.n	14ddc <usb_get_descriptor+0x24>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
   14dda:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
   14ddc:	7818      	ldrb	r0, [r3, #0]
   14dde:	b140      	cbz	r0, 14df2 <usb_get_descriptor+0x3a>
		if (p[DESC_bDescriptorType] == type) {
   14de0:	f893 c001 	ldrb.w	ip, [r3, #1]
   14de4:	45f4      	cmp	ip, lr
   14de6:	d1f8      	bne.n	14dda <usb_get_descriptor+0x22>
			if (cur_index == index) {
   14de8:	42a5      	cmp	r5, r4
   14dea:	d001      	beq.n	14df0 <usb_get_descriptor+0x38>
			cur_index++;
   14dec:	3401      	adds	r4, #1
   14dee:	e7f4      	b.n	14dda <usb_get_descriptor+0x22>
				found = true;
   14df0:	2001      	movs	r0, #1
	}

	if (found) {
   14df2:	b168      	cbz	r0, 14e10 <usb_get_descriptor+0x58>
		/* set data pointer */
		*data = p;
   14df4:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
   14df6:	f1be 0f02 	cmp.w	lr, #2
   14dfa:	d002      	beq.n	14e02 <usb_get_descriptor+0x4a>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
   14dfc:	781b      	ldrb	r3, [r3, #0]
   14dfe:	600b      	str	r3, [r1, #0]
   14e00:	e006      	b.n	14e10 <usb_get_descriptor+0x58>
			*len = (p[CONF_DESC_wTotalLength]) |
   14e02:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
   14e04:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
   14e06:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   14e0a:	600b      	str	r3, [r1, #0]
   14e0c:	e000      	b.n	14e10 <usb_get_descriptor+0x58>
		return false;
   14e0e:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
   14e10:	bd30      	pop	{r4, r5, pc}
		return false;
   14e12:	2000      	movs	r0, #0
   14e14:	e7fc      	b.n	14e10 <usb_get_descriptor+0x58>
   14e16:	bf00      	nop
   14e18:	20003760 	.word	0x20003760

00014e1c <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
   14e1c:	b538      	push	{r3, r4, r5, lr}
   14e1e:	460c      	mov	r4, r1
	const uint8_t *p = usb_dev.descriptors;
   14e20:	4b0d      	ldr	r3, [pc, #52]	; (14e58 <usb_get_interface+0x3c>)
   14e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
   14e24:	6815      	ldr	r5, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
   14e26:	e000      	b.n	14e2a <usb_get_interface+0xe>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
   14e28:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   14e2a:	781a      	ldrb	r2, [r3, #0]
   14e2c:	b18a      	cbz	r2, 14e52 <usb_get_interface+0x36>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   14e2e:	f893 c001 	ldrb.w	ip, [r3, #1]
   14e32:	f1bc 0f04 	cmp.w	ip, #4
   14e36:	d1f7      	bne.n	14e28 <usb_get_interface+0xc>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   14e38:	f893 c002 	ldrb.w	ip, [r3, #2]
			if (cur_iface == setup->wIndex) {
   14e3c:	f8b0 e004 	ldrh.w	lr, [r0, #4]
   14e40:	45f4      	cmp	ip, lr
   14e42:	d1f1      	bne.n	14e28 <usb_get_interface+0xc>
				data[0] = usb_get_alt_setting(cur_iface);
   14e44:	4660      	mov	r0, ip
   14e46:	f7ff ff73 	bl	14d30 <usb_get_alt_setting>
   14e4a:	7028      	strb	r0, [r5, #0]
				*len = 1;
   14e4c:	2001      	movs	r0, #1
   14e4e:	6020      	str	r0, [r4, #0]
				return true;
   14e50:	e000      	b.n	14e54 <usb_get_interface+0x38>
	}

	return false;
   14e52:	2000      	movs	r0, #0
}
   14e54:	bd38      	pop	{r3, r4, r5, pc}
   14e56:	bf00      	nop
   14e58:	20003760 	.word	0x20003760

00014e5c <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
   14e5c:	4b03      	ldr	r3, [pc, #12]	; (14e6c <is_device_configured+0x10>)
   14e5e:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
   14e62:	3800      	subs	r0, #0
   14e64:	bf18      	it	ne
   14e66:	2001      	movne	r0, #1
   14e68:	4770      	bx	lr
   14e6a:	bf00      	nop
   14e6c:	20003760 	.word	0x20003760

00014e70 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   14e70:	4b07      	ldr	r3, [pc, #28]	; (14e90 <is_interface_valid+0x20>)
   14e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
   14e74:	e000      	b.n	14e78 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
   14e76:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   14e78:	781a      	ldrb	r2, [r3, #0]
   14e7a:	b13a      	cbz	r2, 14e8c <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   14e7c:	7859      	ldrb	r1, [r3, #1]
   14e7e:	2902      	cmp	r1, #2
   14e80:	d1f9      	bne.n	14e76 <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
   14e82:	7919      	ldrb	r1, [r3, #4]
   14e84:	4281      	cmp	r1, r0
   14e86:	d9f6      	bls.n	14e76 <is_interface_valid+0x6>
				return true;
   14e88:	2001      	movs	r0, #1
	}

	return false;
}
   14e8a:	4770      	bx	lr
	return false;
   14e8c:	2000      	movs	r0, #0
   14e8e:	4770      	bx	lr
   14e90:	20003760 	.word	0x20003760

00014e94 <is_ep_valid>:
static bool is_ep_valid(uint8_t ep)
{
	const struct usb_ep_cfg_data *ep_data;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
   14e94:	f030 0380 	bics.w	r3, r0, #128	; 0x80
   14e98:	d018      	beq.n	14ecc <is_ep_valid+0x38>
		return true;
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14e9a:	4910      	ldr	r1, [pc, #64]	; (14edc <is_ep_valid+0x48>)
   14e9c:	4b10      	ldr	r3, [pc, #64]	; (14ee0 <is_ep_valid+0x4c>)
   14e9e:	4299      	cmp	r1, r3
   14ea0:	d219      	bcs.n	14ed6 <is_ep_valid+0x42>
{
   14ea2:	b410      	push	{r4}
   14ea4:	e003      	b.n	14eae <is_ep_valid+0x1a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14ea6:	3124      	adds	r1, #36	; 0x24
   14ea8:	4b0d      	ldr	r3, [pc, #52]	; (14ee0 <is_ep_valid+0x4c>)
   14eaa:	4299      	cmp	r1, r3
   14eac:	d20c      	bcs.n	14ec8 <is_ep_valid+0x34>
		ep_data = cfg_data->endpoint;
   14eae:	6a0c      	ldr	r4, [r1, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   14eb0:	2300      	movs	r3, #0
   14eb2:	7f0a      	ldrb	r2, [r1, #28]
   14eb4:	429a      	cmp	r2, r3
   14eb6:	d9f6      	bls.n	14ea6 <is_ep_valid+0x12>
			if (ep_data[n].ep_addr == ep) {
   14eb8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   14ebc:	7912      	ldrb	r2, [r2, #4]
   14ebe:	4282      	cmp	r2, r0
   14ec0:	d006      	beq.n	14ed0 <is_ep_valid+0x3c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   14ec2:	3301      	adds	r3, #1
   14ec4:	b2db      	uxtb	r3, r3
   14ec6:	e7f4      	b.n	14eb2 <is_ep_valid+0x1e>
				return true;
			}
		}
	}

	return false;
   14ec8:	2000      	movs	r0, #0
   14eca:	e002      	b.n	14ed2 <is_ep_valid+0x3e>
		return true;
   14ecc:	2001      	movs	r0, #1
   14ece:	4770      	bx	lr
				return true;
   14ed0:	2001      	movs	r0, #1
}
   14ed2:	bc10      	pop	{r4}
   14ed4:	4770      	bx	lr
	return false;
   14ed6:	2000      	movs	r0, #0
}
   14ed8:	4770      	bx	lr
   14eda:	bf00      	nop
   14edc:	20000d30 	.word	0x20000d30
   14ee0:	20000d54 	.word	0x20000d54

00014ee4 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
   14ee4:	4b01      	ldr	r3, [pc, #4]	; (14eec <usb_register_custom_req_handler+0x8>)
   14ee6:	6198      	str	r0, [r3, #24]
}
   14ee8:	4770      	bx	lr
   14eea:	bf00      	nop
   14eec:	20003760 	.word	0x20003760

00014ef0 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
   14ef0:	4b01      	ldr	r3, [pc, #4]	; (14ef8 <usb_register_status_callback+0x8>)
   14ef2:	61d8      	str	r0, [r3, #28]
}
   14ef4:	4770      	bx	lr
   14ef6:	bf00      	nop
   14ef8:	20003760 	.word	0x20003760

00014efc <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
   14efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14efe:	4606      	mov	r6, r0
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14f00:	4d0a      	ldr	r5, [pc, #40]	; (14f2c <foreach_ep+0x30>)
   14f02:	4b0b      	ldr	r3, [pc, #44]	; (14f30 <foreach_ep+0x34>)
   14f04:	429d      	cmp	r5, r3
   14f06:	d20f      	bcs.n	14f28 <foreach_ep+0x2c>
		ep_data = cfg_data->endpoint;
   14f08:	6a2f      	ldr	r7, [r5, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   14f0a:	2400      	movs	r4, #0
   14f0c:	e001      	b.n	14f12 <foreach_ep+0x16>
   14f0e:	3401      	adds	r4, #1
   14f10:	b2e4      	uxtb	r4, r4
   14f12:	7f2b      	ldrb	r3, [r5, #28]
   14f14:	42a3      	cmp	r3, r4
   14f16:	d905      	bls.n	14f24 <foreach_ep+0x28>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
   14f18:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   14f1c:	47b0      	blx	r6
			if (ret < 0) {
   14f1e:	2800      	cmp	r0, #0
   14f20:	daf5      	bge.n	14f0e <foreach_ep+0x12>
			}
		}
	}

	return 0;
}
   14f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14f24:	3524      	adds	r5, #36	; 0x24
   14f26:	e7ec      	b.n	14f02 <foreach_ep+0x6>
	return 0;
   14f28:	2000      	movs	r0, #0
   14f2a:	e7fa      	b.n	14f22 <foreach_ep+0x26>
   14f2c:	20000d30 	.word	0x20000d30
   14f30:	20000d54 	.word	0x20000d54

00014f34 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   14f34:	b538      	push	{r3, r4, r5, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14f36:	4b0c      	ldr	r3, [pc, #48]	; (14f68 <class_handler+0x34>)
   14f38:	e000      	b.n	14f3c <class_handler+0x8>
   14f3a:	3324      	adds	r3, #36	; 0x24
   14f3c:	4c0b      	ldr	r4, [pc, #44]	; (14f6c <class_handler+0x38>)
   14f3e:	42a3      	cmp	r3, r4
   14f40:	d20e      	bcs.n	14f60 <class_handler+0x2c>
		iface = &cfg_data->interface;
		if_descr = cfg_data->interface_descriptor;
   14f42:	685c      	ldr	r4, [r3, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   14f44:	4d0a      	ldr	r5, [pc, #40]	; (14f70 <class_handler+0x3c>)
   14f46:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   14f48:	42ac      	cmp	r4, r5
   14f4a:	d3f6      	bcc.n	14f3a <class_handler+0x6>
			continue;
		}

		if (iface->class_handler &&
   14f4c:	691d      	ldr	r5, [r3, #16]
   14f4e:	2d00      	cmp	r5, #0
   14f50:	d0f3      	beq.n	14f3a <class_handler+0x6>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   14f52:	f894 c002 	ldrb.w	ip, [r4, #2]
   14f56:	7904      	ldrb	r4, [r0, #4]
		if (iface->class_handler &&
   14f58:	45a4      	cmp	ip, r4
   14f5a:	d1ee      	bne.n	14f3a <class_handler+0x6>
			return iface->class_handler(pSetup, len, data);
   14f5c:	47a8      	blx	r5
   14f5e:	e001      	b.n	14f64 <class_handler+0x30>
		}
	}

	return -ENOTSUP;
   14f60:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   14f64:	bd38      	pop	{r3, r4, r5, pc}
   14f66:	bf00      	nop
   14f68:	20000d30 	.word	0x20000d30
   14f6c:	20000d54 	.word	0x20000d54
   14f70:	20003760 	.word	0x20003760

00014f74 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   14f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f78:	4606      	mov	r6, r0
   14f7a:	460f      	mov	r7, r1
   14f7c:	4690      	mov	r8, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14f7e:	4c11      	ldr	r4, [pc, #68]	; (14fc4 <custom_handler+0x50>)
   14f80:	e005      	b.n	14f8e <custom_handler+0x1a>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
   14f82:	4642      	mov	r2, r8
   14f84:	4639      	mov	r1, r7
   14f86:	4630      	mov	r0, r6
   14f88:	47a8      	blx	r5
   14f8a:	e019      	b.n	14fc0 <custom_handler+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14f8c:	3424      	adds	r4, #36	; 0x24
   14f8e:	4b0e      	ldr	r3, [pc, #56]	; (14fc8 <custom_handler+0x54>)
   14f90:	429c      	cmp	r4, r3
   14f92:	d213      	bcs.n	14fbc <custom_handler+0x48>
		if_descr = cfg_data->interface_descriptor;
   14f94:	6863      	ldr	r3, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   14f96:	4d0d      	ldr	r5, [pc, #52]	; (14fcc <custom_handler+0x58>)
   14f98:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   14f9a:	42ab      	cmp	r3, r5
   14f9c:	d3f6      	bcc.n	14f8c <custom_handler+0x18>
		if (iface->custom_handler == NULL) {
   14f9e:	69a5      	ldr	r5, [r4, #24]
   14fa0:	2d00      	cmp	r5, #0
   14fa2:	d0f3      	beq.n	14f8c <custom_handler+0x18>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   14fa4:	7899      	ldrb	r1, [r3, #2]
   14fa6:	7932      	ldrb	r2, [r6, #4]
   14fa8:	4291      	cmp	r1, r2
   14faa:	d0ea      	beq.n	14f82 <custom_handler+0xe>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   14fac:	795b      	ldrb	r3, [r3, #5]
   14fae:	2b01      	cmp	r3, #1
   14fb0:	d1ec      	bne.n	14f8c <custom_handler+0x18>
				(void)iface->custom_handler(pSetup, len, data);
   14fb2:	4642      	mov	r2, r8
   14fb4:	4639      	mov	r1, r7
   14fb6:	4630      	mov	r0, r6
   14fb8:	47a8      	blx	r5
   14fba:	e7e7      	b.n	14f8c <custom_handler+0x18>
			}
		}
	}

	return -ENOTSUP;
   14fbc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   14fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14fc4:	20000d30 	.word	0x20000d30
   14fc8:	20000d54 	.word	0x20000d54
   14fcc:	20003760 	.word	0x20003760

00014fd0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   14fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14fd2:	4607      	mov	r7, r0
   14fd4:	460e      	mov	r6, r1
   14fd6:	4615      	mov	r5, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   14fd8:	4c0a      	ldr	r4, [pc, #40]	; (15004 <vendor_handler+0x34>)
   14fda:	e000      	b.n	14fde <vendor_handler+0xe>
   14fdc:	3424      	adds	r4, #36	; 0x24
   14fde:	4b0a      	ldr	r3, [pc, #40]	; (15008 <vendor_handler+0x38>)
   14fe0:	429c      	cmp	r4, r3
   14fe2:	d20a      	bcs.n	14ffa <vendor_handler+0x2a>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
   14fe4:	6963      	ldr	r3, [r4, #20]
   14fe6:	2b00      	cmp	r3, #0
   14fe8:	d0f8      	beq.n	14fdc <vendor_handler+0xc>
			if (!iface->vendor_handler(pSetup, len, data)) {
   14fea:	462a      	mov	r2, r5
   14fec:	4631      	mov	r1, r6
   14fee:	4638      	mov	r0, r7
   14ff0:	4798      	blx	r3
   14ff2:	4603      	mov	r3, r0
   14ff4:	2800      	cmp	r0, #0
   14ff6:	d1f1      	bne.n	14fdc <vendor_handler+0xc>
   14ff8:	e001      	b.n	14ffe <vendor_handler+0x2e>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   14ffa:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   14ffe:	4618      	mov	r0, r3
   15000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15002:	bf00      	nop
   15004:	20000d30 	.word	0x20000d30
   15008:	20000d54 	.word	0x20000d54

0001500c <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
   1500c:	f010 0f70 	tst.w	r0, #112	; 0x70
   15010:	d107      	bne.n	15022 <get_ep_bm_from_addr+0x16>
   15012:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
   15016:	f010 0f80 	tst.w	r0, #128	; 0x80
   1501a:	d144      	bne.n	150a6 <get_ep_bm_from_addr+0x9a>
		ep_bm = BIT(ep_idx);
   1501c:	2001      	movs	r0, #1
   1501e:	4098      	lsls	r0, r3
}
   15020:	4770      	bx	lr
{
   15022:	b5b0      	push	{r4, r5, r7, lr}
   15024:	b082      	sub	sp, #8
   15026:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
   15028:	466c      	mov	r4, sp
   1502a:	b088      	sub	sp, #32
   1502c:	466b      	mov	r3, sp
   1502e:	f113 0210 	adds.w	r2, r3, #16
   15032:	d032      	beq.n	1509a <get_ep_bm_from_addr+0x8e>
   15034:	210c      	movs	r1, #12
   15036:	b142      	cbz	r2, 1504a <get_ep_bm_from_addr+0x3e>
   15038:	468c      	mov	ip, r1
   1503a:	2904      	cmp	r1, #4
   1503c:	dd01      	ble.n	15042 <get_ep_bm_from_addr+0x36>
   1503e:	4d1c      	ldr	r5, [pc, #112]	; (150b0 <get_ep_bm_from_addr+0xa4>)
   15040:	615d      	str	r5, [r3, #20]
   15042:	f1bc 0f08 	cmp.w	ip, #8
   15046:	dd00      	ble.n	1504a <get_ep_bm_from_addr+0x3e>
   15048:	6198      	str	r0, [r3, #24]
   1504a:	290b      	cmp	r1, #11
   1504c:	dd28      	ble.n	150a0 <get_ep_bm_from_addr+0x94>
   1504e:	f04f 0c0c 	mov.w	ip, #12
   15052:	b13a      	cbz	r2, 15064 <get_ep_bm_from_addr+0x58>
   15054:	2103      	movs	r1, #3
   15056:	7139      	strb	r1, [r7, #4]
   15058:	2100      	movs	r1, #0
   1505a:	7179      	strb	r1, [r7, #5]
   1505c:	71b9      	strb	r1, [r7, #6]
   1505e:	71f9      	strb	r1, [r7, #7]
   15060:	6878      	ldr	r0, [r7, #4]
   15062:	6118      	str	r0, [r3, #16]
   15064:	2100      	movs	r1, #0
   15066:	f36f 0100 	bfc	r1, #0, #1
   1506a:	f36f 0141 	bfc	r1, #1, #1
   1506e:	f36f 0182 	bfc	r1, #2, #1
   15072:	f36f 01c5 	bfc	r1, #3, #3
   15076:	2301      	movs	r3, #1
   15078:	f363 1188 	bfi	r1, r3, #6, #3
   1507c:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   15080:	f36c 2153 	bfi	r1, ip, #9, #11
   15084:	f36f 511f 	bfc	r1, #20, #12
   15088:	2300      	movs	r3, #0
   1508a:	480a      	ldr	r0, [pc, #40]	; (150b4 <get_ep_bm_from_addr+0xa8>)
   1508c:	f7ff f836 	bl	140fc <z_impl_z_log_msg_static_create>
   15090:	46a5      	mov	sp, r4
	uint32_t ep_bm = 0;
   15092:	2000      	movs	r0, #0
}
   15094:	3708      	adds	r7, #8
   15096:	46bd      	mov	sp, r7
   15098:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
   1509a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1509e:	e7ca      	b.n	15036 <get_ep_bm_from_addr+0x2a>
   150a0:	f06f 0c1b 	mvn.w	ip, #27
   150a4:	e7d5      	b.n	15052 <get_ep_bm_from_addr+0x46>
		ep_bm = BIT(ep_idx + 16);
   150a6:	3310      	adds	r3, #16
   150a8:	2001      	movs	r0, #1
   150aa:	4098      	lsls	r0, r3
   150ac:	4770      	bx	lr
   150ae:	bf00      	nop
   150b0:	00032864 	.word	0x00032864
   150b4:	00031dd4 	.word	0x00031dd4

000150b8 <disable_interface_ep>:
{
   150b8:	b538      	push	{r3, r4, r5, lr}
   150ba:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_data->ep_addr);
   150bc:	7900      	ldrb	r0, [r0, #4]
   150be:	f01a f881 	bl	2f1c4 <usb_dc_ep_disable>
   150c2:	4605      	mov	r5, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
   150c4:	7920      	ldrb	r0, [r4, #4]
   150c6:	f7ff ffa1 	bl	1500c <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   150ca:	4a04      	ldr	r2, [pc, #16]	; (150dc <disable_interface_ep+0x24>)
   150cc:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   150d0:	ea23 0300 	bic.w	r3, r3, r0
   150d4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
}
   150d8:	4628      	mov	r0, r5
   150da:	bd38      	pop	{r3, r4, r5, pc}
   150dc:	20003760 	.word	0x20003760

000150e0 <disable_endpoint>:
{
   150e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   150e2:	b083      	sub	sp, #12
   150e4:	af00      	add	r7, sp, #0
   150e6:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
   150e8:	f01a f86c 	bl	2f1c4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   150ec:	f110 0f78 	cmn.w	r0, #120	; 0x78
   150f0:	d011      	beq.n	15116 <disable_endpoint+0x36>
   150f2:	4604      	mov	r4, r0
	} else if (ret) {
   150f4:	2800      	cmp	r0, #0
   150f6:	d148      	bne.n	1518a <disable_endpoint+0xaa>
	ep_bm = get_ep_bm_from_addr(ep_addr);
   150f8:	4628      	mov	r0, r5
   150fa:	f7ff ff87 	bl	1500c <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   150fe:	4a41      	ldr	r2, [pc, #260]	; (15204 <disable_endpoint+0x124>)
   15100:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   15104:	ea23 0300 	bic.w	r3, r3, r0
   15108:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
   1510c:	2400      	movs	r4, #0
}
   1510e:	4620      	mov	r0, r4
   15110:	370c      	adds	r7, #12
   15112:	46bd      	mov	sp, r7
   15114:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Endpoint 0x%02x already disabled", ep_addr);
   15116:	466e      	mov	r6, sp
   15118:	b088      	sub	sp, #32
   1511a:	466b      	mov	r3, sp
   1511c:	f113 0210 	adds.w	r2, r3, #16
   15120:	d02d      	beq.n	1517e <disable_endpoint+0x9e>
   15122:	210c      	movs	r1, #12
   15124:	b13a      	cbz	r2, 15136 <disable_endpoint+0x56>
   15126:	4608      	mov	r0, r1
   15128:	2904      	cmp	r1, #4
   1512a:	dd01      	ble.n	15130 <disable_endpoint+0x50>
   1512c:	4c36      	ldr	r4, [pc, #216]	; (15208 <disable_endpoint+0x128>)
   1512e:	615c      	str	r4, [r3, #20]
   15130:	2808      	cmp	r0, #8
   15132:	dd00      	ble.n	15136 <disable_endpoint+0x56>
   15134:	619d      	str	r5, [r3, #24]
   15136:	290b      	cmp	r1, #11
   15138:	dd24      	ble.n	15184 <disable_endpoint+0xa4>
   1513a:	240c      	movs	r4, #12
   1513c:	b13a      	cbz	r2, 1514e <disable_endpoint+0x6e>
   1513e:	2103      	movs	r1, #3
   15140:	7139      	strb	r1, [r7, #4]
   15142:	2100      	movs	r1, #0
   15144:	7179      	strb	r1, [r7, #5]
   15146:	71b9      	strb	r1, [r7, #6]
   15148:	71f9      	strb	r1, [r7, #7]
   1514a:	6878      	ldr	r0, [r7, #4]
   1514c:	6118      	str	r0, [r3, #16]
   1514e:	2100      	movs	r1, #0
   15150:	f36f 0100 	bfc	r1, #0, #1
   15154:	f36f 0141 	bfc	r1, #1, #1
   15158:	f36f 0182 	bfc	r1, #2, #1
   1515c:	f36f 01c5 	bfc	r1, #3, #3
   15160:	2302      	movs	r3, #2
   15162:	f363 1188 	bfi	r1, r3, #6, #3
   15166:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1516a:	f364 2153 	bfi	r1, r4, #9, #11
   1516e:	f36f 511f 	bfc	r1, #20, #12
   15172:	2300      	movs	r3, #0
   15174:	4825      	ldr	r0, [pc, #148]	; (1520c <disable_endpoint+0x12c>)
   15176:	f7fe ffc1 	bl	140fc <z_impl_z_log_msg_static_create>
   1517a:	46b5      	mov	sp, r6
   1517c:	e7bc      	b.n	150f8 <disable_endpoint+0x18>
   1517e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15182:	e7cf      	b.n	15124 <disable_endpoint+0x44>
   15184:	f06f 041b 	mvn.w	r4, #27
   15188:	e7d8      	b.n	1513c <disable_endpoint+0x5c>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
   1518a:	466e      	mov	r6, sp
   1518c:	b088      	sub	sp, #32
   1518e:	466b      	mov	r3, sp
   15190:	f113 0210 	adds.w	r2, r3, #16
   15194:	d02f      	beq.n	151f6 <disable_endpoint+0x116>
   15196:	210c      	movs	r1, #12
   15198:	b14a      	cbz	r2, 151ae <disable_endpoint+0xce>
   1519a:	4608      	mov	r0, r1
   1519c:	2904      	cmp	r1, #4
   1519e:	dd03      	ble.n	151a8 <disable_endpoint+0xc8>
   151a0:	f8df c06c 	ldr.w	ip, [pc, #108]	; 15210 <disable_endpoint+0x130>
   151a4:	f8c3 c014 	str.w	ip, [r3, #20]
   151a8:	2808      	cmp	r0, #8
   151aa:	dd00      	ble.n	151ae <disable_endpoint+0xce>
   151ac:	619d      	str	r5, [r3, #24]
   151ae:	290b      	cmp	r1, #11
   151b0:	dd24      	ble.n	151fc <disable_endpoint+0x11c>
   151b2:	250c      	movs	r5, #12
   151b4:	b13a      	cbz	r2, 151c6 <disable_endpoint+0xe6>
   151b6:	2103      	movs	r1, #3
   151b8:	7139      	strb	r1, [r7, #4]
   151ba:	2100      	movs	r1, #0
   151bc:	7179      	strb	r1, [r7, #5]
   151be:	71b9      	strb	r1, [r7, #6]
   151c0:	71f9      	strb	r1, [r7, #7]
   151c2:	6878      	ldr	r0, [r7, #4]
   151c4:	6118      	str	r0, [r3, #16]
   151c6:	2100      	movs	r1, #0
   151c8:	f36f 0100 	bfc	r1, #0, #1
   151cc:	f36f 0141 	bfc	r1, #1, #1
   151d0:	f36f 0182 	bfc	r1, #2, #1
   151d4:	f36f 01c5 	bfc	r1, #3, #3
   151d8:	2301      	movs	r3, #1
   151da:	f363 1188 	bfi	r1, r3, #6, #3
   151de:	f3c5 050a 	ubfx	r5, r5, #0, #11
   151e2:	f365 2153 	bfi	r1, r5, #9, #11
   151e6:	f36f 511f 	bfc	r1, #20, #12
   151ea:	2300      	movs	r3, #0
   151ec:	4807      	ldr	r0, [pc, #28]	; (1520c <disable_endpoint+0x12c>)
   151ee:	f7fe ff85 	bl	140fc <z_impl_z_log_msg_static_create>
   151f2:	46b5      	mov	sp, r6
		return ret;
   151f4:	e78b      	b.n	1510e <disable_endpoint+0x2e>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
   151f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   151fa:	e7cd      	b.n	15198 <disable_endpoint+0xb8>
   151fc:	f06f 051b 	mvn.w	r5, #27
   15200:	e7d8      	b.n	151b4 <disable_endpoint+0xd4>
   15202:	bf00      	nop
   15204:	20003760 	.word	0x20003760
   15208:	00032880 	.word	0x00032880
   1520c:	00031dd4 	.word	0x00031dd4
   15210:	000328a4 	.word	0x000328a4

00015214 <usb_halt_endpoint_req>:
{
   15214:	b5f0      	push	{r4, r5, r6, r7, lr}
   15216:	b083      	sub	sp, #12
   15218:	af00      	add	r7, sp, #0
   1521a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   1521c:	7904      	ldrb	r4, [r0, #4]
   1521e:	71fc      	strb	r4, [r7, #7]
	if (!is_ep_valid(ep)) {
   15220:	4620      	mov	r0, r4
   15222:	f7ff fe37 	bl	14e94 <is_ep_valid>
   15226:	4606      	mov	r6, r0
   15228:	b130      	cbz	r0, 15238 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   1522a:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   1522e:	d007      	beq.n	15240 <usb_halt_endpoint_req+0x2c>
   15230:	f7ff fe14 	bl	14e5c <is_device_configured>
   15234:	b920      	cbnz	r0, 15240 <usb_halt_endpoint_req+0x2c>
	return false;
   15236:	4606      	mov	r6, r0
}
   15238:	4630      	mov	r0, r6
   1523a:	370c      	adds	r7, #12
   1523c:	46bd      	mov	sp, r7
   1523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (halt) {
   15240:	2d00      	cmp	r5, #0
   15242:	d045      	beq.n	152d0 <usb_halt_endpoint_req+0xbc>
			LOG_INF("Set halt ep 0x%02x", ep);
   15244:	466d      	mov	r5, sp
   15246:	b088      	sub	sp, #32
   15248:	466b      	mov	r3, sp
   1524a:	f113 0210 	adds.w	r2, r3, #16
   1524e:	d039      	beq.n	152c4 <usb_halt_endpoint_req+0xb0>
   15250:	210c      	movs	r1, #12
   15252:	b14a      	cbz	r2, 15268 <usb_halt_endpoint_req+0x54>
   15254:	4608      	mov	r0, r1
   15256:	2904      	cmp	r1, #4
   15258:	dd03      	ble.n	15262 <usb_halt_endpoint_req+0x4e>
   1525a:	f8df c104 	ldr.w	ip, [pc, #260]	; 15360 <usb_halt_endpoint_req+0x14c>
   1525e:	f8c3 c014 	str.w	ip, [r3, #20]
   15262:	2808      	cmp	r0, #8
   15264:	dd00      	ble.n	15268 <usb_halt_endpoint_req+0x54>
   15266:	619c      	str	r4, [r3, #24]
   15268:	290b      	cmp	r1, #11
   1526a:	dd2e      	ble.n	152ca <usb_halt_endpoint_req+0xb6>
   1526c:	240c      	movs	r4, #12
   1526e:	b13a      	cbz	r2, 15280 <usb_halt_endpoint_req+0x6c>
   15270:	2103      	movs	r1, #3
   15272:	7039      	strb	r1, [r7, #0]
   15274:	2100      	movs	r1, #0
   15276:	7079      	strb	r1, [r7, #1]
   15278:	70b9      	strb	r1, [r7, #2]
   1527a:	70f9      	strb	r1, [r7, #3]
   1527c:	6838      	ldr	r0, [r7, #0]
   1527e:	6118      	str	r0, [r3, #16]
   15280:	2100      	movs	r1, #0
   15282:	f36f 0100 	bfc	r1, #0, #1
   15286:	f36f 0141 	bfc	r1, #1, #1
   1528a:	f36f 0182 	bfc	r1, #2, #1
   1528e:	f36f 01c5 	bfc	r1, #3, #3
   15292:	2303      	movs	r3, #3
   15294:	f363 1188 	bfi	r1, r3, #6, #3
   15298:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1529c:	f364 2153 	bfi	r1, r4, #9, #11
   152a0:	f36f 511f 	bfc	r1, #20, #12
   152a4:	2300      	movs	r3, #0
   152a6:	482f      	ldr	r0, [pc, #188]	; (15364 <usb_halt_endpoint_req+0x150>)
   152a8:	f7fe ff28 	bl	140fc <z_impl_z_log_msg_static_create>
   152ac:	46ad      	mov	sp, r5
			usb_dc_ep_set_stall(ep);
   152ae:	79f8      	ldrb	r0, [r7, #7]
   152b0:	f00c fd36 	bl	21d20 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   152b4:	4b2c      	ldr	r3, [pc, #176]	; (15368 <usb_halt_endpoint_req+0x154>)
   152b6:	69db      	ldr	r3, [r3, #28]
   152b8:	2b00      	cmp	r3, #0
   152ba:	d0bd      	beq.n	15238 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   152bc:	1df9      	adds	r1, r7, #7
   152be:	2008      	movs	r0, #8
   152c0:	4798      	blx	r3
   152c2:	e7b9      	b.n	15238 <usb_halt_endpoint_req+0x24>
			LOG_INF("Set halt ep 0x%02x", ep);
   152c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   152c8:	e7c3      	b.n	15252 <usb_halt_endpoint_req+0x3e>
   152ca:	f06f 041b 	mvn.w	r4, #27
   152ce:	e7ce      	b.n	1526e <usb_halt_endpoint_req+0x5a>
			LOG_INF("Clear halt ep 0x%02x", ep);
   152d0:	466d      	mov	r5, sp
   152d2:	b088      	sub	sp, #32
   152d4:	466b      	mov	r3, sp
   152d6:	f113 0210 	adds.w	r2, r3, #16
   152da:	d03a      	beq.n	15352 <usb_halt_endpoint_req+0x13e>
   152dc:	210c      	movs	r1, #12
   152de:	b14a      	cbz	r2, 152f4 <usb_halt_endpoint_req+0xe0>
   152e0:	4608      	mov	r0, r1
   152e2:	2904      	cmp	r1, #4
   152e4:	dd03      	ble.n	152ee <usb_halt_endpoint_req+0xda>
   152e6:	f8df c084 	ldr.w	ip, [pc, #132]	; 1536c <usb_halt_endpoint_req+0x158>
   152ea:	f8c3 c014 	str.w	ip, [r3, #20]
   152ee:	2808      	cmp	r0, #8
   152f0:	dd00      	ble.n	152f4 <usb_halt_endpoint_req+0xe0>
   152f2:	619c      	str	r4, [r3, #24]
   152f4:	290b      	cmp	r1, #11
   152f6:	dd2f      	ble.n	15358 <usb_halt_endpoint_req+0x144>
   152f8:	240c      	movs	r4, #12
   152fa:	b13a      	cbz	r2, 1530c <usb_halt_endpoint_req+0xf8>
   152fc:	2103      	movs	r1, #3
   152fe:	7039      	strb	r1, [r7, #0]
   15300:	2100      	movs	r1, #0
   15302:	7079      	strb	r1, [r7, #1]
   15304:	70b9      	strb	r1, [r7, #2]
   15306:	70f9      	strb	r1, [r7, #3]
   15308:	6838      	ldr	r0, [r7, #0]
   1530a:	6118      	str	r0, [r3, #16]
   1530c:	2100      	movs	r1, #0
   1530e:	f36f 0100 	bfc	r1, #0, #1
   15312:	f36f 0141 	bfc	r1, #1, #1
   15316:	f36f 0182 	bfc	r1, #2, #1
   1531a:	f36f 01c5 	bfc	r1, #3, #3
   1531e:	2303      	movs	r3, #3
   15320:	f363 1188 	bfi	r1, r3, #6, #3
   15324:	f3c4 040a 	ubfx	r4, r4, #0, #11
   15328:	f364 2153 	bfi	r1, r4, #9, #11
   1532c:	f36f 511f 	bfc	r1, #20, #12
   15330:	2300      	movs	r3, #0
   15332:	480c      	ldr	r0, [pc, #48]	; (15364 <usb_halt_endpoint_req+0x150>)
   15334:	f7fe fee2 	bl	140fc <z_impl_z_log_msg_static_create>
   15338:	46ad      	mov	sp, r5
			usb_dc_ep_clear_stall(ep);
   1533a:	79f8      	ldrb	r0, [r7, #7]
   1533c:	f00c fd4c 	bl	21dd8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   15340:	4b09      	ldr	r3, [pc, #36]	; (15368 <usb_halt_endpoint_req+0x154>)
   15342:	69db      	ldr	r3, [r3, #28]
   15344:	2b00      	cmp	r3, #0
   15346:	f43f af77 	beq.w	15238 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   1534a:	1df9      	adds	r1, r7, #7
   1534c:	2009      	movs	r0, #9
   1534e:	4798      	blx	r3
		return true;
   15350:	e772      	b.n	15238 <usb_halt_endpoint_req+0x24>
			LOG_INF("Clear halt ep 0x%02x", ep);
   15352:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15356:	e7c2      	b.n	152de <usb_halt_endpoint_req+0xca>
   15358:	f06f 041b 	mvn.w	r4, #27
   1535c:	e7cd      	b.n	152fa <usb_halt_endpoint_req+0xe6>
   1535e:	bf00      	nop
   15360:	000328c8 	.word	0x000328c8
   15364:	00031dd4 	.word	0x00031dd4
   15368:	20003760 	.word	0x20003760
   1536c:	000328dc 	.word	0x000328dc

00015370 <set_endpoint>:
{
   15370:	b5f0      	push	{r4, r5, r6, r7, lr}
   15372:	b085      	sub	sp, #20
   15374:	af00      	add	r7, sp, #0
   15376:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   15378:	7880      	ldrb	r0, [r0, #2]
   1537a:	7238      	strb	r0, [r7, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   1537c:	88a3      	ldrh	r3, [r4, #4]
   1537e:	817b      	strh	r3, [r7, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   15380:	78e3      	ldrb	r3, [r4, #3]
   15382:	f003 0303 	and.w	r3, r3, #3
   15386:	733b      	strb	r3, [r7, #12]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   15388:	f7ff fe40 	bl	1500c <get_ep_bm_from_addr>
   1538c:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
   1538e:	4b90      	ldr	r3, [pc, #576]	; (155d0 <set_endpoint+0x260>)
   15390:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   15394:	4203      	tst	r3, r0
   15396:	d11e      	bne.n	153d6 <set_endpoint+0x66>
	ret = usb_dc_ep_configure(&ep_cfg);
   15398:	f107 0008 	add.w	r0, r7, #8
   1539c:	f00c fc6c 	bl	21c78 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   153a0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   153a4:	d022      	beq.n	153ec <set_endpoint+0x7c>
	} else if (ret) {
   153a6:	2800      	cmp	r0, #0
   153a8:	d15d      	bne.n	15466 <set_endpoint+0xf6>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   153aa:	7a38      	ldrb	r0, [r7, #8]
   153ac:	f00c fd5e 	bl	21e6c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   153b0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   153b4:	f000 8093 	beq.w	154de <set_endpoint+0x16e>
	} else if (ret) {
   153b8:	2800      	cmp	r0, #0
   153ba:	f040 80cd 	bne.w	15558 <set_endpoint+0x1e8>
	usb_dev.configured = true;
   153be:	4b84      	ldr	r3, [pc, #528]	; (155d0 <set_endpoint+0x260>)
   153c0:	2001      	movs	r0, #1
   153c2:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
   153c6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   153ca:	4315      	orrs	r5, r2
   153cc:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
}
   153d0:	3714      	adds	r7, #20
   153d2:	46bd      	mov	sp, r7
   153d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reset_endpoint(ep_desc);
   153d6:	4620      	mov	r0, r4
   153d8:	f016 fc34 	bl	2bc44 <reset_endpoint>
		if (!k_is_in_isr()) {
   153dc:	f01b fbca 	bl	30b74 <k_is_in_isr>
   153e0:	2800      	cmp	r0, #0
   153e2:	d1d9      	bne.n	15398 <set_endpoint+0x28>
	return z_impl_k_usleep(us);
   153e4:	2096      	movs	r0, #150	; 0x96
   153e6:	f011 fcc3 	bl	26d70 <z_impl_k_usleep>
   153ea:	e7d5      	b.n	15398 <set_endpoint+0x28>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
   153ec:	7a3c      	ldrb	r4, [r7, #8]
   153ee:	466e      	mov	r6, sp
   153f0:	b088      	sub	sp, #32
   153f2:	466b      	mov	r3, sp
   153f4:	f113 0210 	adds.w	r2, r3, #16
   153f8:	d02f      	beq.n	1545a <set_endpoint+0xea>
   153fa:	210c      	movs	r1, #12
   153fc:	b14a      	cbz	r2, 15412 <set_endpoint+0xa2>
   153fe:	4608      	mov	r0, r1
   15400:	2904      	cmp	r1, #4
   15402:	dd03      	ble.n	1540c <set_endpoint+0x9c>
   15404:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 155d4 <set_endpoint+0x264>
   15408:	f8c3 c014 	str.w	ip, [r3, #20]
   1540c:	2808      	cmp	r0, #8
   1540e:	dd00      	ble.n	15412 <set_endpoint+0xa2>
   15410:	619c      	str	r4, [r3, #24]
   15412:	290b      	cmp	r1, #11
   15414:	dd24      	ble.n	15460 <set_endpoint+0xf0>
   15416:	240c      	movs	r4, #12
   15418:	b13a      	cbz	r2, 1542a <set_endpoint+0xba>
   1541a:	2103      	movs	r1, #3
   1541c:	7139      	strb	r1, [r7, #4]
   1541e:	2100      	movs	r1, #0
   15420:	7179      	strb	r1, [r7, #5]
   15422:	71b9      	strb	r1, [r7, #6]
   15424:	71f9      	strb	r1, [r7, #7]
   15426:	6878      	ldr	r0, [r7, #4]
   15428:	6118      	str	r0, [r3, #16]
   1542a:	2100      	movs	r1, #0
   1542c:	f36f 0100 	bfc	r1, #0, #1
   15430:	f36f 0141 	bfc	r1, #1, #1
   15434:	f36f 0182 	bfc	r1, #2, #1
   15438:	f36f 01c5 	bfc	r1, #3, #3
   1543c:	2302      	movs	r3, #2
   1543e:	f363 1188 	bfi	r1, r3, #6, #3
   15442:	f3c4 040a 	ubfx	r4, r4, #0, #11
   15446:	f364 2153 	bfi	r1, r4, #9, #11
   1544a:	f36f 511f 	bfc	r1, #20, #12
   1544e:	2300      	movs	r3, #0
   15450:	4861      	ldr	r0, [pc, #388]	; (155d8 <set_endpoint+0x268>)
   15452:	f7fe fe53 	bl	140fc <z_impl_z_log_msg_static_create>
   15456:	46b5      	mov	sp, r6
   15458:	e7a7      	b.n	153aa <set_endpoint+0x3a>
   1545a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1545e:	e7cd      	b.n	153fc <set_endpoint+0x8c>
   15460:	f06f 041b 	mvn.w	r4, #27
   15464:	e7d8      	b.n	15418 <set_endpoint+0xa8>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
   15466:	7a3c      	ldrb	r4, [r7, #8]
   15468:	466d      	mov	r5, sp
   1546a:	b088      	sub	sp, #32
   1546c:	466b      	mov	r3, sp
   1546e:	f113 0210 	adds.w	r2, r3, #16
   15472:	d02e      	beq.n	154d2 <set_endpoint+0x162>
   15474:	210c      	movs	r1, #12
   15476:	b13a      	cbz	r2, 15488 <set_endpoint+0x118>
   15478:	4608      	mov	r0, r1
   1547a:	2904      	cmp	r1, #4
   1547c:	dd01      	ble.n	15482 <set_endpoint+0x112>
   1547e:	4e57      	ldr	r6, [pc, #348]	; (155dc <set_endpoint+0x26c>)
   15480:	615e      	str	r6, [r3, #20]
   15482:	2808      	cmp	r0, #8
   15484:	dd00      	ble.n	15488 <set_endpoint+0x118>
   15486:	619c      	str	r4, [r3, #24]
   15488:	290b      	cmp	r1, #11
   1548a:	dd25      	ble.n	154d8 <set_endpoint+0x168>
   1548c:	240c      	movs	r4, #12
   1548e:	b13a      	cbz	r2, 154a0 <set_endpoint+0x130>
   15490:	2103      	movs	r1, #3
   15492:	7139      	strb	r1, [r7, #4]
   15494:	2100      	movs	r1, #0
   15496:	7179      	strb	r1, [r7, #5]
   15498:	71b9      	strb	r1, [r7, #6]
   1549a:	71f9      	strb	r1, [r7, #7]
   1549c:	6878      	ldr	r0, [r7, #4]
   1549e:	6118      	str	r0, [r3, #16]
   154a0:	2100      	movs	r1, #0
   154a2:	f36f 0100 	bfc	r1, #0, #1
   154a6:	f36f 0141 	bfc	r1, #1, #1
   154aa:	f36f 0182 	bfc	r1, #2, #1
   154ae:	f36f 01c5 	bfc	r1, #3, #3
   154b2:	2301      	movs	r3, #1
   154b4:	f363 1188 	bfi	r1, r3, #6, #3
   154b8:	f3c4 040a 	ubfx	r4, r4, #0, #11
   154bc:	f364 2153 	bfi	r1, r4, #9, #11
   154c0:	f36f 511f 	bfc	r1, #20, #12
   154c4:	2300      	movs	r3, #0
   154c6:	4844      	ldr	r0, [pc, #272]	; (155d8 <set_endpoint+0x268>)
   154c8:	f7fe fe18 	bl	140fc <z_impl_z_log_msg_static_create>
   154cc:	46ad      	mov	sp, r5
		return false;
   154ce:	2000      	movs	r0, #0
   154d0:	e77e      	b.n	153d0 <set_endpoint+0x60>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
   154d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   154d6:	e7ce      	b.n	15476 <set_endpoint+0x106>
   154d8:	f06f 041b 	mvn.w	r4, #27
   154dc:	e7d7      	b.n	1548e <set_endpoint+0x11e>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
   154de:	7a3c      	ldrb	r4, [r7, #8]
   154e0:	466e      	mov	r6, sp
   154e2:	b088      	sub	sp, #32
   154e4:	466b      	mov	r3, sp
   154e6:	f113 0210 	adds.w	r2, r3, #16
   154ea:	d02f      	beq.n	1554c <set_endpoint+0x1dc>
   154ec:	210c      	movs	r1, #12
   154ee:	b14a      	cbz	r2, 15504 <set_endpoint+0x194>
   154f0:	4608      	mov	r0, r1
   154f2:	2904      	cmp	r1, #4
   154f4:	dd03      	ble.n	154fe <set_endpoint+0x18e>
   154f6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 155e0 <set_endpoint+0x270>
   154fa:	f8c3 c014 	str.w	ip, [r3, #20]
   154fe:	2808      	cmp	r0, #8
   15500:	dd00      	ble.n	15504 <set_endpoint+0x194>
   15502:	619c      	str	r4, [r3, #24]
   15504:	290b      	cmp	r1, #11
   15506:	dd24      	ble.n	15552 <set_endpoint+0x1e2>
   15508:	240c      	movs	r4, #12
   1550a:	b13a      	cbz	r2, 1551c <set_endpoint+0x1ac>
   1550c:	2103      	movs	r1, #3
   1550e:	7139      	strb	r1, [r7, #4]
   15510:	2100      	movs	r1, #0
   15512:	7179      	strb	r1, [r7, #5]
   15514:	71b9      	strb	r1, [r7, #6]
   15516:	71f9      	strb	r1, [r7, #7]
   15518:	6878      	ldr	r0, [r7, #4]
   1551a:	6118      	str	r0, [r3, #16]
   1551c:	2100      	movs	r1, #0
   1551e:	f36f 0100 	bfc	r1, #0, #1
   15522:	f36f 0141 	bfc	r1, #1, #1
   15526:	f36f 0182 	bfc	r1, #2, #1
   1552a:	f36f 01c5 	bfc	r1, #3, #3
   1552e:	2302      	movs	r3, #2
   15530:	f363 1188 	bfi	r1, r3, #6, #3
   15534:	f3c4 030a 	ubfx	r3, r4, #0, #11
   15538:	f363 2153 	bfi	r1, r3, #9, #11
   1553c:	f36f 511f 	bfc	r1, #20, #12
   15540:	2300      	movs	r3, #0
   15542:	4825      	ldr	r0, [pc, #148]	; (155d8 <set_endpoint+0x268>)
   15544:	f7fe fdda 	bl	140fc <z_impl_z_log_msg_static_create>
   15548:	46b5      	mov	sp, r6
   1554a:	e738      	b.n	153be <set_endpoint+0x4e>
   1554c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15550:	e7cd      	b.n	154ee <set_endpoint+0x17e>
   15552:	f06f 041b 	mvn.w	r4, #27
   15556:	e7d8      	b.n	1550a <set_endpoint+0x19a>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
   15558:	7a3c      	ldrb	r4, [r7, #8]
   1555a:	466d      	mov	r5, sp
   1555c:	b088      	sub	sp, #32
   1555e:	466b      	mov	r3, sp
   15560:	f113 0210 	adds.w	r2, r3, #16
   15564:	d02e      	beq.n	155c4 <set_endpoint+0x254>
   15566:	210c      	movs	r1, #12
   15568:	b13a      	cbz	r2, 1557a <set_endpoint+0x20a>
   1556a:	4608      	mov	r0, r1
   1556c:	2904      	cmp	r1, #4
   1556e:	dd01      	ble.n	15574 <set_endpoint+0x204>
   15570:	4e1c      	ldr	r6, [pc, #112]	; (155e4 <set_endpoint+0x274>)
   15572:	615e      	str	r6, [r3, #20]
   15574:	2808      	cmp	r0, #8
   15576:	dd00      	ble.n	1557a <set_endpoint+0x20a>
   15578:	619c      	str	r4, [r3, #24]
   1557a:	290b      	cmp	r1, #11
   1557c:	dd25      	ble.n	155ca <set_endpoint+0x25a>
   1557e:	240c      	movs	r4, #12
   15580:	b13a      	cbz	r2, 15592 <set_endpoint+0x222>
   15582:	2103      	movs	r1, #3
   15584:	7139      	strb	r1, [r7, #4]
   15586:	2100      	movs	r1, #0
   15588:	7179      	strb	r1, [r7, #5]
   1558a:	71b9      	strb	r1, [r7, #6]
   1558c:	71f9      	strb	r1, [r7, #7]
   1558e:	6878      	ldr	r0, [r7, #4]
   15590:	6118      	str	r0, [r3, #16]
   15592:	2100      	movs	r1, #0
   15594:	f36f 0100 	bfc	r1, #0, #1
   15598:	f36f 0141 	bfc	r1, #1, #1
   1559c:	f36f 0182 	bfc	r1, #2, #1
   155a0:	f36f 01c5 	bfc	r1, #3, #3
   155a4:	2301      	movs	r3, #1
   155a6:	f363 1188 	bfi	r1, r3, #6, #3
   155aa:	f3c4 040a 	ubfx	r4, r4, #0, #11
   155ae:	f364 2153 	bfi	r1, r4, #9, #11
   155b2:	f36f 511f 	bfc	r1, #20, #12
   155b6:	2300      	movs	r3, #0
   155b8:	4807      	ldr	r0, [pc, #28]	; (155d8 <set_endpoint+0x268>)
   155ba:	f7fe fd9f 	bl	140fc <z_impl_z_log_msg_static_create>
   155be:	46ad      	mov	sp, r5
		return false;
   155c0:	2000      	movs	r0, #0
   155c2:	e705      	b.n	153d0 <set_endpoint+0x60>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
   155c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   155c8:	e7ce      	b.n	15568 <set_endpoint+0x1f8>
   155ca:	f06f 041b 	mvn.w	r4, #27
   155ce:	e7d7      	b.n	15580 <set_endpoint+0x210>
   155d0:	20003760 	.word	0x20003760
   155d4:	000328f4 	.word	0x000328f4
   155d8:	00031dd4 	.word	0x00031dd4
   155dc:	00032918 	.word	0x00032918
   155e0:	0003293c 	.word	0x0003293c
   155e4:	0003295c 	.word	0x0003295c

000155e8 <usb_set_interface>:
{
   155e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   155ec:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
   155ee:	4b19      	ldr	r3, [pc, #100]	; (15654 <usb_set_interface+0x6c>)
   155f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
   155f2:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   155f4:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   155f6:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
   155f8:	46b9      	mov	r9, r7
   155fa:	e007      	b.n	1560c <usb_set_interface+0x24>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   155fc:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   15600:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
   15602:	88b0      	ldrh	r0, [r6, #4]
   15604:	4285      	cmp	r5, r0
   15606:	d012      	beq.n	1562e <usb_set_interface+0x46>
		p += p[DESC_bLength];
   15608:	7823      	ldrb	r3, [r4, #0]
   1560a:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   1560c:	7823      	ldrb	r3, [r4, #0]
   1560e:	b1c3      	cbz	r3, 15642 <usb_set_interface+0x5a>
		switch (p[DESC_bDescriptorType]) {
   15610:	7863      	ldrb	r3, [r4, #1]
   15612:	2b04      	cmp	r3, #4
   15614:	d0f2      	beq.n	155fc <usb_set_interface+0x14>
   15616:	2b05      	cmp	r3, #5
   15618:	d1f6      	bne.n	15608 <usb_set_interface+0x20>
			if (cur_iface == setup->wIndex) {
   1561a:	88b3      	ldrh	r3, [r6, #4]
   1561c:	429d      	cmp	r5, r3
   1561e:	d1f3      	bne.n	15608 <usb_set_interface+0x20>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
   15620:	78b2      	ldrb	r2, [r6, #2]
   15622:	4641      	mov	r1, r8
   15624:	4620      	mov	r0, r4
   15626:	f016 fb22 	bl	2bc6e <usb_eps_reconfigure>
   1562a:	4607      	mov	r7, r0
   1562c:	e7ec      	b.n	15608 <usb_set_interface+0x20>
			    cur_alt_setting == setup->wValue) {
   1562e:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
   15630:	4588      	cmp	r8, r1
   15632:	d1e9      	bne.n	15608 <usb_set_interface+0x20>
				ret = usb_set_alt_setting(setup->wIndex,
   15634:	b2c9      	uxtb	r1, r1
   15636:	b2c0      	uxtb	r0, r0
   15638:	f7ff fb6e 	bl	14d18 <usb_set_alt_setting>
   1563c:	4607      	mov	r7, r0
				if_desc = (void *)p;
   1563e:	46a1      	mov	r9, r4
   15640:	e7e2      	b.n	15608 <usb_set_interface+0x20>
	if (usb_dev.status_callback) {
   15642:	4b04      	ldr	r3, [pc, #16]	; (15654 <usb_set_interface+0x6c>)
   15644:	69db      	ldr	r3, [r3, #28]
   15646:	b113      	cbz	r3, 1564e <usb_set_interface+0x66>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   15648:	4649      	mov	r1, r9
   1564a:	2007      	movs	r0, #7
   1564c:	4798      	blx	r3
}
   1564e:	4638      	mov	r0, r7
   15650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15654:	20003760 	.word	0x20003760

00015658 <usb_reset_alt_setting>:
{
   15658:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   1565a:	2208      	movs	r2, #8
   1565c:	2100      	movs	r1, #0
   1565e:	4802      	ldr	r0, [pc, #8]	; (15668 <usb_reset_alt_setting+0x10>)
   15660:	f017 f8f3 	bl	2c84a <memset>
}
   15664:	bd08      	pop	{r3, pc}
   15666:	bf00      	nop
   15668:	2000381b 	.word	0x2000381b

0001566c <usb_set_configuration>:
{
   1566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15670:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   15672:	4b22      	ldr	r3, [pc, #136]	; (156fc <usb_set_configuration+0x90>)
   15674:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
   15676:	8843      	ldrh	r3, [r0, #2]
   15678:	b11b      	cbz	r3, 15682 <usb_set_configuration+0x16>
	bool found = false;
   1567a:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
   1567c:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   1567e:	46b0      	mov	r8, r6
   15680:	e010      	b.n	156a4 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
   15682:	f7ff ffe9 	bl	15658 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   15686:	886a      	ldrh	r2, [r5, #2]
   15688:	4b1c      	ldr	r3, [pc, #112]	; (156fc <usb_set_configuration+0x90>)
   1568a:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   1568e:	69db      	ldr	r3, [r3, #28]
   15690:	b113      	cbz	r3, 15698 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   15692:	491b      	ldr	r1, [pc, #108]	; (15700 <usb_set_configuration+0x94>)
   15694:	2003      	movs	r0, #3
   15696:	4798      	blx	r3
		return true;
   15698:	2701      	movs	r7, #1
   1569a:	e01e      	b.n	156da <usb_set_configuration+0x6e>
			cur_alt_setting =
   1569c:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
   156a0:	7823      	ldrb	r3, [r4, #0]
   156a2:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   156a4:	7823      	ldrb	r3, [r4, #0]
   156a6:	b1bb      	cbz	r3, 156d8 <usb_set_configuration+0x6c>
		switch (p[DESC_bDescriptorType]) {
   156a8:	7863      	ldrb	r3, [r4, #1]
   156aa:	2b04      	cmp	r3, #4
   156ac:	d0f6      	beq.n	1569c <usb_set_configuration+0x30>
   156ae:	2b05      	cmp	r3, #5
   156b0:	d007      	beq.n	156c2 <usb_set_configuration+0x56>
   156b2:	2b02      	cmp	r3, #2
   156b4:	d1f4      	bne.n	156a0 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
   156b6:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
   156b8:	886b      	ldrh	r3, [r5, #2]
   156ba:	429e      	cmp	r6, r3
   156bc:	d1f0      	bne.n	156a0 <usb_set_configuration+0x34>
				found = true;
   156be:	2701      	movs	r7, #1
   156c0:	e7ee      	b.n	156a0 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
   156c2:	886b      	ldrh	r3, [r5, #2]
   156c4:	429e      	cmp	r6, r3
   156c6:	d1eb      	bne.n	156a0 <usb_set_configuration+0x34>
   156c8:	f1b8 0f00 	cmp.w	r8, #0
   156cc:	d1e8      	bne.n	156a0 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   156ce:	4620      	mov	r0, r4
   156d0:	f7ff fe4e 	bl	15370 <set_endpoint>
   156d4:	4607      	mov	r7, r0
			break;
   156d6:	e7e3      	b.n	156a0 <usb_set_configuration+0x34>
	if (found) {
   156d8:	b917      	cbnz	r7, 156e0 <usb_set_configuration+0x74>
}
   156da:	4638      	mov	r0, r7
   156dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
   156e0:	f7ff ffba 	bl	15658 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   156e4:	886a      	ldrh	r2, [r5, #2]
   156e6:	4b05      	ldr	r3, [pc, #20]	; (156fc <usb_set_configuration+0x90>)
   156e8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   156ec:	69db      	ldr	r3, [r3, #28]
   156ee:	2b00      	cmp	r3, #0
   156f0:	d0f3      	beq.n	156da <usb_set_configuration+0x6e>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   156f2:	4903      	ldr	r1, [pc, #12]	; (15700 <usb_set_configuration+0x94>)
   156f4:	2003      	movs	r0, #3
   156f6:	4798      	blx	r3
   156f8:	e7ef      	b.n	156da <usb_set_configuration+0x6e>
   156fa:	bf00      	nop
   156fc:	20003760 	.word	0x20003760
   15700:	2000381a 	.word	0x2000381a

00015704 <usb_handle_std_device_req>:
{
   15704:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
   15706:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
   15708:	f990 3000 	ldrsb.w	r3, [r0]
   1570c:	2b00      	cmp	r3, #0
   1570e:	db0a      	blt.n	15726 <usb_handle_std_device_req+0x22>
		switch (setup->bRequest) {
   15710:	7843      	ldrb	r3, [r0, #1]
   15712:	3b01      	subs	r3, #1
   15714:	2b08      	cmp	r3, #8
   15716:	d83a      	bhi.n	1578e <usb_handle_std_device_req+0x8a>
   15718:	e8df f003 	tbb	[pc, r3]
   1571c:	392f3924 	.word	0x392f3924
   15720:	3939391a 	.word	0x3939391a
   15724:	21          	.byte	0x21
   15725:	00          	.byte	0x00
		switch (setup->bRequest) {
   15726:	7843      	ldrb	r3, [r0, #1]
   15728:	2b06      	cmp	r3, #6
   1572a:	d007      	beq.n	1573c <usb_handle_std_device_req+0x38>
   1572c:	2b08      	cmp	r3, #8
   1572e:	d008      	beq.n	15742 <usb_handle_std_device_req+0x3e>
   15730:	b10b      	cbz	r3, 15736 <usb_handle_std_device_req+0x32>
   15732:	2000      	movs	r0, #0
}
   15734:	bd10      	pop	{r4, pc}
			return usb_get_status(setup, len, data_buf);
   15736:	f7ff fb29 	bl	14d8c <usb_get_status>
   1573a:	e7fb      	b.n	15734 <usb_handle_std_device_req+0x30>
			return usb_get_descriptor(setup, len, data_buf);
   1573c:	f7ff fb3c 	bl	14db8 <usb_get_descriptor>
   15740:	e7f8      	b.n	15734 <usb_handle_std_device_req+0x30>
			data[0] = usb_dev.configuration;
   15742:	4b14      	ldr	r3, [pc, #80]	; (15794 <usb_handle_std_device_req+0x90>)
   15744:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   15748:	7023      	strb	r3, [r4, #0]
			*len = 1;
   1574a:	2001      	movs	r0, #1
   1574c:	6008      	str	r0, [r1, #0]
			return true;
   1574e:	e7f1      	b.n	15734 <usb_handle_std_device_req+0x30>
			return !usb_dc_set_address(setup->wValue);
   15750:	7880      	ldrb	r0, [r0, #2]
   15752:	f00c f9f1 	bl	21b38 <usb_dc_set_address>
   15756:	fab0 f080 	clz	r0, r0
   1575a:	0940      	lsrs	r0, r0, #5
   1575c:	e7ea      	b.n	15734 <usb_handle_std_device_req+0x30>
			return usb_set_configuration(setup);
   1575e:	f7ff ff85 	bl	1566c <usb_set_configuration>
   15762:	e7e7      	b.n	15734 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   15764:	8843      	ldrh	r3, [r0, #2]
   15766:	2b01      	cmp	r3, #1
   15768:	d001      	beq.n	1576e <usb_handle_std_device_req+0x6a>
	return false;
   1576a:	2000      	movs	r0, #0
   1576c:	e7e2      	b.n	15734 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = false;
   1576e:	4b09      	ldr	r3, [pc, #36]	; (15794 <usb_handle_std_device_req+0x90>)
   15770:	2200      	movs	r2, #0
   15772:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
					return true;
   15776:	2001      	movs	r0, #1
   15778:	e7dc      	b.n	15734 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   1577a:	8843      	ldrh	r3, [r0, #2]
   1577c:	2b01      	cmp	r3, #1
   1577e:	d001      	beq.n	15784 <usb_handle_std_device_req+0x80>
	return false;
   15780:	2000      	movs	r0, #0
   15782:	e7d7      	b.n	15734 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = true;
   15784:	2001      	movs	r0, #1
   15786:	4b03      	ldr	r3, [pc, #12]	; (15794 <usb_handle_std_device_req+0x90>)
   15788:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
					return true;
   1578c:	e7d2      	b.n	15734 <usb_handle_std_device_req+0x30>
		switch (setup->bRequest) {
   1578e:	2000      	movs	r0, #0
   15790:	e7d0      	b.n	15734 <usb_handle_std_device_req+0x30>
   15792:	bf00      	nop
   15794:	20003760 	.word	0x20003760

00015798 <forward_status_cb>:
{
   15798:	b570      	push	{r4, r5, r6, lr}
   1579a:	4605      	mov	r5, r0
   1579c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   1579e:	2804      	cmp	r0, #4
   157a0:	d003      	beq.n	157aa <forward_status_cb+0x12>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   157a2:	2801      	cmp	r0, #1
   157a4:	d003      	beq.n	157ae <forward_status_cb+0x16>
{
   157a6:	4c13      	ldr	r4, [pc, #76]	; (157f4 <forward_status_cb+0x5c>)
   157a8:	e011      	b.n	157ce <forward_status_cb+0x36>
		usb_reset_alt_setting();
   157aa:	f7ff ff55 	bl	15658 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   157ae:	4b12      	ldr	r3, [pc, #72]	; (157f8 <forward_status_cb+0x60>)
   157b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   157b4:	2b00      	cmp	r3, #0
   157b6:	d0f6      	beq.n	157a6 <forward_status_cb+0xe>
			usb_cancel_transfers();
   157b8:	f000 ff4c 	bl	16654 <usb_cancel_transfers>
			foreach_ep(disable_interface_ep);
   157bc:	480f      	ldr	r0, [pc, #60]	; (157fc <forward_status_cb+0x64>)
   157be:	f7ff fb9d 	bl	14efc <foreach_ep>
			usb_dev.configured = false;
   157c2:	4b0d      	ldr	r3, [pc, #52]	; (157f8 <forward_status_cb+0x60>)
   157c4:	2200      	movs	r2, #0
   157c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   157ca:	e7ec      	b.n	157a6 <forward_status_cb+0xe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   157cc:	3424      	adds	r4, #36	; 0x24
   157ce:	4b0c      	ldr	r3, [pc, #48]	; (15800 <forward_status_cb+0x68>)
   157d0:	429c      	cmp	r4, r3
   157d2:	d207      	bcs.n	157e4 <forward_status_cb+0x4c>
		if (cfg_data->cb_usb_status) {
   157d4:	68e3      	ldr	r3, [r4, #12]
   157d6:	2b00      	cmp	r3, #0
   157d8:	d0f8      	beq.n	157cc <forward_status_cb+0x34>
			cfg_data->cb_usb_status(cfg_data, status, param);
   157da:	4632      	mov	r2, r6
   157dc:	4629      	mov	r1, r5
   157de:	4620      	mov	r0, r4
   157e0:	4798      	blx	r3
   157e2:	e7f3      	b.n	157cc <forward_status_cb+0x34>
	if (usb_dev.user_status_callback) {
   157e4:	4b04      	ldr	r3, [pc, #16]	; (157f8 <forward_status_cb+0x60>)
   157e6:	6a1b      	ldr	r3, [r3, #32]
   157e8:	b113      	cbz	r3, 157f0 <forward_status_cb+0x58>
		usb_dev.user_status_callback(status, param);
   157ea:	4631      	mov	r1, r6
   157ec:	4628      	mov	r0, r5
   157ee:	4798      	blx	r3
}
   157f0:	bd70      	pop	{r4, r5, r6, pc}
   157f2:	bf00      	nop
   157f4:	20000d30 	.word	0x20000d30
   157f8:	20003760 	.word	0x20003760
   157fc:	000150b9 	.word	0x000150b9
   15800:	20000d54 	.word	0x20000d54

00015804 <usb_handle_standard_request>:
{
   15804:	b570      	push	{r4, r5, r6, lr}
   15806:	4604      	mov	r4, r0
   15808:	460d      	mov	r5, r1
   1580a:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
   1580c:	4b18      	ldr	r3, [pc, #96]	; (15870 <usb_handle_standard_request+0x6c>)
   1580e:	699b      	ldr	r3, [r3, #24]
   15810:	b10b      	cbz	r3, 15816 <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   15812:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   15814:	b148      	cbz	r0, 1582a <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
   15816:	7823      	ldrb	r3, [r4, #0]
   15818:	f003 031f 	and.w	r3, r3, #31
   1581c:	2b01      	cmp	r3, #1
   1581e:	d00d      	beq.n	1583c <usb_handle_standard_request+0x38>
   15820:	2b02      	cmp	r3, #2
   15822:	d013      	beq.n	1584c <usb_handle_standard_request+0x48>
   15824:	b113      	cbz	r3, 1582c <usb_handle_standard_request+0x28>
   15826:	f06f 0015 	mvn.w	r0, #21
}
   1582a:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   1582c:	4632      	mov	r2, r6
   1582e:	4629      	mov	r1, r5
   15830:	4620      	mov	r0, r4
   15832:	f7ff ff67 	bl	15704 <usb_handle_std_device_req>
   15836:	b188      	cbz	r0, 1585c <usb_handle_standard_request+0x58>
	int rc = 0;
   15838:	2000      	movs	r0, #0
   1583a:	e7f6      	b.n	1582a <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   1583c:	4632      	mov	r2, r6
   1583e:	4629      	mov	r1, r5
   15840:	4620      	mov	r0, r4
   15842:	f016 fa1d 	bl	2bc80 <usb_handle_std_interface_req>
   15846:	b160      	cbz	r0, 15862 <usb_handle_standard_request+0x5e>
	int rc = 0;
   15848:	2000      	movs	r0, #0
   1584a:	e7ee      	b.n	1582a <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   1584c:	4632      	mov	r2, r6
   1584e:	4629      	mov	r1, r5
   15850:	4620      	mov	r0, r4
   15852:	f016 fa5d 	bl	2bd10 <usb_handle_std_endpoint_req>
   15856:	b138      	cbz	r0, 15868 <usb_handle_standard_request+0x64>
	int rc = 0;
   15858:	2000      	movs	r0, #0
   1585a:	e7e6      	b.n	1582a <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   1585c:	f06f 0015 	mvn.w	r0, #21
   15860:	e7e3      	b.n	1582a <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   15862:	f06f 0015 	mvn.w	r0, #21
   15866:	e7e0      	b.n	1582a <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   15868:	f06f 0015 	mvn.w	r0, #21
   1586c:	e7dd      	b.n	1582a <usb_handle_standard_request+0x26>
   1586e:	bf00      	nop
   15870:	20003760 	.word	0x20003760

00015874 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
   15874:	b570      	push	{r4, r5, r6, lr}
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15876:	4e0e      	ldr	r6, [pc, #56]	; (158b0 <composite_setup_ep_cb+0x3c>)
   15878:	4b0e      	ldr	r3, [pc, #56]	; (158b4 <composite_setup_ep_cb+0x40>)
   1587a:	429e      	cmp	r6, r3
   1587c:	d215      	bcs.n	158aa <composite_setup_ep_cb+0x36>
		ep_data = cfg_data->endpoint;
   1587e:	6a35      	ldr	r5, [r6, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   15880:	2400      	movs	r4, #0
   15882:	e001      	b.n	15888 <composite_setup_ep_cb+0x14>
   15884:	3401      	adds	r4, #1
   15886:	b2e4      	uxtb	r4, r4
   15888:	7f33      	ldrb	r3, [r6, #28]
   1588a:	429c      	cmp	r4, r3
   1588c:	d20b      	bcs.n	158a6 <composite_setup_ep_cb+0x32>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   1588e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   15892:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
   15896:	7918      	ldrb	r0, [r3, #4]
   15898:	f00c fd66 	bl	22368 <usb_dc_ep_set_callback>
   1589c:	2800      	cmp	r0, #0
   1589e:	d0f1      	beq.n	15884 <composite_setup_ep_cb+0x10>
						   ep_data[n].ep_cb)) {
				return -1;
   158a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
		}
	}

	return 0;
}
   158a4:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   158a6:	3624      	adds	r6, #36	; 0x24
   158a8:	e7e6      	b.n	15878 <composite_setup_ep_cb+0x4>
	return 0;
   158aa:	2000      	movs	r0, #0
   158ac:	e7fa      	b.n	158a4 <composite_setup_ep_cb+0x30>
   158ae:	bf00      	nop
   158b0:	20000d30 	.word	0x20000d30
   158b4:	20000d54 	.word	0x20000d54

000158b8 <usb_write>:
{
   158b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158bc:	b085      	sub	sp, #20
   158be:	af00      	add	r7, sp, #0
   158c0:	4680      	mov	r8, r0
   158c2:	468b      	mov	fp, r1
   158c4:	4692      	mov	sl, r2
   158c6:	607b      	str	r3, [r7, #4]
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   158c8:	2603      	movs	r6, #3
   158ca:	e02a      	b.n	15922 <usb_write+0x6a>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
   158cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   158d0:	e038      	b.n	15944 <usb_write+0x8c>
   158d2:	290b      	cmp	r1, #11
   158d4:	dd44      	ble.n	15960 <usb_write+0xa8>
   158d6:	210c      	movs	r1, #12
   158d8:	b13a      	cbz	r2, 158ea <usb_write+0x32>
   158da:	2003      	movs	r0, #3
   158dc:	7338      	strb	r0, [r7, #12]
   158de:	2000      	movs	r0, #0
   158e0:	7378      	strb	r0, [r7, #13]
   158e2:	73b8      	strb	r0, [r7, #14]
   158e4:	73f8      	strb	r0, [r7, #15]
   158e6:	68f8      	ldr	r0, [r7, #12]
   158e8:	6118      	str	r0, [r3, #16]
   158ea:	f36f 0400 	bfc	r4, #0, #1
   158ee:	f36f 0441 	bfc	r4, #1, #1
   158f2:	f36f 0482 	bfc	r4, #2, #1
   158f6:	f36f 04c5 	bfc	r4, #3, #3
   158fa:	2302      	movs	r3, #2
   158fc:	f363 1488 	bfi	r4, r3, #6, #3
   15900:	f3c1 030a 	ubfx	r3, r1, #0, #11
   15904:	f363 2453 	bfi	r4, r3, #9, #11
   15908:	f36f 541f 	bfc	r4, #20, #12
   1590c:	2300      	movs	r3, #0
   1590e:	4621      	mov	r1, r4
   15910:	4817      	ldr	r0, [pc, #92]	; (15970 <usb_write+0xb8>)
   15912:	f7fe fbf3 	bl	140fc <z_impl_z_log_msg_static_create>
   15916:	46cd      	mov	sp, r9
	z_impl_k_yield();
   15918:	f011 f96e 	bl	26bf8 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   1591c:	1e73      	subs	r3, r6, #1
   1591e:	b316      	cbz	r6, 15966 <usb_write+0xae>
   15920:	461e      	mov	r6, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   15922:	687b      	ldr	r3, [r7, #4]
   15924:	4652      	mov	r2, sl
   15926:	4659      	mov	r1, fp
   15928:	4640      	mov	r0, r8
   1592a:	f00c facd 	bl	21ec8 <usb_dc_ep_write>
   1592e:	4605      	mov	r5, r0
		if (ret == -EAGAIN) {
   15930:	f110 0f0b 	cmn.w	r0, #11
   15934:	d117      	bne.n	15966 <usb_write+0xae>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
   15936:	46e9      	mov	r9, sp
   15938:	b088      	sub	sp, #32
   1593a:	466b      	mov	r3, sp
   1593c:	f113 0210 	adds.w	r2, r3, #16
   15940:	d0c4      	beq.n	158cc <usb_write+0x14>
   15942:	210c      	movs	r1, #12
   15944:	2a00      	cmp	r2, #0
   15946:	d0c4      	beq.n	158d2 <usb_write+0x1a>
   15948:	4608      	mov	r0, r1
   1594a:	2904      	cmp	r1, #4
   1594c:	dd03      	ble.n	15956 <usb_write+0x9e>
   1594e:	f8df c024 	ldr.w	ip, [pc, #36]	; 15974 <usb_write+0xbc>
   15952:	f8c3 c014 	str.w	ip, [r3, #20]
   15956:	2808      	cmp	r0, #8
   15958:	ddbb      	ble.n	158d2 <usb_write+0x1a>
   1595a:	f8c3 8018 	str.w	r8, [r3, #24]
   1595e:	e7b8      	b.n	158d2 <usb_write+0x1a>
   15960:	f06f 011b 	mvn.w	r1, #27
   15964:	e7b8      	b.n	158d8 <usb_write+0x20>
}
   15966:	4628      	mov	r0, r5
   15968:	3714      	adds	r7, #20
   1596a:	46bd      	mov	sp, r7
   1596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15970:	00031dd4 	.word	0x00031dd4
   15974:	00032980 	.word	0x00032980

00015978 <usb_data_to_host>:
{
   15978:	b510      	push	{r4, lr}
   1597a:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
   1597c:	4b13      	ldr	r3, [pc, #76]	; (159cc <usb_data_to_host+0x54>)
   1597e:	7d1b      	ldrb	r3, [r3, #20]
   15980:	b9d3      	cbnz	r3, 159b8 <usb_data_to_host+0x40>
		uint32_t chunk = usb_dev.data_buf_residue;
   15982:	4c12      	ldr	r4, [pc, #72]	; (159cc <usb_data_to_host+0x54>)
   15984:	68e2      	ldr	r2, [r4, #12]
   15986:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   15988:	ab01      	add	r3, sp, #4
   1598a:	68a1      	ldr	r1, [r4, #8]
   1598c:	2080      	movs	r0, #128	; 0x80
   1598e:	f7ff ff93 	bl	158b8 <usb_write>
		usb_dev.data_buf += chunk;
   15992:	68a3      	ldr	r3, [r4, #8]
   15994:	9a01      	ldr	r2, [sp, #4]
   15996:	4413      	add	r3, r2
   15998:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   1599a:	68e3      	ldr	r3, [r4, #12]
   1599c:	1a9b      	subs	r3, r3, r2
   1599e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   159a0:	b993      	cbnz	r3, 159c8 <usb_data_to_host+0x50>
   159a2:	b18a      	cbz	r2, 159c8 <usb_data_to_host+0x50>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   159a4:	88e2      	ldrh	r2, [r4, #6]
   159a6:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue && chunk &&
   159a8:	429a      	cmp	r2, r3
   159aa:	dd0d      	ble.n	159c8 <usb_data_to_host+0x50>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   159ac:	f013 0f3f 	tst.w	r3, #63	; 0x3f
   159b0:	d10a      	bne.n	159c8 <usb_data_to_host+0x50>
				usb_dev.zlp_flag = true;
   159b2:	2201      	movs	r2, #1
   159b4:	7522      	strb	r2, [r4, #20]
   159b6:	e007      	b.n	159c8 <usb_data_to_host+0x50>
		usb_dev.zlp_flag = false;
   159b8:	2100      	movs	r1, #0
   159ba:	4b04      	ldr	r3, [pc, #16]	; (159cc <usb_data_to_host+0x54>)
   159bc:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   159be:	460b      	mov	r3, r1
   159c0:	460a      	mov	r2, r1
   159c2:	2080      	movs	r0, #128	; 0x80
   159c4:	f00c fa80 	bl	21ec8 <usb_dc_ep_write>
}
   159c8:	b002      	add	sp, #8
   159ca:	bd10      	pop	{r4, pc}
   159cc:	20003760 	.word	0x20003760

000159d0 <usb_handle_control_transfer>:
{
   159d0:	b510      	push	{r4, lr}
   159d2:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
   159d4:	2300      	movs	r3, #0
   159d6:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   159d8:	2800      	cmp	r0, #0
   159da:	f040 80af 	bne.w	15b3c <usb_handle_control_transfer+0x16c>
   159de:	b339      	cbz	r1, 15a30 <usb_handle_control_transfer+0x60>
		if (usb_dev.data_buf_residue <= 0) {
   159e0:	4b5d      	ldr	r3, [pc, #372]	; (15b58 <usb_handle_control_transfer+0x188>)
   159e2:	68da      	ldr	r2, [r3, #12]
   159e4:	2a00      	cmp	r2, #0
   159e6:	f340 8091 	ble.w	15b0c <usb_handle_control_transfer+0x13c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   159ea:	ab03      	add	r3, sp, #12
   159ec:	495a      	ldr	r1, [pc, #360]	; (15b58 <usb_handle_control_transfer+0x188>)
   159ee:	6889      	ldr	r1, [r1, #8]
   159f0:	2000      	movs	r0, #0
   159f2:	f019 fc00 	bl	2f1f6 <usb_dc_ep_read>
   159f6:	2800      	cmp	r0, #0
   159f8:	f2c0 8095 	blt.w	15b26 <usb_handle_control_transfer+0x156>
		usb_dev.data_buf += chunk;
   159fc:	4a56      	ldr	r2, [pc, #344]	; (15b58 <usb_handle_control_transfer+0x188>)
   159fe:	6893      	ldr	r3, [r2, #8]
   15a00:	9903      	ldr	r1, [sp, #12]
   15a02:	440b      	add	r3, r1
   15a04:	6093      	str	r3, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
   15a06:	68d3      	ldr	r3, [r2, #12]
   15a08:	1a5b      	subs	r3, r3, r1
   15a0a:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
   15a0c:	2b00      	cmp	r3, #0
   15a0e:	f040 8097 	bne.w	15b40 <usb_handle_control_transfer+0x170>
			usb_dev.data_buf = usb_dev.req_data;
   15a12:	4610      	mov	r0, r2
   15a14:	f102 0338 	add.w	r3, r2, #56	; 0x38
   15a18:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
   15a1c:	f100 0110 	add.w	r1, r0, #16
   15a20:	f7ff f992 	bl	14d48 <usb_handle_request>
   15a24:	2800      	cmp	r0, #0
   15a26:	f000 8085 	beq.w	15b34 <usb_handle_control_transfer+0x164>
			usb_data_to_host();
   15a2a:	f7ff ffa5 	bl	15978 <usb_data_to_host>
   15a2e:	e087      	b.n	15b40 <usb_handle_control_transfer+0x170>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   15a30:	2208      	movs	r2, #8
   15a32:	a901      	add	r1, sp, #4
   15a34:	f019 fbdf 	bl	2f1f6 <usb_dc_ep_read>
   15a38:	2800      	cmp	r0, #0
   15a3a:	db30      	blt.n	15a9e <usb_handle_control_transfer+0xce>
		setup->bmRequestType = setup_raw.bmRequestType;
   15a3c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   15a40:	4b45      	ldr	r3, [pc, #276]	; (15b58 <usb_handle_control_transfer+0x188>)
   15a42:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
   15a44:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15a48:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
   15a4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15a4e:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   15a50:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   15a54:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   15a56:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   15a5a:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
   15a5c:	f103 0238 	add.w	r2, r3, #56	; 0x38
   15a60:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
   15a62:	2200      	movs	r2, #0
   15a64:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
   15a66:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
   15a68:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
   15a6a:	f010 0f80 	tst.w	r0, #128	; 0x80
   15a6e:	d103      	bne.n	15a78 <usb_handle_control_transfer+0xa8>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   15a70:	2980      	cmp	r1, #128	; 0x80
   15a72:	d818      	bhi.n	15aa6 <usb_handle_control_transfer+0xd6>
			if (setup->wLength) {
   15a74:	2900      	cmp	r1, #0
   15a76:	d141      	bne.n	15afc <usb_handle_control_transfer+0x12c>
		if (!usb_handle_request(setup,
   15a78:	4a38      	ldr	r2, [pc, #224]	; (15b5c <usb_handle_control_transfer+0x18c>)
   15a7a:	f102 0108 	add.w	r1, r2, #8
   15a7e:	f1a2 0008 	sub.w	r0, r2, #8
   15a82:	f7ff f961 	bl	14d48 <usb_handle_request>
   15a86:	2800      	cmp	r0, #0
   15a88:	d03c      	beq.n	15b04 <usb_handle_control_transfer+0x134>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   15a8a:	4b33      	ldr	r3, [pc, #204]	; (15b58 <usb_handle_control_transfer+0x188>)
   15a8c:	88da      	ldrh	r2, [r3, #6]
   15a8e:	6919      	ldr	r1, [r3, #16]
   15a90:	428a      	cmp	r2, r1
   15a92:	bfa8      	it	ge
   15a94:	460a      	movge	r2, r1
   15a96:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
   15a98:	f7ff ff6e 	bl	15978 <usb_data_to_host>
   15a9c:	e050      	b.n	15b40 <usb_handle_control_transfer+0x170>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15a9e:	2080      	movs	r0, #128	; 0x80
   15aa0:	f00c f93e 	bl	21d20 <usb_dc_ep_set_stall>
			return;
   15aa4:	e04c      	b.n	15b40 <usb_handle_control_transfer+0x170>
				LOG_ERR("Request buffer too small");
   15aa6:	4b2e      	ldr	r3, [pc, #184]	; (15b60 <usb_handle_control_transfer+0x190>)
   15aa8:	9309      	str	r3, [sp, #36]	; 0x24
   15aaa:	2302      	movs	r3, #2
   15aac:	f88d 3000 	strb.w	r3, [sp]
   15ab0:	4614      	mov	r4, r2
   15ab2:	f88d 2001 	strb.w	r2, [sp, #1]
   15ab6:	f88d 2002 	strb.w	r2, [sp, #2]
   15aba:	f88d 2003 	strb.w	r2, [sp, #3]
   15abe:	9b00      	ldr	r3, [sp, #0]
   15ac0:	9308      	str	r3, [sp, #32]
   15ac2:	4611      	mov	r1, r2
   15ac4:	f362 0100 	bfi	r1, r2, #0, #1
   15ac8:	f362 0141 	bfi	r1, r2, #1, #1
   15acc:	f362 0182 	bfi	r1, r2, #2, #1
   15ad0:	f362 01c5 	bfi	r1, r2, #3, #3
   15ad4:	2301      	movs	r3, #1
   15ad6:	f363 1188 	bfi	r1, r3, #6, #3
   15ada:	2308      	movs	r3, #8
   15adc:	f363 2153 	bfi	r1, r3, #9, #11
   15ae0:	f362 511f 	bfi	r1, r2, #20, #12
   15ae4:	4613      	mov	r3, r2
   15ae6:	aa08      	add	r2, sp, #32
   15ae8:	481e      	ldr	r0, [pc, #120]	; (15b64 <usb_handle_control_transfer+0x194>)
   15aea:	f7fe fb07 	bl	140fc <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15aee:	2080      	movs	r0, #128	; 0x80
   15af0:	f00c f916 	bl	21d20 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   15af4:	4620      	mov	r0, r4
   15af6:	f00c f913 	bl	21d20 <usb_dc_ep_set_stall>
				return;
   15afa:	e021      	b.n	15b40 <usb_handle_control_transfer+0x170>
				usb_dev.data_buf_len = setup->wLength;
   15afc:	4b16      	ldr	r3, [pc, #88]	; (15b58 <usb_handle_control_transfer+0x188>)
   15afe:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
   15b00:	60d9      	str	r1, [r3, #12]
				return;
   15b02:	e01d      	b.n	15b40 <usb_handle_control_transfer+0x170>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15b04:	2080      	movs	r0, #128	; 0x80
   15b06:	f00c f90b 	bl	21d20 <usb_dc_ep_set_stall>
			return;
   15b0a:	e019      	b.n	15b40 <usb_handle_control_transfer+0x170>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   15b0c:	ab03      	add	r3, sp, #12
   15b0e:	2200      	movs	r2, #0
   15b10:	4911      	ldr	r1, [pc, #68]	; (15b58 <usb_handle_control_transfer+0x188>)
   15b12:	6889      	ldr	r1, [r1, #8]
   15b14:	4610      	mov	r0, r2
   15b16:	f019 fb6e 	bl	2f1f6 <usb_dc_ep_read>
   15b1a:	2800      	cmp	r0, #0
   15b1c:	da10      	bge.n	15b40 <usb_handle_control_transfer+0x170>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15b1e:	2080      	movs	r0, #128	; 0x80
   15b20:	f00c f8fe 	bl	21d20 <usb_dc_ep_set_stall>
			return;
   15b24:	e00c      	b.n	15b40 <usb_handle_control_transfer+0x170>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15b26:	2080      	movs	r0, #128	; 0x80
   15b28:	f00c f8fa 	bl	21d20 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   15b2c:	2000      	movs	r0, #0
   15b2e:	f00c f8f7 	bl	21d20 <usb_dc_ep_set_stall>
			return;
   15b32:	e005      	b.n	15b40 <usb_handle_control_transfer+0x170>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   15b34:	2080      	movs	r0, #128	; 0x80
   15b36:	f00c f8f3 	bl	21d20 <usb_dc_ep_set_stall>
				return;
   15b3a:	e001      	b.n	15b40 <usb_handle_control_transfer+0x170>
	} else if (ep == USB_CONTROL_EP_IN) {
   15b3c:	2880      	cmp	r0, #128	; 0x80
   15b3e:	d001      	beq.n	15b44 <usb_handle_control_transfer+0x174>
}
   15b40:	b00a      	add	sp, #40	; 0x28
   15b42:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   15b44:	4b04      	ldr	r3, [pc, #16]	; (15b58 <usb_handle_control_transfer+0x188>)
   15b46:	68db      	ldr	r3, [r3, #12]
   15b48:	b91b      	cbnz	r3, 15b52 <usb_handle_control_transfer+0x182>
   15b4a:	4b03      	ldr	r3, [pc, #12]	; (15b58 <usb_handle_control_transfer+0x188>)
   15b4c:	7d1b      	ldrb	r3, [r3, #20]
   15b4e:	2b00      	cmp	r3, #0
   15b50:	d0f6      	beq.n	15b40 <usb_handle_control_transfer+0x170>
			usb_data_to_host();
   15b52:	f7ff ff11 	bl	15978 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
   15b56:	e7f3      	b.n	15b40 <usb_handle_control_transfer+0x170>
   15b58:	20003760 	.word	0x20003760
   15b5c:	20003768 	.word	0x20003768
   15b60:	000329a8 	.word	0x000329a8
   15b64:	00031dd4 	.word	0x00031dd4

00015b68 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
   15b68:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
   15b6a:	f7ff f909 	bl	14d80 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
   15b6e:	4908      	ldr	r1, [pc, #32]	; (15b90 <usb_set_config+0x28>)
   15b70:	2000      	movs	r0, #0
   15b72:	f7ff f8fd 	bl	14d70 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
   15b76:	4907      	ldr	r1, [pc, #28]	; (15b94 <usb_set_config+0x2c>)
   15b78:	2001      	movs	r0, #1
   15b7a:	f7ff f8f9 	bl	14d70 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
   15b7e:	4906      	ldr	r1, [pc, #24]	; (15b98 <usb_set_config+0x30>)
   15b80:	2002      	movs	r0, #2
   15b82:	f7ff f8f5 	bl	14d70 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
   15b86:	4805      	ldr	r0, [pc, #20]	; (15b9c <usb_set_config+0x34>)
   15b88:	f7ff f9ac 	bl	14ee4 <usb_register_custom_req_handler>

	return 0;
}
   15b8c:	2000      	movs	r0, #0
   15b8e:	bd08      	pop	{r3, pc}
   15b90:	00015805 	.word	0x00015805
   15b94:	00014f35 	.word	0x00014f35
   15b98:	00014fd1 	.word	0x00014fd1
   15b9c:	00014f75 	.word	0x00014f75

00015ba0 <usb_enable>:

int usb_enable(usb_dc_status_callback status_cb)
{
   15ba0:	b530      	push	{r4, r5, lr}
   15ba2:	b08b      	sub	sp, #44	; 0x2c
   15ba4:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   15ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15bae:	4847      	ldr	r0, [pc, #284]	; (15ccc <usb_enable+0x12c>)
   15bb0:	f010 fa5c 	bl	2606c <z_impl_k_mutex_lock>
	 * This should only be called once.
	 */
	LOG_DBG("lock usb_enable_lock mutex");
	k_mutex_lock(&usb_enable_lock, K_FOREVER);

	if (usb_dev.enabled == true) {
   15bb4:	4b46      	ldr	r3, [pc, #280]	; (15cd0 <usb_enable+0x130>)
   15bb6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   15bba:	2b00      	cmp	r3, #0
   15bbc:	d15b      	bne.n	15c76 <usb_enable+0xd6>
		ret = -EALREADY;
		goto out;
	}

	/* Enable VBUS if needed */
	ret = usb_vbus_set(true);
   15bbe:	2001      	movs	r0, #1
   15bc0:	f016 f83e 	bl	2bc40 <usb_vbus_set>
	if (ret < 0) {
   15bc4:	1e04      	subs	r4, r0, #0
   15bc6:	db7a      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	usb_dev.user_status_callback = status_cb;
   15bc8:	4b41      	ldr	r3, [pc, #260]	; (15cd0 <usb_enable+0x130>)
   15bca:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
   15bcc:	4c41      	ldr	r4, [pc, #260]	; (15cd4 <usb_enable+0x134>)
   15bce:	4620      	mov	r0, r4
   15bd0:	f7ff f98e 	bl	14ef0 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
   15bd4:	4620      	mov	r0, r4
   15bd6:	f00c fbdb 	bl	22390 <usb_dc_set_status_callback>

	ret = usb_dc_attach();
   15bda:	f00b ff71 	bl	21ac0 <usb_dc_attach>
	if (ret < 0) {
   15bde:	1e04      	subs	r4, r0, #0
   15be0:	db6d      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	ret = usb_transfer_init();
   15be2:	f000 fd69 	bl	166b8 <usb_transfer_init>
	if (ret < 0) {
   15be6:	1e04      	subs	r4, r0, #0
   15be8:	db69      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	/* Configure control EP */
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   15bea:	2340      	movs	r3, #64	; 0x40
   15bec:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   15bf0:	2300      	movs	r3, #0
   15bf2:	f88d 300c 	strb.w	r3, [sp, #12]

	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   15bf6:	f88d 3008 	strb.w	r3, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
   15bfa:	a802      	add	r0, sp, #8
   15bfc:	f00c f83c 	bl	21c78 <usb_dc_ep_configure>
	if (ret < 0) {
   15c00:	1e04      	subs	r4, r0, #0
   15c02:	db5c      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   15c04:	2380      	movs	r3, #128	; 0x80
   15c06:	f88d 3008 	strb.w	r3, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
   15c0a:	a802      	add	r0, sp, #8
   15c0c:	f00c f834 	bl	21c78 <usb_dc_ep_configure>
	if (ret < 0) {
   15c10:	1e04      	subs	r4, r0, #0
   15c12:	db54      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	/* Register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   15c14:	4930      	ldr	r1, [pc, #192]	; (15cd8 <usb_enable+0x138>)
   15c16:	2000      	movs	r0, #0
   15c18:	f00c fba6 	bl	22368 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   15c1c:	1e04      	subs	r4, r0, #0
   15c1e:	db4e      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   15c20:	492d      	ldr	r1, [pc, #180]	; (15cd8 <usb_enable+0x138>)
   15c22:	2080      	movs	r0, #128	; 0x80
   15c24:	f00c fba0 	bl	22368 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   15c28:	1e04      	subs	r4, r0, #0
   15c2a:	db48      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	/* Register endpoint handlers*/
	ret = composite_setup_ep_cb();
   15c2c:	f7ff fe22 	bl	15874 <composite_setup_ep_cb>
	if (ret < 0) {
   15c30:	1e04      	subs	r4, r0, #0
   15c32:	db44      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}

	/* Enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   15c34:	2000      	movs	r0, #0
   15c36:	f00c f919 	bl	21e6c <usb_dc_ep_enable>
	if (ret < 0) {
   15c3a:	1e04      	subs	r4, r0, #0
   15c3c:	db3f      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   15c3e:	2000      	movs	r0, #0
   15c40:	f7ff f9e4 	bl	1500c <get_ep_bm_from_addr>
   15c44:	4a22      	ldr	r2, [pc, #136]	; (15cd0 <usb_enable+0x130>)
   15c46:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   15c4a:	4303      	orrs	r3, r0
   15c4c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   15c50:	2080      	movs	r0, #128	; 0x80
   15c52:	f00c f90b 	bl	21e6c <usb_dc_ep_enable>
	if (ret < 0) {
   15c56:	1e04      	subs	r4, r0, #0
   15c58:	db31      	blt.n	15cbe <usb_enable+0x11e>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
   15c5a:	2080      	movs	r0, #128	; 0x80
   15c5c:	f7ff f9d6 	bl	1500c <get_ep_bm_from_addr>
   15c60:	4b1b      	ldr	r3, [pc, #108]	; (15cd0 <usb_enable+0x130>)
   15c62:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   15c66:	4302      	orrs	r2, r0
   15c68:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	usb_dev.enabled = true;
   15c6c:	2201      	movs	r2, #1
   15c6e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
   15c72:	2400      	movs	r4, #0
   15c74:	e023      	b.n	15cbe <usb_enable+0x11e>
		LOG_WRN("USB device support already enabled");
   15c76:	4b19      	ldr	r3, [pc, #100]	; (15cdc <usb_enable+0x13c>)
   15c78:	9309      	str	r3, [sp, #36]	; 0x24
   15c7a:	2202      	movs	r2, #2
   15c7c:	f88d 2004 	strb.w	r2, [sp, #4]
   15c80:	2300      	movs	r3, #0
   15c82:	f88d 3005 	strb.w	r3, [sp, #5]
   15c86:	f88d 3006 	strb.w	r3, [sp, #6]
   15c8a:	f88d 3007 	strb.w	r3, [sp, #7]
   15c8e:	9901      	ldr	r1, [sp, #4]
   15c90:	9108      	str	r1, [sp, #32]
   15c92:	4619      	mov	r1, r3
   15c94:	f363 0100 	bfi	r1, r3, #0, #1
   15c98:	f363 0141 	bfi	r1, r3, #1, #1
   15c9c:	f363 0182 	bfi	r1, r3, #2, #1
   15ca0:	f363 01c5 	bfi	r1, r3, #3, #3
   15ca4:	f362 1188 	bfi	r1, r2, #6, #3
   15ca8:	2208      	movs	r2, #8
   15caa:	f362 2153 	bfi	r1, r2, #9, #11
   15cae:	f363 511f 	bfi	r1, r3, #20, #12
   15cb2:	aa08      	add	r2, sp, #32
   15cb4:	480a      	ldr	r0, [pc, #40]	; (15ce0 <usb_enable+0x140>)
   15cb6:	f7fe fa21 	bl	140fc <z_impl_z_log_msg_static_create>
		ret = -EALREADY;
   15cba:	f06f 0477 	mvn.w	r4, #119	; 0x77
	return z_impl_k_mutex_unlock(mutex);
   15cbe:	4803      	ldr	r0, [pc, #12]	; (15ccc <usb_enable+0x12c>)
   15cc0:	f010 fa58 	bl	26174 <z_impl_k_mutex_unlock>
out:
	LOG_DBG("unlock usb_enable_lock mutex");
	k_mutex_unlock(&usb_enable_lock);
	return ret;
}
   15cc4:	4620      	mov	r0, r4
   15cc6:	b00b      	add	sp, #44	; 0x2c
   15cc8:	bd30      	pop	{r4, r5, pc}
   15cca:	bf00      	nop
   15ccc:	20000a44 	.word	0x20000a44
   15cd0:	20003760 	.word	0x20003760
   15cd4:	00015799 	.word	0x00015799
   15cd8:	000159d1 	.word	0x000159d1
   15cdc:	000329c4 	.word	0x000329c4
   15ce0:	00031dd4 	.word	0x00031dd4

00015ce4 <usb_device_init>:
 */
static int usb_device_init(void)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   15ce4:	4b1c      	ldr	r3, [pc, #112]	; (15d58 <usb_device_init+0x74>)
   15ce6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   15cea:	bb93      	cbnz	r3, 15d52 <usb_device_init+0x6e>
{
   15cec:	b500      	push	{lr}
   15cee:	b089      	sub	sp, #36	; 0x24
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   15cf0:	f000 f9ec 	bl	160cc <usb_get_device_descriptor>
	if (!device_descriptor) {
   15cf4:	b138      	cbz	r0, 15d06 <usb_device_init+0x22>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   15cf6:	f7ff ff37 	bl	15b68 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
   15cfa:	2000      	movs	r0, #0
   15cfc:	f7ff ff50 	bl	15ba0 <usb_enable>
	}

	return 0;
}
   15d00:	b009      	add	sp, #36	; 0x24
   15d02:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to configure USB device stack");
   15d06:	4b15      	ldr	r3, [pc, #84]	; (15d5c <usb_device_init+0x78>)
   15d08:	9307      	str	r3, [sp, #28]
   15d0a:	2302      	movs	r3, #2
   15d0c:	f88d 3004 	strb.w	r3, [sp, #4]
   15d10:	2300      	movs	r3, #0
   15d12:	f88d 3005 	strb.w	r3, [sp, #5]
   15d16:	f88d 3006 	strb.w	r3, [sp, #6]
   15d1a:	f88d 3007 	strb.w	r3, [sp, #7]
   15d1e:	9a01      	ldr	r2, [sp, #4]
   15d20:	9206      	str	r2, [sp, #24]
   15d22:	4619      	mov	r1, r3
   15d24:	f363 0100 	bfi	r1, r3, #0, #1
   15d28:	f363 0141 	bfi	r1, r3, #1, #1
   15d2c:	f363 0182 	bfi	r1, r3, #2, #1
   15d30:	f363 01c5 	bfi	r1, r3, #3, #3
   15d34:	2201      	movs	r2, #1
   15d36:	f362 1188 	bfi	r1, r2, #6, #3
   15d3a:	2208      	movs	r2, #8
   15d3c:	f362 2153 	bfi	r1, r2, #9, #11
   15d40:	f363 511f 	bfi	r1, r3, #20, #12
   15d44:	aa06      	add	r2, sp, #24
   15d46:	4806      	ldr	r0, [pc, #24]	; (15d60 <usb_device_init+0x7c>)
   15d48:	f7fe f9d8 	bl	140fc <z_impl_z_log_msg_static_create>
		return -1;
   15d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15d50:	e7d6      	b.n	15d00 <usb_device_init+0x1c>
		return -EALREADY;
   15d52:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   15d56:	4770      	bx	lr
   15d58:	20003760 	.word	0x20003760
   15d5c:	000329e8 	.word	0x000329e8
   15d60:	00031dd4 	.word	0x00031dd4

00015d64 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
   15d64:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   15d66:	4806      	ldr	r0, [pc, #24]	; (15d80 <usb_get_cfg_data+0x1c>)
   15d68:	e000      	b.n	15d6c <usb_get_cfg_data+0x8>
   15d6a:	3024      	adds	r0, #36	; 0x24
   15d6c:	4b05      	ldr	r3, [pc, #20]	; (15d84 <usb_get_cfg_data+0x20>)
   15d6e:	4298      	cmp	r0, r3
   15d70:	d203      	bcs.n	15d7a <usb_get_cfg_data+0x16>
		if (cfg_data->interface_descriptor == iface) {
   15d72:	6843      	ldr	r3, [r0, #4]
   15d74:	4293      	cmp	r3, r2
   15d76:	d1f8      	bne.n	15d6a <usb_get_cfg_data+0x6>
   15d78:	e000      	b.n	15d7c <usb_get_cfg_data+0x18>
			return cfg_data;
		}
	}

	return NULL;
   15d7a:	2000      	movs	r0, #0
}
   15d7c:	4770      	bx	lr
   15d7e:	bf00      	nop
   15d80:	20000d30 	.word	0x20000d30
   15d84:	20000d54 	.word	0x20000d54

00015d88 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   15d88:	b510      	push	{r4, lr}
   15d8a:	b08a      	sub	sp, #40	; 0x28
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   15d8c:	f10d 0c04 	add.w	ip, sp, #4
   15d90:	4c1d      	ldr	r4, [pc, #116]	; (15e08 <usb_update_sn_string_descriptor+0x80>)
   15d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   15d98:	6823      	ldr	r3, [r4, #0]
   15d9a:	f88c 3000 	strb.w	r3, [ip]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   15d9e:	2210      	movs	r2, #16
   15da0:	2100      	movs	r1, #0
   15da2:	a806      	add	r0, sp, #24
   15da4:	f016 fd51 	bl	2c84a <memset>
	memset(sn, 0, sizeof(sn));
   15da8:	2212      	movs	r2, #18
   15daa:	2100      	movs	r1, #0
   15dac:	4817      	ldr	r0, [pc, #92]	; (15e0c <usb_update_sn_string_descriptor+0x84>)
   15dae:	f016 fd4c 	bl	2c84a <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   15db2:	2110      	movs	r1, #16
   15db4:	a806      	add	r0, sp, #24
   15db6:	f019 fb99 	bl	2f4ec <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   15dba:	2800      	cmp	r0, #0
   15dbc:	dd20      	ble.n	15e00 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   15dbe:	2808      	cmp	r0, #8
   15dc0:	bfb8      	it	lt
   15dc2:	2008      	movlt	r0, #8
   15dc4:	f1a0 0c08 	sub.w	ip, r0, #8
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   15dc8:	2200      	movs	r2, #0
   15dca:	e017      	b.n	15dfc <usb_update_sn_string_descriptor+0x74>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   15dcc:	eb0c 0302 	add.w	r3, ip, r2
   15dd0:	3328      	adds	r3, #40	; 0x28
   15dd2:	446b      	add	r3, sp
   15dd4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   15dd8:	0051      	lsls	r1, r2, #1
   15dda:	a80a      	add	r0, sp, #40	; 0x28
   15ddc:	eb00 1013 	add.w	r0, r0, r3, lsr #4
   15de0:	f810 ec24 	ldrb.w	lr, [r0, #-36]
   15de4:	4809      	ldr	r0, [pc, #36]	; (15e0c <usb_update_sn_string_descriptor+0x84>)
   15de6:	f800 e012 	strb.w	lr, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   15dea:	f003 030f 	and.w	r3, r3, #15
   15dee:	3101      	adds	r1, #1
   15df0:	3328      	adds	r3, #40	; 0x28
   15df2:	446b      	add	r3, sp
   15df4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
   15df8:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
   15dfa:	3201      	adds	r2, #1
   15dfc:	2a07      	cmp	r2, #7
   15dfe:	dde5      	ble.n	15dcc <usb_update_sn_string_descriptor+0x44>
		}
	}

	return sn;
}
   15e00:	4802      	ldr	r0, [pc, #8]	; (15e0c <usb_update_sn_string_descriptor+0x84>)
   15e02:	b00a      	add	sp, #40	; 0x28
   15e04:	bd10      	pop	{r4, pc}
   15e06:	bf00      	nop
   15e08:	00032a1c 	.word	0x00032a1c
   15e0c:	20003828 	.word	0x20003828

00015e10 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
   15e10:	b570      	push	{r4, r5, r6, lr}
   15e12:	b088      	sub	sp, #32
   15e14:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   15e16:	f7ff ffb7 	bl	15d88 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
   15e1a:	b120      	cbz	r0, 15e26 <usb_fix_ascii_sn_string_descriptor+0x16>
   15e1c:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
   15e1e:	f016 fcad 	bl	2c77c <strlen>
	if (!runtime_sn_len) {
   15e22:	4606      	mov	r6, r0
   15e24:	b908      	cbnz	r0, 15e2a <usb_fix_ascii_sn_string_descriptor+0x1a>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
   15e26:	b008      	add	sp, #32
   15e28:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   15e2a:	4817      	ldr	r0, [pc, #92]	; (15e88 <usb_fix_ascii_sn_string_descriptor+0x78>)
   15e2c:	f016 fca6 	bl	2c77c <strlen>
	if (runtime_sn_len != default_sn_len) {
   15e30:	4286      	cmp	r6, r0
   15e32:	d023      	beq.n	15e7c <usb_fix_ascii_sn_string_descriptor+0x6c>
		LOG_ERR("the new SN descriptor doesn't have the same "
   15e34:	4b15      	ldr	r3, [pc, #84]	; (15e8c <usb_fix_ascii_sn_string_descriptor+0x7c>)
   15e36:	9307      	str	r3, [sp, #28]
   15e38:	2302      	movs	r3, #2
   15e3a:	f88d 3004 	strb.w	r3, [sp, #4]
   15e3e:	2300      	movs	r3, #0
   15e40:	f88d 3005 	strb.w	r3, [sp, #5]
   15e44:	f88d 3006 	strb.w	r3, [sp, #6]
   15e48:	f88d 3007 	strb.w	r3, [sp, #7]
   15e4c:	9a01      	ldr	r2, [sp, #4]
   15e4e:	9206      	str	r2, [sp, #24]
   15e50:	4619      	mov	r1, r3
   15e52:	f363 0100 	bfi	r1, r3, #0, #1
   15e56:	f363 0141 	bfi	r1, r3, #1, #1
   15e5a:	f363 0182 	bfi	r1, r3, #2, #1
   15e5e:	f363 01c5 	bfi	r1, r3, #3, #3
   15e62:	2201      	movs	r2, #1
   15e64:	f362 1188 	bfi	r1, r2, #6, #3
   15e68:	2208      	movs	r2, #8
   15e6a:	f362 2153 	bfi	r1, r2, #9, #11
   15e6e:	f363 511f 	bfi	r1, r3, #20, #12
   15e72:	aa06      	add	r2, sp, #24
   15e74:	4806      	ldr	r0, [pc, #24]	; (15e90 <usb_fix_ascii_sn_string_descriptor+0x80>)
   15e76:	f7fe f941 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   15e7a:	e7d4      	b.n	15e26 <usb_fix_ascii_sn_string_descriptor+0x16>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   15e7c:	4632      	mov	r2, r6
   15e7e:	4629      	mov	r1, r5
   15e80:	1ca0      	adds	r0, r4, #2
   15e82:	f016 fcb3 	bl	2c7ec <memcpy>
   15e86:	e7ce      	b.n	15e26 <usb_fix_ascii_sn_string_descriptor+0x16>
   15e88:	00032a1c 	.word	0x00032a1c
   15e8c:	00032a30 	.word	0x00032a30
   15e90:	00031dcc 	.word	0x00031dcc

00015e94 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   15e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15e98:	b095      	sub	sp, #84	; 0x54
   15e9a:	af00      	add	r7, sp, #0
   15e9c:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
   15e9e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   15ea2:	607b      	str	r3, [r7, #4]
	uint8_t str_descr_idx = 0U;
   15ea4:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
   15ea6:	46a8      	mov	r8, r5
	struct usb_cfg_data *cfg_data = NULL;
   15ea8:	46a9      	mov	r9, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
   15eaa:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
   15eac:	e0b2      	b.n	16014 <usb_fix_descriptor+0x180>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
   15eae:	78e3      	ldrb	r3, [r4, #3]
   15eb0:	2b00      	cmp	r3, #0
   15eb2:	f040 80ad 	bne.w	16010 <usb_fix_descriptor+0x17c>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
   15eb6:	78a3      	ldrb	r3, [r4, #2]
   15eb8:	b94b      	cbnz	r3, 15ece <usb_fix_descriptor+0x3a>
				cfg_data = usb_get_cfg_data(if_descr);
   15eba:	4620      	mov	r0, r4
   15ebc:	f7ff ff52 	bl	15d64 <usb_get_cfg_data>
				if (!cfg_data) {
   15ec0:	4681      	mov	r9, r0
   15ec2:	b148      	cbz	r0, 15ed8 <usb_fix_descriptor+0x44>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
   15ec4:	6883      	ldr	r3, [r0, #8]
   15ec6:	b113      	cbz	r3, 15ece <usb_fix_descriptor+0x3a>
					cfg_data->interface_config(head,
   15ec8:	4641      	mov	r1, r8
   15eca:	4620      	mov	r0, r4
   15ecc:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
   15ece:	f108 0801 	add.w	r8, r8, #1
   15ed2:	fa5f f888 	uxtb.w	r8, r8
			break;
   15ed6:	e09b      	b.n	16010 <usb_fix_descriptor+0x17c>
					LOG_ERR("There is no usb_cfg_data "
   15ed8:	466d      	mov	r5, sp
   15eda:	b088      	sub	sp, #32
   15edc:	4669      	mov	r1, sp
   15ede:	f111 0210 	adds.w	r2, r1, #16
   15ee2:	d00d      	beq.n	15f00 <usb_fix_descriptor+0x6c>
   15ee4:	230c      	movs	r3, #12
   15ee6:	b13a      	cbz	r2, 15ef8 <usb_fix_descriptor+0x64>
   15ee8:	4618      	mov	r0, r3
   15eea:	2b04      	cmp	r3, #4
   15eec:	dd01      	ble.n	15ef2 <usb_fix_descriptor+0x5e>
   15eee:	4e71      	ldr	r6, [pc, #452]	; (160b4 <usb_fix_descriptor+0x220>)
   15ef0:	614e      	str	r6, [r1, #20]
   15ef2:	2808      	cmp	r0, #8
   15ef4:	dd07      	ble.n	15f06 <usb_fix_descriptor+0x72>
   15ef6:	618c      	str	r4, [r1, #24]
   15ef8:	2b0b      	cmp	r3, #11
   15efa:	dd29      	ble.n	15f50 <usb_fix_descriptor+0xbc>
   15efc:	230c      	movs	r3, #12
   15efe:	e004      	b.n	15f0a <usb_fix_descriptor+0x76>
   15f00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   15f04:	e7ef      	b.n	15ee6 <usb_fix_descriptor+0x52>
   15f06:	f06f 031b 	mvn.w	r3, #27
   15f0a:	b13a      	cbz	r2, 15f1c <usb_fix_descriptor+0x88>
   15f0c:	2003      	movs	r0, #3
   15f0e:	7038      	strb	r0, [r7, #0]
   15f10:	2000      	movs	r0, #0
   15f12:	7078      	strb	r0, [r7, #1]
   15f14:	70b8      	strb	r0, [r7, #2]
   15f16:	70f8      	strb	r0, [r7, #3]
   15f18:	6838      	ldr	r0, [r7, #0]
   15f1a:	6108      	str	r0, [r1, #16]
   15f1c:	2100      	movs	r1, #0
   15f1e:	f36f 0100 	bfc	r1, #0, #1
   15f22:	f36f 0141 	bfc	r1, #1, #1
   15f26:	f36f 0182 	bfc	r1, #2, #1
   15f2a:	f36f 01c5 	bfc	r1, #3, #3
   15f2e:	2001      	movs	r0, #1
   15f30:	f360 1188 	bfi	r1, r0, #6, #3
   15f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
   15f38:	f363 2153 	bfi	r1, r3, #9, #11
   15f3c:	f36f 511f 	bfc	r1, #20, #12
   15f40:	2300      	movs	r3, #0
   15f42:	485d      	ldr	r0, [pc, #372]	; (160b8 <usb_fix_descriptor+0x224>)
   15f44:	f7fe f8da 	bl	140fc <z_impl_z_log_msg_static_create>
   15f48:	46ad      	mov	sp, r5
					return -1;
   15f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f4e:	e0a9      	b.n	160a4 <usb_fix_descriptor+0x210>
					LOG_ERR("There is no usb_cfg_data "
   15f50:	f06f 031b 	mvn.w	r3, #27
   15f54:	e7d9      	b.n	15f0a <usb_fix_descriptor+0x76>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
   15f56:	f1b9 0f00 	cmp.w	r9, #0
   15f5a:	d029      	beq.n	15fb0 <usb_fix_descriptor+0x11c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
   15f5c:	1d3a      	adds	r2, r7, #4
   15f5e:	4649      	mov	r1, r9
   15f60:	4620      	mov	r0, r4
   15f62:	f015 ff0a 	bl	2bd7a <usb_validate_ep_cfg_data>
   15f66:	2800      	cmp	r0, #0
   15f68:	d052      	beq.n	16010 <usb_fix_descriptor+0x17c>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
   15f6a:	4b54      	ldr	r3, [pc, #336]	; (160bc <usb_fix_descriptor+0x228>)
   15f6c:	61fb      	str	r3, [r7, #28]
   15f6e:	2302      	movs	r3, #2
   15f70:	703b      	strb	r3, [r7, #0]
   15f72:	2300      	movs	r3, #0
   15f74:	707b      	strb	r3, [r7, #1]
   15f76:	70bb      	strb	r3, [r7, #2]
   15f78:	70fb      	strb	r3, [r7, #3]
   15f7a:	683a      	ldr	r2, [r7, #0]
   15f7c:	61ba      	str	r2, [r7, #24]
   15f7e:	4619      	mov	r1, r3
   15f80:	f363 0100 	bfi	r1, r3, #0, #1
   15f84:	f363 0141 	bfi	r1, r3, #1, #1
   15f88:	f363 0182 	bfi	r1, r3, #2, #1
   15f8c:	f363 01c5 	bfi	r1, r3, #3, #3
   15f90:	2201      	movs	r2, #1
   15f92:	f362 1188 	bfi	r1, r2, #6, #3
   15f96:	2208      	movs	r2, #8
   15f98:	f362 2153 	bfi	r1, r2, #9, #11
   15f9c:	f363 511f 	bfi	r1, r3, #20, #12
   15fa0:	f107 0218 	add.w	r2, r7, #24
   15fa4:	4844      	ldr	r0, [pc, #272]	; (160b8 <usb_fix_descriptor+0x224>)
   15fa6:	f7fe f8a9 	bl	140fc <z_impl_z_log_msg_static_create>
				return -1;
   15faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fae:	e079      	b.n	160a4 <usb_fix_descriptor+0x210>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
   15fb0:	4b43      	ldr	r3, [pc, #268]	; (160c0 <usb_fix_descriptor+0x22c>)
   15fb2:	637b      	str	r3, [r7, #52]	; 0x34
   15fb4:	2302      	movs	r3, #2
   15fb6:	703b      	strb	r3, [r7, #0]
   15fb8:	2300      	movs	r3, #0
   15fba:	707b      	strb	r3, [r7, #1]
   15fbc:	70bb      	strb	r3, [r7, #2]
   15fbe:	70fb      	strb	r3, [r7, #3]
   15fc0:	683a      	ldr	r2, [r7, #0]
   15fc2:	633a      	str	r2, [r7, #48]	; 0x30
   15fc4:	4619      	mov	r1, r3
   15fc6:	f363 0100 	bfi	r1, r3, #0, #1
   15fca:	f363 0141 	bfi	r1, r3, #1, #1
   15fce:	f363 0182 	bfi	r1, r3, #2, #1
   15fd2:	f363 01c5 	bfi	r1, r3, #3, #3
   15fd6:	2201      	movs	r2, #1
   15fd8:	f362 1188 	bfi	r1, r2, #6, #3
   15fdc:	2208      	movs	r2, #8
   15fde:	f362 2153 	bfi	r1, r2, #9, #11
   15fe2:	f363 511f 	bfi	r1, r3, #20, #12
   15fe6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   15fea:	4833      	ldr	r0, [pc, #204]	; (160b8 <usb_fix_descriptor+0x224>)
   15fec:	f7fe f886 	bl	140fc <z_impl_z_log_msg_static_create>
				return -1;
   15ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ff4:	e056      	b.n	160a4 <usb_fix_descriptor+0x210>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   15ff6:	2d03      	cmp	r5, #3
   15ff8:	d022      	beq.n	16040 <usb_fix_descriptor+0x1ac>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
   15ffa:	bb2d      	cbnz	r5, 16048 <usb_fix_descriptor+0x1b4>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
   15ffc:	b346      	cbz	r6, 16050 <usb_fix_descriptor+0x1bc>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   15ffe:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16000:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
   16002:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16006:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
   16008:	f886 8004 	strb.w	r8, [r6, #4]
			}

			str_descr_idx += 1U;
   1600c:	3501      	adds	r5, #1
   1600e:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   16010:	7823      	ldrb	r3, [r4, #0]
   16012:	441c      	add	r4, r3
	while (head->bLength != 0U) {
   16014:	7823      	ldrb	r3, [r4, #0]
   16016:	2b00      	cmp	r3, #0
   16018:	d03f      	beq.n	1609a <usb_fix_descriptor+0x206>
		switch (head->bDescriptorType) {
   1601a:	7863      	ldrb	r3, [r4, #1]
   1601c:	2b05      	cmp	r3, #5
   1601e:	d8f7      	bhi.n	16010 <usb_fix_descriptor+0x17c>
   16020:	a201      	add	r2, pc, #4	; (adr r2, 16028 <usb_fix_descriptor+0x194>)
   16022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16026:	bf00      	nop
   16028:	00015ff7 	.word	0x00015ff7
   1602c:	00016011 	.word	0x00016011
   16030:	00016097 	.word	0x00016097
   16034:	00015ff7 	.word	0x00015ff7
   16038:	00015eaf 	.word	0x00015eaf
   1603c:	00015f57 	.word	0x00015f57
				usb_fix_ascii_sn_string_descriptor(sn);
   16040:	4620      	mov	r0, r4
   16042:	f7ff fee5 	bl	15e10 <usb_fix_ascii_sn_string_descriptor>
   16046:	e7d8      	b.n	15ffa <usb_fix_descriptor+0x166>
				ascii7_to_utf16le(head);
   16048:	4620      	mov	r0, r4
   1604a:	f015 fe84 	bl	2bd56 <ascii7_to_utf16le>
   1604e:	e7dd      	b.n	1600c <usb_fix_descriptor+0x178>
					LOG_ERR("Incomplete device descriptor");
   16050:	4b1c      	ldr	r3, [pc, #112]	; (160c4 <usb_fix_descriptor+0x230>)
   16052:	64fb      	str	r3, [r7, #76]	; 0x4c
   16054:	2302      	movs	r3, #2
   16056:	703b      	strb	r3, [r7, #0]
   16058:	2300      	movs	r3, #0
   1605a:	707b      	strb	r3, [r7, #1]
   1605c:	70bb      	strb	r3, [r7, #2]
   1605e:	70fb      	strb	r3, [r7, #3]
   16060:	683a      	ldr	r2, [r7, #0]
   16062:	64ba      	str	r2, [r7, #72]	; 0x48
   16064:	4619      	mov	r1, r3
   16066:	f363 0100 	bfi	r1, r3, #0, #1
   1606a:	f363 0141 	bfi	r1, r3, #1, #1
   1606e:	f363 0182 	bfi	r1, r3, #2, #1
   16072:	f363 01c5 	bfi	r1, r3, #3, #3
   16076:	2201      	movs	r2, #1
   16078:	f362 1188 	bfi	r1, r2, #6, #3
   1607c:	2208      	movs	r2, #8
   1607e:	f362 2153 	bfi	r1, r2, #9, #11
   16082:	f363 511f 	bfi	r1, r3, #20, #12
   16086:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1608a:	480b      	ldr	r0, [pc, #44]	; (160b8 <usb_fix_descriptor+0x224>)
   1608c:	f7fe f836 	bl	140fc <z_impl_z_log_msg_static_create>
					return -1;
   16090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16094:	e006      	b.n	160a4 <usb_fix_descriptor+0x210>
			cfg_descr = (struct usb_cfg_descriptor *)head;
   16096:	4626      	mov	r6, r4
   16098:	e7ba      	b.n	16010 <usb_fix_descriptor+0x17c>
	}

	if ((head + 1) != __usb_descriptor_end) {
   1609a:	1ca0      	adds	r0, r4, #2
   1609c:	4b0a      	ldr	r3, [pc, #40]	; (160c8 <usb_fix_descriptor+0x234>)
   1609e:	4298      	cmp	r0, r3
   160a0:	d104      	bne.n	160ac <usb_fix_descriptor+0x218>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
   160a2:	2000      	movs	r0, #0
}
   160a4:	3754      	adds	r7, #84	; 0x54
   160a6:	46bd      	mov	sp, r7
   160a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return usb_fix_descriptor(head + 1);
   160ac:	f7ff fef2 	bl	15e94 <usb_fix_descriptor>
   160b0:	e7f8      	b.n	160a4 <usb_fix_descriptor+0x210>
   160b2:	bf00      	nop
   160b4:	00032a7c 	.word	0x00032a7c
   160b8:	00031dcc 	.word	0x00031dcc
   160bc:	00032ae0 	.word	0x00032ae0
   160c0:	00032a9c 	.word	0x00032a9c
   160c4:	00032b00 	.word	0x00032b00
   160c8:	20000d2f 	.word	0x20000d2f

000160cc <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   160cc:	b510      	push	{r4, lr}
   160ce:	b088      	sub	sp, #32
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   160d0:	4816      	ldr	r0, [pc, #88]	; (1612c <usb_get_device_descriptor+0x60>)
   160d2:	f7ff fedf 	bl	15e94 <usb_fix_descriptor>
   160d6:	b910      	cbnz	r0, 160de <usb_get_device_descriptor+0x12>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   160d8:	4814      	ldr	r0, [pc, #80]	; (1612c <usb_get_device_descriptor+0x60>)
}
   160da:	b008      	add	sp, #32
   160dc:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to fixup USB descriptor");
   160de:	4b14      	ldr	r3, [pc, #80]	; (16130 <usb_get_device_descriptor+0x64>)
   160e0:	9307      	str	r3, [sp, #28]
   160e2:	2302      	movs	r3, #2
   160e4:	f88d 3004 	strb.w	r3, [sp, #4]
   160e8:	2400      	movs	r4, #0
   160ea:	f88d 4005 	strb.w	r4, [sp, #5]
   160ee:	f88d 4006 	strb.w	r4, [sp, #6]
   160f2:	f88d 4007 	strb.w	r4, [sp, #7]
   160f6:	9b01      	ldr	r3, [sp, #4]
   160f8:	9306      	str	r3, [sp, #24]
   160fa:	4621      	mov	r1, r4
   160fc:	f364 0100 	bfi	r1, r4, #0, #1
   16100:	f364 0141 	bfi	r1, r4, #1, #1
   16104:	f364 0182 	bfi	r1, r4, #2, #1
   16108:	f364 01c5 	bfi	r1, r4, #3, #3
   1610c:	2301      	movs	r3, #1
   1610e:	f363 1188 	bfi	r1, r3, #6, #3
   16112:	2308      	movs	r3, #8
   16114:	f363 2153 	bfi	r1, r3, #9, #11
   16118:	f364 511f 	bfi	r1, r4, #20, #12
   1611c:	4623      	mov	r3, r4
   1611e:	aa06      	add	r2, sp, #24
   16120:	4804      	ldr	r0, [pc, #16]	; (16134 <usb_get_device_descriptor+0x68>)
   16122:	f7fd ffeb 	bl	140fc <z_impl_z_log_msg_static_create>
		return NULL;
   16126:	4620      	mov	r0, r4
   16128:	e7d7      	b.n	160da <usb_get_device_descriptor+0xe>
   1612a:	bf00      	nop
   1612c:	20000c68 	.word	0x20000c68
   16130:	00032b20 	.word	0x00032b20
   16134:	00031dcc 	.word	0x00031dcc

00016138 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   16138:	2300      	movs	r3, #0
   1613a:	e000      	b.n	1613e <usb_ep_get_transfer+0x6>
   1613c:	3301      	adds	r3, #1
   1613e:	2b03      	cmp	r3, #3
   16140:	d812      	bhi.n	16168 <usb_ep_get_transfer+0x30>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   16142:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   16146:	4909      	ldr	r1, [pc, #36]	; (1616c <usb_ep_get_transfer+0x34>)
   16148:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   1614c:	4282      	cmp	r2, r0
   1614e:	d1f5      	bne.n	1613c <usb_ep_get_transfer+0x4>
   16150:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
   16154:	4a05      	ldr	r2, [pc, #20]	; (1616c <usb_ep_get_transfer+0x34>)
   16156:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1615a:	6852      	ldr	r2, [r2, #4]
   1615c:	2a00      	cmp	r2, #0
   1615e:	d0ed      	beq.n	1613c <usb_ep_get_transfer+0x4>
			return &ut_data[i];
   16160:	4802      	ldr	r0, [pc, #8]	; (1616c <usb_ep_get_transfer+0x34>)
   16162:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   16166:	4770      	bx	lr
		}
	}

	return NULL;
   16168:	2000      	movs	r0, #0
}
   1616a:	4770      	bx	lr
   1616c:	2000383c 	.word	0x2000383c

00016170 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   16170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16174:	b083      	sub	sp, #12
   16176:	af00      	add	r7, sp, #0
   16178:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
   1617a:	f810 5c34 	ldrb.w	r5, [r0, #-52]

	if (trans->status != -EBUSY) {
   1617e:	f850 3c30 	ldr.w	r3, [r0, #-48]
   16182:	f113 0f10 	cmn.w	r3, #16
   16186:	d10d      	bne.n	161a4 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   16188:	6903      	ldr	r3, [r0, #16]
   1618a:	f013 0f02 	tst.w	r3, #2
   1618e:	f000 808e 	beq.w	162ae <usb_transfer_work+0x13e>
		if (!trans->bsize) {
   16192:	f850 2c28 	ldr.w	r2, [r0, #-40]
   16196:	bb62      	cbnz	r2, 161f2 <usb_transfer_work+0x82>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   16198:	f013 0f04 	tst.w	r3, #4
   1619c:	d022      	beq.n	161e4 <usb_transfer_work+0x74>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
   1619e:	2300      	movs	r3, #0
   161a0:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   161a4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   161a8:	f113 0f10 	cmn.w	r3, #16
   161ac:	d016      	beq.n	161dc <usb_transfer_work+0x6c>
   161ae:	f854 6c20 	ldr.w	r6, [r4, #-32]
   161b2:	b19e      	cbz	r6, 161dc <usb_transfer_work+0x6c>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   161b4:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
   161b8:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
   161bc:	f01a fcda 	bl	30b74 <k_is_in_isr>
   161c0:	2800      	cmp	r0, #0
   161c2:	f040 80e8 	bne.w	16396 <usb_transfer_work+0x226>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
   161c6:	2300      	movs	r3, #0
   161c8:	f844 3c20 	str.w	r3, [r4, #-32]
		k_sem_give(&trans->sem);
   161cc:	f1a4 0018 	sub.w	r0, r4, #24
	z_impl_k_sem_give(sem);
   161d0:	f010 f84c 	bl	2626c <z_impl_k_sem_give>

		/* Transfer completion callback */
		cb(ep, tsize, priv);
   161d4:	464a      	mov	r2, r9
   161d6:	4641      	mov	r1, r8
   161d8:	4628      	mov	r0, r5
   161da:	47b0      	blx	r6
	}
}
   161dc:	370c      	adds	r7, #12
   161de:	46bd      	mov	sp, r7
   161e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				usb_write(ep, NULL, 0, NULL);
   161e4:	2300      	movs	r3, #0
   161e6:	461a      	mov	r2, r3
   161e8:	4619      	mov	r1, r3
   161ea:	4628      	mov	r0, r5
   161ec:	f7ff fb64 	bl	158b8 <usb_write>
   161f0:	e7d5      	b.n	1619e <usb_transfer_work+0x2e>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   161f2:	1d3b      	adds	r3, r7, #4
   161f4:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   161f8:	4628      	mov	r0, r5
   161fa:	f7ff fb5d 	bl	158b8 <usb_write>
		if (ret) {
   161fe:	4684      	mov	ip, r0
   16200:	b980      	cbnz	r0, 16224 <usb_transfer_work+0xb4>
		trans->buffer += bytes;
   16202:	f854 2c2c 	ldr.w	r2, [r4, #-44]
   16206:	687b      	ldr	r3, [r7, #4]
   16208:	441a      	add	r2, r3
   1620a:	f844 2c2c 	str.w	r2, [r4, #-44]
		trans->bsize -= bytes;
   1620e:	f854 2c28 	ldr.w	r2, [r4, #-40]
   16212:	1ad2      	subs	r2, r2, r3
   16214:	f844 2c28 	str.w	r2, [r4, #-40]
		trans->tsize += bytes;
   16218:	f854 2c24 	ldr.w	r2, [r4, #-36]
   1621c:	4413      	add	r3, r2
   1621e:	f844 3c24 	str.w	r3, [r4, #-36]
   16222:	e7bf      	b.n	161a4 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   16224:	466e      	mov	r6, sp
   16226:	b088      	sub	sp, #32
   16228:	466b      	mov	r3, sp
   1622a:	f113 0210 	adds.w	r2, r3, #16
   1622e:	d038      	beq.n	162a2 <usb_transfer_work+0x132>
   16230:	2110      	movs	r1, #16
   16232:	b16a      	cbz	r2, 16250 <usb_transfer_work+0xe0>
   16234:	4608      	mov	r0, r1
   16236:	2904      	cmp	r1, #4
   16238:	dd03      	ble.n	16242 <usb_transfer_work+0xd2>
   1623a:	f8df e164 	ldr.w	lr, [pc, #356]	; 163a0 <usb_transfer_work+0x230>
   1623e:	f8c3 e014 	str.w	lr, [r3, #20]
   16242:	2808      	cmp	r0, #8
   16244:	dd01      	ble.n	1624a <usb_transfer_work+0xda>
   16246:	f8c3 c018 	str.w	ip, [r3, #24]
   1624a:	280c      	cmp	r0, #12
   1624c:	dd00      	ble.n	16250 <usb_transfer_work+0xe0>
   1624e:	61dd      	str	r5, [r3, #28]
   16250:	290f      	cmp	r1, #15
   16252:	dd29      	ble.n	162a8 <usb_transfer_work+0x138>
   16254:	f04f 0c10 	mov.w	ip, #16
   16258:	b13a      	cbz	r2, 1626a <usb_transfer_work+0xfa>
   1625a:	2104      	movs	r1, #4
   1625c:	7039      	strb	r1, [r7, #0]
   1625e:	2100      	movs	r1, #0
   16260:	7079      	strb	r1, [r7, #1]
   16262:	70b9      	strb	r1, [r7, #2]
   16264:	70f9      	strb	r1, [r7, #3]
   16266:	6838      	ldr	r0, [r7, #0]
   16268:	6118      	str	r0, [r3, #16]
   1626a:	2100      	movs	r1, #0
   1626c:	f36f 0100 	bfc	r1, #0, #1
   16270:	f36f 0141 	bfc	r1, #1, #1
   16274:	f36f 0182 	bfc	r1, #2, #1
   16278:	f36f 01c5 	bfc	r1, #3, #3
   1627c:	2301      	movs	r3, #1
   1627e:	f363 1188 	bfi	r1, r3, #6, #3
   16282:	f3cc 030a 	ubfx	r3, ip, #0, #11
   16286:	f363 2153 	bfi	r1, r3, #9, #11
   1628a:	f36f 511f 	bfc	r1, #20, #12
   1628e:	2300      	movs	r3, #0
   16290:	4844      	ldr	r0, [pc, #272]	; (163a4 <usb_transfer_work+0x234>)
   16292:	f7fd ff33 	bl	140fc <z_impl_z_log_msg_static_create>
   16296:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
   16298:	f06f 0315 	mvn.w	r3, #21
   1629c:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   162a0:	e780      	b.n	161a4 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   162a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   162a6:	e7c4      	b.n	16232 <usb_transfer_work+0xc2>
   162a8:	f06f 0c1b 	mvn.w	ip, #27
   162ac:	e7d4      	b.n	16258 <usb_transfer_work+0xe8>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   162ae:	1d3b      	adds	r3, r7, #4
   162b0:	f850 2c28 	ldr.w	r2, [r0, #-40]
   162b4:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   162b8:	4628      	mov	r0, r5
   162ba:	f00b ff0f 	bl	220dc <usb_dc_ep_read_wait>
		if (ret) {
   162be:	4606      	mov	r6, r0
   162c0:	b9a8      	cbnz	r0, 162ee <usb_transfer_work+0x17e>
		trans->buffer += bytes;
   162c2:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   162c6:	687e      	ldr	r6, [r7, #4]
   162c8:	4433      	add	r3, r6
   162ca:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   162ce:	f854 3c28 	ldr.w	r3, [r4, #-40]
   162d2:	1b9b      	subs	r3, r3, r6
   162d4:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   162d8:	f854 3c24 	ldr.w	r3, [r4, #-36]
   162dc:	4433      	add	r3, r6
   162de:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   162e2:	2e00      	cmp	r6, #0
   162e4:	d146      	bne.n	16374 <usb_transfer_work+0x204>
			trans->status = 0;
   162e6:	2300      	movs	r3, #0
   162e8:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   162ec:	e75a      	b.n	161a4 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   162ee:	46e8      	mov	r8, sp
   162f0:	b088      	sub	sp, #32
   162f2:	466b      	mov	r3, sp
   162f4:	f113 0210 	adds.w	r2, r3, #16
   162f8:	d036      	beq.n	16368 <usb_transfer_work+0x1f8>
   162fa:	2110      	movs	r1, #16
   162fc:	b162      	cbz	r2, 16318 <usb_transfer_work+0x1a8>
   162fe:	4608      	mov	r0, r1
   16300:	2904      	cmp	r1, #4
   16302:	dd03      	ble.n	1630c <usb_transfer_work+0x19c>
   16304:	f8df c098 	ldr.w	ip, [pc, #152]	; 163a0 <usb_transfer_work+0x230>
   16308:	f8c3 c014 	str.w	ip, [r3, #20]
   1630c:	2808      	cmp	r0, #8
   1630e:	dd00      	ble.n	16312 <usb_transfer_work+0x1a2>
   16310:	619e      	str	r6, [r3, #24]
   16312:	280c      	cmp	r0, #12
   16314:	dd00      	ble.n	16318 <usb_transfer_work+0x1a8>
   16316:	61dd      	str	r5, [r3, #28]
   16318:	290f      	cmp	r1, #15
   1631a:	dd28      	ble.n	1636e <usb_transfer_work+0x1fe>
   1631c:	2610      	movs	r6, #16
   1631e:	b13a      	cbz	r2, 16330 <usb_transfer_work+0x1c0>
   16320:	2104      	movs	r1, #4
   16322:	7039      	strb	r1, [r7, #0]
   16324:	2100      	movs	r1, #0
   16326:	7079      	strb	r1, [r7, #1]
   16328:	70b9      	strb	r1, [r7, #2]
   1632a:	70f9      	strb	r1, [r7, #3]
   1632c:	6838      	ldr	r0, [r7, #0]
   1632e:	6118      	str	r0, [r3, #16]
   16330:	2100      	movs	r1, #0
   16332:	f36f 0100 	bfc	r1, #0, #1
   16336:	f36f 0141 	bfc	r1, #1, #1
   1633a:	f36f 0182 	bfc	r1, #2, #1
   1633e:	f36f 01c5 	bfc	r1, #3, #3
   16342:	2301      	movs	r3, #1
   16344:	f363 1188 	bfi	r1, r3, #6, #3
   16348:	f3c6 060a 	ubfx	r6, r6, #0, #11
   1634c:	f366 2153 	bfi	r1, r6, #9, #11
   16350:	f36f 511f 	bfc	r1, #20, #12
   16354:	2300      	movs	r3, #0
   16356:	4813      	ldr	r0, [pc, #76]	; (163a4 <usb_transfer_work+0x234>)
   16358:	f7fd fed0 	bl	140fc <z_impl_z_log_msg_static_create>
   1635c:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
   1635e:	f06f 0315 	mvn.w	r3, #21
   16362:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   16366:	e71d      	b.n	161a4 <usb_transfer_work+0x34>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   16368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1636c:	e7c6      	b.n	162fc <usb_transfer_work+0x18c>
   1636e:	f06f 061b 	mvn.w	r6, #27
   16372:	e7d4      	b.n	1631e <usb_transfer_work+0x1ae>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   16374:	4628      	mov	r0, r5
   16376:	f00c f811 	bl	2239c <usb_dc_ep_mps>
   1637a:	fbb6 f3f0 	udiv	r3, r6, r0
   1637e:	fb00 6613 	mls	r6, r0, r3, r6
   16382:	2e00      	cmp	r6, #0
   16384:	d1af      	bne.n	162e6 <usb_transfer_work+0x176>
   16386:	f854 3c28 	ldr.w	r3, [r4, #-40]
   1638a:	2b00      	cmp	r3, #0
   1638c:	d0ab      	beq.n	162e6 <usb_transfer_work+0x176>
		usb_dc_ep_read_continue(ep);
   1638e:	4628      	mov	r0, r5
   16390:	f00b ff4e 	bl	22230 <usb_dc_ep_read_continue>
   16394:	e706      	b.n	161a4 <usb_transfer_work+0x34>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   16396:	4621      	mov	r1, r4
   16398:	4803      	ldr	r0, [pc, #12]	; (163a8 <usb_transfer_work+0x238>)
   1639a:	f01a fe08 	bl	30fae <k_work_submit_to_queue>
			return;
   1639e:	e71d      	b.n	161dc <usb_transfer_work+0x6c>
   163a0:	00032b50 	.word	0x00032b50
   163a4:	00031de4 	.word	0x00031de4
   163a8:	20001ea8 	.word	0x20001ea8

000163ac <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
   163ac:	b570      	push	{r4, r5, r6, lr}
   163ae:	b088      	sub	sp, #32
   163b0:	4606      	mov	r6, r0
   163b2:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   163b4:	f7ff fec0 	bl	16138 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   163b8:	1e63      	subs	r3, r4, #1
   163ba:	b2db      	uxtb	r3, r3
   163bc:	2b01      	cmp	r3, #1
   163be:	d80a      	bhi.n	163d6 <usb_transfer_ep_callback+0x2a>
   163c0:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
   163c2:	b150      	cbz	r0, 163da <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   163c4:	f01a fbd6 	bl	30b74 <k_is_in_isr>
   163c8:	b108      	cbz	r0, 163ce <usb_transfer_ep_callback+0x22>
   163ca:	2c01      	cmp	r4, #1
   163cc:	d134      	bne.n	16438 <usb_transfer_ep_callback+0x8c>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
   163ce:	f105 0034 	add.w	r0, r5, #52	; 0x34
   163d2:	f7ff fecd 	bl	16170 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   163d6:	b008      	add	sp, #32
   163d8:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
   163da:	2c01      	cmp	r4, #1
   163dc:	d1fb      	bne.n	163d6 <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   163de:	466b      	mov	r3, sp
   163e0:	2201      	movs	r2, #1
   163e2:	a901      	add	r1, sp, #4
   163e4:	4630      	mov	r0, r6
   163e6:	f00b fe79 	bl	220dc <usb_dc_ep_read_wait>
			} while (bytes);
   163ea:	9b00      	ldr	r3, [sp, #0]
   163ec:	2b00      	cmp	r3, #0
   163ee:	d1f6      	bne.n	163de <usb_transfer_ep_callback+0x32>
			LOG_ERR("RX data lost, no transfer");
   163f0:	4b14      	ldr	r3, [pc, #80]	; (16444 <usb_transfer_ep_callback+0x98>)
   163f2:	9307      	str	r3, [sp, #28]
   163f4:	2302      	movs	r3, #2
   163f6:	f88d 3004 	strb.w	r3, [sp, #4]
   163fa:	2300      	movs	r3, #0
   163fc:	f88d 3005 	strb.w	r3, [sp, #5]
   16400:	f88d 3006 	strb.w	r3, [sp, #6]
   16404:	f88d 3007 	strb.w	r3, [sp, #7]
   16408:	9a01      	ldr	r2, [sp, #4]
   1640a:	9206      	str	r2, [sp, #24]
   1640c:	4619      	mov	r1, r3
   1640e:	f363 0100 	bfi	r1, r3, #0, #1
   16412:	f363 0141 	bfi	r1, r3, #1, #1
   16416:	f363 0182 	bfi	r1, r3, #2, #1
   1641a:	f363 01c5 	bfi	r1, r3, #3, #3
   1641e:	2201      	movs	r2, #1
   16420:	f362 1188 	bfi	r1, r2, #6, #3
   16424:	2208      	movs	r2, #8
   16426:	f362 2153 	bfi	r1, r2, #9, #11
   1642a:	f363 511f 	bfi	r1, r3, #20, #12
   1642e:	aa06      	add	r2, sp, #24
   16430:	4805      	ldr	r0, [pc, #20]	; (16448 <usb_transfer_ep_callback+0x9c>)
   16432:	f7fd fe63 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   16436:	e7ce      	b.n	163d6 <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   16438:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1643c:	4803      	ldr	r0, [pc, #12]	; (1644c <usb_transfer_ep_callback+0xa0>)
   1643e:	f01a fdb6 	bl	30fae <k_work_submit_to_queue>
   16442:	e7c8      	b.n	163d6 <usb_transfer_ep_callback+0x2a>
   16444:	00032b70 	.word	0x00032b70
   16448:	00031de4 	.word	0x00031de4
   1644c:	20001ea8 	.word	0x20001ea8

00016450 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   16450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16454:	b08b      	sub	sp, #44	; 0x2c
   16456:	af00      	add	r7, sp, #0
   16458:	4606      	mov	r6, r0
   1645a:	6079      	str	r1, [r7, #4]
   1645c:	4691      	mov	r9, r2
   1645e:	469a      	mov	sl, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   16460:	f015 fd2e 	bl	2bec0 <usb_transfer_is_busy>
   16464:	2800      	cmp	r0, #0
   16466:	f040 80c7 	bne.w	165f8 <usb_transfer+0x1a8>
	__asm__ volatile(
   1646a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1646e:	f3ef 8511 	mrs	r5, BASEPRI
   16472:	f383 8812 	msr	BASEPRI_MAX, r3
   16476:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1647a:	2400      	movs	r4, #0
   1647c:	2c03      	cmp	r4, #3
   1647e:	d839      	bhi.n	164f4 <usb_transfer+0xa4>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   16480:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   16484:	00c0      	lsls	r0, r0, #3
   16486:	3018      	adds	r0, #24
   16488:	4b5d      	ldr	r3, [pc, #372]	; (16600 <usb_transfer+0x1b0>)
   1648a:	4418      	add	r0, r3
   1648c:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   1648e:	2200      	movs	r2, #0
   16490:	2300      	movs	r3, #0
   16492:	f00f ff13 	bl	262bc <z_impl_k_sem_take>
   16496:	4680      	mov	r8, r0
   16498:	b108      	cbz	r0, 1649e <usb_transfer+0x4e>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1649a:	3401      	adds	r4, #1
   1649c:	e7ee      	b.n	1647c <usb_transfer+0x2c>
			trans = &ut_data[i];
   1649e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   164a2:	00e2      	lsls	r2, r4, #3
   164a4:	4b56      	ldr	r3, [pc, #344]	; (16600 <usb_transfer+0x1b0>)
   164a6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   164aa:	f8d4 b004 	ldr.w	fp, [r4, #4]
   164ae:	f11b 0f10 	cmn.w	fp, #16
   164b2:	d04a      	beq.n	1654a <usb_transfer+0xfa>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
   164b4:	549e      	strb	r6, [r3, r2]
	trans->buffer = data;
   164b6:	687b      	ldr	r3, [r7, #4]
   164b8:	60a3      	str	r3, [r4, #8]
	trans->bsize = dlen;
   164ba:	f8c4 900c 	str.w	r9, [r4, #12]
	trans->tsize = 0;
   164be:	2300      	movs	r3, #0
   164c0:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
   164c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   164c4:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
   164c6:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
	trans->priv = cb_data;
   164ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   164cc:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
   164ce:	f06f 030f 	mvn.w	r3, #15
   164d2:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   164d4:	4630      	mov	r0, r6
   164d6:	f00b ff61 	bl	2239c <usb_dc_ep_mps>
   164da:	2800      	cmp	r0, #0
   164dc:	d178      	bne.n	165d0 <usb_transfer+0x180>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
   164de:	f01a 0f02 	tst.w	sl, #2
   164e2:	f000 8084 	beq.w	165ee <usb_transfer+0x19e>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   164e6:	f104 0134 	add.w	r1, r4, #52	; 0x34
   164ea:	4846      	ldr	r0, [pc, #280]	; (16604 <usb_transfer+0x1b4>)
   164ec:	f01a fd5f 	bl	30fae <k_work_submit_to_queue>
	int key, ret = 0;
   164f0:	46c3      	mov	fp, r8
   164f2:	e021      	b.n	16538 <usb_transfer+0xe8>
		LOG_ERR("No transfer slot available");
   164f4:	4b44      	ldr	r3, [pc, #272]	; (16608 <usb_transfer+0x1b8>)
   164f6:	627b      	str	r3, [r7, #36]	; 0x24
   164f8:	2302      	movs	r3, #2
   164fa:	733b      	strb	r3, [r7, #12]
   164fc:	2300      	movs	r3, #0
   164fe:	737b      	strb	r3, [r7, #13]
   16500:	73bb      	strb	r3, [r7, #14]
   16502:	73fb      	strb	r3, [r7, #15]
   16504:	68fa      	ldr	r2, [r7, #12]
   16506:	623a      	str	r2, [r7, #32]
   16508:	4619      	mov	r1, r3
   1650a:	f363 0100 	bfi	r1, r3, #0, #1
   1650e:	f363 0141 	bfi	r1, r3, #1, #1
   16512:	f363 0182 	bfi	r1, r3, #2, #1
   16516:	f363 01c5 	bfi	r1, r3, #3, #3
   1651a:	2201      	movs	r2, #1
   1651c:	f362 1188 	bfi	r1, r2, #6, #3
   16520:	2208      	movs	r2, #8
   16522:	f362 2153 	bfi	r1, r2, #9, #11
   16526:	f363 511f 	bfi	r1, r3, #20, #12
   1652a:	f107 0220 	add.w	r2, r7, #32
   1652e:	4837      	ldr	r0, [pc, #220]	; (1660c <usb_transfer+0x1bc>)
   16530:	f7fd fde4 	bl	140fc <z_impl_z_log_msg_static_create>
		ret = -ENOMEM;
   16534:	f06f 0b0b 	mvn.w	fp, #11
	__asm__ volatile(
   16538:	f385 8811 	msr	BASEPRI, r5
   1653c:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   16540:	4658      	mov	r0, fp
   16542:	372c      	adds	r7, #44	; 0x2c
   16544:	46bd      	mov	sp, r7
   16546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
   1654a:	46e8      	mov	r8, sp
   1654c:	b088      	sub	sp, #32
   1654e:	466b      	mov	r3, sp
   16550:	f113 0210 	adds.w	r2, r3, #16
   16554:	d00f      	beq.n	16576 <usb_transfer+0x126>
   16556:	210c      	movs	r1, #12
   16558:	b14a      	cbz	r2, 1656e <usb_transfer+0x11e>
   1655a:	4608      	mov	r0, r1
   1655c:	2904      	cmp	r1, #4
   1655e:	dd03      	ble.n	16568 <usb_transfer+0x118>
   16560:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 16610 <usb_transfer+0x1c0>
   16564:	f8c3 c014 	str.w	ip, [r3, #20]
   16568:	2808      	cmp	r0, #8
   1656a:	dd07      	ble.n	1657c <usb_transfer+0x12c>
   1656c:	619e      	str	r6, [r3, #24]
   1656e:	290b      	cmp	r1, #11
   16570:	dd2b      	ble.n	165ca <usb_transfer+0x17a>
   16572:	260c      	movs	r6, #12
   16574:	e004      	b.n	16580 <usb_transfer+0x130>
   16576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1657a:	e7ed      	b.n	16558 <usb_transfer+0x108>
   1657c:	f06f 061b 	mvn.w	r6, #27
   16580:	b13a      	cbz	r2, 16592 <usb_transfer+0x142>
   16582:	2103      	movs	r1, #3
   16584:	7339      	strb	r1, [r7, #12]
   16586:	2100      	movs	r1, #0
   16588:	7379      	strb	r1, [r7, #13]
   1658a:	73b9      	strb	r1, [r7, #14]
   1658c:	73f9      	strb	r1, [r7, #15]
   1658e:	68f8      	ldr	r0, [r7, #12]
   16590:	6118      	str	r0, [r3, #16]
   16592:	2100      	movs	r1, #0
   16594:	f36f 0100 	bfc	r1, #0, #1
   16598:	f36f 0141 	bfc	r1, #1, #1
   1659c:	f36f 0182 	bfc	r1, #2, #1
   165a0:	f36f 01c5 	bfc	r1, #3, #3
   165a4:	2301      	movs	r3, #1
   165a6:	f363 1188 	bfi	r1, r3, #6, #3
   165aa:	f3c6 060a 	ubfx	r6, r6, #0, #11
   165ae:	f366 2153 	bfi	r1, r6, #9, #11
   165b2:	f36f 511f 	bfc	r1, #20, #12
   165b6:	2300      	movs	r3, #0
   165b8:	4814      	ldr	r0, [pc, #80]	; (1660c <usb_transfer+0x1bc>)
   165ba:	f7fd fd9f 	bl	140fc <z_impl_z_log_msg_static_create>
   165be:	46c5      	mov	sp, r8
		k_sem_give(&trans->sem);
   165c0:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
   165c4:	f00f fe52 	bl	2626c <z_impl_k_sem_give>
		goto done;
   165c8:	e7b6      	b.n	16538 <usb_transfer+0xe8>
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
   165ca:	f06f 061b 	mvn.w	r6, #27
   165ce:	e7d7      	b.n	16580 <usb_transfer+0x130>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   165d0:	4630      	mov	r0, r6
   165d2:	f00b fee3 	bl	2239c <usb_dc_ep_mps>
   165d6:	fbb9 f3f0 	udiv	r3, r9, r0
   165da:	fb00 9313 	mls	r3, r0, r3, r9
   165de:	2b00      	cmp	r3, #0
   165e0:	f43f af7d 	beq.w	164de <usb_transfer+0x8e>
		trans->flags |= USB_TRANS_NO_ZLP;
   165e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   165e6:	f043 0304 	orr.w	r3, r3, #4
   165ea:	6463      	str	r3, [r4, #68]	; 0x44
   165ec:	e777      	b.n	164de <usb_transfer+0x8e>
		ret = usb_dc_ep_read_continue(ep);
   165ee:	4630      	mov	r0, r6
   165f0:	f00b fe1e 	bl	22230 <usb_dc_ep_read_continue>
   165f4:	4683      	mov	fp, r0
   165f6:	e79f      	b.n	16538 <usb_transfer+0xe8>
		return -EBUSY;
   165f8:	f06f 0b0f 	mvn.w	fp, #15
   165fc:	e7a0      	b.n	16540 <usb_transfer+0xf0>
   165fe:	bf00      	nop
   16600:	2000383c 	.word	0x2000383c
   16604:	20001ea8 	.word	0x20001ea8
   16608:	00032b8c 	.word	0x00032b8c
   1660c:	00031de4 	.word	0x00031de4
   16610:	00032ba8 	.word	0x00032ba8

00016614 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   16614:	b510      	push	{r4, lr}
	__asm__ volatile(
   16616:	f04f 0340 	mov.w	r3, #64	; 0x40
   1661a:	f3ef 8411 	mrs	r4, BASEPRI
   1661e:	f383 8812 	msr	BASEPRI_MAX, r3
   16622:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   16626:	f7ff fd87 	bl	16138 <usb_ep_get_transfer>
	if (!trans) {
   1662a:	b120      	cbz	r0, 16636 <usb_cancel_transfer+0x22>
   1662c:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
   1662e:	6843      	ldr	r3, [r0, #4]
   16630:	f113 0f10 	cmn.w	r3, #16
   16634:	d004      	beq.n	16640 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
   16636:	f384 8811 	msr	BASEPRI, r4
   1663a:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
   1663e:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
   16640:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   16644:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   16646:	3134      	adds	r1, #52	; 0x34
   16648:	4801      	ldr	r0, [pc, #4]	; (16650 <usb_cancel_transfer+0x3c>)
   1664a:	f01a fcb0 	bl	30fae <k_work_submit_to_queue>
   1664e:	e7f2      	b.n	16636 <usb_cancel_transfer+0x22>
   16650:	20001ea8 	.word	0x20001ea8

00016654 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   16654:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   16656:	2400      	movs	r4, #0
   16658:	e004      	b.n	16664 <usb_cancel_transfers+0x10>
   1665a:	f385 8811 	msr	BASEPRI, r5
   1665e:	f3bf 8f6f 	isb	sy
   16662:	3401      	adds	r4, #1
   16664:	2c03      	cmp	r4, #3
   16666:	d822      	bhi.n	166ae <usb_cancel_transfers+0x5a>
	__asm__ volatile(
   16668:	f04f 0340 	mov.w	r3, #64	; 0x40
   1666c:	f3ef 8511 	mrs	r5, BASEPRI
   16670:	f383 8812 	msr	BASEPRI_MAX, r3
   16674:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   16678:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1667c:	00da      	lsls	r2, r3, #3
   1667e:	4b0c      	ldr	r3, [pc, #48]	; (166b0 <usb_cancel_transfers+0x5c>)
   16680:	4413      	add	r3, r2
   16682:	685b      	ldr	r3, [r3, #4]
   16684:	f113 0f10 	cmn.w	r3, #16
   16688:	d1e7      	bne.n	1665a <usb_cancel_transfers+0x6>
			trans->status = -ECANCELED;
   1668a:	4a09      	ldr	r2, [pc, #36]	; (166b0 <usb_cancel_transfers+0x5c>)
   1668c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   16690:	00cb      	lsls	r3, r1, #3
   16692:	4413      	add	r3, r2
   16694:	f06f 018b 	mvn.w	r1, #139	; 0x8b
   16698:	6059      	str	r1, [r3, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1669a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1669e:	00d9      	lsls	r1, r3, #3
   166a0:	3130      	adds	r1, #48	; 0x30
   166a2:	4411      	add	r1, r2
   166a4:	3104      	adds	r1, #4
   166a6:	4803      	ldr	r0, [pc, #12]	; (166b4 <usb_cancel_transfers+0x60>)
   166a8:	f01a fc81 	bl	30fae <k_work_submit_to_queue>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
   166ac:	e7d5      	b.n	1665a <usb_cancel_transfers+0x6>
		}

		irq_unlock(key);
	}
}
   166ae:	bd38      	pop	{r3, r4, r5, pc}
   166b0:	2000383c 	.word	0x2000383c
   166b4:	20001ea8 	.word	0x20001ea8

000166b8 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   166b8:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   166ba:	2400      	movs	r4, #0
   166bc:	e014      	b.n	166e8 <usb_transfer_init+0x30>
		k_work_init(&ut_data[i].work, usb_transfer_work);
   166be:	00e5      	lsls	r5, r4, #3
   166c0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   166c4:	00d8      	lsls	r0, r3, #3
   166c6:	3030      	adds	r0, #48	; 0x30
   166c8:	4e09      	ldr	r6, [pc, #36]	; (166f0 <usb_transfer_init+0x38>)
   166ca:	4430      	add	r0, r6
   166cc:	4909      	ldr	r1, [pc, #36]	; (166f4 <usb_transfer_init+0x3c>)
   166ce:	3004      	adds	r0, #4
   166d0:	f01a fc51 	bl	30f76 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
   166d4:	192b      	adds	r3, r5, r4
   166d6:	00d8      	lsls	r0, r3, #3
   166d8:	3018      	adds	r0, #24
   166da:	4430      	add	r0, r6
   166dc:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   166de:	2201      	movs	r2, #1
   166e0:	4611      	mov	r1, r2
   166e2:	f01a fb5f 	bl	30da4 <z_impl_k_sem_init>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   166e6:	3401      	adds	r4, #1
   166e8:	2c03      	cmp	r4, #3
   166ea:	d9e8      	bls.n	166be <usb_transfer_init+0x6>
	}

	return 0;
}
   166ec:	2000      	movs	r0, #0
   166ee:	bd70      	pop	{r4, r5, r6, pc}
   166f0:	2000383c 	.word	0x2000383c
   166f4:	00016171 	.word	0x00016171

000166f8 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   166f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   166fa:	b083      	sub	sp, #12
   166fc:	af00      	add	r7, sp, #0
   166fe:	4604      	mov	r4, r0
   16700:	460e      	mov	r6, r1
   16702:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   16704:	7901      	ldrb	r1, [r0, #4]
   16706:	4834      	ldr	r0, [pc, #208]	; (167d8 <cdc_acm_class_handle_req+0xe0>)
   16708:	f015 fbaa 	bl	2be60 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   1670c:	b158      	cbz	r0, 16726 <cdc_acm_class_handle_req+0x2e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   1670e:	f994 2000 	ldrsb.w	r2, [r4]
   16712:	2a00      	cmp	r2, #0
   16714:	db50      	blt.n	167b8 <cdc_acm_class_handle_req+0xc0>
		switch (setup->bRequest) {
   16716:	7862      	ldrb	r2, [r4, #1]
   16718:	2a20      	cmp	r2, #32
   1671a:	d041      	beq.n	167a0 <cdc_acm_class_handle_req+0xa8>
   1671c:	2a22      	cmp	r2, #34	; 0x22
   1671e:	d046      	beq.n	167ae <cdc_acm_class_handle_req+0xb6>
   16720:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16724:	e051      	b.n	167ca <cdc_acm_class_handle_req+0xd2>
		LOG_WRN("Device data not found for interface %u",
   16726:	88a4      	ldrh	r4, [r4, #4]
   16728:	466d      	mov	r5, sp
   1672a:	b088      	sub	sp, #32
   1672c:	466b      	mov	r3, sp
   1672e:	f113 0210 	adds.w	r2, r3, #16
   16732:	d02f      	beq.n	16794 <cdc_acm_class_handle_req+0x9c>
   16734:	210c      	movs	r1, #12
   16736:	b13a      	cbz	r2, 16748 <cdc_acm_class_handle_req+0x50>
   16738:	4608      	mov	r0, r1
   1673a:	2904      	cmp	r1, #4
   1673c:	dd01      	ble.n	16742 <cdc_acm_class_handle_req+0x4a>
   1673e:	4e27      	ldr	r6, [pc, #156]	; (167dc <cdc_acm_class_handle_req+0xe4>)
   16740:	615e      	str	r6, [r3, #20]
   16742:	2808      	cmp	r0, #8
   16744:	dd00      	ble.n	16748 <cdc_acm_class_handle_req+0x50>
   16746:	619c      	str	r4, [r3, #24]
   16748:	290b      	cmp	r1, #11
   1674a:	dd26      	ble.n	1679a <cdc_acm_class_handle_req+0xa2>
   1674c:	240c      	movs	r4, #12
   1674e:	b13a      	cbz	r2, 16760 <cdc_acm_class_handle_req+0x68>
   16750:	2103      	movs	r1, #3
   16752:	7139      	strb	r1, [r7, #4]
   16754:	2100      	movs	r1, #0
   16756:	7179      	strb	r1, [r7, #5]
   16758:	71b9      	strb	r1, [r7, #6]
   1675a:	71f9      	strb	r1, [r7, #7]
   1675c:	6878      	ldr	r0, [r7, #4]
   1675e:	6118      	str	r0, [r3, #16]
   16760:	2100      	movs	r1, #0
   16762:	f36f 0100 	bfc	r1, #0, #1
   16766:	f36f 0141 	bfc	r1, #1, #1
   1676a:	f36f 0182 	bfc	r1, #2, #1
   1676e:	f36f 01c5 	bfc	r1, #3, #3
   16772:	2302      	movs	r3, #2
   16774:	f363 1188 	bfi	r1, r3, #6, #3
   16778:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1677c:	f364 2153 	bfi	r1, r4, #9, #11
   16780:	f36f 511f 	bfc	r1, #20, #12
   16784:	2300      	movs	r3, #0
   16786:	4816      	ldr	r0, [pc, #88]	; (167e0 <cdc_acm_class_handle_req+0xe8>)
   16788:	f7fd fcb8 	bl	140fc <z_impl_z_log_msg_static_create>
   1678c:	46ad      	mov	sp, r5
		return -ENODEV;
   1678e:	f06f 0012 	mvn.w	r0, #18
   16792:	e01a      	b.n	167ca <cdc_acm_class_handle_req+0xd2>
		LOG_WRN("Device data not found for interface %u",
   16794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16798:	e7cd      	b.n	16736 <cdc_acm_class_handle_req+0x3e>
   1679a:	f06f 041b 	mvn.w	r4, #27
   1679e:	e7d6      	b.n	1674e <cdc_acm_class_handle_req+0x56>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
   167a0:	2207      	movs	r2, #7
   167a2:	6829      	ldr	r1, [r5, #0]
   167a4:	3810      	subs	r0, #16
   167a6:	f016 f821 	bl	2c7ec <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
   167aa:	2000      	movs	r0, #0
   167ac:	e00d      	b.n	167ca <cdc_acm_class_handle_req+0xd2>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
   167ae:	78a2      	ldrb	r2, [r4, #2]
   167b0:	f800 2c09 	strb.w	r2, [r0, #-9]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
   167b4:	2000      	movs	r0, #0
   167b6:	e008      	b.n	167ca <cdc_acm_class_handle_req+0xd2>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
   167b8:	7862      	ldrb	r2, [r4, #1]
   167ba:	2a21      	cmp	r2, #33	; 0x21
   167bc:	d108      	bne.n	167d0 <cdc_acm_class_handle_req+0xd8>
			*data = (uint8_t *)(&dev_data->line_coding);
   167be:	f1a0 0310 	sub.w	r3, r0, #16
   167c2:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   167c4:	2307      	movs	r3, #7
   167c6:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
   167c8:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
   167ca:	370c      	adds	r7, #12
   167cc:	46bd      	mov	sp, r7
   167ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -ENOTSUP;
   167d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   167d4:	e7f9      	b.n	167ca <cdc_acm_class_handle_req+0xd2>
   167d6:	bf00      	nop
   167d8:	2000395c 	.word	0x2000395c
   167dc:	00032be4 	.word	0x00032be4
   167e0:	00031dc4 	.word	0x00031dc4

000167e4 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   167e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   167e6:	b083      	sub	sp, #12
   167e8:	af00      	add	r7, sp, #0
   167ea:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   167ec:	4601      	mov	r1, r0
   167ee:	4822      	ldr	r0, [pc, #136]	; (16878 <cdc_acm_int_in+0x94>)
   167f0:	f015 fb4a 	bl	2be88 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   167f4:	b128      	cbz	r0, 16802 <cdc_acm_int_in+0x1e>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   167f6:	2201      	movs	r2, #1
   167f8:	f800 2c07 	strb.w	r2, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   167fc:	370c      	adds	r7, #12
   167fe:	46bd      	mov	sp, r7
   16800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Device data not found for endpoint %u", ep);
   16802:	466d      	mov	r5, sp
   16804:	b088      	sub	sp, #32
   16806:	466b      	mov	r3, sp
   16808:	f113 0210 	adds.w	r2, r3, #16
   1680c:	d02d      	beq.n	1686a <cdc_acm_int_in+0x86>
   1680e:	210c      	movs	r1, #12
   16810:	b13a      	cbz	r2, 16822 <cdc_acm_int_in+0x3e>
   16812:	4608      	mov	r0, r1
   16814:	2904      	cmp	r1, #4
   16816:	dd01      	ble.n	1681c <cdc_acm_int_in+0x38>
   16818:	4e18      	ldr	r6, [pc, #96]	; (1687c <cdc_acm_int_in+0x98>)
   1681a:	615e      	str	r6, [r3, #20]
   1681c:	2808      	cmp	r0, #8
   1681e:	dd00      	ble.n	16822 <cdc_acm_int_in+0x3e>
   16820:	619c      	str	r4, [r3, #24]
   16822:	290b      	cmp	r1, #11
   16824:	dd24      	ble.n	16870 <cdc_acm_int_in+0x8c>
   16826:	240c      	movs	r4, #12
   16828:	b13a      	cbz	r2, 1683a <cdc_acm_int_in+0x56>
   1682a:	2103      	movs	r1, #3
   1682c:	7139      	strb	r1, [r7, #4]
   1682e:	2100      	movs	r1, #0
   16830:	7179      	strb	r1, [r7, #5]
   16832:	71b9      	strb	r1, [r7, #6]
   16834:	71f9      	strb	r1, [r7, #7]
   16836:	6878      	ldr	r0, [r7, #4]
   16838:	6118      	str	r0, [r3, #16]
   1683a:	2100      	movs	r1, #0
   1683c:	f36f 0100 	bfc	r1, #0, #1
   16840:	f36f 0141 	bfc	r1, #1, #1
   16844:	f36f 0182 	bfc	r1, #2, #1
   16848:	f36f 01c5 	bfc	r1, #3, #3
   1684c:	2302      	movs	r3, #2
   1684e:	f363 1188 	bfi	r1, r3, #6, #3
   16852:	f3c4 040a 	ubfx	r4, r4, #0, #11
   16856:	f364 2153 	bfi	r1, r4, #9, #11
   1685a:	f36f 511f 	bfc	r1, #20, #12
   1685e:	2300      	movs	r3, #0
   16860:	4807      	ldr	r0, [pc, #28]	; (16880 <cdc_acm_int_in+0x9c>)
   16862:	f7fd fc4b 	bl	140fc <z_impl_z_log_msg_static_create>
   16866:	46ad      	mov	sp, r5
		return;
   16868:	e7c8      	b.n	167fc <cdc_acm_int_in+0x18>
		LOG_WRN("Device data not found for endpoint %u", ep);
   1686a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1686e:	e7cf      	b.n	16810 <cdc_acm_int_in+0x2c>
   16870:	f06f 041b 	mvn.w	r4, #27
   16874:	e7d8      	b.n	16828 <cdc_acm_int_in+0x44>
   16876:	bf00      	nop
   16878:	2000395c 	.word	0x2000395c
   1687c:	00032c0c 	.word	0x00032c0c
   16880:	00031dc4 	.word	0x00031dc4

00016884 <cdc_acm_irq_rx_enable>:
 * @brief Enable RX interrupt
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
   16884:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   16886:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   16888:	2301      	movs	r3, #1
   1688a:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
   1688e:	680b      	ldr	r3, [r1, #0]
   16890:	b113      	cbz	r3, 16898 <cdc_acm_irq_rx_enable+0x14>
   16892:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
   16896:	b903      	cbnz	r3, 1689a <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
   16898:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   1689a:	3108      	adds	r1, #8
   1689c:	4801      	ldr	r0, [pc, #4]	; (168a4 <cdc_acm_irq_rx_enable+0x20>)
   1689e:	f01a fb86 	bl	30fae <k_work_submit_to_queue>
}
   168a2:	e7f9      	b.n	16898 <cdc_acm_irq_rx_enable+0x14>
   168a4:	20001ea8 	.word	0x20001ea8

000168a8 <cdc_acm_irq_tx_enable>:
{
   168a8:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   168aa:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   168ac:	2301      	movs	r3, #1
   168ae:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
   168b2:	680b      	ldr	r3, [r1, #0]
   168b4:	b113      	cbz	r3, 168bc <cdc_acm_irq_tx_enable+0x14>
   168b6:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   168ba:	b903      	cbnz	r3, 168be <cdc_acm_irq_tx_enable+0x16>
}
   168bc:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   168be:	3108      	adds	r1, #8
   168c0:	4801      	ldr	r0, [pc, #4]	; (168c8 <cdc_acm_irq_tx_enable+0x20>)
   168c2:	f01a fb74 	bl	30fae <k_work_submit_to_queue>
}
   168c6:	e7f9      	b.n	168bc <cdc_acm_irq_tx_enable+0x14>
   168c8:	20001ea8 	.word	0x20001ea8

000168cc <cdc_acm_read_cb>:
{
   168cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   168ce:	b085      	sub	sp, #20
   168d0:	af02      	add	r7, sp, #8
   168d2:	4606      	mov	r6, r0
   168d4:	4614      	mov	r4, r2
	if (size <= 0) {
   168d6:	1e0d      	subs	r5, r1, #0
   168d8:	dd51      	ble.n	1697e <cdc_acm_read_cb+0xb2>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   168da:	462a      	mov	r2, r5
   168dc:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   168e0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   168e4:	f014 fc60 	bl	2b1a8 <ring_buf_put>
	if (wrote < size) {
   168e8:	4285      	cmp	r5, r0
   168ea:	d937      	bls.n	1695c <cdc_acm_read_cb+0x90>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
   168ec:	1a29      	subs	r1, r5, r0
   168ee:	466d      	mov	r5, sp
   168f0:	b088      	sub	sp, #32
   168f2:	ab02      	add	r3, sp, #8
   168f4:	f113 0210 	adds.w	r2, r3, #16
   168f8:	d04e      	beq.n	16998 <cdc_acm_read_cb+0xcc>
   168fa:	200c      	movs	r0, #12
   168fc:	b152      	cbz	r2, 16914 <cdc_acm_read_cb+0x48>
   168fe:	4684      	mov	ip, r0
   16900:	2804      	cmp	r0, #4
   16902:	dd03      	ble.n	1690c <cdc_acm_read_cb+0x40>
   16904:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 169b8 <cdc_acm_read_cb+0xec>
   16908:	f8c3 e014 	str.w	lr, [r3, #20]
   1690c:	f1bc 0f08 	cmp.w	ip, #8
   16910:	dd00      	ble.n	16914 <cdc_acm_read_cb+0x48>
   16912:	6199      	str	r1, [r3, #24]
   16914:	280b      	cmp	r0, #11
   16916:	dd42      	ble.n	1699e <cdc_acm_read_cb+0xd2>
   16918:	f04f 0c0c 	mov.w	ip, #12
   1691c:	b13a      	cbz	r2, 1692e <cdc_acm_read_cb+0x62>
   1691e:	2103      	movs	r1, #3
   16920:	7139      	strb	r1, [r7, #4]
   16922:	2100      	movs	r1, #0
   16924:	7179      	strb	r1, [r7, #5]
   16926:	71b9      	strb	r1, [r7, #6]
   16928:	71f9      	strb	r1, [r7, #7]
   1692a:	6878      	ldr	r0, [r7, #4]
   1692c:	6118      	str	r0, [r3, #16]
   1692e:	2100      	movs	r1, #0
   16930:	f36f 0100 	bfc	r1, #0, #1
   16934:	f36f 0141 	bfc	r1, #1, #1
   16938:	f36f 0182 	bfc	r1, #2, #1
   1693c:	f36f 01c5 	bfc	r1, #3, #3
   16940:	2301      	movs	r3, #1
   16942:	f363 1188 	bfi	r1, r3, #6, #3
   16946:	f3cc 030a 	ubfx	r3, ip, #0, #11
   1694a:	f363 2153 	bfi	r1, r3, #9, #11
   1694e:	f36f 511f 	bfc	r1, #20, #12
   16952:	2300      	movs	r3, #0
   16954:	4819      	ldr	r0, [pc, #100]	; (169bc <cdc_acm_read_cb+0xf0>)
   16956:	f7fd fbd1 	bl	140fc <z_impl_z_log_msg_static_create>
   1695a:	46ad      	mov	sp, r5
	dev_data->rx_ready = true;
   1695c:	2301      	movs	r3, #1
   1695e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
   16962:	6823      	ldr	r3, [r4, #0]
   16964:	b113      	cbz	r3, 1696c <cdc_acm_read_cb+0xa0>
   16966:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   1696a:	b9db      	cbnz	r3, 169a4 <cdc_acm_read_cb+0xd8>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
   1696c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   16970:	69cb      	ldr	r3, [r1, #28]
   16972:	684a      	ldr	r2, [r1, #4]
   16974:	6949      	ldr	r1, [r1, #20]
   16976:	1a52      	subs	r2, r2, r1
   16978:	1a9b      	subs	r3, r3, r2
   1697a:	2b3f      	cmp	r3, #63	; 0x3f
   1697c:	d918      	bls.n	169b0 <cdc_acm_read_cb+0xe4>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   1697e:	9401      	str	r4, [sp, #4]
   16980:	4b0f      	ldr	r3, [pc, #60]	; (169c0 <cdc_acm_read_cb+0xf4>)
   16982:	9300      	str	r3, [sp, #0]
   16984:	2301      	movs	r3, #1
   16986:	2240      	movs	r2, #64	; 0x40
   16988:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1698c:	4630      	mov	r0, r6
   1698e:	f7ff fd5f 	bl	16450 <usb_transfer>
}
   16992:	370c      	adds	r7, #12
   16994:	46bd      	mov	sp, r7
   16996:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
   16998:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1699c:	e7ae      	b.n	168fc <cdc_acm_read_cb+0x30>
   1699e:	f06f 0c1b 	mvn.w	ip, #27
   169a2:	e7bb      	b.n	1691c <cdc_acm_read_cb+0x50>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   169a4:	f104 0108 	add.w	r1, r4, #8
   169a8:	4806      	ldr	r0, [pc, #24]	; (169c4 <cdc_acm_read_cb+0xf8>)
   169aa:	f01a fb00 	bl	30fae <k_work_submit_to_queue>
   169ae:	e7dd      	b.n	1696c <cdc_acm_read_cb+0xa0>
		dev_data->rx_paused = true;
   169b0:	2301      	movs	r3, #1
   169b2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
		return;
   169b6:	e7ec      	b.n	16992 <cdc_acm_read_cb+0xc6>
   169b8:	00032c34 	.word	0x00032c34
   169bc:	00031dc4 	.word	0x00031dc4
   169c0:	000168cd 	.word	0x000168cd
   169c4:	20001ea8 	.word	0x20001ea8

000169c8 <cdc_acm_reset_port>:
{
   169c8:	b508      	push	{r3, lr}
   169ca:	4603      	mov	r3, r0
	dev_data->configured = false;
   169cc:	f04f 0c00 	mov.w	ip, #0
   169d0:	f880 c09e 	strb.w	ip, [r0, #158]	; 0x9e
	dev_data->suspended = false;
   169d4:	f880 c09f 	strb.w	ip, [r0, #159]	; 0x9f
	dev_data->rx_ready = false;
   169d8:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
	dev_data->tx_ready = false;
   169dc:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
   169e0:	4a0b      	ldr	r2, [pc, #44]	; (16a10 <cdc_acm_reset_port+0x48>)
   169e2:	e892 0003 	ldmia.w	r2, {r0, r1}
   169e6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
   169ea:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
   169ee:	0c09      	lsrs	r1, r1, #16
   169f0:	f883 109a 	strb.w	r1, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
   169f4:	f883 c09c 	strb.w	ip, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
   169f8:	f883 c09b 	strb.w	ip, [r3, #155]	; 0x9b
	dev_data->rx_paused = false;
   169fc:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   16a00:	2240      	movs	r2, #64	; 0x40
   16a02:	4661      	mov	r1, ip
   16a04:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   16a08:	f015 ff1f 	bl	2c84a <memset>
}
   16a0c:	bd08      	pop	{r3, pc}
   16a0e:	bf00      	nop
   16a10:	00031e54 	.word	0x00031e54

00016a14 <cdc_acm_do_cb>:
{
   16a14:	b530      	push	{r4, r5, lr}
   16a16:	b0a1      	sub	sp, #132	; 0x84
   16a18:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
   16a1a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	struct usb_cfg_data *cfg = (void *)dev->config;
   16a1e:	685d      	ldr	r5, [r3, #4]
	switch (status) {
   16a20:	3901      	subs	r1, #1
   16a22:	2905      	cmp	r1, #5
   16a24:	d806      	bhi.n	16a34 <cdc_acm_do_cb+0x20>
   16a26:	e8df f001 	tbb	[pc, r1]
   16a2a:	0503      	.short	0x0503
   16a2c:	99724b07 	.word	0x99724b07
		cdc_acm_reset_port(dev_data);
   16a30:	f7ff ffca 	bl	169c8 <cdc_acm_reset_port>
}
   16a34:	b021      	add	sp, #132	; 0x84
   16a36:	bd30      	pop	{r4, r5, pc}
		LOG_INF("Device configured");
   16a38:	4b70      	ldr	r3, [pc, #448]	; (16bfc <cdc_acm_do_cb+0x1e8>)
   16a3a:	931f      	str	r3, [sp, #124]	; 0x7c
   16a3c:	2302      	movs	r3, #2
   16a3e:	f88d 3004 	strb.w	r3, [sp, #4]
   16a42:	2300      	movs	r3, #0
   16a44:	f88d 3005 	strb.w	r3, [sp, #5]
   16a48:	f88d 3006 	strb.w	r3, [sp, #6]
   16a4c:	f88d 3007 	strb.w	r3, [sp, #7]
   16a50:	9a01      	ldr	r2, [sp, #4]
   16a52:	921e      	str	r2, [sp, #120]	; 0x78
   16a54:	4619      	mov	r1, r3
   16a56:	f363 0100 	bfi	r1, r3, #0, #1
   16a5a:	f363 0141 	bfi	r1, r3, #1, #1
   16a5e:	f363 0182 	bfi	r1, r3, #2, #1
   16a62:	f363 01c5 	bfi	r1, r3, #3, #3
   16a66:	2203      	movs	r2, #3
   16a68:	f362 1188 	bfi	r1, r2, #6, #3
   16a6c:	2208      	movs	r2, #8
   16a6e:	f362 2153 	bfi	r1, r2, #9, #11
   16a72:	f363 511f 	bfi	r1, r3, #20, #12
   16a76:	aa1e      	add	r2, sp, #120	; 0x78
   16a78:	4861      	ldr	r0, [pc, #388]	; (16c00 <cdc_acm_do_cb+0x1ec>)
   16a7a:	f7fd fb3f 	bl	140fc <z_impl_z_log_msg_static_create>
		if (!dev_data->configured) {
   16a7e:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   16a82:	b19b      	cbz	r3, 16aac <cdc_acm_do_cb+0x98>
		if (!dev_data->tx_ready) {
   16a84:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   16a88:	2b00      	cmp	r3, #0
   16a8a:	d1d3      	bne.n	16a34 <cdc_acm_do_cb+0x20>
			dev_data->tx_ready = true;
   16a8c:	2301      	movs	r3, #1
   16a8e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   16a92:	6823      	ldr	r3, [r4, #0]
   16a94:	2b00      	cmp	r3, #0
   16a96:	d0cd      	beq.n	16a34 <cdc_acm_do_cb+0x20>
   16a98:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   16a9c:	2b00      	cmp	r3, #0
   16a9e:	d0c9      	beq.n	16a34 <cdc_acm_do_cb+0x20>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   16aa0:	f104 0108 	add.w	r1, r4, #8
   16aa4:	4857      	ldr	r0, [pc, #348]	; (16c04 <cdc_acm_do_cb+0x1f0>)
   16aa6:	f01a fa82 	bl	30fae <k_work_submit_to_queue>
   16aaa:	e7c3      	b.n	16a34 <cdc_acm_do_cb+0x20>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   16aac:	6a2b      	ldr	r3, [r5, #32]
   16aae:	4622      	mov	r2, r4
   16ab0:	2100      	movs	r1, #0
   16ab2:	7b18      	ldrb	r0, [r3, #12]
   16ab4:	f7ff ff0a 	bl	168cc <cdc_acm_read_cb>
			dev_data->configured = true;
   16ab8:	2301      	movs	r3, #1
   16aba:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
   16abe:	e7e1      	b.n	16a84 <cdc_acm_do_cb+0x70>
		LOG_INF("Device disconnected");
   16ac0:	4b51      	ldr	r3, [pc, #324]	; (16c08 <cdc_acm_do_cb+0x1f4>)
   16ac2:	9319      	str	r3, [sp, #100]	; 0x64
   16ac4:	2302      	movs	r3, #2
   16ac6:	f88d 3004 	strb.w	r3, [sp, #4]
   16aca:	2300      	movs	r3, #0
   16acc:	f88d 3005 	strb.w	r3, [sp, #5]
   16ad0:	f88d 3006 	strb.w	r3, [sp, #6]
   16ad4:	f88d 3007 	strb.w	r3, [sp, #7]
   16ad8:	9a01      	ldr	r2, [sp, #4]
   16ada:	9218      	str	r2, [sp, #96]	; 0x60
   16adc:	4619      	mov	r1, r3
   16ade:	f363 0100 	bfi	r1, r3, #0, #1
   16ae2:	f363 0141 	bfi	r1, r3, #1, #1
   16ae6:	f363 0182 	bfi	r1, r3, #2, #1
   16aea:	f363 01c5 	bfi	r1, r3, #3, #3
   16aee:	2203      	movs	r2, #3
   16af0:	f362 1188 	bfi	r1, r2, #6, #3
   16af4:	2208      	movs	r2, #8
   16af6:	f362 2153 	bfi	r1, r2, #9, #11
   16afa:	f363 511f 	bfi	r1, r3, #20, #12
   16afe:	aa18      	add	r2, sp, #96	; 0x60
   16b00:	483f      	ldr	r0, [pc, #252]	; (16c00 <cdc_acm_do_cb+0x1ec>)
   16b02:	f7fd fafb 	bl	140fc <z_impl_z_log_msg_static_create>
		cdc_acm_reset_port(dev_data);
   16b06:	4620      	mov	r0, r4
   16b08:	f7ff ff5e 	bl	169c8 <cdc_acm_reset_port>
		break;
   16b0c:	e792      	b.n	16a34 <cdc_acm_do_cb+0x20>
		LOG_INF("Device suspended");
   16b0e:	4b3f      	ldr	r3, [pc, #252]	; (16c0c <cdc_acm_do_cb+0x1f8>)
   16b10:	9313      	str	r3, [sp, #76]	; 0x4c
   16b12:	2302      	movs	r3, #2
   16b14:	f88d 3004 	strb.w	r3, [sp, #4]
   16b18:	2300      	movs	r3, #0
   16b1a:	f88d 3005 	strb.w	r3, [sp, #5]
   16b1e:	f88d 3006 	strb.w	r3, [sp, #6]
   16b22:	f88d 3007 	strb.w	r3, [sp, #7]
   16b26:	9a01      	ldr	r2, [sp, #4]
   16b28:	9212      	str	r2, [sp, #72]	; 0x48
   16b2a:	4619      	mov	r1, r3
   16b2c:	f363 0100 	bfi	r1, r3, #0, #1
   16b30:	f363 0141 	bfi	r1, r3, #1, #1
   16b34:	f363 0182 	bfi	r1, r3, #2, #1
   16b38:	f363 01c5 	bfi	r1, r3, #3, #3
   16b3c:	2203      	movs	r2, #3
   16b3e:	f362 1188 	bfi	r1, r2, #6, #3
   16b42:	2208      	movs	r2, #8
   16b44:	f362 2153 	bfi	r1, r2, #9, #11
   16b48:	f363 511f 	bfi	r1, r3, #20, #12
   16b4c:	aa12      	add	r2, sp, #72	; 0x48
   16b4e:	482c      	ldr	r0, [pc, #176]	; (16c00 <cdc_acm_do_cb+0x1ec>)
   16b50:	f7fd fad4 	bl	140fc <z_impl_z_log_msg_static_create>
		dev_data->suspended = true;
   16b54:	2301      	movs	r3, #1
   16b56:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
		break;
   16b5a:	e76b      	b.n	16a34 <cdc_acm_do_cb+0x20>
		LOG_INF("Device resumed");
   16b5c:	4b2c      	ldr	r3, [pc, #176]	; (16c10 <cdc_acm_do_cb+0x1fc>)
   16b5e:	9307      	str	r3, [sp, #28]
   16b60:	2302      	movs	r3, #2
   16b62:	f88d 3004 	strb.w	r3, [sp, #4]
   16b66:	2300      	movs	r3, #0
   16b68:	f88d 3005 	strb.w	r3, [sp, #5]
   16b6c:	f88d 3006 	strb.w	r3, [sp, #6]
   16b70:	f88d 3007 	strb.w	r3, [sp, #7]
   16b74:	9a01      	ldr	r2, [sp, #4]
   16b76:	9206      	str	r2, [sp, #24]
   16b78:	4619      	mov	r1, r3
   16b7a:	f363 0100 	bfi	r1, r3, #0, #1
   16b7e:	f363 0141 	bfi	r1, r3, #1, #1
   16b82:	f363 0182 	bfi	r1, r3, #2, #1
   16b86:	f363 01c5 	bfi	r1, r3, #3, #3
   16b8a:	2203      	movs	r2, #3
   16b8c:	f362 1188 	bfi	r1, r2, #6, #3
   16b90:	2208      	movs	r2, #8
   16b92:	f362 2153 	bfi	r1, r2, #9, #11
   16b96:	f363 511f 	bfi	r1, r3, #20, #12
   16b9a:	aa06      	add	r2, sp, #24
   16b9c:	4818      	ldr	r0, [pc, #96]	; (16c00 <cdc_acm_do_cb+0x1ec>)
   16b9e:	f7fd faad 	bl	140fc <z_impl_z_log_msg_static_create>
		if (dev_data->suspended) {
   16ba2:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   16ba6:	2b00      	cmp	r3, #0
   16ba8:	f43f af44 	beq.w	16a34 <cdc_acm_do_cb+0x20>
			LOG_INF("from suspend");
   16bac:	4b19      	ldr	r3, [pc, #100]	; (16c14 <cdc_acm_do_cb+0x200>)
   16bae:	930d      	str	r3, [sp, #52]	; 0x34
   16bb0:	2302      	movs	r3, #2
   16bb2:	f88d 3004 	strb.w	r3, [sp, #4]
   16bb6:	2500      	movs	r5, #0
   16bb8:	f88d 5005 	strb.w	r5, [sp, #5]
   16bbc:	f88d 5006 	strb.w	r5, [sp, #6]
   16bc0:	f88d 5007 	strb.w	r5, [sp, #7]
   16bc4:	9b01      	ldr	r3, [sp, #4]
   16bc6:	930c      	str	r3, [sp, #48]	; 0x30
   16bc8:	4629      	mov	r1, r5
   16bca:	f365 0100 	bfi	r1, r5, #0, #1
   16bce:	f365 0141 	bfi	r1, r5, #1, #1
   16bd2:	f365 0182 	bfi	r1, r5, #2, #1
   16bd6:	f365 01c5 	bfi	r1, r5, #3, #3
   16bda:	2303      	movs	r3, #3
   16bdc:	f363 1188 	bfi	r1, r3, #6, #3
   16be0:	2308      	movs	r3, #8
   16be2:	f363 2153 	bfi	r1, r3, #9, #11
   16be6:	f365 511f 	bfi	r1, r5, #20, #12
   16bea:	462b      	mov	r3, r5
   16bec:	aa0c      	add	r2, sp, #48	; 0x30
   16bee:	4804      	ldr	r0, [pc, #16]	; (16c00 <cdc_acm_do_cb+0x1ec>)
   16bf0:	f7fd fa84 	bl	140fc <z_impl_z_log_msg_static_create>
			dev_data->suspended = false;
   16bf4:	f884 509f 	strb.w	r5, [r4, #159]	; 0x9f
}
   16bf8:	e71c      	b.n	16a34 <cdc_acm_do_cb+0x20>
   16bfa:	bf00      	nop
   16bfc:	00032c58 	.word	0x00032c58
   16c00:	00031dc4 	.word	0x00031dc4
   16c04:	20001ea8 	.word	0x20001ea8
   16c08:	00032c6c 	.word	0x00032c6c
   16c0c:	00032c80 	.word	0x00032c80
   16c10:	00032c94 	.word	0x00032c94
   16c14:	00032ca4 	.word	0x00032ca4

00016c18 <cdc_acm_dev_status_cb>:
{
   16c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c1a:	b083      	sub	sp, #12
   16c1c:	af00      	add	r7, sp, #0
   16c1e:	4604      	mov	r4, r0
   16c20:	460d      	mov	r5, r1
   16c22:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   16c24:	4601      	mov	r1, r0
   16c26:	4823      	ldr	r0, [pc, #140]	; (16cb4 <cdc_acm_dev_status_cb+0x9c>)
   16c28:	f015 f908 	bl	2be3c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   16c2c:	b138      	cbz	r0, 16c3e <cdc_acm_dev_status_cb+0x26>
	cdc_acm_do_cb(dev_data, status, param);
   16c2e:	4632      	mov	r2, r6
   16c30:	4629      	mov	r1, r5
   16c32:	38a4      	subs	r0, #164	; 0xa4
   16c34:	f7ff feee 	bl	16a14 <cdc_acm_do_cb>
}
   16c38:	370c      	adds	r7, #12
   16c3a:	46bd      	mov	sp, r7
   16c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Device data not found for cfg %p", cfg);
   16c3e:	466d      	mov	r5, sp
   16c40:	b088      	sub	sp, #32
   16c42:	466b      	mov	r3, sp
   16c44:	f113 0210 	adds.w	r2, r3, #16
   16c48:	d02d      	beq.n	16ca6 <cdc_acm_dev_status_cb+0x8e>
   16c4a:	210c      	movs	r1, #12
   16c4c:	b13a      	cbz	r2, 16c5e <cdc_acm_dev_status_cb+0x46>
   16c4e:	4608      	mov	r0, r1
   16c50:	2904      	cmp	r1, #4
   16c52:	dd01      	ble.n	16c58 <cdc_acm_dev_status_cb+0x40>
   16c54:	4e18      	ldr	r6, [pc, #96]	; (16cb8 <cdc_acm_dev_status_cb+0xa0>)
   16c56:	615e      	str	r6, [r3, #20]
   16c58:	2808      	cmp	r0, #8
   16c5a:	dd00      	ble.n	16c5e <cdc_acm_dev_status_cb+0x46>
   16c5c:	619c      	str	r4, [r3, #24]
   16c5e:	290b      	cmp	r1, #11
   16c60:	dd24      	ble.n	16cac <cdc_acm_dev_status_cb+0x94>
   16c62:	240c      	movs	r4, #12
   16c64:	b13a      	cbz	r2, 16c76 <cdc_acm_dev_status_cb+0x5e>
   16c66:	2103      	movs	r1, #3
   16c68:	7139      	strb	r1, [r7, #4]
   16c6a:	2100      	movs	r1, #0
   16c6c:	7179      	strb	r1, [r7, #5]
   16c6e:	71b9      	strb	r1, [r7, #6]
   16c70:	71f9      	strb	r1, [r7, #7]
   16c72:	6878      	ldr	r0, [r7, #4]
   16c74:	6118      	str	r0, [r3, #16]
   16c76:	2100      	movs	r1, #0
   16c78:	f36f 0100 	bfc	r1, #0, #1
   16c7c:	f36f 0141 	bfc	r1, #1, #1
   16c80:	f36f 0182 	bfc	r1, #2, #1
   16c84:	f36f 01c5 	bfc	r1, #3, #3
   16c88:	2302      	movs	r3, #2
   16c8a:	f363 1188 	bfi	r1, r3, #6, #3
   16c8e:	f3c4 030a 	ubfx	r3, r4, #0, #11
   16c92:	f363 2153 	bfi	r1, r3, #9, #11
   16c96:	f36f 511f 	bfc	r1, #20, #12
   16c9a:	2300      	movs	r3, #0
   16c9c:	4807      	ldr	r0, [pc, #28]	; (16cbc <cdc_acm_dev_status_cb+0xa4>)
   16c9e:	f7fd fa2d 	bl	140fc <z_impl_z_log_msg_static_create>
   16ca2:	46ad      	mov	sp, r5
		return;
   16ca4:	e7c8      	b.n	16c38 <cdc_acm_dev_status_cb+0x20>
		LOG_WRN("Device data not found for cfg %p", cfg);
   16ca6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16caa:	e7cf      	b.n	16c4c <cdc_acm_dev_status_cb+0x34>
   16cac:	f06f 041b 	mvn.w	r4, #27
   16cb0:	e7d8      	b.n	16c64 <cdc_acm_dev_status_cb+0x4c>
   16cb2:	bf00      	nop
   16cb4:	2000395c 	.word	0x2000395c
   16cb8:	00032cb4 	.word	0x00032cb4
   16cbc:	00031dc4 	.word	0x00031dc4

00016cc0 <cdc_acm_send_notification>:
 * @retval 0 on success.
 * @retval -EIO if timed out.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
   16cc0:	b530      	push	{r4, r5, lr}
   16cc2:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   16cc4:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
   16cc6:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
   16cc8:	22a1      	movs	r2, #161	; 0xa1
   16cca:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
   16cce:	2220      	movs	r2, #32
   16cd0:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
   16cd4:	2400      	movs	r4, #0
   16cd6:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
   16cda:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
   16cde:	2202      	movs	r2, #2
   16ce0:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
   16ce4:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
   16ce8:	f885 409d 	strb.w	r4, [r5, #157]	; 0x9d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
   16cec:	6a18      	ldr	r0, [r3, #32]
   16cee:	4623      	mov	r3, r4
   16cf0:	220a      	movs	r2, #10
   16cf2:	a901      	add	r1, sp, #4
   16cf4:	7900      	ldrb	r0, [r0, #4]
   16cf6:	f7fe fddf 	bl	158b8 <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
   16cfa:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
   16cfe:	b94b      	cbnz	r3, 16d14 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
   16d00:	2001      	movs	r0, #1
   16d02:	f01a fbfa 	bl	314fa <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
   16d06:	3401      	adds	r4, #1
   16d08:	4b04      	ldr	r3, [pc, #16]	; (16d1c <cdc_acm_send_notification+0x5c>)
   16d0a:	429c      	cmp	r4, r3
   16d0c:	d9f5      	bls.n	16cfa <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
   16d0e:	f06f 0004 	mvn.w	r0, #4
   16d12:	e000      	b.n	16d16 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
   16d14:	2000      	movs	r0, #0
}
   16d16:	b005      	add	sp, #20
   16d18:	bd30      	pop	{r4, r5, pc}
   16d1a:	bf00      	nop
   16d1c:	000186a0 	.word	0x000186a0

00016d20 <cdc_acm_fifo_fill>:
{
   16d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d24:	b082      	sub	sp, #8
   16d26:	af00      	add	r7, sp, #0
   16d28:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   16d2a:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   16d2c:	f896 309e 	ldrb.w	r3, [r6, #158]	; 0x9e
   16d30:	b11b      	cbz	r3, 16d3a <cdc_acm_fifo_fill+0x1a>
   16d32:	f896 309f 	ldrb.w	r3, [r6, #159]	; 0x9f
   16d36:	2b00      	cmp	r3, #0
   16d38:	d03d      	beq.n	16db6 <cdc_acm_fifo_fill+0x96>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
   16d3a:	466d      	mov	r5, sp
   16d3c:	b088      	sub	sp, #32
   16d3e:	466b      	mov	r3, sp
   16d40:	f113 0210 	adds.w	r2, r3, #16
   16d44:	d031      	beq.n	16daa <cdc_acm_fifo_fill+0x8a>
   16d46:	210c      	movs	r1, #12
   16d48:	b13a      	cbz	r2, 16d5a <cdc_acm_fifo_fill+0x3a>
   16d4a:	4608      	mov	r0, r1
   16d4c:	2904      	cmp	r1, #4
   16d4e:	dd01      	ble.n	16d54 <cdc_acm_fifo_fill+0x34>
   16d50:	4e40      	ldr	r6, [pc, #256]	; (16e54 <cdc_acm_fifo_fill+0x134>)
   16d52:	615e      	str	r6, [r3, #20]
   16d54:	2808      	cmp	r0, #8
   16d56:	dd00      	ble.n	16d5a <cdc_acm_fifo_fill+0x3a>
   16d58:	619c      	str	r4, [r3, #24]
   16d5a:	290b      	cmp	r1, #11
   16d5c:	dd28      	ble.n	16db0 <cdc_acm_fifo_fill+0x90>
   16d5e:	240c      	movs	r4, #12
   16d60:	b13a      	cbz	r2, 16d72 <cdc_acm_fifo_fill+0x52>
   16d62:	2103      	movs	r1, #3
   16d64:	7139      	strb	r1, [r7, #4]
   16d66:	2100      	movs	r1, #0
   16d68:	7179      	strb	r1, [r7, #5]
   16d6a:	71b9      	strb	r1, [r7, #6]
   16d6c:	71f9      	strb	r1, [r7, #7]
   16d6e:	6878      	ldr	r0, [r7, #4]
   16d70:	6118      	str	r0, [r3, #16]
   16d72:	2100      	movs	r1, #0
   16d74:	f36f 0100 	bfc	r1, #0, #1
   16d78:	f36f 0141 	bfc	r1, #1, #1
   16d7c:	f36f 0182 	bfc	r1, #2, #1
   16d80:	f36f 01c5 	bfc	r1, #3, #3
   16d84:	2302      	movs	r3, #2
   16d86:	f363 1188 	bfi	r1, r3, #6, #3
   16d8a:	f3c4 030a 	ubfx	r3, r4, #0, #11
   16d8e:	f363 2153 	bfi	r1, r3, #9, #11
   16d92:	f36f 511f 	bfc	r1, #20, #12
   16d96:	2300      	movs	r3, #0
   16d98:	482f      	ldr	r0, [pc, #188]	; (16e58 <cdc_acm_fifo_fill+0x138>)
   16d9a:	f7fd f9af 	bl	140fc <z_impl_z_log_msg_static_create>
   16d9e:	46ad      	mov	sp, r5
		return 0;
   16da0:	2000      	movs	r0, #0
}
   16da2:	3708      	adds	r7, #8
   16da4:	46bd      	mov	sp, r7
   16da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Device not configured or suspended, drop %d bytes",
   16daa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16dae:	e7cb      	b.n	16d48 <cdc_acm_fifo_fill+0x28>
   16db0:	f06f 041b 	mvn.w	r4, #27
   16db4:	e7d4      	b.n	16d60 <cdc_acm_fifo_fill+0x40>
	dev_data->tx_ready = false;
   16db6:	2300      	movs	r3, #0
   16db8:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   16dbc:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
   16dc0:	f014 f9f2 	bl	2b1a8 <ring_buf_put>
   16dc4:	4605      	mov	r5, r0
	if (wrote < len) {
   16dc6:	42a0      	cmp	r0, r4
   16dc8:	d235      	bcs.n	16e36 <cdc_acm_fifo_fill+0x116>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
   16dca:	1a24      	subs	r4, r4, r0
   16dcc:	46e8      	mov	r8, sp
   16dce:	b088      	sub	sp, #32
   16dd0:	466b      	mov	r3, sp
   16dd2:	f113 0210 	adds.w	r2, r3, #16
   16dd6:	d037      	beq.n	16e48 <cdc_acm_fifo_fill+0x128>
   16dd8:	210c      	movs	r1, #12
   16dda:	b14a      	cbz	r2, 16df0 <cdc_acm_fifo_fill+0xd0>
   16ddc:	4608      	mov	r0, r1
   16dde:	2904      	cmp	r1, #4
   16de0:	dd03      	ble.n	16dea <cdc_acm_fifo_fill+0xca>
   16de2:	f8df c078 	ldr.w	ip, [pc, #120]	; 16e5c <cdc_acm_fifo_fill+0x13c>
   16de6:	f8c3 c014 	str.w	ip, [r3, #20]
   16dea:	2808      	cmp	r0, #8
   16dec:	dd00      	ble.n	16df0 <cdc_acm_fifo_fill+0xd0>
   16dee:	619c      	str	r4, [r3, #24]
   16df0:	290b      	cmp	r1, #11
   16df2:	dd2c      	ble.n	16e4e <cdc_acm_fifo_fill+0x12e>
   16df4:	240c      	movs	r4, #12
   16df6:	b13a      	cbz	r2, 16e08 <cdc_acm_fifo_fill+0xe8>
   16df8:	2103      	movs	r1, #3
   16dfa:	7139      	strb	r1, [r7, #4]
   16dfc:	2100      	movs	r1, #0
   16dfe:	7179      	strb	r1, [r7, #5]
   16e00:	71b9      	strb	r1, [r7, #6]
   16e02:	71f9      	strb	r1, [r7, #7]
   16e04:	6878      	ldr	r0, [r7, #4]
   16e06:	6118      	str	r0, [r3, #16]
   16e08:	2100      	movs	r1, #0
   16e0a:	f36f 0100 	bfc	r1, #0, #1
   16e0e:	f36f 0141 	bfc	r1, #1, #1
   16e12:	f36f 0182 	bfc	r1, #2, #1
   16e16:	f36f 01c5 	bfc	r1, #3, #3
   16e1a:	2302      	movs	r3, #2
   16e1c:	f363 1188 	bfi	r1, r3, #6, #3
   16e20:	f3c4 030a 	ubfx	r3, r4, #0, #11
   16e24:	f363 2153 	bfi	r1, r3, #9, #11
   16e28:	f36f 511f 	bfc	r1, #20, #12
   16e2c:	2300      	movs	r3, #0
   16e2e:	480a      	ldr	r0, [pc, #40]	; (16e58 <cdc_acm_fifo_fill+0x138>)
   16e30:	f7fd f964 	bl	140fc <z_impl_z_log_msg_static_create>
   16e34:	46c5      	mov	sp, r8
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   16e36:	2200      	movs	r2, #0
   16e38:	2300      	movs	r3, #0
   16e3a:	f106 0118 	add.w	r1, r6, #24
   16e3e:	4808      	ldr	r0, [pc, #32]	; (16e60 <cdc_acm_fifo_fill+0x140>)
   16e40:	f01a f8e1 	bl	31006 <k_work_schedule_for_queue>
	return wrote;
   16e44:	4628      	mov	r0, r5
   16e46:	e7ac      	b.n	16da2 <cdc_acm_fifo_fill+0x82>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
   16e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16e4c:	e7c5      	b.n	16dda <cdc_acm_fifo_fill+0xba>
   16e4e:	f06f 041b 	mvn.w	r4, #27
   16e52:	e7d0      	b.n	16df6 <cdc_acm_fifo_fill+0xd6>
   16e54:	00032cd8 	.word	0x00032cd8
   16e58:	00031dc4 	.word	0x00031dc4
   16e5c:	00032c34 	.word	0x00032c34
   16e60:	20001ea8 	.word	0x20001ea8

00016e64 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   16e64:	b530      	push	{r4, r5, lr}
   16e66:	b097      	sub	sp, #92	; 0x5c
   16e68:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   16e6c:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
   16e6e:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   16e72:	b113      	cbz	r3, 16e7a <cdc_acm_poll_out+0x16>
   16e74:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   16e78:	b323      	cbz	r3, 16ec4 <cdc_acm_poll_out+0x60>
		LOG_INF("USB device not ready, drop data");
   16e7a:	4b47      	ldr	r3, [pc, #284]	; (16f98 <cdc_acm_poll_out+0x134>)
   16e7c:	9315      	str	r3, [sp, #84]	; 0x54
   16e7e:	2302      	movs	r3, #2
   16e80:	f88d 300c 	strb.w	r3, [sp, #12]
   16e84:	2300      	movs	r3, #0
   16e86:	f88d 300d 	strb.w	r3, [sp, #13]
   16e8a:	f88d 300e 	strb.w	r3, [sp, #14]
   16e8e:	f88d 300f 	strb.w	r3, [sp, #15]
   16e92:	9a03      	ldr	r2, [sp, #12]
   16e94:	9214      	str	r2, [sp, #80]	; 0x50
   16e96:	4619      	mov	r1, r3
   16e98:	f363 0100 	bfi	r1, r3, #0, #1
   16e9c:	f363 0141 	bfi	r1, r3, #1, #1
   16ea0:	f363 0182 	bfi	r1, r3, #2, #1
   16ea4:	f363 01c5 	bfi	r1, r3, #3, #3
   16ea8:	2203      	movs	r2, #3
   16eaa:	f362 1188 	bfi	r1, r2, #6, #3
   16eae:	2208      	movs	r2, #8
   16eb0:	f362 2153 	bfi	r1, r2, #9, #11
   16eb4:	f363 511f 	bfi	r1, r3, #20, #12
   16eb8:	aa14      	add	r2, sp, #80	; 0x50
   16eba:	4838      	ldr	r0, [pc, #224]	; (16f9c <cdc_acm_poll_out+0x138>)
   16ebc:	f7fd f91e 	bl	140fc <z_impl_z_log_msg_static_create>
	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
}
   16ec0:	b017      	add	sp, #92	; 0x5c
   16ec2:	bd30      	pop	{r4, r5, pc}
	dev_data->tx_ready = false;
   16ec4:	2300      	movs	r3, #0
   16ec6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   16eca:	2201      	movs	r2, #1
   16ecc:	f10d 0107 	add.w	r1, sp, #7
   16ed0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   16ed4:	f014 f968 	bl	2b1a8 <ring_buf_put>
   16ed8:	bb90      	cbnz	r0, 16f40 <cdc_acm_poll_out+0xdc>
		LOG_INF("Ring buffer full, drain buffer");
   16eda:	4b31      	ldr	r3, [pc, #196]	; (16fa0 <cdc_acm_poll_out+0x13c>)
   16edc:	9309      	str	r3, [sp, #36]	; 0x24
   16ede:	2302      	movs	r3, #2
   16ee0:	f88d 300c 	strb.w	r3, [sp, #12]
   16ee4:	2500      	movs	r5, #0
   16ee6:	f88d 500d 	strb.w	r5, [sp, #13]
   16eea:	f88d 500e 	strb.w	r5, [sp, #14]
   16eee:	f88d 500f 	strb.w	r5, [sp, #15]
   16ef2:	9b03      	ldr	r3, [sp, #12]
   16ef4:	9308      	str	r3, [sp, #32]
   16ef6:	4629      	mov	r1, r5
   16ef8:	f365 0100 	bfi	r1, r5, #0, #1
   16efc:	f365 0141 	bfi	r1, r5, #1, #1
   16f00:	f365 0182 	bfi	r1, r5, #2, #1
   16f04:	f365 01c5 	bfi	r1, r5, #3, #3
   16f08:	2303      	movs	r3, #3
   16f0a:	f363 1188 	bfi	r1, r3, #6, #3
   16f0e:	2308      	movs	r3, #8
   16f10:	f363 2153 	bfi	r1, r3, #9, #11
   16f14:	f365 511f 	bfi	r1, r5, #20, #12
   16f18:	462b      	mov	r3, r5
   16f1a:	aa08      	add	r2, sp, #32
   16f1c:	481f      	ldr	r0, [pc, #124]	; (16f9c <cdc_acm_poll_out+0x138>)
   16f1e:	f7fd f8ed 	bl	140fc <z_impl_z_log_msg_static_create>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   16f22:	2201      	movs	r2, #1
   16f24:	4629      	mov	r1, r5
   16f26:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   16f2a:	f014 f998 	bl	2b25e <ring_buf_get>
   16f2e:	b178      	cbz	r0, 16f50 <cdc_acm_poll_out+0xec>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   16f30:	2201      	movs	r2, #1
   16f32:	f10d 0107 	add.w	r1, sp, #7
   16f36:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   16f3a:	f014 f935 	bl	2b1a8 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   16f3e:	b138      	cbz	r0, 16f50 <cdc_acm_poll_out+0xec>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
   16f40:	2221      	movs	r2, #33	; 0x21
   16f42:	2300      	movs	r3, #0
   16f44:	f104 0118 	add.w	r1, r4, #24
   16f48:	4816      	ldr	r0, [pc, #88]	; (16fa4 <cdc_acm_poll_out+0x140>)
   16f4a:	f01a f85c 	bl	31006 <k_work_schedule_for_queue>
   16f4e:	e7b7      	b.n	16ec0 <cdc_acm_poll_out+0x5c>
			LOG_ERR("Failed to drain buffer");
   16f50:	4b15      	ldr	r3, [pc, #84]	; (16fa8 <cdc_acm_poll_out+0x144>)
   16f52:	930f      	str	r3, [sp, #60]	; 0x3c
   16f54:	2302      	movs	r3, #2
   16f56:	f88d 300c 	strb.w	r3, [sp, #12]
   16f5a:	2300      	movs	r3, #0
   16f5c:	f88d 300d 	strb.w	r3, [sp, #13]
   16f60:	f88d 300e 	strb.w	r3, [sp, #14]
   16f64:	f88d 300f 	strb.w	r3, [sp, #15]
   16f68:	9a03      	ldr	r2, [sp, #12]
   16f6a:	920e      	str	r2, [sp, #56]	; 0x38
   16f6c:	4619      	mov	r1, r3
   16f6e:	f363 0100 	bfi	r1, r3, #0, #1
   16f72:	f363 0141 	bfi	r1, r3, #1, #1
   16f76:	f363 0182 	bfi	r1, r3, #2, #1
   16f7a:	f363 01c5 	bfi	r1, r3, #3, #3
   16f7e:	2201      	movs	r2, #1
   16f80:	f362 1188 	bfi	r1, r2, #6, #3
   16f84:	2208      	movs	r2, #8
   16f86:	f362 2153 	bfi	r1, r2, #9, #11
   16f8a:	f363 511f 	bfi	r1, r3, #20, #12
   16f8e:	aa0e      	add	r2, sp, #56	; 0x38
   16f90:	4802      	ldr	r0, [pc, #8]	; (16f9c <cdc_acm_poll_out+0x138>)
   16f92:	f7fd f8b3 	bl	140fc <z_impl_z_log_msg_static_create>
			return;
   16f96:	e793      	b.n	16ec0 <cdc_acm_poll_out+0x5c>
   16f98:	00032d0c 	.word	0x00032d0c
   16f9c:	00031dc4 	.word	0x00031dc4
   16fa0:	00032d2c 	.word	0x00032d2c
   16fa4:	20001ea8 	.word	0x20001ea8
   16fa8:	00032d4c 	.word	0x00032d4c

00016fac <cdc_acm_write_cb>:
{
   16fac:	b510      	push	{r4, lr}
   16fae:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
   16fb0:	2301      	movs	r3, #1
   16fb2:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
   16fb6:	6813      	ldr	r3, [r2, #0]
   16fb8:	b113      	cbz	r3, 16fc0 <cdc_acm_write_cb+0x14>
   16fba:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
   16fbe:	b96b      	cbnz	r3, 16fdc <cdc_acm_write_cb+0x30>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   16fc0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	return buf->get_head == buf->put_tail;
   16fc4:	691a      	ldr	r2, [r3, #16]
   16fc6:	689b      	ldr	r3, [r3, #8]
   16fc8:	4293      	cmp	r3, r2
   16fca:	d006      	beq.n	16fda <cdc_acm_write_cb+0x2e>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   16fcc:	2200      	movs	r2, #0
   16fce:	2300      	movs	r3, #0
   16fd0:	f104 0118 	add.w	r1, r4, #24
   16fd4:	4804      	ldr	r0, [pc, #16]	; (16fe8 <cdc_acm_write_cb+0x3c>)
   16fd6:	f01a f816 	bl	31006 <k_work_schedule_for_queue>
}
   16fda:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   16fdc:	f102 0108 	add.w	r1, r2, #8
   16fe0:	4801      	ldr	r0, [pc, #4]	; (16fe8 <cdc_acm_write_cb+0x3c>)
   16fe2:	f019 ffe4 	bl	30fae <k_work_submit_to_queue>
   16fe6:	e7eb      	b.n	16fc0 <cdc_acm_write_cb+0x14>
   16fe8:	20001ea8 	.word	0x20001ea8

00016fec <cdc_acm_init>:
{
   16fec:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   16fee:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
   16ff0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   16ff4:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
	parent->next = child;
   16ff8:	2200      	movs	r2, #0
   16ffa:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
	return list->tail;
   16ffe:	4a0b      	ldr	r2, [pc, #44]	; (1702c <cdc_acm_init+0x40>)
   17000:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   17002:	b172      	cbz	r2, 17022 <cdc_acm_init+0x36>
	parent->next = child;
   17004:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17006:	4a09      	ldr	r2, [pc, #36]	; (1702c <cdc_acm_init+0x40>)
   17008:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   1700a:	4909      	ldr	r1, [pc, #36]	; (17030 <cdc_acm_init+0x44>)
   1700c:	f104 0008 	add.w	r0, r4, #8
   17010:	f019 ffb1 	bl	30f76 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
   17014:	4907      	ldr	r1, [pc, #28]	; (17034 <cdc_acm_init+0x48>)
   17016:	f104 0018 	add.w	r0, r4, #24
   1701a:	f019 ffd8 	bl	30fce <k_work_init_delayable>
}
   1701e:	2000      	movs	r0, #0
   17020:	bd10      	pop	{r4, pc}
   17022:	4a02      	ldr	r2, [pc, #8]	; (1702c <cdc_acm_init+0x40>)
   17024:	6053      	str	r3, [r2, #4]
	list->head = node;
   17026:	6013      	str	r3, [r2, #0]
}
   17028:	e7ef      	b.n	1700a <cdc_acm_init+0x1e>
   1702a:	bf00      	nop
   1702c:	2000395c 	.word	0x2000395c
   17030:	0002bef1 	.word	0x0002bef1
   17034:	00017039 	.word	0x00017039

00017038 <tx_work_handler>:
{
   17038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1703a:	b085      	sub	sp, #20
   1703c:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
   1703e:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
   17042:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	struct usb_cfg_data *cfg = (void *)dev->config;
   17046:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   17048:	6a1b      	ldr	r3, [r3, #32]
   1704a:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
   1704c:	4628      	mov	r0, r5
   1704e:	f014 ff37 	bl	2bec0 <usb_transfer_is_busy>
   17052:	b108      	cbz	r0, 17058 <tx_work_handler+0x20>
}
   17054:	b005      	add	sp, #20
   17056:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   17058:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1705c:	a903      	add	r1, sp, #12
   1705e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   17060:	f014 f8c2 	bl	2b1e8 <ring_buf_get_claim>
	if (!len) {
   17064:	4606      	mov	r6, r0
   17066:	2800      	cmp	r0, #0
   17068:	d0f4      	beq.n	17054 <tx_work_handler+0x1c>
	dev_data->tx_ready = false;
   1706a:	2300      	movs	r3, #0
   1706c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   17070:	f010 0f3f 	tst.w	r0, #63	; 0x3f
   17074:	d100      	bne.n	17078 <tx_work_handler+0x40>
		len -= 1;
   17076:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   17078:	9701      	str	r7, [sp, #4]
   1707a:	4b06      	ldr	r3, [pc, #24]	; (17094 <tx_work_handler+0x5c>)
   1707c:	9300      	str	r3, [sp, #0]
   1707e:	2302      	movs	r3, #2
   17080:	4632      	mov	r2, r6
   17082:	9903      	ldr	r1, [sp, #12]
   17084:	4628      	mov	r0, r5
   17086:	f7ff f9e3 	bl	16450 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   1708a:	4631      	mov	r1, r6
   1708c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   1708e:	f014 f8c8 	bl	2b222 <ring_buf_get_finish>
   17092:	e7df      	b.n	17054 <tx_work_handler+0x1c>
   17094:	00016fad 	.word	0x00016fad

00017098 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
   17098:	b530      	push	{r4, r5, lr}
   1709a:	b083      	sub	sp, #12

	k_work_queue_start(&z_usb_work_q,
   1709c:	4d08      	ldr	r5, [pc, #32]	; (170c0 <z_usb_work_q_init+0x28>)
   1709e:	2400      	movs	r4, #0
   170a0:	9400      	str	r4, [sp, #0]
   170a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   170a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   170aa:	4906      	ldr	r1, [pc, #24]	; (170c4 <z_usb_work_q_init+0x2c>)
   170ac:	4628      	mov	r0, r5
   170ae:	f00f fa8b 	bl	265c8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   170b2:	4905      	ldr	r1, [pc, #20]	; (170c8 <z_usb_work_q_init+0x30>)
   170b4:	4628      	mov	r0, r5
   170b6:	f00e feed 	bl	25e94 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   170ba:	4620      	mov	r0, r4
   170bc:	b003      	add	sp, #12
   170be:	bd30      	pop	{r4, r5, pc}
   170c0:	20001ea8 	.word	0x20001ea8
   170c4:	200060c0 	.word	0x200060c0
   170c8:	00032dec 	.word	0x00032dec

000170cc <nus_ccc_cfg_changed>:

static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
   170cc:	b508      	push	{r3, lr}
	if (nus_cb.send_enabled) {
   170ce:	4b04      	ldr	r3, [pc, #16]	; (170e0 <nus_ccc_cfg_changed+0x14>)
   170d0:	689b      	ldr	r3, [r3, #8]
   170d2:	b11b      	cbz	r3, 170dc <nus_ccc_cfg_changed+0x10>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   170d4:	1e48      	subs	r0, r1, #1
   170d6:	bf18      	it	ne
   170d8:	2001      	movne	r0, #1
   170da:	4798      	blx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   170dc:	bd08      	pop	{r3, pc}
   170de:	bf00      	nop
   170e0:	20003964 	.word	0x20003964

000170e4 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   170e4:	b510      	push	{r4, lr}
   170e6:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   170e8:	4b03      	ldr	r3, [pc, #12]	; (170f8 <on_receive+0x14>)
   170ea:	681b      	ldr	r3, [r3, #0]
   170ec:	b113      	cbz	r3, 170f4 <on_receive+0x10>
   170ee:	4611      	mov	r1, r2
		nus_cb.received(conn, buf, len);
   170f0:	4622      	mov	r2, r4
   170f2:	4798      	blx	r3
}
	return len;
}
   170f4:	4620      	mov	r0, r4
   170f6:	bd10      	pop	{r4, pc}
   170f8:	20003964 	.word	0x20003964

000170fc <on_sent>:

static void on_sent(struct bt_conn *conn, void *user_data)
{
   170fc:	b508      	push	{r3, lr}
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   170fe:	4b02      	ldr	r3, [pc, #8]	; (17108 <on_sent+0xc>)
   17100:	685b      	ldr	r3, [r3, #4]
   17102:	b103      	cbz	r3, 17106 <on_sent+0xa>
		nus_cb.sent(conn);
   17104:	4798      	blx	r3
	}
}
   17106:	bd08      	pop	{r3, pc}
   17108:	20003964 	.word	0x20003964

0001710c <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   1710c:	b130      	cbz	r0, 1711c <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   1710e:	6801      	ldr	r1, [r0, #0]
   17110:	4a03      	ldr	r2, [pc, #12]	; (17120 <bt_nus_init+0x14>)
   17112:	6011      	str	r1, [r2, #0]
		nus_cb.sent = callbacks->sent;
   17114:	6841      	ldr	r1, [r0, #4]
   17116:	6051      	str	r1, [r2, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   17118:	6883      	ldr	r3, [r0, #8]
   1711a:	6093      	str	r3, [r2, #8]
	}

	return 0;
}
   1711c:	2000      	movs	r0, #0
   1711e:	4770      	bx	lr
   17120:	20003964 	.word	0x20003964

00017124 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   17124:	b510      	push	{r4, lr}
   17126:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   17128:	2300      	movs	r3, #0
   1712a:	9300      	str	r3, [sp, #0]
   1712c:	9301      	str	r3, [sp, #4]
   1712e:	9302      	str	r3, [sp, #8]
   17130:	9303      	str	r3, [sp, #12]
   17132:	9304      	str	r3, [sp, #16]
   17134:	9305      	str	r3, [sp, #20]
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   17136:	4b0d      	ldr	r3, [pc, #52]	; (1716c <bt_nus_send+0x48>)
   17138:	9301      	str	r3, [sp, #4]
	params.data = data;
   1713a:	9102      	str	r1, [sp, #8]
	params.len = len;
   1713c:	f8ad 200c 	strh.w	r2, [sp, #12]
	params.func = on_sent;
   17140:	4b0b      	ldr	r3, [pc, #44]	; (17170 <bt_nus_send+0x4c>)
   17142:	9304      	str	r3, [sp, #16]

	if (!conn) {
   17144:	b158      	cbz	r0, 1715e <bt_nus_send+0x3a>
   17146:	4604      	mov	r4, r0
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   17148:	2201      	movs	r2, #1
   1714a:	4908      	ldr	r1, [pc, #32]	; (1716c <bt_nus_send+0x48>)
   1714c:	f017 fcac 	bl	2eaa8 <bt_gatt_is_subscribed>
   17150:	b148      	cbz	r0, 17166 <bt_nus_send+0x42>
		return bt_gatt_notify_cb(conn, &params);
   17152:	4669      	mov	r1, sp
   17154:	4620      	mov	r0, r4
   17156:	f009 fbb9 	bl	208cc <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   1715a:	b006      	add	sp, #24
   1715c:	bd10      	pop	{r4, pc}
		return bt_gatt_notify_cb(NULL, &params);
   1715e:	4669      	mov	r1, sp
   17160:	f009 fbb4 	bl	208cc <bt_gatt_notify_cb>
   17164:	e7f9      	b.n	1715a <bt_nus_send+0x36>
		return -EINVAL;
   17166:	f06f 0015 	mvn.w	r0, #21
   1716a:	e7f6      	b.n	1715a <bt_nus_send+0x36>
   1716c:	00032e20 	.word	0x00032e20
   17170:	000170fd 	.word	0x000170fd

00017174 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   17174:	b470      	push	{r4, r5, r6}
   17176:	b08d      	sub	sp, #52	; 0x34
   17178:	4606      	mov	r6, r0
   1717a:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   1717c:	f10d 0c04 	add.w	ip, sp, #4
   17180:	4c2b      	ldr	r4, [pc, #172]	; (17230 <tc_aes128_set_encrypt_key+0xbc>)
   17182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   17188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1718a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1718e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   17192:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   17196:	2e00      	cmp	r6, #0
   17198:	d045      	beq.n	17226 <tc_aes128_set_encrypt_key+0xb2>
   1719a:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1719c:	2d00      	cmp	r5, #0
   1719e:	d044      	beq.n	1722a <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   171a0:	2300      	movs	r3, #0
   171a2:	e00f      	b.n	171c4 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   171a4:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   171a8:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   171ac:	784a      	ldrb	r2, [r1, #1]
   171ae:	0412      	lsls	r2, r2, #16
   171b0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   171b4:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   171b6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   171ba:	78c9      	ldrb	r1, [r1, #3]
   171bc:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   171be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   171c2:	3301      	adds	r3, #1
   171c4:	2b03      	cmp	r3, #3
   171c6:	d9ed      	bls.n	171a4 <tc_aes128_set_encrypt_key+0x30>
   171c8:	e006      	b.n	171d8 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   171ca:	1f19      	subs	r1, r3, #4
   171cc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   171d0:	404a      	eors	r2, r1
   171d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   171d6:	3301      	adds	r3, #1
   171d8:	2b2b      	cmp	r3, #43	; 0x2b
   171da:	d820      	bhi.n	1721e <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   171dc:	1e5a      	subs	r2, r3, #1
   171de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   171e2:	f013 0f03 	tst.w	r3, #3
   171e6:	d1f0      	bne.n	171ca <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   171e8:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   171ec:	0e11      	lsrs	r1, r2, #24
   171ee:	4c11      	ldr	r4, [pc, #68]	; (17234 <tc_aes128_set_encrypt_key+0xc0>)
   171f0:	5c65      	ldrb	r5, [r4, r1]
   171f2:	f3c2 4107 	ubfx	r1, r2, #16, #8
   171f6:	5c61      	ldrb	r1, [r4, r1]
   171f8:	0409      	lsls	r1, r1, #16
   171fa:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   171fe:	f3c2 2507 	ubfx	r5, r2, #8, #8
   17202:	5d65      	ldrb	r5, [r4, r5]
   17204:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   17208:	b2d2      	uxtb	r2, r2
   1720a:	5ca2      	ldrb	r2, [r4, r2]
   1720c:	4311      	orrs	r1, r2
   1720e:	f023 0203 	bic.w	r2, r3, #3
   17212:	3230      	adds	r2, #48	; 0x30
   17214:	446a      	add	r2, sp
   17216:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   1721a:	404a      	eors	r2, r1
   1721c:	e7d5      	b.n	171ca <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   1721e:	2001      	movs	r0, #1
}
   17220:	b00d      	add	sp, #52	; 0x34
   17222:	bc70      	pop	{r4, r5, r6}
   17224:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   17226:	2000      	movs	r0, #0
   17228:	e7fa      	b.n	17220 <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   1722a:	2000      	movs	r0, #0
   1722c:	e7f8      	b.n	17220 <tc_aes128_set_encrypt_key+0xac>
   1722e:	bf00      	nop
   17230:	00031e5c 	.word	0x00031e5c
   17234:	00032e78 	.word	0x00032e78

00017238 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   17238:	2800      	cmp	r0, #0
   1723a:	d04e      	beq.n	172da <tc_aes_encrypt+0xa2>
{
   1723c:	b570      	push	{r4, r5, r6, lr}
   1723e:	b084      	sub	sp, #16
   17240:	4615      	mov	r5, r2
   17242:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   17244:	2900      	cmp	r1, #0
   17246:	d04a      	beq.n	172de <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   17248:	2a00      	cmp	r2, #0
   1724a:	d04a      	beq.n	172e2 <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1724c:	2310      	movs	r3, #16
   1724e:	460a      	mov	r2, r1
   17250:	4619      	mov	r1, r3
   17252:	4668      	mov	r0, sp
   17254:	f014 ffd8 	bl	2c208 <_copy>
	add_round_key(state, s->words);
   17258:	4629      	mov	r1, r5
   1725a:	4668      	mov	r0, sp
   1725c:	f014 ffee 	bl	2c23c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   17260:	2400      	movs	r4, #0
   17262:	e014      	b.n	1728e <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   17264:	f81d 1003 	ldrb.w	r1, [sp, r3]
   17268:	481f      	ldr	r0, [pc, #124]	; (172e8 <tc_aes_encrypt+0xb0>)
   1726a:	5c41      	ldrb	r1, [r0, r1]
   1726c:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   17270:	3301      	adds	r3, #1
   17272:	2b0f      	cmp	r3, #15
   17274:	d9f6      	bls.n	17264 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   17276:	4668      	mov	r0, sp
   17278:	f015 f821 	bl	2c2be <shift_rows>
		mix_columns(state);
   1727c:	4668      	mov	r0, sp
   1727e:	f015 f898 	bl	2c3b2 <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   17282:	3401      	adds	r4, #1
   17284:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   17288:	4668      	mov	r0, sp
   1728a:	f014 ffd7 	bl	2c23c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1728e:	2c08      	cmp	r4, #8
   17290:	d801      	bhi.n	17296 <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   17292:	2300      	movs	r3, #0
   17294:	e7ed      	b.n	17272 <tc_aes_encrypt+0x3a>
   17296:	2300      	movs	r3, #0
   17298:	e006      	b.n	172a8 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   1729a:	f81d 2003 	ldrb.w	r2, [sp, r3]
   1729e:	4912      	ldr	r1, [pc, #72]	; (172e8 <tc_aes_encrypt+0xb0>)
   172a0:	5c8a      	ldrb	r2, [r1, r2]
   172a2:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   172a6:	3301      	adds	r3, #1
   172a8:	2b0f      	cmp	r3, #15
   172aa:	d9f6      	bls.n	1729a <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   172ac:	4668      	mov	r0, sp
   172ae:	f015 f806 	bl	2c2be <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   172b2:	1c61      	adds	r1, r4, #1
   172b4:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   172b8:	4668      	mov	r0, sp
   172ba:	f014 ffbf 	bl	2c23c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   172be:	2310      	movs	r3, #16
   172c0:	466a      	mov	r2, sp
   172c2:	4619      	mov	r1, r3
   172c4:	4630      	mov	r0, r6
   172c6:	f014 ff9f 	bl	2c208 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   172ca:	2210      	movs	r2, #16
   172cc:	2100      	movs	r1, #0
   172ce:	4668      	mov	r0, sp
   172d0:	f014 ffa7 	bl	2c222 <_set>

	return TC_CRYPTO_SUCCESS;
   172d4:	2001      	movs	r0, #1
}
   172d6:	b004      	add	sp, #16
   172d8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   172da:	2000      	movs	r0, #0
}
   172dc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   172de:	2000      	movs	r0, #0
   172e0:	e7f9      	b.n	172d6 <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   172e2:	2000      	movs	r0, #0
   172e4:	e7f7      	b.n	172d6 <tc_aes_encrypt+0x9e>
   172e6:	bf00      	nop
   172e8:	00032e78 	.word	0x00032e78

000172ec <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   172ec:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   172ee:	4802      	ldr	r0, [pc, #8]	; (172f8 <nrf_cc3xx_platform_abort_init+0xc>)
   172f0:	f010 fc0e 	bl	27b10 <nrf_cc3xx_platform_set_abort>
}
   172f4:	bd08      	pop	{r3, pc}
   172f6:	bf00      	nop
   172f8:	00032f78 	.word	0x00032f78

000172fc <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
   172fc:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   17300:	d017      	beq.n	17332 <mutex_flags_unknown+0x36>
   17302:	d80c      	bhi.n	1731e <mutex_flags_unknown+0x22>
   17304:	f640 63ba 	movw	r3, #3770	; 0xeba
   17308:	4298      	cmp	r0, r3
   1730a:	d014      	beq.n	17336 <mutex_flags_unknown+0x3a>
   1730c:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   17310:	d013      	beq.n	1733a <mutex_flags_unknown+0x3e>
   17312:	283a      	cmp	r0, #58	; 0x3a
   17314:	d001      	beq.n	1731a <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
   17316:	2001      	movs	r0, #1
   17318:	4770      	bx	lr
    switch(flags){
   1731a:	2000      	movs	r0, #0
   1731c:	4770      	bx	lr
   1731e:	4b09      	ldr	r3, [pc, #36]	; (17344 <mutex_flags_unknown+0x48>)
   17320:	4298      	cmp	r0, r3
   17322:	d00c      	beq.n	1733e <mutex_flags_unknown+0x42>
   17324:	4b08      	ldr	r3, [pc, #32]	; (17348 <mutex_flags_unknown+0x4c>)
   17326:	4298      	cmp	r0, r3
   17328:	d001      	beq.n	1732e <mutex_flags_unknown+0x32>
            return true;
   1732a:	2001      	movs	r0, #1
    }
}
   1732c:	4770      	bx	lr
    switch(flags){
   1732e:	2000      	movs	r0, #0
   17330:	4770      	bx	lr
   17332:	2000      	movs	r0, #0
   17334:	4770      	bx	lr
   17336:	2000      	movs	r0, #0
   17338:	4770      	bx	lr
   1733a:	2000      	movs	r0, #0
   1733c:	4770      	bx	lr
   1733e:	2000      	movs	r0, #0
   17340:	4770      	bx	lr
   17342:	bf00      	nop
   17344:	3a00003a 	.word	0x3a00003a
   17348:	a95c5f2c 	.word	0xa95c5f2c

0001734c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1734c:	b1e8      	cbz	r0, 1738a <mutex_unlock_platform+0x3e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1734e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   17350:	6842      	ldr	r2, [r0, #4]
   17352:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   17356:	d007      	beq.n	17368 <mutex_unlock_platform+0x1c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   17358:	490f      	ldr	r1, [pc, #60]	; (17398 <mutex_unlock_platform+0x4c>)
   1735a:	428a      	cmp	r2, r1
   1735c:	d01a      	beq.n	17394 <mutex_unlock_platform+0x48>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   1735e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   17360:	f00e ff08 	bl	26174 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   17364:	2000      	movs	r0, #0
    }
}
   17366:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   17368:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1736a:	2200      	movs	r2, #0
   1736c:	f3bf 8f5b 	dmb	ish
   17370:	e853 1f00 	ldrex	r1, [r3]
   17374:	2901      	cmp	r1, #1
   17376:	d103      	bne.n	17380 <mutex_unlock_platform+0x34>
   17378:	e843 2000 	strex	r0, r2, [r3]
   1737c:	2800      	cmp	r0, #0
   1737e:	d1f7      	bne.n	17370 <mutex_unlock_platform+0x24>
   17380:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   17384:	d104      	bne.n	17390 <mutex_unlock_platform+0x44>
   17386:	4610      	mov	r0, r2
   17388:	e7ed      	b.n	17366 <mutex_unlock_platform+0x1a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1738a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   1738e:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   17390:	4802      	ldr	r0, [pc, #8]	; (1739c <mutex_unlock_platform+0x50>)
   17392:	e7e8      	b.n	17366 <mutex_unlock_platform+0x1a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   17394:	4802      	ldr	r0, [pc, #8]	; (173a0 <mutex_unlock_platform+0x54>)
   17396:	e7e6      	b.n	17366 <mutex_unlock_platform+0x1a>
   17398:	a95c5f2c 	.word	0xa95c5f2c
   1739c:	ffff8fe9 	.word	0xffff8fe9
   173a0:	ffff8fea 	.word	0xffff8fea

000173a4 <mutex_lock_platform>:
    if(mutex == NULL) {
   173a4:	b330      	cbz	r0, 173f4 <mutex_lock_platform+0x50>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   173a6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   173a8:	6842      	ldr	r2, [r0, #4]
   173aa:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   173ae:	d00c      	beq.n	173ca <mutex_lock_platform+0x26>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   173b0:	4912      	ldr	r1, [pc, #72]	; (173fc <mutex_lock_platform+0x58>)
   173b2:	428a      	cmp	r2, r1
   173b4:	d01c      	beq.n	173f0 <mutex_lock_platform+0x4c>
        p_mutex = (struct k_mutex *)mutex->mutex;
   173b6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   173b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   173bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   173c0:	f00e fe54 	bl	2606c <z_impl_k_mutex_lock>
        if (ret == 0) {
   173c4:	b188      	cbz	r0, 173ea <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   173c6:	480e      	ldr	r0, [pc, #56]	; (17400 <mutex_lock_platform+0x5c>)
   173c8:	e00f      	b.n	173ea <mutex_lock_platform+0x46>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   173ca:	6803      	ldr	r3, [r0, #0]
   173cc:	2201      	movs	r2, #1
   173ce:	f3bf 8f5b 	dmb	ish
   173d2:	e853 1f00 	ldrex	r1, [r3]
   173d6:	2900      	cmp	r1, #0
   173d8:	d103      	bne.n	173e2 <mutex_lock_platform+0x3e>
   173da:	e843 2000 	strex	r0, r2, [r3]
   173de:	2800      	cmp	r0, #0
   173e0:	d1f7      	bne.n	173d2 <mutex_lock_platform+0x2e>
   173e2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   173e6:	d101      	bne.n	173ec <mutex_lock_platform+0x48>
   173e8:	2000      	movs	r0, #0
}
   173ea:	bd08      	pop	{r3, pc}
                       NRF_CC3XX_PLATFORM_SUCCESS :
   173ec:	4804      	ldr	r0, [pc, #16]	; (17400 <mutex_lock_platform+0x5c>)
   173ee:	e7fc      	b.n	173ea <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   173f0:	4804      	ldr	r0, [pc, #16]	; (17404 <mutex_lock_platform+0x60>)
   173f2:	e7fa      	b.n	173ea <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   173f4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   173f8:	4770      	bx	lr
   173fa:	bf00      	nop
   173fc:	a95c5f2c 	.word	0xa95c5f2c
   17400:	ffff8fe9 	.word	0xffff8fe9
   17404:	ffff8fea 	.word	0xffff8fea

00017408 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   17408:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1740a:	4604      	mov	r4, r0
   1740c:	b1a8      	cbz	r0, 1743a <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1740e:	6863      	ldr	r3, [r4, #4]
   17410:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   17414:	d010      	beq.n	17438 <mutex_free_platform+0x30>
   17416:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   1741a:	d00d      	beq.n	17438 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1741c:	4a0c      	ldr	r2, [pc, #48]	; (17450 <mutex_free_platform+0x48>)
   1741e:	4293      	cmp	r3, r2
   17420:	d00a      	beq.n	17438 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   17422:	f413 6f68 	tst.w	r3, #3712	; 0xe80
   17426:	d00d      	beq.n	17444 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   17428:	4621      	mov	r1, r4
   1742a:	480a      	ldr	r0, [pc, #40]	; (17454 <mutex_free_platform+0x4c>)
   1742c:	f019 fb60 	bl	30af0 <k_mem_slab_free>
        mutex->mutex = NULL;
   17430:	2300      	movs	r3, #0
   17432:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   17434:	4b06      	ldr	r3, [pc, #24]	; (17450 <mutex_free_platform+0x48>)
   17436:	6063      	str	r3, [r4, #4]
}
   17438:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   1743a:	4b07      	ldr	r3, [pc, #28]	; (17458 <mutex_free_platform+0x50>)
   1743c:	685b      	ldr	r3, [r3, #4]
   1743e:	4807      	ldr	r0, [pc, #28]	; (1745c <mutex_free_platform+0x54>)
   17440:	4798      	blx	r3
   17442:	e7e4      	b.n	1740e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   17444:	2214      	movs	r2, #20
   17446:	2100      	movs	r1, #0
   17448:	6820      	ldr	r0, [r4, #0]
   1744a:	f015 f9fe 	bl	2c84a <memset>
   1744e:	e7f1      	b.n	17434 <mutex_free_platform+0x2c>
   17450:	a95c5f2c 	.word	0xa95c5f2c
   17454:	20003e70 	.word	0x20003e70
   17458:	20000894 	.word	0x20000894
   1745c:	00032f80 	.word	0x00032f80

00017460 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   17460:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   17462:	4604      	mov	r4, r0
   17464:	b358      	cbz	r0, 174be <mutex_init_platform+0x5e>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   17466:	6860      	ldr	r0, [r4, #4]
   17468:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   1746c:	d026      	beq.n	174bc <mutex_init_platform+0x5c>
   1746e:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   17472:	d023      	beq.n	174bc <mutex_init_platform+0x5c>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   17474:	4b16      	ldr	r3, [pc, #88]	; (174d0 <mutex_init_platform+0x70>)
   17476:	4298      	cmp	r0, r3
   17478:	d026      	beq.n	174c8 <mutex_init_platform+0x68>
        mutex_flags_unknown(mutex->flags)) {
   1747a:	f7ff ff3f 	bl	172fc <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   1747e:	b1b0      	cbz	r0, 174ae <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   17480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17488:	4621      	mov	r1, r4
   1748a:	4812      	ldr	r0, [pc, #72]	; (174d4 <mutex_init_platform+0x74>)
   1748c:	f00e fcae 	bl	25dec <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   17490:	b908      	cbnz	r0, 17496 <mutex_init_platform+0x36>
   17492:	6823      	ldr	r3, [r4, #0]
   17494:	b91b      	cbnz	r3, 1749e <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
   17496:	4b10      	ldr	r3, [pc, #64]	; (174d8 <mutex_init_platform+0x78>)
   17498:	685b      	ldr	r3, [r3, #4]
   1749a:	4810      	ldr	r0, [pc, #64]	; (174dc <mutex_init_platform+0x7c>)
   1749c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1749e:	2214      	movs	r2, #20
   174a0:	2100      	movs	r1, #0
   174a2:	6820      	ldr	r0, [r4, #0]
   174a4:	f015 f9d1 	bl	2c84a <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   174a8:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   174ac:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   174ae:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   174b0:	f019 fbb5 	bl	30c1e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   174b4:	6863      	ldr	r3, [r4, #4]
   174b6:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   174ba:	6063      	str	r3, [r4, #4]
}
   174bc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   174be:	4b06      	ldr	r3, [pc, #24]	; (174d8 <mutex_init_platform+0x78>)
   174c0:	685b      	ldr	r3, [r3, #4]
   174c2:	4807      	ldr	r0, [pc, #28]	; (174e0 <mutex_init_platform+0x80>)
   174c4:	4798      	blx	r3
   174c6:	e7ce      	b.n	17466 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   174c8:	6823      	ldr	r3, [r4, #0]
   174ca:	2b00      	cmp	r3, #0
   174cc:	d1d5      	bne.n	1747a <mutex_init_platform+0x1a>
   174ce:	e7d7      	b.n	17480 <mutex_init_platform+0x20>
   174d0:	a95c5f2c 	.word	0xa95c5f2c
   174d4:	20003e70 	.word	0x20003e70
   174d8:	20000894 	.word	0x20000894
   174dc:	00032fa8 	.word	0x00032fa8
   174e0:	00032f80 	.word	0x00032f80

000174e4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   174e4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   174e6:	2340      	movs	r3, #64	; 0x40
   174e8:	2214      	movs	r2, #20
   174ea:	4904      	ldr	r1, [pc, #16]	; (174fc <nrf_cc3xx_platform_mutex_init+0x18>)
   174ec:	4804      	ldr	r0, [pc, #16]	; (17500 <nrf_cc3xx_platform_mutex_init+0x1c>)
   174ee:	f019 faf1 	bl	30ad4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   174f2:	4904      	ldr	r1, [pc, #16]	; (17504 <nrf_cc3xx_platform_mutex_init+0x20>)
   174f4:	4804      	ldr	r0, [pc, #16]	; (17508 <nrf_cc3xx_platform_mutex_init+0x24>)
   174f6:	f010 fbcf 	bl	27c98 <nrf_cc3xx_platform_set_mutexes>
}
   174fa:	bd08      	pop	{r3, pc}
   174fc:	20003970 	.word	0x20003970
   17500:	20003e70 	.word	0x20003e70
   17504:	00032fd8 	.word	0x00032fd8
   17508:	00032fec 	.word	0x00032fec

0001750c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1750c:	4901      	ldr	r1, [pc, #4]	; (17514 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1750e:	2210      	movs	r2, #16
	str	r2, [r1]
   17510:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   17512:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   17514:	e000ed10 	.word	0xe000ed10

00017518 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   17518:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1751a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1751c:	f380 8811 	msr	BASEPRI, r0
	isb
   17520:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   17524:	f3bf 8f4f 	dsb	sy
   17528:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1752a:	b662      	cpsie	i
	isb
   1752c:	f3bf 8f6f 	isb	sy

	bx	lr
   17530:	4770      	bx	lr
   17532:	bf00      	nop

00017534 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   17534:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   17536:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   17538:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   1753c:	f3bf 8f4f 	dsb	sy
   17540:	bf20      	wfe

	msr	BASEPRI, r0
   17542:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   17546:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   17548:	4770      	bx	lr
   1754a:	bf00      	nop

0001754c <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   1754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17550:	b082      	sub	sp, #8
   17552:	af00      	add	r7, sp, #0
   17554:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   17556:	f8d0 e000 	ldr.w	lr, [r0]
   1755a:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1755e:	6886      	ldr	r6, [r0, #8]
   17560:	466d      	mov	r5, sp
   17562:	b08a      	sub	sp, #40	; 0x28
   17564:	466b      	mov	r3, sp
   17566:	f113 0210 	adds.w	r2, r3, #16
   1756a:	f000 80eb 	beq.w	17744 <esf_dump+0x1f8>
   1756e:	2114      	movs	r1, #20
   17570:	b18a      	cbz	r2, 17596 <esf_dump+0x4a>
   17572:	4608      	mov	r0, r1
   17574:	2904      	cmp	r1, #4
   17576:	dd03      	ble.n	17580 <esf_dump+0x34>
   17578:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 17774 <esf_dump+0x228>
   1757c:	f8c3 8014 	str.w	r8, [r3, #20]
   17580:	2808      	cmp	r0, #8
   17582:	dd01      	ble.n	17588 <esf_dump+0x3c>
   17584:	f8c3 e018 	str.w	lr, [r3, #24]
   17588:	280c      	cmp	r0, #12
   1758a:	dd01      	ble.n	17590 <esf_dump+0x44>
   1758c:	f8c3 c01c 	str.w	ip, [r3, #28]
   17590:	2810      	cmp	r0, #16
   17592:	dd00      	ble.n	17596 <esf_dump+0x4a>
   17594:	621e      	str	r6, [r3, #32]
   17596:	2913      	cmp	r1, #19
   17598:	f340 80d7 	ble.w	1774a <esf_dump+0x1fe>
   1759c:	f04f 0c14 	mov.w	ip, #20
   175a0:	b13a      	cbz	r2, 175b2 <esf_dump+0x66>
   175a2:	2105      	movs	r1, #5
   175a4:	7139      	strb	r1, [r7, #4]
   175a6:	2100      	movs	r1, #0
   175a8:	7179      	strb	r1, [r7, #5]
   175aa:	71b9      	strb	r1, [r7, #6]
   175ac:	71f9      	strb	r1, [r7, #7]
   175ae:	6878      	ldr	r0, [r7, #4]
   175b0:	6118      	str	r0, [r3, #16]
   175b2:	2100      	movs	r1, #0
   175b4:	f36f 0100 	bfc	r1, #0, #1
   175b8:	f36f 0141 	bfc	r1, #1, #1
   175bc:	f36f 0182 	bfc	r1, #2, #1
   175c0:	f36f 01c5 	bfc	r1, #3, #3
   175c4:	2301      	movs	r3, #1
   175c6:	f363 1188 	bfi	r1, r3, #6, #3
   175ca:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   175ce:	f36c 2153 	bfi	r1, ip, #9, #11
   175d2:	f36f 511f 	bfc	r1, #20, #12
   175d6:	2300      	movs	r3, #0
   175d8:	4867      	ldr	r0, [pc, #412]	; (17778 <esf_dump+0x22c>)
   175da:	f7fc fd8f 	bl	140fc <z_impl_z_log_msg_static_create>
   175de:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   175e0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   175e4:	f8d4 c010 	ldr.w	ip, [r4, #16]
   175e8:	6966      	ldr	r6, [r4, #20]
   175ea:	466d      	mov	r5, sp
   175ec:	b08a      	sub	sp, #40	; 0x28
   175ee:	466b      	mov	r3, sp
   175f0:	f113 0210 	adds.w	r2, r3, #16
   175f4:	f000 80ac 	beq.w	17750 <esf_dump+0x204>
   175f8:	2114      	movs	r1, #20
   175fa:	b18a      	cbz	r2, 17620 <esf_dump+0xd4>
   175fc:	4608      	mov	r0, r1
   175fe:	2904      	cmp	r1, #4
   17600:	dd03      	ble.n	1760a <esf_dump+0xbe>
   17602:	f8df 8178 	ldr.w	r8, [pc, #376]	; 1777c <esf_dump+0x230>
   17606:	f8c3 8014 	str.w	r8, [r3, #20]
   1760a:	2808      	cmp	r0, #8
   1760c:	dd01      	ble.n	17612 <esf_dump+0xc6>
   1760e:	f8c3 e018 	str.w	lr, [r3, #24]
   17612:	280c      	cmp	r0, #12
   17614:	dd01      	ble.n	1761a <esf_dump+0xce>
   17616:	f8c3 c01c 	str.w	ip, [r3, #28]
   1761a:	2810      	cmp	r0, #16
   1761c:	dd00      	ble.n	17620 <esf_dump+0xd4>
   1761e:	621e      	str	r6, [r3, #32]
   17620:	2913      	cmp	r1, #19
   17622:	f340 8098 	ble.w	17756 <esf_dump+0x20a>
   17626:	f04f 0c14 	mov.w	ip, #20
   1762a:	b13a      	cbz	r2, 1763c <esf_dump+0xf0>
   1762c:	2105      	movs	r1, #5
   1762e:	7139      	strb	r1, [r7, #4]
   17630:	2100      	movs	r1, #0
   17632:	7179      	strb	r1, [r7, #5]
   17634:	71b9      	strb	r1, [r7, #6]
   17636:	71f9      	strb	r1, [r7, #7]
   17638:	6878      	ldr	r0, [r7, #4]
   1763a:	6118      	str	r0, [r3, #16]
   1763c:	2100      	movs	r1, #0
   1763e:	f36f 0100 	bfc	r1, #0, #1
   17642:	f36f 0141 	bfc	r1, #1, #1
   17646:	f36f 0182 	bfc	r1, #2, #1
   1764a:	f36f 01c5 	bfc	r1, #3, #3
   1764e:	2301      	movs	r3, #1
   17650:	f363 1188 	bfi	r1, r3, #6, #3
   17654:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   17658:	f36c 2153 	bfi	r1, ip, #9, #11
   1765c:	f36f 511f 	bfc	r1, #20, #12
   17660:	2300      	movs	r3, #0
   17662:	4845      	ldr	r0, [pc, #276]	; (17778 <esf_dump+0x22c>)
   17664:	f7fc fd4a 	bl	140fc <z_impl_z_log_msg_static_create>
   17668:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1766a:	69e6      	ldr	r6, [r4, #28]
   1766c:	466d      	mov	r5, sp
   1766e:	b088      	sub	sp, #32
   17670:	466b      	mov	r3, sp
   17672:	f113 0210 	adds.w	r2, r3, #16
   17676:	d071      	beq.n	1775c <esf_dump+0x210>
   17678:	210c      	movs	r1, #12
   1767a:	b14a      	cbz	r2, 17690 <esf_dump+0x144>
   1767c:	4608      	mov	r0, r1
   1767e:	2904      	cmp	r1, #4
   17680:	dd03      	ble.n	1768a <esf_dump+0x13e>
   17682:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 17780 <esf_dump+0x234>
   17686:	f8c3 c014 	str.w	ip, [r3, #20]
   1768a:	2808      	cmp	r0, #8
   1768c:	dd00      	ble.n	17690 <esf_dump+0x144>
   1768e:	619e      	str	r6, [r3, #24]
   17690:	290b      	cmp	r1, #11
   17692:	dd66      	ble.n	17762 <esf_dump+0x216>
   17694:	f04f 0c0c 	mov.w	ip, #12
   17698:	b13a      	cbz	r2, 176aa <esf_dump+0x15e>
   1769a:	2103      	movs	r1, #3
   1769c:	7139      	strb	r1, [r7, #4]
   1769e:	2100      	movs	r1, #0
   176a0:	7179      	strb	r1, [r7, #5]
   176a2:	71b9      	strb	r1, [r7, #6]
   176a4:	71f9      	strb	r1, [r7, #7]
   176a6:	6878      	ldr	r0, [r7, #4]
   176a8:	6118      	str	r0, [r3, #16]
   176aa:	2100      	movs	r1, #0
   176ac:	f36f 0100 	bfc	r1, #0, #1
   176b0:	f36f 0141 	bfc	r1, #1, #1
   176b4:	f36f 0182 	bfc	r1, #2, #1
   176b8:	f36f 01c5 	bfc	r1, #3, #3
   176bc:	2301      	movs	r3, #1
   176be:	f363 1188 	bfi	r1, r3, #6, #3
   176c2:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   176c6:	f36c 2153 	bfi	r1, ip, #9, #11
   176ca:	f36f 511f 	bfc	r1, #20, #12
   176ce:	2300      	movs	r3, #0
   176d0:	4829      	ldr	r0, [pc, #164]	; (17778 <esf_dump+0x22c>)
   176d2:	f7fc fd13 	bl	140fc <z_impl_z_log_msg_static_create>
   176d6:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   176d8:	69a4      	ldr	r4, [r4, #24]
   176da:	b088      	sub	sp, #32
   176dc:	466b      	mov	r3, sp
   176de:	f113 0210 	adds.w	r2, r3, #16
   176e2:	d041      	beq.n	17768 <esf_dump+0x21c>
   176e4:	210c      	movs	r1, #12
   176e6:	b13a      	cbz	r2, 176f8 <esf_dump+0x1ac>
   176e8:	4608      	mov	r0, r1
   176ea:	2904      	cmp	r1, #4
   176ec:	dd01      	ble.n	176f2 <esf_dump+0x1a6>
   176ee:	4d25      	ldr	r5, [pc, #148]	; (17784 <esf_dump+0x238>)
   176f0:	615d      	str	r5, [r3, #20]
   176f2:	2808      	cmp	r0, #8
   176f4:	dd00      	ble.n	176f8 <esf_dump+0x1ac>
   176f6:	619c      	str	r4, [r3, #24]
   176f8:	290b      	cmp	r1, #11
   176fa:	dd38      	ble.n	1776e <esf_dump+0x222>
   176fc:	240c      	movs	r4, #12
   176fe:	b13a      	cbz	r2, 17710 <esf_dump+0x1c4>
   17700:	2103      	movs	r1, #3
   17702:	7139      	strb	r1, [r7, #4]
   17704:	2100      	movs	r1, #0
   17706:	7179      	strb	r1, [r7, #5]
   17708:	71b9      	strb	r1, [r7, #6]
   1770a:	71f9      	strb	r1, [r7, #7]
   1770c:	6878      	ldr	r0, [r7, #4]
   1770e:	6118      	str	r0, [r3, #16]
   17710:	2100      	movs	r1, #0
   17712:	f36f 0100 	bfc	r1, #0, #1
   17716:	f36f 0141 	bfc	r1, #1, #1
   1771a:	f36f 0182 	bfc	r1, #2, #1
   1771e:	f36f 01c5 	bfc	r1, #3, #3
   17722:	2301      	movs	r3, #1
   17724:	f363 1188 	bfi	r1, r3, #6, #3
   17728:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1772c:	f364 2153 	bfi	r1, r4, #9, #11
   17730:	f36f 511f 	bfc	r1, #20, #12
   17734:	2300      	movs	r3, #0
   17736:	4810      	ldr	r0, [pc, #64]	; (17778 <esf_dump+0x22c>)
   17738:	f7fc fce0 	bl	140fc <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
   1773c:	3708      	adds	r7, #8
   1773e:	46bd      	mov	sp, r7
   17740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   17744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17748:	e712      	b.n	17570 <esf_dump+0x24>
   1774a:	f06f 0c1b 	mvn.w	ip, #27
   1774e:	e727      	b.n	175a0 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   17750:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17754:	e751      	b.n	175fa <esf_dump+0xae>
   17756:	f06f 0c1b 	mvn.w	ip, #27
   1775a:	e766      	b.n	1762a <esf_dump+0xde>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1775c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17760:	e78b      	b.n	1767a <esf_dump+0x12e>
   17762:	f06f 0c1b 	mvn.w	ip, #27
   17766:	e797      	b.n	17698 <esf_dump+0x14c>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   17768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1776c:	e7bb      	b.n	176e6 <esf_dump+0x19a>
   1776e:	f06f 041b 	mvn.w	r4, #27
   17772:	e7c4      	b.n	176fe <esf_dump+0x1b2>
   17774:	00032ffc 	.word	0x00032ffc
   17778:	00031d84 	.word	0x00031d84
   1777c:	0003302c 	.word	0x0003302c
   17780:	0003305c 	.word	0x0003305c
   17784:	0003306c 	.word	0x0003306c

00017788 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   17788:	2800      	cmp	r0, #0
   1778a:	db07      	blt.n	1779c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1778c:	f000 021f 	and.w	r2, r0, #31
   17790:	0940      	lsrs	r0, r0, #5
   17792:	2301      	movs	r3, #1
   17794:	4093      	lsls	r3, r2
   17796:	4a02      	ldr	r2, [pc, #8]	; (177a0 <__NVIC_EnableIRQ+0x18>)
   17798:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   1779c:	4770      	bx	lr
   1779e:	bf00      	nop
   177a0:	e000e100 	.word	0xe000e100

000177a4 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   177a4:	2800      	cmp	r0, #0
   177a6:	db0c      	blt.n	177c2 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   177a8:	f000 021f 	and.w	r2, r0, #31
   177ac:	0940      	lsrs	r0, r0, #5
   177ae:	2301      	movs	r3, #1
   177b0:	4093      	lsls	r3, r2
   177b2:	3020      	adds	r0, #32
   177b4:	4a03      	ldr	r2, [pc, #12]	; (177c4 <__NVIC_DisableIRQ+0x20>)
   177b6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   177ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   177be:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   177c2:	4770      	bx	lr
   177c4:	e000e100 	.word	0xe000e100

000177c8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   177c8:	2800      	cmp	r0, #0
   177ca:	db08      	blt.n	177de <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   177cc:	0149      	lsls	r1, r1, #5
   177ce:	b2c9      	uxtb	r1, r1
   177d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   177d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   177d8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   177dc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   177de:	f000 000f 	and.w	r0, r0, #15
   177e2:	0149      	lsls	r1, r1, #5
   177e4:	b2c9      	uxtb	r1, r1
   177e6:	4b01      	ldr	r3, [pc, #4]	; (177ec <__NVIC_SetPriority+0x24>)
   177e8:	5419      	strb	r1, [r3, r0]
  }
}
   177ea:	4770      	bx	lr
   177ec:	e000ed14 	.word	0xe000ed14

000177f0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   177f0:	0942      	lsrs	r2, r0, #5
   177f2:	4b05      	ldr	r3, [pc, #20]	; (17808 <arch_irq_is_enabled+0x18>)
   177f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   177f8:	f000 001f 	and.w	r0, r0, #31
   177fc:	2301      	movs	r3, #1
   177fe:	fa03 f000 	lsl.w	r0, r3, r0
}
   17802:	4010      	ands	r0, r2
   17804:	4770      	bx	lr
   17806:	bf00      	nop
   17808:	e000e100 	.word	0xe000e100

0001780c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1780c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1780e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   17810:	4b05      	ldr	r3, [pc, #20]	; (17828 <_arch_isr_direct_pm+0x1c>)
   17812:	695b      	ldr	r3, [r3, #20]
   17814:	b90b      	cbnz	r3, 1781a <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   17816:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   17818:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   1781a:	4b03      	ldr	r3, [pc, #12]	; (17828 <_arch_isr_direct_pm+0x1c>)
   1781c:	2200      	movs	r2, #0
   1781e:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   17820:	f019 f9e1 	bl	30be6 <z_pm_save_idle_exit>
   17824:	e7f7      	b.n	17816 <_arch_isr_direct_pm+0xa>
   17826:	bf00      	nop
   17828:	2000522c 	.word	0x2000522c

0001782c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1782c:	bf30      	wfi
    b z_SysNmiOnReset
   1782e:	f7ff bffd 	b.w	1782c <z_SysNmiOnReset>
   17832:	bf00      	nop

00017834 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   17834:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   17836:	4b0b      	ldr	r3, [pc, #44]	; (17864 <z_arm_prep_c+0x30>)
   17838:	4a0b      	ldr	r2, [pc, #44]	; (17868 <z_arm_prep_c+0x34>)
   1783a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1783e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   17840:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17844:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   17848:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1784c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   17850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   17854:	f00e f9fe 	bl	25c54 <z_bss_zero>
	z_data_copy();
   17858:	f00f fb12 	bl	26e80 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1785c:	f000 ff9e 	bl	1879c <z_arm_interrupt_init>
	z_cstart();
   17860:	f00e fa56 	bl	25d10 <z_cstart>
   17864:	e000ed00 	.word	0xe000ed00
   17868:	00000000 	.word	0x00000000

0001786c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1786c:	4a0a      	ldr	r2, [pc, #40]	; (17898 <arch_swap+0x2c>)
   1786e:	6893      	ldr	r3, [r2, #8]
   17870:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   17874:	4909      	ldr	r1, [pc, #36]	; (1789c <arch_swap+0x30>)
   17876:	6809      	ldr	r1, [r1, #0]
   17878:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1787c:	4908      	ldr	r1, [pc, #32]	; (178a0 <arch_swap+0x34>)
   1787e:	684b      	ldr	r3, [r1, #4]
   17880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   17884:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   17886:	2300      	movs	r3, #0
   17888:	f383 8811 	msr	BASEPRI, r3
   1788c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   17890:	6893      	ldr	r3, [r2, #8]
}
   17892:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   17896:	4770      	bx	lr
   17898:	2000522c 	.word	0x2000522c
   1789c:	00035114 	.word	0x00035114
   178a0:	e000ed00 	.word	0xe000ed00

000178a4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   178a4:	4913      	ldr	r1, [pc, #76]	; (178f4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   178a6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   178a8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   178ac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   178ae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   178b2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   178b6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   178b8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   178bc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   178c0:	4f0d      	ldr	r7, [pc, #52]	; (178f8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   178c2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   178c6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   178c8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   178ca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   178cc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   178d0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   178d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   178d6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   178da:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   178dc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   178de:	f001 f80d 	bl	188fc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   178e2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   178e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   178ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   178ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   178f2:	4770      	bx	lr
    ldr r1, =_kernel
   178f4:	2000522c 	.word	0x2000522c
    ldr v4, =_SCS_ICSR
   178f8:	e000ed04 	.word	0xe000ed04

000178fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   178fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   17900:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   17902:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   17906:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1790a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1790c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   17910:	2902      	cmp	r1, #2
    beq _oops
   17912:	d0ff      	beq.n	17914 <_oops>

00017914 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   17914:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   17916:	f014 fe87 	bl	2c628 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1791a:	bd01      	pop	{r0, pc}

0001791c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   1791c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1791e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   17922:	490e      	ldr	r1, [pc, #56]	; (1795c <arch_new_thread+0x40>)
   17924:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   17928:	f021 0101 	bic.w	r1, r1, #1
   1792c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   17930:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   17934:	9b01      	ldr	r3, [sp, #4]
   17936:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1793a:	9b02      	ldr	r3, [sp, #8]
   1793c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   17940:	9b03      	ldr	r3, [sp, #12]
   17942:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   17946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1794a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   1794e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   17950:	2300      	movs	r3, #0
   17952:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   17956:	bc10      	pop	{r4}
   17958:	4770      	bx	lr
   1795a:	bf00      	nop
   1795c:	0002a4b3 	.word	0x0002a4b3

00017960 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   17960:	4b10      	ldr	r3, [pc, #64]	; (179a4 <z_check_thread_stack_fail+0x44>)
   17962:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   17964:	b1bb      	cbz	r3, 17996 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   17966:	f110 0f16 	cmn.w	r0, #22
   1796a:	d00b      	beq.n	17984 <z_check_thread_stack_fail+0x24>
   1796c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   17970:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
   17974:	4584      	cmp	ip, r0
   17976:	d810      	bhi.n	1799a <z_check_thread_stack_fail+0x3a>
   17978:	4282      	cmp	r2, r0
   1797a:	d910      	bls.n	1799e <z_check_thread_stack_fail+0x3e>
   1797c:	428a      	cmp	r2, r1
   1797e:	d807      	bhi.n	17990 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   17980:	2000      	movs	r0, #0
   17982:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   17984:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   17988:	428a      	cmp	r2, r1
   1798a:	d801      	bhi.n	17990 <z_check_thread_stack_fail+0x30>
	return 0;
   1798c:	2000      	movs	r0, #0
}
   1798e:	4770      	bx	lr
		return thread->stack_info.start;
   17990:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   17994:	4770      	bx	lr
		return 0;
   17996:	2000      	movs	r0, #0
   17998:	4770      	bx	lr
	return 0;
   1799a:	2000      	movs	r0, #0
   1799c:	4770      	bx	lr
   1799e:	2000      	movs	r0, #0
   179a0:	4770      	bx	lr
   179a2:	bf00      	nop
   179a4:	2000522c 	.word	0x2000522c

000179a8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   179a8:	b508      	push	{r3, lr}
   179aa:	460d      	mov	r5, r1
   179ac:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   179ae:	4b08      	ldr	r3, [pc, #32]	; (179d0 <arch_switch_to_main_thread+0x28>)
   179b0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   179b2:	f000 ffa3 	bl	188fc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   179b6:	4620      	mov	r0, r4
   179b8:	f385 8809 	msr	PSP, r5
   179bc:	2100      	movs	r1, #0
   179be:	b663      	cpsie	if
   179c0:	f381 8811 	msr	BASEPRI, r1
   179c4:	f3bf 8f6f 	isb	sy
   179c8:	2200      	movs	r2, #0
   179ca:	2300      	movs	r3, #0
   179cc:	f012 fd71 	bl	2a4b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   179d0:	2000522c 	.word	0x2000522c

000179d4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   179d4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   179d6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   179d8:	4a0b      	ldr	r2, [pc, #44]	; (17a08 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   179da:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   179dc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   179de:	bf1e      	ittt	ne
	movne	r1, #0
   179e0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   179e2:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   179e4:	f019 f8ff 	blne	30be6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   179e8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   179ea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   179ee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   179f2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   179f6:	4905      	ldr	r1, [pc, #20]	; (17a0c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   179f8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   179fa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   179fc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   179fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   17a02:	4903      	ldr	r1, [pc, #12]	; (17a10 <_isr_wrapper+0x3c>)
	bx r1
   17a04:	4708      	bx	r1
   17a06:	0000      	.short	0x0000
	ldr r2, =_kernel
   17a08:	2000522c 	.word	0x2000522c
	ldr r1, =_sw_isr_table
   17a0c:	00031adc 	.word	0x00031adc
	ldr r1, =z_arm_int_exit
   17a10:	00017a15 	.word	0x00017a15

00017a14 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   17a14:	4b04      	ldr	r3, [pc, #16]	; (17a28 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   17a16:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   17a18:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   17a1a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   17a1c:	d003      	beq.n	17a26 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   17a1e:	4903      	ldr	r1, [pc, #12]	; (17a2c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   17a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   17a24:	600a      	str	r2, [r1, #0]

00017a26 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   17a26:	4770      	bx	lr
	ldr r3, =_kernel
   17a28:	2000522c 	.word	0x2000522c
	ldr r1, =_SCS_ICSR
   17a2c:	e000ed04 	.word	0xe000ed04

00017a30 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   17a30:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   17a32:	4b0d      	ldr	r3, [pc, #52]	; (17a68 <z_arm_is_synchronous_svc+0x38>)
   17a34:	695a      	ldr	r2, [r3, #20]
   17a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   17a3a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   17a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17a40:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   17a44:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   17a48:	695a      	ldr	r2, [r3, #20]
   17a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   17a4e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   17a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17a54:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   17a58:	f64d 7302 	movw	r3, #57090	; 0xdf02
   17a5c:	4299      	cmp	r1, r3
   17a5e:	d001      	beq.n	17a64 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   17a60:	2000      	movs	r0, #0
   17a62:	4770      	bx	lr
		return true;
   17a64:	2001      	movs	r0, #1
}
   17a66:	4770      	bx	lr
   17a68:	e000ed00 	.word	0xe000ed00

00017a6c <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   17a6c:	b510      	push	{r4, lr}
   17a6e:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   17a70:	2400      	movs	r4, #0
   17a72:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   17a74:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   17a78:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   17a7c:	d132      	bne.n	17ae4 <get_esf+0x78>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   17a7e:	f002 040c 	and.w	r4, r2, #12
   17a82:	2c08      	cmp	r4, #8
   17a84:	d005      	beq.n	17a92 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   17a86:	f012 0f08 	tst.w	r2, #8
   17a8a:	d028      	beq.n	17ade <get_esf+0x72>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   17a8c:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
   17a8e:	b008      	add	sp, #32
   17a90:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   17a92:	4b15      	ldr	r3, [pc, #84]	; (17ae8 <get_esf+0x7c>)
   17a94:	9307      	str	r3, [sp, #28]
   17a96:	2302      	movs	r3, #2
   17a98:	f88d 3004 	strb.w	r3, [sp, #4]
   17a9c:	2400      	movs	r4, #0
   17a9e:	f88d 4005 	strb.w	r4, [sp, #5]
   17aa2:	f88d 4006 	strb.w	r4, [sp, #6]
   17aa6:	f88d 4007 	strb.w	r4, [sp, #7]
   17aaa:	9b01      	ldr	r3, [sp, #4]
   17aac:	9306      	str	r3, [sp, #24]
   17aae:	4621      	mov	r1, r4
   17ab0:	f364 0100 	bfi	r1, r4, #0, #1
   17ab4:	f364 0141 	bfi	r1, r4, #1, #1
   17ab8:	f364 0182 	bfi	r1, r4, #2, #1
   17abc:	f364 01c5 	bfi	r1, r4, #3, #3
   17ac0:	2301      	movs	r3, #1
   17ac2:	f363 1188 	bfi	r1, r3, #6, #3
   17ac6:	2308      	movs	r3, #8
   17ac8:	f363 2153 	bfi	r1, r3, #9, #11
   17acc:	f364 511f 	bfi	r1, r4, #20, #12
   17ad0:	4623      	mov	r3, r4
   17ad2:	aa06      	add	r2, sp, #24
   17ad4:	4805      	ldr	r0, [pc, #20]	; (17aec <get_esf+0x80>)
   17ad6:	f7fc fb11 	bl	140fc <z_impl_z_log_msg_static_create>
		return NULL;
   17ada:	4620      	mov	r0, r4
   17adc:	e7d7      	b.n	17a8e <get_esf+0x22>
			*nested_exc = true;
   17ade:	2201      	movs	r2, #1
   17ae0:	701a      	strb	r2, [r3, #0]
   17ae2:	e7d4      	b.n	17a8e <get_esf+0x22>
		return NULL;
   17ae4:	2000      	movs	r0, #0
   17ae6:	e7d2      	b.n	17a8e <get_esf+0x22>
   17ae8:	0003309c 	.word	0x0003309c
   17aec:	00031d84 	.word	0x00031d84

00017af0 <bus_fault>:
{
   17af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17af4:	b0ac      	sub	sp, #176	; 0xb0
   17af6:	af00      	add	r7, sp, #0
   17af8:	4605      	mov	r5, r0
   17afa:	4688      	mov	r8, r1
   17afc:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   17afe:	4bb9      	ldr	r3, [pc, #740]	; (17de4 <bus_fault+0x2f4>)
   17b00:	61fb      	str	r3, [r7, #28]
   17b02:	2302      	movs	r3, #2
   17b04:	713b      	strb	r3, [r7, #4]
   17b06:	2300      	movs	r3, #0
   17b08:	717b      	strb	r3, [r7, #5]
   17b0a:	71bb      	strb	r3, [r7, #6]
   17b0c:	71fb      	strb	r3, [r7, #7]
   17b0e:	687a      	ldr	r2, [r7, #4]
   17b10:	61ba      	str	r2, [r7, #24]
   17b12:	4619      	mov	r1, r3
   17b14:	f363 0100 	bfi	r1, r3, #0, #1
   17b18:	f363 0141 	bfi	r1, r3, #1, #1
   17b1c:	f363 0182 	bfi	r1, r3, #2, #1
   17b20:	f363 01c5 	bfi	r1, r3, #3, #3
   17b24:	2201      	movs	r2, #1
   17b26:	f362 1188 	bfi	r1, r2, #6, #3
   17b2a:	2208      	movs	r2, #8
   17b2c:	f362 2153 	bfi	r1, r2, #9, #11
   17b30:	f363 511f 	bfi	r1, r3, #20, #12
   17b34:	f107 0218 	add.w	r2, r7, #24
   17b38:	48ab      	ldr	r0, [pc, #684]	; (17de8 <bus_fault+0x2f8>)
   17b3a:	f7fc fadf 	bl	140fc <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17b3e:	4bab      	ldr	r3, [pc, #684]	; (17dec <bus_fault+0x2fc>)
   17b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17b42:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   17b46:	d12b      	bne.n	17ba0 <bus_fault+0xb0>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   17b48:	2616      	movs	r6, #22
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   17b4a:	4ba8      	ldr	r3, [pc, #672]	; (17dec <bus_fault+0x2fc>)
   17b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17b4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   17b52:	d147      	bne.n	17be4 <bus_fault+0xf4>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   17b54:	4ba5      	ldr	r3, [pc, #660]	; (17dec <bus_fault+0x2fc>)
   17b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17b58:	f413 7f00 	tst.w	r3, #512	; 0x200
   17b5c:	d164      	bne.n	17c28 <bus_fault+0x138>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   17b5e:	4ba3      	ldr	r3, [pc, #652]	; (17dec <bus_fault+0x2fc>)
   17b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17b62:	f413 6f80 	tst.w	r3, #1024	; 0x400
   17b66:	f040 80d3 	bne.w	17d10 <bus_fault+0x220>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   17b6a:	4ba0      	ldr	r3, [pc, #640]	; (17dec <bus_fault+0x2fc>)
   17b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17b6e:	f413 7f80 	tst.w	r3, #256	; 0x100
   17b72:	f040 80ef 	bne.w	17d54 <bus_fault+0x264>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   17b76:	4b9d      	ldr	r3, [pc, #628]	; (17dec <bus_fault+0x2fc>)
   17b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17b7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   17b7e:	f040 810d 	bne.w	17d9c <bus_fault+0x2ac>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   17b82:	4a9a      	ldr	r2, [pc, #616]	; (17dec <bus_fault+0x2fc>)
   17b84:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17b86:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   17b8a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17b8c:	2101      	movs	r1, #1
   17b8e:	4628      	mov	r0, r5
   17b90:	f014 fd71 	bl	2c676 <memory_fault_recoverable>
   17b94:	7020      	strb	r0, [r4, #0]
}
   17b96:	4630      	mov	r0, r6
   17b98:	37b0      	adds	r7, #176	; 0xb0
   17b9a:	46bd      	mov	sp, r7
   17b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
   17ba0:	4b93      	ldr	r3, [pc, #588]	; (17df0 <bus_fault+0x300>)
   17ba2:	637b      	str	r3, [r7, #52]	; 0x34
   17ba4:	2302      	movs	r3, #2
   17ba6:	713b      	strb	r3, [r7, #4]
   17ba8:	2300      	movs	r3, #0
   17baa:	717b      	strb	r3, [r7, #5]
   17bac:	71bb      	strb	r3, [r7, #6]
   17bae:	71fb      	strb	r3, [r7, #7]
   17bb0:	687a      	ldr	r2, [r7, #4]
   17bb2:	633a      	str	r2, [r7, #48]	; 0x30
   17bb4:	4619      	mov	r1, r3
   17bb6:	f363 0100 	bfi	r1, r3, #0, #1
   17bba:	f363 0141 	bfi	r1, r3, #1, #1
   17bbe:	f363 0182 	bfi	r1, r3, #2, #1
   17bc2:	f363 01c5 	bfi	r1, r3, #3, #3
   17bc6:	2201      	movs	r2, #1
   17bc8:	f362 1188 	bfi	r1, r2, #6, #3
   17bcc:	2208      	movs	r2, #8
   17bce:	f362 2153 	bfi	r1, r2, #9, #11
   17bd2:	f363 511f 	bfi	r1, r3, #20, #12
   17bd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   17bda:	4883      	ldr	r0, [pc, #524]	; (17de8 <bus_fault+0x2f8>)
   17bdc:	f7fc fa8e 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_STACKING;
   17be0:	2617      	movs	r6, #23
   17be2:	e7b2      	b.n	17b4a <bus_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
   17be4:	4b83      	ldr	r3, [pc, #524]	; (17df4 <bus_fault+0x304>)
   17be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   17be8:	2302      	movs	r3, #2
   17bea:	713b      	strb	r3, [r7, #4]
   17bec:	2300      	movs	r3, #0
   17bee:	717b      	strb	r3, [r7, #5]
   17bf0:	71bb      	strb	r3, [r7, #6]
   17bf2:	71fb      	strb	r3, [r7, #7]
   17bf4:	687a      	ldr	r2, [r7, #4]
   17bf6:	64ba      	str	r2, [r7, #72]	; 0x48
   17bf8:	4619      	mov	r1, r3
   17bfa:	f363 0100 	bfi	r1, r3, #0, #1
   17bfe:	f363 0141 	bfi	r1, r3, #1, #1
   17c02:	f363 0182 	bfi	r1, r3, #2, #1
   17c06:	f363 01c5 	bfi	r1, r3, #3, #3
   17c0a:	2201      	movs	r2, #1
   17c0c:	f362 1188 	bfi	r1, r2, #6, #3
   17c10:	2208      	movs	r2, #8
   17c12:	f362 2153 	bfi	r1, r2, #9, #11
   17c16:	f363 511f 	bfi	r1, r3, #20, #12
   17c1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
   17c1e:	4872      	ldr	r0, [pc, #456]	; (17de8 <bus_fault+0x2f8>)
   17c20:	f7fc fa6c 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   17c24:	2618      	movs	r6, #24
   17c26:	e795      	b.n	17b54 <bus_fault+0x64>
		PR_FAULT_INFO("  Precise data bus error");
   17c28:	4b73      	ldr	r3, [pc, #460]	; (17df8 <bus_fault+0x308>)
   17c2a:	667b      	str	r3, [r7, #100]	; 0x64
   17c2c:	2302      	movs	r3, #2
   17c2e:	713b      	strb	r3, [r7, #4]
   17c30:	2300      	movs	r3, #0
   17c32:	717b      	strb	r3, [r7, #5]
   17c34:	71bb      	strb	r3, [r7, #6]
   17c36:	71fb      	strb	r3, [r7, #7]
   17c38:	687a      	ldr	r2, [r7, #4]
   17c3a:	663a      	str	r2, [r7, #96]	; 0x60
   17c3c:	4619      	mov	r1, r3
   17c3e:	f363 0100 	bfi	r1, r3, #0, #1
   17c42:	f363 0141 	bfi	r1, r3, #1, #1
   17c46:	f363 0182 	bfi	r1, r3, #2, #1
   17c4a:	f363 01c5 	bfi	r1, r3, #3, #3
   17c4e:	2201      	movs	r2, #1
   17c50:	f362 1188 	bfi	r1, r2, #6, #3
   17c54:	2208      	movs	r2, #8
   17c56:	f362 2153 	bfi	r1, r2, #9, #11
   17c5a:	f363 511f 	bfi	r1, r3, #20, #12
   17c5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
   17c62:	4861      	ldr	r0, [pc, #388]	; (17de8 <bus_fault+0x2f8>)
   17c64:	f7fc fa4a 	bl	140fc <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
   17c68:	4b60      	ldr	r3, [pc, #384]	; (17dec <bus_fault+0x2fc>)
   17c6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   17c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17c6e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   17c72:	d049      	beq.n	17d08 <bus_fault+0x218>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   17c74:	466e      	mov	r6, sp
   17c76:	b088      	sub	sp, #32
   17c78:	466b      	mov	r3, sp
   17c7a:	f113 0210 	adds.w	r2, r3, #16
   17c7e:	d011      	beq.n	17ca4 <bus_fault+0x1b4>
   17c80:	210c      	movs	r1, #12
   17c82:	b152      	cbz	r2, 17c9a <bus_fault+0x1aa>
   17c84:	468c      	mov	ip, r1
   17c86:	2904      	cmp	r1, #4
   17c88:	dd03      	ble.n	17c92 <bus_fault+0x1a2>
   17c8a:	f8df e170 	ldr.w	lr, [pc, #368]	; 17dfc <bus_fault+0x30c>
   17c8e:	f8c3 e014 	str.w	lr, [r3, #20]
   17c92:	f1bc 0f08 	cmp.w	ip, #8
   17c96:	dd08      	ble.n	17caa <bus_fault+0x1ba>
   17c98:	6198      	str	r0, [r3, #24]
   17c9a:	290b      	cmp	r1, #11
   17c9c:	dd31      	ble.n	17d02 <bus_fault+0x212>
   17c9e:	f04f 0c0c 	mov.w	ip, #12
   17ca2:	e004      	b.n	17cae <bus_fault+0x1be>
   17ca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17ca8:	e7eb      	b.n	17c82 <bus_fault+0x192>
   17caa:	f06f 0c1b 	mvn.w	ip, #27
   17cae:	b13a      	cbz	r2, 17cc0 <bus_fault+0x1d0>
   17cb0:	2103      	movs	r1, #3
   17cb2:	7139      	strb	r1, [r7, #4]
   17cb4:	2100      	movs	r1, #0
   17cb6:	7179      	strb	r1, [r7, #5]
   17cb8:	71b9      	strb	r1, [r7, #6]
   17cba:	71f9      	strb	r1, [r7, #7]
   17cbc:	6878      	ldr	r0, [r7, #4]
   17cbe:	6118      	str	r0, [r3, #16]
   17cc0:	2100      	movs	r1, #0
   17cc2:	f36f 0100 	bfc	r1, #0, #1
   17cc6:	f36f 0141 	bfc	r1, #1, #1
   17cca:	f36f 0182 	bfc	r1, #2, #1
   17cce:	f36f 01c5 	bfc	r1, #3, #3
   17cd2:	2301      	movs	r3, #1
   17cd4:	f363 1188 	bfi	r1, r3, #6, #3
   17cd8:	f3cc 030a 	ubfx	r3, ip, #0, #11
   17cdc:	f363 2153 	bfi	r1, r3, #9, #11
   17ce0:	f36f 511f 	bfc	r1, #20, #12
   17ce4:	2300      	movs	r3, #0
   17ce6:	4840      	ldr	r0, [pc, #256]	; (17de8 <bus_fault+0x2f8>)
   17ce8:	f7fc fa08 	bl	140fc <z_impl_z_log_msg_static_create>
   17cec:	46b5      	mov	sp, r6
			if (from_hard_fault != 0) {
   17cee:	f1b8 0f00 	cmp.w	r8, #0
   17cf2:	d00b      	beq.n	17d0c <bus_fault+0x21c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   17cf4:	4a3d      	ldr	r2, [pc, #244]	; (17dec <bus_fault+0x2fc>)
   17cf6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   17cfc:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   17cfe:	2619      	movs	r6, #25
   17d00:	e72d      	b.n	17b5e <bus_fault+0x6e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   17d02:	f06f 0c1b 	mvn.w	ip, #27
   17d06:	e7d2      	b.n	17cae <bus_fault+0x1be>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   17d08:	2619      	movs	r6, #25
   17d0a:	e728      	b.n	17b5e <bus_fault+0x6e>
   17d0c:	2619      	movs	r6, #25
   17d0e:	e726      	b.n	17b5e <bus_fault+0x6e>
		PR_FAULT_INFO("  Imprecise data bus error");
   17d10:	4b3b      	ldr	r3, [pc, #236]	; (17e00 <bus_fault+0x310>)
   17d12:	67fb      	str	r3, [r7, #124]	; 0x7c
   17d14:	2302      	movs	r3, #2
   17d16:	713b      	strb	r3, [r7, #4]
   17d18:	2300      	movs	r3, #0
   17d1a:	717b      	strb	r3, [r7, #5]
   17d1c:	71bb      	strb	r3, [r7, #6]
   17d1e:	71fb      	strb	r3, [r7, #7]
   17d20:	687a      	ldr	r2, [r7, #4]
   17d22:	67ba      	str	r2, [r7, #120]	; 0x78
   17d24:	4619      	mov	r1, r3
   17d26:	f363 0100 	bfi	r1, r3, #0, #1
   17d2a:	f363 0141 	bfi	r1, r3, #1, #1
   17d2e:	f363 0182 	bfi	r1, r3, #2, #1
   17d32:	f363 01c5 	bfi	r1, r3, #3, #3
   17d36:	2201      	movs	r2, #1
   17d38:	f362 1188 	bfi	r1, r2, #6, #3
   17d3c:	2208      	movs	r2, #8
   17d3e:	f362 2153 	bfi	r1, r2, #9, #11
   17d42:	f363 511f 	bfi	r1, r3, #20, #12
   17d46:	f107 0278 	add.w	r2, r7, #120	; 0x78
   17d4a:	4827      	ldr	r0, [pc, #156]	; (17de8 <bus_fault+0x2f8>)
   17d4c:	f7fc f9d6 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   17d50:	261a      	movs	r6, #26
   17d52:	e70a      	b.n	17b6a <bus_fault+0x7a>
		PR_FAULT_INFO("  Instruction bus error");
   17d54:	4b2b      	ldr	r3, [pc, #172]	; (17e04 <bus_fault+0x314>)
   17d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   17d5a:	2302      	movs	r3, #2
   17d5c:	713b      	strb	r3, [r7, #4]
   17d5e:	2300      	movs	r3, #0
   17d60:	717b      	strb	r3, [r7, #5]
   17d62:	71bb      	strb	r3, [r7, #6]
   17d64:	71fb      	strb	r3, [r7, #7]
   17d66:	687a      	ldr	r2, [r7, #4]
   17d68:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   17d6c:	4619      	mov	r1, r3
   17d6e:	f363 0100 	bfi	r1, r3, #0, #1
   17d72:	f363 0141 	bfi	r1, r3, #1, #1
   17d76:	f363 0182 	bfi	r1, r3, #2, #1
   17d7a:	f363 01c5 	bfi	r1, r3, #3, #3
   17d7e:	2201      	movs	r2, #1
   17d80:	f362 1188 	bfi	r1, r2, #6, #3
   17d84:	2208      	movs	r2, #8
   17d86:	f362 2153 	bfi	r1, r2, #9, #11
   17d8a:	f363 511f 	bfi	r1, r3, #20, #12
   17d8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   17d92:	4815      	ldr	r0, [pc, #84]	; (17de8 <bus_fault+0x2f8>)
   17d94:	f7fc f9b2 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   17d98:	261b      	movs	r6, #27
   17d9a:	e6f2      	b.n	17b82 <bus_fault+0x92>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   17d9c:	4b1a      	ldr	r3, [pc, #104]	; (17e08 <bus_fault+0x318>)
   17d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   17da2:	2302      	movs	r3, #2
   17da4:	713b      	strb	r3, [r7, #4]
   17da6:	2300      	movs	r3, #0
   17da8:	717b      	strb	r3, [r7, #5]
   17daa:	71bb      	strb	r3, [r7, #6]
   17dac:	71fb      	strb	r3, [r7, #7]
   17dae:	687a      	ldr	r2, [r7, #4]
   17db0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   17db4:	4619      	mov	r1, r3
   17db6:	f363 0100 	bfi	r1, r3, #0, #1
   17dba:	f363 0141 	bfi	r1, r3, #1, #1
   17dbe:	f363 0182 	bfi	r1, r3, #2, #1
   17dc2:	f363 01c5 	bfi	r1, r3, #3, #3
   17dc6:	2201      	movs	r2, #1
   17dc8:	f362 1188 	bfi	r1, r2, #6, #3
   17dcc:	2208      	movs	r2, #8
   17dce:	f362 2153 	bfi	r1, r2, #9, #11
   17dd2:	f363 511f 	bfi	r1, r3, #20, #12
   17dd6:	f107 0290 	add.w	r2, r7, #144	; 0x90
   17dda:	4803      	ldr	r0, [pc, #12]	; (17de8 <bus_fault+0x2f8>)
   17ddc:	f7fc f98e 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   17de0:	261c      	movs	r6, #28
   17de2:	e6ce      	b.n	17b82 <bus_fault+0x92>
   17de4:	000330c8 	.word	0x000330c8
   17de8:	00031d84 	.word	0x00031d84
   17dec:	e000ed00 	.word	0xe000ed00
   17df0:	000330e0 	.word	0x000330e0
   17df4:	000330f4 	.word	0x000330f4
   17df8:	00033108 	.word	0x00033108
   17dfc:	00033124 	.word	0x00033124
   17e00:	0003313c 	.word	0x0003313c
   17e04:	00033158 	.word	0x00033158
   17e08:	00033170 	.word	0x00033170

00017e0c <usage_fault>:
{
   17e0c:	b500      	push	{lr}
   17e0e:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
   17e10:	4b96      	ldr	r3, [pc, #600]	; (1806c <usage_fault+0x260>)
   17e12:	9307      	str	r3, [sp, #28]
   17e14:	2302      	movs	r3, #2
   17e16:	f88d 3004 	strb.w	r3, [sp, #4]
   17e1a:	2300      	movs	r3, #0
   17e1c:	f88d 3005 	strb.w	r3, [sp, #5]
   17e20:	f88d 3006 	strb.w	r3, [sp, #6]
   17e24:	f88d 3007 	strb.w	r3, [sp, #7]
   17e28:	9a01      	ldr	r2, [sp, #4]
   17e2a:	9206      	str	r2, [sp, #24]
   17e2c:	4619      	mov	r1, r3
   17e2e:	f363 0100 	bfi	r1, r3, #0, #1
   17e32:	f363 0141 	bfi	r1, r3, #1, #1
   17e36:	f363 0182 	bfi	r1, r3, #2, #1
   17e3a:	f363 01c5 	bfi	r1, r3, #3, #3
   17e3e:	2201      	movs	r2, #1
   17e40:	f362 1188 	bfi	r1, r2, #6, #3
   17e44:	2208      	movs	r2, #8
   17e46:	f362 2153 	bfi	r1, r2, #9, #11
   17e4a:	f363 511f 	bfi	r1, r3, #20, #12
   17e4e:	aa06      	add	r2, sp, #24
   17e50:	4887      	ldr	r0, [pc, #540]	; (18070 <usage_fault+0x264>)
   17e52:	f7fc f953 	bl	140fc <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   17e56:	4b87      	ldr	r3, [pc, #540]	; (18074 <usage_fault+0x268>)
   17e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17e5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   17e5e:	d126      	bne.n	17eae <usage_fault+0xa2>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   17e60:	201d      	movs	r0, #29
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   17e62:	4b84      	ldr	r3, [pc, #528]	; (18074 <usage_fault+0x268>)
   17e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17e66:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   17e6a:	d145      	bne.n	17ef8 <usage_fault+0xec>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   17e6c:	4b81      	ldr	r3, [pc, #516]	; (18074 <usage_fault+0x268>)
   17e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17e70:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   17e74:	d165      	bne.n	17f42 <usage_fault+0x136>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   17e76:	4b7f      	ldr	r3, [pc, #508]	; (18074 <usage_fault+0x268>)
   17e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17e7a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   17e7e:	f040 8085 	bne.w	17f8c <usage_fault+0x180>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   17e82:	4b7c      	ldr	r3, [pc, #496]	; (18074 <usage_fault+0x268>)
   17e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17e86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   17e8a:	f040 80a4 	bne.w	17fd6 <usage_fault+0x1ca>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   17e8e:	4b79      	ldr	r3, [pc, #484]	; (18074 <usage_fault+0x268>)
   17e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17e92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17e96:	f040 80c3 	bne.w	18020 <usage_fault+0x214>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   17e9a:	4a76      	ldr	r2, [pc, #472]	; (18074 <usage_fault+0x268>)
   17e9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17e9e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   17ea2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   17ea6:	6293      	str	r3, [r2, #40]	; 0x28
}
   17ea8:	b02d      	add	sp, #180	; 0xb4
   17eaa:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
   17eae:	4b72      	ldr	r3, [pc, #456]	; (18078 <usage_fault+0x26c>)
   17eb0:	930d      	str	r3, [sp, #52]	; 0x34
   17eb2:	2302      	movs	r3, #2
   17eb4:	f88d 3004 	strb.w	r3, [sp, #4]
   17eb8:	2300      	movs	r3, #0
   17eba:	f88d 3005 	strb.w	r3, [sp, #5]
   17ebe:	f88d 3006 	strb.w	r3, [sp, #6]
   17ec2:	f88d 3007 	strb.w	r3, [sp, #7]
   17ec6:	9a01      	ldr	r2, [sp, #4]
   17ec8:	920c      	str	r2, [sp, #48]	; 0x30
   17eca:	4619      	mov	r1, r3
   17ecc:	f363 0100 	bfi	r1, r3, #0, #1
   17ed0:	f363 0141 	bfi	r1, r3, #1, #1
   17ed4:	f363 0182 	bfi	r1, r3, #2, #1
   17ed8:	f363 01c5 	bfi	r1, r3, #3, #3
   17edc:	2201      	movs	r2, #1
   17ede:	f362 1188 	bfi	r1, r2, #6, #3
   17ee2:	2208      	movs	r2, #8
   17ee4:	f362 2153 	bfi	r1, r2, #9, #11
   17ee8:	f363 511f 	bfi	r1, r3, #20, #12
   17eec:	aa0c      	add	r2, sp, #48	; 0x30
   17eee:	4860      	ldr	r0, [pc, #384]	; (18070 <usage_fault+0x264>)
   17ef0:	f7fc f904 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_DIV_0;
   17ef4:	201e      	movs	r0, #30
   17ef6:	e7b4      	b.n	17e62 <usage_fault+0x56>
		PR_FAULT_INFO("  Unaligned memory access");
   17ef8:	4b60      	ldr	r3, [pc, #384]	; (1807c <usage_fault+0x270>)
   17efa:	9313      	str	r3, [sp, #76]	; 0x4c
   17efc:	2302      	movs	r3, #2
   17efe:	f88d 3004 	strb.w	r3, [sp, #4]
   17f02:	2300      	movs	r3, #0
   17f04:	f88d 3005 	strb.w	r3, [sp, #5]
   17f08:	f88d 3006 	strb.w	r3, [sp, #6]
   17f0c:	f88d 3007 	strb.w	r3, [sp, #7]
   17f10:	9a01      	ldr	r2, [sp, #4]
   17f12:	9212      	str	r2, [sp, #72]	; 0x48
   17f14:	4619      	mov	r1, r3
   17f16:	f363 0100 	bfi	r1, r3, #0, #1
   17f1a:	f363 0141 	bfi	r1, r3, #1, #1
   17f1e:	f363 0182 	bfi	r1, r3, #2, #1
   17f22:	f363 01c5 	bfi	r1, r3, #3, #3
   17f26:	2201      	movs	r2, #1
   17f28:	f362 1188 	bfi	r1, r2, #6, #3
   17f2c:	2208      	movs	r2, #8
   17f2e:	f362 2153 	bfi	r1, r2, #9, #11
   17f32:	f363 511f 	bfi	r1, r3, #20, #12
   17f36:	aa12      	add	r2, sp, #72	; 0x48
   17f38:	484d      	ldr	r0, [pc, #308]	; (18070 <usage_fault+0x264>)
   17f3a:	f7fc f8df 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   17f3e:	201f      	movs	r0, #31
   17f40:	e794      	b.n	17e6c <usage_fault+0x60>
		PR_FAULT_INFO("  No coprocessor instructions");
   17f42:	4b4f      	ldr	r3, [pc, #316]	; (18080 <usage_fault+0x274>)
   17f44:	9319      	str	r3, [sp, #100]	; 0x64
   17f46:	2302      	movs	r3, #2
   17f48:	f88d 3004 	strb.w	r3, [sp, #4]
   17f4c:	2300      	movs	r3, #0
   17f4e:	f88d 3005 	strb.w	r3, [sp, #5]
   17f52:	f88d 3006 	strb.w	r3, [sp, #6]
   17f56:	f88d 3007 	strb.w	r3, [sp, #7]
   17f5a:	9a01      	ldr	r2, [sp, #4]
   17f5c:	9218      	str	r2, [sp, #96]	; 0x60
   17f5e:	4619      	mov	r1, r3
   17f60:	f363 0100 	bfi	r1, r3, #0, #1
   17f64:	f363 0141 	bfi	r1, r3, #1, #1
   17f68:	f363 0182 	bfi	r1, r3, #2, #1
   17f6c:	f363 01c5 	bfi	r1, r3, #3, #3
   17f70:	2201      	movs	r2, #1
   17f72:	f362 1188 	bfi	r1, r2, #6, #3
   17f76:	2208      	movs	r2, #8
   17f78:	f362 2153 	bfi	r1, r2, #9, #11
   17f7c:	f363 511f 	bfi	r1, r3, #20, #12
   17f80:	aa18      	add	r2, sp, #96	; 0x60
   17f82:	483b      	ldr	r0, [pc, #236]	; (18070 <usage_fault+0x264>)
   17f84:	f7fc f8ba 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   17f88:	2021      	movs	r0, #33	; 0x21
   17f8a:	e774      	b.n	17e76 <usage_fault+0x6a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   17f8c:	4b3d      	ldr	r3, [pc, #244]	; (18084 <usage_fault+0x278>)
   17f8e:	931f      	str	r3, [sp, #124]	; 0x7c
   17f90:	2302      	movs	r3, #2
   17f92:	f88d 3004 	strb.w	r3, [sp, #4]
   17f96:	2300      	movs	r3, #0
   17f98:	f88d 3005 	strb.w	r3, [sp, #5]
   17f9c:	f88d 3006 	strb.w	r3, [sp, #6]
   17fa0:	f88d 3007 	strb.w	r3, [sp, #7]
   17fa4:	9a01      	ldr	r2, [sp, #4]
   17fa6:	921e      	str	r2, [sp, #120]	; 0x78
   17fa8:	4619      	mov	r1, r3
   17faa:	f363 0100 	bfi	r1, r3, #0, #1
   17fae:	f363 0141 	bfi	r1, r3, #1, #1
   17fb2:	f363 0182 	bfi	r1, r3, #2, #1
   17fb6:	f363 01c5 	bfi	r1, r3, #3, #3
   17fba:	2201      	movs	r2, #1
   17fbc:	f362 1188 	bfi	r1, r2, #6, #3
   17fc0:	2208      	movs	r2, #8
   17fc2:	f362 2153 	bfi	r1, r2, #9, #11
   17fc6:	f363 511f 	bfi	r1, r3, #20, #12
   17fca:	aa1e      	add	r2, sp, #120	; 0x78
   17fcc:	4828      	ldr	r0, [pc, #160]	; (18070 <usage_fault+0x264>)
   17fce:	f7fc f895 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   17fd2:	2022      	movs	r0, #34	; 0x22
   17fd4:	e755      	b.n	17e82 <usage_fault+0x76>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   17fd6:	4b2c      	ldr	r3, [pc, #176]	; (18088 <usage_fault+0x27c>)
   17fd8:	9325      	str	r3, [sp, #148]	; 0x94
   17fda:	2302      	movs	r3, #2
   17fdc:	f88d 3004 	strb.w	r3, [sp, #4]
   17fe0:	2300      	movs	r3, #0
   17fe2:	f88d 3005 	strb.w	r3, [sp, #5]
   17fe6:	f88d 3006 	strb.w	r3, [sp, #6]
   17fea:	f88d 3007 	strb.w	r3, [sp, #7]
   17fee:	9a01      	ldr	r2, [sp, #4]
   17ff0:	9224      	str	r2, [sp, #144]	; 0x90
   17ff2:	4619      	mov	r1, r3
   17ff4:	f363 0100 	bfi	r1, r3, #0, #1
   17ff8:	f363 0141 	bfi	r1, r3, #1, #1
   17ffc:	f363 0182 	bfi	r1, r3, #2, #1
   18000:	f363 01c5 	bfi	r1, r3, #3, #3
   18004:	2201      	movs	r2, #1
   18006:	f362 1188 	bfi	r1, r2, #6, #3
   1800a:	2208      	movs	r2, #8
   1800c:	f362 2153 	bfi	r1, r2, #9, #11
   18010:	f363 511f 	bfi	r1, r3, #20, #12
   18014:	aa24      	add	r2, sp, #144	; 0x90
   18016:	4816      	ldr	r0, [pc, #88]	; (18070 <usage_fault+0x264>)
   18018:	f7fc f870 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1801c:	2023      	movs	r0, #35	; 0x23
   1801e:	e736      	b.n	17e8e <usage_fault+0x82>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   18020:	4b1a      	ldr	r3, [pc, #104]	; (1808c <usage_fault+0x280>)
   18022:	932b      	str	r3, [sp, #172]	; 0xac
   18024:	2302      	movs	r3, #2
   18026:	f88d 3004 	strb.w	r3, [sp, #4]
   1802a:	2300      	movs	r3, #0
   1802c:	f88d 3005 	strb.w	r3, [sp, #5]
   18030:	f88d 3006 	strb.w	r3, [sp, #6]
   18034:	f88d 3007 	strb.w	r3, [sp, #7]
   18038:	9a01      	ldr	r2, [sp, #4]
   1803a:	922a      	str	r2, [sp, #168]	; 0xa8
   1803c:	4619      	mov	r1, r3
   1803e:	f363 0100 	bfi	r1, r3, #0, #1
   18042:	f363 0141 	bfi	r1, r3, #1, #1
   18046:	f363 0182 	bfi	r1, r3, #2, #1
   1804a:	f363 01c5 	bfi	r1, r3, #3, #3
   1804e:	2201      	movs	r2, #1
   18050:	f362 1188 	bfi	r1, r2, #6, #3
   18054:	2208      	movs	r2, #8
   18056:	f362 2153 	bfi	r1, r2, #9, #11
   1805a:	f363 511f 	bfi	r1, r3, #20, #12
   1805e:	aa2a      	add	r2, sp, #168	; 0xa8
   18060:	4803      	ldr	r0, [pc, #12]	; (18070 <usage_fault+0x264>)
   18062:	f7fc f84b 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   18066:	2024      	movs	r0, #36	; 0x24
   18068:	e717      	b.n	17e9a <usage_fault+0x8e>
   1806a:	bf00      	nop
   1806c:	000331a0 	.word	0x000331a0
   18070:	00031d84 	.word	0x00031d84
   18074:	e000ed00 	.word	0xe000ed00
   18078:	000331b8 	.word	0x000331b8
   1807c:	000331cc 	.word	0x000331cc
   18080:	000331e8 	.word	0x000331e8
   18084:	00033208 	.word	0x00033208
   18088:	00033230 	.word	0x00033230
   1808c:	0003324c 	.word	0x0003324c

00018090 <debug_monitor>:
{
   18090:	b500      	push	{lr}
   18092:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   18094:	2300      	movs	r3, #0
   18096:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   18098:	4a12      	ldr	r2, [pc, #72]	; (180e4 <debug_monitor+0x54>)
   1809a:	9207      	str	r2, [sp, #28]
   1809c:	2202      	movs	r2, #2
   1809e:	f88d 2004 	strb.w	r2, [sp, #4]
   180a2:	f88d 3005 	strb.w	r3, [sp, #5]
   180a6:	f88d 3006 	strb.w	r3, [sp, #6]
   180aa:	f88d 3007 	strb.w	r3, [sp, #7]
   180ae:	9a01      	ldr	r2, [sp, #4]
   180b0:	9206      	str	r2, [sp, #24]
   180b2:	4619      	mov	r1, r3
   180b4:	f363 0100 	bfi	r1, r3, #0, #1
   180b8:	f363 0141 	bfi	r1, r3, #1, #1
   180bc:	f363 0182 	bfi	r1, r3, #2, #1
   180c0:	f363 01c5 	bfi	r1, r3, #3, #3
   180c4:	2201      	movs	r2, #1
   180c6:	f362 1188 	bfi	r1, r2, #6, #3
   180ca:	2208      	movs	r2, #8
   180cc:	f362 2153 	bfi	r1, r2, #9, #11
   180d0:	f363 511f 	bfi	r1, r3, #20, #12
   180d4:	aa06      	add	r2, sp, #24
   180d6:	4804      	ldr	r0, [pc, #16]	; (180e8 <debug_monitor+0x58>)
   180d8:	f7fc f810 	bl	140fc <z_impl_z_log_msg_static_create>
}
   180dc:	b009      	add	sp, #36	; 0x24
   180de:	f85d fb04 	ldr.w	pc, [sp], #4
   180e2:	bf00      	nop
   180e4:	00033278 	.word	0x00033278
   180e8:	00031d84 	.word	0x00031d84

000180ec <reserved_exception>:
{
   180ec:	b590      	push	{r4, r7, lr}
   180ee:	b083      	sub	sp, #12
   180f0:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   180f2:	290f      	cmp	r1, #15
   180f4:	dc23      	bgt.n	1813e <reserved_exception+0x52>
   180f6:	4c2f      	ldr	r4, [pc, #188]	; (181b4 <reserved_exception+0xc8>)
   180f8:	3910      	subs	r1, #16
   180fa:	2300      	movs	r3, #0
   180fc:	713b      	strb	r3, [r7, #4]
   180fe:	2302      	movs	r3, #2
   18100:	717b      	strb	r3, [r7, #5]
   18102:	b08a      	sub	sp, #40	; 0x28
   18104:	46ec      	mov	ip, sp
   18106:	f11c 0210 	adds.w	r2, ip, #16
   1810a:	d01a      	beq.n	18142 <reserved_exception+0x56>
   1810c:	2012      	movs	r0, #18
   1810e:	b122      	cbz	r2, 1811a <reserved_exception+0x2e>
   18110:	2804      	cmp	r0, #4
   18112:	dd02      	ble.n	1811a <reserved_exception+0x2e>
   18114:	4b28      	ldr	r3, [pc, #160]	; (181b8 <reserved_exception+0xcc>)
   18116:	f8cc 3014 	str.w	r3, [ip, #20]
   1811a:	2300      	movs	r3, #0
   1811c:	703b      	strb	r3, [r7, #0]
   1811e:	2302      	movs	r3, #2
   18120:	707b      	strb	r3, [r7, #1]
   18122:	b1e2      	cbz	r2, 1815e <reserved_exception+0x72>
   18124:	4603      	mov	r3, r0
   18126:	2808      	cmp	r0, #8
   18128:	dd01      	ble.n	1812e <reserved_exception+0x42>
   1812a:	f8cc 4018 	str.w	r4, [ip, #24]
   1812e:	2b0c      	cmp	r3, #12
   18130:	dd01      	ble.n	18136 <reserved_exception+0x4a>
   18132:	f8cc 101c 	str.w	r1, [ip, #28]
   18136:	f10c 0320 	add.w	r3, ip, #32
   1813a:	2100      	movs	r1, #0
   1813c:	e00d      	b.n	1815a <reserved_exception+0x6e>
   1813e:	4c1f      	ldr	r4, [pc, #124]	; (181bc <reserved_exception+0xd0>)
   18140:	e7da      	b.n	180f8 <reserved_exception+0xc>
   18142:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   18146:	e7e2      	b.n	1810e <reserved_exception+0x22>
   18148:	f101 0408 	add.w	r4, r1, #8
   1814c:	eb04 0e07 	add.w	lr, r4, r7
   18150:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   18154:	f803 eb01 	strb.w	lr, [r3], #1
   18158:	3101      	adds	r1, #1
   1815a:	2901      	cmp	r1, #1
   1815c:	d9f4      	bls.n	18148 <reserved_exception+0x5c>
   1815e:	2811      	cmp	r0, #17
   18160:	dd24      	ble.n	181ac <reserved_exception+0xc0>
   18162:	2312      	movs	r3, #18
   18164:	b14a      	cbz	r2, 1817a <reserved_exception+0x8e>
   18166:	2104      	movs	r1, #4
   18168:	7139      	strb	r1, [r7, #4]
   1816a:	2100      	movs	r1, #0
   1816c:	7179      	strb	r1, [r7, #5]
   1816e:	71b9      	strb	r1, [r7, #6]
   18170:	2101      	movs	r1, #1
   18172:	71f9      	strb	r1, [r7, #7]
   18174:	6878      	ldr	r0, [r7, #4]
   18176:	f8cc 0010 	str.w	r0, [ip, #16]
   1817a:	2100      	movs	r1, #0
   1817c:	f36f 0100 	bfc	r1, #0, #1
   18180:	f36f 0141 	bfc	r1, #1, #1
   18184:	f36f 0182 	bfc	r1, #2, #1
   18188:	f36f 01c5 	bfc	r1, #3, #3
   1818c:	2001      	movs	r0, #1
   1818e:	f360 1188 	bfi	r1, r0, #6, #3
   18192:	f3c3 030a 	ubfx	r3, r3, #0, #11
   18196:	f363 2153 	bfi	r1, r3, #9, #11
   1819a:	f36f 511f 	bfc	r1, #20, #12
   1819e:	2300      	movs	r3, #0
   181a0:	4807      	ldr	r0, [pc, #28]	; (181c0 <reserved_exception+0xd4>)
   181a2:	f7fb ffab 	bl	140fc <z_impl_z_log_msg_static_create>
}
   181a6:	370c      	adds	r7, #12
   181a8:	46bd      	mov	sp, r7
   181aa:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   181ac:	f06f 031b 	mvn.w	r3, #27
   181b0:	e7d8      	b.n	18164 <reserved_exception+0x78>
   181b2:	bf00      	nop
   181b4:	0003329c 	.word	0x0003329c
   181b8:	000332d0 	.word	0x000332d0
   181bc:	000332b4 	.word	0x000332b4
   181c0:	00031d84 	.word	0x00031d84

000181c4 <mem_manage_fault>:
{
   181c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   181c8:	b0a7      	sub	sp, #156	; 0x9c
   181ca:	af00      	add	r7, sp, #0
   181cc:	4604      	mov	r4, r0
   181ce:	4688      	mov	r8, r1
   181d0:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   181d2:	4bb9      	ldr	r3, [pc, #740]	; (184b8 <mem_manage_fault+0x2f4>)
   181d4:	61fb      	str	r3, [r7, #28]
   181d6:	2302      	movs	r3, #2
   181d8:	713b      	strb	r3, [r7, #4]
   181da:	2300      	movs	r3, #0
   181dc:	717b      	strb	r3, [r7, #5]
   181de:	71bb      	strb	r3, [r7, #6]
   181e0:	71fb      	strb	r3, [r7, #7]
   181e2:	687a      	ldr	r2, [r7, #4]
   181e4:	61ba      	str	r2, [r7, #24]
   181e6:	4619      	mov	r1, r3
   181e8:	f363 0100 	bfi	r1, r3, #0, #1
   181ec:	f363 0141 	bfi	r1, r3, #1, #1
   181f0:	f363 0182 	bfi	r1, r3, #2, #1
   181f4:	f363 01c5 	bfi	r1, r3, #3, #3
   181f8:	2201      	movs	r2, #1
   181fa:	f362 1188 	bfi	r1, r2, #6, #3
   181fe:	2208      	movs	r2, #8
   18200:	f362 2153 	bfi	r1, r2, #9, #11
   18204:	f363 511f 	bfi	r1, r3, #20, #12
   18208:	f107 0218 	add.w	r2, r7, #24
   1820c:	48ab      	ldr	r0, [pc, #684]	; (184bc <mem_manage_fault+0x2f8>)
   1820e:	f7fb ff75 	bl	140fc <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   18212:	4bab      	ldr	r3, [pc, #684]	; (184c0 <mem_manage_fault+0x2fc>)
   18214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18216:	f013 0f10 	tst.w	r3, #16
   1821a:	d141      	bne.n	182a0 <mem_manage_fault+0xdc>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   1821c:	2610      	movs	r6, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1821e:	4ba8      	ldr	r3, [pc, #672]	; (184c0 <mem_manage_fault+0x2fc>)
   18220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18222:	f013 0f08 	tst.w	r3, #8
   18226:	d15d      	bne.n	182e4 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   18228:	4ba5      	ldr	r3, [pc, #660]	; (184c0 <mem_manage_fault+0x2fc>)
   1822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1822c:	f013 0f02 	tst.w	r3, #2
   18230:	d17a      	bne.n	18328 <mem_manage_fault+0x164>
	uint32_t mmfar = -EINVAL;
   18232:	f06f 0915 	mvn.w	r9, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   18236:	4ba2      	ldr	r3, [pc, #648]	; (184c0 <mem_manage_fault+0x2fc>)
   18238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1823a:	f013 0f01 	tst.w	r3, #1
   1823e:	f040 80ea 	bne.w	18416 <mem_manage_fault+0x252>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   18242:	4b9f      	ldr	r3, [pc, #636]	; (184c0 <mem_manage_fault+0x2fc>)
   18244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18246:	f013 0f20 	tst.w	r3, #32
   1824a:	f040 8106 	bne.w	1845a <mem_manage_fault+0x296>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1824e:	4b9c      	ldr	r3, [pc, #624]	; (184c0 <mem_manage_fault+0x2fc>)
   18250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18252:	f013 0f10 	tst.w	r3, #16
   18256:	d104      	bne.n	18262 <mem_manage_fault+0x9e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   18258:	4b99      	ldr	r3, [pc, #612]	; (184c0 <mem_manage_fault+0x2fc>)
   1825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1825c:	f013 0f02 	tst.w	r3, #2
   18260:	d005      	beq.n	1826e <mem_manage_fault+0xaa>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   18262:	4b97      	ldr	r3, [pc, #604]	; (184c0 <mem_manage_fault+0x2fc>)
   18264:	685b      	ldr	r3, [r3, #4]
   18266:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1826a:	f040 811a 	bne.w	184a2 <mem_manage_fault+0x2de>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1826e:	4b94      	ldr	r3, [pc, #592]	; (184c0 <mem_manage_fault+0x2fc>)
   18270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18272:	f013 0f20 	tst.w	r3, #32
   18276:	d004      	beq.n	18282 <mem_manage_fault+0xbe>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   18278:	4a91      	ldr	r2, [pc, #580]	; (184c0 <mem_manage_fault+0x2fc>)
   1827a:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1827c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   18280:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   18282:	4a8f      	ldr	r2, [pc, #572]	; (184c0 <mem_manage_fault+0x2fc>)
   18284:	6a93      	ldr	r3, [r2, #40]	; 0x28
   18286:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1828a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1828c:	2101      	movs	r1, #1
   1828e:	4620      	mov	r0, r4
   18290:	f014 f9f1 	bl	2c676 <memory_fault_recoverable>
   18294:	7028      	strb	r0, [r5, #0]
}
   18296:	4630      	mov	r0, r6
   18298:	379c      	adds	r7, #156	; 0x9c
   1829a:	46bd      	mov	sp, r7
   1829c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   182a0:	4b88      	ldr	r3, [pc, #544]	; (184c4 <mem_manage_fault+0x300>)
   182a2:	637b      	str	r3, [r7, #52]	; 0x34
   182a4:	2302      	movs	r3, #2
   182a6:	713b      	strb	r3, [r7, #4]
   182a8:	2300      	movs	r3, #0
   182aa:	717b      	strb	r3, [r7, #5]
   182ac:	71bb      	strb	r3, [r7, #6]
   182ae:	71fb      	strb	r3, [r7, #7]
   182b0:	687a      	ldr	r2, [r7, #4]
   182b2:	633a      	str	r2, [r7, #48]	; 0x30
   182b4:	4619      	mov	r1, r3
   182b6:	f363 0100 	bfi	r1, r3, #0, #1
   182ba:	f363 0141 	bfi	r1, r3, #1, #1
   182be:	f363 0182 	bfi	r1, r3, #2, #1
   182c2:	f363 01c5 	bfi	r1, r3, #3, #3
   182c6:	2201      	movs	r2, #1
   182c8:	f362 1188 	bfi	r1, r2, #6, #3
   182cc:	2208      	movs	r2, #8
   182ce:	f362 2153 	bfi	r1, r2, #9, #11
   182d2:	f363 511f 	bfi	r1, r3, #20, #12
   182d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   182da:	4878      	ldr	r0, [pc, #480]	; (184bc <mem_manage_fault+0x2f8>)
   182dc:	f7fb ff0e 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_STACKING;
   182e0:	2611      	movs	r6, #17
   182e2:	e79c      	b.n	1821e <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
   182e4:	4b78      	ldr	r3, [pc, #480]	; (184c8 <mem_manage_fault+0x304>)
   182e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   182e8:	2302      	movs	r3, #2
   182ea:	713b      	strb	r3, [r7, #4]
   182ec:	2300      	movs	r3, #0
   182ee:	717b      	strb	r3, [r7, #5]
   182f0:	71bb      	strb	r3, [r7, #6]
   182f2:	71fb      	strb	r3, [r7, #7]
   182f4:	687a      	ldr	r2, [r7, #4]
   182f6:	64ba      	str	r2, [r7, #72]	; 0x48
   182f8:	4619      	mov	r1, r3
   182fa:	f363 0100 	bfi	r1, r3, #0, #1
   182fe:	f363 0141 	bfi	r1, r3, #1, #1
   18302:	f363 0182 	bfi	r1, r3, #2, #1
   18306:	f363 01c5 	bfi	r1, r3, #3, #3
   1830a:	2201      	movs	r2, #1
   1830c:	f362 1188 	bfi	r1, r2, #6, #3
   18310:	2208      	movs	r2, #8
   18312:	f362 2153 	bfi	r1, r2, #9, #11
   18316:	f363 511f 	bfi	r1, r3, #20, #12
   1831a:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1831e:	4867      	ldr	r0, [pc, #412]	; (184bc <mem_manage_fault+0x2f8>)
   18320:	f7fb feec 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_UNSTACKING;
   18324:	2612      	movs	r6, #18
   18326:	e77f      	b.n	18228 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Data Access Violation");
   18328:	4b68      	ldr	r3, [pc, #416]	; (184cc <mem_manage_fault+0x308>)
   1832a:	667b      	str	r3, [r7, #100]	; 0x64
   1832c:	2302      	movs	r3, #2
   1832e:	713b      	strb	r3, [r7, #4]
   18330:	2300      	movs	r3, #0
   18332:	717b      	strb	r3, [r7, #5]
   18334:	71bb      	strb	r3, [r7, #6]
   18336:	71fb      	strb	r3, [r7, #7]
   18338:	687a      	ldr	r2, [r7, #4]
   1833a:	663a      	str	r2, [r7, #96]	; 0x60
   1833c:	4619      	mov	r1, r3
   1833e:	f363 0100 	bfi	r1, r3, #0, #1
   18342:	f363 0141 	bfi	r1, r3, #1, #1
   18346:	f363 0182 	bfi	r1, r3, #2, #1
   1834a:	f363 01c5 	bfi	r1, r3, #3, #3
   1834e:	2201      	movs	r2, #1
   18350:	f362 1188 	bfi	r1, r2, #6, #3
   18354:	2208      	movs	r2, #8
   18356:	f362 2153 	bfi	r1, r2, #9, #11
   1835a:	f363 511f 	bfi	r1, r3, #20, #12
   1835e:	f107 0260 	add.w	r2, r7, #96	; 0x60
   18362:	4856      	ldr	r0, [pc, #344]	; (184bc <mem_manage_fault+0x2f8>)
   18364:	f7fb feca 	bl	140fc <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
   18368:	4b55      	ldr	r3, [pc, #340]	; (184c0 <mem_manage_fault+0x2fc>)
   1836a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18370:	f013 0f80 	tst.w	r3, #128	; 0x80
   18374:	d049      	beq.n	1840a <mem_manage_fault+0x246>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   18376:	466e      	mov	r6, sp
   18378:	b088      	sub	sp, #32
   1837a:	466b      	mov	r3, sp
   1837c:	f113 0210 	adds.w	r2, r3, #16
   18380:	d011      	beq.n	183a6 <mem_manage_fault+0x1e2>
   18382:	210c      	movs	r1, #12
   18384:	b152      	cbz	r2, 1839c <mem_manage_fault+0x1d8>
   18386:	4608      	mov	r0, r1
   18388:	2904      	cmp	r1, #4
   1838a:	dd03      	ble.n	18394 <mem_manage_fault+0x1d0>
   1838c:	f8df c140 	ldr.w	ip, [pc, #320]	; 184d0 <mem_manage_fault+0x30c>
   18390:	f8c3 c014 	str.w	ip, [r3, #20]
   18394:	2808      	cmp	r0, #8
   18396:	dd09      	ble.n	183ac <mem_manage_fault+0x1e8>
   18398:	f8c3 9018 	str.w	r9, [r3, #24]
   1839c:	290b      	cmp	r1, #11
   1839e:	dd31      	ble.n	18404 <mem_manage_fault+0x240>
   183a0:	f04f 0c0c 	mov.w	ip, #12
   183a4:	e004      	b.n	183b0 <mem_manage_fault+0x1ec>
   183a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   183aa:	e7eb      	b.n	18384 <mem_manage_fault+0x1c0>
   183ac:	f06f 0c1b 	mvn.w	ip, #27
   183b0:	b13a      	cbz	r2, 183c2 <mem_manage_fault+0x1fe>
   183b2:	2103      	movs	r1, #3
   183b4:	7139      	strb	r1, [r7, #4]
   183b6:	2100      	movs	r1, #0
   183b8:	7179      	strb	r1, [r7, #5]
   183ba:	71b9      	strb	r1, [r7, #6]
   183bc:	71f9      	strb	r1, [r7, #7]
   183be:	6878      	ldr	r0, [r7, #4]
   183c0:	6118      	str	r0, [r3, #16]
   183c2:	2100      	movs	r1, #0
   183c4:	f36f 0100 	bfc	r1, #0, #1
   183c8:	f36f 0141 	bfc	r1, #1, #1
   183cc:	f36f 0182 	bfc	r1, #2, #1
   183d0:	f36f 01c5 	bfc	r1, #3, #3
   183d4:	2301      	movs	r3, #1
   183d6:	f363 1188 	bfi	r1, r3, #6, #3
   183da:	f3cc 030a 	ubfx	r3, ip, #0, #11
   183de:	f363 2153 	bfi	r1, r3, #9, #11
   183e2:	f36f 511f 	bfc	r1, #20, #12
   183e6:	2300      	movs	r3, #0
   183e8:	4834      	ldr	r0, [pc, #208]	; (184bc <mem_manage_fault+0x2f8>)
   183ea:	f7fb fe87 	bl	140fc <z_impl_z_log_msg_static_create>
   183ee:	46b5      	mov	sp, r6
			if (from_hard_fault != 0) {
   183f0:	f1b8 0f00 	cmp.w	r8, #0
   183f4:	d00d      	beq.n	18412 <mem_manage_fault+0x24e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   183f6:	4a32      	ldr	r2, [pc, #200]	; (184c0 <mem_manage_fault+0x2fc>)
   183f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   183fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   183fe:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   18400:	2613      	movs	r6, #19
   18402:	e718      	b.n	18236 <mem_manage_fault+0x72>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   18404:	f06f 0c1b 	mvn.w	ip, #27
   18408:	e7d2      	b.n	183b0 <mem_manage_fault+0x1ec>
	uint32_t mmfar = -EINVAL;
   1840a:	f06f 0915 	mvn.w	r9, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   1840e:	2613      	movs	r6, #19
   18410:	e711      	b.n	18236 <mem_manage_fault+0x72>
   18412:	2613      	movs	r6, #19
   18414:	e70f      	b.n	18236 <mem_manage_fault+0x72>
		PR_FAULT_INFO("  Instruction Access Violation");
   18416:	4b2f      	ldr	r3, [pc, #188]	; (184d4 <mem_manage_fault+0x310>)
   18418:	67fb      	str	r3, [r7, #124]	; 0x7c
   1841a:	2302      	movs	r3, #2
   1841c:	713b      	strb	r3, [r7, #4]
   1841e:	2300      	movs	r3, #0
   18420:	717b      	strb	r3, [r7, #5]
   18422:	71bb      	strb	r3, [r7, #6]
   18424:	71fb      	strb	r3, [r7, #7]
   18426:	687a      	ldr	r2, [r7, #4]
   18428:	67ba      	str	r2, [r7, #120]	; 0x78
   1842a:	4619      	mov	r1, r3
   1842c:	f363 0100 	bfi	r1, r3, #0, #1
   18430:	f363 0141 	bfi	r1, r3, #1, #1
   18434:	f363 0182 	bfi	r1, r3, #2, #1
   18438:	f363 01c5 	bfi	r1, r3, #3, #3
   1843c:	2201      	movs	r2, #1
   1843e:	f362 1188 	bfi	r1, r2, #6, #3
   18442:	2208      	movs	r2, #8
   18444:	f362 2153 	bfi	r1, r2, #9, #11
   18448:	f363 511f 	bfi	r1, r3, #20, #12
   1844c:	f107 0278 	add.w	r2, r7, #120	; 0x78
   18450:	481a      	ldr	r0, [pc, #104]	; (184bc <mem_manage_fault+0x2f8>)
   18452:	f7fb fe53 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   18456:	2614      	movs	r6, #20
   18458:	e6f3      	b.n	18242 <mem_manage_fault+0x7e>
		PR_FAULT_INFO(
   1845a:	4b1f      	ldr	r3, [pc, #124]	; (184d8 <mem_manage_fault+0x314>)
   1845c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   18460:	2302      	movs	r3, #2
   18462:	713b      	strb	r3, [r7, #4]
   18464:	2300      	movs	r3, #0
   18466:	717b      	strb	r3, [r7, #5]
   18468:	71bb      	strb	r3, [r7, #6]
   1846a:	71fb      	strb	r3, [r7, #7]
   1846c:	687a      	ldr	r2, [r7, #4]
   1846e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   18472:	4619      	mov	r1, r3
   18474:	f363 0100 	bfi	r1, r3, #0, #1
   18478:	f363 0141 	bfi	r1, r3, #1, #1
   1847c:	f363 0182 	bfi	r1, r3, #2, #1
   18480:	f363 01c5 	bfi	r1, r3, #3, #3
   18484:	2201      	movs	r2, #1
   18486:	f362 1188 	bfi	r1, r2, #6, #3
   1848a:	2208      	movs	r2, #8
   1848c:	f362 2153 	bfi	r1, r2, #9, #11
   18490:	f363 511f 	bfi	r1, r3, #20, #12
   18494:	f107 0290 	add.w	r2, r7, #144	; 0x90
   18498:	4808      	ldr	r0, [pc, #32]	; (184bc <mem_manage_fault+0x2f8>)
   1849a:	f7fb fe2f 	bl	140fc <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   1849e:	2615      	movs	r6, #21
   184a0:	e6d5      	b.n	1824e <mem_manage_fault+0x8a>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   184a2:	4621      	mov	r1, r4
   184a4:	4648      	mov	r0, r9
   184a6:	f7ff fa5b 	bl	17960 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   184aa:	2800      	cmp	r0, #0
   184ac:	f43f aedf 	beq.w	1826e <mem_manage_fault+0xaa>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   184b0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   184b4:	2602      	movs	r6, #2
   184b6:	e6da      	b.n	1826e <mem_manage_fault+0xaa>
   184b8:	000332e4 	.word	0x000332e4
   184bc:	00031d84 	.word	0x00031d84
   184c0:	e000ed00 	.word	0xe000ed00
   184c4:	000332fc 	.word	0x000332fc
   184c8:	000330f4 	.word	0x000330f4
   184cc:	00033330 	.word	0x00033330
   184d0:	00033348 	.word	0x00033348
   184d4:	00033360 	.word	0x00033360
   184d8:	00033170 	.word	0x00033170

000184dc <hard_fault>:
{
   184dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   184de:	b09b      	sub	sp, #108	; 0x6c
   184e0:	af00      	add	r7, sp, #0
   184e2:	4606      	mov	r6, r0
   184e4:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   184e6:	4b80      	ldr	r3, [pc, #512]	; (186e8 <hard_fault+0x20c>)
   184e8:	61fb      	str	r3, [r7, #28]
   184ea:	2302      	movs	r3, #2
   184ec:	713b      	strb	r3, [r7, #4]
   184ee:	2400      	movs	r4, #0
   184f0:	717c      	strb	r4, [r7, #5]
   184f2:	71bc      	strb	r4, [r7, #6]
   184f4:	71fc      	strb	r4, [r7, #7]
   184f6:	687b      	ldr	r3, [r7, #4]
   184f8:	61bb      	str	r3, [r7, #24]
   184fa:	4621      	mov	r1, r4
   184fc:	f364 0100 	bfi	r1, r4, #0, #1
   18500:	f364 0141 	bfi	r1, r4, #1, #1
   18504:	f364 0182 	bfi	r1, r4, #2, #1
   18508:	f364 01c5 	bfi	r1, r4, #3, #3
   1850c:	2301      	movs	r3, #1
   1850e:	f363 1188 	bfi	r1, r3, #6, #3
   18512:	2308      	movs	r3, #8
   18514:	f363 2153 	bfi	r1, r3, #9, #11
   18518:	f364 511f 	bfi	r1, r4, #20, #12
   1851c:	4623      	mov	r3, r4
   1851e:	f107 0218 	add.w	r2, r7, #24
   18522:	4872      	ldr	r0, [pc, #456]	; (186ec <hard_fault+0x210>)
   18524:	f7fb fdea 	bl	140fc <z_impl_z_log_msg_static_create>
	*recoverable = false;
   18528:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1852a:	4b71      	ldr	r3, [pc, #452]	; (186f0 <hard_fault+0x214>)
   1852c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1852e:	f014 0402 	ands.w	r4, r4, #2
   18532:	d10c      	bne.n	1854e <hard_fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   18534:	4b6e      	ldr	r3, [pc, #440]	; (186f0 <hard_fault+0x214>)
   18536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18538:	2b00      	cmp	r3, #0
   1853a:	db2a      	blt.n	18592 <hard_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1853c:	4b6c      	ldr	r3, [pc, #432]	; (186f0 <hard_fault+0x214>)
   1853e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   18540:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   18544:	d146      	bne.n	185d4 <hard_fault+0xf8>
}
   18546:	4620      	mov	r0, r4
   18548:	376c      	adds	r7, #108	; 0x6c
   1854a:	46bd      	mov	sp, r7
   1854c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
   1854e:	4b69      	ldr	r3, [pc, #420]	; (186f4 <hard_fault+0x218>)
   18550:	667b      	str	r3, [r7, #100]	; 0x64
   18552:	2302      	movs	r3, #2
   18554:	713b      	strb	r3, [r7, #4]
   18556:	2400      	movs	r4, #0
   18558:	717c      	strb	r4, [r7, #5]
   1855a:	71bc      	strb	r4, [r7, #6]
   1855c:	71fc      	strb	r4, [r7, #7]
   1855e:	687b      	ldr	r3, [r7, #4]
   18560:	663b      	str	r3, [r7, #96]	; 0x60
   18562:	4621      	mov	r1, r4
   18564:	f364 0100 	bfi	r1, r4, #0, #1
   18568:	f364 0141 	bfi	r1, r4, #1, #1
   1856c:	f364 0182 	bfi	r1, r4, #2, #1
   18570:	f364 01c5 	bfi	r1, r4, #3, #3
   18574:	2301      	movs	r3, #1
   18576:	f363 1188 	bfi	r1, r3, #6, #3
   1857a:	2308      	movs	r3, #8
   1857c:	f363 2153 	bfi	r1, r3, #9, #11
   18580:	f364 511f 	bfi	r1, r4, #20, #12
   18584:	4623      	mov	r3, r4
   18586:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1858a:	4858      	ldr	r0, [pc, #352]	; (186ec <hard_fault+0x210>)
   1858c:	f7fb fdb6 	bl	140fc <z_impl_z_log_msg_static_create>
   18590:	e7d9      	b.n	18546 <hard_fault+0x6a>
		PR_EXC("  Debug event");
   18592:	4b59      	ldr	r3, [pc, #356]	; (186f8 <hard_fault+0x21c>)
   18594:	64fb      	str	r3, [r7, #76]	; 0x4c
   18596:	2302      	movs	r3, #2
   18598:	713b      	strb	r3, [r7, #4]
   1859a:	2300      	movs	r3, #0
   1859c:	717b      	strb	r3, [r7, #5]
   1859e:	71bb      	strb	r3, [r7, #6]
   185a0:	71fb      	strb	r3, [r7, #7]
   185a2:	687a      	ldr	r2, [r7, #4]
   185a4:	64ba      	str	r2, [r7, #72]	; 0x48
   185a6:	4619      	mov	r1, r3
   185a8:	f363 0100 	bfi	r1, r3, #0, #1
   185ac:	f363 0141 	bfi	r1, r3, #1, #1
   185b0:	f363 0182 	bfi	r1, r3, #2, #1
   185b4:	f363 01c5 	bfi	r1, r3, #3, #3
   185b8:	2201      	movs	r2, #1
   185ba:	f362 1188 	bfi	r1, r2, #6, #3
   185be:	2208      	movs	r2, #8
   185c0:	f362 2153 	bfi	r1, r2, #9, #11
   185c4:	f363 511f 	bfi	r1, r3, #20, #12
   185c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
   185cc:	4847      	ldr	r0, [pc, #284]	; (186ec <hard_fault+0x210>)
   185ce:	f7fb fd95 	bl	140fc <z_impl_z_log_msg_static_create>
   185d2:	e7b8      	b.n	18546 <hard_fault+0x6a>
		PR_EXC("  Fault escalation (see below)");
   185d4:	4b49      	ldr	r3, [pc, #292]	; (186fc <hard_fault+0x220>)
   185d6:	637b      	str	r3, [r7, #52]	; 0x34
   185d8:	2302      	movs	r3, #2
   185da:	713b      	strb	r3, [r7, #4]
   185dc:	2300      	movs	r3, #0
   185de:	717b      	strb	r3, [r7, #5]
   185e0:	71bb      	strb	r3, [r7, #6]
   185e2:	71fb      	strb	r3, [r7, #7]
   185e4:	687a      	ldr	r2, [r7, #4]
   185e6:	633a      	str	r2, [r7, #48]	; 0x30
   185e8:	4619      	mov	r1, r3
   185ea:	f363 0100 	bfi	r1, r3, #0, #1
   185ee:	f363 0141 	bfi	r1, r3, #1, #1
   185f2:	f363 0182 	bfi	r1, r3, #2, #1
   185f6:	f363 01c5 	bfi	r1, r3, #3, #3
   185fa:	2201      	movs	r2, #1
   185fc:	f362 1188 	bfi	r1, r2, #6, #3
   18600:	2208      	movs	r2, #8
   18602:	f362 2153 	bfi	r1, r2, #9, #11
   18606:	f363 511f 	bfi	r1, r3, #20, #12
   1860a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1860e:	4837      	ldr	r0, [pc, #220]	; (186ec <hard_fault+0x210>)
   18610:	f7fb fd74 	bl	140fc <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
   18614:	4630      	mov	r0, r6
   18616:	f7ff fa0b 	bl	17a30 <z_arm_is_synchronous_svc>
   1861a:	2800      	cmp	r0, #0
   1861c:	d040      	beq.n	186a0 <hard_fault+0x1c4>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1861e:	6834      	ldr	r4, [r6, #0]
   18620:	466d      	mov	r5, sp
   18622:	b088      	sub	sp, #32
   18624:	466b      	mov	r3, sp
   18626:	f113 0210 	adds.w	r2, r3, #16
   1862a:	d00f      	beq.n	1864c <hard_fault+0x170>
   1862c:	210c      	movs	r1, #12
   1862e:	b14a      	cbz	r2, 18644 <hard_fault+0x168>
   18630:	4608      	mov	r0, r1
   18632:	2904      	cmp	r1, #4
   18634:	dd03      	ble.n	1863e <hard_fault+0x162>
   18636:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 18700 <hard_fault+0x224>
   1863a:	f8c3 c014 	str.w	ip, [r3, #20]
   1863e:	2808      	cmp	r0, #8
   18640:	dd07      	ble.n	18652 <hard_fault+0x176>
   18642:	619c      	str	r4, [r3, #24]
   18644:	290b      	cmp	r1, #11
   18646:	dd28      	ble.n	1869a <hard_fault+0x1be>
   18648:	240c      	movs	r4, #12
   1864a:	e004      	b.n	18656 <hard_fault+0x17a>
   1864c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18650:	e7ed      	b.n	1862e <hard_fault+0x152>
   18652:	f06f 041b 	mvn.w	r4, #27
   18656:	b13a      	cbz	r2, 18668 <hard_fault+0x18c>
   18658:	2103      	movs	r1, #3
   1865a:	7139      	strb	r1, [r7, #4]
   1865c:	2100      	movs	r1, #0
   1865e:	7179      	strb	r1, [r7, #5]
   18660:	71b9      	strb	r1, [r7, #6]
   18662:	71f9      	strb	r1, [r7, #7]
   18664:	6878      	ldr	r0, [r7, #4]
   18666:	6118      	str	r0, [r3, #16]
   18668:	2100      	movs	r1, #0
   1866a:	f36f 0100 	bfc	r1, #0, #1
   1866e:	f36f 0141 	bfc	r1, #1, #1
   18672:	f36f 0182 	bfc	r1, #2, #1
   18676:	f36f 01c5 	bfc	r1, #3, #3
   1867a:	2301      	movs	r3, #1
   1867c:	f363 1188 	bfi	r1, r3, #6, #3
   18680:	f3c4 030a 	ubfx	r3, r4, #0, #11
   18684:	f363 2153 	bfi	r1, r3, #9, #11
   18688:	f36f 511f 	bfc	r1, #20, #12
   1868c:	2300      	movs	r3, #0
   1868e:	4817      	ldr	r0, [pc, #92]	; (186ec <hard_fault+0x210>)
   18690:	f7fb fd34 	bl	140fc <z_impl_z_log_msg_static_create>
   18694:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
   18696:	6834      	ldr	r4, [r6, #0]
   18698:	e755      	b.n	18546 <hard_fault+0x6a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1869a:	f06f 041b 	mvn.w	r4, #27
   1869e:	e7da      	b.n	18656 <hard_fault+0x17a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   186a0:	4b13      	ldr	r3, [pc, #76]	; (186f0 <hard_fault+0x214>)
   186a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   186a4:	f013 0fff 	tst.w	r3, #255	; 0xff
   186a8:	d10f      	bne.n	186ca <hard_fault+0x1ee>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   186aa:	4b11      	ldr	r3, [pc, #68]	; (186f0 <hard_fault+0x214>)
   186ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   186ae:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
   186b2:	d111      	bne.n	186d8 <hard_fault+0x1fc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   186b4:	4b0e      	ldr	r3, [pc, #56]	; (186f0 <hard_fault+0x214>)
   186b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   186b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   186bc:	f4ff af43 	bcc.w	18546 <hard_fault+0x6a>
			reason = usage_fault(esf);
   186c0:	4630      	mov	r0, r6
   186c2:	f7ff fba3 	bl	17e0c <usage_fault>
   186c6:	4604      	mov	r4, r0
	return reason;
   186c8:	e73d      	b.n	18546 <hard_fault+0x6a>
			reason = mem_manage_fault(esf, 1, recoverable);
   186ca:	462a      	mov	r2, r5
   186cc:	2101      	movs	r1, #1
   186ce:	4630      	mov	r0, r6
   186d0:	f7ff fd78 	bl	181c4 <mem_manage_fault>
   186d4:	4604      	mov	r4, r0
   186d6:	e736      	b.n	18546 <hard_fault+0x6a>
			reason = bus_fault(esf, 1, recoverable);
   186d8:	462a      	mov	r2, r5
   186da:	2101      	movs	r1, #1
   186dc:	4630      	mov	r0, r6
   186de:	f7ff fa07 	bl	17af0 <bus_fault>
   186e2:	4604      	mov	r4, r0
   186e4:	e72f      	b.n	18546 <hard_fault+0x6a>
   186e6:	bf00      	nop
   186e8:	00033380 	.word	0x00033380
   186ec:	00031d84 	.word	0x00031d84
   186f0:	e000ed00 	.word	0xe000ed00
   186f4:	00033398 	.word	0x00033398
   186f8:	000333bc 	.word	0x000333bc
   186fc:	000333cc 	.word	0x000333cc
   18700:	000333ec 	.word	0x000333ec

00018704 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   18704:	b530      	push	{r4, r5, lr}
   18706:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   18708:	4b1a      	ldr	r3, [pc, #104]	; (18774 <z_arm_fault+0x70>)
   1870a:	685c      	ldr	r4, [r3, #4]
   1870c:	f3c4 0408 	ubfx	r4, r4, #0, #9
   18710:	2300      	movs	r3, #0
   18712:	f383 8811 	msr	BASEPRI, r3
   18716:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   1871a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1871e:	f7ff f9a5 	bl	17a6c <get_esf>
   18722:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   18724:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   18728:	4621      	mov	r1, r4
   1872a:	f013 ffa6 	bl	2c67a <fault_handle>
	if (recoverable) {
   1872e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   18732:	b10b      	cbz	r3, 18738 <z_arm_fault+0x34>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   18734:	b00b      	add	sp, #44	; 0x2c
   18736:	bd30      	pop	{r4, r5, pc}
   18738:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1873a:	2220      	movs	r2, #32
   1873c:	4629      	mov	r1, r5
   1873e:	a801      	add	r0, sp, #4
   18740:	f014 f854 	bl	2c7ec <memcpy>
	if (nested_exc) {
   18744:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   18748:	b14b      	cbz	r3, 1875e <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1874a:	9b08      	ldr	r3, [sp, #32]
   1874c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   18750:	b95a      	cbnz	r2, 1876a <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   18752:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   18756:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1875a:	9308      	str	r3, [sp, #32]
   1875c:	e005      	b.n	1876a <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1875e:	9b08      	ldr	r3, [sp, #32]
   18760:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   18764:	f023 0301 	bic.w	r3, r3, #1
   18768:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1876a:	a901      	add	r1, sp, #4
   1876c:	4620      	mov	r0, r4
   1876e:	f013 ff4f 	bl	2c610 <z_arm_fatal_error>
   18772:	e7df      	b.n	18734 <z_arm_fault+0x30>
   18774:	e000ed00 	.word	0xe000ed00

00018778 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   18778:	4a02      	ldr	r2, [pc, #8]	; (18784 <z_arm_fault_init+0xc>)
   1877a:	6953      	ldr	r3, [r2, #20]
   1877c:	f043 0310 	orr.w	r3, r3, #16
   18780:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   18782:	4770      	bx	lr
   18784:	e000ed00 	.word	0xe000ed00

00018788 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   18788:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1878c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   18790:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   18792:	4672      	mov	r2, lr
	bl z_arm_fault
   18794:	f7ff ffb6 	bl	18704 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   18798:	bd01      	pop	{r0, pc}
   1879a:	bf00      	nop

0001879c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1879c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1879e:	e006      	b.n	187ae <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   187a0:	f003 030f 	and.w	r3, r3, #15
   187a4:	4909      	ldr	r1, [pc, #36]	; (187cc <z_arm_interrupt_init+0x30>)
   187a6:	4419      	add	r1, r3
   187a8:	2340      	movs	r3, #64	; 0x40
   187aa:	760b      	strb	r3, [r1, #24]
   187ac:	3201      	adds	r2, #1
   187ae:	2a2f      	cmp	r2, #47	; 0x2f
   187b0:	dc0a      	bgt.n	187c8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   187b2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   187b4:	2b00      	cmp	r3, #0
   187b6:	dbf3      	blt.n	187a0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   187b8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   187bc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   187c0:	2140      	movs	r1, #64	; 0x40
   187c2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   187c6:	e7f1      	b.n	187ac <z_arm_interrupt_init+0x10>
	}
}
   187c8:	4770      	bx	lr
   187ca:	bf00      	nop
   187cc:	e000ecfc 	.word	0xe000ecfc

000187d0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   187d0:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   187d2:	4913      	ldr	r1, [pc, #76]	; (18820 <__start+0x50>)
    strb r0, [r1]
   187d4:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   187d6:	2000      	movs	r0, #0
    msr CONTROL, r0
   187d8:	f380 8814 	msr	CONTROL, r0
    isb
   187dc:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   187e0:	f7fb f96e 	bl	13ac0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   187e4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   187e6:	490f      	ldr	r1, [pc, #60]	; (18824 <__start+0x54>)
    str r0, [r1]
   187e8:	6008      	str	r0, [r1, #0]
    dsb
   187ea:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   187ee:	480e      	ldr	r0, [pc, #56]	; (18828 <__start+0x58>)
    msr msp, r0
   187f0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   187f4:	f000 f830 	bl	18858 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   187f8:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   187fa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   187fe:	480b      	ldr	r0, [pc, #44]	; (1882c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   18800:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   18804:	1840      	adds	r0, r0, r1
    msr PSP, r0
   18806:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1880a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1880e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   18810:	4308      	orrs	r0, r1
    msr CONTROL, r0
   18812:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   18816:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1881a:	f7ff f80b 	bl	17834 <z_arm_prep_c>
   1881e:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   18820:	20005d4a 	.word	0x20005d4a
    ldr r1, =_SCS_MPU_CTRL
   18824:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   18828:	20009340 	.word	0x20009340
    ldr r0, =z_interrupt_stacks
   1882c:	20008180 	.word	0x20008180

00018830 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   18830:	4b08      	ldr	r3, [pc, #32]	; (18854 <z_arm_clear_arm_mpu_config+0x24>)
   18832:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   18836:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   1883a:	2300      	movs	r3, #0
   1883c:	e006      	b.n	1884c <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1883e:	4a05      	ldr	r2, [pc, #20]	; (18854 <z_arm_clear_arm_mpu_config+0x24>)
   18840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   18844:	2100      	movs	r1, #0
   18846:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   1884a:	3301      	adds	r3, #1
   1884c:	4283      	cmp	r3, r0
   1884e:	dbf6      	blt.n	1883e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   18850:	4770      	bx	lr
   18852:	bf00      	nop
   18854:	e000ed00 	.word	0xe000ed00

00018858 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   18858:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1885a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1885c:	2400      	movs	r4, #0
   1885e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   18862:	f7ff ffe5 	bl	18830 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   18866:	4623      	mov	r3, r4
   18868:	e008      	b.n	1887c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   1886a:	f103 0120 	add.w	r1, r3, #32
   1886e:	4a0e      	ldr	r2, [pc, #56]	; (188a8 <z_arm_init_arch_hw_at_boot+0x50>)
   18870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18874:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   18878:	3301      	adds	r3, #1
   1887a:	b2db      	uxtb	r3, r3
   1887c:	2b07      	cmp	r3, #7
   1887e:	d9f4      	bls.n	1886a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   18880:	2300      	movs	r3, #0
   18882:	e008      	b.n	18896 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   18884:	f103 0160 	add.w	r1, r3, #96	; 0x60
   18888:	4a07      	ldr	r2, [pc, #28]	; (188a8 <z_arm_init_arch_hw_at_boot+0x50>)
   1888a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1888e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   18892:	3301      	adds	r3, #1
   18894:	b2db      	uxtb	r3, r3
   18896:	2b07      	cmp	r3, #7
   18898:	d9f4      	bls.n	18884 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1889a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1889c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   188a0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   188a4:	bd10      	pop	{r4, pc}
   188a6:	bf00      	nop
   188a8:	e000e100 	.word	0xe000e100

000188ac <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   188ac:	b508      	push	{r3, lr}
	if (_current == thread) {
   188ae:	4b0a      	ldr	r3, [pc, #40]	; (188d8 <z_impl_k_thread_abort+0x2c>)
   188b0:	689b      	ldr	r3, [r3, #8]
   188b2:	4283      	cmp	r3, r0
   188b4:	d002      	beq.n	188bc <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   188b6:	f00e fa97 	bl	26de8 <z_thread_abort>
}
   188ba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   188bc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   188c0:	2b00      	cmp	r3, #0
   188c2:	d0f8      	beq.n	188b6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   188c4:	4b05      	ldr	r3, [pc, #20]	; (188dc <z_impl_k_thread_abort+0x30>)
   188c6:	685a      	ldr	r2, [r3, #4]
   188c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   188cc:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   188ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   188d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   188d4:	625a      	str	r2, [r3, #36]	; 0x24
   188d6:	e7ee      	b.n	188b6 <z_impl_k_thread_abort+0xa>
   188d8:	2000522c 	.word	0x2000522c
   188dc:	e000ed00 	.word	0xe000ed00

000188e0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   188e0:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   188e2:	4b03      	ldr	r3, [pc, #12]	; (188f0 <z_arm_configure_static_mpu_regions+0x10>)
   188e4:	4a03      	ldr	r2, [pc, #12]	; (188f4 <z_arm_configure_static_mpu_regions+0x14>)
   188e6:	2101      	movs	r1, #1
   188e8:	4803      	ldr	r0, [pc, #12]	; (188f8 <z_arm_configure_static_mpu_regions+0x18>)
   188ea:	f013 ff1b 	bl	2c724 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   188ee:	bd08      	pop	{r3, pc}
   188f0:	20040000 	.word	0x20040000
   188f4:	20000000 	.word	0x20000000
   188f8:	00033408 	.word	0x00033408

000188fc <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   188fc:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   188fe:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   18902:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   18904:	4804      	ldr	r0, [pc, #16]	; (18918 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   18906:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   18908:	2340      	movs	r3, #64	; 0x40
   1890a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1890c:	4b03      	ldr	r3, [pc, #12]	; (1891c <z_arm_configure_dynamic_mpu_regions+0x20>)
   1890e:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   18910:	2101      	movs	r1, #1
   18912:	f013 ff0b 	bl	2c72c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   18916:	bd08      	pop	{r3, pc}
   18918:	20003e8c 	.word	0x20003e8c
   1891c:	150b0000 	.word	0x150b0000

00018920 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   18920:	4a08      	ldr	r2, [pc, #32]	; (18944 <region_init+0x24>)
   18922:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   18926:	680b      	ldr	r3, [r1, #0]
   18928:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1892c:	4303      	orrs	r3, r0
   1892e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   18932:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   18936:	688b      	ldr	r3, [r1, #8]
   18938:	f043 0301 	orr.w	r3, r3, #1
   1893c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   18940:	4770      	bx	lr
   18942:	bf00      	nop
   18944:	e000ed00 	.word	0xe000ed00

00018948 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   18948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1894a:	b083      	sub	sp, #12
   1894c:	af00      	add	r7, sp, #0
   1894e:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   18950:	2807      	cmp	r0, #7
   18952:	d805      	bhi.n	18960 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   18954:	f7ff ffe4 	bl	18920 <region_init>

	return index;
   18958:	4620      	mov	r0, r4
}
   1895a:	370c      	adds	r7, #12
   1895c:	46bd      	mov	sp, r7
   1895e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   18960:	466d      	mov	r5, sp
   18962:	b088      	sub	sp, #32
   18964:	466b      	mov	r3, sp
   18966:	f113 0210 	adds.w	r2, r3, #16
   1896a:	d02f      	beq.n	189cc <region_allocate_and_init+0x84>
   1896c:	210c      	movs	r1, #12
   1896e:	b13a      	cbz	r2, 18980 <region_allocate_and_init+0x38>
   18970:	4608      	mov	r0, r1
   18972:	2904      	cmp	r1, #4
   18974:	dd01      	ble.n	1897a <region_allocate_and_init+0x32>
   18976:	4e18      	ldr	r6, [pc, #96]	; (189d8 <region_allocate_and_init+0x90>)
   18978:	615e      	str	r6, [r3, #20]
   1897a:	2808      	cmp	r0, #8
   1897c:	dd00      	ble.n	18980 <region_allocate_and_init+0x38>
   1897e:	619c      	str	r4, [r3, #24]
   18980:	290b      	cmp	r1, #11
   18982:	dd26      	ble.n	189d2 <region_allocate_and_init+0x8a>
   18984:	240c      	movs	r4, #12
   18986:	b13a      	cbz	r2, 18998 <region_allocate_and_init+0x50>
   18988:	2103      	movs	r1, #3
   1898a:	7139      	strb	r1, [r7, #4]
   1898c:	2100      	movs	r1, #0
   1898e:	7179      	strb	r1, [r7, #5]
   18990:	71b9      	strb	r1, [r7, #6]
   18992:	71f9      	strb	r1, [r7, #7]
   18994:	6878      	ldr	r0, [r7, #4]
   18996:	6118      	str	r0, [r3, #16]
   18998:	2100      	movs	r1, #0
   1899a:	f36f 0100 	bfc	r1, #0, #1
   1899e:	f36f 0141 	bfc	r1, #1, #1
   189a2:	f36f 0182 	bfc	r1, #2, #1
   189a6:	f36f 01c5 	bfc	r1, #3, #3
   189aa:	2301      	movs	r3, #1
   189ac:	f363 1188 	bfi	r1, r3, #6, #3
   189b0:	f3c4 040a 	ubfx	r4, r4, #0, #11
   189b4:	f364 2153 	bfi	r1, r4, #9, #11
   189b8:	f36f 511f 	bfc	r1, #20, #12
   189bc:	2300      	movs	r3, #0
   189be:	4807      	ldr	r0, [pc, #28]	; (189dc <region_allocate_and_init+0x94>)
   189c0:	f7fb fb9c 	bl	140fc <z_impl_z_log_msg_static_create>
   189c4:	46ad      	mov	sp, r5
		return -EINVAL;
   189c6:	f06f 0015 	mvn.w	r0, #21
   189ca:	e7c6      	b.n	1895a <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   189cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   189d0:	e7cd      	b.n	1896e <region_allocate_and_init+0x26>
   189d2:	f06f 041b 	mvn.w	r4, #27
   189d6:	e7d6      	b.n	18986 <region_allocate_and_init+0x3e>
   189d8:	00033418 	.word	0x00033418
   189dc:	00031d6c 	.word	0x00031d6c

000189e0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   189e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189e4:	b082      	sub	sp, #8
   189e6:	af00      	add	r7, sp, #0
   189e8:	4681      	mov	r9, r0
   189ea:	4688      	mov	r8, r1
   189ec:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   189ee:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   189f0:	2500      	movs	r5, #0
   189f2:	e00f      	b.n	18a14 <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   189f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   189f8:	e024      	b.n	18a44 <mpu_configure_regions+0x64>
   189fa:	f06f 041b 	mvn.w	r4, #27
   189fe:	e02d      	b.n	18a5c <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   18a00:	4621      	mov	r1, r4
   18a02:	b2f0      	uxtb	r0, r6
   18a04:	f013 fe6f 	bl	2c6e6 <mpu_configure_region>
   18a08:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   18a0a:	f110 0f16 	cmn.w	r0, #22
   18a0e:	d047      	beq.n	18aa0 <mpu_configure_regions+0xc0>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   18a10:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   18a12:	3501      	adds	r5, #1
   18a14:	4545      	cmp	r5, r8
   18a16:	da43      	bge.n	18aa0 <mpu_configure_regions+0xc0>
		if (regions[i].size == 0U) {
   18a18:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   18a1c:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   18a20:	6862      	ldr	r2, [r4, #4]
   18a22:	2a00      	cmp	r2, #0
   18a24:	d0f5      	beq.n	18a12 <mpu_configure_regions+0x32>
		if (do_sanity_check &&
   18a26:	f1ba 0f00 	cmp.w	sl, #0
   18a2a:	d0e9      	beq.n	18a00 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
   18a2c:	4620      	mov	r0, r4
   18a2e:	f013 fe49 	bl	2c6c4 <mpu_partition_is_valid>
		if (do_sanity_check &&
   18a32:	2800      	cmp	r0, #0
   18a34:	d1e4      	bne.n	18a00 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
   18a36:	466e      	mov	r6, sp
   18a38:	b088      	sub	sp, #32
   18a3a:	466b      	mov	r3, sp
   18a3c:	f113 0210 	adds.w	r2, r3, #16
   18a40:	d0d8      	beq.n	189f4 <mpu_configure_regions+0x14>
   18a42:	210c      	movs	r1, #12
   18a44:	b13a      	cbz	r2, 18a56 <mpu_configure_regions+0x76>
   18a46:	4608      	mov	r0, r1
   18a48:	2904      	cmp	r1, #4
   18a4a:	dd01      	ble.n	18a50 <mpu_configure_regions+0x70>
   18a4c:	4c17      	ldr	r4, [pc, #92]	; (18aac <mpu_configure_regions+0xcc>)
   18a4e:	615c      	str	r4, [r3, #20]
   18a50:	2808      	cmp	r0, #8
   18a52:	dd00      	ble.n	18a56 <mpu_configure_regions+0x76>
   18a54:	619d      	str	r5, [r3, #24]
   18a56:	290b      	cmp	r1, #11
   18a58:	ddcf      	ble.n	189fa <mpu_configure_regions+0x1a>
   18a5a:	240c      	movs	r4, #12
   18a5c:	b13a      	cbz	r2, 18a6e <mpu_configure_regions+0x8e>
   18a5e:	2103      	movs	r1, #3
   18a60:	7139      	strb	r1, [r7, #4]
   18a62:	2100      	movs	r1, #0
   18a64:	7179      	strb	r1, [r7, #5]
   18a66:	71b9      	strb	r1, [r7, #6]
   18a68:	71f9      	strb	r1, [r7, #7]
   18a6a:	6878      	ldr	r0, [r7, #4]
   18a6c:	6118      	str	r0, [r3, #16]
   18a6e:	2100      	movs	r1, #0
   18a70:	f36f 0100 	bfc	r1, #0, #1
   18a74:	f36f 0141 	bfc	r1, #1, #1
   18a78:	f36f 0182 	bfc	r1, #2, #1
   18a7c:	f36f 01c5 	bfc	r1, #3, #3
   18a80:	2301      	movs	r3, #1
   18a82:	f363 1188 	bfi	r1, r3, #6, #3
   18a86:	f3c4 030a 	ubfx	r3, r4, #0, #11
   18a8a:	f363 2153 	bfi	r1, r3, #9, #11
   18a8e:	f36f 511f 	bfc	r1, #20, #12
   18a92:	2300      	movs	r3, #0
   18a94:	4806      	ldr	r0, [pc, #24]	; (18ab0 <mpu_configure_regions+0xd0>)
   18a96:	f7fb fb31 	bl	140fc <z_impl_z_log_msg_static_create>
   18a9a:	46b5      	mov	sp, r6
			return -EINVAL;
   18a9c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   18aa0:	4630      	mov	r0, r6
   18aa2:	3708      	adds	r7, #8
   18aa4:	46bd      	mov	sp, r7
   18aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18aaa:	bf00      	nop
   18aac:	00033440 	.word	0x00033440
   18ab0:	00031d6c 	.word	0x00031d6c

00018ab4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   18ab4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   18ab6:	4c03      	ldr	r4, [pc, #12]	; (18ac4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   18ab8:	2301      	movs	r3, #1
   18aba:	7822      	ldrb	r2, [r4, #0]
   18abc:	f7ff ff90 	bl	189e0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   18ac0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   18ac2:	bd10      	pop	{r4, pc}
   18ac4:	20005d40 	.word	0x20005d40

00018ac8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   18ac8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   18aca:	2300      	movs	r3, #0
   18acc:	4a09      	ldr	r2, [pc, #36]	; (18af4 <mpu_configure_dynamic_mpu_regions+0x2c>)
   18ace:	7812      	ldrb	r2, [r2, #0]
   18ad0:	f7ff ff86 	bl	189e0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   18ad4:	f110 0f16 	cmn.w	r0, #22
   18ad8:	d00a      	beq.n	18af0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   18ada:	4603      	mov	r3, r0
   18adc:	e006      	b.n	18aec <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   18ade:	4a06      	ldr	r2, [pc, #24]	; (18af8 <mpu_configure_dynamic_mpu_regions+0x30>)
   18ae0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   18ae4:	2100      	movs	r1, #0
   18ae6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   18aea:	3301      	adds	r3, #1
   18aec:	2b07      	cmp	r3, #7
   18aee:	ddf6      	ble.n	18ade <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   18af0:	bd08      	pop	{r3, pc}
   18af2:	bf00      	nop
   18af4:	20005d40 	.word	0x20005d40
   18af8:	e000ed00 	.word	0xe000ed00

00018afc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   18afc:	4b04      	ldr	r3, [pc, #16]	; (18b10 <arm_core_mpu_enable+0x14>)
   18afe:	2205      	movs	r2, #5
   18b00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   18b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18b08:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   18b0c:	4770      	bx	lr
   18b0e:	bf00      	nop
   18b10:	e000ed00 	.word	0xe000ed00

00018b14 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   18b14:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   18b18:	4b02      	ldr	r3, [pc, #8]	; (18b24 <arm_core_mpu_disable+0x10>)
   18b1a:	2200      	movs	r2, #0
   18b1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   18b20:	4770      	bx	lr
   18b22:	bf00      	nop
   18b24:	e000ed00 	.word	0xe000ed00

00018b28 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   18b28:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   18b2a:	4b0e      	ldr	r3, [pc, #56]	; (18b64 <z_arm_mpu_init+0x3c>)
   18b2c:	681d      	ldr	r5, [r3, #0]
   18b2e:	2d08      	cmp	r5, #8
   18b30:	d815      	bhi.n	18b5e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   18b32:	f7ff ffef 	bl	18b14 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   18b36:	2400      	movs	r4, #0
   18b38:	e009      	b.n	18b4e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   18b3a:	4b0a      	ldr	r3, [pc, #40]	; (18b64 <z_arm_mpu_init+0x3c>)
   18b3c:	6859      	ldr	r1, [r3, #4]
   18b3e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   18b42:	0093      	lsls	r3, r2, #2
   18b44:	4419      	add	r1, r3
   18b46:	4620      	mov	r0, r4
   18b48:	f7ff feea 	bl	18920 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   18b4c:	3401      	adds	r4, #1
   18b4e:	42a5      	cmp	r5, r4
   18b50:	d8f3      	bhi.n	18b3a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   18b52:	4b05      	ldr	r3, [pc, #20]	; (18b68 <z_arm_mpu_init+0x40>)
   18b54:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   18b56:	f7ff ffd1 	bl	18afc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   18b5a:	2000      	movs	r0, #0
}
   18b5c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   18b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b62:	e7fb      	b.n	18b5c <z_arm_mpu_init+0x34>
   18b64:	00033464 	.word	0x00033464
   18b68:	20005d40 	.word	0x20005d40

00018b6c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   18b6c:	4b01      	ldr	r3, [pc, #4]	; (18b74 <__stdout_hook_install+0x8>)
   18b6e:	6018      	str	r0, [r3, #0]
}
   18b70:	4770      	bx	lr
   18b72:	bf00      	nop
   18b74:	20000710 	.word	0x20000710

00018b78 <vsnprintf>:
	return r;
}

int vsnprintf(char *ZRESTRICT str, size_t len,
	      const char *ZRESTRICT format, va_list vargs)
{
   18b78:	b510      	push	{r4, lr}
   18b7a:	b086      	sub	sp, #24
	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   18b7c:	460c      	mov	r4, r1
   18b7e:	b909      	cbnz	r1, 18b84 <vsnprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change * *s */
   18b80:	f10d 000f 	add.w	r0, sp, #15
	}

	p.ptr = str;
   18b84:	9004      	str	r0, [sp, #16]
	p.len = (int) len;
   18b86:	9405      	str	r4, [sp, #20]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   18b88:	2400      	movs	r4, #0
   18b8a:	9400      	str	r4, [sp, #0]
   18b8c:	a904      	add	r1, sp, #16
   18b8e:	4803      	ldr	r0, [pc, #12]	; (18b9c <vsnprintf+0x24>)
   18b90:	f7fa fcb2 	bl	134f8 <z_cbvprintf_impl>

	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);

	*(p.ptr) = 0;
   18b94:	9b04      	ldr	r3, [sp, #16]
   18b96:	701c      	strb	r4, [r3, #0]
	return r;
}
   18b98:	b006      	add	sp, #24
   18b9a:	bd10      	pop	{r4, pc}
   18b9c:	0002c88d 	.word	0x0002c88d

00018ba0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   18ba0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   18ba4:	4905      	ldr	r1, [pc, #20]	; (18bbc <__NVIC_SystemReset+0x1c>)
   18ba6:	68ca      	ldr	r2, [r1, #12]
   18ba8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18bac:	4b04      	ldr	r3, [pc, #16]	; (18bc0 <__NVIC_SystemReset+0x20>)
   18bae:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   18bb0:	60cb      	str	r3, [r1, #12]
   18bb2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   18bb6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   18bb8:	e7fd      	b.n	18bb6 <__NVIC_SystemReset+0x16>
   18bba:	bf00      	nop
   18bbc:	e000ed00 	.word	0xe000ed00
   18bc0:	05fa0004 	.word	0x05fa0004

00018bc4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   18bc4:	f04f 0240 	mov.w	r2, #64	; 0x40
   18bc8:	f3ef 8311 	mrs	r3, BASEPRI
   18bcc:	f382 8812 	msr	BASEPRI_MAX, r2
   18bd0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   18bd4:	4a04      	ldr	r2, [pc, #16]	; (18be8 <nordicsemi_nrf52_init+0x24>)
   18bd6:	2101      	movs	r1, #1
   18bd8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   18bdc:	f383 8811 	msr	BASEPRI, r3
   18be0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   18be4:	2000      	movs	r0, #0
   18be6:	4770      	bx	lr
   18be8:	4001e000 	.word	0x4001e000

00018bec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   18bec:	b130      	cbz	r0, 18bfc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   18bee:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   18bf0:	4b03      	ldr	r3, [pc, #12]	; (18c00 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   18bf2:	0180      	lsls	r0, r0, #6
   18bf4:	f043 0301 	orr.w	r3, r3, #1
   18bf8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   18bfa:	bd08      	pop	{r3, pc}
   18bfc:	4770      	bx	lr
   18bfe:	bf00      	nop
   18c00:	00031ee0 	.word	0x00031ee0

00018c04 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   18c04:	b508      	push	{r3, lr}
   18c06:	4804      	ldr	r0, [pc, #16]	; (18c18 <xoshiro128_initialize+0x14>)
   18c08:	f017 feba 	bl	30980 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   18c0c:	b108      	cbz	r0, 18c12 <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   18c0e:	2000      	movs	r0, #0
}
   18c10:	bd08      	pop	{r3, pc}
		return -ENODEV;
   18c12:	f06f 0012 	mvn.w	r0, #18
   18c16:	e7fb      	b.n	18c10 <xoshiro128_initialize+0xc>
   18c18:	00031a88 	.word	0x00031a88

00018c1c <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   18c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c1e:	b08b      	sub	sp, #44	; 0x2c
   18c20:	4604      	mov	r4, r0
   18c22:	460d      	mov	r5, r1
   18c24:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   18c26:	7803      	ldrb	r3, [r0, #0]
   18c28:	2b03      	cmp	r3, #3
   18c2a:	d82c      	bhi.n	18c86 <bt_addr_le_to_str+0x6a>
   18c2c:	e8df f003 	tbb	[pc, r3]
   18c30:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   18c34:	4917      	ldr	r1, [pc, #92]	; (18c94 <bt_addr_le_to_str+0x78>)
   18c36:	a807      	add	r0, sp, #28
   18c38:	f013 fd7c 	bl	2c734 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   18c3c:	7963      	ldrb	r3, [r4, #5]
   18c3e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   18c40:	78e1      	ldrb	r1, [r4, #3]
   18c42:	78a0      	ldrb	r0, [r4, #2]
   18c44:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   18c46:	f10d 0c1c 	add.w	ip, sp, #28
   18c4a:	f8cd c014 	str.w	ip, [sp, #20]
   18c4e:	9704      	str	r7, [sp, #16]
   18c50:	9003      	str	r0, [sp, #12]
   18c52:	9102      	str	r1, [sp, #8]
   18c54:	9201      	str	r2, [sp, #4]
   18c56:	9300      	str	r3, [sp, #0]
   18c58:	79a3      	ldrb	r3, [r4, #6]
   18c5a:	4a0f      	ldr	r2, [pc, #60]	; (18c98 <bt_addr_le_to_str+0x7c>)
   18c5c:	4631      	mov	r1, r6
   18c5e:	4628      	mov	r0, r5
   18c60:	f011 fc19 	bl	2a496 <snprintk>
}
   18c64:	b00b      	add	sp, #44	; 0x2c
   18c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   18c68:	490c      	ldr	r1, [pc, #48]	; (18c9c <bt_addr_le_to_str+0x80>)
   18c6a:	a807      	add	r0, sp, #28
   18c6c:	f013 fd62 	bl	2c734 <strcpy>
		break;
   18c70:	e7e4      	b.n	18c3c <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   18c72:	490b      	ldr	r1, [pc, #44]	; (18ca0 <bt_addr_le_to_str+0x84>)
   18c74:	a807      	add	r0, sp, #28
   18c76:	f013 fd5d 	bl	2c734 <strcpy>
		break;
   18c7a:	e7df      	b.n	18c3c <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   18c7c:	4909      	ldr	r1, [pc, #36]	; (18ca4 <bt_addr_le_to_str+0x88>)
   18c7e:	a807      	add	r0, sp, #28
   18c80:	f013 fd58 	bl	2c734 <strcpy>
		break;
   18c84:	e7da      	b.n	18c3c <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   18c86:	4a08      	ldr	r2, [pc, #32]	; (18ca8 <bt_addr_le_to_str+0x8c>)
   18c88:	210a      	movs	r1, #10
   18c8a:	a807      	add	r0, sp, #28
   18c8c:	f011 fc03 	bl	2a496 <snprintk>
		break;
   18c90:	e7d4      	b.n	18c3c <bt_addr_le_to_str+0x20>
   18c92:	bf00      	nop
   18c94:	000334b8 	.word	0x000334b8
   18c98:	000334e0 	.word	0x000334e0
   18c9c:	000334c0 	.word	0x000334c0
   18ca0:	000334c8 	.word	0x000334c8
   18ca4:	000334d4 	.word	0x000334d4
   18ca8:	0003460c 	.word	0x0003460c

00018cac <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   18cac:	2940      	cmp	r1, #64	; 0x40
   18cae:	bf28      	it	cs
   18cb0:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   18cb2:	2300      	movs	r3, #0
   18cb4:	428b      	cmp	r3, r1
   18cb6:	d21c      	bcs.n	18cf2 <bt_hex+0x46>
{
   18cb8:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   18cba:	f810 c003 	ldrb.w	ip, [r0, r3]
   18cbe:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   18cc2:	005a      	lsls	r2, r3, #1
   18cc4:	4d0d      	ldr	r5, [pc, #52]	; (18cfc <bt_hex+0x50>)
   18cc6:	f815 c00c 	ldrb.w	ip, [r5, ip]
   18cca:	4c0d      	ldr	r4, [pc, #52]	; (18d00 <bt_hex+0x54>)
   18ccc:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   18cd0:	f810 c003 	ldrb.w	ip, [r0, r3]
   18cd4:	f00c 0c0f 	and.w	ip, ip, #15
   18cd8:	3201      	adds	r2, #1
   18cda:	f815 500c 	ldrb.w	r5, [r5, ip]
   18cde:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   18ce0:	3301      	adds	r3, #1
   18ce2:	428b      	cmp	r3, r1
   18ce4:	d3e9      	bcc.n	18cba <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   18ce6:	4806      	ldr	r0, [pc, #24]	; (18d00 <bt_hex+0x54>)
   18ce8:	2200      	movs	r2, #0
   18cea:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   18cee:	bc30      	pop	{r4, r5}
   18cf0:	4770      	bx	lr
	str[i * 2] = '\0';
   18cf2:	4803      	ldr	r0, [pc, #12]	; (18d00 <bt_hex+0x54>)
   18cf4:	2200      	movs	r2, #0
   18cf6:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   18cfa:	4770      	bx	lr
   18cfc:	00033504 	.word	0x00033504
   18d00:	20003eb8 	.word	0x20003eb8

00018d04 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   18d04:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   18d06:	4c03      	ldr	r4, [pc, #12]	; (18d14 <bt_addr_le_str+0x10>)
   18d08:	221e      	movs	r2, #30
   18d0a:	4621      	mov	r1, r4
   18d0c:	f7ff ff86 	bl	18c1c <bt_addr_le_to_str>

	return str;
}
   18d10:	4620      	mov	r0, r4
   18d12:	bd10      	pop	{r4, pc}
   18d14:	20003e98 	.word	0x20003e98

00018d18 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   18d18:	b570      	push	{r4, r5, r6, lr}
   18d1a:	b084      	sub	sp, #16

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   18d1c:	ae02      	add	r6, sp, #8
   18d1e:	2400      	movs	r4, #0
   18d20:	9402      	str	r4, [sp, #8]
   18d22:	9403      	str	r4, [sp, #12]
   18d24:	4b08      	ldr	r3, [pc, #32]	; (18d48 <long_wq_init+0x30>)
   18d26:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   18d28:	4d08      	ldr	r5, [pc, #32]	; (18d4c <long_wq_init+0x34>)
   18d2a:	4628      	mov	r0, r5
   18d2c:	f018 f949 	bl	30fc2 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   18d30:	9600      	str	r6, [sp, #0]
   18d32:	230a      	movs	r3, #10
   18d34:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   18d38:	4905      	ldr	r1, [pc, #20]	; (18d50 <long_wq_init+0x38>)
   18d3a:	4628      	mov	r0, r5
   18d3c:	f00d fc44 	bl	265c8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   18d40:	4620      	mov	r0, r4
   18d42:	b004      	add	sp, #16
   18d44:	bd70      	pop	{r4, r5, r6, pc}
   18d46:	bf00      	nop
   18d48:	00033518 	.word	0x00033518
   18d4c:	20001f80 	.word	0x20001f80
   18d50:	20006500 	.word	0x20006500

00018d54 <bt_long_wq_schedule>:
{
   18d54:	b508      	push	{r3, lr}
   18d56:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   18d58:	4801      	ldr	r0, [pc, #4]	; (18d60 <bt_long_wq_schedule+0xc>)
   18d5a:	f018 f954 	bl	31006 <k_work_schedule_for_queue>
}
   18d5e:	bd08      	pop	{r3, pc}
   18d60:	20001f80 	.word	0x20001f80

00018d64 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   18d64:	b510      	push	{r4, lr}
   18d66:	4686      	mov	lr, r0
   18d68:	468c      	mov	ip, r1
	switch (src->type) {
   18d6a:	7803      	ldrb	r3, [r0, #0]
   18d6c:	2b01      	cmp	r3, #1
   18d6e:	d018      	beq.n	18da2 <uuid_to_uuid128+0x3e>
   18d70:	2b02      	cmp	r3, #2
   18d72:	d032      	beq.n	18dda <uuid_to_uuid128+0x76>
   18d74:	b103      	cbz	r3, 18d78 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   18d76:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   18d78:	4c1b      	ldr	r4, [pc, #108]	; (18de8 <uuid_to_uuid128+0x84>)
   18d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18d7c:	f8cc 0000 	str.w	r0, [ip]
   18d80:	f8cc 1004 	str.w	r1, [ip, #4]
   18d84:	f8cc 2008 	str.w	r2, [ip, #8]
   18d88:	f8cc 300c 	str.w	r3, [ip, #12]
   18d8c:	7823      	ldrb	r3, [r4, #0]
   18d8e:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   18d92:	f8be 3002 	ldrh.w	r3, [lr, #2]
	dst[0] = val;
   18d96:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   18d9a:	0a1b      	lsrs	r3, r3, #8
   18d9c:	f88c 300e 	strb.w	r3, [ip, #14]
}
   18da0:	e7e9      	b.n	18d76 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   18da2:	4c11      	ldr	r4, [pc, #68]	; (18de8 <uuid_to_uuid128+0x84>)
   18da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18da6:	f8cc 0000 	str.w	r0, [ip]
   18daa:	f8cc 1004 	str.w	r1, [ip, #4]
   18dae:	f8cc 2008 	str.w	r2, [ip, #8]
   18db2:	f8cc 300c 	str.w	r3, [ip, #12]
   18db6:	7823      	ldrb	r3, [r4, #0]
   18db8:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   18dbc:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   18dc0:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   18dc4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18dc8:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   18dcc:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   18dce:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   18dd2:	0e1b      	lsrs	r3, r3, #24
   18dd4:	f88c 3010 	strb.w	r3, [ip, #16]
}
   18dd8:	e7cd      	b.n	18d76 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   18dda:	2211      	movs	r2, #17
   18ddc:	4601      	mov	r1, r0
   18dde:	4660      	mov	r0, ip
   18de0:	f013 fd04 	bl	2c7ec <memcpy>
		return;
   18de4:	e7c7      	b.n	18d76 <uuid_to_uuid128+0x12>
   18de6:	bf00      	nop
   18de8:	00033524 	.word	0x00033524

00018dec <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   18dec:	b538      	push	{r3, r4, r5, lr}
   18dee:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   18df0:	4805      	ldr	r0, [pc, #20]	; (18e08 <bt_buf_get_rx+0x1c>)
   18df2:	f016 f848 	bl	2ee86 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   18df6:	4605      	mov	r5, r0
   18df8:	b120      	cbz	r0, 18e04 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   18dfa:	2100      	movs	r1, #0
   18dfc:	300c      	adds	r0, #12
   18dfe:	f016 f8c6 	bl	2ef8e <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18e02:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   18e04:	4628      	mov	r0, r5
   18e06:	bd38      	pop	{r3, r4, r5, pc}
   18e08:	20000c10 	.word	0x20000c10

00018e0c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   18e0c:	b538      	push	{r3, r4, r5, lr}
   18e0e:	4602      	mov	r2, r0
   18e10:	460b      	mov	r3, r1
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18e12:	490e      	ldr	r1, [pc, #56]	; (18e4c <bt_buf_get_cmd_complete+0x40>)
   18e14:	2000      	movs	r0, #0
   18e16:	f3bf 8f5b 	dmb	ish
   18e1a:	e851 4f00 	ldrex	r4, [r1]
   18e1e:	e841 0500 	strex	r5, r0, [r1]
   18e22:	2d00      	cmp	r5, #0
   18e24:	d1f9      	bne.n	18e1a <bt_buf_get_cmd_complete+0xe>
   18e26:	f3bf 8f5b 	dmb	ish
   18e2a:	4625      	mov	r5, r4
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   18e2c:	b92c      	cbnz	r4, 18e3a <bt_buf_get_cmd_complete+0x2e>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   18e2e:	2001      	movs	r0, #1
   18e30:	f7ff ffdc 	bl	18dec <bt_buf_get_rx>
   18e34:	4605      	mov	r5, r0
}
   18e36:	4628      	mov	r0, r5
   18e38:	bd38      	pop	{r3, r4, r5, pc}
   18e3a:	2301      	movs	r3, #1
   18e3c:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   18e3e:	4601      	mov	r1, r0
   18e40:	8220      	strh	r0, [r4, #16]
   18e42:	f104 000c 	add.w	r0, r4, #12
   18e46:	f016 f8a2 	bl	2ef8e <net_buf_simple_reserve>
		return buf;
   18e4a:	e7f4      	b.n	18e36 <bt_buf_get_cmd_complete+0x2a>
   18e4c:	20000570 	.word	0x20000570

00018e50 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   18e50:	b510      	push	{r4, lr}
	switch (evt) {
   18e52:	280f      	cmp	r0, #15
   18e54:	d90d      	bls.n	18e72 <bt_buf_get_evt+0x22>
   18e56:	2813      	cmp	r0, #19
   18e58:	d10d      	bne.n	18e76 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   18e5a:	4814      	ldr	r0, [pc, #80]	; (18eac <bt_buf_get_evt+0x5c>)
   18e5c:	f016 f813 	bl	2ee86 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   18e60:	4604      	mov	r4, r0
   18e62:	b198      	cbz	r0, 18e8c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   18e64:	2100      	movs	r1, #0
   18e66:	300c      	adds	r0, #12
   18e68:	f016 f891 	bl	2ef8e <net_buf_simple_reserve>
   18e6c:	2301      	movs	r3, #1
   18e6e:	7623      	strb	r3, [r4, #24]
}
   18e70:	e00c      	b.n	18e8c <bt_buf_get_evt+0x3c>
	switch (evt) {
   18e72:	280e      	cmp	r0, #14
   18e74:	d205      	bcs.n	18e82 <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   18e76:	b959      	cbnz	r1, 18e90 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   18e78:	2001      	movs	r0, #1
   18e7a:	f7ff ffb7 	bl	18dec <bt_buf_get_rx>
   18e7e:	4604      	mov	r4, r0
   18e80:	e004      	b.n	18e8c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   18e82:	4610      	mov	r0, r2
   18e84:	4619      	mov	r1, r3
   18e86:	f7ff ffc1 	bl	18e0c <bt_buf_get_cmd_complete>
   18e8a:	4604      	mov	r4, r0
	}
}
   18e8c:	4620      	mov	r0, r4
   18e8e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   18e90:	4807      	ldr	r0, [pc, #28]	; (18eb0 <bt_buf_get_evt+0x60>)
   18e92:	f015 fff8 	bl	2ee86 <net_buf_alloc_fixed>
			if (buf) {
   18e96:	4604      	mov	r4, r0
   18e98:	2800      	cmp	r0, #0
   18e9a:	d0f7      	beq.n	18e8c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   18e9c:	2100      	movs	r1, #0
   18e9e:	300c      	adds	r0, #12
   18ea0:	f016 f875 	bl	2ef8e <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18ea4:	2301      	movs	r3, #1
   18ea6:	7623      	strb	r3, [r4, #24]
			return buf;
   18ea8:	e7f0      	b.n	18e8c <bt_buf_get_evt+0x3c>
   18eaa:	bf00      	nop
   18eac:	20000c3c 	.word	0x20000c3c
   18eb0:	20000b8c 	.word	0x20000b8c

00018eb4 <conn_handle_disconnected>:
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
}

static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   18eb4:	2300      	movs	r3, #0
   18eb6:	b103      	cbz	r3, 18eba <conn_handle_disconnected+0x6>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   18eb8:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   18eba:	4a05      	ldr	r2, [pc, #20]	; (18ed0 <conn_handle_disconnected+0x1c>)
   18ebc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   18ec0:	b922      	cbnz	r2, 18ecc <conn_handle_disconnected+0x18>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   18ec2:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   18ec6:	4902      	ldr	r1, [pc, #8]	; (18ed0 <conn_handle_disconnected+0x1c>)
   18ec8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   18ecc:	3301      	adds	r3, #1
   18ece:	e7f2      	b.n	18eb6 <conn_handle_disconnected+0x2>
   18ed0:	20003f3c 	.word	0x20003f3c

00018ed4 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   18ed4:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   18ed8:	2300      	movs	r3, #0
   18eda:	b10b      	cbz	r3, 18ee0 <conn_handle_is_disconnected+0xc>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   18edc:	2000      	movs	r0, #0
}
   18ede:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   18ee0:	4a06      	ldr	r2, [pc, #24]	; (18efc <conn_handle_is_disconnected+0x28>)
   18ee2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   18ee6:	4282      	cmp	r2, r0
   18ee8:	d001      	beq.n	18eee <conn_handle_is_disconnected+0x1a>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   18eea:	3301      	adds	r3, #1
   18eec:	e7f5      	b.n	18eda <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   18eee:	4a03      	ldr	r2, [pc, #12]	; (18efc <conn_handle_is_disconnected+0x28>)
   18ef0:	2100      	movs	r1, #0
   18ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   18ef6:	2001      	movs	r0, #1
   18ef8:	4770      	bx	lr
   18efa:	bf00      	nop
   18efc:	20003f3c 	.word	0x20003f3c

00018f00 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   18f00:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   18f02:	7851      	ldrb	r1, [r2, #1]
   18f04:	4b08      	ldr	r3, [pc, #32]	; (18f28 <read_local_ver_complete+0x28>)
   18f06:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   18f0a:	8851      	ldrh	r1, [r2, #2]
   18f0c:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   18f10:	7911      	ldrb	r1, [r2, #4]
   18f12:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   18f16:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   18f1a:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   18f1e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   18f22:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
   18f26:	4770      	bx	lr
   18f28:	20000438 	.word	0x20000438

00018f2c <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
   18f2c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   18f2e:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   18f30:	3001      	adds	r0, #1
   18f32:	f013 fd5e 	bl	2c9f2 <sys_get_le64>
   18f36:	4b02      	ldr	r3, [pc, #8]	; (18f40 <le_read_supp_states_complete+0x14>)
   18f38:	e9c3 0138 	strd	r0, r1, [r3, #224]	; 0xe0
}
   18f3c:	bd08      	pop	{r3, pc}
   18f3e:	bf00      	nop
   18f40:	20000438 	.word	0x20000438

00018f44 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
   18f44:	b510      	push	{r4, lr}
   18f46:	b08e      	sub	sp, #56	; 0x38
   18f48:	4686      	mov	lr, r0
	const char * const str[] = {
   18f4a:	46ec      	mov	ip, sp
   18f4c:	4c0c      	ldr	r4, [pc, #48]	; (18f80 <ver_str+0x3c>)
   18f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18f50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18f56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18f5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18f60:	e894 0003 	ldmia.w	r4, {r0, r1}
   18f64:	e88c 0003 	stmia.w	ip, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
   18f68:	f1be 0f0d 	cmp.w	lr, #13
   18f6c:	d902      	bls.n	18f74 <ver_str+0x30>
		return str[ver];
	}

	return "unknown";
   18f6e:	4805      	ldr	r0, [pc, #20]	; (18f84 <ver_str+0x40>)
}
   18f70:	b00e      	add	sp, #56	; 0x38
   18f72:	bd10      	pop	{r4, pc}
		return str[ver];
   18f74:	ab0e      	add	r3, sp, #56	; 0x38
   18f76:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   18f7a:	f85e 0c38 	ldr.w	r0, [lr, #-56]
   18f7e:	e7f7      	b.n	18f70 <ver_str+0x2c>
   18f80:	00031e88 	.word	0x00031e88
   18f84:	00033570 	.word	0x00033570

00018f88 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
   18f88:	2803      	cmp	r0, #3
   18f8a:	d901      	bls.n	18f90 <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
   18f8c:	4802      	ldr	r0, [pc, #8]	; (18f98 <vs_hw_platform+0x10>)
}
   18f8e:	4770      	bx	lr
		return plat_str[platform];
   18f90:	4b02      	ldr	r3, [pc, #8]	; (18f9c <vs_hw_platform+0x14>)
   18f92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18f96:	4770      	bx	lr
   18f98:	00033570 	.word	0x00033570
   18f9c:	00033d40 	.word	0x00033d40

00018fa0 <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   18fa0:	2802      	cmp	r0, #2
   18fa2:	d107      	bne.n	18fb4 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
   18fa4:	2903      	cmp	r1, #3
   18fa6:	d901      	bls.n	18fac <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
   18fa8:	4803      	ldr	r0, [pc, #12]	; (18fb8 <vs_hw_variant+0x18>)
}
   18faa:	4770      	bx	lr
		return nordic_str[variant];
   18fac:	4b03      	ldr	r3, [pc, #12]	; (18fbc <vs_hw_variant+0x1c>)
   18fae:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   18fb2:	4770      	bx	lr
		return "unknown";
   18fb4:	4800      	ldr	r0, [pc, #0]	; (18fb8 <vs_hw_variant+0x18>)
   18fb6:	4770      	bx	lr
   18fb8:	00033570 	.word	0x00033570
   18fbc:	00033d30 	.word	0x00033d30

00018fc0 <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
   18fc0:	2803      	cmp	r0, #3
   18fc2:	d901      	bls.n	18fc8 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
   18fc4:	4802      	ldr	r0, [pc, #8]	; (18fd0 <vs_fw_variant+0x10>)
}
   18fc6:	4770      	bx	lr
		return var_str[variant];
   18fc8:	4b02      	ldr	r3, [pc, #8]	; (18fd4 <vs_fw_variant+0x14>)
   18fca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18fce:	4770      	bx	lr
   18fd0:	00033570 	.word	0x00033570
   18fd4:	00033d20 	.word	0x00033d20

00018fd8 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   18fd8:	68c3      	ldr	r3, [r0, #12]
   18fda:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   18fdc:	b98b      	cbnz	r3, 19002 <hci_reset_complete+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18fde:	4b09      	ldr	r3, [pc, #36]	; (19004 <hci_reset_complete+0x2c>)
   18fe0:	f3bf 8f5b 	dmb	ish
   18fe4:	681a      	ldr	r2, [r3, #0]
   18fe6:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18fea:	f002 0209 	and.w	r2, r2, #9
   18fee:	f3bf 8f5b 	dmb	ish
   18ff2:	e853 1f00 	ldrex	r1, [r3]
   18ff6:	e843 2000 	strex	r0, r2, [r3]
   18ffa:	2800      	cmp	r0, #0
   18ffc:	d1f9      	bne.n	18ff2 <hci_reset_complete+0x1a>
   18ffe:	f3bf 8f5b 	dmb	ish
}
   19002:	4770      	bx	lr
   19004:	2000050c 	.word	0x2000050c

00019008 <read_local_features_complete>:
{
   19008:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1900a:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1900c:	2208      	movs	r2, #8
   1900e:	3101      	adds	r1, #1
   19010:	4801      	ldr	r0, [pc, #4]	; (19018 <read_local_features_complete+0x10>)
   19012:	f013 fbeb 	bl	2c7ec <memcpy>
}
   19016:	bd08      	pop	{r3, pc}
   19018:	200004b0 	.word	0x200004b0

0001901c <read_supported_commands_complete>:
{
   1901c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   1901e:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   19020:	2240      	movs	r2, #64	; 0x40
   19022:	3101      	adds	r1, #1
   19024:	4801      	ldr	r0, [pc, #4]	; (1902c <read_supported_commands_complete+0x10>)
   19026:	f013 fbe1 	bl	2c7ec <memcpy>
}
   1902a:	bd08      	pop	{r3, pc}
   1902c:	200004b8 	.word	0x200004b8

00019030 <read_le_features_complete>:
{
   19030:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   19032:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   19034:	2208      	movs	r2, #8
   19036:	3101      	adds	r1, #1
   19038:	4801      	ldr	r0, [pc, #4]	; (19040 <read_le_features_complete+0x10>)
   1903a:	f013 fbd7 	bl	2c7ec <memcpy>
}
   1903e:	bd08      	pop	{r3, pc}
   19040:	20000510 	.word	0x20000510

00019044 <le_read_buffer_size_complete>:
{
   19044:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   19046:	68c3      	ldr	r3, [r0, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   19048:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1904c:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   1904e:	b109      	cbz	r1, 19054 <le_read_buffer_size_complete+0x10>
   19050:	78d9      	ldrb	r1, [r3, #3]
   19052:	b901      	cbnz	r1, 19056 <le_read_buffer_size_complete+0x12>
}
   19054:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = acl_mtu;
   19056:	4805      	ldr	r0, [pc, #20]	; (1906c <le_read_buffer_size_complete+0x28>)
   19058:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1905c:	78d9      	ldrb	r1, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1905e:	460a      	mov	r2, r1
   19060:	f500 7084 	add.w	r0, r0, #264	; 0x108
   19064:	f017 fe9e 	bl	30da4 <z_impl_k_sem_init>
   19068:	e7f4      	b.n	19054 <le_read_buffer_size_complete+0x10>
   1906a:	bf00      	nop
   1906c:	20000438 	.word	0x20000438

00019070 <read_buffer_size_complete>:
{
   19070:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   19072:	68c2      	ldr	r2, [r0, #12]
	if (bt_dev.le.acl_mtu) {
   19074:	4b08      	ldr	r3, [pc, #32]	; (19098 <read_buffer_size_complete+0x28>)
   19076:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
   1907a:	b103      	cbz	r3, 1907e <read_buffer_size_complete+0xe>
}
   1907c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1907e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   19082:	4805      	ldr	r0, [pc, #20]	; (19098 <read_buffer_size_complete+0x28>)
   19084:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   19088:	8891      	ldrh	r1, [r2, #4]
   1908a:	460a      	mov	r2, r1
   1908c:	f500 7084 	add.w	r0, r0, #264	; 0x108
   19090:	f017 fe88 	bl	30da4 <z_impl_k_sem_init>
   19094:	e7f2      	b.n	1907c <read_buffer_size_complete+0xc>
   19096:	bf00      	nop
   19098:	20000438 	.word	0x20000438

0001909c <hci_data_buf_overflow>:
{
   1909c:	b5b0      	push	{r4, r5, r7, lr}
   1909e:	b082      	sub	sp, #8
   190a0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   190a2:	68c3      	ldr	r3, [r0, #12]
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   190a4:	781c      	ldrb	r4, [r3, #0]
   190a6:	b088      	sub	sp, #32
   190a8:	466b      	mov	r3, sp
   190aa:	f113 0210 	adds.w	r2, r3, #16
   190ae:	d02f      	beq.n	19110 <hci_data_buf_overflow+0x74>
   190b0:	210c      	movs	r1, #12
   190b2:	b13a      	cbz	r2, 190c4 <hci_data_buf_overflow+0x28>
   190b4:	4608      	mov	r0, r1
   190b6:	2904      	cmp	r1, #4
   190b8:	dd01      	ble.n	190be <hci_data_buf_overflow+0x22>
   190ba:	4d18      	ldr	r5, [pc, #96]	; (1911c <hci_data_buf_overflow+0x80>)
   190bc:	615d      	str	r5, [r3, #20]
   190be:	2808      	cmp	r0, #8
   190c0:	dd00      	ble.n	190c4 <hci_data_buf_overflow+0x28>
   190c2:	619c      	str	r4, [r3, #24]
   190c4:	290b      	cmp	r1, #11
   190c6:	dd26      	ble.n	19116 <hci_data_buf_overflow+0x7a>
   190c8:	f04f 0c0c 	mov.w	ip, #12
   190cc:	b13a      	cbz	r2, 190de <hci_data_buf_overflow+0x42>
   190ce:	2103      	movs	r1, #3
   190d0:	7139      	strb	r1, [r7, #4]
   190d2:	2100      	movs	r1, #0
   190d4:	7179      	strb	r1, [r7, #5]
   190d6:	71b9      	strb	r1, [r7, #6]
   190d8:	71f9      	strb	r1, [r7, #7]
   190da:	6878      	ldr	r0, [r7, #4]
   190dc:	6118      	str	r0, [r3, #16]
   190de:	2100      	movs	r1, #0
   190e0:	f36f 0100 	bfc	r1, #0, #1
   190e4:	f36f 0141 	bfc	r1, #1, #1
   190e8:	f36f 0182 	bfc	r1, #2, #1
   190ec:	f36f 01c5 	bfc	r1, #3, #3
   190f0:	2302      	movs	r3, #2
   190f2:	f363 1188 	bfi	r1, r3, #6, #3
   190f6:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   190fa:	f36c 2153 	bfi	r1, ip, #9, #11
   190fe:	f36f 511f 	bfc	r1, #20, #12
   19102:	2300      	movs	r3, #0
   19104:	4806      	ldr	r0, [pc, #24]	; (19120 <hci_data_buf_overflow+0x84>)
   19106:	f7fa fff9 	bl	140fc <z_impl_z_log_msg_static_create>
}
   1910a:	3708      	adds	r7, #8
   1910c:	46bd      	mov	sp, r7
   1910e:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   19110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19114:	e7cd      	b.n	190b2 <hci_data_buf_overflow+0x16>
   19116:	f06f 0c1b 	mvn.w	ip, #27
   1911a:	e7d7      	b.n	190cc <hci_data_buf_overflow+0x30>
   1911c:	00033578 	.word	0x00033578
   19120:	00031cfc 	.word	0x00031cfc

00019124 <handle_event_common>:
{
   19124:	b5f0      	push	{r4, r5, r6, r7, lr}
   19126:	b083      	sub	sp, #12
   19128:	af00      	add	r7, sp, #0
   1912a:	4604      	mov	r4, r0
   1912c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   1912e:	f04f 0c00 	mov.w	ip, #0
   19132:	4563      	cmp	r3, ip
   19134:	d953      	bls.n	191de <handle_event_common+0xba>
		const struct event_handler *handler = &handlers[i];
   19136:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   1913a:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   1913e:	45a6      	cmp	lr, r4
   19140:	d109      	bne.n	19156 <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
   19142:	8a03      	ldrh	r3, [r0, #16]
   19144:	784a      	ldrb	r2, [r1, #1]
   19146:	4293      	cmp	r3, r2
   19148:	d308      	bcc.n	1915c <handle_event_common+0x38>
		handler->handler(buf);
   1914a:	684b      	ldr	r3, [r1, #4]
   1914c:	4798      	blx	r3
		return 0;
   1914e:	2000      	movs	r0, #0
}
   19150:	370c      	adds	r7, #12
   19152:	46bd      	mov	sp, r7
   19154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   19156:	f10c 0c01 	add.w	ip, ip, #1
   1915a:	e7ea      	b.n	19132 <handle_event_common+0xe>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   1915c:	466d      	mov	r5, sp
   1915e:	b088      	sub	sp, #32
   19160:	4669      	mov	r1, sp
   19162:	f111 0210 	adds.w	r2, r1, #16
   19166:	d034      	beq.n	191d2 <handle_event_common+0xae>
   19168:	2010      	movs	r0, #16
   1916a:	b162      	cbz	r2, 19186 <handle_event_common+0x62>
   1916c:	4684      	mov	ip, r0
   1916e:	2804      	cmp	r0, #4
   19170:	dd01      	ble.n	19176 <handle_event_common+0x52>
   19172:	4e1c      	ldr	r6, [pc, #112]	; (191e4 <handle_event_common+0xc0>)
   19174:	614e      	str	r6, [r1, #20]
   19176:	f1bc 0f08 	cmp.w	ip, #8
   1917a:	dd00      	ble.n	1917e <handle_event_common+0x5a>
   1917c:	618b      	str	r3, [r1, #24]
   1917e:	f1bc 0f0c 	cmp.w	ip, #12
   19182:	dd00      	ble.n	19186 <handle_event_common+0x62>
   19184:	61cc      	str	r4, [r1, #28]
   19186:	280f      	cmp	r0, #15
   19188:	dd26      	ble.n	191d8 <handle_event_common+0xb4>
   1918a:	2310      	movs	r3, #16
   1918c:	b13a      	cbz	r2, 1919e <handle_event_common+0x7a>
   1918e:	2004      	movs	r0, #4
   19190:	7138      	strb	r0, [r7, #4]
   19192:	2000      	movs	r0, #0
   19194:	7178      	strb	r0, [r7, #5]
   19196:	71b8      	strb	r0, [r7, #6]
   19198:	71f8      	strb	r0, [r7, #7]
   1919a:	6878      	ldr	r0, [r7, #4]
   1919c:	6108      	str	r0, [r1, #16]
   1919e:	2100      	movs	r1, #0
   191a0:	f36f 0100 	bfc	r1, #0, #1
   191a4:	f36f 0141 	bfc	r1, #1, #1
   191a8:	f36f 0182 	bfc	r1, #2, #1
   191ac:	f36f 01c5 	bfc	r1, #3, #3
   191b0:	2001      	movs	r0, #1
   191b2:	f360 1188 	bfi	r1, r0, #6, #3
   191b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   191ba:	f363 2153 	bfi	r1, r3, #9, #11
   191be:	f36f 511f 	bfc	r1, #20, #12
   191c2:	2300      	movs	r3, #0
   191c4:	4808      	ldr	r0, [pc, #32]	; (191e8 <handle_event_common+0xc4>)
   191c6:	f7fa ff99 	bl	140fc <z_impl_z_log_msg_static_create>
   191ca:	46ad      	mov	sp, r5
			return -EINVAL;
   191cc:	f06f 0015 	mvn.w	r0, #21
   191d0:	e7be      	b.n	19150 <handle_event_common+0x2c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   191d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   191d6:	e7c8      	b.n	1916a <handle_event_common+0x46>
   191d8:	f06f 031b 	mvn.w	r3, #27
   191dc:	e7d6      	b.n	1918c <handle_event_common+0x68>
	return -EOPNOTSUPP;
   191de:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   191e2:	e7b5      	b.n	19150 <handle_event_common+0x2c>
   191e4:	000335a0 	.word	0x000335a0
   191e8:	00031cfc 	.word	0x00031cfc

000191ec <bt_dev_show_info>:
{
   191ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191f0:	b082      	sub	sp, #8
   191f2:	af00      	add	r7, sp, #0
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   191f4:	4bb5      	ldr	r3, [pc, #724]	; (194cc <bt_dev_show_info+0x2e0>)
   191f6:	79db      	ldrb	r3, [r3, #7]
   191f8:	2b01      	cmp	r3, #1
   191fa:	d931      	bls.n	19260 <bt_dev_show_info+0x74>
   191fc:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 194d0 <bt_dev_show_info+0x2e4>
   19200:	48b2      	ldr	r0, [pc, #712]	; (194cc <bt_dev_show_info+0x2e0>)
   19202:	f7ff fd7f 	bl	18d04 <bt_addr_le_str>
   19206:	466d      	mov	r5, sp
   19208:	2300      	movs	r3, #0
   1920a:	713b      	strb	r3, [r7, #4]
   1920c:	2302      	movs	r3, #2
   1920e:	717b      	strb	r3, [r7, #5]
   19210:	2301      	movs	r3, #1
   19212:	71bb      	strb	r3, [r7, #6]
   19214:	2303      	movs	r3, #3
   19216:	71fb      	strb	r3, [r7, #7]
   19218:	b08a      	sub	sp, #40	; 0x28
   1921a:	466e      	mov	r6, sp
   1921c:	f116 0210 	adds.w	r2, r6, #16
   19220:	d021      	beq.n	19266 <bt_dev_show_info+0x7a>
   19222:	f04f 0c14 	mov.w	ip, #20
   19226:	b122      	cbz	r2, 19232 <bt_dev_show_info+0x46>
   19228:	f1bc 0f04 	cmp.w	ip, #4
   1922c:	dd01      	ble.n	19232 <bt_dev_show_info+0x46>
   1922e:	4ba9      	ldr	r3, [pc, #676]	; (194d4 <bt_dev_show_info+0x2e8>)
   19230:	6173      	str	r3, [r6, #20]
   19232:	2300      	movs	r3, #0
   19234:	703b      	strb	r3, [r7, #0]
   19236:	2302      	movs	r3, #2
   19238:	707b      	strb	r3, [r7, #1]
   1923a:	b122      	cbz	r2, 19246 <bt_dev_show_info+0x5a>
   1923c:	f1bc 0f08 	cmp.w	ip, #8
   19240:	dd01      	ble.n	19246 <bt_dev_show_info+0x5a>
   19242:	f8c6 8018 	str.w	r8, [r6, #24]
   19246:	2301      	movs	r3, #1
   19248:	70bb      	strb	r3, [r7, #2]
   1924a:	2303      	movs	r3, #3
   1924c:	70fb      	strb	r3, [r7, #3]
   1924e:	b1ba      	cbz	r2, 19280 <bt_dev_show_info+0x94>
   19250:	f1bc 0f0c 	cmp.w	ip, #12
   19254:	dd00      	ble.n	19258 <bt_dev_show_info+0x6c>
   19256:	61f0      	str	r0, [r6, #28]
   19258:	f106 0320 	add.w	r3, r6, #32
   1925c:	2100      	movs	r1, #0
   1925e:	e00d      	b.n	1927c <bt_dev_show_info+0x90>
   19260:	f8df 8274 	ldr.w	r8, [pc, #628]	; 194d8 <bt_dev_show_info+0x2ec>
   19264:	e7cc      	b.n	19200 <bt_dev_show_info+0x14>
   19266:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   1926a:	e7dc      	b.n	19226 <bt_dev_show_info+0x3a>
   1926c:	f101 0008 	add.w	r0, r1, #8
   19270:	4438      	add	r0, r7
   19272:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   19276:	f803 0b01 	strb.w	r0, [r3], #1
   1927a:	3101      	adds	r1, #1
   1927c:	2903      	cmp	r1, #3
   1927e:	d9f5      	bls.n	1926c <bt_dev_show_info+0x80>
   19280:	f1bc 0f13 	cmp.w	ip, #19
   19284:	dd23      	ble.n	192ce <bt_dev_show_info+0xe2>
   19286:	2314      	movs	r3, #20
   19288:	b142      	cbz	r2, 1929c <bt_dev_show_info+0xb0>
   1928a:	2104      	movs	r1, #4
   1928c:	7139      	strb	r1, [r7, #4]
   1928e:	2100      	movs	r1, #0
   19290:	7179      	strb	r1, [r7, #5]
   19292:	71b9      	strb	r1, [r7, #6]
   19294:	2102      	movs	r1, #2
   19296:	71f9      	strb	r1, [r7, #7]
   19298:	6878      	ldr	r0, [r7, #4]
   1929a:	6130      	str	r0, [r6, #16]
   1929c:	2100      	movs	r1, #0
   1929e:	f36f 0100 	bfc	r1, #0, #1
   192a2:	f36f 0141 	bfc	r1, #1, #1
   192a6:	f36f 0182 	bfc	r1, #2, #1
   192aa:	f36f 01c5 	bfc	r1, #3, #3
   192ae:	2003      	movs	r0, #3
   192b0:	f360 1188 	bfi	r1, r0, #6, #3
   192b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   192b8:	f363 2153 	bfi	r1, r3, #9, #11
   192bc:	f36f 511f 	bfc	r1, #20, #12
   192c0:	2300      	movs	r3, #0
   192c2:	4886      	ldr	r0, [pc, #536]	; (194dc <bt_dev_show_info+0x2f0>)
   192c4:	f7fa ff1a 	bl	140fc <z_impl_z_log_msg_static_create>
   192c8:	46ad      	mov	sp, r5
	for (i = 1; i < bt_dev.id_count; i++) {
   192ca:	2501      	movs	r5, #1
   192cc:	e031      	b.n	19332 <bt_dev_show_info+0x146>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   192ce:	f06f 031b 	mvn.w	r3, #27
   192d2:	e7d9      	b.n	19288 <bt_dev_show_info+0x9c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   192d4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   192d8:	e041      	b.n	1935e <bt_dev_show_info+0x172>
   192da:	2301      	movs	r3, #1
   192dc:	703b      	strb	r3, [r7, #0]
   192de:	2303      	movs	r3, #3
   192e0:	707b      	strb	r3, [r7, #1]
   192e2:	2a00      	cmp	r2, #0
   192e4:	d149      	bne.n	1937a <bt_dev_show_info+0x18e>
   192e6:	f1bc 0f11 	cmp.w	ip, #17
   192ea:	dd59      	ble.n	193a0 <bt_dev_show_info+0x1b4>
   192ec:	2312      	movs	r3, #18
   192ee:	b142      	cbz	r2, 19302 <bt_dev_show_info+0x116>
   192f0:	2004      	movs	r0, #4
   192f2:	7138      	strb	r0, [r7, #4]
   192f4:	2000      	movs	r0, #0
   192f6:	7178      	strb	r0, [r7, #5]
   192f8:	71b8      	strb	r0, [r7, #6]
   192fa:	2001      	movs	r0, #1
   192fc:	71f8      	strb	r0, [r7, #7]
   192fe:	6878      	ldr	r0, [r7, #4]
   19300:	6108      	str	r0, [r1, #16]
   19302:	f36f 0400 	bfc	r4, #0, #1
   19306:	f36f 0441 	bfc	r4, #1, #1
   1930a:	f36f 0482 	bfc	r4, #2, #1
   1930e:	f36f 04c5 	bfc	r4, #3, #3
   19312:	2103      	movs	r1, #3
   19314:	f361 1488 	bfi	r4, r1, #6, #3
   19318:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1931c:	f363 2453 	bfi	r4, r3, #9, #11
   19320:	f36f 541f 	bfc	r4, #20, #12
   19324:	2300      	movs	r3, #0
   19326:	4621      	mov	r1, r4
   19328:	486c      	ldr	r0, [pc, #432]	; (194dc <bt_dev_show_info+0x2f0>)
   1932a:	f7fa fee7 	bl	140fc <z_impl_z_log_msg_static_create>
   1932e:	46b5      	mov	sp, r6
	for (i = 1; i < bt_dev.id_count; i++) {
   19330:	3501      	adds	r5, #1
   19332:	4b66      	ldr	r3, [pc, #408]	; (194cc <bt_dev_show_info+0x2e0>)
   19334:	79db      	ldrb	r3, [r3, #7]
   19336:	42ab      	cmp	r3, r5
   19338:	dd35      	ble.n	193a6 <bt_dev_show_info+0x1ba>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   1933a:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   1933e:	4b63      	ldr	r3, [pc, #396]	; (194cc <bt_dev_show_info+0x2e0>)
   19340:	4418      	add	r0, r3
   19342:	f7ff fcdf 	bl	18d04 <bt_addr_le_str>
   19346:	466e      	mov	r6, sp
   19348:	2301      	movs	r3, #1
   1934a:	713b      	strb	r3, [r7, #4]
   1934c:	2303      	movs	r3, #3
   1934e:	717b      	strb	r3, [r7, #5]
   19350:	b08a      	sub	sp, #40	; 0x28
   19352:	4669      	mov	r1, sp
   19354:	f111 0210 	adds.w	r2, r1, #16
   19358:	d0bc      	beq.n	192d4 <bt_dev_show_info+0xe8>
   1935a:	f04f 0c12 	mov.w	ip, #18
   1935e:	2a00      	cmp	r2, #0
   19360:	d0bb      	beq.n	192da <bt_dev_show_info+0xee>
   19362:	4663      	mov	r3, ip
   19364:	f1bc 0f04 	cmp.w	ip, #4
   19368:	dd03      	ble.n	19372 <bt_dev_show_info+0x186>
   1936a:	f8df e174 	ldr.w	lr, [pc, #372]	; 194e0 <bt_dev_show_info+0x2f4>
   1936e:	f8c1 e014 	str.w	lr, [r1, #20]
   19372:	2b08      	cmp	r3, #8
   19374:	ddb1      	ble.n	192da <bt_dev_show_info+0xee>
   19376:	618d      	str	r5, [r1, #24]
   19378:	e7af      	b.n	192da <bt_dev_show_info+0xee>
   1937a:	f1bc 0f0c 	cmp.w	ip, #12
   1937e:	dd00      	ble.n	19382 <bt_dev_show_info+0x196>
   19380:	61c8      	str	r0, [r1, #28]
   19382:	f101 0320 	add.w	r3, r1, #32
   19386:	2000      	movs	r0, #0
   19388:	e007      	b.n	1939a <bt_dev_show_info+0x1ae>
   1938a:	f100 0e08 	add.w	lr, r0, #8
   1938e:	44be      	add	lr, r7
   19390:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   19394:	f803 eb01 	strb.w	lr, [r3], #1
   19398:	3001      	adds	r0, #1
   1939a:	2801      	cmp	r0, #1
   1939c:	d9f5      	bls.n	1938a <bt_dev_show_info+0x19e>
   1939e:	e7a2      	b.n	192e6 <bt_dev_show_info+0xfa>
   193a0:	f06f 031b 	mvn.w	r3, #27
   193a4:	e7a3      	b.n	192ee <bt_dev_show_info+0x102>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   193a6:	4c49      	ldr	r4, [pc, #292]	; (194cc <bt_dev_show_info+0x2e0>)
   193a8:	f894 8070 	ldrb.w	r8, [r4, #112]	; 0x70
   193ac:	4640      	mov	r0, r8
   193ae:	f7ff fdc9 	bl	18f44 <ver_str>
   193b2:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   193b6:	f8b4 c076 	ldrh.w	ip, [r4, #118]	; 0x76
   193ba:	466d      	mov	r5, sp
   193bc:	2300      	movs	r3, #0
   193be:	713b      	strb	r3, [r7, #4]
   193c0:	2302      	movs	r3, #2
   193c2:	717b      	strb	r3, [r7, #5]
   193c4:	b08c      	sub	sp, #48	; 0x30
   193c6:	466c      	mov	r4, sp
   193c8:	f114 0210 	adds.w	r2, r4, #16
   193cc:	d01d      	beq.n	1940a <bt_dev_show_info+0x21e>
   193ce:	261a      	movs	r6, #26
   193d0:	b11a      	cbz	r2, 193da <bt_dev_show_info+0x1ee>
   193d2:	2e04      	cmp	r6, #4
   193d4:	dd01      	ble.n	193da <bt_dev_show_info+0x1ee>
   193d6:	4b43      	ldr	r3, [pc, #268]	; (194e4 <bt_dev_show_info+0x2f8>)
   193d8:	6163      	str	r3, [r4, #20]
   193da:	2300      	movs	r3, #0
   193dc:	703b      	strb	r3, [r7, #0]
   193de:	2302      	movs	r3, #2
   193e0:	707b      	strb	r3, [r7, #1]
   193e2:	b1fa      	cbz	r2, 19424 <bt_dev_show_info+0x238>
   193e4:	4633      	mov	r3, r6
   193e6:	2e08      	cmp	r6, #8
   193e8:	dd00      	ble.n	193ec <bt_dev_show_info+0x200>
   193ea:	61a0      	str	r0, [r4, #24]
   193ec:	2b0c      	cmp	r3, #12
   193ee:	dd01      	ble.n	193f4 <bt_dev_show_info+0x208>
   193f0:	f8c4 801c 	str.w	r8, [r4, #28]
   193f4:	2b10      	cmp	r3, #16
   193f6:	dd00      	ble.n	193fa <bt_dev_show_info+0x20e>
   193f8:	6221      	str	r1, [r4, #32]
   193fa:	2b14      	cmp	r3, #20
   193fc:	dd01      	ble.n	19402 <bt_dev_show_info+0x216>
   193fe:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
   19402:	f104 0328 	add.w	r3, r4, #40	; 0x28
   19406:	2100      	movs	r1, #0
   19408:	e00a      	b.n	19420 <bt_dev_show_info+0x234>
   1940a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1940e:	e7df      	b.n	193d0 <bt_dev_show_info+0x1e4>
   19410:	f101 0008 	add.w	r0, r1, #8
   19414:	4438      	add	r0, r7
   19416:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1941a:	f803 0b01 	strb.w	r0, [r3], #1
   1941e:	3101      	adds	r1, #1
   19420:	2901      	cmp	r1, #1
   19422:	d9f5      	bls.n	19410 <bt_dev_show_info+0x224>
   19424:	2e19      	cmp	r6, #25
   19426:	dd4b      	ble.n	194c0 <bt_dev_show_info+0x2d4>
   19428:	231a      	movs	r3, #26
   1942a:	b142      	cbz	r2, 1943e <bt_dev_show_info+0x252>
   1942c:	2106      	movs	r1, #6
   1942e:	7139      	strb	r1, [r7, #4]
   19430:	2100      	movs	r1, #0
   19432:	7179      	strb	r1, [r7, #5]
   19434:	71b9      	strb	r1, [r7, #6]
   19436:	2101      	movs	r1, #1
   19438:	71f9      	strb	r1, [r7, #7]
   1943a:	6878      	ldr	r0, [r7, #4]
   1943c:	6120      	str	r0, [r4, #16]
   1943e:	2100      	movs	r1, #0
   19440:	f36f 0100 	bfc	r1, #0, #1
   19444:	f36f 0141 	bfc	r1, #1, #1
   19448:	f36f 0182 	bfc	r1, #2, #1
   1944c:	f36f 01c5 	bfc	r1, #3, #3
   19450:	2003      	movs	r0, #3
   19452:	f360 1188 	bfi	r1, r0, #6, #3
   19456:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1945a:	f363 2153 	bfi	r1, r3, #9, #11
   1945e:	f36f 511f 	bfc	r1, #20, #12
   19462:	2300      	movs	r3, #0
   19464:	481d      	ldr	r0, [pc, #116]	; (194dc <bt_dev_show_info+0x2f0>)
   19466:	f7fa fe49 	bl	140fc <z_impl_z_log_msg_static_create>
   1946a:	46ad      	mov	sp, r5
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   1946c:	4c17      	ldr	r4, [pc, #92]	; (194cc <bt_dev_show_info+0x2e0>)
   1946e:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   19472:	4630      	mov	r0, r6
   19474:	f7ff fd66 	bl	18f44 <ver_str>
   19478:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1947c:	2300      	movs	r3, #0
   1947e:	713b      	strb	r3, [r7, #4]
   19480:	2302      	movs	r3, #2
   19482:	717b      	strb	r3, [r7, #5]
   19484:	b08a      	sub	sp, #40	; 0x28
   19486:	466c      	mov	r4, sp
   19488:	f114 0210 	adds.w	r2, r4, #16
   1948c:	d01b      	beq.n	194c6 <bt_dev_show_info+0x2da>
   1948e:	2516      	movs	r5, #22
   19490:	b11a      	cbz	r2, 1949a <bt_dev_show_info+0x2ae>
   19492:	2d04      	cmp	r5, #4
   19494:	dd01      	ble.n	1949a <bt_dev_show_info+0x2ae>
   19496:	4b14      	ldr	r3, [pc, #80]	; (194e8 <bt_dev_show_info+0x2fc>)
   19498:	6163      	str	r3, [r4, #20]
   1949a:	2300      	movs	r3, #0
   1949c:	703b      	strb	r3, [r7, #0]
   1949e:	2302      	movs	r3, #2
   194a0:	707b      	strb	r3, [r7, #1]
   194a2:	b36a      	cbz	r2, 19500 <bt_dev_show_info+0x314>
   194a4:	462b      	mov	r3, r5
   194a6:	2d08      	cmp	r5, #8
   194a8:	dd00      	ble.n	194ac <bt_dev_show_info+0x2c0>
   194aa:	61a0      	str	r0, [r4, #24]
   194ac:	2b0c      	cmp	r3, #12
   194ae:	dd00      	ble.n	194b2 <bt_dev_show_info+0x2c6>
   194b0:	61e6      	str	r6, [r4, #28]
   194b2:	2b10      	cmp	r3, #16
   194b4:	dd00      	ble.n	194b8 <bt_dev_show_info+0x2cc>
   194b6:	6221      	str	r1, [r4, #32]
   194b8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   194bc:	2100      	movs	r1, #0
   194be:	e01d      	b.n	194fc <bt_dev_show_info+0x310>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   194c0:	f06f 031b 	mvn.w	r3, #27
   194c4:	e7b1      	b.n	1942a <bt_dev_show_info+0x23e>
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   194c6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   194ca:	e7e1      	b.n	19490 <bt_dev_show_info+0x2a4>
   194cc:	20000438 	.word	0x20000438
   194d0:	000335c4 	.word	0x000335c4
   194d4:	000335c8 	.word	0x000335c8
   194d8:	00032680 	.word	0x00032680
   194dc:	00031cfc 	.word	0x00031cfc
   194e0:	000335d8 	.word	0x000335d8
   194e4:	000335ec 	.word	0x000335ec
   194e8:	0003362c 	.word	0x0003362c
   194ec:	f101 0008 	add.w	r0, r1, #8
   194f0:	4438      	add	r0, r7
   194f2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   194f6:	f803 0b01 	strb.w	r0, [r3], #1
   194fa:	3101      	adds	r1, #1
   194fc:	2901      	cmp	r1, #1
   194fe:	d9f5      	bls.n	194ec <bt_dev_show_info+0x300>
   19500:	2d15      	cmp	r5, #21
   19502:	dd24      	ble.n	1954e <bt_dev_show_info+0x362>
   19504:	2316      	movs	r3, #22
   19506:	b142      	cbz	r2, 1951a <bt_dev_show_info+0x32e>
   19508:	2105      	movs	r1, #5
   1950a:	7139      	strb	r1, [r7, #4]
   1950c:	2100      	movs	r1, #0
   1950e:	7179      	strb	r1, [r7, #5]
   19510:	71b9      	strb	r1, [r7, #6]
   19512:	2101      	movs	r1, #1
   19514:	71f9      	strb	r1, [r7, #7]
   19516:	6878      	ldr	r0, [r7, #4]
   19518:	6120      	str	r0, [r4, #16]
   1951a:	2100      	movs	r1, #0
   1951c:	f36f 0100 	bfc	r1, #0, #1
   19520:	f36f 0141 	bfc	r1, #1, #1
   19524:	f36f 0182 	bfc	r1, #2, #1
   19528:	f36f 01c5 	bfc	r1, #3, #3
   1952c:	2003      	movs	r0, #3
   1952e:	f360 1188 	bfi	r1, r0, #6, #3
   19532:	f3c3 030a 	ubfx	r3, r3, #0, #11
   19536:	f363 2153 	bfi	r1, r3, #9, #11
   1953a:	f36f 511f 	bfc	r1, #20, #12
   1953e:	2300      	movs	r3, #0
   19540:	4804      	ldr	r0, [pc, #16]	; (19554 <bt_dev_show_info+0x368>)
   19542:	f7fa fddb 	bl	140fc <z_impl_z_log_msg_static_create>
}
   19546:	3708      	adds	r7, #8
   19548:	46bd      	mov	sp, r7
   1954a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   1954e:	f06f 031b 	mvn.w	r3, #27
   19552:	e7d8      	b.n	19506 <bt_dev_show_info+0x31a>
   19554:	00031cfc 	.word	0x00031cfc

00019558 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   19558:	2801      	cmp	r0, #1
   1955a:	d001      	beq.n	19560 <find_pending_connect+0x8>
	return NULL;
   1955c:	2000      	movs	r0, #0
}
   1955e:	4770      	bx	lr
{
   19560:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   19562:	2205      	movs	r2, #5
   19564:	4b07      	ldr	r3, [pc, #28]	; (19584 <find_pending_connect+0x2c>)
   19566:	f893 006f 	ldrb.w	r0, [r3, #111]	; 0x6f
   1956a:	f004 f9b7 	bl	1d8dc <bt_conn_lookup_state_le>
		if (!conn) {
   1956e:	b100      	cbz	r0, 19572 <find_pending_connect+0x1a>
}
   19570:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   19572:	2204      	movs	r2, #4
   19574:	4904      	ldr	r1, [pc, #16]	; (19588 <find_pending_connect+0x30>)
   19576:	4b03      	ldr	r3, [pc, #12]	; (19584 <find_pending_connect+0x2c>)
   19578:	f893 006f 	ldrb.w	r0, [r3, #111]	; 0x6f
   1957c:	f004 f9ae 	bl	1d8dc <bt_conn_lookup_state_le>
		return conn;
   19580:	e7f6      	b.n	19570 <find_pending_connect+0x18>
   19582:	bf00      	nop
   19584:	20000438 	.word	0x20000438
   19588:	00033498 	.word	0x00033498

0001958c <le_conn_complete_adv_timeout>:
{
   1958c:	b510      	push	{r4, lr}
   1958e:	b088      	sub	sp, #32
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19590:	f002 ffee 	bl	1c570 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   19594:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19596:	f3bf 8f5b 	dmb	ish
   1959a:	e850 3f00 	ldrex	r3, [r0]
   1959e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   195a2:	e840 3200 	strex	r2, r3, [r0]
   195a6:	2a00      	cmp	r2, #0
   195a8:	d1f7      	bne.n	1959a <le_conn_complete_adv_timeout+0xe>
   195aa:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   195ae:	2100      	movs	r1, #0
   195b0:	2001      	movs	r0, #1
   195b2:	f7ff ffd1 	bl	19558 <find_pending_connect>
		if (!conn) {
   195b6:	4604      	mov	r4, r0
   195b8:	b148      	cbz	r0, 195ce <le_conn_complete_adv_timeout+0x42>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   195ba:	233c      	movs	r3, #60	; 0x3c
   195bc:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   195be:	2100      	movs	r1, #0
   195c0:	f003 feb0 	bl	1d324 <bt_conn_set_state>
		bt_conn_unref(conn);
   195c4:	4620      	mov	r0, r4
   195c6:	f013 ff30 	bl	2d42a <bt_conn_unref>
}
   195ca:	b008      	add	sp, #32
   195cc:	bd10      	pop	{r4, pc}
			LOG_ERR("No pending peripheral connection");
   195ce:	4b12      	ldr	r3, [pc, #72]	; (19618 <le_conn_complete_adv_timeout+0x8c>)
   195d0:	9307      	str	r3, [sp, #28]
   195d2:	2302      	movs	r3, #2
   195d4:	f88d 3004 	strb.w	r3, [sp, #4]
   195d8:	2300      	movs	r3, #0
   195da:	f88d 3005 	strb.w	r3, [sp, #5]
   195de:	f88d 3006 	strb.w	r3, [sp, #6]
   195e2:	f88d 3007 	strb.w	r3, [sp, #7]
   195e6:	9a01      	ldr	r2, [sp, #4]
   195e8:	9206      	str	r2, [sp, #24]
   195ea:	4619      	mov	r1, r3
   195ec:	f363 0100 	bfi	r1, r3, #0, #1
   195f0:	f363 0141 	bfi	r1, r3, #1, #1
   195f4:	f363 0182 	bfi	r1, r3, #2, #1
   195f8:	f363 01c5 	bfi	r1, r3, #3, #3
   195fc:	2201      	movs	r2, #1
   195fe:	f362 1188 	bfi	r1, r2, #6, #3
   19602:	2208      	movs	r2, #8
   19604:	f362 2153 	bfi	r1, r2, #9, #11
   19608:	f363 511f 	bfi	r1, r3, #20, #12
   1960c:	aa06      	add	r2, sp, #24
   1960e:	4803      	ldr	r0, [pc, #12]	; (1961c <le_conn_complete_adv_timeout+0x90>)
   19610:	f7fa fd74 	bl	140fc <z_impl_z_log_msg_static_create>
			return;
   19614:	e7d9      	b.n	195ca <le_conn_complete_adv_timeout+0x3e>
   19616:	bf00      	nop
   19618:	00033654 	.word	0x00033654
   1961c:	00031cfc 	.word	0x00031cfc

00019620 <hci_disconn_complete>:
{
   19620:	b5f0      	push	{r4, r5, r6, r7, lr}
   19622:	b083      	sub	sp, #12
   19624:	af00      	add	r7, sp, #0
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   19626:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19628:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   1962c:	7823      	ldrb	r3, [r4, #0]
   1962e:	b113      	cbz	r3, 19636 <hci_disconn_complete+0x16>
}
   19630:	370c      	adds	r7, #12
   19632:	46bd      	mov	sp, r7
   19634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_handle(handle);
   19636:	4630      	mov	r0, r6
   19638:	f003 fe6a 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   1963c:	4605      	mov	r5, r0
   1963e:	b158      	cbz	r0, 19658 <hci_disconn_complete+0x38>
	conn->err = evt->reason;
   19640:	78e3      	ldrb	r3, [r4, #3]
   19642:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19644:	2100      	movs	r1, #0
   19646:	f003 fe6d 	bl	1d324 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1964a:	78ab      	ldrb	r3, [r5, #2]
   1964c:	2b01      	cmp	r3, #1
   1964e:	d03d      	beq.n	196cc <hci_disconn_complete+0xac>
		bt_conn_unref(conn);
   19650:	4628      	mov	r0, r5
   19652:	f013 feea 	bl	2d42a <bt_conn_unref>
		return;
   19656:	e7eb      	b.n	19630 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   19658:	466d      	mov	r5, sp
   1965a:	b088      	sub	sp, #32
   1965c:	466b      	mov	r3, sp
   1965e:	f113 0210 	adds.w	r2, r3, #16
   19662:	d02d      	beq.n	196c0 <hci_disconn_complete+0xa0>
   19664:	210c      	movs	r1, #12
   19666:	b13a      	cbz	r2, 19678 <hci_disconn_complete+0x58>
   19668:	4608      	mov	r0, r1
   1966a:	2904      	cmp	r1, #4
   1966c:	dd01      	ble.n	19672 <hci_disconn_complete+0x52>
   1966e:	4c19      	ldr	r4, [pc, #100]	; (196d4 <hci_disconn_complete+0xb4>)
   19670:	615c      	str	r4, [r3, #20]
   19672:	2808      	cmp	r0, #8
   19674:	dd00      	ble.n	19678 <hci_disconn_complete+0x58>
   19676:	619e      	str	r6, [r3, #24]
   19678:	290b      	cmp	r1, #11
   1967a:	dd24      	ble.n	196c6 <hci_disconn_complete+0xa6>
   1967c:	240c      	movs	r4, #12
   1967e:	b13a      	cbz	r2, 19690 <hci_disconn_complete+0x70>
   19680:	2103      	movs	r1, #3
   19682:	7139      	strb	r1, [r7, #4]
   19684:	2100      	movs	r1, #0
   19686:	7179      	strb	r1, [r7, #5]
   19688:	71b9      	strb	r1, [r7, #6]
   1968a:	71f9      	strb	r1, [r7, #7]
   1968c:	6878      	ldr	r0, [r7, #4]
   1968e:	6118      	str	r0, [r3, #16]
   19690:	2100      	movs	r1, #0
   19692:	f36f 0100 	bfc	r1, #0, #1
   19696:	f36f 0141 	bfc	r1, #1, #1
   1969a:	f36f 0182 	bfc	r1, #2, #1
   1969e:	f36f 01c5 	bfc	r1, #3, #3
   196a2:	2301      	movs	r3, #1
   196a4:	f363 1188 	bfi	r1, r3, #6, #3
   196a8:	f3c4 030a 	ubfx	r3, r4, #0, #11
   196ac:	f363 2153 	bfi	r1, r3, #9, #11
   196b0:	f36f 511f 	bfc	r1, #20, #12
   196b4:	2300      	movs	r3, #0
   196b6:	4808      	ldr	r0, [pc, #32]	; (196d8 <hci_disconn_complete+0xb8>)
   196b8:	f7fa fd20 	bl	140fc <z_impl_z_log_msg_static_create>
   196bc:	46ad      	mov	sp, r5
		return;
   196be:	e7b7      	b.n	19630 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   196c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   196c4:	e7cf      	b.n	19666 <hci_disconn_complete+0x46>
   196c6:	f06f 041b 	mvn.w	r4, #27
   196ca:	e7d8      	b.n	1967e <hci_disconn_complete+0x5e>
	bt_conn_unref(conn);
   196cc:	4628      	mov	r0, r5
   196ce:	f013 feac 	bl	2d42a <bt_conn_unref>
   196d2:	e7ad      	b.n	19630 <hci_disconn_complete+0x10>
   196d4:	00033678 	.word	0x00033678
   196d8:	00031cfc 	.word	0x00031cfc

000196dc <le_phy_update_complete>:
{
   196dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   196de:	b083      	sub	sp, #12
   196e0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   196e2:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   196e4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   196e8:	4620      	mov	r0, r4
   196ea:	f003 fe11 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   196ee:	b120      	cbz	r0, 196fa <le_phy_update_complete+0x1e>
	bt_conn_unref(conn);
   196f0:	f013 fe9b 	bl	2d42a <bt_conn_unref>
}
   196f4:	370c      	adds	r7, #12
   196f6:	46bd      	mov	sp, r7
   196f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   196fa:	466d      	mov	r5, sp
   196fc:	b088      	sub	sp, #32
   196fe:	466b      	mov	r3, sp
   19700:	f113 0210 	adds.w	r2, r3, #16
   19704:	d02d      	beq.n	19762 <le_phy_update_complete+0x86>
   19706:	210c      	movs	r1, #12
   19708:	b13a      	cbz	r2, 1971a <le_phy_update_complete+0x3e>
   1970a:	4608      	mov	r0, r1
   1970c:	2904      	cmp	r1, #4
   1970e:	dd01      	ble.n	19714 <le_phy_update_complete+0x38>
   19710:	4e17      	ldr	r6, [pc, #92]	; (19770 <le_phy_update_complete+0x94>)
   19712:	615e      	str	r6, [r3, #20]
   19714:	2808      	cmp	r0, #8
   19716:	dd00      	ble.n	1971a <le_phy_update_complete+0x3e>
   19718:	619c      	str	r4, [r3, #24]
   1971a:	290b      	cmp	r1, #11
   1971c:	dd24      	ble.n	19768 <le_phy_update_complete+0x8c>
   1971e:	240c      	movs	r4, #12
   19720:	b13a      	cbz	r2, 19732 <le_phy_update_complete+0x56>
   19722:	2103      	movs	r1, #3
   19724:	7139      	strb	r1, [r7, #4]
   19726:	2100      	movs	r1, #0
   19728:	7179      	strb	r1, [r7, #5]
   1972a:	71b9      	strb	r1, [r7, #6]
   1972c:	71f9      	strb	r1, [r7, #7]
   1972e:	6878      	ldr	r0, [r7, #4]
   19730:	6118      	str	r0, [r3, #16]
   19732:	2100      	movs	r1, #0
   19734:	f36f 0100 	bfc	r1, #0, #1
   19738:	f36f 0141 	bfc	r1, #1, #1
   1973c:	f36f 0182 	bfc	r1, #2, #1
   19740:	f36f 01c5 	bfc	r1, #3, #3
   19744:	2301      	movs	r3, #1
   19746:	f363 1188 	bfi	r1, r3, #6, #3
   1974a:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1974e:	f363 2153 	bfi	r1, r3, #9, #11
   19752:	f36f 511f 	bfc	r1, #20, #12
   19756:	2300      	movs	r3, #0
   19758:	4806      	ldr	r0, [pc, #24]	; (19774 <le_phy_update_complete+0x98>)
   1975a:	f7fa fccf 	bl	140fc <z_impl_z_log_msg_static_create>
   1975e:	46ad      	mov	sp, r5
		return;
   19760:	e7c8      	b.n	196f4 <le_phy_update_complete+0x18>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19766:	e7cf      	b.n	19708 <le_phy_update_complete+0x2c>
   19768:	f06f 041b 	mvn.w	r4, #27
   1976c:	e7d8      	b.n	19720 <le_phy_update_complete+0x44>
   1976e:	bf00      	nop
   19770:	000336a0 	.word	0x000336a0
   19774:	00031cfc 	.word	0x00031cfc

00019778 <le_data_len_change>:
{
   19778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1977a:	b083      	sub	sp, #12
   1977c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1977e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19780:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   19782:	4620      	mov	r0, r4
   19784:	f003 fdc4 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   19788:	b120      	cbz	r0, 19794 <le_data_len_change+0x1c>
	bt_conn_unref(conn);
   1978a:	f013 fe4e 	bl	2d42a <bt_conn_unref>
}
   1978e:	370c      	adds	r7, #12
   19790:	46bd      	mov	sp, r7
   19792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19794:	466d      	mov	r5, sp
   19796:	b088      	sub	sp, #32
   19798:	466b      	mov	r3, sp
   1979a:	f113 0210 	adds.w	r2, r3, #16
   1979e:	d02d      	beq.n	197fc <le_data_len_change+0x84>
   197a0:	210c      	movs	r1, #12
   197a2:	b13a      	cbz	r2, 197b4 <le_data_len_change+0x3c>
   197a4:	4608      	mov	r0, r1
   197a6:	2904      	cmp	r1, #4
   197a8:	dd01      	ble.n	197ae <le_data_len_change+0x36>
   197aa:	4e17      	ldr	r6, [pc, #92]	; (19808 <le_data_len_change+0x90>)
   197ac:	615e      	str	r6, [r3, #20]
   197ae:	2808      	cmp	r0, #8
   197b0:	dd00      	ble.n	197b4 <le_data_len_change+0x3c>
   197b2:	619c      	str	r4, [r3, #24]
   197b4:	290b      	cmp	r1, #11
   197b6:	dd24      	ble.n	19802 <le_data_len_change+0x8a>
   197b8:	240c      	movs	r4, #12
   197ba:	b13a      	cbz	r2, 197cc <le_data_len_change+0x54>
   197bc:	2103      	movs	r1, #3
   197be:	7139      	strb	r1, [r7, #4]
   197c0:	2100      	movs	r1, #0
   197c2:	7179      	strb	r1, [r7, #5]
   197c4:	71b9      	strb	r1, [r7, #6]
   197c6:	71f9      	strb	r1, [r7, #7]
   197c8:	6878      	ldr	r0, [r7, #4]
   197ca:	6118      	str	r0, [r3, #16]
   197cc:	2100      	movs	r1, #0
   197ce:	f36f 0100 	bfc	r1, #0, #1
   197d2:	f36f 0141 	bfc	r1, #1, #1
   197d6:	f36f 0182 	bfc	r1, #2, #1
   197da:	f36f 01c5 	bfc	r1, #3, #3
   197de:	2301      	movs	r3, #1
   197e0:	f363 1188 	bfi	r1, r3, #6, #3
   197e4:	f3c4 030a 	ubfx	r3, r4, #0, #11
   197e8:	f363 2153 	bfi	r1, r3, #9, #11
   197ec:	f36f 511f 	bfc	r1, #20, #12
   197f0:	2300      	movs	r3, #0
   197f2:	4806      	ldr	r0, [pc, #24]	; (1980c <le_data_len_change+0x94>)
   197f4:	f7fa fc82 	bl	140fc <z_impl_z_log_msg_static_create>
   197f8:	46ad      	mov	sp, r5
		return;
   197fa:	e7c8      	b.n	1978e <le_data_len_change+0x16>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   197fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19800:	e7cf      	b.n	197a2 <le_data_len_change+0x2a>
   19802:	f06f 041b 	mvn.w	r4, #27
   19806:	e7d8      	b.n	197ba <le_data_len_change+0x42>
   19808:	000336a0 	.word	0x000336a0
   1980c:	00031cfc 	.word	0x00031cfc

00019810 <hci_num_completed_packets>:
{
   19810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19814:	b089      	sub	sp, #36	; 0x24
   19816:	af00      	add	r7, sp, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   19818:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   1981c:	f899 4000 	ldrb.w	r4, [r9]
   19820:	00a3      	lsls	r3, r4, #2
   19822:	3301      	adds	r3, #1
   19824:	8a01      	ldrh	r1, [r0, #16]
   19826:	428b      	cmp	r3, r1
   19828:	d801      	bhi.n	1982e <hci_num_completed_packets+0x1e>
	for (i = 0; i < evt->num_handles; i++) {
   1982a:	2600      	movs	r6, #0
   1982c:	e0e5      	b.n	199fa <hci_num_completed_packets+0x1ea>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   1982e:	466e      	mov	r6, sp
   19830:	b08a      	sub	sp, #40	; 0x28
   19832:	466d      	mov	r5, sp
   19834:	f115 0210 	adds.w	r2, r5, #16
   19838:	d018      	beq.n	1986c <hci_num_completed_packets+0x5c>
   1983a:	2014      	movs	r0, #20
   1983c:	b192      	cbz	r2, 19864 <hci_num_completed_packets+0x54>
   1983e:	4684      	mov	ip, r0
   19840:	2804      	cmp	r0, #4
   19842:	dd03      	ble.n	1984c <hci_num_completed_packets+0x3c>
   19844:	f8df e20c 	ldr.w	lr, [pc, #524]	; 19a54 <hci_num_completed_packets+0x244>
   19848:	f8c5 e014 	str.w	lr, [r5, #20]
   1984c:	f1bc 0f08 	cmp.w	ip, #8
   19850:	dd00      	ble.n	19854 <hci_num_completed_packets+0x44>
   19852:	61ac      	str	r4, [r5, #24]
   19854:	f1bc 0f0c 	cmp.w	ip, #12
   19858:	dd00      	ble.n	1985c <hci_num_completed_packets+0x4c>
   1985a:	61eb      	str	r3, [r5, #28]
   1985c:	f1bc 0f10 	cmp.w	ip, #16
   19860:	dd07      	ble.n	19872 <hci_num_completed_packets+0x62>
   19862:	6229      	str	r1, [r5, #32]
   19864:	2813      	cmp	r0, #19
   19866:	dd2a      	ble.n	198be <hci_num_completed_packets+0xae>
   19868:	2314      	movs	r3, #20
   1986a:	e004      	b.n	19876 <hci_num_completed_packets+0x66>
   1986c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19870:	e7e4      	b.n	1983c <hci_num_completed_packets+0x2c>
   19872:	f06f 031b 	mvn.w	r3, #27
   19876:	b13a      	cbz	r2, 19888 <hci_num_completed_packets+0x78>
   19878:	2105      	movs	r1, #5
   1987a:	7139      	strb	r1, [r7, #4]
   1987c:	2100      	movs	r1, #0
   1987e:	7179      	strb	r1, [r7, #5]
   19880:	71b9      	strb	r1, [r7, #6]
   19882:	71f9      	strb	r1, [r7, #7]
   19884:	6878      	ldr	r0, [r7, #4]
   19886:	6128      	str	r0, [r5, #16]
   19888:	2100      	movs	r1, #0
   1988a:	f36f 0100 	bfc	r1, #0, #1
   1988e:	f36f 0141 	bfc	r1, #1, #1
   19892:	f36f 0182 	bfc	r1, #2, #1
   19896:	f36f 01c5 	bfc	r1, #3, #3
   1989a:	2001      	movs	r0, #1
   1989c:	f360 1188 	bfi	r1, r0, #6, #3
   198a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
   198a4:	f363 2153 	bfi	r1, r3, #9, #11
   198a8:	f36f 511f 	bfc	r1, #20, #12
   198ac:	2300      	movs	r3, #0
   198ae:	486a      	ldr	r0, [pc, #424]	; (19a58 <hci_num_completed_packets+0x248>)
   198b0:	f7fa fc24 	bl	140fc <z_impl_z_log_msg_static_create>
   198b4:	46b5      	mov	sp, r6
}
   198b6:	3724      	adds	r7, #36	; 0x24
   198b8:	46bd      	mov	sp, r7
   198ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   198be:	f06f 031b 	mvn.w	r3, #27
   198c2:	e7d8      	b.n	19876 <hci_num_completed_packets+0x66>
			LOG_ERR("No connection for handle %u", handle);
   198c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   198c8:	e0b0      	b.n	19a2c <hci_num_completed_packets+0x21c>
   198ca:	f06f 011b 	mvn.w	r1, #27
   198ce:	b13a      	cbz	r2, 198e0 <hci_num_completed_packets+0xd0>
   198d0:	2003      	movs	r0, #3
   198d2:	7138      	strb	r0, [r7, #4]
   198d4:	2000      	movs	r0, #0
   198d6:	7178      	strb	r0, [r7, #5]
   198d8:	71b8      	strb	r0, [r7, #6]
   198da:	71f8      	strb	r0, [r7, #7]
   198dc:	6878      	ldr	r0, [r7, #4]
   198de:	6118      	str	r0, [r3, #16]
   198e0:	f36f 0800 	bfc	r8, #0, #1
   198e4:	f36f 0841 	bfc	r8, #1, #1
   198e8:	f36f 0882 	bfc	r8, #2, #1
   198ec:	f36f 08c5 	bfc	r8, #3, #3
   198f0:	2301      	movs	r3, #1
   198f2:	f363 1888 	bfi	r8, r3, #6, #3
   198f6:	f3c1 010a 	ubfx	r1, r1, #0, #11
   198fa:	f361 2853 	bfi	r8, r1, #9, #11
   198fe:	f36f 581f 	bfc	r8, #20, #12
   19902:	2300      	movs	r3, #0
   19904:	4641      	mov	r1, r8
   19906:	4854      	ldr	r0, [pc, #336]	; (19a58 <hci_num_completed_packets+0x248>)
   19908:	f7fa fbf8 	bl	140fc <z_impl_z_log_msg_static_create>
   1990c:	46a5      	mov	sp, r4
			continue;
   1990e:	e073      	b.n	199f8 <hci_num_completed_packets+0x1e8>
			LOG_ERR("No connection for handle %u", handle);
   19910:	f06f 011b 	mvn.w	r1, #27
   19914:	e7db      	b.n	198ce <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   19916:	3b01      	subs	r3, #1
   19918:	61e3      	str	r3, [r4, #28]
   1991a:	f382 8811 	msr	BASEPRI, r2
   1991e:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   19922:	4620      	mov	r0, r4
   19924:	f003 f9a6 	bl	1cc74 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   19928:	f00c fca0 	bl	2626c <z_impl_k_sem_give>
				continue;
   1992c:	e024      	b.n	19978 <hci_num_completed_packets+0x168>
   1992e:	f382 8811 	msr	BASEPRI, r2
   19932:	f3bf 8f6f 	isb	sy
			if (!node) {
   19936:	2b00      	cmp	r3, #0
   19938:	d03b      	beq.n	199b2 <hci_num_completed_packets+0x1a2>
	__asm__ volatile(
   1993a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1993e:	f3ef 8211 	mrs	r2, BASEPRI
   19942:	f381 8812 	msr	BASEPRI_MAX, r1
   19946:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1994a:	68d9      	ldr	r1, [r3, #12]
   1994c:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   1994e:	2100      	movs	r1, #0
   19950:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   19952:	6019      	str	r1, [r3, #0]
	return list->tail;
   19954:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   19956:	2900      	cmp	r1, #0
   19958:	d079      	beq.n	19a4e <hci_num_completed_packets+0x23e>
	parent->next = child;
   1995a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1995c:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   1995e:	f382 8811 	msr	BASEPRI, r2
   19962:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   19966:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1996a:	f00c fe25 	bl	265b8 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   1996e:	4620      	mov	r0, r4
   19970:	f003 f980 	bl	1cc74 <bt_conn_get_pkts>
   19974:	f00c fc7a 	bl	2626c <z_impl_k_sem_give>
			LOG_ERR("No connection for handle %u", handle);
   19978:	46ab      	mov	fp, r5
		while (count--) {
   1997a:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   1997e:	b2ad      	uxth	r5, r5
   19980:	f1bb 0f00 	cmp.w	fp, #0
   19984:	d035      	beq.n	199f2 <hci_num_completed_packets+0x1e2>
	__asm__ volatile(
   19986:	f04f 0240 	mov.w	r2, #64	; 0x40
   1998a:	f3ef 8311 	mrs	r3, BASEPRI
   1998e:	f382 8812 	msr	BASEPRI_MAX, r2
   19992:	f3bf 8f6f 	isb	sy
   19996:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   19998:	69e3      	ldr	r3, [r4, #28]
   1999a:	2b00      	cmp	r3, #0
   1999c:	d1bb      	bne.n	19916 <hci_num_completed_packets+0x106>
	return list->head;
   1999e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   199a0:	2b00      	cmp	r3, #0
   199a2:	d0c4      	beq.n	1992e <hci_num_completed_packets+0x11e>
	return node->next;
   199a4:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   199a6:	6161      	str	r1, [r4, #20]
	return list->tail;
   199a8:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   199aa:	4298      	cmp	r0, r3
   199ac:	d1bf      	bne.n	1992e <hci_num_completed_packets+0x11e>
	list->tail = node;
   199ae:	61a1      	str	r1, [r4, #24]
}
   199b0:	e7bd      	b.n	1992e <hci_num_completed_packets+0x11e>
				LOG_ERR("packets count mismatch");
   199b2:	4b2a      	ldr	r3, [pc, #168]	; (19a5c <hci_num_completed_packets+0x24c>)
   199b4:	61fb      	str	r3, [r7, #28]
   199b6:	2302      	movs	r3, #2
   199b8:	713b      	strb	r3, [r7, #4]
   199ba:	2300      	movs	r3, #0
   199bc:	717b      	strb	r3, [r7, #5]
   199be:	71bb      	strb	r3, [r7, #6]
   199c0:	71fb      	strb	r3, [r7, #7]
   199c2:	687a      	ldr	r2, [r7, #4]
   199c4:	61ba      	str	r2, [r7, #24]
   199c6:	f363 0a00 	bfi	sl, r3, #0, #1
   199ca:	f363 0a41 	bfi	sl, r3, #1, #1
   199ce:	f363 0a82 	bfi	sl, r3, #2, #1
   199d2:	f363 0ac5 	bfi	sl, r3, #3, #3
   199d6:	2201      	movs	r2, #1
   199d8:	f362 1a88 	bfi	sl, r2, #6, #3
   199dc:	2208      	movs	r2, #8
   199de:	f362 2a53 	bfi	sl, r2, #9, #11
   199e2:	f363 5a1f 	bfi	sl, r3, #20, #12
   199e6:	f107 0218 	add.w	r2, r7, #24
   199ea:	4651      	mov	r1, sl
   199ec:	481a      	ldr	r0, [pc, #104]	; (19a58 <hci_num_completed_packets+0x248>)
   199ee:	f7fa fb85 	bl	140fc <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   199f2:	4620      	mov	r0, r4
   199f4:	f013 fd19 	bl	2d42a <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   199f8:	3601      	adds	r6, #1
   199fa:	f899 3000 	ldrb.w	r3, [r9]
   199fe:	429e      	cmp	r6, r3
   19a00:	f6bf af59 	bge.w	198b6 <hci_num_completed_packets+0xa6>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   19a04:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   19a08:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   19a0c:	f8b3 b003 	ldrh.w	fp, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   19a10:	4628      	mov	r0, r5
   19a12:	f003 fc7d 	bl	1d310 <bt_conn_lookup_handle>
		if (!conn) {
   19a16:	4604      	mov	r4, r0
   19a18:	2800      	cmp	r0, #0
   19a1a:	d1ae      	bne.n	1997a <hci_num_completed_packets+0x16a>
			LOG_ERR("No connection for handle %u", handle);
   19a1c:	466c      	mov	r4, sp
   19a1e:	b088      	sub	sp, #32
   19a20:	466b      	mov	r3, sp
   19a22:	f113 0210 	adds.w	r2, r3, #16
   19a26:	f43f af4d 	beq.w	198c4 <hci_num_completed_packets+0xb4>
   19a2a:	210c      	movs	r1, #12
   19a2c:	b152      	cbz	r2, 19a44 <hci_num_completed_packets+0x234>
   19a2e:	4608      	mov	r0, r1
   19a30:	2904      	cmp	r1, #4
   19a32:	dd03      	ble.n	19a3c <hci_num_completed_packets+0x22c>
   19a34:	f8df c028 	ldr.w	ip, [pc, #40]	; 19a60 <hci_num_completed_packets+0x250>
   19a38:	f8c3 c014 	str.w	ip, [r3, #20]
   19a3c:	2808      	cmp	r0, #8
   19a3e:	f77f af44 	ble.w	198ca <hci_num_completed_packets+0xba>
   19a42:	619d      	str	r5, [r3, #24]
   19a44:	290b      	cmp	r1, #11
   19a46:	f77f af63 	ble.w	19910 <hci_num_completed_packets+0x100>
   19a4a:	210c      	movs	r1, #12
   19a4c:	e73f      	b.n	198ce <hci_num_completed_packets+0xbe>
	list->tail = node;
   19a4e:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   19a50:	6223      	str	r3, [r4, #32]
}
   19a52:	e784      	b.n	1995e <hci_num_completed_packets+0x14e>
   19a54:	000336c4 	.word	0x000336c4
   19a58:	00031cfc 	.word	0x00031cfc
   19a5c:	0003370c 	.word	0x0003370c
   19a60:	000336f0 	.word	0x000336f0

00019a64 <hci_cmd_done>:
{
   19a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a68:	b082      	sub	sp, #8
   19a6a:	af00      	add	r7, sp, #0
   19a6c:	4605      	mov	r5, r0
   19a6e:	460e      	mov	r6, r1
   19a70:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   19a72:	7a90      	ldrb	r0, [r2, #10]
   19a74:	f007 f92c 	bl	20cd0 <net_buf_pool_get>
   19a78:	4b73      	ldr	r3, [pc, #460]	; (19c48 <hci_cmd_done+0x1e4>)
   19a7a:	4283      	cmp	r3, r0
   19a7c:	d04e      	beq.n	19b1c <hci_cmd_done+0xb8>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   19a7e:	f894 800a 	ldrb.w	r8, [r4, #10]
   19a82:	4640      	mov	r0, r8
   19a84:	f007 f924 	bl	20cd0 <net_buf_pool_get>
   19a88:	466e      	mov	r6, sp
   19a8a:	b08a      	sub	sp, #40	; 0x28
   19a8c:	466b      	mov	r3, sp
   19a8e:	f113 0210 	adds.w	r2, r3, #16
   19a92:	d03d      	beq.n	19b10 <hci_cmd_done+0xac>
   19a94:	2418      	movs	r4, #24
   19a96:	b1a2      	cbz	r2, 19ac2 <hci_cmd_done+0x5e>
   19a98:	4621      	mov	r1, r4
   19a9a:	2c04      	cmp	r4, #4
   19a9c:	dd03      	ble.n	19aa6 <hci_cmd_done+0x42>
   19a9e:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 19c4c <hci_cmd_done+0x1e8>
   19aa2:	f8c3 c014 	str.w	ip, [r3, #20]
   19aa6:	2908      	cmp	r1, #8
   19aa8:	dd00      	ble.n	19aac <hci_cmd_done+0x48>
   19aaa:	619d      	str	r5, [r3, #24]
   19aac:	290c      	cmp	r1, #12
   19aae:	dd01      	ble.n	19ab4 <hci_cmd_done+0x50>
   19ab0:	f8c3 801c 	str.w	r8, [r3, #28]
   19ab4:	2910      	cmp	r1, #16
   19ab6:	dd00      	ble.n	19aba <hci_cmd_done+0x56>
   19ab8:	6218      	str	r0, [r3, #32]
   19aba:	2914      	cmp	r1, #20
   19abc:	dd01      	ble.n	19ac2 <hci_cmd_done+0x5e>
   19abe:	4962      	ldr	r1, [pc, #392]	; (19c48 <hci_cmd_done+0x1e4>)
   19ac0:	6259      	str	r1, [r3, #36]	; 0x24
   19ac2:	2c17      	cmp	r4, #23
   19ac4:	dd27      	ble.n	19b16 <hci_cmd_done+0xb2>
   19ac6:	2418      	movs	r4, #24
   19ac8:	b13a      	cbz	r2, 19ada <hci_cmd_done+0x76>
   19aca:	2106      	movs	r1, #6
   19acc:	7139      	strb	r1, [r7, #4]
   19ace:	2100      	movs	r1, #0
   19ad0:	7179      	strb	r1, [r7, #5]
   19ad2:	71b9      	strb	r1, [r7, #6]
   19ad4:	71f9      	strb	r1, [r7, #7]
   19ad6:	6878      	ldr	r0, [r7, #4]
   19ad8:	6118      	str	r0, [r3, #16]
   19ada:	2100      	movs	r1, #0
   19adc:	f36f 0100 	bfc	r1, #0, #1
   19ae0:	f36f 0141 	bfc	r1, #1, #1
   19ae4:	f36f 0182 	bfc	r1, #2, #1
   19ae8:	f36f 01c5 	bfc	r1, #3, #3
   19aec:	2302      	movs	r3, #2
   19aee:	f363 1188 	bfi	r1, r3, #6, #3
   19af2:	f3c4 040a 	ubfx	r4, r4, #0, #11
   19af6:	f364 2153 	bfi	r1, r4, #9, #11
   19afa:	f36f 511f 	bfc	r1, #20, #12
   19afe:	2300      	movs	r3, #0
   19b00:	4853      	ldr	r0, [pc, #332]	; (19c50 <hci_cmd_done+0x1ec>)
   19b02:	f7fa fafb 	bl	140fc <z_impl_z_log_msg_static_create>
   19b06:	46b5      	mov	sp, r6
}
   19b08:	3708      	adds	r7, #8
   19b0a:	46bd      	mov	sp, r7
   19b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   19b10:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   19b14:	e7bf      	b.n	19a96 <hci_cmd_done+0x32>
   19b16:	f06f 041b 	mvn.w	r4, #27
   19b1a:	e7d5      	b.n	19ac8 <hci_cmd_done+0x64>
	if (cmd(buf)->opcode != opcode) {
   19b1c:	4620      	mov	r0, r4
   19b1e:	f015 f90f 	bl	2ed40 <net_buf_id>
   19b22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19b26:	4b4b      	ldr	r3, [pc, #300]	; (19c54 <hci_cmd_done+0x1f0>)
   19b28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   19b2c:	885b      	ldrh	r3, [r3, #2]
   19b2e:	429d      	cmp	r5, r3
   19b30:	d133      	bne.n	19b9a <hci_cmd_done+0x136>
	if (bt_dev.sent_cmd) {
   19b32:	4b49      	ldr	r3, [pc, #292]	; (19c58 <hci_cmd_done+0x1f4>)
   19b34:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   19b38:	b128      	cbz	r0, 19b46 <hci_cmd_done+0xe2>
		net_buf_unref(bt_dev.sent_cmd);
   19b3a:	f015 f9e1 	bl	2ef00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19b3e:	4b46      	ldr	r3, [pc, #280]	; (19c58 <hci_cmd_done+0x1f4>)
   19b40:	2200      	movs	r2, #0
   19b42:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   19b46:	4620      	mov	r0, r4
   19b48:	f015 f8fa 	bl	2ed40 <net_buf_id>
   19b4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19b50:	4b40      	ldr	r3, [pc, #256]	; (19c54 <hci_cmd_done+0x1f0>)
   19b52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   19b56:	685b      	ldr	r3, [r3, #4]
   19b58:	b10b      	cbz	r3, 19b5e <hci_cmd_done+0xfa>
   19b5a:	2e00      	cmp	r6, #0
   19b5c:	d065      	beq.n	19c2a <hci_cmd_done+0x1c6>
	if (cmd(buf)->sync) {
   19b5e:	4620      	mov	r0, r4
   19b60:	f015 f8ee 	bl	2ed40 <net_buf_id>
   19b64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19b68:	4b3a      	ldr	r3, [pc, #232]	; (19c54 <hci_cmd_done+0x1f0>)
   19b6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   19b6e:	689b      	ldr	r3, [r3, #8]
   19b70:	2b00      	cmp	r3, #0
   19b72:	d0c9      	beq.n	19b08 <hci_cmd_done+0xa4>
		cmd(buf)->status = status;
   19b74:	4620      	mov	r0, r4
   19b76:	f015 f8e3 	bl	2ed40 <net_buf_id>
   19b7a:	4d36      	ldr	r5, [pc, #216]	; (19c54 <hci_cmd_done+0x1f0>)
   19b7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19b80:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   19b84:	4620      	mov	r0, r4
   19b86:	f015 f8db 	bl	2ed40 <net_buf_id>
   19b8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19b8e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   19b92:	68a8      	ldr	r0, [r5, #8]
   19b94:	f00c fb6a 	bl	2626c <z_impl_k_sem_give>
}
   19b98:	e7b6      	b.n	19b08 <hci_cmd_done+0xa4>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   19b9a:	4620      	mov	r0, r4
   19b9c:	f015 f8d0 	bl	2ed40 <net_buf_id>
   19ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19ba4:	4b2b      	ldr	r3, [pc, #172]	; (19c54 <hci_cmd_done+0x1f0>)
   19ba6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   19baa:	885c      	ldrh	r4, [r3, #2]
   19bac:	466e      	mov	r6, sp
   19bae:	b088      	sub	sp, #32
   19bb0:	466b      	mov	r3, sp
   19bb2:	f113 0210 	adds.w	r2, r3, #16
   19bb6:	d032      	beq.n	19c1e <hci_cmd_done+0x1ba>
   19bb8:	2110      	movs	r1, #16
   19bba:	b162      	cbz	r2, 19bd6 <hci_cmd_done+0x172>
   19bbc:	4608      	mov	r0, r1
   19bbe:	2904      	cmp	r1, #4
   19bc0:	dd03      	ble.n	19bca <hci_cmd_done+0x166>
   19bc2:	f8df c098 	ldr.w	ip, [pc, #152]	; 19c5c <hci_cmd_done+0x1f8>
   19bc6:	f8c3 c014 	str.w	ip, [r3, #20]
   19bca:	2808      	cmp	r0, #8
   19bcc:	dd00      	ble.n	19bd0 <hci_cmd_done+0x16c>
   19bce:	619d      	str	r5, [r3, #24]
   19bd0:	280c      	cmp	r0, #12
   19bd2:	dd00      	ble.n	19bd6 <hci_cmd_done+0x172>
   19bd4:	61dc      	str	r4, [r3, #28]
   19bd6:	290f      	cmp	r1, #15
   19bd8:	dd24      	ble.n	19c24 <hci_cmd_done+0x1c0>
   19bda:	2410      	movs	r4, #16
   19bdc:	b13a      	cbz	r2, 19bee <hci_cmd_done+0x18a>
   19bde:	2104      	movs	r1, #4
   19be0:	7139      	strb	r1, [r7, #4]
   19be2:	2100      	movs	r1, #0
   19be4:	7179      	strb	r1, [r7, #5]
   19be6:	71b9      	strb	r1, [r7, #6]
   19be8:	71f9      	strb	r1, [r7, #7]
   19bea:	6878      	ldr	r0, [r7, #4]
   19bec:	6118      	str	r0, [r3, #16]
   19bee:	2100      	movs	r1, #0
   19bf0:	f36f 0100 	bfc	r1, #0, #1
   19bf4:	f36f 0141 	bfc	r1, #1, #1
   19bf8:	f36f 0182 	bfc	r1, #2, #1
   19bfc:	f36f 01c5 	bfc	r1, #3, #3
   19c00:	2302      	movs	r3, #2
   19c02:	f363 1188 	bfi	r1, r3, #6, #3
   19c06:	f3c4 030a 	ubfx	r3, r4, #0, #11
   19c0a:	f363 2153 	bfi	r1, r3, #9, #11
   19c0e:	f36f 511f 	bfc	r1, #20, #12
   19c12:	2300      	movs	r3, #0
   19c14:	480e      	ldr	r0, [pc, #56]	; (19c50 <hci_cmd_done+0x1ec>)
   19c16:	f7fa fa71 	bl	140fc <z_impl_z_log_msg_static_create>
   19c1a:	46b5      	mov	sp, r6
		return;
   19c1c:	e774      	b.n	19b08 <hci_cmd_done+0xa4>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   19c1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19c22:	e7ca      	b.n	19bba <hci_cmd_done+0x156>
   19c24:	f06f 041b 	mvn.w	r4, #27
   19c28:	e7d8      	b.n	19bdc <hci_cmd_done+0x178>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   19c2a:	4620      	mov	r0, r4
   19c2c:	f015 f888 	bl	2ed40 <net_buf_id>
   19c30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19c34:	4b07      	ldr	r3, [pc, #28]	; (19c54 <hci_cmd_done+0x1f0>)
   19c36:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   19c3a:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   19c3c:	7a1a      	ldrb	r2, [r3, #8]
   19c3e:	6859      	ldr	r1, [r3, #4]
   19c40:	6818      	ldr	r0, [r3, #0]
   19c42:	f012 ff6f 	bl	2cb24 <atomic_set_bit_to>
   19c46:	e78a      	b.n	19b5e <hci_cmd_done+0xfa>
   19c48:	20000be4 	.word	0x20000be4
   19c4c:	00033724 	.word	0x00033724
   19c50:	00031cfc 	.word	0x00031cfc
   19c54:	20003f40 	.word	0x20003f40
   19c58:	20000438 	.word	0x20000438
   19c5c:	0003375c 	.word	0x0003375c

00019c60 <le_remote_feat_complete>:
{
   19c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c62:	b083      	sub	sp, #12
   19c64:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19c66:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19c68:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   19c6c:	4630      	mov	r0, r6
   19c6e:	f003 fb4f 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   19c72:	b1b0      	cbz	r0, 19ca2 <le_remote_feat_complete+0x42>
   19c74:	4605      	mov	r5, r0
	if (!evt->status) {
   19c76:	7823      	ldrb	r3, [r4, #0]
   19c78:	2b00      	cmp	r3, #0
   19c7a:	d04c      	beq.n	19d16 <le_remote_feat_complete+0xb6>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   19c7c:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19c7e:	f3bf 8f5b 	dmb	ish
   19c82:	e853 1f00 	ldrex	r1, [r3]
   19c86:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
   19c8a:	e843 1200 	strex	r2, r1, [r3]
   19c8e:	2a00      	cmp	r2, #0
   19c90:	d1f7      	bne.n	19c82 <le_remote_feat_complete+0x22>
   19c92:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   19c96:	4628      	mov	r0, r5
   19c98:	f013 fbc7 	bl	2d42a <bt_conn_unref>
}
   19c9c:	370c      	adds	r7, #12
   19c9e:	46bd      	mov	sp, r7
   19ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19ca2:	466d      	mov	r5, sp
   19ca4:	b088      	sub	sp, #32
   19ca6:	466b      	mov	r3, sp
   19ca8:	f113 0210 	adds.w	r2, r3, #16
   19cac:	d02d      	beq.n	19d0a <le_remote_feat_complete+0xaa>
   19cae:	210c      	movs	r1, #12
   19cb0:	b13a      	cbz	r2, 19cc2 <le_remote_feat_complete+0x62>
   19cb2:	4608      	mov	r0, r1
   19cb4:	2904      	cmp	r1, #4
   19cb6:	dd01      	ble.n	19cbc <le_remote_feat_complete+0x5c>
   19cb8:	4c1a      	ldr	r4, [pc, #104]	; (19d24 <le_remote_feat_complete+0xc4>)
   19cba:	615c      	str	r4, [r3, #20]
   19cbc:	2808      	cmp	r0, #8
   19cbe:	dd00      	ble.n	19cc2 <le_remote_feat_complete+0x62>
   19cc0:	619e      	str	r6, [r3, #24]
   19cc2:	290b      	cmp	r1, #11
   19cc4:	dd24      	ble.n	19d10 <le_remote_feat_complete+0xb0>
   19cc6:	240c      	movs	r4, #12
   19cc8:	b13a      	cbz	r2, 19cda <le_remote_feat_complete+0x7a>
   19cca:	2103      	movs	r1, #3
   19ccc:	7139      	strb	r1, [r7, #4]
   19cce:	2100      	movs	r1, #0
   19cd0:	7179      	strb	r1, [r7, #5]
   19cd2:	71b9      	strb	r1, [r7, #6]
   19cd4:	71f9      	strb	r1, [r7, #7]
   19cd6:	6878      	ldr	r0, [r7, #4]
   19cd8:	6118      	str	r0, [r3, #16]
   19cda:	2100      	movs	r1, #0
   19cdc:	f36f 0100 	bfc	r1, #0, #1
   19ce0:	f36f 0141 	bfc	r1, #1, #1
   19ce4:	f36f 0182 	bfc	r1, #2, #1
   19ce8:	f36f 01c5 	bfc	r1, #3, #3
   19cec:	2301      	movs	r3, #1
   19cee:	f363 1188 	bfi	r1, r3, #6, #3
   19cf2:	f3c4 040a 	ubfx	r4, r4, #0, #11
   19cf6:	f364 2153 	bfi	r1, r4, #9, #11
   19cfa:	f36f 511f 	bfc	r1, #20, #12
   19cfe:	2300      	movs	r3, #0
   19d00:	4809      	ldr	r0, [pc, #36]	; (19d28 <le_remote_feat_complete+0xc8>)
   19d02:	f7fa f9fb 	bl	140fc <z_impl_z_log_msg_static_create>
   19d06:	46ad      	mov	sp, r5
		return;
   19d08:	e7c8      	b.n	19c9c <le_remote_feat_complete+0x3c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19d0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19d0e:	e7cf      	b.n	19cb0 <le_remote_feat_complete+0x50>
   19d10:	f06f 041b 	mvn.w	r4, #27
   19d14:	e7d8      	b.n	19cc8 <le_remote_feat_complete+0x68>
		memcpy(conn->le.features, evt->features,
   19d16:	2208      	movs	r2, #8
   19d18:	1ce1      	adds	r1, r4, #3
   19d1a:	30ad      	adds	r0, #173	; 0xad
   19d1c:	f012 fd66 	bl	2c7ec <memcpy>
   19d20:	e7ac      	b.n	19c7c <le_remote_feat_complete+0x1c>
   19d22:	bf00      	nop
   19d24:	000336a0 	.word	0x000336a0
   19d28:	00031cfc 	.word	0x00031cfc

00019d2c <hci_cmd_status>:
{
   19d2c:	b538      	push	{r3, r4, r5, lr}
   19d2e:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   19d30:	2104      	movs	r1, #4
   19d32:	300c      	adds	r0, #12
   19d34:	f015 f957 	bl	2efe6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   19d38:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   19d3a:	4622      	mov	r2, r4
   19d3c:	7801      	ldrb	r1, [r0, #0]
   19d3e:	8840      	ldrh	r0, [r0, #2]
   19d40:	f7ff fe90 	bl	19a64 <hci_cmd_done>
	if (ncmd) {
   19d44:	b905      	cbnz	r5, 19d48 <hci_cmd_status+0x1c>
}
   19d46:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   19d48:	4801      	ldr	r0, [pc, #4]	; (19d50 <hci_cmd_status+0x24>)
   19d4a:	f00c fa8f 	bl	2626c <z_impl_k_sem_give>
   19d4e:	e7fa      	b.n	19d46 <hci_cmd_status+0x1a>
   19d50:	20000558 	.word	0x20000558

00019d54 <hci_cmd_complete>:
{
   19d54:	b538      	push	{r3, r4, r5, lr}
   19d56:	4604      	mov	r4, r0
   19d58:	2103      	movs	r1, #3
   19d5a:	300c      	adds	r0, #12
   19d5c:	f015 f943 	bl	2efe6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   19d60:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   19d62:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   19d64:	4622      	mov	r2, r4
   19d66:	7819      	ldrb	r1, [r3, #0]
   19d68:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   19d6c:	f7ff fe7a 	bl	19a64 <hci_cmd_done>
	if (ncmd) {
   19d70:	b905      	cbnz	r5, 19d74 <hci_cmd_complete+0x20>
}
   19d72:	bd38      	pop	{r3, r4, r5, pc}
   19d74:	4801      	ldr	r0, [pc, #4]	; (19d7c <hci_cmd_complete+0x28>)
   19d76:	f00c fa79 	bl	2626c <z_impl_k_sem_give>
   19d7a:	e7fa      	b.n	19d72 <hci_cmd_complete+0x1e>
   19d7c:	20000558 	.word	0x20000558

00019d80 <hci_hardware_error>:
{
   19d80:	b5b0      	push	{r4, r5, r7, lr}
   19d82:	b082      	sub	sp, #8
   19d84:	af00      	add	r7, sp, #0
   19d86:	2101      	movs	r1, #1
   19d88:	300c      	adds	r0, #12
   19d8a:	f015 f92c 	bl	2efe6 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   19d8e:	7804      	ldrb	r4, [r0, #0]
   19d90:	b088      	sub	sp, #32
   19d92:	466b      	mov	r3, sp
   19d94:	f113 0210 	adds.w	r2, r3, #16
   19d98:	d02f      	beq.n	19dfa <hci_hardware_error+0x7a>
   19d9a:	210c      	movs	r1, #12
   19d9c:	b13a      	cbz	r2, 19dae <hci_hardware_error+0x2e>
   19d9e:	4608      	mov	r0, r1
   19da0:	2904      	cmp	r1, #4
   19da2:	dd01      	ble.n	19da8 <hci_hardware_error+0x28>
   19da4:	4d18      	ldr	r5, [pc, #96]	; (19e08 <hci_hardware_error+0x88>)
   19da6:	615d      	str	r5, [r3, #20]
   19da8:	2808      	cmp	r0, #8
   19daa:	dd00      	ble.n	19dae <hci_hardware_error+0x2e>
   19dac:	619c      	str	r4, [r3, #24]
   19dae:	290b      	cmp	r1, #11
   19db0:	dd26      	ble.n	19e00 <hci_hardware_error+0x80>
   19db2:	f04f 0c0c 	mov.w	ip, #12
   19db6:	b13a      	cbz	r2, 19dc8 <hci_hardware_error+0x48>
   19db8:	2103      	movs	r1, #3
   19dba:	7139      	strb	r1, [r7, #4]
   19dbc:	2100      	movs	r1, #0
   19dbe:	7179      	strb	r1, [r7, #5]
   19dc0:	71b9      	strb	r1, [r7, #6]
   19dc2:	71f9      	strb	r1, [r7, #7]
   19dc4:	6878      	ldr	r0, [r7, #4]
   19dc6:	6118      	str	r0, [r3, #16]
   19dc8:	2100      	movs	r1, #0
   19dca:	f36f 0100 	bfc	r1, #0, #1
   19dce:	f36f 0141 	bfc	r1, #1, #1
   19dd2:	f36f 0182 	bfc	r1, #2, #1
   19dd6:	f36f 01c5 	bfc	r1, #3, #3
   19dda:	2301      	movs	r3, #1
   19ddc:	f363 1188 	bfi	r1, r3, #6, #3
   19de0:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   19de4:	f36c 2153 	bfi	r1, ip, #9, #11
   19de8:	f36f 511f 	bfc	r1, #20, #12
   19dec:	2300      	movs	r3, #0
   19dee:	4807      	ldr	r0, [pc, #28]	; (19e0c <hci_hardware_error+0x8c>)
   19df0:	f7fa f984 	bl	140fc <z_impl_z_log_msg_static_create>
}
   19df4:	3708      	adds	r7, #8
   19df6:	46bd      	mov	sp, r7
   19df8:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   19dfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19dfe:	e7cd      	b.n	19d9c <hci_hardware_error+0x1c>
   19e00:	f06f 0c1b 	mvn.w	ip, #27
   19e04:	e7d7      	b.n	19db6 <hci_hardware_error+0x36>
   19e06:	bf00      	nop
   19e08:	00033790 	.word	0x00033790
   19e0c:	00031cfc 	.word	0x00031cfc

00019e10 <handle_event>:
{
   19e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e14:	b082      	sub	sp, #8
   19e16:	af00      	add	r7, sp, #0
   19e18:	4605      	mov	r5, r0
   19e1a:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   19e1c:	f7ff f982 	bl	19124 <handle_event_common>
	if (err == -EOPNOTSUPP) {
   19e20:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   19e24:	d003      	beq.n	19e2e <handle_event+0x1e>
}
   19e26:	3708      	adds	r7, #8
   19e28:	46bd      	mov	sp, r7
   19e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   19e2e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   19e32:	4641      	mov	r1, r8
   19e34:	68e0      	ldr	r0, [r4, #12]
   19e36:	f7fe ff39 	bl	18cac <bt_hex>
   19e3a:	466e      	mov	r6, sp
   19e3c:	2302      	movs	r3, #2
   19e3e:	713b      	strb	r3, [r7, #4]
   19e40:	2304      	movs	r3, #4
   19e42:	717b      	strb	r3, [r7, #5]
   19e44:	b08a      	sub	sp, #40	; 0x28
   19e46:	466c      	mov	r4, sp
   19e48:	f114 0210 	adds.w	r2, r4, #16
   19e4c:	d01c      	beq.n	19e88 <handle_event+0x78>
   19e4e:	f04f 0c16 	mov.w	ip, #22
   19e52:	b162      	cbz	r2, 19e6e <handle_event+0x5e>
   19e54:	4663      	mov	r3, ip
   19e56:	f1bc 0f04 	cmp.w	ip, #4
   19e5a:	dd01      	ble.n	19e60 <handle_event+0x50>
   19e5c:	4925      	ldr	r1, [pc, #148]	; (19ef4 <handle_event+0xe4>)
   19e5e:	6161      	str	r1, [r4, #20]
   19e60:	2b08      	cmp	r3, #8
   19e62:	dd00      	ble.n	19e66 <handle_event+0x56>
   19e64:	61a5      	str	r5, [r4, #24]
   19e66:	2b0c      	cmp	r3, #12
   19e68:	dd01      	ble.n	19e6e <handle_event+0x5e>
   19e6a:	f8c4 801c 	str.w	r8, [r4, #28]
   19e6e:	2302      	movs	r3, #2
   19e70:	703b      	strb	r3, [r7, #0]
   19e72:	2304      	movs	r3, #4
   19e74:	707b      	strb	r3, [r7, #1]
   19e76:	b1a2      	cbz	r2, 19ea2 <handle_event+0x92>
   19e78:	f1bc 0f10 	cmp.w	ip, #16
   19e7c:	dd00      	ble.n	19e80 <handle_event+0x70>
   19e7e:	6220      	str	r0, [r4, #32]
   19e80:	f104 0324 	add.w	r3, r4, #36	; 0x24
   19e84:	2100      	movs	r1, #0
   19e86:	e00a      	b.n	19e9e <handle_event+0x8e>
   19e88:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   19e8c:	e7e1      	b.n	19e52 <handle_event+0x42>
   19e8e:	f101 0008 	add.w	r0, r1, #8
   19e92:	4438      	add	r0, r7
   19e94:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   19e98:	f803 0b01 	strb.w	r0, [r3], #1
   19e9c:	3101      	adds	r1, #1
   19e9e:	2901      	cmp	r1, #1
   19ea0:	d9f5      	bls.n	19e8e <handle_event+0x7e>
   19ea2:	f1bc 0f15 	cmp.w	ip, #21
   19ea6:	dd22      	ble.n	19eee <handle_event+0xde>
   19ea8:	2316      	movs	r3, #22
   19eaa:	b142      	cbz	r2, 19ebe <handle_event+0xae>
   19eac:	2105      	movs	r1, #5
   19eae:	7139      	strb	r1, [r7, #4]
   19eb0:	2100      	movs	r1, #0
   19eb2:	7179      	strb	r1, [r7, #5]
   19eb4:	71b9      	strb	r1, [r7, #6]
   19eb6:	2101      	movs	r1, #1
   19eb8:	71f9      	strb	r1, [r7, #7]
   19eba:	6878      	ldr	r0, [r7, #4]
   19ebc:	6120      	str	r0, [r4, #16]
   19ebe:	2100      	movs	r1, #0
   19ec0:	f36f 0100 	bfc	r1, #0, #1
   19ec4:	f36f 0141 	bfc	r1, #1, #1
   19ec8:	f36f 0182 	bfc	r1, #2, #1
   19ecc:	f36f 01c5 	bfc	r1, #3, #3
   19ed0:	2002      	movs	r0, #2
   19ed2:	f360 1188 	bfi	r1, r0, #6, #3
   19ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   19eda:	f363 2153 	bfi	r1, r3, #9, #11
   19ede:	f36f 511f 	bfc	r1, #20, #12
   19ee2:	2300      	movs	r3, #0
   19ee4:	4804      	ldr	r0, [pc, #16]	; (19ef8 <handle_event+0xe8>)
   19ee6:	f7fa f909 	bl	140fc <z_impl_z_log_msg_static_create>
   19eea:	46b5      	mov	sp, r6
}
   19eec:	e79b      	b.n	19e26 <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   19eee:	f06f 031b 	mvn.w	r3, #27
   19ef2:	e7da      	b.n	19eaa <handle_event+0x9a>
   19ef4:	000337b4 	.word	0x000337b4
   19ef8:	00031cfc 	.word	0x00031cfc

00019efc <hci_event>:
{
   19efc:	b538      	push	{r3, r4, r5, lr}
   19efe:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19f00:	8a03      	ldrh	r3, [r0, #16]
   19f02:	2b01      	cmp	r3, #1
   19f04:	d915      	bls.n	19f32 <hci_event+0x36>
   19f06:	2102      	movs	r1, #2
   19f08:	f104 000c 	add.w	r0, r4, #12
   19f0c:	f015 f86b 	bl	2efe6 <net_buf_simple_pull_mem>
   19f10:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19f12:	7800      	ldrb	r0, [r0, #0]
   19f14:	f012 fd86 	bl	2ca24 <bt_hci_evt_get_flags>
   19f18:	f010 0f02 	tst.w	r0, #2
   19f1c:	d017      	beq.n	19f4e <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   19f1e:	2304      	movs	r3, #4
   19f20:	4a12      	ldr	r2, [pc, #72]	; (19f6c <hci_event+0x70>)
   19f22:	4621      	mov	r1, r4
   19f24:	7828      	ldrb	r0, [r5, #0]
   19f26:	f7ff ff73 	bl	19e10 <handle_event>
	net_buf_unref(buf);
   19f2a:	4620      	mov	r0, r4
   19f2c:	f014 ffe8 	bl	2ef00 <net_buf_unref>
}
   19f30:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19f32:	f640 2347 	movw	r3, #2631	; 0xa47
   19f36:	4a0e      	ldr	r2, [pc, #56]	; (19f70 <hci_event+0x74>)
   19f38:	490e      	ldr	r1, [pc, #56]	; (19f74 <hci_event+0x78>)
   19f3a:	480f      	ldr	r0, [pc, #60]	; (19f78 <hci_event+0x7c>)
   19f3c:	f011 f9b2 	bl	2b2a4 <assert_print>
   19f40:	4040      	eors	r0, r0
   19f42:	f380 8811 	msr	BASEPRI, r0
   19f46:	f04f 0003 	mov.w	r0, #3
   19f4a:	df02      	svc	2
   19f4c:	e7db      	b.n	19f06 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19f4e:	f640 234b 	movw	r3, #2635	; 0xa4b
   19f52:	4a07      	ldr	r2, [pc, #28]	; (19f70 <hci_event+0x74>)
   19f54:	4909      	ldr	r1, [pc, #36]	; (19f7c <hci_event+0x80>)
   19f56:	4808      	ldr	r0, [pc, #32]	; (19f78 <hci_event+0x7c>)
   19f58:	f011 f9a4 	bl	2b2a4 <assert_print>
   19f5c:	4040      	eors	r0, r0
   19f5e:	f380 8811 	msr	BASEPRI, r0
   19f62:	f04f 0003 	mov.w	r0, #3
   19f66:	df02      	svc	2
   19f68:	e7d9      	b.n	19f1e <hci_event+0x22>
   19f6a:	bf00      	nop
   19f6c:	00033d78 	.word	0x00033d78
   19f70:	000337d8 	.word	0x000337d8
   19f74:	0003380c 	.word	0x0003380c
   19f78:	00033828 	.word	0x00033828
   19f7c:	00033848 	.word	0x00033848

00019f80 <hci_le_meta_event>:
{
   19f80:	b510      	push	{r4, lr}
   19f82:	4604      	mov	r4, r0
   19f84:	2101      	movs	r1, #1
   19f86:	300c      	adds	r0, #12
   19f88:	f015 f82d 	bl	2efe6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   19f8c:	2307      	movs	r3, #7
   19f8e:	4a03      	ldr	r2, [pc, #12]	; (19f9c <hci_le_meta_event+0x1c>)
   19f90:	4621      	mov	r1, r4
   19f92:	7800      	ldrb	r0, [r0, #0]
   19f94:	f7ff ff3c 	bl	19e10 <handle_event>
}
   19f98:	bd10      	pop	{r4, pc}
   19f9a:	bf00      	nop
   19f9c:	00033d98 	.word	0x00033d98

00019fa0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   19fa0:	b5b0      	push	{r4, r5, r7, lr}
   19fa2:	b082      	sub	sp, #8
   19fa4:	af00      	add	r7, sp, #0
   19fa6:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   19fa8:	4823      	ldr	r0, [pc, #140]	; (1a038 <rx_queue_put+0x98>)
   19faa:	f014 ff77 	bl	2ee9c <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   19fae:	4923      	ldr	r1, [pc, #140]	; (1a03c <rx_queue_put+0x9c>)
   19fb0:	4823      	ldr	r0, [pc, #140]	; (1a040 <rx_queue_put+0xa0>)
   19fb2:	f016 fffc 	bl	30fae <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   19fb6:	2800      	cmp	r0, #0
   19fb8:	db02      	blt.n	19fc0 <rx_queue_put+0x20>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   19fba:	3708      	adds	r7, #8
   19fbc:	46bd      	mov	sp, r7
   19fbe:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
   19fc0:	466c      	mov	r4, sp
   19fc2:	b088      	sub	sp, #32
   19fc4:	466b      	mov	r3, sp
   19fc6:	f113 0210 	adds.w	r2, r3, #16
   19fca:	d02f      	beq.n	1a02c <rx_queue_put+0x8c>
   19fcc:	210c      	movs	r1, #12
   19fce:	b142      	cbz	r2, 19fe2 <rx_queue_put+0x42>
   19fd0:	468c      	mov	ip, r1
   19fd2:	2904      	cmp	r1, #4
   19fd4:	dd01      	ble.n	19fda <rx_queue_put+0x3a>
   19fd6:	4d1b      	ldr	r5, [pc, #108]	; (1a044 <rx_queue_put+0xa4>)
   19fd8:	615d      	str	r5, [r3, #20]
   19fda:	f1bc 0f08 	cmp.w	ip, #8
   19fde:	dd00      	ble.n	19fe2 <rx_queue_put+0x42>
   19fe0:	6198      	str	r0, [r3, #24]
   19fe2:	290b      	cmp	r1, #11
   19fe4:	dd25      	ble.n	1a032 <rx_queue_put+0x92>
   19fe6:	f04f 0c0c 	mov.w	ip, #12
   19fea:	b13a      	cbz	r2, 19ffc <rx_queue_put+0x5c>
   19fec:	2103      	movs	r1, #3
   19fee:	7139      	strb	r1, [r7, #4]
   19ff0:	2100      	movs	r1, #0
   19ff2:	7179      	strb	r1, [r7, #5]
   19ff4:	71b9      	strb	r1, [r7, #6]
   19ff6:	71f9      	strb	r1, [r7, #7]
   19ff8:	6878      	ldr	r0, [r7, #4]
   19ffa:	6118      	str	r0, [r3, #16]
   19ffc:	2100      	movs	r1, #0
   19ffe:	f36f 0100 	bfc	r1, #0, #1
   1a002:	f36f 0141 	bfc	r1, #1, #1
   1a006:	f36f 0182 	bfc	r1, #2, #1
   1a00a:	f36f 01c5 	bfc	r1, #3, #3
   1a00e:	2301      	movs	r3, #1
   1a010:	f363 1188 	bfi	r1, r3, #6, #3
   1a014:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1a018:	f36c 2153 	bfi	r1, ip, #9, #11
   1a01c:	f36f 511f 	bfc	r1, #20, #12
   1a020:	2300      	movs	r3, #0
   1a022:	4809      	ldr	r0, [pc, #36]	; (1a048 <rx_queue_put+0xa8>)
   1a024:	f7fa f86a 	bl	140fc <z_impl_z_log_msg_static_create>
   1a028:	46a5      	mov	sp, r4
}
   1a02a:	e7c6      	b.n	19fba <rx_queue_put+0x1a>
		LOG_ERR("Could not submit rx_work: %d", err);
   1a02c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a030:	e7cd      	b.n	19fce <rx_queue_put+0x2e>
   1a032:	f06f 0c1b 	mvn.w	ip, #27
   1a036:	e7d8      	b.n	19fea <rx_queue_put+0x4a>
   1a038:	20000574 	.word	0x20000574
   1a03c:	20000750 	.word	0x20000750
   1a040:	20002110 	.word	0x20002110
   1a044:	00033878 	.word	0x00033878
   1a048:	00031cfc 	.word	0x00031cfc

0001a04c <hci_acl>:
{
   1a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a04e:	b083      	sub	sp, #12
   1a050:	af00      	add	r7, sp, #0
   1a052:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1a054:	8a03      	ldrh	r3, [r0, #16]
   1a056:	2b03      	cmp	r3, #3
   1a058:	d950      	bls.n	1a0fc <hci_acl+0xb0>
   1a05a:	2104      	movs	r1, #4
   1a05c:	f104 000c 	add.w	r0, r4, #12
   1a060:	f014 ffc1 	bl	2efe6 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   1a064:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1a066:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   1a068:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   1a06a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   1a06e:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1a070:	23ff      	movs	r3, #255	; 0xff
   1a072:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   1a074:	f8b4 c010 	ldrh.w	ip, [r4, #16]
   1a078:	45b4      	cmp	ip, r6
   1a07a:	d053      	beq.n	1a124 <hci_acl+0xd8>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1a07c:	466d      	mov	r5, sp
   1a07e:	b088      	sub	sp, #32
   1a080:	466b      	mov	r3, sp
   1a082:	f113 0210 	adds.w	r2, r3, #16
   1a086:	d047      	beq.n	1a118 <hci_acl+0xcc>
   1a088:	2110      	movs	r1, #16
   1a08a:	b16a      	cbz	r2, 1a0a8 <hci_acl+0x5c>
   1a08c:	4608      	mov	r0, r1
   1a08e:	2904      	cmp	r1, #4
   1a090:	dd03      	ble.n	1a09a <hci_acl+0x4e>
   1a092:	f8df e130 	ldr.w	lr, [pc, #304]	; 1a1c4 <hci_acl+0x178>
   1a096:	f8c3 e014 	str.w	lr, [r3, #20]
   1a09a:	2808      	cmp	r0, #8
   1a09c:	dd01      	ble.n	1a0a2 <hci_acl+0x56>
   1a09e:	f8c3 c018 	str.w	ip, [r3, #24]
   1a0a2:	280c      	cmp	r0, #12
   1a0a4:	dd00      	ble.n	1a0a8 <hci_acl+0x5c>
   1a0a6:	61de      	str	r6, [r3, #28]
   1a0a8:	290f      	cmp	r1, #15
   1a0aa:	dd38      	ble.n	1a11e <hci_acl+0xd2>
   1a0ac:	f04f 0c10 	mov.w	ip, #16
   1a0b0:	b13a      	cbz	r2, 1a0c2 <hci_acl+0x76>
   1a0b2:	2104      	movs	r1, #4
   1a0b4:	7139      	strb	r1, [r7, #4]
   1a0b6:	2100      	movs	r1, #0
   1a0b8:	7179      	strb	r1, [r7, #5]
   1a0ba:	71b9      	strb	r1, [r7, #6]
   1a0bc:	71f9      	strb	r1, [r7, #7]
   1a0be:	6878      	ldr	r0, [r7, #4]
   1a0c0:	6118      	str	r0, [r3, #16]
   1a0c2:	2100      	movs	r1, #0
   1a0c4:	f36f 0100 	bfc	r1, #0, #1
   1a0c8:	f36f 0141 	bfc	r1, #1, #1
   1a0cc:	f36f 0182 	bfc	r1, #2, #1
   1a0d0:	f36f 01c5 	bfc	r1, #3, #3
   1a0d4:	2301      	movs	r3, #1
   1a0d6:	f363 1188 	bfi	r1, r3, #6, #3
   1a0da:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1a0de:	f36c 2153 	bfi	r1, ip, #9, #11
   1a0e2:	f36f 511f 	bfc	r1, #20, #12
   1a0e6:	2300      	movs	r3, #0
   1a0e8:	4837      	ldr	r0, [pc, #220]	; (1a1c8 <hci_acl+0x17c>)
   1a0ea:	f7fa f807 	bl	140fc <z_impl_z_log_msg_static_create>
   1a0ee:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1a0f0:	4620      	mov	r0, r4
   1a0f2:	f014 ff05 	bl	2ef00 <net_buf_unref>
}
   1a0f6:	370c      	adds	r7, #12
   1a0f8:	46bd      	mov	sp, r7
   1a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1a0fc:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1a100:	4a32      	ldr	r2, [pc, #200]	; (1a1cc <hci_acl+0x180>)
   1a102:	4933      	ldr	r1, [pc, #204]	; (1a1d0 <hci_acl+0x184>)
   1a104:	4833      	ldr	r0, [pc, #204]	; (1a1d4 <hci_acl+0x188>)
   1a106:	f011 f8cd 	bl	2b2a4 <assert_print>
   1a10a:	4040      	eors	r0, r0
   1a10c:	f380 8811 	msr	BASEPRI, r0
   1a110:	f04f 0003 	mov.w	r0, #3
   1a114:	df02      	svc	2
   1a116:	e7a0      	b.n	1a05a <hci_acl+0xe>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1a118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a11c:	e7b5      	b.n	1a08a <hci_acl+0x3e>
   1a11e:	f06f 0c1b 	mvn.w	ip, #27
   1a122:	e7c5      	b.n	1a0b0 <hci_acl+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1a124:	f003 f8f4 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   1a128:	4606      	mov	r6, r0
   1a12a:	b158      	cbz	r0, 1a144 <hci_acl+0xf8>
	acl(buf)->index = bt_conn_index(conn);
   1a12c:	f003 fa68 	bl	1d600 <bt_conn_index>
   1a130:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   1a132:	462a      	mov	r2, r5
   1a134:	4621      	mov	r1, r4
   1a136:	4630      	mov	r0, r6
   1a138:	f013 f944 	bl	2d3c4 <bt_conn_recv>
	bt_conn_unref(conn);
   1a13c:	4630      	mov	r0, r6
   1a13e:	f013 f974 	bl	2d42a <bt_conn_unref>
   1a142:	e7d8      	b.n	1a0f6 <hci_acl+0xaa>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1a144:	8b65      	ldrh	r5, [r4, #26]
   1a146:	466e      	mov	r6, sp
   1a148:	b088      	sub	sp, #32
   1a14a:	466b      	mov	r3, sp
   1a14c:	f113 0210 	adds.w	r2, r3, #16
   1a150:	d032      	beq.n	1a1b8 <hci_acl+0x16c>
   1a152:	210c      	movs	r1, #12
   1a154:	b14a      	cbz	r2, 1a16a <hci_acl+0x11e>
   1a156:	4608      	mov	r0, r1
   1a158:	2904      	cmp	r1, #4
   1a15a:	dd03      	ble.n	1a164 <hci_acl+0x118>
   1a15c:	f8df c078 	ldr.w	ip, [pc, #120]	; 1a1d8 <hci_acl+0x18c>
   1a160:	f8c3 c014 	str.w	ip, [r3, #20]
   1a164:	2808      	cmp	r0, #8
   1a166:	dd00      	ble.n	1a16a <hci_acl+0x11e>
   1a168:	619d      	str	r5, [r3, #24]
   1a16a:	290b      	cmp	r1, #11
   1a16c:	dd27      	ble.n	1a1be <hci_acl+0x172>
   1a16e:	250c      	movs	r5, #12
   1a170:	b13a      	cbz	r2, 1a182 <hci_acl+0x136>
   1a172:	2103      	movs	r1, #3
   1a174:	7139      	strb	r1, [r7, #4]
   1a176:	2100      	movs	r1, #0
   1a178:	7179      	strb	r1, [r7, #5]
   1a17a:	71b9      	strb	r1, [r7, #6]
   1a17c:	71f9      	strb	r1, [r7, #7]
   1a17e:	6878      	ldr	r0, [r7, #4]
   1a180:	6118      	str	r0, [r3, #16]
   1a182:	2100      	movs	r1, #0
   1a184:	f36f 0100 	bfc	r1, #0, #1
   1a188:	f36f 0141 	bfc	r1, #1, #1
   1a18c:	f36f 0182 	bfc	r1, #2, #1
   1a190:	f36f 01c5 	bfc	r1, #3, #3
   1a194:	2301      	movs	r3, #1
   1a196:	f363 1188 	bfi	r1, r3, #6, #3
   1a19a:	f3c5 050a 	ubfx	r5, r5, #0, #11
   1a19e:	f365 2153 	bfi	r1, r5, #9, #11
   1a1a2:	f36f 511f 	bfc	r1, #20, #12
   1a1a6:	2300      	movs	r3, #0
   1a1a8:	4807      	ldr	r0, [pc, #28]	; (1a1c8 <hci_acl+0x17c>)
   1a1aa:	f7f9 ffa7 	bl	140fc <z_impl_z_log_msg_static_create>
   1a1ae:	46b5      	mov	sp, r6
		net_buf_unref(buf);
   1a1b0:	4620      	mov	r0, r4
   1a1b2:	f014 fea5 	bl	2ef00 <net_buf_unref>
		return;
   1a1b6:	e79e      	b.n	1a0f6 <hci_acl+0xaa>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1a1b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a1bc:	e7ca      	b.n	1a154 <hci_acl+0x108>
   1a1be:	f06f 051b 	mvn.w	r5, #27
   1a1c2:	e7d5      	b.n	1a170 <hci_acl+0x124>
   1a1c4:	00033898 	.word	0x00033898
   1a1c8:	00031cfc 	.word	0x00031cfc
   1a1cc:	000337d8 	.word	0x000337d8
   1a1d0:	0003380c 	.word	0x0003380c
   1a1d4:	00033828 	.word	0x00033828
   1a1d8:	000338bc 	.word	0x000338bc

0001a1dc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1a1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a1de:	b083      	sub	sp, #12
   1a1e0:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1a1e2:	484a      	ldr	r0, [pc, #296]	; (1a30c <rx_work_handler+0x130>)
   1a1e4:	f014 fe70 	bl	2eec8 <net_buf_slist_get>
	if (!buf) {
   1a1e8:	2800      	cmp	r0, #0
   1a1ea:	d04c      	beq.n	1a286 <rx_work_handler+0xaa>
   1a1ec:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1a1ee:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1a1f0:	2b01      	cmp	r3, #1
   1a1f2:	d004      	beq.n	1a1fe <rx_work_handler+0x22>
   1a1f4:	2b03      	cmp	r3, #3
   1a1f6:	d105      	bne.n	1a204 <rx_work_handler+0x28>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   1a1f8:	f7ff ff28 	bl	1a04c <hci_acl>
		break;
   1a1fc:	e039      	b.n	1a272 <rx_work_handler+0x96>
	case BT_BUF_ISO_IN:
		hci_iso(buf);
		break;
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
   1a1fe:	f7ff fe7d 	bl	19efc <hci_event>
		break;
   1a202:	e036      	b.n	1a272 <rx_work_handler+0x96>
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1a204:	466d      	mov	r5, sp
   1a206:	b088      	sub	sp, #32
   1a208:	4669      	mov	r1, sp
   1a20a:	f111 0210 	adds.w	r2, r1, #16
   1a20e:	d03d      	beq.n	1a28c <rx_work_handler+0xb0>
   1a210:	200c      	movs	r0, #12
   1a212:	b142      	cbz	r2, 1a226 <rx_work_handler+0x4a>
   1a214:	4684      	mov	ip, r0
   1a216:	2804      	cmp	r0, #4
   1a218:	dd01      	ble.n	1a21e <rx_work_handler+0x42>
   1a21a:	4e3d      	ldr	r6, [pc, #244]	; (1a310 <rx_work_handler+0x134>)
   1a21c:	614e      	str	r6, [r1, #20]
   1a21e:	f1bc 0f08 	cmp.w	ip, #8
   1a222:	dd00      	ble.n	1a226 <rx_work_handler+0x4a>
   1a224:	618b      	str	r3, [r1, #24]
   1a226:	280b      	cmp	r0, #11
   1a228:	dd33      	ble.n	1a292 <rx_work_handler+0xb6>
   1a22a:	230c      	movs	r3, #12
   1a22c:	b13a      	cbz	r2, 1a23e <rx_work_handler+0x62>
   1a22e:	2003      	movs	r0, #3
   1a230:	7138      	strb	r0, [r7, #4]
   1a232:	2000      	movs	r0, #0
   1a234:	7178      	strb	r0, [r7, #5]
   1a236:	71b8      	strb	r0, [r7, #6]
   1a238:	71f8      	strb	r0, [r7, #7]
   1a23a:	6878      	ldr	r0, [r7, #4]
   1a23c:	6108      	str	r0, [r1, #16]
   1a23e:	2100      	movs	r1, #0
   1a240:	f36f 0100 	bfc	r1, #0, #1
   1a244:	f36f 0141 	bfc	r1, #1, #1
   1a248:	f36f 0182 	bfc	r1, #2, #1
   1a24c:	f36f 01c5 	bfc	r1, #3, #3
   1a250:	2001      	movs	r0, #1
   1a252:	f360 1188 	bfi	r1, r0, #6, #3
   1a256:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1a25a:	f363 2153 	bfi	r1, r3, #9, #11
   1a25e:	f36f 511f 	bfc	r1, #20, #12
   1a262:	2300      	movs	r3, #0
   1a264:	482b      	ldr	r0, [pc, #172]	; (1a314 <rx_work_handler+0x138>)
   1a266:	f7f9 ff49 	bl	140fc <z_impl_z_log_msg_static_create>
   1a26a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1a26c:	4620      	mov	r0, r4
   1a26e:	f014 fe47 	bl	2ef00 <net_buf_unref>
	return list->head;
   1a272:	4b29      	ldr	r3, [pc, #164]	; (1a318 <rx_work_handler+0x13c>)
   1a274:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1a278:	b12b      	cbz	r3, 1a286 <rx_work_handler+0xaa>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1a27a:	4928      	ldr	r1, [pc, #160]	; (1a31c <rx_work_handler+0x140>)
   1a27c:	4828      	ldr	r0, [pc, #160]	; (1a320 <rx_work_handler+0x144>)
   1a27e:	f016 fe96 	bl	30fae <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1a282:	2800      	cmp	r0, #0
   1a284:	db08      	blt.n	1a298 <rx_work_handler+0xbc>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1a286:	370c      	adds	r7, #12
   1a288:	46bd      	mov	sp, r7
   1a28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1a28c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a290:	e7bf      	b.n	1a212 <rx_work_handler+0x36>
   1a292:	f06f 031b 	mvn.w	r3, #27
   1a296:	e7c9      	b.n	1a22c <rx_work_handler+0x50>
			LOG_ERR("Could not submit rx_work: %d", err);
   1a298:	466d      	mov	r5, sp
   1a29a:	b088      	sub	sp, #32
   1a29c:	466b      	mov	r3, sp
   1a29e:	f113 0210 	adds.w	r2, r3, #16
   1a2a2:	d02d      	beq.n	1a300 <rx_work_handler+0x124>
   1a2a4:	210c      	movs	r1, #12
   1a2a6:	b13a      	cbz	r2, 1a2b8 <rx_work_handler+0xdc>
   1a2a8:	460c      	mov	r4, r1
   1a2aa:	2904      	cmp	r1, #4
   1a2ac:	dd01      	ble.n	1a2b2 <rx_work_handler+0xd6>
   1a2ae:	4e1d      	ldr	r6, [pc, #116]	; (1a324 <rx_work_handler+0x148>)
   1a2b0:	615e      	str	r6, [r3, #20]
   1a2b2:	2c08      	cmp	r4, #8
   1a2b4:	dd00      	ble.n	1a2b8 <rx_work_handler+0xdc>
   1a2b6:	6198      	str	r0, [r3, #24]
   1a2b8:	290b      	cmp	r1, #11
   1a2ba:	dd24      	ble.n	1a306 <rx_work_handler+0x12a>
   1a2bc:	240c      	movs	r4, #12
   1a2be:	b13a      	cbz	r2, 1a2d0 <rx_work_handler+0xf4>
   1a2c0:	2103      	movs	r1, #3
   1a2c2:	7139      	strb	r1, [r7, #4]
   1a2c4:	2100      	movs	r1, #0
   1a2c6:	7179      	strb	r1, [r7, #5]
   1a2c8:	71b9      	strb	r1, [r7, #6]
   1a2ca:	71f9      	strb	r1, [r7, #7]
   1a2cc:	6878      	ldr	r0, [r7, #4]
   1a2ce:	6118      	str	r0, [r3, #16]
   1a2d0:	2100      	movs	r1, #0
   1a2d2:	f36f 0100 	bfc	r1, #0, #1
   1a2d6:	f36f 0141 	bfc	r1, #1, #1
   1a2da:	f36f 0182 	bfc	r1, #2, #1
   1a2de:	f36f 01c5 	bfc	r1, #3, #3
   1a2e2:	2301      	movs	r3, #1
   1a2e4:	f363 1188 	bfi	r1, r3, #6, #3
   1a2e8:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1a2ec:	f363 2153 	bfi	r1, r3, #9, #11
   1a2f0:	f36f 511f 	bfc	r1, #20, #12
   1a2f4:	2300      	movs	r3, #0
   1a2f6:	4807      	ldr	r0, [pc, #28]	; (1a314 <rx_work_handler+0x138>)
   1a2f8:	f7f9 ff00 	bl	140fc <z_impl_z_log_msg_static_create>
   1a2fc:	46ad      	mov	sp, r5
   1a2fe:	e7c2      	b.n	1a286 <rx_work_handler+0xaa>
   1a300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a304:	e7cf      	b.n	1a2a6 <rx_work_handler+0xca>
   1a306:	f06f 041b 	mvn.w	r4, #27
   1a30a:	e7d8      	b.n	1a2be <rx_work_handler+0xe2>
   1a30c:	20000574 	.word	0x20000574
   1a310:	000338e0 	.word	0x000338e0
   1a314:	00031cfc 	.word	0x00031cfc
   1a318:	20000438 	.word	0x20000438
   1a31c:	20000750 	.word	0x20000750
   1a320:	20002110 	.word	0x20002110
   1a324:	00033878 	.word	0x00033878

0001a328 <le_conn_update_complete>:
{
   1a328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a32a:	b083      	sub	sp, #12
   1a32c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1a32e:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1a330:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1a334:	4630      	mov	r0, r6
   1a336:	f002 ffeb 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   1a33a:	b340      	cbz	r0, 1a38e <le_conn_update_complete+0x66>
   1a33c:	4604      	mov	r4, r0
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1a33e:	782b      	ldrb	r3, [r5, #0]
   1a340:	2b1a      	cmp	r3, #26
   1a342:	d05e      	beq.n	1a402 <le_conn_update_complete+0xda>
		if (!evt->status) {
   1a344:	782b      	ldrb	r3, [r5, #0]
   1a346:	2b00      	cmp	r3, #0
   1a348:	d175      	bne.n	1a436 <le_conn_update_complete+0x10e>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   1a34a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1a34e:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1a352:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1a356:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1a35a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1a35e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			atomic_clear_bit(conn->flags,
   1a362:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a364:	f3bf 8f5b 	dmb	ish
   1a368:	e853 1f00 	ldrex	r1, [r3]
   1a36c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   1a370:	e843 1200 	strex	r2, r1, [r3]
   1a374:	2a00      	cmp	r2, #0
   1a376:	d1f7      	bne.n	1a368 <le_conn_update_complete+0x40>
   1a378:	f3bf 8f5b 	dmb	ish
		notify_le_param_updated(conn);
   1a37c:	4620      	mov	r0, r4
   1a37e:	f003 f987 	bl	1d690 <notify_le_param_updated>
	bt_conn_unref(conn);
   1a382:	4620      	mov	r0, r4
   1a384:	f013 f851 	bl	2d42a <bt_conn_unref>
}
   1a388:	370c      	adds	r7, #12
   1a38a:	46bd      	mov	sp, r7
   1a38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a38e:	466d      	mov	r5, sp
   1a390:	b088      	sub	sp, #32
   1a392:	466b      	mov	r3, sp
   1a394:	f113 0210 	adds.w	r2, r3, #16
   1a398:	d02d      	beq.n	1a3f6 <le_conn_update_complete+0xce>
   1a39a:	210c      	movs	r1, #12
   1a39c:	b13a      	cbz	r2, 1a3ae <le_conn_update_complete+0x86>
   1a39e:	4608      	mov	r0, r1
   1a3a0:	2904      	cmp	r1, #4
   1a3a2:	dd01      	ble.n	1a3a8 <le_conn_update_complete+0x80>
   1a3a4:	4c36      	ldr	r4, [pc, #216]	; (1a480 <le_conn_update_complete+0x158>)
   1a3a6:	615c      	str	r4, [r3, #20]
   1a3a8:	2808      	cmp	r0, #8
   1a3aa:	dd00      	ble.n	1a3ae <le_conn_update_complete+0x86>
   1a3ac:	619e      	str	r6, [r3, #24]
   1a3ae:	290b      	cmp	r1, #11
   1a3b0:	dd24      	ble.n	1a3fc <le_conn_update_complete+0xd4>
   1a3b2:	240c      	movs	r4, #12
   1a3b4:	b13a      	cbz	r2, 1a3c6 <le_conn_update_complete+0x9e>
   1a3b6:	2103      	movs	r1, #3
   1a3b8:	7039      	strb	r1, [r7, #0]
   1a3ba:	2100      	movs	r1, #0
   1a3bc:	7079      	strb	r1, [r7, #1]
   1a3be:	70b9      	strb	r1, [r7, #2]
   1a3c0:	70f9      	strb	r1, [r7, #3]
   1a3c2:	6838      	ldr	r0, [r7, #0]
   1a3c4:	6118      	str	r0, [r3, #16]
   1a3c6:	2100      	movs	r1, #0
   1a3c8:	f36f 0100 	bfc	r1, #0, #1
   1a3cc:	f36f 0141 	bfc	r1, #1, #1
   1a3d0:	f36f 0182 	bfc	r1, #2, #1
   1a3d4:	f36f 01c5 	bfc	r1, #3, #3
   1a3d8:	2301      	movs	r3, #1
   1a3da:	f363 1188 	bfi	r1, r3, #6, #3
   1a3de:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1a3e2:	f364 2153 	bfi	r1, r4, #9, #11
   1a3e6:	f36f 511f 	bfc	r1, #20, #12
   1a3ea:	2300      	movs	r3, #0
   1a3ec:	4825      	ldr	r0, [pc, #148]	; (1a484 <le_conn_update_complete+0x15c>)
   1a3ee:	f7f9 fe85 	bl	140fc <z_impl_z_log_msg_static_create>
   1a3f2:	46ad      	mov	sp, r5
		return;
   1a3f4:	e7c8      	b.n	1a388 <le_conn_update_complete+0x60>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a3f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a3fa:	e7cf      	b.n	1a39c <le_conn_update_complete+0x74>
   1a3fc:	f06f 041b 	mvn.w	r4, #27
   1a400:	e7d8      	b.n	1a3b4 <le_conn_update_complete+0x8c>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1a402:	78c3      	ldrb	r3, [r0, #3]
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1a404:	2b01      	cmp	r3, #1
   1a406:	d19d      	bne.n	1a344 <le_conn_update_complete+0x1c>
	    !atomic_test_and_set_bit(conn->flags,
   1a408:	210a      	movs	r1, #10
   1a40a:	3004      	adds	r0, #4
   1a40c:	f012 fbaf 	bl	2cb6e <atomic_test_and_set_bit>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1a410:	2800      	cmp	r0, #0
   1a412:	d197      	bne.n	1a344 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   1a414:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1a418:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   1a41a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   1a41e:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   1a420:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1a424:	80bb      	strh	r3, [r7, #4]
		param.timeout = conn->le.pending_timeout;
   1a426:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1a42a:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1a42c:	4639      	mov	r1, r7
   1a42e:	4620      	mov	r0, r4
   1a430:	f013 f96e 	bl	2d710 <bt_l2cap_update_conn_param>
				     BT_CONN_PERIPHERAL_PARAM_L2CAP)) {
   1a434:	e7a5      	b.n	1a382 <le_conn_update_complete+0x5a>
		} else if (atomic_test_bit(conn->flags,
   1a436:	1d26      	adds	r6, r4, #4
   1a438:	2108      	movs	r1, #8
   1a43a:	4630      	mov	r0, r6
   1a43c:	f012 fb0b 	bl	2ca56 <atomic_test_bit>
   1a440:	b110      	cbz	r0, 1a448 <le_conn_update_complete+0x120>
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1a442:	782b      	ldrb	r3, [r5, #0]
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1a444:	2b20      	cmp	r3, #32
   1a446:	d00c      	beq.n	1a462 <le_conn_update_complete+0x13a>
   1a448:	f3bf 8f5b 	dmb	ish
   1a44c:	e856 3f00 	ldrex	r3, [r6]
   1a450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1a454:	e846 3200 	strex	r2, r3, [r6]
   1a458:	2a00      	cmp	r2, #0
   1a45a:	d1f7      	bne.n	1a44c <le_conn_update_complete+0x124>
   1a45c:	f3bf 8f5b 	dmb	ish
   1a460:	e78c      	b.n	1a37c <le_conn_update_complete+0x54>
			   conn->le.conn_param_retry_countdown) {
   1a462:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1a466:	2b00      	cmp	r3, #0
   1a468:	d0ee      	beq.n	1a448 <le_conn_update_complete+0x120>
			conn->le.conn_param_retry_countdown--;
   1a46a:	3b01      	subs	r3, #1
   1a46c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1a470:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1a474:	2300      	movs	r3, #0
   1a476:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a47a:	f00c f8e3 	bl	26644 <k_work_schedule>
			   conn->le.conn_param_retry_countdown) {
   1a47e:	e77d      	b.n	1a37c <le_conn_update_complete+0x54>
   1a480:	000336a0 	.word	0x000336a0
   1a484:	00031cfc 	.word	0x00031cfc

0001a488 <bt_hci_cmd_state_set_init>:
{
   1a488:	b510      	push	{r4, lr}
   1a48a:	460c      	mov	r4, r1
	state->target = target;
   1a48c:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   1a48e:	604b      	str	r3, [r1, #4]
	state->val = val;
   1a490:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1a494:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1a496:	f014 fc53 	bl	2ed40 <net_buf_id>
   1a49a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a49e:	4b02      	ldr	r3, [pc, #8]	; (1a4a8 <bt_hci_cmd_state_set_init+0x20>)
   1a4a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1a4a4:	605c      	str	r4, [r3, #4]
}
   1a4a6:	bd10      	pop	{r4, pc}
   1a4a8:	20003f40 	.word	0x20003f40

0001a4ac <bt_hci_cmd_create>:
{
   1a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a4b0:	4606      	mov	r6, r0
   1a4b2:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   1a4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a4bc:	4818      	ldr	r0, [pc, #96]	; (1a520 <bt_hci_cmd_create+0x74>)
   1a4be:	f014 fce2 	bl	2ee86 <net_buf_alloc_fixed>
   1a4c2:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1a4c4:	f100 090c 	add.w	r9, r0, #12
   1a4c8:	2100      	movs	r1, #0
   1a4ca:	4648      	mov	r0, r9
   1a4cc:	f014 fd5f 	bl	2ef8e <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1a4d0:	f04f 0800 	mov.w	r8, #0
   1a4d4:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1a4d8:	4620      	mov	r0, r4
   1a4da:	f014 fc31 	bl	2ed40 <net_buf_id>
   1a4de:	4d11      	ldr	r5, [pc, #68]	; (1a524 <bt_hci_cmd_create+0x78>)
   1a4e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a4e4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1a4e8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1a4ea:	4620      	mov	r0, r4
   1a4ec:	f014 fc28 	bl	2ed40 <net_buf_id>
   1a4f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a4f4:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   1a4f8:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   1a4fc:	4620      	mov	r0, r4
   1a4fe:	f014 fc1f 	bl	2ed40 <net_buf_id>
   1a502:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a506:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1a50a:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   1a50e:	2103      	movs	r1, #3
   1a510:	4648      	mov	r0, r9
   1a512:	f014 fd40 	bl	2ef96 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1a516:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1a518:	7087      	strb	r7, [r0, #2]
}
   1a51a:	4620      	mov	r0, r4
   1a51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a520:	20000be4 	.word	0x20000be4
   1a524:	20003f40 	.word	0x20003f40

0001a528 <bt_hci_cmd_send_sync>:
{
   1a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a52c:	b088      	sub	sp, #32
   1a52e:	af00      	add	r7, sp, #0
   1a530:	4606      	mov	r6, r0
   1a532:	4615      	mov	r5, r2
	if (!buf) {
   1a534:	460c      	mov	r4, r1
   1a536:	2900      	cmp	r1, #0
   1a538:	d06d      	beq.n	1a616 <bt_hci_cmd_send_sync+0xee>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a53a:	f107 0808 	add.w	r8, r7, #8
   1a53e:	2201      	movs	r2, #1
   1a540:	2100      	movs	r1, #0
   1a542:	4640      	mov	r0, r8
   1a544:	f016 fc2e 	bl	30da4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1a548:	4620      	mov	r0, r4
   1a54a:	f014 fbf9 	bl	2ed40 <net_buf_id>
   1a54e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a552:	4b49      	ldr	r3, [pc, #292]	; (1a678 <bt_hci_cmd_send_sync+0x150>)
   1a554:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1a558:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1a55c:	4620      	mov	r0, r4
   1a55e:	f014 fcf2 	bl	2ef46 <net_buf_ref>
   1a562:	4601      	mov	r1, r0
   1a564:	4845      	ldr	r0, [pc, #276]	; (1a67c <bt_hci_cmd_send_sync+0x154>)
   1a566:	f014 fcc7 	bl	2eef8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1a56a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1a56e:	2300      	movs	r3, #0
   1a570:	4640      	mov	r0, r8
   1a572:	f00b fea3 	bl	262bc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   1a576:	4680      	mov	r8, r0
   1a578:	2800      	cmp	r0, #0
   1a57a:	d154      	bne.n	1a626 <bt_hci_cmd_send_sync+0xfe>
	status = cmd(buf)->status;
   1a57c:	4620      	mov	r0, r4
   1a57e:	f014 fbdf 	bl	2ed40 <net_buf_id>
   1a582:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a586:	4b3c      	ldr	r3, [pc, #240]	; (1a678 <bt_hci_cmd_send_sync+0x150>)
   1a588:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
   1a58c:	f1b8 0f00 	cmp.w	r8, #0
   1a590:	d065      	beq.n	1a65e <bt_hci_cmd_send_sync+0x136>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1a592:	466d      	mov	r5, sp
   1a594:	b088      	sub	sp, #32
   1a596:	466b      	mov	r3, sp
   1a598:	f113 0210 	adds.w	r2, r3, #16
   1a59c:	d056      	beq.n	1a64c <bt_hci_cmd_send_sync+0x124>
   1a59e:	2110      	movs	r1, #16
   1a5a0:	b16a      	cbz	r2, 1a5be <bt_hci_cmd_send_sync+0x96>
   1a5a2:	4608      	mov	r0, r1
   1a5a4:	2904      	cmp	r1, #4
   1a5a6:	dd03      	ble.n	1a5b0 <bt_hci_cmd_send_sync+0x88>
   1a5a8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 1a680 <bt_hci_cmd_send_sync+0x158>
   1a5ac:	f8c3 c014 	str.w	ip, [r3, #20]
   1a5b0:	2808      	cmp	r0, #8
   1a5b2:	dd00      	ble.n	1a5b6 <bt_hci_cmd_send_sync+0x8e>
   1a5b4:	619e      	str	r6, [r3, #24]
   1a5b6:	280c      	cmp	r0, #12
   1a5b8:	dd01      	ble.n	1a5be <bt_hci_cmd_send_sync+0x96>
   1a5ba:	f8c3 801c 	str.w	r8, [r3, #28]
   1a5be:	290f      	cmp	r1, #15
   1a5c0:	dd47      	ble.n	1a652 <bt_hci_cmd_send_sync+0x12a>
   1a5c2:	2610      	movs	r6, #16
   1a5c4:	b13a      	cbz	r2, 1a5d6 <bt_hci_cmd_send_sync+0xae>
   1a5c6:	2104      	movs	r1, #4
   1a5c8:	7139      	strb	r1, [r7, #4]
   1a5ca:	2100      	movs	r1, #0
   1a5cc:	7179      	strb	r1, [r7, #5]
   1a5ce:	71b9      	strb	r1, [r7, #6]
   1a5d0:	71f9      	strb	r1, [r7, #7]
   1a5d2:	6878      	ldr	r0, [r7, #4]
   1a5d4:	6118      	str	r0, [r3, #16]
   1a5d6:	2100      	movs	r1, #0
   1a5d8:	f36f 0100 	bfc	r1, #0, #1
   1a5dc:	f36f 0141 	bfc	r1, #1, #1
   1a5e0:	f36f 0182 	bfc	r1, #2, #1
   1a5e4:	f36f 01c5 	bfc	r1, #3, #3
   1a5e8:	2302      	movs	r3, #2
   1a5ea:	f363 1188 	bfi	r1, r3, #6, #3
   1a5ee:	f3c6 030a 	ubfx	r3, r6, #0, #11
   1a5f2:	f363 2153 	bfi	r1, r3, #9, #11
   1a5f6:	f36f 511f 	bfc	r1, #20, #12
   1a5fa:	2300      	movs	r3, #0
   1a5fc:	4821      	ldr	r0, [pc, #132]	; (1a684 <bt_hci_cmd_send_sync+0x15c>)
   1a5fe:	f7f9 fd7d 	bl	140fc <z_impl_z_log_msg_static_create>
   1a602:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1a604:	4620      	mov	r0, r4
   1a606:	f014 fc7b 	bl	2ef00 <net_buf_unref>
		switch (status) {
   1a60a:	f1b8 0f09 	cmp.w	r8, #9
   1a60e:	d023      	beq.n	1a658 <bt_hci_cmd_send_sync+0x130>
			return -EIO;
   1a610:	f06f 0004 	mvn.w	r0, #4
   1a614:	e026      	b.n	1a664 <bt_hci_cmd_send_sync+0x13c>
		buf = bt_hci_cmd_create(opcode, 0);
   1a616:	f7ff ff49 	bl	1a4ac <bt_hci_cmd_create>
		if (!buf) {
   1a61a:	4604      	mov	r4, r0
   1a61c:	2800      	cmp	r0, #0
   1a61e:	d18c      	bne.n	1a53a <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
   1a620:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a624:	e01e      	b.n	1a664 <bt_hci_cmd_send_sync+0x13c>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   1a626:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1a62a:	4a17      	ldr	r2, [pc, #92]	; (1a688 <bt_hci_cmd_send_sync+0x160>)
   1a62c:	4917      	ldr	r1, [pc, #92]	; (1a68c <bt_hci_cmd_send_sync+0x164>)
   1a62e:	4818      	ldr	r0, [pc, #96]	; (1a690 <bt_hci_cmd_send_sync+0x168>)
   1a630:	f010 fe38 	bl	2b2a4 <assert_print>
   1a634:	4642      	mov	r2, r8
   1a636:	4631      	mov	r1, r6
   1a638:	4816      	ldr	r0, [pc, #88]	; (1a694 <bt_hci_cmd_send_sync+0x16c>)
   1a63a:	f010 fe33 	bl	2b2a4 <assert_print>
   1a63e:	4040      	eors	r0, r0
   1a640:	f380 8811 	msr	BASEPRI, r0
   1a644:	f04f 0003 	mov.w	r0, #3
   1a648:	df02      	svc	2
   1a64a:	e797      	b.n	1a57c <bt_hci_cmd_send_sync+0x54>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1a64c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a650:	e7a6      	b.n	1a5a0 <bt_hci_cmd_send_sync+0x78>
   1a652:	f06f 061b 	mvn.w	r6, #27
   1a656:	e7b5      	b.n	1a5c4 <bt_hci_cmd_send_sync+0x9c>
			return -ECONNREFUSED;
   1a658:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   1a65c:	e002      	b.n	1a664 <bt_hci_cmd_send_sync+0x13c>
	if (rsp) {
   1a65e:	b12d      	cbz	r5, 1a66c <bt_hci_cmd_send_sync+0x144>
		*rsp = buf;
   1a660:	602c      	str	r4, [r5, #0]
	return 0;
   1a662:	2000      	movs	r0, #0
}
   1a664:	3720      	adds	r7, #32
   1a666:	46bd      	mov	sp, r7
   1a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1a66c:	4620      	mov	r0, r4
   1a66e:	f014 fc47 	bl	2ef00 <net_buf_unref>
	return 0;
   1a672:	2000      	movs	r0, #0
   1a674:	e7f6      	b.n	1a664 <bt_hci_cmd_send_sync+0x13c>
   1a676:	bf00      	nop
   1a678:	20003f40 	.word	0x20003f40
   1a67c:	2000057c 	.word	0x2000057c
   1a680:	0003392c 	.word	0x0003392c
   1a684:	00031cfc 	.word	0x00031cfc
   1a688:	000337d8 	.word	0x000337d8
   1a68c:	000338f4 	.word	0x000338f4
   1a690:	00033828 	.word	0x00033828
   1a694:	00033900 	.word	0x00033900

0001a698 <common_init>:
{
   1a698:	b510      	push	{r4, lr}
   1a69a:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1a69c:	4b22      	ldr	r3, [pc, #136]	; (1a728 <common_init+0x90>)
   1a69e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1a6a2:	689b      	ldr	r3, [r3, #8]
   1a6a4:	f013 0f01 	tst.w	r3, #1
   1a6a8:	d10d      	bne.n	1a6c6 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1a6aa:	aa01      	add	r2, sp, #4
   1a6ac:	2100      	movs	r1, #0
   1a6ae:	f640 4003 	movw	r0, #3075	; 0xc03
   1a6b2:	f7ff ff39 	bl	1a528 <bt_hci_cmd_send_sync>
		if (err) {
   1a6b6:	4604      	mov	r4, r0
   1a6b8:	b968      	cbnz	r0, 1a6d6 <common_init+0x3e>
		hci_reset_complete(rsp);
   1a6ba:	9801      	ldr	r0, [sp, #4]
   1a6bc:	f7fe fc8c 	bl	18fd8 <hci_reset_complete>
		net_buf_unref(rsp);
   1a6c0:	9801      	ldr	r0, [sp, #4]
   1a6c2:	f014 fc1d 	bl	2ef00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1a6c6:	aa01      	add	r2, sp, #4
   1a6c8:	2100      	movs	r1, #0
   1a6ca:	f241 0003 	movw	r0, #4099	; 0x1003
   1a6ce:	f7ff ff2b 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1a6d2:	4604      	mov	r4, r0
   1a6d4:	b110      	cbz	r0, 1a6dc <common_init+0x44>
}
   1a6d6:	4620      	mov	r0, r4
   1a6d8:	b002      	add	sp, #8
   1a6da:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   1a6dc:	9801      	ldr	r0, [sp, #4]
   1a6de:	f7fe fc93 	bl	19008 <read_local_features_complete>
	net_buf_unref(rsp);
   1a6e2:	9801      	ldr	r0, [sp, #4]
   1a6e4:	f014 fc0c 	bl	2ef00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1a6e8:	aa01      	add	r2, sp, #4
   1a6ea:	2100      	movs	r1, #0
   1a6ec:	f241 0001 	movw	r0, #4097	; 0x1001
   1a6f0:	f7ff ff1a 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1a6f4:	4604      	mov	r4, r0
   1a6f6:	2800      	cmp	r0, #0
   1a6f8:	d1ed      	bne.n	1a6d6 <common_init+0x3e>
	read_local_ver_complete(rsp);
   1a6fa:	9801      	ldr	r0, [sp, #4]
   1a6fc:	f7fe fc00 	bl	18f00 <read_local_ver_complete>
	net_buf_unref(rsp);
   1a700:	9801      	ldr	r0, [sp, #4]
   1a702:	f014 fbfd 	bl	2ef00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1a706:	aa01      	add	r2, sp, #4
   1a708:	2100      	movs	r1, #0
   1a70a:	f241 0002 	movw	r0, #4098	; 0x1002
   1a70e:	f7ff ff0b 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1a712:	4604      	mov	r4, r0
   1a714:	2800      	cmp	r0, #0
   1a716:	d1de      	bne.n	1a6d6 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   1a718:	9801      	ldr	r0, [sp, #4]
   1a71a:	f7fe fc7f 	bl	1901c <read_supported_commands_complete>
	net_buf_unref(rsp);
   1a71e:	9801      	ldr	r0, [sp, #4]
   1a720:	f014 fbee 	bl	2ef00 <net_buf_unref>
	return 0;
   1a724:	e7d7      	b.n	1a6d6 <common_init+0x3e>
   1a726:	bf00      	nop
   1a728:	20000438 	.word	0x20000438

0001a72c <hci_le_read_max_data_len>:
{
   1a72c:	b570      	push	{r4, r5, r6, lr}
   1a72e:	b088      	sub	sp, #32
   1a730:	4605      	mov	r5, r0
   1a732:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1a734:	aa01      	add	r2, sp, #4
   1a736:	2100      	movs	r1, #0
   1a738:	f242 002f 	movw	r0, #8239	; 0x202f
   1a73c:	f7ff fef4 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1a740:	4606      	mov	r6, r0
   1a742:	b960      	cbnz	r0, 1a75e <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   1a744:	9801      	ldr	r0, [sp, #4]
   1a746:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1a748:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1a74c:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1a74e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1a752:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   1a754:	f014 fbd4 	bl	2ef00 <net_buf_unref>
}
   1a758:	4630      	mov	r0, r6
   1a75a:	b008      	add	sp, #32
   1a75c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to read DLE max data len");
   1a75e:	4b12      	ldr	r3, [pc, #72]	; (1a7a8 <hci_le_read_max_data_len+0x7c>)
   1a760:	9307      	str	r3, [sp, #28]
   1a762:	2302      	movs	r3, #2
   1a764:	f88d 3000 	strb.w	r3, [sp]
   1a768:	2300      	movs	r3, #0
   1a76a:	f88d 3001 	strb.w	r3, [sp, #1]
   1a76e:	f88d 3002 	strb.w	r3, [sp, #2]
   1a772:	f88d 3003 	strb.w	r3, [sp, #3]
   1a776:	9a00      	ldr	r2, [sp, #0]
   1a778:	9206      	str	r2, [sp, #24]
   1a77a:	4619      	mov	r1, r3
   1a77c:	f363 0100 	bfi	r1, r3, #0, #1
   1a780:	f363 0141 	bfi	r1, r3, #1, #1
   1a784:	f363 0182 	bfi	r1, r3, #2, #1
   1a788:	f363 01c5 	bfi	r1, r3, #3, #3
   1a78c:	2201      	movs	r2, #1
   1a78e:	f362 1188 	bfi	r1, r2, #6, #3
   1a792:	2208      	movs	r2, #8
   1a794:	f362 2153 	bfi	r1, r2, #9, #11
   1a798:	f363 511f 	bfi	r1, r3, #20, #12
   1a79c:	aa06      	add	r2, sp, #24
   1a79e:	4803      	ldr	r0, [pc, #12]	; (1a7ac <hci_le_read_max_data_len+0x80>)
   1a7a0:	f7f9 fcac 	bl	140fc <z_impl_z_log_msg_static_create>
		return err;
   1a7a4:	e7d8      	b.n	1a758 <hci_le_read_max_data_len+0x2c>
   1a7a6:	bf00      	nop
   1a7a8:	00033948 	.word	0x00033948
   1a7ac:	00031cfc 	.word	0x00031cfc

0001a7b0 <le_set_event_mask>:
{
   1a7b0:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1a7b2:	2108      	movs	r1, #8
   1a7b4:	f242 0001 	movw	r0, #8193	; 0x2001
   1a7b8:	f7ff fe78 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   1a7bc:	b330      	cbz	r0, 1a80c <le_set_event_mask+0x5c>
   1a7be:	4604      	mov	r4, r0
   1a7c0:	2108      	movs	r1, #8
   1a7c2:	300c      	adds	r0, #12
   1a7c4:	f014 fbe7 	bl	2ef96 <net_buf_simple_add>
   1a7c8:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1a7ca:	4b12      	ldr	r3, [pc, #72]	; (1a814 <le_set_event_mask+0x64>)
   1a7cc:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   1a7d0:	f013 0f02 	tst.w	r3, #2
   1a7d4:	d117      	bne.n	1a806 <le_set_event_mask+0x56>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1a7d6:	200f      	movs	r0, #15
   1a7d8:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1a7da:	f013 0f20 	tst.w	r3, #32
   1a7de:	d001      	beq.n	1a7e4 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1a7e0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   1a7e4:	4b0b      	ldr	r3, [pc, #44]	; (1a814 <le_set_event_mask+0x64>)
   1a7e6:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1a7ea:	f013 0f09 	tst.w	r3, #9
   1a7ee:	d001      	beq.n	1a7f4 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1a7f0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	sys_put_le64(mask, cp_mask->events);
   1a7f4:	f012 f8ec 	bl	2c9d0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1a7f8:	2200      	movs	r2, #0
   1a7fa:	4621      	mov	r1, r4
   1a7fc:	f242 0001 	movw	r0, #8193	; 0x2001
   1a800:	f7ff fe92 	bl	1a528 <bt_hci_cmd_send_sync>
}
   1a804:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1a806:	202f      	movs	r0, #47	; 0x2f
   1a808:	2100      	movs	r1, #0
   1a80a:	e7e6      	b.n	1a7da <le_set_event_mask+0x2a>
		return -ENOBUFS;
   1a80c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a810:	e7f8      	b.n	1a804 <le_set_event_mask+0x54>
   1a812:	bf00      	nop
   1a814:	20000438 	.word	0x20000438

0001a818 <le_init>:
{
   1a818:	b510      	push	{r4, lr}
   1a81a:	b08a      	sub	sp, #40	; 0x28
	if (!BT_FEAT_LE(bt_dev.features)) {
   1a81c:	4b59      	ldr	r3, [pc, #356]	; (1a984 <le_init+0x16c>)
   1a81e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   1a822:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a826:	d00a      	beq.n	1a83e <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1a828:	aa03      	add	r2, sp, #12
   1a82a:	2100      	movs	r1, #0
   1a82c:	f242 0003 	movw	r0, #8195	; 0x2003
   1a830:	f7ff fe7a 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1a834:	4603      	mov	r3, r0
   1a836:	b340      	cbz	r0, 1a88a <le_init+0x72>
}
   1a838:	4618      	mov	r0, r3
   1a83a:	b00a      	add	sp, #40	; 0x28
   1a83c:	bd10      	pop	{r4, pc}
		LOG_ERR("Non-LE capable controller detected!");
   1a83e:	4b52      	ldr	r3, [pc, #328]	; (1a988 <le_init+0x170>)
   1a840:	9309      	str	r3, [sp, #36]	; 0x24
   1a842:	2302      	movs	r3, #2
   1a844:	f88d 3008 	strb.w	r3, [sp, #8]
   1a848:	2300      	movs	r3, #0
   1a84a:	f88d 3009 	strb.w	r3, [sp, #9]
   1a84e:	f88d 300a 	strb.w	r3, [sp, #10]
   1a852:	f88d 300b 	strb.w	r3, [sp, #11]
   1a856:	9a02      	ldr	r2, [sp, #8]
   1a858:	9208      	str	r2, [sp, #32]
   1a85a:	4619      	mov	r1, r3
   1a85c:	f363 0100 	bfi	r1, r3, #0, #1
   1a860:	f363 0141 	bfi	r1, r3, #1, #1
   1a864:	f363 0182 	bfi	r1, r3, #2, #1
   1a868:	f363 01c5 	bfi	r1, r3, #3, #3
   1a86c:	2201      	movs	r2, #1
   1a86e:	f362 1188 	bfi	r1, r2, #6, #3
   1a872:	2208      	movs	r2, #8
   1a874:	f362 2153 	bfi	r1, r2, #9, #11
   1a878:	f363 511f 	bfi	r1, r3, #20, #12
   1a87c:	aa08      	add	r2, sp, #32
   1a87e:	4843      	ldr	r0, [pc, #268]	; (1a98c <le_init+0x174>)
   1a880:	f7f9 fc3c 	bl	140fc <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1a884:	f06f 0312 	mvn.w	r3, #18
   1a888:	e7d6      	b.n	1a838 <le_init+0x20>
	read_le_features_complete(rsp);
   1a88a:	9803      	ldr	r0, [sp, #12]
   1a88c:	f7fe fbd0 	bl	19030 <read_le_features_complete>
	net_buf_unref(rsp);
   1a890:	9803      	ldr	r0, [sp, #12]
   1a892:	f014 fb35 	bl	2ef00 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1a896:	aa03      	add	r2, sp, #12
   1a898:	2100      	movs	r1, #0
   1a89a:	f242 0002 	movw	r0, #8194	; 0x2002
   1a89e:	f7ff fe43 	bl	1a528 <bt_hci_cmd_send_sync>
		if (err) {
   1a8a2:	4603      	mov	r3, r0
   1a8a4:	2800      	cmp	r0, #0
   1a8a6:	d1c7      	bne.n	1a838 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   1a8a8:	9803      	ldr	r0, [sp, #12]
   1a8aa:	f7fe fbcb 	bl	19044 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1a8ae:	9803      	ldr	r0, [sp, #12]
   1a8b0:	f014 fb26 	bl	2ef00 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1a8b4:	4b33      	ldr	r3, [pc, #204]	; (1a984 <le_init+0x16c>)
   1a8b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   1a8ba:	f013 0f20 	tst.w	r3, #32
   1a8be:	d032      	beq.n	1a926 <le_init+0x10e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1a8c0:	4b30      	ldr	r3, [pc, #192]	; (1a984 <le_init+0x16c>)
   1a8c2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   1a8c6:	f013 0f08 	tst.w	r3, #8
   1a8ca:	d144      	bne.n	1a956 <le_init+0x13e>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1a8cc:	4b2d      	ldr	r3, [pc, #180]	; (1a984 <le_init+0x16c>)
   1a8ce:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1a8d2:	f013 0f20 	tst.w	r3, #32
   1a8d6:	d022      	beq.n	1a91e <le_init+0x106>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1a8d8:	a902      	add	r1, sp, #8
   1a8da:	f10d 0006 	add.w	r0, sp, #6
   1a8de:	f7ff ff25 	bl	1a72c <hci_le_read_max_data_len>
		if (err) {
   1a8e2:	4603      	mov	r3, r0
   1a8e4:	2800      	cmp	r0, #0
   1a8e6:	d1a7      	bne.n	1a838 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1a8e8:	2104      	movs	r1, #4
   1a8ea:	f242 0024 	movw	r0, #8228	; 0x2024
   1a8ee:	f7ff fddd 	bl	1a4ac <bt_hci_cmd_create>
		if (!buf) {
   1a8f2:	4604      	mov	r4, r0
   1a8f4:	2800      	cmp	r0, #0
   1a8f6:	d03f      	beq.n	1a978 <le_init+0x160>
   1a8f8:	2104      	movs	r1, #4
   1a8fa:	300c      	adds	r0, #12
   1a8fc:	f014 fb4b 	bl	2ef96 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1a900:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a904:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1a906:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1a90a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1a90c:	2200      	movs	r2, #0
   1a90e:	4621      	mov	r1, r4
   1a910:	f242 0024 	movw	r0, #8228	; 0x2024
   1a914:	f7ff fe08 	bl	1a528 <bt_hci_cmd_send_sync>
		if (err) {
   1a918:	4603      	mov	r3, r0
   1a91a:	2800      	cmp	r0, #0
   1a91c:	d18c      	bne.n	1a838 <le_init+0x20>
	return  le_set_event_mask();
   1a91e:	f7ff ff47 	bl	1a7b0 <le_set_event_mask>
   1a922:	4603      	mov	r3, r0
   1a924:	e788      	b.n	1a838 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1a926:	2102      	movs	r1, #2
   1a928:	f640 406d 	movw	r0, #3181	; 0xc6d
   1a92c:	f7ff fdbe 	bl	1a4ac <bt_hci_cmd_create>
		if (!buf) {
   1a930:	4604      	mov	r4, r0
   1a932:	b320      	cbz	r0, 1a97e <le_init+0x166>
   1a934:	2102      	movs	r1, #2
   1a936:	300c      	adds	r0, #12
   1a938:	f014 fb2d 	bl	2ef96 <net_buf_simple_add>
		cp_le->le = 0x01;
   1a93c:	2301      	movs	r3, #1
   1a93e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1a940:	2200      	movs	r2, #0
   1a942:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1a944:	4621      	mov	r1, r4
   1a946:	f640 406d 	movw	r0, #3181	; 0xc6d
   1a94a:	f7ff fded 	bl	1a528 <bt_hci_cmd_send_sync>
		if (err) {
   1a94e:	4603      	mov	r3, r0
   1a950:	2800      	cmp	r0, #0
   1a952:	d0b5      	beq.n	1a8c0 <le_init+0xa8>
   1a954:	e770      	b.n	1a838 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1a956:	aa03      	add	r2, sp, #12
   1a958:	2100      	movs	r1, #0
   1a95a:	f242 001c 	movw	r0, #8220	; 0x201c
   1a95e:	f7ff fde3 	bl	1a528 <bt_hci_cmd_send_sync>
		if (err) {
   1a962:	4603      	mov	r3, r0
   1a964:	2800      	cmp	r0, #0
   1a966:	f47f af67 	bne.w	1a838 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   1a96a:	9803      	ldr	r0, [sp, #12]
   1a96c:	f7fe fade 	bl	18f2c <le_read_supp_states_complete>
		net_buf_unref(rsp);
   1a970:	9803      	ldr	r0, [sp, #12]
   1a972:	f014 fac5 	bl	2ef00 <net_buf_unref>
   1a976:	e7a9      	b.n	1a8cc <le_init+0xb4>
			return -ENOBUFS;
   1a978:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1a97c:	e75c      	b.n	1a838 <le_init+0x20>
			return -ENOBUFS;
   1a97e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1a982:	e759      	b.n	1a838 <le_init+0x20>
   1a984:	20000438 	.word	0x20000438
   1a988:	00033968 	.word	0x00033968
   1a98c:	00031cfc 	.word	0x00031cfc

0001a990 <bt_br_init>:
{
   1a990:	b510      	push	{r4, lr}
   1a992:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   1a994:	4b0b      	ldr	r3, [pc, #44]	; (1a9c4 <bt_br_init+0x34>)
   1a996:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
   1a99a:	b11b      	cbz	r3, 1a9a4 <bt_br_init+0x14>
		return 0;
   1a99c:	2400      	movs	r4, #0
}
   1a99e:	4620      	mov	r0, r4
   1a9a0:	b002      	add	sp, #8
   1a9a2:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1a9a4:	aa01      	add	r2, sp, #4
   1a9a6:	2100      	movs	r1, #0
   1a9a8:	f241 0005 	movw	r0, #4101	; 0x1005
   1a9ac:	f7ff fdbc 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1a9b0:	4604      	mov	r4, r0
   1a9b2:	2800      	cmp	r0, #0
   1a9b4:	d1f3      	bne.n	1a99e <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   1a9b6:	9801      	ldr	r0, [sp, #4]
   1a9b8:	f7fe fb5a 	bl	19070 <read_buffer_size_complete>
	net_buf_unref(rsp);
   1a9bc:	9801      	ldr	r0, [sp, #4]
   1a9be:	f014 fa9f 	bl	2ef00 <net_buf_unref>
	return 0;
   1a9c2:	e7ec      	b.n	1a99e <bt_br_init+0xe>
   1a9c4:	20000438 	.word	0x20000438

0001a9c8 <set_event_mask>:
{
   1a9c8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1a9ca:	2108      	movs	r1, #8
   1a9cc:	f640 4001 	movw	r0, #3073	; 0xc01
   1a9d0:	f7ff fd6c 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   1a9d4:	b188      	cbz	r0, 1a9fa <set_event_mask+0x32>
   1a9d6:	4604      	mov	r4, r0
   1a9d8:	2108      	movs	r1, #8
   1a9da:	300c      	adds	r0, #12
   1a9dc:	f014 fadb 	bl	2ef96 <net_buf_simple_add>
   1a9e0:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   1a9e2:	4807      	ldr	r0, [pc, #28]	; (1aa00 <set_event_mask+0x38>)
   1a9e4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1a9e8:	f011 fff2 	bl	2c9d0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1a9ec:	2200      	movs	r2, #0
   1a9ee:	4621      	mov	r1, r4
   1a9f0:	f640 4001 	movw	r0, #3073	; 0xc01
   1a9f4:	f7ff fd98 	bl	1a528 <bt_hci_cmd_send_sync>
}
   1a9f8:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1a9fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a9fe:	e7fb      	b.n	1a9f8 <set_event_mask+0x30>
   1aa00:	02008810 	.word	0x02008810

0001aa04 <hci_vs_init>:
{
   1aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa08:	b096      	sub	sp, #88	; 0x58
   1aa0a:	af00      	add	r7, sp, #0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1aa0c:	f107 020c 	add.w	r2, r7, #12
   1aa10:	2100      	movs	r1, #0
   1aa12:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1aa16:	f7ff fd87 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1aa1a:	bb60      	cbnz	r0, 1aa76 <hci_vs_init+0x72>
	rp.info = (void *)rsp->data;
   1aa1c:	68fb      	ldr	r3, [r7, #12]
   1aa1e:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1aa20:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1aa24:	4630      	mov	r0, r6
   1aa26:	f7fe faaf 	bl	18f88 <vs_hw_platform>
   1aa2a:	466d      	mov	r5, sp
   1aa2c:	2300      	movs	r3, #0
   1aa2e:	723b      	strb	r3, [r7, #8]
   1aa30:	2302      	movs	r3, #2
   1aa32:	727b      	strb	r3, [r7, #9]
   1aa34:	b08a      	sub	sp, #40	; 0x28
   1aa36:	46ec      	mov	ip, sp
   1aa38:	f11c 0210 	adds.w	r2, ip, #16
   1aa3c:	d03b      	beq.n	1aab6 <hci_vs_init+0xb2>
   1aa3e:	f04f 0e12 	mov.w	lr, #18
   1aa42:	b12a      	cbz	r2, 1aa50 <hci_vs_init+0x4c>
   1aa44:	f1be 0f04 	cmp.w	lr, #4
   1aa48:	dd02      	ble.n	1aa50 <hci_vs_init+0x4c>
   1aa4a:	4bbd      	ldr	r3, [pc, #756]	; (1ad40 <hci_vs_init+0x33c>)
   1aa4c:	f8cc 3014 	str.w	r3, [ip, #20]
   1aa50:	2300      	movs	r3, #0
   1aa52:	713b      	strb	r3, [r7, #4]
   1aa54:	2302      	movs	r3, #2
   1aa56:	717b      	strb	r3, [r7, #5]
   1aa58:	b3d2      	cbz	r2, 1aad0 <hci_vs_init+0xcc>
   1aa5a:	4673      	mov	r3, lr
   1aa5c:	f1be 0f08 	cmp.w	lr, #8
   1aa60:	dd01      	ble.n	1aa66 <hci_vs_init+0x62>
   1aa62:	f8cc 0018 	str.w	r0, [ip, #24]
   1aa66:	2b0c      	cmp	r3, #12
   1aa68:	dd01      	ble.n	1aa6e <hci_vs_init+0x6a>
   1aa6a:	f8cc 601c 	str.w	r6, [ip, #28]
   1aa6e:	f10c 0320 	add.w	r3, ip, #32
   1aa72:	2100      	movs	r1, #0
   1aa74:	e02a      	b.n	1aacc <hci_vs_init+0xc8>
		LOG_WRN("Vendor HCI extensions not available");
   1aa76:	4bb3      	ldr	r3, [pc, #716]	; (1ad44 <hci_vs_init+0x340>)
   1aa78:	657b      	str	r3, [r7, #84]	; 0x54
   1aa7a:	2202      	movs	r2, #2
   1aa7c:	723a      	strb	r2, [r7, #8]
   1aa7e:	2300      	movs	r3, #0
   1aa80:	727b      	strb	r3, [r7, #9]
   1aa82:	72bb      	strb	r3, [r7, #10]
   1aa84:	72fb      	strb	r3, [r7, #11]
   1aa86:	68b9      	ldr	r1, [r7, #8]
   1aa88:	6539      	str	r1, [r7, #80]	; 0x50
   1aa8a:	4619      	mov	r1, r3
   1aa8c:	f363 0100 	bfi	r1, r3, #0, #1
   1aa90:	f363 0141 	bfi	r1, r3, #1, #1
   1aa94:	f363 0182 	bfi	r1, r3, #2, #1
   1aa98:	f363 01c5 	bfi	r1, r3, #3, #3
   1aa9c:	f362 1188 	bfi	r1, r2, #6, #3
   1aaa0:	2208      	movs	r2, #8
   1aaa2:	f362 2153 	bfi	r1, r2, #9, #11
   1aaa6:	f363 511f 	bfi	r1, r3, #20, #12
   1aaaa:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1aaae:	48a6      	ldr	r0, [pc, #664]	; (1ad48 <hci_vs_init+0x344>)
   1aab0:	f7f9 fb24 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   1aab4:	e11c      	b.n	1acf0 <hci_vs_init+0x2ec>
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1aab6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1aaba:	e7c2      	b.n	1aa42 <hci_vs_init+0x3e>
   1aabc:	f101 0058 	add.w	r0, r1, #88	; 0x58
   1aac0:	4438      	add	r0, r7
   1aac2:	f810 0c54 	ldrb.w	r0, [r0, #-84]
   1aac6:	f803 0b01 	strb.w	r0, [r3], #1
   1aaca:	3101      	adds	r1, #1
   1aacc:	2901      	cmp	r1, #1
   1aace:	d9f5      	bls.n	1aabc <hci_vs_init+0xb8>
   1aad0:	f1be 0f11 	cmp.w	lr, #17
   1aad4:	dd4f      	ble.n	1ab76 <hci_vs_init+0x172>
   1aad6:	2312      	movs	r3, #18
   1aad8:	b14a      	cbz	r2, 1aaee <hci_vs_init+0xea>
   1aada:	2104      	movs	r1, #4
   1aadc:	7239      	strb	r1, [r7, #8]
   1aade:	2100      	movs	r1, #0
   1aae0:	7279      	strb	r1, [r7, #9]
   1aae2:	72b9      	strb	r1, [r7, #10]
   1aae4:	2101      	movs	r1, #1
   1aae6:	72f9      	strb	r1, [r7, #11]
   1aae8:	68b8      	ldr	r0, [r7, #8]
   1aaea:	f8cc 0010 	str.w	r0, [ip, #16]
   1aaee:	2100      	movs	r1, #0
   1aaf0:	f36f 0100 	bfc	r1, #0, #1
   1aaf4:	f36f 0141 	bfc	r1, #1, #1
   1aaf8:	f36f 0182 	bfc	r1, #2, #1
   1aafc:	f36f 01c5 	bfc	r1, #3, #3
   1ab00:	2003      	movs	r0, #3
   1ab02:	f360 1188 	bfi	r1, r0, #6, #3
   1ab06:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1ab0a:	f363 2153 	bfi	r1, r3, #9, #11
   1ab0e:	f36f 511f 	bfc	r1, #20, #12
   1ab12:	2300      	movs	r3, #0
   1ab14:	488c      	ldr	r0, [pc, #560]	; (1ad48 <hci_vs_init+0x344>)
   1ab16:	f7f9 faf1 	bl	140fc <z_impl_z_log_msg_static_create>
   1ab1a:	46ad      	mov	sp, r5
	LOG_INF("HW Variant: %s (0x%04x)",
   1ab1c:	f8b4 6003 	ldrh.w	r6, [r4, #3]
   1ab20:	4631      	mov	r1, r6
   1ab22:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1ab26:	f7fe fa3b 	bl	18fa0 <vs_hw_variant>
   1ab2a:	466d      	mov	r5, sp
   1ab2c:	2300      	movs	r3, #0
   1ab2e:	723b      	strb	r3, [r7, #8]
   1ab30:	2302      	movs	r3, #2
   1ab32:	727b      	strb	r3, [r7, #9]
   1ab34:	b08a      	sub	sp, #40	; 0x28
   1ab36:	46ec      	mov	ip, sp
   1ab38:	f11c 0210 	adds.w	r2, ip, #16
   1ab3c:	d01e      	beq.n	1ab7c <hci_vs_init+0x178>
   1ab3e:	f04f 0e12 	mov.w	lr, #18
   1ab42:	b12a      	cbz	r2, 1ab50 <hci_vs_init+0x14c>
   1ab44:	f1be 0f04 	cmp.w	lr, #4
   1ab48:	dd02      	ble.n	1ab50 <hci_vs_init+0x14c>
   1ab4a:	4b80      	ldr	r3, [pc, #512]	; (1ad4c <hci_vs_init+0x348>)
   1ab4c:	f8cc 3014 	str.w	r3, [ip, #20]
   1ab50:	2300      	movs	r3, #0
   1ab52:	713b      	strb	r3, [r7, #4]
   1ab54:	2302      	movs	r3, #2
   1ab56:	717b      	strb	r3, [r7, #5]
   1ab58:	b1ea      	cbz	r2, 1ab96 <hci_vs_init+0x192>
   1ab5a:	4673      	mov	r3, lr
   1ab5c:	f1be 0f08 	cmp.w	lr, #8
   1ab60:	dd01      	ble.n	1ab66 <hci_vs_init+0x162>
   1ab62:	f8cc 0018 	str.w	r0, [ip, #24]
   1ab66:	2b0c      	cmp	r3, #12
   1ab68:	dd01      	ble.n	1ab6e <hci_vs_init+0x16a>
   1ab6a:	f8cc 601c 	str.w	r6, [ip, #28]
   1ab6e:	f10c 0320 	add.w	r3, ip, #32
   1ab72:	2100      	movs	r1, #0
   1ab74:	e00d      	b.n	1ab92 <hci_vs_init+0x18e>
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1ab76:	f06f 031b 	mvn.w	r3, #27
   1ab7a:	e7ad      	b.n	1aad8 <hci_vs_init+0xd4>
	LOG_INF("HW Variant: %s (0x%04x)",
   1ab7c:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1ab80:	e7df      	b.n	1ab42 <hci_vs_init+0x13e>
   1ab82:	f101 0058 	add.w	r0, r1, #88	; 0x58
   1ab86:	4438      	add	r0, r7
   1ab88:	f810 0c54 	ldrb.w	r0, [r0, #-84]
   1ab8c:	f803 0b01 	strb.w	r0, [r3], #1
   1ab90:	3101      	adds	r1, #1
   1ab92:	2901      	cmp	r1, #1
   1ab94:	d9f5      	bls.n	1ab82 <hci_vs_init+0x17e>
   1ab96:	f1be 0f11 	cmp.w	lr, #17
   1ab9a:	dd5a      	ble.n	1ac52 <hci_vs_init+0x24e>
   1ab9c:	2312      	movs	r3, #18
   1ab9e:	b14a      	cbz	r2, 1abb4 <hci_vs_init+0x1b0>
   1aba0:	2104      	movs	r1, #4
   1aba2:	7239      	strb	r1, [r7, #8]
   1aba4:	2100      	movs	r1, #0
   1aba6:	7279      	strb	r1, [r7, #9]
   1aba8:	72b9      	strb	r1, [r7, #10]
   1abaa:	2101      	movs	r1, #1
   1abac:	72f9      	strb	r1, [r7, #11]
   1abae:	68b8      	ldr	r0, [r7, #8]
   1abb0:	f8cc 0010 	str.w	r0, [ip, #16]
   1abb4:	2100      	movs	r1, #0
   1abb6:	f36f 0100 	bfc	r1, #0, #1
   1abba:	f36f 0141 	bfc	r1, #1, #1
   1abbe:	f36f 0182 	bfc	r1, #2, #1
   1abc2:	f36f 01c5 	bfc	r1, #3, #3
   1abc6:	2003      	movs	r0, #3
   1abc8:	f360 1188 	bfi	r1, r0, #6, #3
   1abcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1abd0:	f363 2153 	bfi	r1, r3, #9, #11
   1abd4:	f36f 511f 	bfc	r1, #20, #12
   1abd8:	2300      	movs	r3, #0
   1abda:	485b      	ldr	r0, [pc, #364]	; (1ad48 <hci_vs_init+0x344>)
   1abdc:	f7f9 fa8e 	bl	140fc <z_impl_z_log_msg_static_create>
   1abe0:	46ad      	mov	sp, r5
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1abe2:	7966      	ldrb	r6, [r4, #5]
   1abe4:	4630      	mov	r0, r6
   1abe6:	f7fe f9eb 	bl	18fc0 <vs_fw_variant>
   1abea:	f894 e006 	ldrb.w	lr, [r4, #6]
   1abee:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   1abf2:	f8d4 8009 	ldr.w	r8, [r4, #9]
   1abf6:	466d      	mov	r5, sp
   1abf8:	2300      	movs	r3, #0
   1abfa:	723b      	strb	r3, [r7, #8]
   1abfc:	2302      	movs	r3, #2
   1abfe:	727b      	strb	r3, [r7, #9]
   1ac00:	b08c      	sub	sp, #48	; 0x30
   1ac02:	466c      	mov	r4, sp
   1ac04:	f114 0210 	adds.w	r2, r4, #16
   1ac08:	d026      	beq.n	1ac58 <hci_vs_init+0x254>
   1ac0a:	f04f 0c1e 	mov.w	ip, #30
   1ac0e:	b122      	cbz	r2, 1ac1a <hci_vs_init+0x216>
   1ac10:	f1bc 0f04 	cmp.w	ip, #4
   1ac14:	dd01      	ble.n	1ac1a <hci_vs_init+0x216>
   1ac16:	4b4e      	ldr	r3, [pc, #312]	; (1ad50 <hci_vs_init+0x34c>)
   1ac18:	6163      	str	r3, [r4, #20]
   1ac1a:	2300      	movs	r3, #0
   1ac1c:	713b      	strb	r3, [r7, #4]
   1ac1e:	2302      	movs	r3, #2
   1ac20:	717b      	strb	r3, [r7, #5]
   1ac22:	b332      	cbz	r2, 1ac72 <hci_vs_init+0x26e>
   1ac24:	4663      	mov	r3, ip
   1ac26:	f1bc 0f08 	cmp.w	ip, #8
   1ac2a:	dd00      	ble.n	1ac2e <hci_vs_init+0x22a>
   1ac2c:	61a0      	str	r0, [r4, #24]
   1ac2e:	2b0c      	cmp	r3, #12
   1ac30:	dd00      	ble.n	1ac34 <hci_vs_init+0x230>
   1ac32:	61e6      	str	r6, [r4, #28]
   1ac34:	2b10      	cmp	r3, #16
   1ac36:	dd01      	ble.n	1ac3c <hci_vs_init+0x238>
   1ac38:	f8c4 e020 	str.w	lr, [r4, #32]
   1ac3c:	2b14      	cmp	r3, #20
   1ac3e:	dd00      	ble.n	1ac42 <hci_vs_init+0x23e>
   1ac40:	6261      	str	r1, [r4, #36]	; 0x24
   1ac42:	2b18      	cmp	r3, #24
   1ac44:	dd01      	ble.n	1ac4a <hci_vs_init+0x246>
   1ac46:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
   1ac4a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1ac4e:	2100      	movs	r1, #0
   1ac50:	e00d      	b.n	1ac6e <hci_vs_init+0x26a>
	LOG_INF("HW Variant: %s (0x%04x)",
   1ac52:	f06f 031b 	mvn.w	r3, #27
   1ac56:	e7a2      	b.n	1ab9e <hci_vs_init+0x19a>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1ac58:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   1ac5c:	e7d7      	b.n	1ac0e <hci_vs_init+0x20a>
   1ac5e:	f101 0058 	add.w	r0, r1, #88	; 0x58
   1ac62:	4438      	add	r0, r7
   1ac64:	f810 0c54 	ldrb.w	r0, [r0, #-84]
   1ac68:	f803 0b01 	strb.w	r0, [r3], #1
   1ac6c:	3101      	adds	r1, #1
   1ac6e:	2901      	cmp	r1, #1
   1ac70:	d9f5      	bls.n	1ac5e <hci_vs_init+0x25a>
   1ac72:	f1bc 0f1d 	cmp.w	ip, #29
   1ac76:	dd3f      	ble.n	1acf8 <hci_vs_init+0x2f4>
   1ac78:	231e      	movs	r3, #30
   1ac7a:	b142      	cbz	r2, 1ac8e <hci_vs_init+0x28a>
   1ac7c:	2107      	movs	r1, #7
   1ac7e:	7239      	strb	r1, [r7, #8]
   1ac80:	2100      	movs	r1, #0
   1ac82:	7279      	strb	r1, [r7, #9]
   1ac84:	72b9      	strb	r1, [r7, #10]
   1ac86:	2101      	movs	r1, #1
   1ac88:	72f9      	strb	r1, [r7, #11]
   1ac8a:	68b8      	ldr	r0, [r7, #8]
   1ac8c:	6120      	str	r0, [r4, #16]
   1ac8e:	2100      	movs	r1, #0
   1ac90:	f36f 0100 	bfc	r1, #0, #1
   1ac94:	f36f 0141 	bfc	r1, #1, #1
   1ac98:	f36f 0182 	bfc	r1, #2, #1
   1ac9c:	f36f 01c5 	bfc	r1, #3, #3
   1aca0:	2003      	movs	r0, #3
   1aca2:	f360 1188 	bfi	r1, r0, #6, #3
   1aca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1acaa:	f363 2153 	bfi	r1, r3, #9, #11
   1acae:	f36f 511f 	bfc	r1, #20, #12
   1acb2:	2300      	movs	r3, #0
   1acb4:	4824      	ldr	r0, [pc, #144]	; (1ad48 <hci_vs_init+0x344>)
   1acb6:	f7f9 fa21 	bl	140fc <z_impl_z_log_msg_static_create>
   1acba:	46ad      	mov	sp, r5
	net_buf_unref(rsp);
   1acbc:	68f8      	ldr	r0, [r7, #12]
   1acbe:	f014 f91f 	bl	2ef00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1acc2:	f107 020c 	add.w	r2, r7, #12
   1acc6:	2100      	movs	r1, #0
   1acc8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1accc:	f7ff fc2c 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1acd0:	b9a8      	cbnz	r0, 1acfe <hci_vs_init+0x2fa>
	rp.cmds = (void *)rsp->data;
   1acd2:	68fb      	ldr	r3, [r7, #12]
   1acd4:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1acd6:	4c1f      	ldr	r4, [pc, #124]	; (1ad54 <hci_vs_init+0x350>)
   1acd8:	2202      	movs	r2, #2
   1acda:	3101      	adds	r1, #1
   1acdc:	4620      	mov	r0, r4
   1acde:	f011 fd85 	bl	2c7ec <memcpy>
	net_buf_unref(rsp);
   1ace2:	68f8      	ldr	r0, [r7, #12]
   1ace4:	f014 f90c 	bl	2ef00 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1ace8:	7823      	ldrb	r3, [r4, #0]
   1acea:	f013 0f04 	tst.w	r3, #4
   1acee:	d135      	bne.n	1ad5c <hci_vs_init+0x358>
}
   1acf0:	3758      	adds	r7, #88	; 0x58
   1acf2:	46bd      	mov	sp, r7
   1acf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1acf8:	f06f 031b 	mvn.w	r3, #27
   1acfc:	e7bd      	b.n	1ac7a <hci_vs_init+0x276>
		LOG_WRN("Failed to read supported vendor commands");
   1acfe:	4b16      	ldr	r3, [pc, #88]	; (1ad58 <hci_vs_init+0x354>)
   1ad00:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ad02:	2202      	movs	r2, #2
   1ad04:	723a      	strb	r2, [r7, #8]
   1ad06:	2300      	movs	r3, #0
   1ad08:	727b      	strb	r3, [r7, #9]
   1ad0a:	72bb      	strb	r3, [r7, #10]
   1ad0c:	72fb      	strb	r3, [r7, #11]
   1ad0e:	68b9      	ldr	r1, [r7, #8]
   1ad10:	63b9      	str	r1, [r7, #56]	; 0x38
   1ad12:	4619      	mov	r1, r3
   1ad14:	f363 0100 	bfi	r1, r3, #0, #1
   1ad18:	f363 0141 	bfi	r1, r3, #1, #1
   1ad1c:	f363 0182 	bfi	r1, r3, #2, #1
   1ad20:	f363 01c5 	bfi	r1, r3, #3, #3
   1ad24:	f362 1188 	bfi	r1, r2, #6, #3
   1ad28:	2208      	movs	r2, #8
   1ad2a:	f362 2153 	bfi	r1, r2, #9, #11
   1ad2e:	f363 511f 	bfi	r1, r3, #20, #12
   1ad32:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1ad36:	4804      	ldr	r0, [pc, #16]	; (1ad48 <hci_vs_init+0x344>)
   1ad38:	f7f9 f9e0 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   1ad3c:	e7d8      	b.n	1acf0 <hci_vs_init+0x2ec>
   1ad3e:	bf00      	nop
   1ad40:	000339b0 	.word	0x000339b0
   1ad44:	0003398c 	.word	0x0003398c
   1ad48:	00031cfc 	.word	0x00031cfc
   1ad4c:	000339cc 	.word	0x000339cc
   1ad50:	000339e4 	.word	0x000339e4
   1ad54:	200004f9 	.word	0x200004f9
   1ad58:	00033a14 	.word	0x00033a14
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1ad5c:	f107 020c 	add.w	r2, r7, #12
   1ad60:	2100      	movs	r1, #0
   1ad62:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1ad66:	f7ff fbdf 	bl	1a528 <bt_hci_cmd_send_sync>
		if (err) {
   1ad6a:	b950      	cbnz	r0, 1ad82 <hci_vs_init+0x37e>
		rp.feat = (void *)rsp->data;
   1ad6c:	68fb      	ldr	r3, [r7, #12]
   1ad6e:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1ad70:	2201      	movs	r2, #1
   1ad72:	4411      	add	r1, r2
   1ad74:	4813      	ldr	r0, [pc, #76]	; (1adc4 <hci_vs_init+0x3c0>)
   1ad76:	f011 fd39 	bl	2c7ec <memcpy>
		net_buf_unref(rsp);
   1ad7a:	68f8      	ldr	r0, [r7, #12]
   1ad7c:	f014 f8c0 	bl	2ef00 <net_buf_unref>
   1ad80:	e7b6      	b.n	1acf0 <hci_vs_init+0x2ec>
			LOG_WRN("Failed to read supported vendor features");
   1ad82:	4b11      	ldr	r3, [pc, #68]	; (1adc8 <hci_vs_init+0x3c4>)
   1ad84:	627b      	str	r3, [r7, #36]	; 0x24
   1ad86:	2202      	movs	r2, #2
   1ad88:	723a      	strb	r2, [r7, #8]
   1ad8a:	2300      	movs	r3, #0
   1ad8c:	727b      	strb	r3, [r7, #9]
   1ad8e:	72bb      	strb	r3, [r7, #10]
   1ad90:	72fb      	strb	r3, [r7, #11]
   1ad92:	68b9      	ldr	r1, [r7, #8]
   1ad94:	6239      	str	r1, [r7, #32]
   1ad96:	4619      	mov	r1, r3
   1ad98:	f363 0100 	bfi	r1, r3, #0, #1
   1ad9c:	f363 0141 	bfi	r1, r3, #1, #1
   1ada0:	f363 0182 	bfi	r1, r3, #2, #1
   1ada4:	f363 01c5 	bfi	r1, r3, #3, #3
   1ada8:	f362 1188 	bfi	r1, r2, #6, #3
   1adac:	2208      	movs	r2, #8
   1adae:	f362 2153 	bfi	r1, r2, #9, #11
   1adb2:	f363 511f 	bfi	r1, r3, #20, #12
   1adb6:	f107 0220 	add.w	r2, r7, #32
   1adba:	4804      	ldr	r0, [pc, #16]	; (1adcc <hci_vs_init+0x3c8>)
   1adbc:	f7f9 f99e 	bl	140fc <z_impl_z_log_msg_static_create>
			return;
   1adc0:	e796      	b.n	1acf0 <hci_vs_init+0x2ec>
   1adc2:	bf00      	nop
   1adc4:	200004f8 	.word	0x200004f8
   1adc8:	00033a40 	.word	0x00033a40
   1adcc:	00031cfc 	.word	0x00031cfc

0001add0 <hci_init>:
{
   1add0:	b500      	push	{lr}
   1add2:	b089      	sub	sp, #36	; 0x24
	err = common_init();
   1add4:	f7ff fc60 	bl	1a698 <common_init>
	if (err) {
   1add8:	4603      	mov	r3, r0
   1adda:	b118      	cbz	r0, 1ade4 <hci_init+0x14>
}
   1addc:	4618      	mov	r0, r3
   1adde:	b009      	add	sp, #36	; 0x24
   1ade0:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   1ade4:	f7ff fd18 	bl	1a818 <le_init>
	if (err) {
   1ade8:	4603      	mov	r3, r0
   1adea:	2800      	cmp	r0, #0
   1adec:	d1f6      	bne.n	1addc <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1adee:	4b20      	ldr	r3, [pc, #128]	; (1ae70 <hci_init+0xa0>)
   1adf0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   1adf4:	f013 0f20 	tst.w	r3, #32
   1adf8:	d00e      	beq.n	1ae18 <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   1adfa:	4b1d      	ldr	r3, [pc, #116]	; (1ae70 <hci_init+0xa0>)
   1adfc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
   1ae00:	b183      	cbz	r3, 1ae24 <hci_init+0x54>
	err = set_event_mask();
   1ae02:	f7ff fde1 	bl	1a9c8 <set_event_mask>
	if (err) {
   1ae06:	4603      	mov	r3, r0
   1ae08:	2800      	cmp	r0, #0
   1ae0a:	d1e7      	bne.n	1addc <hci_init+0xc>
	hci_vs_init();
   1ae0c:	f7ff fdfa 	bl	1aa04 <hci_vs_init>
	err = bt_id_init();
   1ae10:	f001 f9f4 	bl	1c1fc <bt_id_init>
   1ae14:	4603      	mov	r3, r0
	if (err) {
   1ae16:	e7e1      	b.n	1addc <hci_init+0xc>
		err = bt_br_init();
   1ae18:	f7ff fdba 	bl	1a990 <bt_br_init>
		if (err) {
   1ae1c:	4603      	mov	r3, r0
   1ae1e:	2800      	cmp	r0, #0
   1ae20:	d0ef      	beq.n	1ae02 <hci_init+0x32>
   1ae22:	e7db      	b.n	1addc <hci_init+0xc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1ae24:	4b13      	ldr	r3, [pc, #76]	; (1ae74 <hci_init+0xa4>)
   1ae26:	9307      	str	r3, [sp, #28]
   1ae28:	2302      	movs	r3, #2
   1ae2a:	f88d 3004 	strb.w	r3, [sp, #4]
   1ae2e:	2300      	movs	r3, #0
   1ae30:	f88d 3005 	strb.w	r3, [sp, #5]
   1ae34:	f88d 3006 	strb.w	r3, [sp, #6]
   1ae38:	f88d 3007 	strb.w	r3, [sp, #7]
   1ae3c:	9a01      	ldr	r2, [sp, #4]
   1ae3e:	9206      	str	r2, [sp, #24]
   1ae40:	4619      	mov	r1, r3
   1ae42:	f363 0100 	bfi	r1, r3, #0, #1
   1ae46:	f363 0141 	bfi	r1, r3, #1, #1
   1ae4a:	f363 0182 	bfi	r1, r3, #2, #1
   1ae4e:	f363 01c5 	bfi	r1, r3, #3, #3
   1ae52:	2201      	movs	r2, #1
   1ae54:	f362 1188 	bfi	r1, r2, #6, #3
   1ae58:	2208      	movs	r2, #8
   1ae5a:	f362 2153 	bfi	r1, r2, #9, #11
   1ae5e:	f363 511f 	bfi	r1, r3, #20, #12
   1ae62:	aa06      	add	r2, sp, #24
   1ae64:	4804      	ldr	r0, [pc, #16]	; (1ae78 <hci_init+0xa8>)
   1ae66:	f7f9 f949 	bl	140fc <z_impl_z_log_msg_static_create>
		return -EIO;
   1ae6a:	f06f 0304 	mvn.w	r3, #4
   1ae6e:	e7b5      	b.n	1addc <hci_init+0xc>
   1ae70:	20000438 	.word	0x20000438
   1ae74:	00033a6c 	.word	0x00033a6c
   1ae78:	00031cfc 	.word	0x00031cfc

0001ae7c <bt_hci_le_rand>:
{
   1ae7c:	b570      	push	{r4, r5, r6, lr}
   1ae7e:	b082      	sub	sp, #8
   1ae80:	4606      	mov	r6, r0
   1ae82:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1ae84:	4b12      	ldr	r3, [pc, #72]	; (1aed0 <bt_hci_le_rand+0x54>)
   1ae86:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   1ae8a:	2b00      	cmp	r3, #0
   1ae8c:	da1d      	bge.n	1aeca <bt_hci_le_rand+0x4e>
	while (len > 0) {
   1ae8e:	b1c4      	cbz	r4, 1aec2 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   1ae90:	4625      	mov	r5, r4
   1ae92:	2c08      	cmp	r4, #8
   1ae94:	bf28      	it	cs
   1ae96:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1ae98:	aa01      	add	r2, sp, #4
   1ae9a:	2100      	movs	r1, #0
   1ae9c:	f242 0018 	movw	r0, #8216	; 0x2018
   1aea0:	f7ff fb42 	bl	1a528 <bt_hci_cmd_send_sync>
		if (err) {
   1aea4:	4603      	mov	r3, r0
   1aea6:	b968      	cbnz	r0, 1aec4 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   1aea8:	9b01      	ldr	r3, [sp, #4]
   1aeaa:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
   1aeac:	462a      	mov	r2, r5
   1aeae:	3101      	adds	r1, #1
   1aeb0:	4630      	mov	r0, r6
   1aeb2:	f011 fc9b 	bl	2c7ec <memcpy>
		net_buf_unref(rsp);
   1aeb6:	9801      	ldr	r0, [sp, #4]
   1aeb8:	f014 f822 	bl	2ef00 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1aebc:	442e      	add	r6, r5
		len -= count;
   1aebe:	1b64      	subs	r4, r4, r5
   1aec0:	e7e5      	b.n	1ae8e <bt_hci_le_rand+0x12>
	return 0;
   1aec2:	2300      	movs	r3, #0
}
   1aec4:	4618      	mov	r0, r3
   1aec6:	b002      	add	sp, #8
   1aec8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1aeca:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1aece:	e7f9      	b.n	1aec4 <bt_hci_le_rand+0x48>
   1aed0:	20000438 	.word	0x20000438

0001aed4 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   1aed4:	7a83      	ldrb	r3, [r0, #10]
   1aed6:	2b07      	cmp	r3, #7
   1aed8:	d000      	beq.n	1aedc <conn_auto_initiate+0x8>
   1aeda:	4770      	bx	lr
{
   1aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aede:	b085      	sub	sp, #20
   1aee0:	af02      	add	r7, sp, #8
   1aee2:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1aee4:	210c      	movs	r1, #12
   1aee6:	3004      	adds	r0, #4
   1aee8:	f011 fdb5 	bl	2ca56 <atomic_test_bit>
   1aeec:	2800      	cmp	r0, #0
   1aeee:	d142      	bne.n	1af76 <conn_auto_initiate+0xa2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1aef0:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1aef2:	b12b      	cbz	r3, 1af00 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1aef4:	4b77      	ldr	r3, [pc, #476]	; (1b0d4 <conn_auto_initiate+0x200>)
   1aef6:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1aefa:	f013 0f08 	tst.w	r3, #8
   1aefe:	d03a      	beq.n	1af76 <conn_auto_initiate+0xa2>
		err = hci_le_read_remote_features(conn);
   1af00:	4620      	mov	r0, r4
   1af02:	f011 fe4d 	bl	2cba0 <hci_le_read_remote_features>
		if (err) {
   1af06:	4606      	mov	r6, r0
   1af08:	b3a8      	cbz	r0, 1af76 <conn_auto_initiate+0xa2>
			LOG_ERR("Failed read remote features (%d)", err);
   1af0a:	466d      	mov	r5, sp
   1af0c:	b088      	sub	sp, #32
   1af0e:	ab02      	add	r3, sp, #8
   1af10:	f113 0210 	adds.w	r2, r3, #16
   1af14:	d049      	beq.n	1afaa <conn_auto_initiate+0xd6>
   1af16:	210c      	movs	r1, #12
   1af18:	b14a      	cbz	r2, 1af2e <conn_auto_initiate+0x5a>
   1af1a:	4608      	mov	r0, r1
   1af1c:	2904      	cmp	r1, #4
   1af1e:	dd03      	ble.n	1af28 <conn_auto_initiate+0x54>
   1af20:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 1b0d8 <conn_auto_initiate+0x204>
   1af24:	f8c3 c014 	str.w	ip, [r3, #20]
   1af28:	2808      	cmp	r0, #8
   1af2a:	dd00      	ble.n	1af2e <conn_auto_initiate+0x5a>
   1af2c:	619e      	str	r6, [r3, #24]
   1af2e:	290b      	cmp	r1, #11
   1af30:	dd3e      	ble.n	1afb0 <conn_auto_initiate+0xdc>
   1af32:	f04f 0c0c 	mov.w	ip, #12
   1af36:	b13a      	cbz	r2, 1af48 <conn_auto_initiate+0x74>
   1af38:	2103      	movs	r1, #3
   1af3a:	7139      	strb	r1, [r7, #4]
   1af3c:	2100      	movs	r1, #0
   1af3e:	7179      	strb	r1, [r7, #5]
   1af40:	71b9      	strb	r1, [r7, #6]
   1af42:	71f9      	strb	r1, [r7, #7]
   1af44:	6878      	ldr	r0, [r7, #4]
   1af46:	6118      	str	r0, [r3, #16]
   1af48:	2100      	movs	r1, #0
   1af4a:	f36f 0100 	bfc	r1, #0, #1
   1af4e:	f36f 0141 	bfc	r1, #1, #1
   1af52:	f36f 0182 	bfc	r1, #2, #1
   1af56:	f36f 01c5 	bfc	r1, #3, #3
   1af5a:	2301      	movs	r3, #1
   1af5c:	f363 1188 	bfi	r1, r3, #6, #3
   1af60:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1af64:	f36c 2153 	bfi	r1, ip, #9, #11
   1af68:	f36f 511f 	bfc	r1, #20, #12
   1af6c:	2300      	movs	r3, #0
   1af6e:	485b      	ldr	r0, [pc, #364]	; (1b0dc <conn_auto_initiate+0x208>)
   1af70:	f7f9 f8c4 	bl	140fc <z_impl_z_log_msg_static_create>
   1af74:	46ad      	mov	sp, r5
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   1af76:	4b57      	ldr	r3, [pc, #348]	; (1b0d4 <conn_auto_initiate+0x200>)
   1af78:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1af7c:	f013 0f01 	tst.w	r3, #1
   1af80:	d003      	beq.n	1af8a <conn_auto_initiate+0xb6>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   1af82:	4620      	mov	r0, r4
   1af84:	f011 fd64 	bl	2ca50 <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   1af88:	b1a8      	cbz	r0, 1afb6 <conn_auto_initiate+0xe2>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1af8a:	4b52      	ldr	r3, [pc, #328]	; (1b0d4 <conn_auto_initiate+0x200>)
   1af8c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1af90:	f013 0f20 	tst.w	r3, #32
   1af94:	d006      	beq.n	1afa4 <conn_auto_initiate+0xd0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1af96:	4b4f      	ldr	r3, [pc, #316]	; (1b0d4 <conn_auto_initiate+0x200>)
   1af98:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1af9c:	689b      	ldr	r3, [r3, #8]
   1af9e:	f013 0f02 	tst.w	r3, #2
   1afa2:	d14e      	bne.n	1b042 <conn_auto_initiate+0x16e>
}
   1afa4:	370c      	adds	r7, #12
   1afa6:	46bd      	mov	sp, r7
   1afa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Failed read remote features (%d)", err);
   1afaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1afae:	e7b3      	b.n	1af18 <conn_auto_initiate+0x44>
   1afb0:	f06f 0c1b 	mvn.w	ip, #27
   1afb4:	e7bf      	b.n	1af36 <conn_auto_initiate+0x62>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1afb6:	2100      	movs	r1, #0
   1afb8:	9100      	str	r1, [sp, #0]
   1afba:	2302      	movs	r3, #2
   1afbc:	461a      	mov	r2, r3
   1afbe:	4620      	mov	r0, r4
   1afc0:	f011 fe3e 	bl	2cc40 <bt_le_set_phy>
		if (err) {
   1afc4:	4605      	mov	r5, r0
   1afc6:	2800      	cmp	r0, #0
   1afc8:	d0df      	beq.n	1af8a <conn_auto_initiate+0xb6>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   1afca:	466e      	mov	r6, sp
   1afcc:	b088      	sub	sp, #32
   1afce:	ab02      	add	r3, sp, #8
   1afd0:	f113 0210 	adds.w	r2, r3, #16
   1afd4:	d02f      	beq.n	1b036 <conn_auto_initiate+0x162>
   1afd6:	210c      	movs	r1, #12
   1afd8:	b14a      	cbz	r2, 1afee <conn_auto_initiate+0x11a>
   1afda:	4608      	mov	r0, r1
   1afdc:	2904      	cmp	r1, #4
   1afde:	dd03      	ble.n	1afe8 <conn_auto_initiate+0x114>
   1afe0:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 1b0e0 <conn_auto_initiate+0x20c>
   1afe4:	f8c3 c014 	str.w	ip, [r3, #20]
   1afe8:	2808      	cmp	r0, #8
   1afea:	dd00      	ble.n	1afee <conn_auto_initiate+0x11a>
   1afec:	619d      	str	r5, [r3, #24]
   1afee:	290b      	cmp	r1, #11
   1aff0:	dd24      	ble.n	1b03c <conn_auto_initiate+0x168>
   1aff2:	250c      	movs	r5, #12
   1aff4:	b13a      	cbz	r2, 1b006 <conn_auto_initiate+0x132>
   1aff6:	2103      	movs	r1, #3
   1aff8:	7139      	strb	r1, [r7, #4]
   1affa:	2100      	movs	r1, #0
   1affc:	7179      	strb	r1, [r7, #5]
   1affe:	71b9      	strb	r1, [r7, #6]
   1b000:	71f9      	strb	r1, [r7, #7]
   1b002:	6878      	ldr	r0, [r7, #4]
   1b004:	6118      	str	r0, [r3, #16]
   1b006:	2100      	movs	r1, #0
   1b008:	f36f 0100 	bfc	r1, #0, #1
   1b00c:	f36f 0141 	bfc	r1, #1, #1
   1b010:	f36f 0182 	bfc	r1, #2, #1
   1b014:	f36f 01c5 	bfc	r1, #3, #3
   1b018:	2301      	movs	r3, #1
   1b01a:	f363 1188 	bfi	r1, r3, #6, #3
   1b01e:	f3c5 030a 	ubfx	r3, r5, #0, #11
   1b022:	f363 2153 	bfi	r1, r3, #9, #11
   1b026:	f36f 511f 	bfc	r1, #20, #12
   1b02a:	2300      	movs	r3, #0
   1b02c:	482b      	ldr	r0, [pc, #172]	; (1b0dc <conn_auto_initiate+0x208>)
   1b02e:	f7f9 f865 	bl	140fc <z_impl_z_log_msg_static_create>
   1b032:	46b5      	mov	sp, r6
   1b034:	e7a9      	b.n	1af8a <conn_auto_initiate+0xb6>
   1b036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b03a:	e7cd      	b.n	1afd8 <conn_auto_initiate+0x104>
   1b03c:	f06f 051b 	mvn.w	r5, #27
   1b040:	e7d8      	b.n	1aff4 <conn_auto_initiate+0x120>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1b042:	1cb9      	adds	r1, r7, #2
   1b044:	4638      	mov	r0, r7
   1b046:	f7ff fb71 	bl	1a72c <hci_le_read_max_data_len>
			if (!err) {
   1b04a:	2800      	cmp	r0, #0
   1b04c:	d1aa      	bne.n	1afa4 <conn_auto_initiate+0xd0>
				err = bt_le_set_data_len(conn,
   1b04e:	887a      	ldrh	r2, [r7, #2]
   1b050:	8839      	ldrh	r1, [r7, #0]
   1b052:	4620      	mov	r0, r4
   1b054:	f011 fdd7 	bl	2cc06 <bt_le_set_data_len>
				if (err) {
   1b058:	4604      	mov	r4, r0
   1b05a:	2800      	cmp	r0, #0
   1b05c:	d0a2      	beq.n	1afa4 <conn_auto_initiate+0xd0>
					LOG_ERR("Failed to set data len (%d)", err);
   1b05e:	466d      	mov	r5, sp
   1b060:	b088      	sub	sp, #32
   1b062:	ab02      	add	r3, sp, #8
   1b064:	f113 0210 	adds.w	r2, r3, #16
   1b068:	d02d      	beq.n	1b0c6 <conn_auto_initiate+0x1f2>
   1b06a:	210c      	movs	r1, #12
   1b06c:	b13a      	cbz	r2, 1b07e <conn_auto_initiate+0x1aa>
   1b06e:	4608      	mov	r0, r1
   1b070:	2904      	cmp	r1, #4
   1b072:	dd01      	ble.n	1b078 <conn_auto_initiate+0x1a4>
   1b074:	4e1b      	ldr	r6, [pc, #108]	; (1b0e4 <conn_auto_initiate+0x210>)
   1b076:	615e      	str	r6, [r3, #20]
   1b078:	2808      	cmp	r0, #8
   1b07a:	dd00      	ble.n	1b07e <conn_auto_initiate+0x1aa>
   1b07c:	619c      	str	r4, [r3, #24]
   1b07e:	290b      	cmp	r1, #11
   1b080:	dd24      	ble.n	1b0cc <conn_auto_initiate+0x1f8>
   1b082:	240c      	movs	r4, #12
   1b084:	b13a      	cbz	r2, 1b096 <conn_auto_initiate+0x1c2>
   1b086:	2103      	movs	r1, #3
   1b088:	7139      	strb	r1, [r7, #4]
   1b08a:	2100      	movs	r1, #0
   1b08c:	7179      	strb	r1, [r7, #5]
   1b08e:	71b9      	strb	r1, [r7, #6]
   1b090:	71f9      	strb	r1, [r7, #7]
   1b092:	6878      	ldr	r0, [r7, #4]
   1b094:	6118      	str	r0, [r3, #16]
   1b096:	2100      	movs	r1, #0
   1b098:	f36f 0100 	bfc	r1, #0, #1
   1b09c:	f36f 0141 	bfc	r1, #1, #1
   1b0a0:	f36f 0182 	bfc	r1, #2, #1
   1b0a4:	f36f 01c5 	bfc	r1, #3, #3
   1b0a8:	2301      	movs	r3, #1
   1b0aa:	f363 1188 	bfi	r1, r3, #6, #3
   1b0ae:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1b0b2:	f363 2153 	bfi	r1, r3, #9, #11
   1b0b6:	f36f 511f 	bfc	r1, #20, #12
   1b0ba:	2300      	movs	r3, #0
   1b0bc:	4807      	ldr	r0, [pc, #28]	; (1b0dc <conn_auto_initiate+0x208>)
   1b0be:	f7f9 f81d 	bl	140fc <z_impl_z_log_msg_static_create>
   1b0c2:	46ad      	mov	sp, r5
		}
   1b0c4:	e76e      	b.n	1afa4 <conn_auto_initiate+0xd0>
					LOG_ERR("Failed to set data len (%d)", err);
   1b0c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b0ca:	e7cf      	b.n	1b06c <conn_auto_initiate+0x198>
   1b0cc:	f06f 041b 	mvn.w	r4, #27
   1b0d0:	e7d8      	b.n	1b084 <conn_auto_initiate+0x1b0>
   1b0d2:	bf00      	nop
   1b0d4:	20000438 	.word	0x20000438
   1b0d8:	00033a90 	.word	0x00033a90
   1b0dc:	00031cfc 	.word	0x00031cfc
   1b0e0:	00033ab4 	.word	0x00033ab4
   1b0e4:	00033acc 	.word	0x00033acc

0001b0e8 <bt_hci_le_enh_conn_complete>:
{
   1b0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0ec:	b086      	sub	sp, #24
   1b0ee:	af00      	add	r7, sp, #0
   1b0f0:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1b0f2:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bool is_disconnected = conn_handle_is_disconnected(handle);
   1b0f6:	4630      	mov	r0, r6
   1b0f8:	f7fd feec 	bl	18ed4 <conn_handle_is_disconnected>
	if (evt->status) {
   1b0fc:	7823      	ldrb	r3, [r4, #0]
   1b0fe:	2b00      	cmp	r3, #0
   1b100:	d03e      	beq.n	1b180 <bt_hci_le_enh_conn_complete+0x98>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b102:	2b3c      	cmp	r3, #60	; 0x3c
   1b104:	d033      	beq.n	1b16e <bt_hci_le_enh_conn_complete+0x86>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1b106:	466c      	mov	r4, sp
   1b108:	b088      	sub	sp, #32
   1b10a:	4669      	mov	r1, sp
   1b10c:	f111 0210 	adds.w	r2, r1, #16
   1b110:	d030      	beq.n	1b174 <bt_hci_le_enh_conn_complete+0x8c>
   1b112:	200c      	movs	r0, #12
   1b114:	b13a      	cbz	r2, 1b126 <bt_hci_le_enh_conn_complete+0x3e>
   1b116:	4605      	mov	r5, r0
   1b118:	2804      	cmp	r0, #4
   1b11a:	dd01      	ble.n	1b120 <bt_hci_le_enh_conn_complete+0x38>
   1b11c:	4e7c      	ldr	r6, [pc, #496]	; (1b310 <bt_hci_le_enh_conn_complete+0x228>)
   1b11e:	614e      	str	r6, [r1, #20]
   1b120:	2d08      	cmp	r5, #8
   1b122:	dd00      	ble.n	1b126 <bt_hci_le_enh_conn_complete+0x3e>
   1b124:	618b      	str	r3, [r1, #24]
   1b126:	280b      	cmp	r0, #11
   1b128:	dd27      	ble.n	1b17a <bt_hci_le_enh_conn_complete+0x92>
   1b12a:	230c      	movs	r3, #12
   1b12c:	b13a      	cbz	r2, 1b13e <bt_hci_le_enh_conn_complete+0x56>
   1b12e:	2003      	movs	r0, #3
   1b130:	7138      	strb	r0, [r7, #4]
   1b132:	2000      	movs	r0, #0
   1b134:	7178      	strb	r0, [r7, #5]
   1b136:	71b8      	strb	r0, [r7, #6]
   1b138:	71f8      	strb	r0, [r7, #7]
   1b13a:	6878      	ldr	r0, [r7, #4]
   1b13c:	6108      	str	r0, [r1, #16]
   1b13e:	2100      	movs	r1, #0
   1b140:	f36f 0100 	bfc	r1, #0, #1
   1b144:	f36f 0141 	bfc	r1, #1, #1
   1b148:	f36f 0182 	bfc	r1, #2, #1
   1b14c:	f36f 01c5 	bfc	r1, #3, #3
   1b150:	2002      	movs	r0, #2
   1b152:	f360 1188 	bfi	r1, r0, #6, #3
   1b156:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1b15a:	f363 2153 	bfi	r1, r3, #9, #11
   1b15e:	f36f 511f 	bfc	r1, #20, #12
   1b162:	2300      	movs	r3, #0
   1b164:	486b      	ldr	r0, [pc, #428]	; (1b314 <bt_hci_le_enh_conn_complete+0x22c>)
   1b166:	f7f8 ffc9 	bl	140fc <z_impl_z_log_msg_static_create>
   1b16a:	46a5      	mov	sp, r4
		return;
   1b16c:	e038      	b.n	1b1e0 <bt_hci_le_enh_conn_complete+0xf8>
			le_conn_complete_adv_timeout();
   1b16e:	f7fe fa0d 	bl	1958c <le_conn_complete_adv_timeout>
			return;
   1b172:	e035      	b.n	1b1e0 <bt_hci_le_enh_conn_complete+0xf8>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1b174:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b178:	e7cc      	b.n	1b114 <bt_hci_le_enh_conn_complete+0x2c>
   1b17a:	f06f 031b 	mvn.w	r3, #27
   1b17e:	e7d5      	b.n	1b12c <bt_hci_le_enh_conn_complete+0x44>
   1b180:	4680      	mov	r8, r0
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1b182:	78e2      	ldrb	r2, [r4, #3]
   1b184:	2a01      	cmp	r2, #1
   1b186:	d02f      	beq.n	1b1e8 <bt_hci_le_enh_conn_complete+0x100>
	translate_addrs(&peer_addr, &id_addr, evt, id);
   1b188:	4622      	mov	r2, r4
   1b18a:	f107 0108 	add.w	r1, r7, #8
   1b18e:	f107 0010 	add.w	r0, r7, #16
   1b192:	f011 fc88 	bl	2caa6 <translate_addrs>
	conn = find_pending_connect(evt->role, &id_addr);
   1b196:	f107 0108 	add.w	r1, r7, #8
   1b19a:	78e0      	ldrb	r0, [r4, #3]
   1b19c:	f7fe f9dc 	bl	19558 <find_pending_connect>
   1b1a0:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   1b1a2:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b1a4:	2b01      	cmp	r3, #1
   1b1a6:	d023      	beq.n	1b1f0 <bt_hci_le_enh_conn_complete+0x108>
	if (!conn) {
   1b1a8:	b3ad      	cbz	r5, 1b216 <bt_hci_le_enh_conn_complete+0x12e>
	update_conn(conn, &id_addr, evt);
   1b1aa:	4622      	mov	r2, r4
   1b1ac:	f107 0108 	add.w	r1, r7, #8
   1b1b0:	4628      	mov	r0, r5
   1b1b2:	f011 fc5d 	bl	2ca70 <update_conn>
	    conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1b1b6:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b1b8:	2b01      	cmp	r3, #1
   1b1ba:	f000 8088 	beq.w	1b2ce <bt_hci_le_enh_conn_complete+0x1e6>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1b1be:	2107      	movs	r1, #7
   1b1c0:	4628      	mov	r0, r5
   1b1c2:	f002 f8af 	bl	1d324 <bt_conn_set_state>
	if (is_disconnected) {
   1b1c6:	f1b8 0f00 	cmp.w	r8, #0
   1b1ca:	f040 809c 	bne.w	1b306 <bt_hci_le_enh_conn_complete+0x21e>
	bt_conn_connected(conn);
   1b1ce:	4628      	mov	r0, r5
   1b1d0:	f012 f976 	bl	2d4c0 <bt_conn_connected>
	conn_auto_initiate(conn);
   1b1d4:	4628      	mov	r0, r5
   1b1d6:	f7ff fe7d 	bl	1aed4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1b1da:	4628      	mov	r0, r5
   1b1dc:	f012 f925 	bl	2d42a <bt_conn_unref>
}
   1b1e0:	3718      	adds	r7, #24
   1b1e2:	46bd      	mov	sp, r7
   1b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1b1e8:	4b4b      	ldr	r3, [pc, #300]	; (1b318 <bt_hci_le_enh_conn_complete+0x230>)
   1b1ea:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1b1ee:	e7cb      	b.n	1b188 <bt_hci_le_enh_conn_complete+0xa0>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1b1f0:	f001 f9be 	bl	1c570 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   1b1f4:	f100 0310 	add.w	r3, r0, #16
   1b1f8:	f3bf 8f5b 	dmb	ish
   1b1fc:	e853 1f00 	ldrex	r1, [r3]
   1b200:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   1b204:	e843 1200 	strex	r2, r1, [r3]
   1b208:	2a00      	cmp	r2, #0
   1b20a:	d1f7      	bne.n	1b1fc <bt_hci_le_enh_conn_complete+0x114>
   1b20c:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   1b210:	f011 ff87 	bl	2d122 <bt_le_lim_adv_cancel_timeout>
   1b214:	e7c8      	b.n	1b1a8 <bt_hci_le_enh_conn_complete+0xc0>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1b216:	1d20      	adds	r0, r4, #4
   1b218:	f7fd fd74 	bl	18d04 <bt_addr_le_str>
   1b21c:	466d      	mov	r5, sp
   1b21e:	2300      	movs	r3, #0
   1b220:	713b      	strb	r3, [r7, #4]
   1b222:	2302      	movs	r3, #2
   1b224:	717b      	strb	r3, [r7, #5]
   1b226:	b088      	sub	sp, #32
   1b228:	466c      	mov	r4, sp
   1b22a:	f114 0210 	adds.w	r2, r4, #16
   1b22e:	d014      	beq.n	1b25a <bt_hci_le_enh_conn_complete+0x172>
   1b230:	f04f 0c0e 	mov.w	ip, #14
   1b234:	b122      	cbz	r2, 1b240 <bt_hci_le_enh_conn_complete+0x158>
   1b236:	f1bc 0f04 	cmp.w	ip, #4
   1b23a:	dd01      	ble.n	1b240 <bt_hci_le_enh_conn_complete+0x158>
   1b23c:	4b37      	ldr	r3, [pc, #220]	; (1b31c <bt_hci_le_enh_conn_complete+0x234>)
   1b23e:	6163      	str	r3, [r4, #20]
   1b240:	2300      	movs	r3, #0
   1b242:	703b      	strb	r3, [r7, #0]
   1b244:	2302      	movs	r3, #2
   1b246:	707b      	strb	r3, [r7, #1]
   1b248:	b1a2      	cbz	r2, 1b274 <bt_hci_le_enh_conn_complete+0x18c>
   1b24a:	f1bc 0f08 	cmp.w	ip, #8
   1b24e:	dd00      	ble.n	1b252 <bt_hci_le_enh_conn_complete+0x16a>
   1b250:	61a0      	str	r0, [r4, #24]
   1b252:	f104 031c 	add.w	r3, r4, #28
   1b256:	2100      	movs	r1, #0
   1b258:	e00a      	b.n	1b270 <bt_hci_le_enh_conn_complete+0x188>
   1b25a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   1b25e:	e7e9      	b.n	1b234 <bt_hci_le_enh_conn_complete+0x14c>
   1b260:	f101 0018 	add.w	r0, r1, #24
   1b264:	4438      	add	r0, r7
   1b266:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   1b26a:	f803 0b01 	strb.w	r0, [r3], #1
   1b26e:	3101      	adds	r1, #1
   1b270:	2901      	cmp	r1, #1
   1b272:	d9f5      	bls.n	1b260 <bt_hci_le_enh_conn_complete+0x178>
   1b274:	f1bc 0f0d 	cmp.w	ip, #13
   1b278:	dd26      	ble.n	1b2c8 <bt_hci_le_enh_conn_complete+0x1e0>
   1b27a:	230e      	movs	r3, #14
   1b27c:	b142      	cbz	r2, 1b290 <bt_hci_le_enh_conn_complete+0x1a8>
   1b27e:	2103      	movs	r1, #3
   1b280:	7139      	strb	r1, [r7, #4]
   1b282:	2100      	movs	r1, #0
   1b284:	7179      	strb	r1, [r7, #5]
   1b286:	71b9      	strb	r1, [r7, #6]
   1b288:	2101      	movs	r1, #1
   1b28a:	71f9      	strb	r1, [r7, #7]
   1b28c:	6878      	ldr	r0, [r7, #4]
   1b28e:	6120      	str	r0, [r4, #16]
   1b290:	2100      	movs	r1, #0
   1b292:	f36f 0100 	bfc	r1, #0, #1
   1b296:	f36f 0141 	bfc	r1, #1, #1
   1b29a:	f36f 0182 	bfc	r1, #2, #1
   1b29e:	f36f 01c5 	bfc	r1, #3, #3
   1b2a2:	2001      	movs	r0, #1
   1b2a4:	f360 1188 	bfi	r1, r0, #6, #3
   1b2a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1b2ac:	f363 2153 	bfi	r1, r3, #9, #11
   1b2b0:	f36f 511f 	bfc	r1, #20, #12
   1b2b4:	2300      	movs	r3, #0
   1b2b6:	4817      	ldr	r0, [pc, #92]	; (1b314 <bt_hci_le_enh_conn_complete+0x22c>)
   1b2b8:	f7f8 ff20 	bl	140fc <z_impl_z_log_msg_static_create>
   1b2bc:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1b2be:	211f      	movs	r1, #31
   1b2c0:	4630      	mov	r0, r6
   1b2c2:	f011 fc86 	bl	2cbd2 <bt_hci_disconnect>
		return;
   1b2c6:	e78b      	b.n	1b1e0 <bt_hci_le_enh_conn_complete+0xf8>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1b2c8:	f06f 031b 	mvn.w	r3, #27
   1b2cc:	e7d6      	b.n	1b27c <bt_hci_le_enh_conn_complete+0x194>
	memcpy(dst, src, sizeof(*dst));
   1b2ce:	2207      	movs	r2, #7
   1b2d0:	f107 0110 	add.w	r1, r7, #16
   1b2d4:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   1b2d8:	f011 fa88 	bl	2c7ec <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1b2dc:	f001 f948 	bl	1c570 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1b2e0:	7a29      	ldrb	r1, [r5, #8]
   1b2e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1b2e6:	4c0c      	ldr	r4, [pc, #48]	; (1b318 <bt_hci_le_enh_conn_complete+0x230>)
   1b2e8:	2207      	movs	r2, #7
   1b2ea:	4421      	add	r1, r4
   1b2ec:	f105 0096 	add.w	r0, r5, #150	; 0x96
   1b2f0:	f011 fa7c 	bl	2c7ec <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1b2f4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1b2f8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b2fc:	f43f af5f 	beq.w	1b1be <bt_hci_le_enh_conn_complete+0xd6>
			bt_le_adv_resume();
   1b300:	f001 fb7e 	bl	1ca00 <bt_le_adv_resume>
   1b304:	e75b      	b.n	1b1be <bt_hci_le_enh_conn_complete+0xd6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1b306:	2101      	movs	r1, #1
   1b308:	4628      	mov	r0, r5
   1b30a:	f002 f80b 	bl	1d324 <bt_conn_set_state>
   1b30e:	e75e      	b.n	1b1ce <bt_hci_le_enh_conn_complete+0xe6>
   1b310:	00033ae8 	.word	0x00033ae8
   1b314:	00031cfc 	.word	0x00031cfc
   1b318:	20000438 	.word	0x20000438
   1b31c:	00033b04 	.word	0x00033b04

0001b320 <le_legacy_conn_complete>:
{
   1b320:	b510      	push	{r4, lr}
   1b322:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1b324:	68c1      	ldr	r1, [r0, #12]
	enh.status         = evt->status;
   1b326:	780b      	ldrb	r3, [r1, #0]
   1b328:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1b32c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1b330:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1b334:	78cb      	ldrb	r3, [r1, #3]
   1b336:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1b33a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1b33e:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1b342:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1b346:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1b34a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1b34e:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1b352:	7c4b      	ldrb	r3, [r1, #17]
   1b354:	f88d 301d 	strb.w	r3, [sp, #29]
   1b358:	2207      	movs	r2, #7
   1b35a:	3104      	adds	r1, #4
   1b35c:	a801      	add	r0, sp, #4
   1b35e:	f011 fa45 	bl	2c7ec <memcpy>
	memcpy(dst, src, sizeof(*dst));
   1b362:	4c09      	ldr	r4, [pc, #36]	; (1b388 <le_legacy_conn_complete+0x68>)
   1b364:	2206      	movs	r2, #6
   1b366:	4621      	mov	r1, r4
   1b368:	f10d 000b 	add.w	r0, sp, #11
   1b36c:	f011 fa3e 	bl	2c7ec <memcpy>
   1b370:	2206      	movs	r2, #6
   1b372:	4621      	mov	r1, r4
   1b374:	f10d 0011 	add.w	r0, sp, #17
   1b378:	f011 fa38 	bl	2c7ec <memcpy>
	enh_conn_complete(&enh);
   1b37c:	4668      	mov	r0, sp
   1b37e:	f011 fc84 	bl	2cc8a <enh_conn_complete>
}
   1b382:	b008      	add	sp, #32
   1b384:	bd10      	pop	{r4, pc}
   1b386:	bf00      	nop
   1b388:	000334b0 	.word	0x000334b0

0001b38c <bt_send>:
{
   1b38c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   1b38e:	4b03      	ldr	r3, [pc, #12]	; (1b39c <bt_send+0x10>)
   1b390:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1b394:	695b      	ldr	r3, [r3, #20]
   1b396:	4798      	blx	r3
}
   1b398:	bd08      	pop	{r3, pc}
   1b39a:	bf00      	nop
   1b39c:	20000438 	.word	0x20000438

0001b3a0 <bt_hci_cmd_send>:
{
   1b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3a2:	b083      	sub	sp, #12
   1b3a4:	af00      	add	r7, sp, #0
   1b3a6:	4604      	mov	r4, r0
	if (!buf) {
   1b3a8:	460d      	mov	r5, r1
   1b3aa:	b161      	cbz	r1, 1b3c6 <bt_hci_cmd_send+0x26>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1b3ac:	f640 4335 	movw	r3, #3125	; 0xc35
   1b3b0:	429c      	cmp	r4, r3
   1b3b2:	d010      	beq.n	1b3d6 <bt_hci_cmd_send+0x36>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1b3b4:	4629      	mov	r1, r5
   1b3b6:	482b      	ldr	r0, [pc, #172]	; (1b464 <bt_hci_cmd_send+0xc4>)
   1b3b8:	f013 fd9e 	bl	2eef8 <net_buf_put>
	return 0;
   1b3bc:	2400      	movs	r4, #0
}
   1b3be:	4620      	mov	r0, r4
   1b3c0:	370c      	adds	r7, #12
   1b3c2:	46bd      	mov	sp, r7
   1b3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1b3c6:	f7ff f871 	bl	1a4ac <bt_hci_cmd_create>
		if (!buf) {
   1b3ca:	4605      	mov	r5, r0
   1b3cc:	2800      	cmp	r0, #0
   1b3ce:	d1ed      	bne.n	1b3ac <bt_hci_cmd_send+0xc>
			return -ENOBUFS;
   1b3d0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b3d4:	e7f3      	b.n	1b3be <bt_hci_cmd_send+0x1e>
		err = bt_send(buf);
   1b3d6:	4628      	mov	r0, r5
   1b3d8:	f7ff ffd8 	bl	1b38c <bt_send>
		if (err) {
   1b3dc:	4604      	mov	r4, r0
   1b3de:	2800      	cmp	r0, #0
   1b3e0:	d0ed      	beq.n	1b3be <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1b3e2:	466e      	mov	r6, sp
   1b3e4:	b088      	sub	sp, #32
   1b3e6:	466b      	mov	r3, sp
   1b3e8:	f113 0210 	adds.w	r2, r3, #16
   1b3ec:	d033      	beq.n	1b456 <bt_hci_cmd_send+0xb6>
   1b3ee:	210c      	movs	r1, #12
   1b3f0:	b14a      	cbz	r2, 1b406 <bt_hci_cmd_send+0x66>
   1b3f2:	4608      	mov	r0, r1
   1b3f4:	2904      	cmp	r1, #4
   1b3f6:	dd03      	ble.n	1b400 <bt_hci_cmd_send+0x60>
   1b3f8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1b468 <bt_hci_cmd_send+0xc8>
   1b3fc:	f8c3 c014 	str.w	ip, [r3, #20]
   1b400:	2808      	cmp	r0, #8
   1b402:	dd00      	ble.n	1b406 <bt_hci_cmd_send+0x66>
   1b404:	619c      	str	r4, [r3, #24]
   1b406:	290b      	cmp	r1, #11
   1b408:	dd28      	ble.n	1b45c <bt_hci_cmd_send+0xbc>
   1b40a:	f04f 0c0c 	mov.w	ip, #12
   1b40e:	b13a      	cbz	r2, 1b420 <bt_hci_cmd_send+0x80>
   1b410:	2103      	movs	r1, #3
   1b412:	7139      	strb	r1, [r7, #4]
   1b414:	2100      	movs	r1, #0
   1b416:	7179      	strb	r1, [r7, #5]
   1b418:	71b9      	strb	r1, [r7, #6]
   1b41a:	71f9      	strb	r1, [r7, #7]
   1b41c:	6878      	ldr	r0, [r7, #4]
   1b41e:	6118      	str	r0, [r3, #16]
   1b420:	2100      	movs	r1, #0
   1b422:	f36f 0100 	bfc	r1, #0, #1
   1b426:	f36f 0141 	bfc	r1, #1, #1
   1b42a:	f36f 0182 	bfc	r1, #2, #1
   1b42e:	f36f 01c5 	bfc	r1, #3, #3
   1b432:	2301      	movs	r3, #1
   1b434:	f363 1188 	bfi	r1, r3, #6, #3
   1b438:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1b43c:	f36c 2153 	bfi	r1, ip, #9, #11
   1b440:	f36f 511f 	bfc	r1, #20, #12
   1b444:	2300      	movs	r3, #0
   1b446:	4809      	ldr	r0, [pc, #36]	; (1b46c <bt_hci_cmd_send+0xcc>)
   1b448:	f7f8 fe58 	bl	140fc <z_impl_z_log_msg_static_create>
   1b44c:	46b5      	mov	sp, r6
			net_buf_unref(buf);
   1b44e:	4628      	mov	r0, r5
   1b450:	f013 fd56 	bl	2ef00 <net_buf_unref>
		return err;
   1b454:	e7b3      	b.n	1b3be <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1b456:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b45a:	e7c9      	b.n	1b3f0 <bt_hci_cmd_send+0x50>
   1b45c:	f06f 0c1b 	mvn.w	ip, #27
   1b460:	e7d5      	b.n	1b40e <bt_hci_cmd_send+0x6e>
   1b462:	bf00      	nop
   1b464:	2000057c 	.word	0x2000057c
   1b468:	00033b20 	.word	0x00033b20
   1b46c:	00031cfc 	.word	0x00031cfc

0001b470 <le_conn_param_neg_reply>:
{
   1b470:	b570      	push	{r4, r5, r6, lr}
   1b472:	b088      	sub	sp, #32
   1b474:	4605      	mov	r5, r0
   1b476:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1b478:	2103      	movs	r1, #3
   1b47a:	f242 0021 	movw	r0, #8225	; 0x2021
   1b47e:	f7ff f815 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   1b482:	b168      	cbz	r0, 1b4a0 <le_conn_param_neg_reply+0x30>
   1b484:	4606      	mov	r6, r0
   1b486:	2103      	movs	r1, #3
   1b488:	300c      	adds	r0, #12
   1b48a:	f013 fd84 	bl	2ef96 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1b48e:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1b490:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1b492:	4631      	mov	r1, r6
   1b494:	f242 0021 	movw	r0, #8225	; 0x2021
   1b498:	f7ff ff82 	bl	1b3a0 <bt_hci_cmd_send>
}
   1b49c:	b008      	add	sp, #32
   1b49e:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to allocate buffer");
   1b4a0:	4b11      	ldr	r3, [pc, #68]	; (1b4e8 <le_conn_param_neg_reply+0x78>)
   1b4a2:	9307      	str	r3, [sp, #28]
   1b4a4:	2302      	movs	r3, #2
   1b4a6:	f88d 3004 	strb.w	r3, [sp, #4]
   1b4aa:	2300      	movs	r3, #0
   1b4ac:	f88d 3005 	strb.w	r3, [sp, #5]
   1b4b0:	f88d 3006 	strb.w	r3, [sp, #6]
   1b4b4:	f88d 3007 	strb.w	r3, [sp, #7]
   1b4b8:	9a01      	ldr	r2, [sp, #4]
   1b4ba:	9206      	str	r2, [sp, #24]
   1b4bc:	4619      	mov	r1, r3
   1b4be:	f363 0100 	bfi	r1, r3, #0, #1
   1b4c2:	f363 0141 	bfi	r1, r3, #1, #1
   1b4c6:	f363 0182 	bfi	r1, r3, #2, #1
   1b4ca:	f363 01c5 	bfi	r1, r3, #3, #3
   1b4ce:	2201      	movs	r2, #1
   1b4d0:	f362 1188 	bfi	r1, r2, #6, #3
   1b4d4:	2208      	movs	r2, #8
   1b4d6:	f362 2153 	bfi	r1, r2, #9, #11
   1b4da:	f363 511f 	bfi	r1, r3, #20, #12
   1b4de:	aa06      	add	r2, sp, #24
   1b4e0:	4802      	ldr	r0, [pc, #8]	; (1b4ec <le_conn_param_neg_reply+0x7c>)
   1b4e2:	f7f8 fe0b 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   1b4e6:	e7d9      	b.n	1b49c <le_conn_param_neg_reply+0x2c>
   1b4e8:	00033b44 	.word	0x00033b44
   1b4ec:	00031cfc 	.word	0x00031cfc

0001b4f0 <le_conn_param_req>:
{
   1b4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4f2:	b085      	sub	sp, #20
   1b4f4:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1b4f6:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1b4f8:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1b4fa:	885a      	ldrh	r2, [r3, #2]
   1b4fc:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1b4fe:	889a      	ldrh	r2, [r3, #4]
   1b500:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   1b502:	88da      	ldrh	r2, [r3, #6]
   1b504:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1b506:	891b      	ldrh	r3, [r3, #8]
   1b508:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
   1b50a:	4620      	mov	r0, r4
   1b50c:	f001 ff00 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   1b510:	b180      	cbz	r0, 1b534 <le_conn_param_req+0x44>
   1b512:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   1b514:	f107 0108 	add.w	r1, r7, #8
   1b518:	f002 f90a 	bl	1d730 <le_param_req>
   1b51c:	2800      	cmp	r0, #0
   1b51e:	d147      	bne.n	1b5b0 <le_conn_param_req+0xc0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1b520:	211e      	movs	r1, #30
   1b522:	4620      	mov	r0, r4
   1b524:	f7ff ffa4 	bl	1b470 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1b528:	4628      	mov	r0, r5
   1b52a:	f011 ff7e 	bl	2d42a <bt_conn_unref>
}
   1b52e:	3714      	adds	r7, #20
   1b530:	46bd      	mov	sp, r7
   1b532:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1b534:	466e      	mov	r6, sp
   1b536:	b088      	sub	sp, #32
   1b538:	466b      	mov	r3, sp
   1b53a:	f113 0210 	adds.w	r2, r3, #16
   1b53e:	d031      	beq.n	1b5a4 <le_conn_param_req+0xb4>
   1b540:	210c      	movs	r1, #12
   1b542:	b13a      	cbz	r2, 1b554 <le_conn_param_req+0x64>
   1b544:	4608      	mov	r0, r1
   1b546:	2904      	cmp	r1, #4
   1b548:	dd01      	ble.n	1b54e <le_conn_param_req+0x5e>
   1b54a:	4d1c      	ldr	r5, [pc, #112]	; (1b5bc <le_conn_param_req+0xcc>)
   1b54c:	615d      	str	r5, [r3, #20]
   1b54e:	2808      	cmp	r0, #8
   1b550:	dd00      	ble.n	1b554 <le_conn_param_req+0x64>
   1b552:	619c      	str	r4, [r3, #24]
   1b554:	290b      	cmp	r1, #11
   1b556:	dd28      	ble.n	1b5aa <le_conn_param_req+0xba>
   1b558:	250c      	movs	r5, #12
   1b55a:	b13a      	cbz	r2, 1b56c <le_conn_param_req+0x7c>
   1b55c:	2103      	movs	r1, #3
   1b55e:	7139      	strb	r1, [r7, #4]
   1b560:	2100      	movs	r1, #0
   1b562:	7179      	strb	r1, [r7, #5]
   1b564:	71b9      	strb	r1, [r7, #6]
   1b566:	71f9      	strb	r1, [r7, #7]
   1b568:	6878      	ldr	r0, [r7, #4]
   1b56a:	6118      	str	r0, [r3, #16]
   1b56c:	2100      	movs	r1, #0
   1b56e:	f36f 0100 	bfc	r1, #0, #1
   1b572:	f36f 0141 	bfc	r1, #1, #1
   1b576:	f36f 0182 	bfc	r1, #2, #1
   1b57a:	f36f 01c5 	bfc	r1, #3, #3
   1b57e:	2301      	movs	r3, #1
   1b580:	f363 1188 	bfi	r1, r3, #6, #3
   1b584:	f3c5 030a 	ubfx	r3, r5, #0, #11
   1b588:	f363 2153 	bfi	r1, r3, #9, #11
   1b58c:	f36f 511f 	bfc	r1, #20, #12
   1b590:	2300      	movs	r3, #0
   1b592:	480b      	ldr	r0, [pc, #44]	; (1b5c0 <le_conn_param_req+0xd0>)
   1b594:	f7f8 fdb2 	bl	140fc <z_impl_z_log_msg_static_create>
   1b598:	46b5      	mov	sp, r6
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1b59a:	2102      	movs	r1, #2
   1b59c:	4620      	mov	r0, r4
   1b59e:	f7ff ff67 	bl	1b470 <le_conn_param_neg_reply>
		return;
   1b5a2:	e7c4      	b.n	1b52e <le_conn_param_req+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1b5a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b5a8:	e7cb      	b.n	1b542 <le_conn_param_req+0x52>
   1b5aa:	f06f 051b 	mvn.w	r5, #27
   1b5ae:	e7d4      	b.n	1b55a <le_conn_param_req+0x6a>
		le_conn_param_req_reply(handle, &param);
   1b5b0:	f107 0108 	add.w	r1, r7, #8
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f011 fb99 	bl	2ccec <le_conn_param_req_reply>
   1b5ba:	e7b5      	b.n	1b528 <le_conn_param_req+0x38>
   1b5bc:	000336a0 	.word	0x000336a0
   1b5c0:	00031cfc 	.word	0x00031cfc

0001b5c4 <send_cmd>:
{
   1b5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5c6:	b089      	sub	sp, #36	; 0x24
   1b5c8:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1b5ca:	2200      	movs	r2, #0
   1b5cc:	2300      	movs	r3, #0
   1b5ce:	4853      	ldr	r0, [pc, #332]	; (1b71c <send_cmd+0x158>)
   1b5d0:	f013 fc60 	bl	2ee94 <net_buf_get>
	BT_ASSERT(buf);
   1b5d4:	4605      	mov	r5, r0
   1b5d6:	2800      	cmp	r0, #0
   1b5d8:	d053      	beq.n	1b682 <send_cmd+0xbe>
   1b5da:	4c51      	ldr	r4, [pc, #324]	; (1b720 <send_cmd+0x15c>)
   1b5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b5e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b5e4:	4620      	mov	r0, r4
   1b5e6:	f00a fe69 	bl	262bc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1b5ea:	69a3      	ldr	r3, [r4, #24]
   1b5ec:	b33b      	cbz	r3, 1b63e <send_cmd+0x7a>
		LOG_ERR("Uncleared pending sent_cmd");
   1b5ee:	4b4d      	ldr	r3, [pc, #308]	; (1b724 <send_cmd+0x160>)
   1b5f0:	61fb      	str	r3, [r7, #28]
   1b5f2:	2302      	movs	r3, #2
   1b5f4:	713b      	strb	r3, [r7, #4]
   1b5f6:	2400      	movs	r4, #0
   1b5f8:	717c      	strb	r4, [r7, #5]
   1b5fa:	71bc      	strb	r4, [r7, #6]
   1b5fc:	71fc      	strb	r4, [r7, #7]
   1b5fe:	687b      	ldr	r3, [r7, #4]
   1b600:	61bb      	str	r3, [r7, #24]
   1b602:	4621      	mov	r1, r4
   1b604:	f364 0100 	bfi	r1, r4, #0, #1
   1b608:	f364 0141 	bfi	r1, r4, #1, #1
   1b60c:	f364 0182 	bfi	r1, r4, #2, #1
   1b610:	f364 01c5 	bfi	r1, r4, #3, #3
   1b614:	2301      	movs	r3, #1
   1b616:	f363 1188 	bfi	r1, r3, #6, #3
   1b61a:	2308      	movs	r3, #8
   1b61c:	f363 2153 	bfi	r1, r3, #9, #11
   1b620:	f364 511f 	bfi	r1, r4, #20, #12
   1b624:	4623      	mov	r3, r4
   1b626:	f107 0218 	add.w	r2, r7, #24
   1b62a:	483f      	ldr	r0, [pc, #252]	; (1b728 <send_cmd+0x164>)
   1b62c:	f7f8 fd66 	bl	140fc <z_impl_z_log_msg_static_create>
		net_buf_unref(bt_dev.sent_cmd);
   1b630:	4e3e      	ldr	r6, [pc, #248]	; (1b72c <send_cmd+0x168>)
   1b632:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1b636:	f013 fc63 	bl	2ef00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1b63a:	f8c6 4138 	str.w	r4, [r6, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1b63e:	4628      	mov	r0, r5
   1b640:	f013 fc81 	bl	2ef46 <net_buf_ref>
   1b644:	4b39      	ldr	r3, [pc, #228]	; (1b72c <send_cmd+0x168>)
   1b646:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
	err = bt_send(buf);
   1b64a:	4628      	mov	r0, r5
   1b64c:	f7ff fe9e 	bl	1b38c <bt_send>
	if (err) {
   1b650:	4604      	mov	r4, r0
   1b652:	2800      	cmp	r0, #0
   1b654:	d05b      	beq.n	1b70e <send_cmd+0x14a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1b656:	466e      	mov	r6, sp
   1b658:	b088      	sub	sp, #32
   1b65a:	466b      	mov	r3, sp
   1b65c:	f113 0210 	adds.w	r2, r3, #16
   1b660:	d01d      	beq.n	1b69e <send_cmd+0xda>
   1b662:	210c      	movs	r1, #12
   1b664:	b14a      	cbz	r2, 1b67a <send_cmd+0xb6>
   1b666:	4608      	mov	r0, r1
   1b668:	2904      	cmp	r1, #4
   1b66a:	dd03      	ble.n	1b674 <send_cmd+0xb0>
   1b66c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 1b730 <send_cmd+0x16c>
   1b670:	f8c3 c014 	str.w	ip, [r3, #20]
   1b674:	2808      	cmp	r0, #8
   1b676:	dd15      	ble.n	1b6a4 <send_cmd+0xe0>
   1b678:	619c      	str	r4, [r3, #24]
   1b67a:	290b      	cmp	r1, #11
   1b67c:	dd4a      	ble.n	1b714 <send_cmd+0x150>
   1b67e:	240c      	movs	r4, #12
   1b680:	e012      	b.n	1b6a8 <send_cmd+0xe4>
	BT_ASSERT(buf);
   1b682:	f640 235a 	movw	r3, #2650	; 0xa5a
   1b686:	4a2b      	ldr	r2, [pc, #172]	; (1b734 <send_cmd+0x170>)
   1b688:	492b      	ldr	r1, [pc, #172]	; (1b738 <send_cmd+0x174>)
   1b68a:	482c      	ldr	r0, [pc, #176]	; (1b73c <send_cmd+0x178>)
   1b68c:	f00f fe0a 	bl	2b2a4 <assert_print>
   1b690:	4040      	eors	r0, r0
   1b692:	f380 8811 	msr	BASEPRI, r0
   1b696:	f04f 0003 	mov.w	r0, #3
   1b69a:	df02      	svc	2
   1b69c:	e79d      	b.n	1b5da <send_cmd+0x16>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1b69e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b6a2:	e7df      	b.n	1b664 <send_cmd+0xa0>
   1b6a4:	f06f 041b 	mvn.w	r4, #27
   1b6a8:	b13a      	cbz	r2, 1b6ba <send_cmd+0xf6>
   1b6aa:	2103      	movs	r1, #3
   1b6ac:	7139      	strb	r1, [r7, #4]
   1b6ae:	2100      	movs	r1, #0
   1b6b0:	7179      	strb	r1, [r7, #5]
   1b6b2:	71b9      	strb	r1, [r7, #6]
   1b6b4:	71f9      	strb	r1, [r7, #7]
   1b6b6:	6878      	ldr	r0, [r7, #4]
   1b6b8:	6118      	str	r0, [r3, #16]
   1b6ba:	2100      	movs	r1, #0
   1b6bc:	f36f 0100 	bfc	r1, #0, #1
   1b6c0:	f36f 0141 	bfc	r1, #1, #1
   1b6c4:	f36f 0182 	bfc	r1, #2, #1
   1b6c8:	f36f 01c5 	bfc	r1, #3, #3
   1b6cc:	2301      	movs	r3, #1
   1b6ce:	f363 1188 	bfi	r1, r3, #6, #3
   1b6d2:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1b6d6:	f363 2153 	bfi	r1, r3, #9, #11
   1b6da:	f36f 511f 	bfc	r1, #20, #12
   1b6de:	2300      	movs	r3, #0
   1b6e0:	4811      	ldr	r0, [pc, #68]	; (1b728 <send_cmd+0x164>)
   1b6e2:	f7f8 fd0b 	bl	140fc <z_impl_z_log_msg_static_create>
   1b6e6:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
   1b6e8:	480d      	ldr	r0, [pc, #52]	; (1b720 <send_cmd+0x15c>)
   1b6ea:	f00a fdbf 	bl	2626c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1b6ee:	4628      	mov	r0, r5
   1b6f0:	f013 fb26 	bl	2ed40 <net_buf_id>
   1b6f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1b6f8:	4b11      	ldr	r3, [pc, #68]	; (1b740 <send_cmd+0x17c>)
   1b6fa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1b6fe:	462a      	mov	r2, r5
   1b700:	211f      	movs	r1, #31
   1b702:	8858      	ldrh	r0, [r3, #2]
   1b704:	f7fe f9ae 	bl	19a64 <hci_cmd_done>
		net_buf_unref(buf);
   1b708:	4628      	mov	r0, r5
   1b70a:	f013 fbf9 	bl	2ef00 <net_buf_unref>
}
   1b70e:	3724      	adds	r7, #36	; 0x24
   1b710:	46bd      	mov	sp, r7
   1b712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   1b714:	f06f 041b 	mvn.w	r4, #27
   1b718:	e7c6      	b.n	1b6a8 <send_cmd+0xe4>
   1b71a:	bf00      	nop
   1b71c:	2000057c 	.word	0x2000057c
   1b720:	20000558 	.word	0x20000558
   1b724:	00033b60 	.word	0x00033b60
   1b728:	00031cfc 	.word	0x00031cfc
   1b72c:	20000438 	.word	0x20000438
   1b730:	00033b20 	.word	0x00033b20
   1b734:	000337d8 	.word	0x000337d8
   1b738:	000349f4 	.word	0x000349f4
   1b73c:	00033828 	.word	0x00033828
   1b740:	20003f40 	.word	0x20003f40

0001b744 <process_events>:
{
   1b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b748:	b082      	sub	sp, #8
   1b74a:	af00      	add	r7, sp, #0
   1b74c:	4604      	mov	r4, r0
   1b74e:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
   1b750:	e03a      	b.n	1b7c8 <process_events+0x84>
				send_cmd();
   1b752:	f7ff ff37 	bl	1b5c4 <send_cmd>
   1b756:	e035      	b.n	1b7c4 <process_events+0x80>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1b758:	46e8      	mov	r8, sp
   1b75a:	b088      	sub	sp, #32
   1b75c:	4669      	mov	r1, sp
   1b75e:	f111 0210 	adds.w	r2, r1, #16
   1b762:	d043      	beq.n	1b7ec <process_events+0xa8>
   1b764:	200c      	movs	r0, #12
   1b766:	b152      	cbz	r2, 1b77e <process_events+0x3a>
   1b768:	4684      	mov	ip, r0
   1b76a:	2804      	cmp	r0, #4
   1b76c:	dd03      	ble.n	1b776 <process_events+0x32>
   1b76e:	f8df e090 	ldr.w	lr, [pc, #144]	; 1b800 <process_events+0xbc>
   1b772:	f8c1 e014 	str.w	lr, [r1, #20]
   1b776:	f1bc 0f08 	cmp.w	ip, #8
   1b77a:	dd00      	ble.n	1b77e <process_events+0x3a>
   1b77c:	618b      	str	r3, [r1, #24]
   1b77e:	280b      	cmp	r0, #11
   1b780:	dd37      	ble.n	1b7f2 <process_events+0xae>
   1b782:	230c      	movs	r3, #12
   1b784:	b13a      	cbz	r2, 1b796 <process_events+0x52>
   1b786:	2003      	movs	r0, #3
   1b788:	7138      	strb	r0, [r7, #4]
   1b78a:	2000      	movs	r0, #0
   1b78c:	7178      	strb	r0, [r7, #5]
   1b78e:	71b8      	strb	r0, [r7, #6]
   1b790:	71f8      	strb	r0, [r7, #7]
   1b792:	6878      	ldr	r0, [r7, #4]
   1b794:	6108      	str	r0, [r1, #16]
   1b796:	f36f 0600 	bfc	r6, #0, #1
   1b79a:	f36f 0641 	bfc	r6, #1, #1
   1b79e:	f36f 0682 	bfc	r6, #2, #1
   1b7a2:	f36f 06c5 	bfc	r6, #3, #3
   1b7a6:	2102      	movs	r1, #2
   1b7a8:	f361 1688 	bfi	r6, r1, #6, #3
   1b7ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1b7b0:	f363 2653 	bfi	r6, r3, #9, #11
   1b7b4:	f36f 561f 	bfc	r6, #20, #12
   1b7b8:	2300      	movs	r3, #0
   1b7ba:	4631      	mov	r1, r6
   1b7bc:	4811      	ldr	r0, [pc, #68]	; (1b804 <process_events+0xc0>)
   1b7be:	f7f8 fc9d 	bl	140fc <z_impl_z_log_msg_static_create>
   1b7c2:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
   1b7c4:	3414      	adds	r4, #20
   1b7c6:	3d01      	subs	r5, #1
   1b7c8:	b1b5      	cbz	r5, 1b7f8 <process_events+0xb4>
		switch (ev->state) {
   1b7ca:	68e3      	ldr	r3, [r4, #12]
   1b7cc:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1b7d0:	2b02      	cmp	r3, #2
   1b7d2:	d9f7      	bls.n	1b7c4 <process_events+0x80>
   1b7d4:	2b04      	cmp	r3, #4
   1b7d6:	d1bf      	bne.n	1b758 <process_events+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1b7d8:	7b23      	ldrb	r3, [r4, #12]
   1b7da:	2b00      	cmp	r3, #0
   1b7dc:	d0b9      	beq.n	1b752 <process_events+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1b7de:	2b01      	cmp	r3, #1
   1b7e0:	d1f0      	bne.n	1b7c4 <process_events+0x80>
					conn = CONTAINER_OF(ev->fifo,
   1b7e2:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   1b7e4:	3838      	subs	r0, #56	; 0x38
   1b7e6:	f002 fa19 	bl	1dc1c <bt_conn_process_tx>
   1b7ea:	e7eb      	b.n	1b7c4 <process_events+0x80>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1b7ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b7f0:	e7b9      	b.n	1b766 <process_events+0x22>
   1b7f2:	f06f 031b 	mvn.w	r3, #27
   1b7f6:	e7c5      	b.n	1b784 <process_events+0x40>
}
   1b7f8:	3708      	adds	r7, #8
   1b7fa:	46bd      	mov	sp, r7
   1b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b800:	00033b7c 	.word	0x00033b7c
   1b804:	00031cfc 	.word	0x00031cfc

0001b808 <hci_tx_thread>:
{
   1b808:	b538      	push	{r3, r4, r5, lr}
   1b80a:	e012      	b.n	1b832 <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   1b80c:	f640 23c8 	movw	r3, #2760	; 0xac8
   1b810:	4a12      	ldr	r2, [pc, #72]	; (1b85c <hci_tx_thread+0x54>)
   1b812:	4913      	ldr	r1, [pc, #76]	; (1b860 <hci_tx_thread+0x58>)
   1b814:	4813      	ldr	r0, [pc, #76]	; (1b864 <hci_tx_thread+0x5c>)
   1b816:	f00f fd45 	bl	2b2a4 <assert_print>
   1b81a:	4040      	eors	r0, r0
   1b81c:	f380 8811 	msr	BASEPRI, r0
   1b820:	f04f 0003 	mov.w	r0, #3
   1b824:	df02      	svc	2
		process_events(events, ev_count);
   1b826:	4621      	mov	r1, r4
   1b828:	480f      	ldr	r0, [pc, #60]	; (1b868 <hci_tx_thread+0x60>)
   1b82a:	f7ff ff8b 	bl	1b744 <process_events>
	z_impl_k_yield();
   1b82e:	f00b f9e3 	bl	26bf8 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   1b832:	4d0d      	ldr	r5, [pc, #52]	; (1b868 <hci_tx_thread+0x60>)
   1b834:	68eb      	ldr	r3, [r5, #12]
   1b836:	f36f 3394 	bfc	r3, #14, #7
   1b83a:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1b83c:	f105 0014 	add.w	r0, r5, #20
   1b840:	f001 fd42 	bl	1d2c8 <bt_conn_prepare_events>
   1b844:	1c44      	adds	r4, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1b846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b84a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b84e:	4621      	mov	r1, r4
   1b850:	4628      	mov	r0, r5
   1b852:	f00b fd05 	bl	27260 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1b856:	2800      	cmp	r0, #0
   1b858:	d1d8      	bne.n	1b80c <hci_tx_thread+0x4>
   1b85a:	e7e4      	b.n	1b826 <hci_tx_thread+0x1e>
   1b85c:	000337d8 	.word	0x000337d8
   1b860:	000338f4 	.word	0x000338f4
   1b864:	00033828 	.word	0x00033828
   1b868:	20000714 	.word	0x20000714

0001b86c <hci_event_prio>:
{
   1b86c:	b570      	push	{r4, r5, r6, lr}
   1b86e:	b082      	sub	sp, #8
   1b870:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1b872:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1b876:	4628      	mov	r0, r5
   1b878:	f013 fbc5 	bl	2f006 <net_buf_simple_headroom>
   1b87c:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   1b880:	8a23      	ldrh	r3, [r4, #16]
   1b882:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1b886:	2b01      	cmp	r3, #1
   1b888:	d91e      	bls.n	1b8c8 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b88a:	2102      	movs	r1, #2
   1b88c:	4628      	mov	r0, r5
   1b88e:	f013 fbaa 	bl	2efe6 <net_buf_simple_pull_mem>
   1b892:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1b894:	7800      	ldrb	r0, [r0, #0]
   1b896:	f011 f8c5 	bl	2ca24 <bt_hci_evt_get_flags>
   1b89a:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1b89c:	f010 0f01 	tst.w	r0, #1
   1b8a0:	d020      	beq.n	1b8e4 <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1b8a2:	2305      	movs	r3, #5
   1b8a4:	4a18      	ldr	r2, [pc, #96]	; (1b908 <hci_event_prio+0x9c>)
   1b8a6:	4621      	mov	r1, r4
   1b8a8:	7830      	ldrb	r0, [r6, #0]
   1b8aa:	f7fe fab1 	bl	19e10 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1b8ae:	f015 0f02 	tst.w	r5, #2
   1b8b2:	d025      	beq.n	1b900 <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   1b8b4:	6963      	ldr	r3, [r4, #20]
   1b8b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b8ba:	4413      	add	r3, r2
   1b8bc:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   1b8be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b8c2:	8223      	strh	r3, [r4, #16]
}
   1b8c4:	b002      	add	sp, #8
   1b8c6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1b8c8:	f640 636f 	movw	r3, #3695	; 0xe6f
   1b8cc:	4a0f      	ldr	r2, [pc, #60]	; (1b90c <hci_event_prio+0xa0>)
   1b8ce:	4910      	ldr	r1, [pc, #64]	; (1b910 <hci_event_prio+0xa4>)
   1b8d0:	4810      	ldr	r0, [pc, #64]	; (1b914 <hci_event_prio+0xa8>)
   1b8d2:	f00f fce7 	bl	2b2a4 <assert_print>
   1b8d6:	4040      	eors	r0, r0
   1b8d8:	f380 8811 	msr	BASEPRI, r0
   1b8dc:	f04f 0003 	mov.w	r0, #3
   1b8e0:	df02      	svc	2
   1b8e2:	e7d2      	b.n	1b88a <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1b8e4:	f640 6373 	movw	r3, #3699	; 0xe73
   1b8e8:	4a08      	ldr	r2, [pc, #32]	; (1b90c <hci_event_prio+0xa0>)
   1b8ea:	490b      	ldr	r1, [pc, #44]	; (1b918 <hci_event_prio+0xac>)
   1b8ec:	4809      	ldr	r0, [pc, #36]	; (1b914 <hci_event_prio+0xa8>)
   1b8ee:	f00f fcd9 	bl	2b2a4 <assert_print>
   1b8f2:	4040      	eors	r0, r0
   1b8f4:	f380 8811 	msr	BASEPRI, r0
   1b8f8:	f04f 0003 	mov.w	r0, #3
   1b8fc:	df02      	svc	2
   1b8fe:	e7d0      	b.n	1b8a2 <hci_event_prio+0x36>
		net_buf_unref(buf);
   1b900:	4620      	mov	r0, r4
   1b902:	f013 fafd 	bl	2ef00 <net_buf_unref>
}
   1b906:	e7dd      	b.n	1b8c4 <hci_event_prio+0x58>
   1b908:	00033d50 	.word	0x00033d50
   1b90c:	000337d8 	.word	0x000337d8
   1b910:	0003380c 	.word	0x0003380c
   1b914:	00033828 	.word	0x00033828
   1b918:	00033ba0 	.word	0x00033ba0

0001b91c <bt_recv>:
{
   1b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b91e:	b083      	sub	sp, #12
   1b920:	af00      	add	r7, sp, #0
   1b922:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1b924:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   1b926:	2b01      	cmp	r3, #1
   1b928:	d007      	beq.n	1b93a <bt_recv+0x1e>
   1b92a:	2b03      	cmp	r3, #3
   1b92c:	d11b      	bne.n	1b966 <bt_recv+0x4a>
		rx_queue_put(buf);
   1b92e:	f7fe fb37 	bl	19fa0 <rx_queue_put>
		return 0;
   1b932:	2000      	movs	r0, #0
}
   1b934:	370c      	adds	r7, #12
   1b936:	46bd      	mov	sp, r7
   1b938:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   1b93a:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1b93c:	7818      	ldrb	r0, [r3, #0]
   1b93e:	f011 f871 	bl	2ca24 <bt_hci_evt_get_flags>
   1b942:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1b944:	f010 0f01 	tst.w	r0, #1
   1b948:	d104      	bne.n	1b954 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1b94a:	f015 0f02 	tst.w	r5, #2
   1b94e:	d105      	bne.n	1b95c <bt_recv+0x40>
		return 0;
   1b950:	2000      	movs	r0, #0
   1b952:	e7ef      	b.n	1b934 <bt_recv+0x18>
			hci_event_prio(buf);
   1b954:	4620      	mov	r0, r4
   1b956:	f7ff ff89 	bl	1b86c <hci_event_prio>
   1b95a:	e7f6      	b.n	1b94a <bt_recv+0x2e>
			rx_queue_put(buf);
   1b95c:	4620      	mov	r0, r4
   1b95e:	f7fe fb1f 	bl	19fa0 <rx_queue_put>
		return 0;
   1b962:	2000      	movs	r0, #0
   1b964:	e7e6      	b.n	1b934 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1b966:	466d      	mov	r5, sp
   1b968:	b088      	sub	sp, #32
   1b96a:	4669      	mov	r1, sp
   1b96c:	f111 0210 	adds.w	r2, r1, #16
   1b970:	d033      	beq.n	1b9da <bt_recv+0xbe>
   1b972:	200c      	movs	r0, #12
   1b974:	b142      	cbz	r2, 1b988 <bt_recv+0x6c>
   1b976:	4684      	mov	ip, r0
   1b978:	2804      	cmp	r0, #4
   1b97a:	dd01      	ble.n	1b980 <bt_recv+0x64>
   1b97c:	4e1a      	ldr	r6, [pc, #104]	; (1b9e8 <bt_recv+0xcc>)
   1b97e:	614e      	str	r6, [r1, #20]
   1b980:	f1bc 0f08 	cmp.w	ip, #8
   1b984:	dd00      	ble.n	1b988 <bt_recv+0x6c>
   1b986:	618b      	str	r3, [r1, #24]
   1b988:	280b      	cmp	r0, #11
   1b98a:	dd29      	ble.n	1b9e0 <bt_recv+0xc4>
   1b98c:	230c      	movs	r3, #12
   1b98e:	b13a      	cbz	r2, 1b9a0 <bt_recv+0x84>
   1b990:	2003      	movs	r0, #3
   1b992:	7138      	strb	r0, [r7, #4]
   1b994:	2000      	movs	r0, #0
   1b996:	7178      	strb	r0, [r7, #5]
   1b998:	71b8      	strb	r0, [r7, #6]
   1b99a:	71f8      	strb	r0, [r7, #7]
   1b99c:	6878      	ldr	r0, [r7, #4]
   1b99e:	6108      	str	r0, [r1, #16]
   1b9a0:	2100      	movs	r1, #0
   1b9a2:	f36f 0100 	bfc	r1, #0, #1
   1b9a6:	f36f 0141 	bfc	r1, #1, #1
   1b9aa:	f36f 0182 	bfc	r1, #2, #1
   1b9ae:	f36f 01c5 	bfc	r1, #3, #3
   1b9b2:	2001      	movs	r0, #1
   1b9b4:	f360 1188 	bfi	r1, r0, #6, #3
   1b9b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1b9bc:	f363 2153 	bfi	r1, r3, #9, #11
   1b9c0:	f36f 511f 	bfc	r1, #20, #12
   1b9c4:	2300      	movs	r3, #0
   1b9c6:	4809      	ldr	r0, [pc, #36]	; (1b9ec <bt_recv+0xd0>)
   1b9c8:	f7f8 fb98 	bl	140fc <z_impl_z_log_msg_static_create>
   1b9cc:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1b9ce:	4620      	mov	r0, r4
   1b9d0:	f013 fa96 	bl	2ef00 <net_buf_unref>
		return -EINVAL;
   1b9d4:	f06f 0015 	mvn.w	r0, #21
   1b9d8:	e7ac      	b.n	1b934 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1b9da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b9de:	e7c9      	b.n	1b974 <bt_recv+0x58>
   1b9e0:	f06f 031b 	mvn.w	r3, #27
   1b9e4:	e7d3      	b.n	1b98e <bt_recv+0x72>
   1b9e6:	bf00      	nop
   1b9e8:	00033bbc 	.word	0x00033bbc
   1b9ec:	00031cfc 	.word	0x00031cfc

0001b9f0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1b9f0:	4b0a      	ldr	r3, [pc, #40]	; (1ba1c <bt_hci_driver_register+0x2c>)
   1b9f2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1b9f6:	b943      	cbnz	r3, 1ba0a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1b9f8:	68c3      	ldr	r3, [r0, #12]
   1b9fa:	b14b      	cbz	r3, 1ba10 <bt_hci_driver_register+0x20>
   1b9fc:	6943      	ldr	r3, [r0, #20]
   1b9fe:	b153      	cbz	r3, 1ba16 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   1ba00:	4b06      	ldr	r3, [pc, #24]	; (1ba1c <bt_hci_driver_register+0x2c>)
   1ba02:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
	return 0;
   1ba06:	2000      	movs	r0, #0
   1ba08:	4770      	bx	lr
		return -EALREADY;
   1ba0a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ba0e:	4770      	bx	lr
		return -EINVAL;
   1ba10:	f06f 0015 	mvn.w	r0, #21
   1ba14:	4770      	bx	lr
   1ba16:	f06f 0015 	mvn.w	r0, #21
}
   1ba1a:	4770      	bx	lr
   1ba1c:	20000438 	.word	0x20000438

0001ba20 <bt_finalize_init>:
{
   1ba20:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ba22:	4b08      	ldr	r3, [pc, #32]	; (1ba44 <bt_finalize_init+0x24>)
   1ba24:	f3bf 8f5b 	dmb	ish
   1ba28:	e853 1f00 	ldrex	r1, [r3]
   1ba2c:	f041 0104 	orr.w	r1, r1, #4
   1ba30:	e843 1200 	strex	r2, r1, [r3]
   1ba34:	2a00      	cmp	r2, #0
   1ba36:	d1f7      	bne.n	1ba28 <bt_finalize_init+0x8>
   1ba38:	f3bf 8f5b 	dmb	ish
	bt_dev_show_info();
   1ba3c:	f7fd fbd6 	bl	191ec <bt_dev_show_info>
}
   1ba40:	bd08      	pop	{r3, pc}
   1ba42:	bf00      	nop
   1ba44:	2000050c 	.word	0x2000050c

0001ba48 <init_work>:
{
   1ba48:	b508      	push	{r3, lr}
	err = bt_init();
   1ba4a:	f011 f974 	bl	2cd36 <bt_init>
	if (ready_cb) {
   1ba4e:	4b02      	ldr	r3, [pc, #8]	; (1ba58 <init_work+0x10>)
   1ba50:	681b      	ldr	r3, [r3, #0]
   1ba52:	b103      	cbz	r3, 1ba56 <init_work+0xe>
		ready_cb(err);
   1ba54:	4798      	blx	r3
}
   1ba56:	bd08      	pop	{r3, pc}
   1ba58:	20003f58 	.word	0x20003f58

0001ba5c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1ba5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba60:	b090      	sub	sp, #64	; 0x40
   1ba62:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
   1ba64:	4b67      	ldr	r3, [pc, #412]	; (1bc04 <bt_enable+0x1a8>)
   1ba66:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1ba6a:	2b00      	cmp	r3, #0
   1ba6c:	d063      	beq.n	1bb36 <bt_enable+0xda>
   1ba6e:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ba70:	4b65      	ldr	r3, [pc, #404]	; (1bc08 <bt_enable+0x1ac>)
   1ba72:	f3bf 8f5b 	dmb	ish
   1ba76:	e853 2f00 	ldrex	r2, [r3]
   1ba7a:	f022 0202 	bic.w	r2, r2, #2
   1ba7e:	e843 2100 	strex	r1, r2, [r3]
   1ba82:	2900      	cmp	r1, #0
   1ba84:	d1f7      	bne.n	1ba76 <bt_enable+0x1a>
   1ba86:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ba8a:	f3bf 8f5b 	dmb	ish
   1ba8e:	e853 2f00 	ldrex	r2, [r3]
   1ba92:	f042 0101 	orr.w	r1, r2, #1
   1ba96:	e843 1000 	strex	r0, r1, [r3]
   1ba9a:	2800      	cmp	r0, #0
   1ba9c:	d1f7      	bne.n	1ba8e <bt_enable+0x32>
   1ba9e:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1baa2:	f012 0f01 	tst.w	r2, #1
   1baa6:	f040 80aa 	bne.w	1bbfe <bt_enable+0x1a2>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   1baaa:	4b58      	ldr	r3, [pc, #352]	; (1bc0c <bt_enable+0x1b0>)
   1baac:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1baae:	4e58      	ldr	r6, [pc, #352]	; (1bc10 <bt_enable+0x1b4>)
   1bab0:	2201      	movs	r2, #1
   1bab2:	4611      	mov	r1, r2
   1bab4:	4630      	mov	r0, r6
   1bab6:	f015 f975 	bl	30da4 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1baba:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1babe:	f015 f948 	bl	30d52 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bac2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 1bc14 <bt_enable+0x1b8>
   1bac6:	2200      	movs	r2, #0
   1bac8:	2300      	movs	r3, #0
   1baca:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bace:	2400      	movs	r4, #0
   1bad0:	9404      	str	r4, [sp, #16]
   1bad2:	f06f 0308 	mvn.w	r3, #8
   1bad6:	9303      	str	r3, [sp, #12]
   1bad8:	9402      	str	r4, [sp, #8]
   1bada:	9401      	str	r4, [sp, #4]
   1badc:	9400      	str	r4, [sp, #0]
   1bade:	4b4e      	ldr	r3, [pc, #312]	; (1bc18 <bt_enable+0x1bc>)
   1bae0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1bae4:	494d      	ldr	r1, [pc, #308]	; (1bc1c <bt_enable+0x1c0>)
   1bae6:	4640      	mov	r0, r8
   1bae8:	f015 f85b 	bl	30ba2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1baec:	494c      	ldr	r1, [pc, #304]	; (1bc20 <bt_enable+0x1c4>)
   1baee:	4640      	mov	r0, r8
   1baf0:	f00a f9d0 	bl	25e94 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   1baf4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 1bc24 <bt_enable+0x1c8>
   1baf8:	4640      	mov	r0, r8
   1bafa:	f015 fa62 	bl	30fc2 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1bafe:	9400      	str	r4, [sp, #0]
   1bb00:	f06f 0307 	mvn.w	r3, #7
   1bb04:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1bb08:	4947      	ldr	r1, [pc, #284]	; (1bc28 <bt_enable+0x1cc>)
   1bb0a:	4640      	mov	r0, r8
   1bb0c:	f00a fd5c 	bl	265c8 <k_work_queue_start>
   1bb10:	4946      	ldr	r1, [pc, #280]	; (1bc2c <bt_enable+0x1d0>)
   1bb12:	4640      	mov	r0, r8
   1bb14:	f00a f9be 	bl	25e94 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   1bb18:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1bb1a:	68db      	ldr	r3, [r3, #12]
   1bb1c:	4798      	blx	r3
	if (err) {
   1bb1e:	4604      	mov	r4, r0
   1bb20:	bb60      	cbnz	r0, 1bb7c <bt_enable+0x120>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   1bb22:	2d00      	cmp	r5, #0
   1bb24:	d067      	beq.n	1bbf6 <bt_enable+0x19a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   1bb26:	4842      	ldr	r0, [pc, #264]	; (1bc30 <bt_enable+0x1d4>)
   1bb28:	f00a fd46 	bl	265b8 <k_work_submit>
	return 0;
}
   1bb2c:	4620      	mov	r0, r4
   1bb2e:	3720      	adds	r7, #32
   1bb30:	46bd      	mov	sp, r7
   1bb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI driver registered");
   1bb36:	4b3f      	ldr	r3, [pc, #252]	; (1bc34 <bt_enable+0x1d8>)
   1bb38:	61fb      	str	r3, [r7, #28]
   1bb3a:	2302      	movs	r3, #2
   1bb3c:	713b      	strb	r3, [r7, #4]
   1bb3e:	2300      	movs	r3, #0
   1bb40:	717b      	strb	r3, [r7, #5]
   1bb42:	71bb      	strb	r3, [r7, #6]
   1bb44:	71fb      	strb	r3, [r7, #7]
   1bb46:	687a      	ldr	r2, [r7, #4]
   1bb48:	61ba      	str	r2, [r7, #24]
   1bb4a:	4619      	mov	r1, r3
   1bb4c:	f363 0100 	bfi	r1, r3, #0, #1
   1bb50:	f363 0141 	bfi	r1, r3, #1, #1
   1bb54:	f363 0182 	bfi	r1, r3, #2, #1
   1bb58:	f363 01c5 	bfi	r1, r3, #3, #3
   1bb5c:	2201      	movs	r2, #1
   1bb5e:	f362 1188 	bfi	r1, r2, #6, #3
   1bb62:	2208      	movs	r2, #8
   1bb64:	f362 2153 	bfi	r1, r2, #9, #11
   1bb68:	f363 511f 	bfi	r1, r3, #20, #12
   1bb6c:	f107 0218 	add.w	r2, r7, #24
   1bb70:	4831      	ldr	r0, [pc, #196]	; (1bc38 <bt_enable+0x1dc>)
   1bb72:	f7f8 fac3 	bl	140fc <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1bb76:	f06f 0412 	mvn.w	r4, #18
   1bb7a:	e7d7      	b.n	1bb2c <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   1bb7c:	466e      	mov	r6, sp
   1bb7e:	b088      	sub	sp, #32
   1bb80:	4633      	mov	r3, r6
   1bb82:	f116 0210 	adds.w	r2, r6, #16
   1bb86:	d00d      	beq.n	1bba4 <bt_enable+0x148>
   1bb88:	210c      	movs	r1, #12
   1bb8a:	b13a      	cbz	r2, 1bb9c <bt_enable+0x140>
   1bb8c:	4608      	mov	r0, r1
   1bb8e:	2904      	cmp	r1, #4
   1bb90:	dd01      	ble.n	1bb96 <bt_enable+0x13a>
   1bb92:	4d2a      	ldr	r5, [pc, #168]	; (1bc3c <bt_enable+0x1e0>)
   1bb94:	615d      	str	r5, [r3, #20]
   1bb96:	2808      	cmp	r0, #8
   1bb98:	dd07      	ble.n	1bbaa <bt_enable+0x14e>
   1bb9a:	619c      	str	r4, [r3, #24]
   1bb9c:	290b      	cmp	r1, #11
   1bb9e:	dd27      	ble.n	1bbf0 <bt_enable+0x194>
   1bba0:	250c      	movs	r5, #12
   1bba2:	e004      	b.n	1bbae <bt_enable+0x152>
   1bba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bba8:	e7ef      	b.n	1bb8a <bt_enable+0x12e>
   1bbaa:	f06f 051b 	mvn.w	r5, #27
   1bbae:	b13a      	cbz	r2, 1bbc0 <bt_enable+0x164>
   1bbb0:	2103      	movs	r1, #3
   1bbb2:	7139      	strb	r1, [r7, #4]
   1bbb4:	2100      	movs	r1, #0
   1bbb6:	7179      	strb	r1, [r7, #5]
   1bbb8:	71b9      	strb	r1, [r7, #6]
   1bbba:	71f9      	strb	r1, [r7, #7]
   1bbbc:	6878      	ldr	r0, [r7, #4]
   1bbbe:	6118      	str	r0, [r3, #16]
   1bbc0:	2100      	movs	r1, #0
   1bbc2:	f36f 0100 	bfc	r1, #0, #1
   1bbc6:	f36f 0141 	bfc	r1, #1, #1
   1bbca:	f36f 0182 	bfc	r1, #2, #1
   1bbce:	f36f 01c5 	bfc	r1, #3, #3
   1bbd2:	2301      	movs	r3, #1
   1bbd4:	f363 1188 	bfi	r1, r3, #6, #3
   1bbd8:	f3c5 030a 	ubfx	r3, r5, #0, #11
   1bbdc:	f363 2153 	bfi	r1, r3, #9, #11
   1bbe0:	f36f 511f 	bfc	r1, #20, #12
   1bbe4:	2300      	movs	r3, #0
   1bbe6:	4814      	ldr	r0, [pc, #80]	; (1bc38 <bt_enable+0x1dc>)
   1bbe8:	f7f8 fa88 	bl	140fc <z_impl_z_log_msg_static_create>
   1bbec:	46b5      	mov	sp, r6
		return err;
   1bbee:	e79d      	b.n	1bb2c <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   1bbf0:	f06f 051b 	mvn.w	r5, #27
   1bbf4:	e7db      	b.n	1bbae <bt_enable+0x152>
		return bt_init();
   1bbf6:	f011 f89e 	bl	2cd36 <bt_init>
   1bbfa:	4604      	mov	r4, r0
   1bbfc:	e796      	b.n	1bb2c <bt_enable+0xd0>
		return -EALREADY;
   1bbfe:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1bc02:	e793      	b.n	1bb2c <bt_enable+0xd0>
   1bc04:	20000438 	.word	0x20000438
   1bc08:	2000050c 	.word	0x2000050c
   1bc0c:	20003f58 	.word	0x20003f58
   1bc10:	20000558 	.word	0x20000558
   1bc14:	20002058 	.word	0x20002058
   1bc18:	0001b809 	.word	0x0001b809
   1bc1c:	20006a80 	.word	0x20006a80
   1bc20:	00033bec 	.word	0x00033bec
   1bc24:	20002110 	.word	0x20002110
   1bc28:	200070c0 	.word	0x200070c0
   1bc2c:	00033bf4 	.word	0x00033bf4
   1bc30:	200004fc 	.word	0x200004fc
   1bc34:	00033bd0 	.word	0x00033bd0
   1bc38:	00031cfc 	.word	0x00031cfc
   1bc3c:	00033bfc 	.word	0x00033bfc

0001bc40 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bc40:	f3bf 8f5b 	dmb	ish
   1bc44:	4b03      	ldr	r3, [pc, #12]	; (1bc54 <bt_is_ready+0x14>)
   1bc46:	6818      	ldr	r0, [r3, #0]
   1bc48:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bc4c:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1bc50:	4770      	bx	lr
   1bc52:	bf00      	nop
   1bc54:	2000050c 	.word	0x2000050c

0001bc58 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1bc58:	4800      	ldr	r0, [pc, #0]	; (1bc5c <bt_get_name+0x4>)
   1bc5a:	4770      	bx	lr
   1bc5c:	00032574 	.word	0x00032574

0001bc60 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1bc60:	b570      	push	{r4, r5, r6, lr}
   1bc62:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1bc64:	2400      	movs	r4, #0
   1bc66:	e001      	b.n	1bc6c <id_find+0xc>
   1bc68:	3401      	adds	r4, #1
   1bc6a:	b2e4      	uxtb	r4, r4
   1bc6c:	4b09      	ldr	r3, [pc, #36]	; (1bc94 <id_find+0x34>)
   1bc6e:	79db      	ldrb	r3, [r3, #7]
   1bc70:	42a3      	cmp	r3, r4
   1bc72:	d90b      	bls.n	1bc8c <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1bc74:	4626      	mov	r6, r4
   1bc76:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1bc7a:	2207      	movs	r2, #7
   1bc7c:	4b05      	ldr	r3, [pc, #20]	; (1bc94 <id_find+0x34>)
   1bc7e:	4419      	add	r1, r3
   1bc80:	4628      	mov	r0, r5
   1bc82:	f010 fd8e 	bl	2c7a2 <memcmp>
   1bc86:	2800      	cmp	r0, #0
   1bc88:	d1ee      	bne.n	1bc68 <id_find+0x8>
   1bc8a:	e001      	b.n	1bc90 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   1bc8c:	f06f 0601 	mvn.w	r6, #1
}
   1bc90:	4630      	mov	r0, r6
   1bc92:	bd70      	pop	{r4, r5, r6, pc}
   1bc94:	20000438 	.word	0x20000438

0001bc98 <set_random_address>:
{
   1bc98:	b570      	push	{r4, r5, r6, lr}
   1bc9a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1bc9c:	2206      	movs	r2, #6
   1bc9e:	4914      	ldr	r1, [pc, #80]	; (1bcf0 <set_random_address+0x58>)
   1bca0:	f010 fd7f 	bl	2c7a2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1bca4:	4605      	mov	r5, r0
   1bca6:	b908      	cbnz	r0, 1bcac <set_random_address+0x14>
}
   1bca8:	4628      	mov	r0, r5
   1bcaa:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1bcac:	2106      	movs	r1, #6
   1bcae:	f242 0005 	movw	r0, #8197	; 0x2005
   1bcb2:	f7fe fbfb 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   1bcb6:	4605      	mov	r5, r0
   1bcb8:	b1b8      	cbz	r0, 1bcea <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bcba:	2206      	movs	r2, #6
   1bcbc:	4621      	mov	r1, r4
   1bcbe:	300c      	adds	r0, #12
   1bcc0:	f013 f96f 	bl	2efa2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1bcc4:	2200      	movs	r2, #0
   1bcc6:	4629      	mov	r1, r5
   1bcc8:	f242 0005 	movw	r0, #8197	; 0x2005
   1bccc:	f7fe fc2c 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1bcd0:	4605      	mov	r5, r0
   1bcd2:	2800      	cmp	r0, #0
   1bcd4:	d1e8      	bne.n	1bca8 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   1bcd6:	4e06      	ldr	r6, [pc, #24]	; (1bcf0 <set_random_address+0x58>)
   1bcd8:	2206      	movs	r2, #6
   1bcda:	4621      	mov	r1, r4
   1bcdc:	4630      	mov	r0, r6
   1bcde:	f010 fd85 	bl	2c7ec <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1bce2:	2301      	movs	r3, #1
   1bce4:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   1bce8:	e7de      	b.n	1bca8 <set_random_address+0x10>
		return -ENOBUFS;
   1bcea:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1bcee:	e7db      	b.n	1bca8 <set_random_address+0x10>
   1bcf0:	200004a1 	.word	0x200004a1

0001bcf4 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   1bcf4:	b570      	push	{r4, r5, r6, lr}
   1bcf6:	b082      	sub	sp, #8
   1bcf8:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1bcfa:	460e      	mov	r6, r1
   1bcfc:	b129      	cbz	r1, 1bd0a <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   1bcfe:	2207      	movs	r2, #7
   1bd00:	4915      	ldr	r1, [pc, #84]	; (1bd58 <id_create+0x64>)
   1bd02:	4630      	mov	r0, r6
   1bd04:	f010 fd4d 	bl	2c7a2 <memcmp>
   1bd08:	b9d8      	cbnz	r0, 1bd42 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   1bd0a:	4668      	mov	r0, sp
   1bd0c:	f010 fe44 	bl	2c998 <bt_addr_le_create_static>
			if (err) {
   1bd10:	4604      	mov	r4, r0
   1bd12:	b998      	cbnz	r0, 1bd3c <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   1bd14:	4668      	mov	r0, sp
   1bd16:	f7ff ffa3 	bl	1bc60 <id_find>
   1bd1a:	2800      	cmp	r0, #0
   1bd1c:	daf5      	bge.n	1bd0a <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1bd1e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1bd22:	4b0e      	ldr	r3, [pc, #56]	; (1bd5c <id_create+0x68>)
   1bd24:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   1bd26:	2207      	movs	r2, #7
   1bd28:	4669      	mov	r1, sp
   1bd2a:	4628      	mov	r0, r5
   1bd2c:	f010 fd5e 	bl	2c7ec <memcpy>

		if (addr) {
   1bd30:	b126      	cbz	r6, 1bd3c <id_create+0x48>
   1bd32:	2207      	movs	r2, #7
   1bd34:	4629      	mov	r1, r5
   1bd36:	4630      	mov	r0, r6
   1bd38:	f010 fd58 	bl	2c7ec <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   1bd3c:	4620      	mov	r0, r4
   1bd3e:	b002      	add	sp, #8
   1bd40:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1bd42:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1bd46:	2207      	movs	r2, #7
   1bd48:	4631      	mov	r1, r6
   1bd4a:	4804      	ldr	r0, [pc, #16]	; (1bd5c <id_create+0x68>)
   1bd4c:	4428      	add	r0, r5
   1bd4e:	f010 fd4d 	bl	2c7ec <memcpy>
	return 0;
   1bd52:	2400      	movs	r4, #0
}
   1bd54:	e7f2      	b.n	1bd3c <id_create+0x48>
   1bd56:	bf00      	nop
   1bd58:	000334a0 	.word	0x000334a0
   1bd5c:	20000438 	.word	0x20000438

0001bd60 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1bd60:	b570      	push	{r4, r5, r6, lr}
   1bd62:	b08a      	sub	sp, #40	; 0x28
   1bd64:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1bd66:	4605      	mov	r5, r0
   1bd68:	b188      	cbz	r0, 1bd8e <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   1bd6a:	2207      	movs	r2, #7
   1bd6c:	4936      	ldr	r1, [pc, #216]	; (1be48 <bt_id_create+0xe8>)
   1bd6e:	f010 fd18 	bl	2c7a2 <memcmp>
   1bd72:	b160      	cbz	r0, 1bd8e <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1bd74:	782b      	ldrb	r3, [r5, #0]
   1bd76:	2b01      	cmp	r3, #1
   1bd78:	d134      	bne.n	1bde4 <bt_id_create+0x84>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   1bd7a:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1bd7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1bd80:	2bc0      	cmp	r3, #192	; 0xc0
   1bd82:	d12f      	bne.n	1bde4 <bt_id_create+0x84>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   1bd84:	4628      	mov	r0, r5
   1bd86:	f7ff ff6b 	bl	1bc60 <id_find>
   1bd8a:	2800      	cmp	r0, #0
   1bd8c:	da53      	bge.n	1be36 <bt_id_create+0xd6>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1bd8e:	2c00      	cmp	r4, #0
   1bd90:	d154      	bne.n	1be3c <bt_id_create+0xdc>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1bd92:	4b2e      	ldr	r3, [pc, #184]	; (1be4c <bt_id_create+0xec>)
   1bd94:	79db      	ldrb	r3, [r3, #7]
   1bd96:	2b01      	cmp	r3, #1
   1bd98:	d053      	beq.n	1be42 <bt_id_create+0xe2>
   1bd9a:	f3bf 8f5b 	dmb	ish
   1bd9e:	4b2c      	ldr	r3, [pc, #176]	; (1be50 <bt_id_create+0xf0>)
   1bda0:	681b      	ldr	r3, [r3, #0]
   1bda2:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1bda6:	f013 0f01 	tst.w	r3, #1
   1bdaa:	d10c      	bne.n	1bdc6 <bt_id_create+0x66>
		uint8_t zero_irk[16] = { 0 };
   1bdac:	2300      	movs	r3, #0
   1bdae:	9300      	str	r3, [sp, #0]
   1bdb0:	9301      	str	r3, [sp, #4]
   1bdb2:	9302      	str	r3, [sp, #8]
   1bdb4:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1bdb6:	2d00      	cmp	r5, #0
   1bdb8:	d03a      	beq.n	1be30 <bt_id_create+0xd0>
   1bdba:	2207      	movs	r2, #7
   1bdbc:	4922      	ldr	r1, [pc, #136]	; (1be48 <bt_id_create+0xe8>)
   1bdbe:	4628      	mov	r0, r5
   1bdc0:	f010 fcef 	bl	2c7a2 <memcmp>
   1bdc4:	b3a0      	cbz	r0, 1be30 <bt_id_create+0xd0>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   1bdc6:	4b21      	ldr	r3, [pc, #132]	; (1be4c <bt_id_create+0xec>)
   1bdc8:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   1bdca:	4622      	mov	r2, r4
   1bdcc:	4629      	mov	r1, r5
   1bdce:	4630      	mov	r0, r6
   1bdd0:	f7ff ff90 	bl	1bcf4 <id_create>
	if (err) {
   1bdd4:	b920      	cbnz	r0, 1bde0 <bt_id_create+0x80>
		return err;
	} else {
		bt_dev.id_count++;
   1bdd6:	4a1d      	ldr	r2, [pc, #116]	; (1be4c <bt_id_create+0xec>)
   1bdd8:	79d3      	ldrb	r3, [r2, #7]
   1bdda:	3301      	adds	r3, #1
   1bddc:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   1bdde:	4630      	mov	r0, r6
}
   1bde0:	b00a      	add	sp, #40	; 0x28
   1bde2:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Only static random identity address supported");
   1bde4:	4b1b      	ldr	r3, [pc, #108]	; (1be54 <bt_id_create+0xf4>)
   1bde6:	9309      	str	r3, [sp, #36]	; 0x24
   1bde8:	2302      	movs	r3, #2
   1bdea:	f88d 3000 	strb.w	r3, [sp]
   1bdee:	2300      	movs	r3, #0
   1bdf0:	f88d 3001 	strb.w	r3, [sp, #1]
   1bdf4:	f88d 3002 	strb.w	r3, [sp, #2]
   1bdf8:	f88d 3003 	strb.w	r3, [sp, #3]
   1bdfc:	9a00      	ldr	r2, [sp, #0]
   1bdfe:	9208      	str	r2, [sp, #32]
   1be00:	4619      	mov	r1, r3
   1be02:	f363 0100 	bfi	r1, r3, #0, #1
   1be06:	f363 0141 	bfi	r1, r3, #1, #1
   1be0a:	f363 0182 	bfi	r1, r3, #2, #1
   1be0e:	f363 01c5 	bfi	r1, r3, #3, #3
   1be12:	2201      	movs	r2, #1
   1be14:	f362 1188 	bfi	r1, r2, #6, #3
   1be18:	2208      	movs	r2, #8
   1be1a:	f362 2153 	bfi	r1, r2, #9, #11
   1be1e:	f363 511f 	bfi	r1, r3, #20, #12
   1be22:	aa08      	add	r2, sp, #32
   1be24:	480c      	ldr	r0, [pc, #48]	; (1be58 <bt_id_create+0xf8>)
   1be26:	f7f8 f969 	bl	140fc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1be2a:	f06f 0015 	mvn.w	r0, #21
   1be2e:	e7d7      	b.n	1bde0 <bt_id_create+0x80>
			return -EINVAL;
   1be30:	f06f 0015 	mvn.w	r0, #21
   1be34:	e7d4      	b.n	1bde0 <bt_id_create+0x80>
			return -EALREADY;
   1be36:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1be3a:	e7d1      	b.n	1bde0 <bt_id_create+0x80>
		return -EINVAL;
   1be3c:	f06f 0015 	mvn.w	r0, #21
   1be40:	e7ce      	b.n	1bde0 <bt_id_create+0x80>
		return -ENOMEM;
   1be42:	f06f 000b 	mvn.w	r0, #11
   1be46:	e7cb      	b.n	1bde0 <bt_id_create+0x80>
   1be48:	000334a0 	.word	0x000334a0
   1be4c:	20000438 	.word	0x20000438
   1be50:	2000050c 	.word	0x2000050c
   1be54:	00033de0 	.word	0x00033de0
   1be58:	00031d04 	.word	0x00031d04

0001be5c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1be5c:	b530      	push	{r4, r5, lr}
   1be5e:	b08f      	sub	sp, #60	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1be60:	b1f0      	cbz	r0, 1bea0 <bt_id_read_public_addr+0x44>
   1be62:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1be64:	aa01      	add	r2, sp, #4
   1be66:	2100      	movs	r1, #0
   1be68:	f241 0009 	movw	r0, #4105	; 0x1009
   1be6c:	f7fe fb5c 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1be70:	2800      	cmp	r0, #0
   1be72:	d13a      	bne.n	1beea <bt_id_read_public_addr+0x8e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   1be74:	9b01      	ldr	r3, [sp, #4]
   1be76:	68dc      	ldr	r4, [r3, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1be78:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1be7a:	2206      	movs	r2, #6
   1be7c:	4933      	ldr	r1, [pc, #204]	; (1bf4c <bt_id_read_public_addr+0xf0>)
   1be7e:	4620      	mov	r0, r4
   1be80:	f010 fc8f 	bl	2c7a2 <memcmp>
   1be84:	b130      	cbz	r0, 1be94 <bt_id_read_public_addr+0x38>
   1be86:	2206      	movs	r2, #6
   1be88:	4931      	ldr	r1, [pc, #196]	; (1bf50 <bt_id_read_public_addr+0xf4>)
   1be8a:	4620      	mov	r0, r4
   1be8c:	f010 fc89 	bl	2c7a2 <memcmp>
   1be90:	2800      	cmp	r0, #0
   1be92:	d14f      	bne.n	1bf34 <bt_id_read_public_addr+0xd8>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1be94:	9801      	ldr	r0, [sp, #4]
   1be96:	f013 f833 	bl	2ef00 <net_buf_unref>
		return 0U;
   1be9a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1be9c:	b00f      	add	sp, #60	; 0x3c
   1be9e:	bd30      	pop	{r4, r5, pc}
		LOG_WRN("Invalid input parameters");
   1bea0:	4b2c      	ldr	r3, [pc, #176]	; (1bf54 <bt_id_read_public_addr+0xf8>)
   1bea2:	930d      	str	r3, [sp, #52]	; 0x34
   1bea4:	2302      	movs	r3, #2
   1bea6:	f88d 3000 	strb.w	r3, [sp]
   1beaa:	2400      	movs	r4, #0
   1beac:	f88d 4001 	strb.w	r4, [sp, #1]
   1beb0:	f88d 4002 	strb.w	r4, [sp, #2]
   1beb4:	f88d 4003 	strb.w	r4, [sp, #3]
   1beb8:	9a00      	ldr	r2, [sp, #0]
   1beba:	920c      	str	r2, [sp, #48]	; 0x30
   1bebc:	4621      	mov	r1, r4
   1bebe:	f364 0100 	bfi	r1, r4, #0, #1
   1bec2:	f364 0141 	bfi	r1, r4, #1, #1
   1bec6:	f364 0182 	bfi	r1, r4, #2, #1
   1beca:	f364 01c5 	bfi	r1, r4, #3, #3
   1bece:	f363 1188 	bfi	r1, r3, #6, #3
   1bed2:	2308      	movs	r3, #8
   1bed4:	f363 2153 	bfi	r1, r3, #9, #11
   1bed8:	f364 511f 	bfi	r1, r4, #20, #12
   1bedc:	4623      	mov	r3, r4
   1bede:	aa0c      	add	r2, sp, #48	; 0x30
   1bee0:	481d      	ldr	r0, [pc, #116]	; (1bf58 <bt_id_read_public_addr+0xfc>)
   1bee2:	f7f8 f90b 	bl	140fc <z_impl_z_log_msg_static_create>
		return 0U;
   1bee6:	4620      	mov	r0, r4
   1bee8:	e7d8      	b.n	1be9c <bt_id_read_public_addr+0x40>
		LOG_WRN("Failed to read public address");
   1beea:	4b1c      	ldr	r3, [pc, #112]	; (1bf5c <bt_id_read_public_addr+0x100>)
   1beec:	9307      	str	r3, [sp, #28]
   1beee:	2302      	movs	r3, #2
   1bef0:	f88d 3000 	strb.w	r3, [sp]
   1bef4:	2400      	movs	r4, #0
   1bef6:	f88d 4001 	strb.w	r4, [sp, #1]
   1befa:	f88d 4002 	strb.w	r4, [sp, #2]
   1befe:	f88d 4003 	strb.w	r4, [sp, #3]
   1bf02:	9a00      	ldr	r2, [sp, #0]
   1bf04:	9206      	str	r2, [sp, #24]
   1bf06:	4621      	mov	r1, r4
   1bf08:	f364 0100 	bfi	r1, r4, #0, #1
   1bf0c:	f364 0141 	bfi	r1, r4, #1, #1
   1bf10:	f364 0182 	bfi	r1, r4, #2, #1
   1bf14:	f364 01c5 	bfi	r1, r4, #3, #3
   1bf18:	f363 1188 	bfi	r1, r3, #6, #3
   1bf1c:	2308      	movs	r3, #8
   1bf1e:	f363 2153 	bfi	r1, r3, #9, #11
   1bf22:	f364 511f 	bfi	r1, r4, #20, #12
   1bf26:	4623      	mov	r3, r4
   1bf28:	aa06      	add	r2, sp, #24
   1bf2a:	480b      	ldr	r0, [pc, #44]	; (1bf58 <bt_id_read_public_addr+0xfc>)
   1bf2c:	f7f8 f8e6 	bl	140fc <z_impl_z_log_msg_static_create>
		return 0U;
   1bf30:	4620      	mov	r0, r4
   1bf32:	e7b3      	b.n	1be9c <bt_id_read_public_addr+0x40>
	memcpy(dst, src, sizeof(*dst));
   1bf34:	2206      	movs	r2, #6
   1bf36:	4621      	mov	r1, r4
   1bf38:	1c68      	adds	r0, r5, #1
   1bf3a:	f010 fc57 	bl	2c7ec <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   1bf3e:	2300      	movs	r3, #0
   1bf40:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   1bf42:	9801      	ldr	r0, [sp, #4]
   1bf44:	f012 ffdc 	bl	2ef00 <net_buf_unref>
	return 1U;
   1bf48:	2001      	movs	r0, #1
   1bf4a:	e7a7      	b.n	1be9c <bt_id_read_public_addr+0x40>
   1bf4c:	000334b0 	.word	0x000334b0
   1bf50:	000334a8 	.word	0x000334a8
   1bf54:	00033e10 	.word	0x00033e10
   1bf58:	00031d04 	.word	0x00031d04
   1bf5c:	00033e2c 	.word	0x00033e2c

0001bf60 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1bf60:	b500      	push	{lr}
   1bf62:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1bf64:	4668      	mov	r0, sp
   1bf66:	f7ff ff79 	bl	1be5c <bt_id_read_public_addr>
   1bf6a:	4b06      	ldr	r3, [pc, #24]	; (1bf84 <bt_setup_public_id_addr+0x24>)
   1bf6c:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1bf6e:	b918      	cbnz	r0, 1bf78 <bt_setup_public_id_addr+0x18>
		return 0;
   1bf70:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1bf72:	b003      	add	sp, #12
   1bf74:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   1bf78:	2200      	movs	r2, #0
   1bf7a:	4669      	mov	r1, sp
   1bf7c:	4610      	mov	r0, r2
   1bf7e:	f7ff feb9 	bl	1bcf4 <id_create>
   1bf82:	e7f6      	b.n	1bf72 <bt_setup_public_id_addr+0x12>
   1bf84:	20000438 	.word	0x20000438

0001bf88 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf8c:	b094      	sub	sp, #80	; 0x50
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1bf8e:	4b4a      	ldr	r3, [pc, #296]	; (1c0b8 <bt_read_static_addr+0x130>)
   1bf90:	f893 50c2 	ldrb.w	r5, [r3, #194]	; 0xc2
   1bf94:	f015 0501 	ands.w	r5, r5, #1
   1bf98:	d010      	beq.n	1bfbc <bt_read_static_addr+0x34>
   1bf9a:	4606      	mov	r6, r0
   1bf9c:	4688      	mov	r8, r1
		LOG_WRN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1bf9e:	aa01      	add	r2, sp, #4
   1bfa0:	2100      	movs	r1, #0
   1bfa2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1bfa6:	f7fe fabf 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1bfaa:	4604      	mov	r4, r0
   1bfac:	bb48      	cbnz	r0, 1c002 <bt_read_static_addr+0x7a>
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   1bfae:	9b01      	ldr	r3, [sp, #4]
   1bfb0:	68df      	ldr	r7, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   1bfb2:	787d      	ldrb	r5, [r7, #1]
   1bfb4:	4545      	cmp	r5, r8
   1bfb6:	bf28      	it	cs
   1bfb8:	4645      	movcs	r5, r8
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   1bfba:	e04f      	b.n	1c05c <bt_read_static_addr+0xd4>
		LOG_WRN("Read Static Addresses command not available");
   1bfbc:	4b3f      	ldr	r3, [pc, #252]	; (1c0bc <bt_read_static_addr+0x134>)
   1bfbe:	9313      	str	r3, [sp, #76]	; 0x4c
   1bfc0:	2202      	movs	r2, #2
   1bfc2:	f88d 2000 	strb.w	r2, [sp]
   1bfc6:	2300      	movs	r3, #0
   1bfc8:	f88d 3001 	strb.w	r3, [sp, #1]
   1bfcc:	f88d 3002 	strb.w	r3, [sp, #2]
   1bfd0:	f88d 3003 	strb.w	r3, [sp, #3]
   1bfd4:	9900      	ldr	r1, [sp, #0]
   1bfd6:	9112      	str	r1, [sp, #72]	; 0x48
   1bfd8:	4619      	mov	r1, r3
   1bfda:	f363 0100 	bfi	r1, r3, #0, #1
   1bfde:	f363 0141 	bfi	r1, r3, #1, #1
   1bfe2:	f363 0182 	bfi	r1, r3, #2, #1
   1bfe6:	f363 01c5 	bfi	r1, r3, #3, #3
   1bfea:	f362 1188 	bfi	r1, r2, #6, #3
   1bfee:	2208      	movs	r2, #8
   1bff0:	f362 2153 	bfi	r1, r2, #9, #11
   1bff4:	f363 511f 	bfi	r1, r3, #20, #12
   1bff8:	aa12      	add	r2, sp, #72	; 0x48
   1bffa:	4831      	ldr	r0, [pc, #196]	; (1c0c0 <bt_read_static_addr+0x138>)
   1bffc:	f7f8 f87e 	bl	140fc <z_impl_z_log_msg_static_create>
		return 0;
   1c000:	e032      	b.n	1c068 <bt_read_static_addr+0xe0>
		LOG_WRN("Failed to read static addresses");
   1c002:	4b30      	ldr	r3, [pc, #192]	; (1c0c4 <bt_read_static_addr+0x13c>)
   1c004:	930d      	str	r3, [sp, #52]	; 0x34
   1c006:	2302      	movs	r3, #2
   1c008:	f88d 3000 	strb.w	r3, [sp]
   1c00c:	2500      	movs	r5, #0
   1c00e:	f88d 5001 	strb.w	r5, [sp, #1]
   1c012:	f88d 5002 	strb.w	r5, [sp, #2]
   1c016:	f88d 5003 	strb.w	r5, [sp, #3]
   1c01a:	9a00      	ldr	r2, [sp, #0]
   1c01c:	920c      	str	r2, [sp, #48]	; 0x30
   1c01e:	4629      	mov	r1, r5
   1c020:	f365 0100 	bfi	r1, r5, #0, #1
   1c024:	f365 0141 	bfi	r1, r5, #1, #1
   1c028:	f365 0182 	bfi	r1, r5, #2, #1
   1c02c:	f365 01c5 	bfi	r1, r5, #3, #3
   1c030:	f363 1188 	bfi	r1, r3, #6, #3
   1c034:	2308      	movs	r3, #8
   1c036:	f363 2153 	bfi	r1, r3, #9, #11
   1c03a:	f365 511f 	bfi	r1, r5, #20, #12
   1c03e:	462b      	mov	r3, r5
   1c040:	aa0c      	add	r2, sp, #48	; 0x30
   1c042:	481f      	ldr	r0, [pc, #124]	; (1c0c0 <bt_read_static_addr+0x138>)
   1c044:	f7f8 f85a 	bl	140fc <z_impl_z_log_msg_static_create>
		return 0;
   1c048:	e00e      	b.n	1c068 <bt_read_static_addr+0xe0>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1c04a:	2216      	movs	r2, #22
   1c04c:	fb02 f004 	mul.w	r0, r2, r4
   1c050:	1839      	adds	r1, r7, r0
   1c052:	3102      	adds	r1, #2
   1c054:	4430      	add	r0, r6
   1c056:	f010 fbc9 	bl	2c7ec <memcpy>
	for (i = 0; i < cnt; i++) {
   1c05a:	3401      	adds	r4, #1
   1c05c:	42a5      	cmp	r5, r4
   1c05e:	dcf4      	bgt.n	1c04a <bt_read_static_addr+0xc2>
	}

	net_buf_unref(rsp);
   1c060:	9801      	ldr	r0, [sp, #4]
   1c062:	f012 ff4d 	bl	2ef00 <net_buf_unref>
	if (!cnt) {
   1c066:	b11d      	cbz	r5, 1c070 <bt_read_static_addr+0xe8>
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1c068:	4628      	mov	r0, r5
   1c06a:	b014      	add	sp, #80	; 0x50
   1c06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("No static addresses stored in controller");
   1c070:	4b15      	ldr	r3, [pc, #84]	; (1c0c8 <bt_read_static_addr+0x140>)
   1c072:	9307      	str	r3, [sp, #28]
   1c074:	2202      	movs	r2, #2
   1c076:	f88d 2000 	strb.w	r2, [sp]
   1c07a:	2300      	movs	r3, #0
   1c07c:	f88d 3001 	strb.w	r3, [sp, #1]
   1c080:	f88d 3002 	strb.w	r3, [sp, #2]
   1c084:	f88d 3003 	strb.w	r3, [sp, #3]
   1c088:	9900      	ldr	r1, [sp, #0]
   1c08a:	9106      	str	r1, [sp, #24]
   1c08c:	4619      	mov	r1, r3
   1c08e:	f363 0100 	bfi	r1, r3, #0, #1
   1c092:	f363 0141 	bfi	r1, r3, #1, #1
   1c096:	f363 0182 	bfi	r1, r3, #2, #1
   1c09a:	f363 01c5 	bfi	r1, r3, #3, #3
   1c09e:	f362 1188 	bfi	r1, r2, #6, #3
   1c0a2:	2208      	movs	r2, #8
   1c0a4:	f362 2153 	bfi	r1, r2, #9, #11
   1c0a8:	f363 511f 	bfi	r1, r3, #20, #12
   1c0ac:	aa06      	add	r2, sp, #24
   1c0ae:	4804      	ldr	r0, [pc, #16]	; (1c0c0 <bt_read_static_addr+0x138>)
   1c0b0:	f7f8 f824 	bl	140fc <z_impl_z_log_msg_static_create>
   1c0b4:	e7d8      	b.n	1c068 <bt_read_static_addr+0xe0>
   1c0b6:	bf00      	nop
   1c0b8:	20000438 	.word	0x20000438
   1c0bc:	00033e4c 	.word	0x00033e4c
   1c0c0:	00031d04 	.word	0x00031d04
   1c0c4:	00033e78 	.word	0x00033e78
   1c0c8:	00033e98 	.word	0x00033e98

0001c0cc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1c0cc:	b510      	push	{r4, lr}
   1c0ce:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1c0d0:	4b17      	ldr	r3, [pc, #92]	; (1c130 <bt_setup_random_id_addr+0x64>)
   1c0d2:	79dc      	ldrb	r4, [r3, #7]
   1c0d4:	b934      	cbnz	r4, 1c0e4 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1c0d6:	2101      	movs	r1, #1
   1c0d8:	a802      	add	r0, sp, #8
   1c0da:	f7ff ff55 	bl	1bf88 <bt_read_static_addr>
   1c0de:	4b14      	ldr	r3, [pc, #80]	; (1c130 <bt_setup_random_id_addr+0x64>)
   1c0e0:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1c0e2:	b948      	cbnz	r0, 1c0f8 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1c0e4:	2100      	movs	r1, #0
   1c0e6:	4608      	mov	r0, r1
   1c0e8:	f7ff fe3a 	bl	1bd60 <bt_id_create>
   1c0ec:	4603      	mov	r3, r0
}
   1c0ee:	4618      	mov	r0, r3
   1c0f0:	b008      	add	sp, #32
   1c0f2:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1c0f4:	3401      	adds	r4, #1
   1c0f6:	b2e4      	uxtb	r4, r4
   1c0f8:	4b0d      	ldr	r3, [pc, #52]	; (1c130 <bt_setup_random_id_addr+0x64>)
   1c0fa:	79db      	ldrb	r3, [r3, #7]
   1c0fc:	42a3      	cmp	r3, r4
   1c0fe:	d914      	bls.n	1c12a <bt_setup_random_id_addr+0x5e>
   1c100:	2206      	movs	r2, #6
   1c102:	2116      	movs	r1, #22
   1c104:	ab02      	add	r3, sp, #8
   1c106:	fb01 3104 	mla	r1, r1, r4, r3
   1c10a:	f10d 0001 	add.w	r0, sp, #1
   1c10e:	f010 fb6d 	bl	2c7ec <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1c112:	2301      	movs	r3, #1
   1c114:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1c118:	2200      	movs	r2, #0
   1c11a:	4669      	mov	r1, sp
   1c11c:	4620      	mov	r0, r4
   1c11e:	f7ff fde9 	bl	1bcf4 <id_create>
				if (err) {
   1c122:	4603      	mov	r3, r0
   1c124:	2800      	cmp	r0, #0
   1c126:	d0e5      	beq.n	1c0f4 <bt_setup_random_id_addr+0x28>
   1c128:	e7e1      	b.n	1c0ee <bt_setup_random_id_addr+0x22>
			return 0;
   1c12a:	2300      	movs	r3, #0
   1c12c:	e7df      	b.n	1c0ee <bt_setup_random_id_addr+0x22>
   1c12e:	bf00      	nop
   1c130:	20000438 	.word	0x20000438

0001c134 <bt_id_set_adv_own_addr>:
			   bool dir_adv, uint8_t *own_addr_type)
{
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1c134:	2800      	cmp	r0, #0
   1c136:	d051      	beq.n	1c1dc <bt_id_set_adv_own_addr+0xa8>
{
   1c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c13a:	460e      	mov	r6, r1
   1c13c:	4617      	mov	r7, r2
   1c13e:	461d      	mov	r5, r3
   1c140:	4603      	mov	r3, r0
	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1c142:	2d00      	cmp	r5, #0
   1c144:	d04d      	beq.n	1c1e2 <bt_id_set_adv_own_addr+0xae>
		return -EINVAL;
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   1c146:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1c148:	f011 0f01 	tst.w	r1, #1
   1c14c:	d029      	beq.n	1c1a2 <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1c14e:	b142      	cbz	r2, 1c162 <bt_id_set_adv_own_addr+0x2e>
   1c150:	f011 0f20 	tst.w	r1, #32
   1c154:	d005      	beq.n	1c162 <bt_id_set_adv_own_addr+0x2e>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1c156:	4a28      	ldr	r2, [pc, #160]	; (1c1f8 <bt_id_set_adv_own_addr+0xc4>)
   1c158:	f892 20d8 	ldrb.w	r2, [r2, #216]	; 0xd8
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1c15c:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c160:	d042      	beq.n	1c1e8 <bt_id_set_adv_own_addr+0xb4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1c162:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1c166:	4924      	ldr	r1, [pc, #144]	; (1c1f8 <bt_id_set_adv_own_addr+0xc4>)
   1c168:	5c8a      	ldrb	r2, [r1, r2]
   1c16a:	2a01      	cmp	r2, #1
   1c16c:	d00e      	beq.n	1c18c <bt_id_set_adv_own_addr+0x58>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1c16e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1c172:	4b21      	ldr	r3, [pc, #132]	; (1c1f8 <bt_id_set_adv_own_addr+0xc4>)
   1c174:	5d1b      	ldrb	r3, [r3, r4]
   1c176:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1c178:	2f00      	cmp	r7, #0
   1c17a:	d038      	beq.n	1c1ee <bt_id_set_adv_own_addr+0xba>
   1c17c:	f016 0f20 	tst.w	r6, #32
   1c180:	d037      	beq.n	1c1f2 <bt_id_set_adv_own_addr+0xbe>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1c182:	f043 0302 	orr.w	r3, r3, #2
   1c186:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1c188:	2000      	movs	r0, #0
   1c18a:	e019      	b.n	1c1c0 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1c18c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1c190:	4a19      	ldr	r2, [pc, #100]	; (1c1f8 <bt_id_set_adv_own_addr+0xc4>)
   1c192:	4411      	add	r1, r2
   1c194:	3101      	adds	r1, #1
   1c196:	4618      	mov	r0, r3
   1c198:	f010 fde8 	bl	2cd6c <bt_id_set_adv_random_addr>
				if (err) {
   1c19c:	2800      	cmp	r0, #0
   1c19e:	d0e6      	beq.n	1c16e <bt_id_set_adv_own_addr+0x3a>
   1c1a0:	e00e      	b.n	1c1c0 <bt_id_set_adv_own_addr+0x8c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1c1a2:	f011 0f04 	tst.w	r1, #4
   1c1a6:	d014      	beq.n	1c1d2 <bt_id_set_adv_own_addr+0x9e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1c1a8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1c1ac:	4912      	ldr	r1, [pc, #72]	; (1c1f8 <bt_id_set_adv_own_addr+0xc4>)
   1c1ae:	5c8a      	ldrb	r2, [r1, r2]
   1c1b0:	2a01      	cmp	r2, #1
   1c1b2:	d006      	beq.n	1c1c2 <bt_id_set_adv_own_addr+0x8e>
	int err = 0;
   1c1b4:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   1c1b6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1c1ba:	4b0f      	ldr	r3, [pc, #60]	; (1c1f8 <bt_id_set_adv_own_addr+0xc4>)
   1c1bc:	5d1b      	ldrb	r3, [r3, r4]
   1c1be:	702b      	strb	r3, [r5, #0]
}
   1c1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1c1c2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1c1c6:	4a0c      	ldr	r2, [pc, #48]	; (1c1f8 <bt_id_set_adv_own_addr+0xc4>)
   1c1c8:	4411      	add	r1, r2
   1c1ca:	3101      	adds	r1, #1
   1c1cc:	f010 fdce 	bl	2cd6c <bt_id_set_adv_random_addr>
   1c1d0:	e7f1      	b.n	1c1b6 <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   1c1d2:	f010 fdd8 	bl	2cd86 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1c1d6:	2301      	movs	r3, #1
   1c1d8:	702b      	strb	r3, [r5, #0]
		if (err) {
   1c1da:	e7f1      	b.n	1c1c0 <bt_id_set_adv_own_addr+0x8c>
		return -EINVAL;
   1c1dc:	f06f 0015 	mvn.w	r0, #21
}
   1c1e0:	4770      	bx	lr
		return -EINVAL;
   1c1e2:	f06f 0015 	mvn.w	r0, #21
   1c1e6:	e7eb      	b.n	1c1c0 <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
   1c1e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c1ec:	e7e8      	b.n	1c1c0 <bt_id_set_adv_own_addr+0x8c>
	return 0;
   1c1ee:	2000      	movs	r0, #0
   1c1f0:	e7e6      	b.n	1c1c0 <bt_id_set_adv_own_addr+0x8c>
   1c1f2:	2000      	movs	r0, #0
   1c1f4:	e7e4      	b.n	1c1c0 <bt_id_set_adv_own_addr+0x8c>
   1c1f6:	bf00      	nop
   1c1f8:	20000438 	.word	0x20000438

0001c1fc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1c1fc:	b510      	push	{r4, lr}
   1c1fe:	b094      	sub	sp, #80	; 0x50
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1c200:	4b42      	ldr	r3, [pc, #264]	; (1c30c <bt_id_init+0x110>)
   1c202:	79db      	ldrb	r3, [r3, #7]
   1c204:	b133      	cbz	r3, 1c214 <bt_id_init+0x18>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1c206:	4b41      	ldr	r3, [pc, #260]	; (1c30c <bt_id_init+0x110>)
   1c208:	79db      	ldrb	r3, [r3, #7]
   1c20a:	b363      	cbz	r3, 1c266 <bt_id_init+0x6a>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1c20c:	2400      	movs	r4, #0
}
   1c20e:	4620      	mov	r0, r4
   1c210:	b014      	add	sp, #80	; 0x50
   1c212:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1c214:	f7ff fea4 	bl	1bf60 <bt_setup_public_id_addr>
		if (err) {
   1c218:	4604      	mov	r4, r0
   1c21a:	2800      	cmp	r0, #0
   1c21c:	d0f3      	beq.n	1c206 <bt_id_init+0xa>
			LOG_ERR("Unable to set identity address");
   1c21e:	4b3c      	ldr	r3, [pc, #240]	; (1c310 <bt_id_init+0x114>)
   1c220:	9307      	str	r3, [sp, #28]
   1c222:	2302      	movs	r3, #2
   1c224:	f88d 3004 	strb.w	r3, [sp, #4]
   1c228:	2300      	movs	r3, #0
   1c22a:	f88d 3005 	strb.w	r3, [sp, #5]
   1c22e:	f88d 3006 	strb.w	r3, [sp, #6]
   1c232:	f88d 3007 	strb.w	r3, [sp, #7]
   1c236:	9a01      	ldr	r2, [sp, #4]
   1c238:	9206      	str	r2, [sp, #24]
   1c23a:	4619      	mov	r1, r3
   1c23c:	f363 0100 	bfi	r1, r3, #0, #1
   1c240:	f363 0141 	bfi	r1, r3, #1, #1
   1c244:	f363 0182 	bfi	r1, r3, #2, #1
   1c248:	f363 01c5 	bfi	r1, r3, #3, #3
   1c24c:	2201      	movs	r2, #1
   1c24e:	f362 1188 	bfi	r1, r2, #6, #3
   1c252:	2208      	movs	r2, #8
   1c254:	f362 2153 	bfi	r1, r2, #9, #11
   1c258:	f363 511f 	bfi	r1, r3, #20, #12
   1c25c:	aa06      	add	r2, sp, #24
   1c25e:	482d      	ldr	r0, [pc, #180]	; (1c314 <bt_id_init+0x118>)
   1c260:	f7f7 ff4c 	bl	140fc <z_impl_z_log_msg_static_create>
			return err;
   1c264:	e7d3      	b.n	1c20e <bt_id_init+0x12>
		err = bt_setup_random_id_addr();
   1c266:	f7ff ff31 	bl	1c0cc <bt_setup_random_id_addr>
		if (err) {
   1c26a:	4604      	mov	r4, r0
   1c26c:	bb48      	cbnz	r0, 1c2c2 <bt_id_init+0xc6>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1c26e:	482a      	ldr	r0, [pc, #168]	; (1c318 <bt_id_init+0x11c>)
   1c270:	f7ff fd12 	bl	1bc98 <set_random_address>
		if (err) {
   1c274:	4604      	mov	r4, r0
   1c276:	2800      	cmp	r0, #0
   1c278:	d0c9      	beq.n	1c20e <bt_id_init+0x12>
			LOG_ERR("Unable to set random address");
   1c27a:	4b28      	ldr	r3, [pc, #160]	; (1c31c <bt_id_init+0x120>)
   1c27c:	930d      	str	r3, [sp, #52]	; 0x34
   1c27e:	2302      	movs	r3, #2
   1c280:	f88d 3004 	strb.w	r3, [sp, #4]
   1c284:	2300      	movs	r3, #0
   1c286:	f88d 3005 	strb.w	r3, [sp, #5]
   1c28a:	f88d 3006 	strb.w	r3, [sp, #6]
   1c28e:	f88d 3007 	strb.w	r3, [sp, #7]
   1c292:	9a01      	ldr	r2, [sp, #4]
   1c294:	920c      	str	r2, [sp, #48]	; 0x30
   1c296:	4619      	mov	r1, r3
   1c298:	f363 0100 	bfi	r1, r3, #0, #1
   1c29c:	f363 0141 	bfi	r1, r3, #1, #1
   1c2a0:	f363 0182 	bfi	r1, r3, #2, #1
   1c2a4:	f363 01c5 	bfi	r1, r3, #3, #3
   1c2a8:	2201      	movs	r2, #1
   1c2aa:	f362 1188 	bfi	r1, r2, #6, #3
   1c2ae:	2208      	movs	r2, #8
   1c2b0:	f362 2153 	bfi	r1, r2, #9, #11
   1c2b4:	f363 511f 	bfi	r1, r3, #20, #12
   1c2b8:	aa0c      	add	r2, sp, #48	; 0x30
   1c2ba:	4816      	ldr	r0, [pc, #88]	; (1c314 <bt_id_init+0x118>)
   1c2bc:	f7f7 ff1e 	bl	140fc <z_impl_z_log_msg_static_create>
			return err;
   1c2c0:	e7a5      	b.n	1c20e <bt_id_init+0x12>
			LOG_ERR("Unable to set identity address");
   1c2c2:	4b13      	ldr	r3, [pc, #76]	; (1c310 <bt_id_init+0x114>)
   1c2c4:	9313      	str	r3, [sp, #76]	; 0x4c
   1c2c6:	2302      	movs	r3, #2
   1c2c8:	f88d 3004 	strb.w	r3, [sp, #4]
   1c2cc:	2300      	movs	r3, #0
   1c2ce:	f88d 3005 	strb.w	r3, [sp, #5]
   1c2d2:	f88d 3006 	strb.w	r3, [sp, #6]
   1c2d6:	f88d 3007 	strb.w	r3, [sp, #7]
   1c2da:	9a01      	ldr	r2, [sp, #4]
   1c2dc:	9212      	str	r2, [sp, #72]	; 0x48
   1c2de:	4619      	mov	r1, r3
   1c2e0:	f363 0100 	bfi	r1, r3, #0, #1
   1c2e4:	f363 0141 	bfi	r1, r3, #1, #1
   1c2e8:	f363 0182 	bfi	r1, r3, #2, #1
   1c2ec:	f363 01c5 	bfi	r1, r3, #3, #3
   1c2f0:	2201      	movs	r2, #1
   1c2f2:	f362 1188 	bfi	r1, r2, #6, #3
   1c2f6:	2208      	movs	r2, #8
   1c2f8:	f362 2153 	bfi	r1, r2, #9, #11
   1c2fc:	f363 511f 	bfi	r1, r3, #20, #12
   1c300:	aa12      	add	r2, sp, #72	; 0x48
   1c302:	4804      	ldr	r0, [pc, #16]	; (1c314 <bt_id_init+0x118>)
   1c304:	f7f7 fefa 	bl	140fc <z_impl_z_log_msg_static_create>
			return err;
   1c308:	e781      	b.n	1c20e <bt_id_init+0x12>
   1c30a:	bf00      	nop
   1c30c:	20000438 	.word	0x20000438
   1c310:	00033ec4 	.word	0x00033ec4
   1c314:	00031d04 	.word	0x00031d04
   1c318:	20000439 	.word	0x20000439
   1c31c:	00033ee4 	.word	0x00033ee4

0001c320 <adv_get_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   1c320:	4800      	ldr	r0, [pc, #0]	; (1c324 <adv_get_legacy+0x4>)
   1c322:	4770      	bx	lr
   1c324:	20000450 	.word	0x20000450

0001c328 <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   1c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c32c:	b08b      	sub	sp, #44	; 0x2c
   1c32e:	4606      	mov	r6, r0
   1c330:	4688      	mov	r8, r1
   1c332:	4615      	mov	r5, r2
   1c334:	469a      	mov	sl, r3
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   1c336:	f04f 0b00 	mov.w	fp, #0
	uint8_t set_data_len = 0;
   1c33a:	465b      	mov	r3, fp
	for (size_t i = 0; i < ad_len; i++) {
   1c33c:	45d3      	cmp	fp, sl
   1c33e:	d262      	bcs.n	1c406 <set_data_add_complete+0xde>
		const struct bt_data *data = ad[i].data;
   1c340:	eb05 09cb 	add.w	r9, r5, fp, lsl #3
   1c344:	f855 703b 	ldr.w	r7, [r5, fp, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   1c348:	2400      	movs	r4, #0
   1c34a:	f8cd b000 	str.w	fp, [sp]
   1c34e:	9501      	str	r5, [sp, #4]
   1c350:	e03b      	b.n	1c3ca <set_data_add_complete+0xa2>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					LOG_ERR("Too big advertising data");
   1c352:	4b2f      	ldr	r3, [pc, #188]	; (1c410 <set_data_add_complete+0xe8>)
   1c354:	9309      	str	r3, [sp, #36]	; 0x24
   1c356:	2302      	movs	r3, #2
   1c358:	f88d 300c 	strb.w	r3, [sp, #12]
   1c35c:	2300      	movs	r3, #0
   1c35e:	f88d 300d 	strb.w	r3, [sp, #13]
   1c362:	f88d 300e 	strb.w	r3, [sp, #14]
   1c366:	f88d 300f 	strb.w	r3, [sp, #15]
   1c36a:	9a03      	ldr	r2, [sp, #12]
   1c36c:	9208      	str	r2, [sp, #32]
   1c36e:	4619      	mov	r1, r3
   1c370:	f363 0100 	bfi	r1, r3, #0, #1
   1c374:	f363 0141 	bfi	r1, r3, #1, #1
   1c378:	f363 0182 	bfi	r1, r3, #2, #1
   1c37c:	f363 01c5 	bfi	r1, r3, #3, #3
   1c380:	2201      	movs	r2, #1
   1c382:	f362 1188 	bfi	r1, r2, #6, #3
   1c386:	2208      	movs	r2, #8
   1c388:	f362 2153 	bfi	r1, r2, #9, #11
   1c38c:	f363 511f 	bfi	r1, r3, #20, #12
   1c390:	aa08      	add	r2, sp, #32
   1c392:	4820      	ldr	r0, [pc, #128]	; (1c414 <set_data_add_complete+0xec>)
   1c394:	f7f7 feb2 	bl	140fc <z_impl_z_log_msg_static_create>
					return -EINVAL;
   1c398:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   1c39c:	b00b      	add	sp, #44	; 0x2c
   1c39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_data[set_data_len++] = len + 1;
   1c3a2:	fa5f fb82 	uxtb.w	fp, r2
   1c3a6:	1c59      	adds	r1, r3, #1
   1c3a8:	b2c9      	uxtb	r1, r1
   1c3aa:	f10b 0e01 	add.w	lr, fp, #1
   1c3ae:	f806 e005 	strb.w	lr, [r6, r5]
			set_data[set_data_len++] = type;
   1c3b2:	1c9d      	adds	r5, r3, #2
   1c3b4:	b2ed      	uxtb	r5, r5
   1c3b6:	5470      	strb	r0, [r6, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1c3b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1c3bc:	1970      	adds	r0, r6, r5
   1c3be:	f010 fa15 	bl	2c7ec <memcpy>
			set_data_len += len;
   1c3c2:	44ab      	add	fp, r5
   1c3c4:	fa5f f38b 	uxtb.w	r3, fp
		for (size_t j = 0; j < ad[i].len; j++) {
   1c3c8:	3401      	adds	r4, #1
   1c3ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1c3ce:	4294      	cmp	r4, r2
   1c3d0:	d213      	bcs.n	1c3fa <set_data_add_complete+0xd2>
			size_t len = data[j].data_len;
   1c3d2:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
   1c3d6:	f89c 2001 	ldrb.w	r2, [ip, #1]
			uint8_t type = data[j].type;
   1c3da:	f817 0034 	ldrb.w	r0, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1c3de:	461d      	mov	r5, r3
   1c3e0:	1899      	adds	r1, r3, r2
   1c3e2:	3102      	adds	r1, #2
   1c3e4:	4541      	cmp	r1, r8
   1c3e6:	d9dc      	bls.n	1c3a2 <set_data_add_complete+0x7a>
							(set_data_len + 2);
   1c3e8:	1c9a      	adds	r2, r3, #2
				ssize_t shortened_len = set_data_len_max -
   1c3ea:	eba8 0202 	sub.w	r2, r8, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1c3ee:	2809      	cmp	r0, #9
   1c3f0:	d1af      	bne.n	1c352 <set_data_add_complete+0x2a>
   1c3f2:	2a00      	cmp	r2, #0
   1c3f4:	ddad      	ble.n	1c352 <set_data_add_complete+0x2a>
				type = BT_DATA_NAME_SHORTENED;
   1c3f6:	2008      	movs	r0, #8
   1c3f8:	e7d3      	b.n	1c3a2 <set_data_add_complete+0x7a>
	for (size_t i = 0; i < ad_len; i++) {
   1c3fa:	f8dd b000 	ldr.w	fp, [sp]
   1c3fe:	9d01      	ldr	r5, [sp, #4]
   1c400:	f10b 0b01 	add.w	fp, fp, #1
   1c404:	e79a      	b.n	1c33c <set_data_add_complete+0x14>
	*data_len = set_data_len;
   1c406:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c408:	7013      	strb	r3, [r2, #0]
	return 0;
   1c40a:	2000      	movs	r0, #0
   1c40c:	e7c6      	b.n	1c39c <set_data_add_complete+0x74>
   1c40e:	bf00      	nop
   1c410:	00033f0c 	.word	0x00033f0c
   1c414:	00031cd4 	.word	0x00031cd4

0001c418 <valid_adv_ext_param>:
{
   1c418:	b510      	push	{r4, lr}
   1c41a:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   1c41c:	7800      	ldrb	r0, [r0, #0]
   1c41e:	4b21      	ldr	r3, [pc, #132]	; (1c4a4 <valid_adv_ext_param+0x8c>)
   1c420:	79db      	ldrb	r3, [r3, #7]
   1c422:	4298      	cmp	r0, r3
   1c424:	d301      	bcc.n	1c42a <valid_adv_ext_param+0x12>
		return false;
   1c426:	2000      	movs	r0, #0
}
   1c428:	bd10      	pop	{r4, pc}
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1c42a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   1c42e:	2207      	movs	r2, #7
   1c430:	491d      	ldr	r1, [pc, #116]	; (1c4a8 <valid_adv_ext_param+0x90>)
   1c432:	4b1c      	ldr	r3, [pc, #112]	; (1c4a4 <valid_adv_ext_param+0x8c>)
   1c434:	4418      	add	r0, r3
   1c436:	f010 f9b4 	bl	2c7a2 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1c43a:	2800      	cmp	r0, #0
   1c43c:	d0f3      	beq.n	1c426 <valid_adv_ext_param+0xe>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1c43e:	6863      	ldr	r3, [r4, #4]
   1c440:	f013 0f01 	tst.w	r3, #1
   1c444:	d107      	bne.n	1c456 <valid_adv_ext_param+0x3e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1c446:	4a17      	ldr	r2, [pc, #92]	; (1c4a4 <valid_adv_ext_param+0x8c>)
   1c448:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   1c44c:	2a08      	cmp	r2, #8
   1c44e:	d802      	bhi.n	1c456 <valid_adv_ext_param+0x3e>
		    param->interval_min < 0x00a0) {
   1c450:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1c452:	2a9f      	cmp	r2, #159	; 0x9f
   1c454:	d91b      	bls.n	1c48e <valid_adv_ext_param+0x76>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1c456:	f013 0f30 	tst.w	r3, #48	; 0x30
   1c45a:	d001      	beq.n	1c460 <valid_adv_ext_param+0x48>
	    !param->peer) {
   1c45c:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1c45e:	b1c2      	cbz	r2, 1c492 <valid_adv_ext_param+0x7a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1c460:	f013 0f10 	tst.w	r3, #16
   1c464:	d108      	bne.n	1c478 <valid_adv_ext_param+0x60>
	    !param->peer) {
   1c466:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1c468:	b132      	cbz	r2, 1c478 <valid_adv_ext_param+0x60>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1c46a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1c46e:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   1c472:	d014      	beq.n	1c49e <valid_adv_ext_param+0x86>
	return true;
   1c474:	2001      	movs	r0, #1
   1c476:	e7d7      	b.n	1c428 <valid_adv_ext_param+0x10>
		if (param->interval_min > param->interval_max ||
   1c478:	68a2      	ldr	r2, [r4, #8]
   1c47a:	68e1      	ldr	r1, [r4, #12]
   1c47c:	428a      	cmp	r2, r1
   1c47e:	d80a      	bhi.n	1c496 <valid_adv_ext_param+0x7e>
   1c480:	2a1f      	cmp	r2, #31
   1c482:	d90a      	bls.n	1c49a <valid_adv_ext_param+0x82>
		    param->interval_min < 0x0020 ||
   1c484:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1c488:	d9ef      	bls.n	1c46a <valid_adv_ext_param+0x52>
			return false;
   1c48a:	2000      	movs	r0, #0
   1c48c:	e7cc      	b.n	1c428 <valid_adv_ext_param+0x10>
			return false;
   1c48e:	2000      	movs	r0, #0
   1c490:	e7ca      	b.n	1c428 <valid_adv_ext_param+0x10>
		return false;
   1c492:	2000      	movs	r0, #0
   1c494:	e7c8      	b.n	1c428 <valid_adv_ext_param+0x10>
			return false;
   1c496:	2000      	movs	r0, #0
   1c498:	e7c6      	b.n	1c428 <valid_adv_ext_param+0x10>
   1c49a:	2000      	movs	r0, #0
   1c49c:	e7c4      	b.n	1c428 <valid_adv_ext_param+0x10>
		return false;
   1c49e:	2000      	movs	r0, #0
   1c4a0:	e7c2      	b.n	1c428 <valid_adv_ext_param+0x10>
   1c4a2:	bf00      	nop
   1c4a4:	20000438 	.word	0x20000438
   1c4a8:	000334a0 	.word	0x000334a0

0001c4ac <le_adv_start_add_conn>:
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1c4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4ae:	4604      	mov	r4, r0
   1c4b0:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1c4b2:	4605      	mov	r5, r0
   1c4b4:	f815 2b09 	ldrb.w	r2, [r5], #9
   1c4b8:	4b17      	ldr	r3, [pc, #92]	; (1c518 <le_adv_start_add_conn+0x6c>)
   1c4ba:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
   1c4be:	2207      	movs	r2, #7
   1c4c0:	4916      	ldr	r1, [pc, #88]	; (1c51c <le_adv_start_add_conn+0x70>)
   1c4c2:	4628      	mov	r0, r5
   1c4c4:	f010 f96d 	bl	2c7a2 <memcmp>

	if (!adv_is_directed(adv)) {
   1c4c8:	b960      	cbnz	r0, 1c4e4 <le_adv_start_add_conn+0x38>
   1c4ca:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1c4cc:	4914      	ldr	r1, [pc, #80]	; (1c520 <le_adv_start_add_conn+0x74>)
   1c4ce:	7820      	ldrb	r0, [r4, #0]
   1c4d0:	f010 fffe 	bl	2d4d0 <bt_conn_add_le>
		if (!conn) {
   1c4d4:	4604      	mov	r4, r0
   1c4d6:	b1b0      	cbz	r0, 1c506 <le_adv_start_add_conn+0x5a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1c4d8:	2104      	movs	r1, #4
   1c4da:	f000 ff23 	bl	1d324 <bt_conn_set_state>
		*out_conn = conn;
   1c4de:	603c      	str	r4, [r7, #0]
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1c4e0:	4630      	mov	r0, r6
   1c4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1c4e4:	4629      	mov	r1, r5
   1c4e6:	7820      	ldrb	r0, [r4, #0]
   1c4e8:	f001 f988 	bl	1d7fc <bt_conn_exists_le>
   1c4ec:	b970      	cbnz	r0, 1c50c <le_adv_start_add_conn+0x60>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1c4ee:	4629      	mov	r1, r5
   1c4f0:	7820      	ldrb	r0, [r4, #0]
   1c4f2:	f010 ffed 	bl	2d4d0 <bt_conn_add_le>
	if (!conn) {
   1c4f6:	4604      	mov	r4, r0
   1c4f8:	b158      	cbz	r0, 1c512 <le_adv_start_add_conn+0x66>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1c4fa:	2105      	movs	r1, #5
   1c4fc:	f000 ff12 	bl	1d324 <bt_conn_set_state>
	*out_conn = conn;
   1c500:	603c      	str	r4, [r7, #0]
	return 0;
   1c502:	2600      	movs	r6, #0
   1c504:	e7ec      	b.n	1c4e0 <le_adv_start_add_conn+0x34>
			return -ENOMEM;
   1c506:	f06f 060b 	mvn.w	r6, #11
   1c50a:	e7e9      	b.n	1c4e0 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1c50c:	f06f 0615 	mvn.w	r6, #21
   1c510:	e7e6      	b.n	1c4e0 <le_adv_start_add_conn+0x34>
		return -ENOMEM;
   1c512:	f06f 060b 	mvn.w	r6, #11
   1c516:	e7e3      	b.n	1c4e0 <le_adv_start_add_conn+0x34>
   1c518:	20000438 	.word	0x20000438
   1c51c:	000334a0 	.word	0x000334a0
   1c520:	00033498 	.word	0x00033498

0001c524 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   1c524:	b570      	push	{r4, r5, r6, lr}
   1c526:	4604      	mov	r4, r0
   1c528:	460d      	mov	r5, r1
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
   1c52a:	f100 0609 	add.w	r6, r0, #9
   1c52e:	2207      	movs	r2, #7
   1c530:	490d      	ldr	r1, [pc, #52]	; (1c568 <le_adv_stop_free_conn+0x44>)
   1c532:	4630      	mov	r0, r6
   1c534:	f010 f935 	bl	2c7a2 <memcmp>
	struct bt_conn *conn;

	if (!adv_is_directed(adv)) {
   1c538:	b978      	cbnz	r0, 1c55a <le_adv_stop_free_conn+0x36>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1c53a:	2204      	movs	r2, #4
   1c53c:	490b      	ldr	r1, [pc, #44]	; (1c56c <le_adv_stop_free_conn+0x48>)
   1c53e:	7820      	ldrb	r0, [r4, #0]
   1c540:	f001 f9cc 	bl	1d8dc <bt_conn_lookup_state_le>
   1c544:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   1c546:	b13c      	cbz	r4, 1c558 <le_adv_stop_free_conn+0x34>
		conn->err = status;
   1c548:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c54a:	2100      	movs	r1, #0
   1c54c:	4620      	mov	r0, r4
   1c54e:	f000 fee9 	bl	1d324 <bt_conn_set_state>
		bt_conn_unref(conn);
   1c552:	4620      	mov	r0, r4
   1c554:	f010 ff69 	bl	2d42a <bt_conn_unref>
	}
}
   1c558:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1c55a:	2205      	movs	r2, #5
   1c55c:	4631      	mov	r1, r6
   1c55e:	7820      	ldrb	r0, [r4, #0]
   1c560:	f001 f9bc 	bl	1d8dc <bt_conn_lookup_state_le>
   1c564:	4604      	mov	r4, r0
   1c566:	e7ee      	b.n	1c546 <le_adv_stop_free_conn+0x22>
   1c568:	000334a0 	.word	0x000334a0
   1c56c:	00033498 	.word	0x00033498

0001c570 <bt_le_adv_lookup_legacy>:
}
   1c570:	4800      	ldr	r0, [pc, #0]	; (1c574 <bt_le_adv_lookup_legacy+0x4>)
   1c572:	4770      	bx	lr
   1c574:	20000450 	.word	0x20000450

0001c578 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c57c:	b093      	sub	sp, #76	; 0x4c
   1c57e:	9205      	str	r2, [sp, #20]
   1c580:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1c582:	2300      	movs	r3, #0
   1c584:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1c586:	690e      	ldr	r6, [r1, #16]
   1c588:	ebb6 0b03 	subs.w	fp, r6, r3
   1c58c:	bf18      	it	ne
   1c58e:	f04f 0b01 	movne.w	fp, #1
   1c592:	f3bf 8f5b 	dmb	ish
   1c596:	4bad      	ldr	r3, [pc, #692]	; (1c84c <bt_le_adv_start_legacy+0x2d4>)
   1c598:	681b      	ldr	r3, [r3, #0]
   1c59a:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c59e:	f013 0f04 	tst.w	r3, #4
   1c5a2:	f000 8141 	beq.w	1c828 <bt_le_adv_start_legacy+0x2b0>
   1c5a6:	4605      	mov	r5, r0
   1c5a8:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1c5aa:	4608      	mov	r0, r1
   1c5ac:	f010 fd27 	bl	2cffe <valid_adv_param>
   1c5b0:	2800      	cmp	r0, #0
   1c5b2:	f000 813c 	beq.w	1c82e <bt_le_adv_start_legacy+0x2b6>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   1c5b6:	4620      	mov	r0, r4
   1c5b8:	f010 fbfe 	bl	2cdb8 <bt_id_adv_random_addr_check>
   1c5bc:	4682      	mov	sl, r0
   1c5be:	2800      	cmp	r0, #0
   1c5c0:	f000 8138 	beq.w	1c834 <bt_le_adv_start_legacy+0x2bc>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1c5c4:	f105 0710 	add.w	r7, r5, #16
   1c5c8:	2107      	movs	r1, #7
   1c5ca:	4638      	mov	r0, r7
   1c5cc:	f010 fc2a 	bl	2ce24 <atomic_test_bit>
   1c5d0:	9004      	str	r0, [sp, #16]
   1c5d2:	2800      	cmp	r0, #0
   1c5d4:	f040 8131 	bne.w	1c83a <bt_le_adv_start_legacy+0x2c2>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1c5d8:	220f      	movs	r2, #15
   1c5da:	2100      	movs	r1, #0
   1c5dc:	a808      	add	r0, sp, #32
   1c5de:	f010 f934 	bl	2c84a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1c5e2:	68a3      	ldr	r3, [r4, #8]
   1c5e4:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1c5e8:	68e3      	ldr	r3, [r4, #12]
   1c5ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1c5ee:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1c5f2:	4648      	mov	r0, r9
   1c5f4:	f010 fc04 	bl	2ce00 <get_adv_channel_map>
   1c5f8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   1c5fc:	4648      	mov	r0, r9
   1c5fe:	f010 fbfd 	bl	2cdfc <get_filter_policy>
   1c602:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   1c606:	782a      	ldrb	r2, [r5, #0]
   1c608:	7823      	ldrb	r3, [r4, #0]
   1c60a:	429a      	cmp	r2, r3
   1c60c:	d00c      	beq.n	1c628 <bt_le_adv_start_legacy+0xb0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c60e:	4b8f      	ldr	r3, [pc, #572]	; (1c84c <bt_le_adv_start_legacy+0x2d4>)
   1c610:	f3bf 8f5b 	dmb	ish
   1c614:	e853 1f00 	ldrex	r1, [r3]
   1c618:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1c61c:	e843 1200 	strex	r2, r1, [r3]
   1c620:	2a00      	cmp	r2, #0
   1c622:	d1f7      	bne.n	1c614 <bt_le_adv_start_legacy+0x9c>
   1c624:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1c628:	7823      	ldrb	r3, [r4, #0]
   1c62a:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1c62c:	4a88      	ldr	r2, [pc, #544]	; (1c850 <bt_le_adv_start_legacy+0x2d8>)
   1c62e:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1c632:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1c636:	465a      	mov	r2, fp
   1c638:	6861      	ldr	r1, [r4, #4]
   1c63a:	4628      	mov	r0, r5
   1c63c:	f7ff fd7a 	bl	1c134 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   1c640:	4681      	mov	r9, r0
   1c642:	2800      	cmp	r0, #0
   1c644:	f040 80b7 	bne.w	1c7b6 <bt_le_adv_start_legacy+0x23e>
		return err;
	}

	if (dir_adv) {
   1c648:	b1ee      	cbz	r6, 1c686 <bt_le_adv_start_legacy+0x10e>
	memcpy(dst, src, sizeof(*dst));
   1c64a:	2207      	movs	r2, #7
   1c64c:	6921      	ldr	r1, [r4, #16]
   1c64e:	f105 0009 	add.w	r0, r5, #9
   1c652:	f010 f8cb 	bl	2c7ec <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   1c656:	4620      	mov	r0, r4
   1c658:	f010 fd23 	bl	2d0a2 <get_adv_name_type_param>
   1c65c:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1c65e:	6863      	ldr	r3, [r4, #4]
   1c660:	f013 0f01 	tst.w	r3, #1
   1c664:	d01e      	beq.n	1c6a4 <bt_le_adv_start_legacy+0x12c>
		if (dir_adv) {
   1c666:	b1ce      	cbz	r6, 1c69c <bt_le_adv_start_legacy+0x124>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1c668:	f013 0f10 	tst.w	r3, #16
   1c66c:	d012      	beq.n	1c694 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1c66e:	2304      	movs	r3, #4
   1c670:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1c674:	2207      	movs	r2, #7
   1c676:	6921      	ldr	r1, [r4, #16]
   1c678:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1c67c:	f010 f8b6 	bl	2c7ec <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1c680:	f8dd a010 	ldr.w	sl, [sp, #16]
}
   1c684:	e016      	b.n	1c6b4 <bt_le_adv_start_legacy+0x13c>
	memcpy(dst, src, sizeof(*dst));
   1c686:	2207      	movs	r2, #7
   1c688:	4972      	ldr	r1, [pc, #456]	; (1c854 <bt_le_adv_start_legacy+0x2dc>)
   1c68a:	f105 0009 	add.w	r0, r5, #9
   1c68e:	f010 f8ad 	bl	2c7ec <memcpy>
}
   1c692:	e7e0      	b.n	1c656 <bt_le_adv_start_legacy+0xde>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1c694:	2301      	movs	r3, #1
   1c696:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1c69a:	e7eb      	b.n	1c674 <bt_le_adv_start_legacy+0xfc>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   1c69c:	2300      	movs	r3, #0
   1c69e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1c6a2:	e007      	b.n	1c6b4 <bt_le_adv_start_legacy+0x13c>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1c6a4:	f413 7f00 	tst.w	r3, #512	; 0x200
   1c6a8:	d101      	bne.n	1c6ae <bt_le_adv_start_legacy+0x136>
   1c6aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1c6ac:	b353      	cbz	r3, 1c704 <bt_le_adv_start_legacy+0x18c>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1c6ae:	2302      	movs	r3, #2
   1c6b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1c6b4:	210f      	movs	r1, #15
   1c6b6:	f242 0006 	movw	r0, #8198	; 0x2006
   1c6ba:	f7fd fef7 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   1c6be:	4681      	mov	r9, r0
   1c6c0:	2800      	cmp	r0, #0
   1c6c2:	f000 80bd 	beq.w	1c840 <bt_le_adv_start_legacy+0x2c8>
   1c6c6:	220f      	movs	r2, #15
   1c6c8:	a908      	add	r1, sp, #32
   1c6ca:	300c      	adds	r0, #12
   1c6cc:	f012 fc69 	bl	2efa2 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1c6d0:	2200      	movs	r2, #0
   1c6d2:	4649      	mov	r1, r9
   1c6d4:	f242 0006 	movw	r0, #8198	; 0x2006
   1c6d8:	f7fd ff26 	bl	1a528 <bt_hci_cmd_send_sync>
	if (err) {
   1c6dc:	4681      	mov	r9, r0
   1c6de:	2800      	cmp	r0, #0
   1c6e0:	d169      	bne.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
		return err;
	}

	if (!dir_adv) {
   1c6e2:	b1be      	cbz	r6, 1c714 <bt_le_adv_start_legacy+0x19c>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1c6e4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c6e6:	f013 0f01 	tst.w	r3, #1
   1c6ea:	d02b      	beq.n	1c744 <bt_le_adv_start_legacy+0x1cc>
		err = le_adv_start_add_conn(adv, &conn);
   1c6ec:	a907      	add	r1, sp, #28
   1c6ee:	4628      	mov	r0, r5
   1c6f0:	f7ff fedc 	bl	1c4ac <le_adv_start_add_conn>
		if (err) {
   1c6f4:	b330      	cbz	r0, 1c744 <bt_le_adv_start_legacy+0x1cc>
			if (err == -ENOMEM && !dir_adv &&
   1c6f6:	f110 0f0c 	cmn.w	r0, #12
   1c6fa:	f040 80a4 	bne.w	1c846 <bt_le_adv_start_legacy+0x2ce>
   1c6fe:	b1de      	cbz	r6, 1c738 <bt_le_adv_start_legacy+0x1c0>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   1c700:	4681      	mov	r9, r0
   1c702:	e058      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1c704:	2802      	cmp	r0, #2
   1c706:	d0d2      	beq.n	1c6ae <bt_le_adv_start_legacy+0x136>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1c708:	2303      	movs	r3, #3
   1c70a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1c70e:	f8dd a010 	ldr.w	sl, [sp, #16]
   1c712:	e7cf      	b.n	1c6b4 <bt_le_adv_start_legacy+0x13c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1c714:	f8cd b00c 	str.w	fp, [sp, #12]
   1c718:	f8cd a008 	str.w	sl, [sp, #8]
   1c71c:	2300      	movs	r3, #0
   1c71e:	9301      	str	r3, [sp, #4]
   1c720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c722:	9300      	str	r3, [sp, #0]
   1c724:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1c726:	4642      	mov	r2, r8
   1c728:	9905      	ldr	r1, [sp, #20]
   1c72a:	4628      	mov	r0, r5
   1c72c:	f010 fbdc 	bl	2cee8 <le_adv_update>
		if (err) {
   1c730:	2800      	cmp	r0, #0
   1c732:	d0d7      	beq.n	1c6e4 <bt_le_adv_start_legacy+0x16c>
			return err;
   1c734:	4681      	mov	r9, r0
   1c736:	e03e      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1c738:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1c73a:	f012 0f02 	tst.w	r2, #2
   1c73e:	d00c      	beq.n	1c75a <bt_le_adv_start_legacy+0x1e2>
			return err;
   1c740:	4681      	mov	r9, r0
   1c742:	e038      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   1c744:	2101      	movs	r1, #1
   1c746:	4628      	mov	r0, r5
   1c748:	f010 fce7 	bl	2d11a <bt_le_adv_set_enable>
	if (err) {
   1c74c:	4605      	mov	r5, r0
   1c74e:	2800      	cmp	r0, #0
   1c750:	d135      	bne.n	1c7be <bt_le_adv_start_legacy+0x246>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1c752:	9807      	ldr	r0, [sp, #28]
   1c754:	b108      	cbz	r0, 1c75a <bt_le_adv_start_legacy+0x1e2>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   1c756:	f010 fe68 	bl	2d42a <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1c75a:	2e00      	cmp	r6, #0
   1c75c:	d05c      	beq.n	1c818 <bt_le_adv_start_legacy+0x2a0>
   1c75e:	464a      	mov	r2, r9
   1c760:	f002 0201 	and.w	r2, r2, #1
   1c764:	210e      	movs	r1, #14
   1c766:	4638      	mov	r0, r7
   1c768:	f010 fc5a 	bl	2d020 <atomic_set_bit_to>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1c76c:	f1bb 0f01 	cmp.w	fp, #1
   1c770:	bf14      	ite	ne
   1c772:	2200      	movne	r2, #0
   1c774:	2201      	moveq	r2, #1
   1c776:	2108      	movs	r1, #8
   1c778:	4638      	mov	r0, r7
   1c77a:	f010 fc51 	bl	2d020 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1c77e:	f1bb 0f02 	cmp.w	fp, #2
   1c782:	bf14      	ite	ne
   1c784:	2200      	movne	r2, #0
   1c786:	2201      	moveq	r2, #1
   1c788:	2109      	movs	r1, #9
   1c78a:	4638      	mov	r0, r7
   1c78c:	f010 fc48 	bl	2d020 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   1c790:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1c792:	f002 0201 	and.w	r2, r2, #1
   1c796:	210a      	movs	r1, #10
   1c798:	4638      	mov	r0, r7
   1c79a:	f010 fc41 	bl	2d020 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1c79e:	4652      	mov	r2, sl
   1c7a0:	210b      	movs	r1, #11
   1c7a2:	4638      	mov	r0, r7
   1c7a4:	f010 fc3c 	bl	2d020 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   1c7a8:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1c7aa:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1c7ae:	210d      	movs	r1, #13
   1c7b0:	4638      	mov	r0, r7
   1c7b2:	f010 fc35 	bl	2d020 <atomic_set_bit_to>

	return 0;
}
   1c7b6:	4648      	mov	r0, r9
   1c7b8:	b013      	add	sp, #76	; 0x4c
   1c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Failed to start advertiser");
   1c7be:	4b26      	ldr	r3, [pc, #152]	; (1c858 <bt_le_adv_start_legacy+0x2e0>)
   1c7c0:	9311      	str	r3, [sp, #68]	; 0x44
   1c7c2:	2302      	movs	r3, #2
   1c7c4:	f88d 3018 	strb.w	r3, [sp, #24]
   1c7c8:	2300      	movs	r3, #0
   1c7ca:	f88d 3019 	strb.w	r3, [sp, #25]
   1c7ce:	f88d 301a 	strb.w	r3, [sp, #26]
   1c7d2:	f88d 301b 	strb.w	r3, [sp, #27]
   1c7d6:	9a06      	ldr	r2, [sp, #24]
   1c7d8:	9210      	str	r2, [sp, #64]	; 0x40
   1c7da:	4619      	mov	r1, r3
   1c7dc:	f363 0100 	bfi	r1, r3, #0, #1
   1c7e0:	f363 0141 	bfi	r1, r3, #1, #1
   1c7e4:	f363 0182 	bfi	r1, r3, #2, #1
   1c7e8:	f363 01c5 	bfi	r1, r3, #3, #3
   1c7ec:	2201      	movs	r2, #1
   1c7ee:	f362 1188 	bfi	r1, r2, #6, #3
   1c7f2:	2208      	movs	r2, #8
   1c7f4:	f362 2153 	bfi	r1, r2, #9, #11
   1c7f8:	f363 511f 	bfi	r1, r3, #20, #12
   1c7fc:	aa10      	add	r2, sp, #64	; 0x40
   1c7fe:	4817      	ldr	r0, [pc, #92]	; (1c85c <bt_le_adv_start_legacy+0x2e4>)
   1c800:	f7f7 fc7c 	bl	140fc <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1c804:	9807      	ldr	r0, [sp, #28]
   1c806:	b128      	cbz	r0, 1c814 <bt_le_adv_start_legacy+0x29c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c808:	2100      	movs	r1, #0
   1c80a:	f000 fd8b 	bl	1d324 <bt_conn_set_state>
			bt_conn_unref(conn);
   1c80e:	9807      	ldr	r0, [sp, #28]
   1c810:	f010 fe0b 	bl	2d42a <bt_conn_unref>
		return err;
   1c814:	46a9      	mov	r9, r5
   1c816:	e7ce      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   1c818:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1c81a:	f013 0f02 	tst.w	r3, #2
   1c81e:	d001      	beq.n	1c824 <bt_le_adv_start_legacy+0x2ac>
   1c820:	464a      	mov	r2, r9
   1c822:	e79d      	b.n	1c760 <bt_le_adv_start_legacy+0x1e8>
   1c824:	2201      	movs	r2, #1
   1c826:	e79b      	b.n	1c760 <bt_le_adv_start_legacy+0x1e8>
		return -EAGAIN;
   1c828:	f06f 090a 	mvn.w	r9, #10
   1c82c:	e7c3      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
		return -EINVAL;
   1c82e:	f06f 0915 	mvn.w	r9, #21
   1c832:	e7c0      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
		return -EINVAL;
   1c834:	f06f 0915 	mvn.w	r9, #21
   1c838:	e7bd      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
		return -EALREADY;
   1c83a:	f06f 0977 	mvn.w	r9, #119	; 0x77
   1c83e:	e7ba      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
		return -ENOBUFS;
   1c840:	f06f 0968 	mvn.w	r9, #104	; 0x68
   1c844:	e7b7      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
			return err;
   1c846:	4681      	mov	r9, r0
   1c848:	e7b5      	b.n	1c7b6 <bt_le_adv_start_legacy+0x23e>
   1c84a:	bf00      	nop
   1c84c:	2000050c 	.word	0x2000050c
   1c850:	20000438 	.word	0x20000438
   1c854:	000334a0 	.word	0x000334a0
   1c858:	00033f28 	.word	0x00033f28
   1c85c:	00031cd4 	.word	0x00031cd4

0001c860 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1c860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c864:	b082      	sub	sp, #8
   1c866:	4606      	mov	r6, r0
   1c868:	460c      	mov	r4, r1
   1c86a:	4615      	mov	r5, r2
   1c86c:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_get_legacy();
   1c86e:	f7ff fd57 	bl	1c320 <adv_get_legacy>
	int err;

	if (!adv) {
   1c872:	b1f8      	cbz	r0, 1c8b4 <bt_le_adv_start+0x54>
   1c874:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1c876:	9b08      	ldr	r3, [sp, #32]
   1c878:	9301      	str	r3, [sp, #4]
   1c87a:	9700      	str	r7, [sp, #0]
   1c87c:	462b      	mov	r3, r5
   1c87e:	4622      	mov	r2, r4
   1c880:	4631      	mov	r1, r6
   1c882:	f7ff fe79 	bl	1c578 <bt_le_adv_start_legacy>
   1c886:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   1c888:	4629      	mov	r1, r5
   1c88a:	4620      	mov	r0, r4
   1c88c:	f010 fa97 	bl	2cdbe <ad_is_limited>
   1c890:	b918      	cbnz	r0, 1c89a <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1c892:	4630      	mov	r0, r6
   1c894:	b002      	add	sp, #8
   1c896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1c89a:	f108 0818 	add.w	r8, r8, #24
   1c89e:	4907      	ldr	r1, [pc, #28]	; (1c8bc <bt_le_adv_start+0x5c>)
   1c8a0:	4640      	mov	r0, r8
   1c8a2:	f014 fb94 	bl	30fce <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1c8a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c8aa:	2300      	movs	r3, #0
   1c8ac:	4640      	mov	r0, r8
   1c8ae:	f009 fed1 	bl	26654 <k_work_reschedule>
   1c8b2:	e7ee      	b.n	1c892 <bt_le_adv_start+0x32>
		return -ENOMEM;
   1c8b4:	f06f 060b 	mvn.w	r6, #11
   1c8b8:	e7eb      	b.n	1c892 <bt_le_adv_start+0x32>
   1c8ba:	bf00      	nop
   1c8bc:	0001c971 	.word	0x0001c971

0001c8c0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1c8c0:	b530      	push	{r4, r5, lr}
   1c8c2:	b089      	sub	sp, #36	; 0x24
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1c8c4:	f7ff fe54 	bl	1c570 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   1c8c8:	b1c0      	cbz	r0, 1c8fc <bt_le_adv_stop+0x3c>
   1c8ca:	4605      	mov	r5, r0
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1c8cc:	f010 fc29 	bl	2d122 <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1c8d0:	f105 0410 	add.w	r4, r5, #16
   1c8d4:	f3bf 8f5b 	dmb	ish
   1c8d8:	e854 3f00 	ldrex	r3, [r4]
   1c8dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   1c8e0:	e844 3200 	strex	r2, r3, [r4]
   1c8e4:	2a00      	cmp	r2, #0
   1c8e6:	d1f7      	bne.n	1c8d8 <bt_le_adv_stop+0x18>
   1c8e8:	f3bf 8f5b 	dmb	ish

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1c8ec:	2107      	movs	r1, #7
   1c8ee:	4620      	mov	r0, r4
   1c8f0:	f010 fa98 	bl	2ce24 <atomic_test_bit>
   1c8f4:	bb40      	cbnz	r0, 1c948 <bt_le_adv_stop+0x88>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   1c8f6:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1c8f8:	b009      	add	sp, #36	; 0x24
   1c8fa:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No valid legacy adv");
   1c8fc:	4b1a      	ldr	r3, [pc, #104]	; (1c968 <bt_le_adv_stop+0xa8>)
   1c8fe:	9307      	str	r3, [sp, #28]
   1c900:	2302      	movs	r3, #2
   1c902:	f88d 3004 	strb.w	r3, [sp, #4]
   1c906:	2400      	movs	r4, #0
   1c908:	f88d 4005 	strb.w	r4, [sp, #5]
   1c90c:	f88d 4006 	strb.w	r4, [sp, #6]
   1c910:	f88d 4007 	strb.w	r4, [sp, #7]
   1c914:	9b01      	ldr	r3, [sp, #4]
   1c916:	9306      	str	r3, [sp, #24]
   1c918:	4621      	mov	r1, r4
   1c91a:	f364 0100 	bfi	r1, r4, #0, #1
   1c91e:	f364 0141 	bfi	r1, r4, #1, #1
   1c922:	f364 0182 	bfi	r1, r4, #2, #1
   1c926:	f364 01c5 	bfi	r1, r4, #3, #3
   1c92a:	2301      	movs	r3, #1
   1c92c:	f363 1188 	bfi	r1, r3, #6, #3
   1c930:	2308      	movs	r3, #8
   1c932:	f363 2153 	bfi	r1, r3, #9, #11
   1c936:	f364 511f 	bfi	r1, r4, #20, #12
   1c93a:	4623      	mov	r3, r4
   1c93c:	aa06      	add	r2, sp, #24
   1c93e:	480b      	ldr	r0, [pc, #44]	; (1c96c <bt_le_adv_stop+0xac>)
   1c940:	f7f7 fbdc 	bl	140fc <z_impl_z_log_msg_static_create>
		return 0;
   1c944:	4620      	mov	r0, r4
   1c946:	e7d7      	b.n	1c8f8 <bt_le_adv_stop+0x38>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1c948:	210a      	movs	r1, #10
   1c94a:	4620      	mov	r0, r4
   1c94c:	f010 fa6a 	bl	2ce24 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c950:	b920      	cbnz	r0, 1c95c <bt_le_adv_stop+0x9c>
		err = bt_le_adv_set_enable_legacy(adv, false);
   1c952:	2100      	movs	r1, #0
   1c954:	4628      	mov	r0, r5
   1c956:	f010 fbb8 	bl	2d0ca <bt_le_adv_set_enable_legacy>
		if (err) {
   1c95a:	e7cd      	b.n	1c8f8 <bt_le_adv_stop+0x38>
		le_adv_stop_free_conn(adv, 0);
   1c95c:	2100      	movs	r1, #0
   1c95e:	4628      	mov	r0, r5
   1c960:	f7ff fde0 	bl	1c524 <le_adv_stop_free_conn>
   1c964:	e7f5      	b.n	1c952 <bt_le_adv_stop+0x92>
   1c966:	bf00      	nop
   1c968:	00033f44 	.word	0x00033f44
   1c96c:	00031cd4 	.word	0x00031cd4

0001c970 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1c970:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c972:	b083      	sub	sp, #12
   1c974:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1c976:	f7ff ffa3 	bl	1c8c0 <bt_le_adv_stop>
#endif
	if (err) {
   1c97a:	b3a0      	cbz	r0, 1c9e6 <adv_timeout+0x76>
   1c97c:	4605      	mov	r5, r0
		LOG_WRN("Failed to stop advertising: %d", err);
   1c97e:	466c      	mov	r4, sp
   1c980:	b088      	sub	sp, #32
   1c982:	466b      	mov	r3, sp
   1c984:	f113 0210 	adds.w	r2, r3, #16
   1c988:	d030      	beq.n	1c9ec <adv_timeout+0x7c>
   1c98a:	210c      	movs	r1, #12
   1c98c:	b13a      	cbz	r2, 1c99e <adv_timeout+0x2e>
   1c98e:	4608      	mov	r0, r1
   1c990:	2904      	cmp	r1, #4
   1c992:	dd01      	ble.n	1c998 <adv_timeout+0x28>
   1c994:	4e18      	ldr	r6, [pc, #96]	; (1c9f8 <adv_timeout+0x88>)
   1c996:	615e      	str	r6, [r3, #20]
   1c998:	2808      	cmp	r0, #8
   1c99a:	dd00      	ble.n	1c99e <adv_timeout+0x2e>
   1c99c:	619d      	str	r5, [r3, #24]
   1c99e:	290b      	cmp	r1, #11
   1c9a0:	dd27      	ble.n	1c9f2 <adv_timeout+0x82>
   1c9a2:	f04f 0c0c 	mov.w	ip, #12
   1c9a6:	b13a      	cbz	r2, 1c9b8 <adv_timeout+0x48>
   1c9a8:	2103      	movs	r1, #3
   1c9aa:	7139      	strb	r1, [r7, #4]
   1c9ac:	2100      	movs	r1, #0
   1c9ae:	7179      	strb	r1, [r7, #5]
   1c9b0:	71b9      	strb	r1, [r7, #6]
   1c9b2:	71f9      	strb	r1, [r7, #7]
   1c9b4:	6878      	ldr	r0, [r7, #4]
   1c9b6:	6118      	str	r0, [r3, #16]
   1c9b8:	2100      	movs	r1, #0
   1c9ba:	f36f 0100 	bfc	r1, #0, #1
   1c9be:	f36f 0141 	bfc	r1, #1, #1
   1c9c2:	f36f 0182 	bfc	r1, #2, #1
   1c9c6:	f36f 01c5 	bfc	r1, #3, #3
   1c9ca:	2302      	movs	r3, #2
   1c9cc:	f363 1188 	bfi	r1, r3, #6, #3
   1c9d0:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1c9d4:	f36c 2153 	bfi	r1, ip, #9, #11
   1c9d8:	f36f 511f 	bfc	r1, #20, #12
   1c9dc:	2300      	movs	r3, #0
   1c9de:	4807      	ldr	r0, [pc, #28]	; (1c9fc <adv_timeout+0x8c>)
   1c9e0:	f7f7 fb8c 	bl	140fc <z_impl_z_log_msg_static_create>
   1c9e4:	46a5      	mov	sp, r4
	}
}
   1c9e6:	370c      	adds	r7, #12
   1c9e8:	46bd      	mov	sp, r7
   1c9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Failed to stop advertising: %d", err);
   1c9ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c9f0:	e7cc      	b.n	1c98c <adv_timeout+0x1c>
   1c9f2:	f06f 0c1b 	mvn.w	ip, #27
   1c9f6:	e7d6      	b.n	1c9a6 <adv_timeout+0x36>
   1c9f8:	00033f58 	.word	0x00033f58
   1c9fc:	00031cd4 	.word	0x00031cd4

0001ca00 <bt_le_adv_resume>:
{
   1ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca04:	b084      	sub	sp, #16
   1ca06:	af00      	add	r7, sp, #0
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1ca08:	f7ff fdb2 	bl	1c570 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1ca0c:	b138      	cbz	r0, 1ca1e <bt_le_adv_resume+0x1e>
   1ca0e:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1ca10:	f100 0510 	add.w	r5, r0, #16
   1ca14:	210e      	movs	r1, #14
   1ca16:	4628      	mov	r0, r5
   1ca18:	f010 fa04 	bl	2ce24 <atomic_test_bit>
   1ca1c:	b918      	cbnz	r0, 1ca26 <bt_le_adv_resume+0x26>
}
   1ca1e:	3710      	adds	r7, #16
   1ca20:	46bd      	mov	sp, r7
   1ca22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   1ca26:	2107      	movs	r1, #7
   1ca28:	4628      	mov	r0, r5
   1ca2a:	f010 f9fb 	bl	2ce24 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1ca2e:	4606      	mov	r6, r0
   1ca30:	2800      	cmp	r0, #0
   1ca32:	d1f4      	bne.n	1ca1e <bt_le_adv_resume+0x1e>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1ca34:	210a      	movs	r1, #10
   1ca36:	4628      	mov	r0, r5
   1ca38:	f010 f9f4 	bl	2ce24 <atomic_test_bit>
   1ca3c:	2800      	cmp	r0, #0
   1ca3e:	d0ee      	beq.n	1ca1e <bt_le_adv_resume+0x1e>
	err = le_adv_start_add_conn(adv, &conn);
   1ca40:	f107 010c 	add.w	r1, r7, #12
   1ca44:	4620      	mov	r0, r4
   1ca46:	f7ff fd31 	bl	1c4ac <le_adv_start_add_conn>
	if (err) {
   1ca4a:	2800      	cmp	r0, #0
   1ca4c:	d1e7      	bne.n	1ca1e <bt_le_adv_resume+0x1e>
	return memcmp(a, b, sizeof(*a));
   1ca4e:	2207      	movs	r2, #7
   1ca50:	4938      	ldr	r1, [pc, #224]	; (1cb34 <bt_le_adv_resume+0x134>)
   1ca52:	f104 0009 	add.w	r0, r4, #9
   1ca56:	f00f fea4 	bl	2c7a2 <memcmp>
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
   1ca5a:	f1b0 0800 	subs.w	r8, r0, #0
   1ca5e:	bf18      	it	ne
   1ca60:	f04f 0801 	movne.w	r8, #1
		uint32_t options = adv_get_options(adv);
   1ca64:	4620      	mov	r0, r4
   1ca66:	f010 f9ea 	bl	2ce3e <adv_get_options>
   1ca6a:	4601      	mov	r1, r0
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   1ca6c:	1dfb      	adds	r3, r7, #7
   1ca6e:	4642      	mov	r2, r8
   1ca70:	4620      	mov	r0, r4
   1ca72:	f7ff fb5f 	bl	1c134 <bt_id_set_adv_own_addr>
		if (err) {
   1ca76:	4684      	mov	ip, r0
   1ca78:	b3d0      	cbz	r0, 1caf0 <bt_le_adv_resume+0xf0>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   1ca7a:	466d      	mov	r5, sp
   1ca7c:	b088      	sub	sp, #32
   1ca7e:	466b      	mov	r3, sp
   1ca80:	f113 0210 	adds.w	r2, r3, #16
   1ca84:	d02e      	beq.n	1cae4 <bt_le_adv_resume+0xe4>
   1ca86:	210c      	movs	r1, #12
   1ca88:	b142      	cbz	r2, 1ca9c <bt_le_adv_resume+0x9c>
   1ca8a:	4608      	mov	r0, r1
   1ca8c:	2904      	cmp	r1, #4
   1ca8e:	dd01      	ble.n	1ca94 <bt_le_adv_resume+0x94>
   1ca90:	4c29      	ldr	r4, [pc, #164]	; (1cb38 <bt_le_adv_resume+0x138>)
   1ca92:	615c      	str	r4, [r3, #20]
   1ca94:	2808      	cmp	r0, #8
   1ca96:	dd01      	ble.n	1ca9c <bt_le_adv_resume+0x9c>
   1ca98:	f8c3 c018 	str.w	ip, [r3, #24]
   1ca9c:	290b      	cmp	r1, #11
   1ca9e:	dd24      	ble.n	1caea <bt_le_adv_resume+0xea>
   1caa0:	240c      	movs	r4, #12
   1caa2:	b13a      	cbz	r2, 1cab4 <bt_le_adv_resume+0xb4>
   1caa4:	2103      	movs	r1, #3
   1caa6:	7239      	strb	r1, [r7, #8]
   1caa8:	2100      	movs	r1, #0
   1caaa:	7279      	strb	r1, [r7, #9]
   1caac:	72b9      	strb	r1, [r7, #10]
   1caae:	72f9      	strb	r1, [r7, #11]
   1cab0:	68b8      	ldr	r0, [r7, #8]
   1cab2:	6118      	str	r0, [r3, #16]
   1cab4:	2100      	movs	r1, #0
   1cab6:	f36f 0100 	bfc	r1, #0, #1
   1caba:	f36f 0141 	bfc	r1, #1, #1
   1cabe:	f36f 0182 	bfc	r1, #2, #1
   1cac2:	f36f 01c5 	bfc	r1, #3, #3
   1cac6:	2301      	movs	r3, #1
   1cac8:	f363 1188 	bfi	r1, r3, #6, #3
   1cacc:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1cad0:	f364 2153 	bfi	r1, r4, #9, #11
   1cad4:	f36f 511f 	bfc	r1, #20, #12
   1cad8:	2300      	movs	r3, #0
   1cada:	4818      	ldr	r0, [pc, #96]	; (1cb3c <bt_le_adv_resume+0x13c>)
   1cadc:	f7f7 fb0e 	bl	140fc <z_impl_z_log_msg_static_create>
   1cae0:	46ad      	mov	sp, r5
			return;
   1cae2:	e79c      	b.n	1ca1e <bt_le_adv_resume+0x1e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   1cae4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cae8:	e7ce      	b.n	1ca88 <bt_le_adv_resume+0x88>
   1caea:	f06f 041b 	mvn.w	r4, #27
   1caee:	e7d8      	b.n	1caa2 <bt_le_adv_resume+0xa2>
	err = bt_le_adv_set_enable(adv, true);
   1caf0:	2101      	movs	r1, #1
   1caf2:	4620      	mov	r0, r4
   1caf4:	f010 fb11 	bl	2d11a <bt_le_adv_set_enable>
	if (err) {
   1caf8:	b988      	cbnz	r0, 1cb1e <bt_le_adv_resume+0x11e>
	bt_conn_unref(conn);
   1cafa:	68f8      	ldr	r0, [r7, #12]
   1cafc:	f010 fc95 	bl	2d42a <bt_conn_unref>
	if (persist_paused) {
   1cb00:	2e00      	cmp	r6, #0
   1cb02:	d08c      	beq.n	1ca1e <bt_le_adv_resume+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cb04:	f3bf 8f5b 	dmb	ish
   1cb08:	e855 3f00 	ldrex	r3, [r5]
   1cb0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1cb10:	e845 3200 	strex	r2, r3, [r5]
   1cb14:	2a00      	cmp	r2, #0
   1cb16:	d1f7      	bne.n	1cb08 <bt_le_adv_resume+0x108>
   1cb18:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
   1cb1c:	e77f      	b.n	1ca1e <bt_le_adv_resume+0x1e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1cb1e:	2100      	movs	r1, #0
   1cb20:	68f8      	ldr	r0, [r7, #12]
   1cb22:	f000 fbff 	bl	1d324 <bt_conn_set_state>
		persist_paused = atomic_test_and_clear_bit(adv->flags,
   1cb26:	210e      	movs	r1, #14
   1cb28:	4628      	mov	r0, r5
   1cb2a:	f010 fa9e 	bl	2d06a <atomic_test_and_clear_bit>
   1cb2e:	4606      	mov	r6, r0
   1cb30:	e7e3      	b.n	1cafa <bt_le_adv_resume+0xfa>
   1cb32:	bf00      	nop
   1cb34:	000334a0 	.word	0x000334a0
   1cb38:	00033f78 	.word	0x00033f78
   1cb3c:	00031cd4 	.word	0x00031cd4

0001cb40 <state2str>:
	return NULL;
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   1cb40:	2808      	cmp	r0, #8
   1cb42:	d816      	bhi.n	1cb72 <state2str+0x32>
   1cb44:	e8df f000 	tbb	[pc, r0]
   1cb48:	0d071705 	.word	0x0d071705
   1cb4c:	110f090b 	.word	0x110f090b
   1cb50:	13          	.byte	0x13
   1cb51:	00          	.byte	0x00
   1cb52:	480a      	ldr	r0, [pc, #40]	; (1cb7c <state2str+0x3c>)
   1cb54:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   1cb56:	480a      	ldr	r0, [pc, #40]	; (1cb80 <state2str+0x40>)
   1cb58:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   1cb5a:	480a      	ldr	r0, [pc, #40]	; (1cb84 <state2str+0x44>)
   1cb5c:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   1cb5e:	480a      	ldr	r0, [pc, #40]	; (1cb88 <state2str+0x48>)
   1cb60:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   1cb62:	480a      	ldr	r0, [pc, #40]	; (1cb8c <state2str+0x4c>)
   1cb64:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   1cb66:	480a      	ldr	r0, [pc, #40]	; (1cb90 <state2str+0x50>)
   1cb68:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   1cb6a:	480a      	ldr	r0, [pc, #40]	; (1cb94 <state2str+0x54>)
   1cb6c:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   1cb6e:	480a      	ldr	r0, [pc, #40]	; (1cb98 <state2str+0x58>)
   1cb70:	4770      	bx	lr
	default:
		return "(unknown)";
   1cb72:	480a      	ldr	r0, [pc, #40]	; (1cb9c <state2str+0x5c>)
   1cb74:	4770      	bx	lr
		return "disconnect-complete";
   1cb76:	480a      	ldr	r0, [pc, #40]	; (1cba0 <state2str+0x60>)
	}
}
   1cb78:	4770      	bx	lr
   1cb7a:	bf00      	nop
   1cb7c:	00033fb8 	.word	0x00033fb8
   1cb80:	00033fdc 	.word	0x00033fdc
   1cb84:	00033fec 	.word	0x00033fec
   1cb88:	00034000 	.word	0x00034000
   1cb8c:	00034010 	.word	0x00034010
   1cb90:	00034020 	.word	0x00034020
   1cb94:	0003442c 	.word	0x0003442c
   1cb98:	0003402c 	.word	0x0003402c
   1cb9c:	0003403c 	.word	0x0003403c
   1cba0:	00033fc8 	.word	0x00033fc8

0001cba4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1cba4:	b538      	push	{r3, r4, r5, lr}
   1cba6:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1cba8:	4b0c      	ldr	r3, [pc, #48]	; (1cbdc <notify_connected+0x38>)
   1cbaa:	681c      	ldr	r4, [r3, #0]
   1cbac:	e003      	b.n	1cbb6 <notify_connected+0x12>
		if (cb->connected) {
			cb->connected(conn, conn->err);
   1cbae:	7a69      	ldrb	r1, [r5, #9]
   1cbb0:	4628      	mov	r0, r5
   1cbb2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1cbb4:	6924      	ldr	r4, [r4, #16]
   1cbb6:	b11c      	cbz	r4, 1cbc0 <notify_connected+0x1c>
		if (cb->connected) {
   1cbb8:	6823      	ldr	r3, [r4, #0]
   1cbba:	2b00      	cmp	r3, #0
   1cbbc:	d1f7      	bne.n	1cbae <notify_connected+0xa>
   1cbbe:	e7f9      	b.n	1cbb4 <notify_connected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1cbc0:	4c07      	ldr	r4, [pc, #28]	; (1cbe0 <notify_connected+0x3c>)
   1cbc2:	e000      	b.n	1cbc6 <notify_connected+0x22>
   1cbc4:	3414      	adds	r4, #20
   1cbc6:	4b07      	ldr	r3, [pc, #28]	; (1cbe4 <notify_connected+0x40>)
   1cbc8:	429c      	cmp	r4, r3
   1cbca:	d206      	bcs.n	1cbda <notify_connected+0x36>
		if (cb->connected) {
   1cbcc:	6823      	ldr	r3, [r4, #0]
   1cbce:	2b00      	cmp	r3, #0
   1cbd0:	d0f8      	beq.n	1cbc4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1cbd2:	7a69      	ldrb	r1, [r5, #9]
   1cbd4:	4628      	mov	r0, r5
   1cbd6:	4798      	blx	r3
   1cbd8:	e7f4      	b.n	1cbc4 <notify_connected+0x20>
		}
	}
}
   1cbda:	bd38      	pop	{r3, r4, r5, pc}
   1cbdc:	20003f8c 	.word	0x20003f8c
   1cbe0:	00031ca4 	.word	0x00031ca4
   1cbe4:	00031ca4 	.word	0x00031ca4

0001cbe8 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
   1cbe8:	b538      	push	{r3, r4, r5, lr}
   1cbea:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1cbec:	4b0c      	ldr	r3, [pc, #48]	; (1cc20 <notify_disconnected+0x38>)
   1cbee:	681c      	ldr	r4, [r3, #0]
   1cbf0:	e003      	b.n	1cbfa <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
   1cbf2:	7a69      	ldrb	r1, [r5, #9]
   1cbf4:	4628      	mov	r0, r5
   1cbf6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1cbf8:	6924      	ldr	r4, [r4, #16]
   1cbfa:	b11c      	cbz	r4, 1cc04 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1cbfc:	6863      	ldr	r3, [r4, #4]
   1cbfe:	2b00      	cmp	r3, #0
   1cc00:	d1f7      	bne.n	1cbf2 <notify_disconnected+0xa>
   1cc02:	e7f9      	b.n	1cbf8 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1cc04:	4c07      	ldr	r4, [pc, #28]	; (1cc24 <notify_disconnected+0x3c>)
   1cc06:	e000      	b.n	1cc0a <notify_disconnected+0x22>
   1cc08:	3414      	adds	r4, #20
   1cc0a:	4b07      	ldr	r3, [pc, #28]	; (1cc28 <notify_disconnected+0x40>)
   1cc0c:	429c      	cmp	r4, r3
   1cc0e:	d206      	bcs.n	1cc1e <notify_disconnected+0x36>
		if (cb->disconnected) {
   1cc10:	6863      	ldr	r3, [r4, #4]
   1cc12:	2b00      	cmp	r3, #0
   1cc14:	d0f8      	beq.n	1cc08 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1cc16:	7a69      	ldrb	r1, [r5, #9]
   1cc18:	4628      	mov	r0, r5
   1cc1a:	4798      	blx	r3
   1cc1c:	e7f4      	b.n	1cc08 <notify_disconnected+0x20>
		}
	}
}
   1cc1e:	bd38      	pop	{r3, r4, r5, pc}
   1cc20:	20003f8c 	.word	0x20003f8c
   1cc24:	00031ca4 	.word	0x00031ca4
   1cc28:	00031ca4 	.word	0x00031ca4

0001cc2c <tx_free>:
{
   1cc2c:	b508      	push	{r3, lr}
   1cc2e:	4601      	mov	r1, r0
	tx->cb = NULL;
   1cc30:	2300      	movs	r3, #0
   1cc32:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1cc34:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1cc36:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1cc38:	4801      	ldr	r0, [pc, #4]	; (1cc40 <tx_free+0x14>)
   1cc3a:	f014 f896 	bl	30d6a <k_queue_append>
}
   1cc3e:	bd08      	pop	{r3, pc}
   1cc40:	20000b30 	.word	0x20000b30

0001cc44 <conn_tx_alloc>:
{
   1cc44:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1cc46:	f00a f8c9 	bl	26ddc <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1cc4a:	4b08      	ldr	r3, [pc, #32]	; (1cc6c <conn_tx_alloc+0x28>)
   1cc4c:	4283      	cmp	r3, r0
   1cc4e:	d007      	beq.n	1cc60 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1cc50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cc54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cc58:	4805      	ldr	r0, [pc, #20]	; (1cc70 <conn_tx_alloc+0x2c>)
   1cc5a:	f009 fac9 	bl	261f0 <z_impl_k_queue_get>
}
   1cc5e:	bd08      	pop	{r3, pc}
   1cc60:	2200      	movs	r2, #0
   1cc62:	2300      	movs	r3, #0
   1cc64:	4802      	ldr	r0, [pc, #8]	; (1cc70 <conn_tx_alloc+0x2c>)
   1cc66:	f009 fac3 	bl	261f0 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1cc6a:	e7f8      	b.n	1cc5e <conn_tx_alloc+0x1a>
   1cc6c:	20002f60 	.word	0x20002f60
   1cc70:	20000b30 	.word	0x20000b30

0001cc74 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   1cc74:	4b03      	ldr	r3, [pc, #12]	; (1cc84 <bt_conn_get_pkts+0x10>)
   1cc76:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
   1cc7a:	b10b      	cbz	r3, 1cc80 <bt_conn_get_pkts+0xc>
		return &bt_dev.le.acl_pkts;
   1cc7c:	4802      	ldr	r0, [pc, #8]	; (1cc88 <bt_conn_get_pkts+0x14>)
}
   1cc7e:	4770      	bx	lr
	return NULL;
   1cc80:	2000      	movs	r0, #0
   1cc82:	4770      	bx	lr
   1cc84:	20000438 	.word	0x20000438
   1cc88:	20000540 	.word	0x20000540

0001cc8c <do_send_frag>:
{
   1cc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc90:	b082      	sub	sp, #8
   1cc92:	af00      	add	r7, sp, #0
   1cc94:	4604      	mov	r4, r0
   1cc96:	460d      	mov	r5, r1
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1cc98:	698e      	ldr	r6, [r1, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   1cc9a:	7a83      	ldrb	r3, [r0, #10]
   1cc9c:	2b07      	cmp	r3, #7
   1cc9e:	f040 8084 	bne.w	1cdaa <do_send_frag+0x11e>
   1cca2:	f04f 0140 	mov.w	r1, #64	; 0x40
   1cca6:	f3ef 8311 	mrs	r3, BASEPRI
   1ccaa:	f381 8812 	msr	BASEPRI_MAX, r1
   1ccae:	f3bf 8f6f 	isb	sy
	if (tx) {
   1ccb2:	2e00      	cmp	r6, #0
   1ccb4:	d060      	beq.n	1cd78 <do_send_frag+0xec>
	parent->next = child;
   1ccb6:	2100      	movs	r1, #0
   1ccb8:	6031      	str	r1, [r6, #0]
	return list->tail;
   1ccba:	6981      	ldr	r1, [r0, #24]
Z_GENLIST_APPEND(slist, snode)
   1ccbc:	2900      	cmp	r1, #0
   1ccbe:	d058      	beq.n	1cd72 <do_send_frag+0xe6>
	parent->next = child;
   1ccc0:	600e      	str	r6, [r1, #0]
	list->tail = node;
   1ccc2:	6186      	str	r6, [r0, #24]
	__asm__ volatile(
   1ccc4:	f383 8811 	msr	BASEPRI, r3
   1ccc8:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1cccc:	4629      	mov	r1, r5
   1ccce:	4620      	mov	r0, r4
   1ccd0:	f010 faad 	bl	2d22e <send_acl>
	if (err) {
   1ccd4:	4681      	mov	r9, r0
   1ccd6:	2800      	cmp	r0, #0
   1ccd8:	d075      	beq.n	1cdc6 <do_send_frag+0x13a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1ccda:	46ea      	mov	sl, sp
   1ccdc:	b088      	sub	sp, #32
   1ccde:	466b      	mov	r3, sp
   1cce0:	f113 0210 	adds.w	r2, r3, #16
   1cce4:	d055      	beq.n	1cd92 <do_send_frag+0x106>
   1cce6:	210c      	movs	r1, #12
   1cce8:	b152      	cbz	r2, 1cd00 <do_send_frag+0x74>
   1ccea:	4608      	mov	r0, r1
   1ccec:	2904      	cmp	r1, #4
   1ccee:	dd03      	ble.n	1ccf8 <do_send_frag+0x6c>
   1ccf0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1cdd0 <do_send_frag+0x144>
   1ccf4:	f8c3 c014 	str.w	ip, [r3, #20]
   1ccf8:	2808      	cmp	r0, #8
   1ccfa:	dd01      	ble.n	1cd00 <do_send_frag+0x74>
   1ccfc:	f8c3 9018 	str.w	r9, [r3, #24]
   1cd00:	290b      	cmp	r1, #11
   1cd02:	dd49      	ble.n	1cd98 <do_send_frag+0x10c>
   1cd04:	f04f 0c0c 	mov.w	ip, #12
   1cd08:	b13a      	cbz	r2, 1cd1a <do_send_frag+0x8e>
   1cd0a:	2103      	movs	r1, #3
   1cd0c:	7139      	strb	r1, [r7, #4]
   1cd0e:	2100      	movs	r1, #0
   1cd10:	7179      	strb	r1, [r7, #5]
   1cd12:	71b9      	strb	r1, [r7, #6]
   1cd14:	71f9      	strb	r1, [r7, #7]
   1cd16:	6878      	ldr	r0, [r7, #4]
   1cd18:	6118      	str	r0, [r3, #16]
   1cd1a:	2100      	movs	r1, #0
   1cd1c:	f36f 0100 	bfc	r1, #0, #1
   1cd20:	f36f 0141 	bfc	r1, #1, #1
   1cd24:	f36f 0182 	bfc	r1, #2, #1
   1cd28:	f36f 01c5 	bfc	r1, #3, #3
   1cd2c:	2301      	movs	r3, #1
   1cd2e:	f363 1188 	bfi	r1, r3, #6, #3
   1cd32:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1cd36:	f36c 2153 	bfi	r1, ip, #9, #11
   1cd3a:	f36f 511f 	bfc	r1, #20, #12
   1cd3e:	2300      	movs	r3, #0
   1cd40:	4824      	ldr	r0, [pc, #144]	; (1cdd4 <do_send_frag+0x148>)
   1cd42:	f7f7 f9db 	bl	140fc <z_impl_z_log_msg_static_create>
   1cd46:	46d5      	mov	sp, sl
	__asm__ volatile(
   1cd48:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd4c:	f3ef 8911 	mrs	r9, BASEPRI
   1cd50:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd54:	f3bf 8f6f 	isb	sy
		if (tx) {
   1cd58:	b30e      	cbz	r6, 1cd9e <do_send_frag+0x112>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1cd5a:	4631      	mov	r1, r6
   1cd5c:	f104 0014 	add.w	r0, r4, #20
   1cd60:	f010 f9f7 	bl	2d152 <sys_slist_find_and_remove>
	__asm__ volatile(
   1cd64:	f389 8811 	msr	BASEPRI, r9
   1cd68:	f3bf 8f6f 	isb	sy
		err = -EIO;
   1cd6c:	f06f 0904 	mvn.w	r9, #4
		goto fail;
   1cd70:	e01d      	b.n	1cdae <do_send_frag+0x122>
   1cd72:	6186      	str	r6, [r0, #24]
	list->head = node;
   1cd74:	6146      	str	r6, [r0, #20]
}
   1cd76:	e7a5      	b.n	1ccc4 <do_send_frag+0x38>
	return list->tail;
   1cd78:	6981      	ldr	r1, [r0, #24]
		if (tail_tx) {
   1cd7a:	b139      	cbz	r1, 1cd8c <do_send_frag+0x100>
			pending_no_cb = &tail_tx->pending_no_cb;
   1cd7c:	f101 080c 	add.w	r8, r1, #12
		(*pending_no_cb)++;
   1cd80:	f8d8 1000 	ldr.w	r1, [r8]
   1cd84:	3101      	adds	r1, #1
   1cd86:	f8c8 1000 	str.w	r1, [r8]
   1cd8a:	e79b      	b.n	1ccc4 <do_send_frag+0x38>
			pending_no_cb = &conn->pending_no_cb;
   1cd8c:	f100 081c 	add.w	r8, r0, #28
   1cd90:	e7f6      	b.n	1cd80 <do_send_frag+0xf4>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1cd92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cd96:	e7a7      	b.n	1cce8 <do_send_frag+0x5c>
   1cd98:	f06f 0c1b 	mvn.w	ip, #27
   1cd9c:	e7b4      	b.n	1cd08 <do_send_frag+0x7c>
			(*pending_no_cb)--;
   1cd9e:	f8d8 3000 	ldr.w	r3, [r8]
   1cda2:	3b01      	subs	r3, #1
   1cda4:	f8c8 3000 	str.w	r3, [r8]
   1cda8:	e7dc      	b.n	1cd64 <do_send_frag+0xd8>
		err = -ENOTCONN;
   1cdaa:	f06f 097f 	mvn.w	r9, #127	; 0x7f
	k_sem_give(bt_conn_get_pkts(conn));
   1cdae:	4620      	mov	r0, r4
   1cdb0:	f7ff ff60 	bl	1cc74 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1cdb4:	f009 fa5a 	bl	2626c <z_impl_k_sem_give>
	if (tx) {
   1cdb8:	b12e      	cbz	r6, 1cdc6 <do_send_frag+0x13a>
		tx_data(buf)->tx = NULL;
   1cdba:	2300      	movs	r3, #0
   1cdbc:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   1cdbe:	4631      	mov	r1, r6
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	f010 f9fe 	bl	2d1c2 <conn_tx_destroy>
}
   1cdc6:	4648      	mov	r0, r9
   1cdc8:	3708      	adds	r7, #8
   1cdca:	46bd      	mov	sp, r7
   1cdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cdd0:	00033b20 	.word	0x00033b20
   1cdd4:	00031ce4 	.word	0x00031ce4

0001cdd8 <send_frag>:
{
   1cdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cddc:	4606      	mov	r6, r0
   1cdde:	460d      	mov	r5, r1
   1cde0:	4614      	mov	r4, r2
   1cde2:	461f      	mov	r7, r3
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   1cde4:	f7ff ff46 	bl	1cc74 <bt_conn_get_pkts>
	return z_impl_k_sem_take(sem, timeout);
   1cde8:	2200      	movs	r2, #0
   1cdea:	2300      	movs	r3, #0
   1cdec:	f009 fa66 	bl	262bc <z_impl_k_sem_take>
   1cdf0:	b9f0      	cbnz	r0, 1ce30 <send_frag+0x58>
	if (frag) {
   1cdf2:	b334      	cbz	r4, 1ce42 <send_frag+0x6a>
	return bt_dev.le.acl_mtu;
   1cdf4:	4b17      	ldr	r3, [pc, #92]	; (1ce54 <send_frag+0x7c>)
   1cdf6:	f8b3 8104 	ldrh.w	r8, [r3, #260]	; 0x104
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1cdfa:	f104 090c 	add.w	r9, r4, #12
   1cdfe:	4648      	mov	r0, r9
   1ce00:	f012 f905 	bl	2f00e <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1ce04:	4540      	cmp	r0, r8
   1ce06:	d916      	bls.n	1ce36 <send_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1ce08:	4b12      	ldr	r3, [pc, #72]	; (1ce54 <send_frag+0x7c>)
   1ce0a:	f8b3 8104 	ldrh.w	r8, [r3, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ce0e:	4642      	mov	r2, r8
   1ce10:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   1ce14:	4648      	mov	r0, r9
   1ce16:	f012 f8c4 	bl	2efa2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1ce1a:	4641      	mov	r1, r8
   1ce1c:	4628      	mov	r0, r5
   1ce1e:	f012 f8da 	bl	2efd6 <net_buf_simple_pull>
	return do_send_frag(conn, frag, flags);
   1ce22:	463a      	mov	r2, r7
   1ce24:	4621      	mov	r1, r4
   1ce26:	4630      	mov	r0, r6
   1ce28:	f7ff ff30 	bl	1cc8c <do_send_frag>
}
   1ce2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   1ce30:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ce34:	e7fa      	b.n	1ce2c <send_frag+0x54>
	return net_buf_simple_tailroom(&buf->b);
   1ce36:	4648      	mov	r0, r9
   1ce38:	f012 f8e9 	bl	2f00e <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1ce3c:	fa1f f880 	uxth.w	r8, r0
   1ce40:	e7e5      	b.n	1ce0e <send_frag+0x36>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1ce42:	2200      	movs	r2, #0
   1ce44:	2300      	movs	r3, #0
   1ce46:	f106 0038 	add.w	r0, r6, #56	; 0x38
   1ce4a:	f012 f823 	bl	2ee94 <net_buf_get>
   1ce4e:	4604      	mov	r4, r0
		frag = buf;
   1ce50:	e7e7      	b.n	1ce22 <send_frag+0x4a>
   1ce52:	bf00      	nop
   1ce54:	20000438 	.word	0x20000438

0001ce58 <bt_conn_new>:
{
   1ce58:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1ce5a:	2300      	movs	r3, #0
   1ce5c:	428b      	cmp	r3, r1
   1ce5e:	d229      	bcs.n	1ceb4 <bt_conn_new+0x5c>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1ce60:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1ce64:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   1ce68:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ce6c:	f04f 0c01 	mov.w	ip, #1
   1ce70:	f3bf 8f5b 	dmb	ish
   1ce74:	e852 ef00 	ldrex	lr, [r2]
   1ce78:	f1be 0f00 	cmp.w	lr, #0
   1ce7c:	d103      	bne.n	1ce86 <bt_conn_new+0x2e>
   1ce7e:	e842 c500 	strex	r5, ip, [r2]
   1ce82:	2d00      	cmp	r5, #0
   1ce84:	d1f6      	bne.n	1ce74 <bt_conn_new+0x1c>
   1ce86:	f3bf 8f5b 	dmb	ish
   1ce8a:	d111      	bne.n	1ceb0 <bt_conn_new+0x58>
	if (!conn) {
   1ce8c:	b174      	cbz	r4, 1ceac <bt_conn_new+0x54>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1ce8e:	22bc      	movs	r2, #188	; 0xbc
   1ce90:	2100      	movs	r1, #0
   1ce92:	4620      	mov	r0, r4
   1ce94:	f00f fcd9 	bl	2c84a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1ce98:	4907      	ldr	r1, [pc, #28]	; (1ceb8 <bt_conn_new+0x60>)
   1ce9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1ce9e:	f014 f896 	bl	30fce <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1cea2:	4906      	ldr	r1, [pc, #24]	; (1cebc <bt_conn_new+0x64>)
   1cea4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cea8:	f014 f865 	bl	30f76 <k_work_init>
}
   1ceac:	4620      	mov	r0, r4
   1ceae:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1ceb0:	4463      	add	r3, ip
   1ceb2:	e7d3      	b.n	1ce5c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   1ceb4:	2400      	movs	r4, #0
   1ceb6:	e7e9      	b.n	1ce8c <bt_conn_new+0x34>
   1ceb8:	0001d9b1 	.word	0x0001d9b1
   1cebc:	0002d1b9 	.word	0x0002d1b9

0001cec0 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   1cec0:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1cec2:	2101      	movs	r1, #1
   1cec4:	4801      	ldr	r0, [pc, #4]	; (1cecc <acl_conn_new+0xc>)
   1cec6:	f7ff ffc7 	bl	1ce58 <bt_conn_new>
}
   1ceca:	bd08      	pop	{r3, pc}
   1cecc:	200021e8 	.word	0x200021e8

0001ced0 <bt_acl_recv>:
{
   1ced0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ced2:	b095      	sub	sp, #84	; 0x54
   1ced4:	af00      	add	r7, sp, #0
   1ced6:	4604      	mov	r4, r0
   1ced8:	460d      	mov	r5, r1
	switch (flags) {
   1ceda:	2a01      	cmp	r2, #1
   1cedc:	d058      	beq.n	1cf90 <bt_acl_recv+0xc0>
   1cede:	4613      	mov	r3, r2
   1cee0:	2a02      	cmp	r2, #2
   1cee2:	f040 80be 	bne.w	1d062 <bt_acl_recv+0x192>
		if (conn->rx) {
   1cee6:	6903      	ldr	r3, [r0, #16]
   1cee8:	b313      	cbz	r3, 1cf30 <bt_acl_recv+0x60>
			LOG_ERR("Unexpected first L2CAP frame");
   1ceea:	4b9b      	ldr	r3, [pc, #620]	; (1d158 <bt_acl_recv+0x288>)
   1ceec:	61fb      	str	r3, [r7, #28]
   1ceee:	2302      	movs	r3, #2
   1cef0:	713b      	strb	r3, [r7, #4]
   1cef2:	2300      	movs	r3, #0
   1cef4:	717b      	strb	r3, [r7, #5]
   1cef6:	71bb      	strb	r3, [r7, #6]
   1cef8:	71fb      	strb	r3, [r7, #7]
   1cefa:	687a      	ldr	r2, [r7, #4]
   1cefc:	61ba      	str	r2, [r7, #24]
   1cefe:	4619      	mov	r1, r3
   1cf00:	f363 0100 	bfi	r1, r3, #0, #1
   1cf04:	f363 0141 	bfi	r1, r3, #1, #1
   1cf08:	f363 0182 	bfi	r1, r3, #2, #1
   1cf0c:	f363 01c5 	bfi	r1, r3, #3, #3
   1cf10:	2201      	movs	r2, #1
   1cf12:	f362 1188 	bfi	r1, r2, #6, #3
   1cf16:	2208      	movs	r2, #8
   1cf18:	f362 2153 	bfi	r1, r2, #9, #11
   1cf1c:	f363 511f 	bfi	r1, r3, #20, #12
   1cf20:	f107 0218 	add.w	r2, r7, #24
   1cf24:	488d      	ldr	r0, [pc, #564]	; (1d15c <bt_acl_recv+0x28c>)
   1cf26:	f7f7 f8e9 	bl	140fc <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1cf2a:	4620      	mov	r0, r4
   1cf2c:	f010 f9e2 	bl	2d2f4 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1cf30:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1cf32:	6921      	ldr	r1, [r4, #16]
   1cf34:	8a08      	ldrh	r0, [r1, #16]
   1cf36:	2801      	cmp	r0, #1
   1cf38:	f240 80d5 	bls.w	1d0e6 <bt_acl_recv+0x216>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1cf3c:	68cb      	ldr	r3, [r1, #12]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1cf3e:	785a      	ldrb	r2, [r3, #1]
   1cf40:	781b      	ldrb	r3, [r3, #0]
   1cf42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cf46:	3304      	adds	r3, #4
   1cf48:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1cf4a:	4283      	cmp	r3, r0
   1cf4c:	f200 80cb 	bhi.w	1d0e6 <bt_acl_recv+0x216>
	if (conn->rx->len > acl_total_len) {
   1cf50:	f080 80fb 	bcs.w	1d14a <bt_acl_recv+0x27a>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1cf54:	466d      	mov	r5, sp
   1cf56:	b088      	sub	sp, #32
   1cf58:	4669      	mov	r1, sp
   1cf5a:	f111 0210 	adds.w	r2, r1, #16
   1cf5e:	f000 80c8 	beq.w	1d0f2 <bt_acl_recv+0x222>
   1cf62:	2610      	movs	r6, #16
   1cf64:	b17a      	cbz	r2, 1cf86 <bt_acl_recv+0xb6>
   1cf66:	46b4      	mov	ip, r6
   1cf68:	2e04      	cmp	r6, #4
   1cf6a:	dd03      	ble.n	1cf74 <bt_acl_recv+0xa4>
   1cf6c:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 1d160 <bt_acl_recv+0x290>
   1cf70:	f8c1 e014 	str.w	lr, [r1, #20]
   1cf74:	f1bc 0f08 	cmp.w	ip, #8
   1cf78:	dd00      	ble.n	1cf7c <bt_acl_recv+0xac>
   1cf7a:	6188      	str	r0, [r1, #24]
   1cf7c:	f1bc 0f0c 	cmp.w	ip, #12
   1cf80:	f340 80ba 	ble.w	1d0f8 <bt_acl_recv+0x228>
   1cf84:	61cb      	str	r3, [r1, #28]
   1cf86:	2e0f      	cmp	r6, #15
   1cf88:	f340 80dc 	ble.w	1d144 <bt_acl_recv+0x274>
   1cf8c:	2310      	movs	r3, #16
   1cf8e:	e0b5      	b.n	1d0fc <bt_acl_recv+0x22c>
		if (!conn->rx) {
   1cf90:	6900      	ldr	r0, [r0, #16]
   1cf92:	b180      	cbz	r0, 1cfb6 <bt_acl_recv+0xe6>
		if (!buf->len) {
   1cf94:	8a0e      	ldrh	r6, [r1, #16]
   1cf96:	b3ae      	cbz	r6, 1d004 <bt_acl_recv+0x134>
   1cf98:	300c      	adds	r0, #12
   1cf9a:	f012 f838 	bl	2f00e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1cf9e:	42b0      	cmp	r0, r6
   1cfa0:	d334      	bcc.n	1d00c <bt_acl_recv+0x13c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1cfa2:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1cfa4:	8a2a      	ldrh	r2, [r5, #16]
   1cfa6:	68e9      	ldr	r1, [r5, #12]
   1cfa8:	300c      	adds	r0, #12
   1cfaa:	f011 fffa 	bl	2efa2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1cfae:	4628      	mov	r0, r5
   1cfb0:	f011 ffa6 	bl	2ef00 <net_buf_unref>
		break;
   1cfb4:	e7bd      	b.n	1cf32 <bt_acl_recv+0x62>
			LOG_ERR("Unexpected L2CAP continuation");
   1cfb6:	4b6b      	ldr	r3, [pc, #428]	; (1d164 <bt_acl_recv+0x294>)
   1cfb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   1cfba:	2302      	movs	r3, #2
   1cfbc:	713b      	strb	r3, [r7, #4]
   1cfbe:	2300      	movs	r3, #0
   1cfc0:	717b      	strb	r3, [r7, #5]
   1cfc2:	71bb      	strb	r3, [r7, #6]
   1cfc4:	71fb      	strb	r3, [r7, #7]
   1cfc6:	687a      	ldr	r2, [r7, #4]
   1cfc8:	64ba      	str	r2, [r7, #72]	; 0x48
   1cfca:	4619      	mov	r1, r3
   1cfcc:	f363 0100 	bfi	r1, r3, #0, #1
   1cfd0:	f363 0141 	bfi	r1, r3, #1, #1
   1cfd4:	f363 0182 	bfi	r1, r3, #2, #1
   1cfd8:	f363 01c5 	bfi	r1, r3, #3, #3
   1cfdc:	2201      	movs	r2, #1
   1cfde:	f362 1188 	bfi	r1, r2, #6, #3
   1cfe2:	2208      	movs	r2, #8
   1cfe4:	f362 2153 	bfi	r1, r2, #9, #11
   1cfe8:	f363 511f 	bfi	r1, r3, #20, #12
   1cfec:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1cff0:	485a      	ldr	r0, [pc, #360]	; (1d15c <bt_acl_recv+0x28c>)
   1cff2:	f7f7 f883 	bl	140fc <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1cff6:	4620      	mov	r0, r4
   1cff8:	f010 f97c 	bl	2d2f4 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1cffc:	4628      	mov	r0, r5
   1cffe:	f011 ff7f 	bl	2ef00 <net_buf_unref>
			return;
   1d002:	e070      	b.n	1d0e6 <bt_acl_recv+0x216>
			net_buf_unref(buf);
   1d004:	4608      	mov	r0, r1
   1d006:	f011 ff7b 	bl	2ef00 <net_buf_unref>
			return;
   1d00a:	e06c      	b.n	1d0e6 <bt_acl_recv+0x216>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1d00c:	4b56      	ldr	r3, [pc, #344]	; (1d168 <bt_acl_recv+0x298>)
   1d00e:	637b      	str	r3, [r7, #52]	; 0x34
   1d010:	2302      	movs	r3, #2
   1d012:	713b      	strb	r3, [r7, #4]
   1d014:	2600      	movs	r6, #0
   1d016:	717e      	strb	r6, [r7, #5]
   1d018:	71be      	strb	r6, [r7, #6]
   1d01a:	71fe      	strb	r6, [r7, #7]
   1d01c:	687b      	ldr	r3, [r7, #4]
   1d01e:	633b      	str	r3, [r7, #48]	; 0x30
   1d020:	4631      	mov	r1, r6
   1d022:	f366 0100 	bfi	r1, r6, #0, #1
   1d026:	f366 0141 	bfi	r1, r6, #1, #1
   1d02a:	f366 0182 	bfi	r1, r6, #2, #1
   1d02e:	f366 01c5 	bfi	r1, r6, #3, #3
   1d032:	2301      	movs	r3, #1
   1d034:	f363 1188 	bfi	r1, r3, #6, #3
   1d038:	2308      	movs	r3, #8
   1d03a:	f363 2153 	bfi	r1, r3, #9, #11
   1d03e:	f366 511f 	bfi	r1, r6, #20, #12
   1d042:	4633      	mov	r3, r6
   1d044:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d048:	4844      	ldr	r0, [pc, #272]	; (1d15c <bt_acl_recv+0x28c>)
   1d04a:	f7f7 f857 	bl	140fc <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
   1d04e:	4632      	mov	r2, r6
   1d050:	6921      	ldr	r1, [r4, #16]
   1d052:	4620      	mov	r0, r4
   1d054:	f001 f8ac 	bl	1e1b0 <bt_l2cap_recv>
			conn->rx = NULL;
   1d058:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
   1d05a:	4628      	mov	r0, r5
   1d05c:	f011 ff50 	bl	2ef00 <net_buf_unref>
			return;
   1d060:	e041      	b.n	1d0e6 <bt_acl_recv+0x216>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1d062:	466e      	mov	r6, sp
   1d064:	b088      	sub	sp, #32
   1d066:	4669      	mov	r1, sp
   1d068:	f111 0210 	adds.w	r2, r1, #16
   1d06c:	d010      	beq.n	1d090 <bt_acl_recv+0x1c0>
   1d06e:	200c      	movs	r0, #12
   1d070:	b152      	cbz	r2, 1d088 <bt_acl_recv+0x1b8>
   1d072:	4684      	mov	ip, r0
   1d074:	2804      	cmp	r0, #4
   1d076:	dd03      	ble.n	1d080 <bt_acl_recv+0x1b0>
   1d078:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 1d16c <bt_acl_recv+0x29c>
   1d07c:	f8c1 e014 	str.w	lr, [r1, #20]
   1d080:	f1bc 0f08 	cmp.w	ip, #8
   1d084:	dd07      	ble.n	1d096 <bt_acl_recv+0x1c6>
   1d086:	618b      	str	r3, [r1, #24]
   1d088:	280b      	cmp	r0, #11
   1d08a:	dd2f      	ble.n	1d0ec <bt_acl_recv+0x21c>
   1d08c:	230c      	movs	r3, #12
   1d08e:	e004      	b.n	1d09a <bt_acl_recv+0x1ca>
   1d090:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d094:	e7ec      	b.n	1d070 <bt_acl_recv+0x1a0>
   1d096:	f06f 031b 	mvn.w	r3, #27
   1d09a:	b13a      	cbz	r2, 1d0ac <bt_acl_recv+0x1dc>
   1d09c:	2003      	movs	r0, #3
   1d09e:	7138      	strb	r0, [r7, #4]
   1d0a0:	2000      	movs	r0, #0
   1d0a2:	7178      	strb	r0, [r7, #5]
   1d0a4:	71b8      	strb	r0, [r7, #6]
   1d0a6:	71f8      	strb	r0, [r7, #7]
   1d0a8:	6878      	ldr	r0, [r7, #4]
   1d0aa:	6108      	str	r0, [r1, #16]
   1d0ac:	2100      	movs	r1, #0
   1d0ae:	f36f 0100 	bfc	r1, #0, #1
   1d0b2:	f36f 0141 	bfc	r1, #1, #1
   1d0b6:	f36f 0182 	bfc	r1, #2, #1
   1d0ba:	f36f 01c5 	bfc	r1, #3, #3
   1d0be:	2001      	movs	r0, #1
   1d0c0:	f360 1188 	bfi	r1, r0, #6, #3
   1d0c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1d0c8:	f363 2153 	bfi	r1, r3, #9, #11
   1d0cc:	f36f 511f 	bfc	r1, #20, #12
   1d0d0:	2300      	movs	r3, #0
   1d0d2:	4822      	ldr	r0, [pc, #136]	; (1d15c <bt_acl_recv+0x28c>)
   1d0d4:	f7f7 f812 	bl	140fc <z_impl_z_log_msg_static_create>
   1d0d8:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   1d0da:	4620      	mov	r0, r4
   1d0dc:	f010 f90a 	bl	2d2f4 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1d0e0:	4628      	mov	r0, r5
   1d0e2:	f011 ff0d 	bl	2ef00 <net_buf_unref>
}
   1d0e6:	3754      	adds	r7, #84	; 0x54
   1d0e8:	46bd      	mov	sp, r7
   1d0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1d0ec:	f06f 031b 	mvn.w	r3, #27
   1d0f0:	e7d3      	b.n	1d09a <bt_acl_recv+0x1ca>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1d0f2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1d0f6:	e735      	b.n	1cf64 <bt_acl_recv+0x94>
   1d0f8:	f06f 031b 	mvn.w	r3, #27
   1d0fc:	b13a      	cbz	r2, 1d10e <bt_acl_recv+0x23e>
   1d0fe:	2004      	movs	r0, #4
   1d100:	7138      	strb	r0, [r7, #4]
   1d102:	2000      	movs	r0, #0
   1d104:	7178      	strb	r0, [r7, #5]
   1d106:	71b8      	strb	r0, [r7, #6]
   1d108:	71f8      	strb	r0, [r7, #7]
   1d10a:	6878      	ldr	r0, [r7, #4]
   1d10c:	6108      	str	r0, [r1, #16]
   1d10e:	2100      	movs	r1, #0
   1d110:	f36f 0100 	bfc	r1, #0, #1
   1d114:	f36f 0141 	bfc	r1, #1, #1
   1d118:	f36f 0182 	bfc	r1, #2, #1
   1d11c:	f36f 01c5 	bfc	r1, #3, #3
   1d120:	2001      	movs	r0, #1
   1d122:	f360 1188 	bfi	r1, r0, #6, #3
   1d126:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1d12a:	f363 2153 	bfi	r1, r3, #9, #11
   1d12e:	f36f 511f 	bfc	r1, #20, #12
   1d132:	2300      	movs	r3, #0
   1d134:	4809      	ldr	r0, [pc, #36]	; (1d15c <bt_acl_recv+0x28c>)
   1d136:	f7f6 ffe1 	bl	140fc <z_impl_z_log_msg_static_create>
   1d13a:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
   1d13c:	4620      	mov	r0, r4
   1d13e:	f010 f8d9 	bl	2d2f4 <bt_conn_reset_rx_state>
		return;
   1d142:	e7d0      	b.n	1d0e6 <bt_acl_recv+0x216>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1d144:	f06f 031b 	mvn.w	r3, #27
   1d148:	e7d8      	b.n	1d0fc <bt_acl_recv+0x22c>
	conn->rx = NULL;
   1d14a:	2300      	movs	r3, #0
   1d14c:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1d14e:	2201      	movs	r2, #1
   1d150:	4620      	mov	r0, r4
   1d152:	f001 f82d 	bl	1e1b0 <bt_l2cap_recv>
   1d156:	e7c6      	b.n	1d0e6 <bt_acl_recv+0x216>
   1d158:	00034048 	.word	0x00034048
   1d15c:	00031ce4 	.word	0x00031ce4
   1d160:	000340d0 	.word	0x000340d0
   1d164:	00034068 	.word	0x00034068
   1d168:	00034088 	.word	0x00034088
   1d16c:	000340b0 	.word	0x000340b0

0001d170 <bt_conn_send_cb>:
{
   1d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d174:	b094      	sub	sp, #80	; 0x50
   1d176:	4616      	mov	r6, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   1d178:	7aca      	ldrb	r2, [r1, #11]
   1d17a:	2a07      	cmp	r2, #7
   1d17c:	d922      	bls.n	1d1c4 <bt_conn_send_cb+0x54>
   1d17e:	4605      	mov	r5, r0
   1d180:	460c      	mov	r4, r1
   1d182:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1d184:	7a83      	ldrb	r3, [r0, #10]
   1d186:	2b07      	cmp	r3, #7
   1d188:	d142      	bne.n	1d210 <bt_conn_send_cb+0xa0>
	if (cb) {
   1d18a:	2e00      	cmp	r6, #0
   1d18c:	f000 808e 	beq.w	1d2ac <bt_conn_send_cb+0x13c>
		tx = conn_tx_alloc();
   1d190:	f7ff fd58 	bl	1cc44 <conn_tx_alloc>
		if (!tx) {
   1d194:	4607      	mov	r7, r0
   1d196:	2800      	cmp	r0, #0
   1d198:	f000 808b 	beq.w	1d2b2 <bt_conn_send_cb+0x142>
		if (conn->state != BT_CONN_CONNECTED) {
   1d19c:	7aab      	ldrb	r3, [r5, #10]
   1d19e:	2b07      	cmp	r3, #7
   1d1a0:	d15c      	bne.n	1d25c <bt_conn_send_cb+0xec>
		tx->cb = cb;
   1d1a2:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   1d1a4:	f8c0 8008 	str.w	r8, [r0, #8]
		tx->pending_no_cb = 0U;
   1d1a8:	2300      	movs	r3, #0
   1d1aa:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1d1ac:	61a0      	str	r0, [r4, #24]
	tx_data(buf)->is_cont = false;
   1d1ae:	2600      	movs	r6, #0
   1d1b0:	7726      	strb	r6, [r4, #28]
	net_buf_put(&conn->tx_queue, buf);
   1d1b2:	4621      	mov	r1, r4
   1d1b4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1d1b8:	f011 fe9e 	bl	2eef8 <net_buf_put>
	return 0;
   1d1bc:	4630      	mov	r0, r6
}
   1d1be:	b014      	add	sp, #80	; 0x50
   1d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("not enough room in user_data");
   1d1c4:	4b3c      	ldr	r3, [pc, #240]	; (1d2b8 <bt_conn_send_cb+0x148>)
   1d1c6:	9313      	str	r3, [sp, #76]	; 0x4c
   1d1c8:	2302      	movs	r3, #2
   1d1ca:	f88d 3004 	strb.w	r3, [sp, #4]
   1d1ce:	2300      	movs	r3, #0
   1d1d0:	f88d 3005 	strb.w	r3, [sp, #5]
   1d1d4:	f88d 3006 	strb.w	r3, [sp, #6]
   1d1d8:	f88d 3007 	strb.w	r3, [sp, #7]
   1d1dc:	9a01      	ldr	r2, [sp, #4]
   1d1de:	9212      	str	r2, [sp, #72]	; 0x48
   1d1e0:	4619      	mov	r1, r3
   1d1e2:	f363 0100 	bfi	r1, r3, #0, #1
   1d1e6:	f363 0141 	bfi	r1, r3, #1, #1
   1d1ea:	f363 0182 	bfi	r1, r3, #2, #1
   1d1ee:	f363 01c5 	bfi	r1, r3, #3, #3
   1d1f2:	2201      	movs	r2, #1
   1d1f4:	f362 1188 	bfi	r1, r2, #6, #3
   1d1f8:	2208      	movs	r2, #8
   1d1fa:	f362 2153 	bfi	r1, r2, #9, #11
   1d1fe:	f363 511f 	bfi	r1, r3, #20, #12
   1d202:	aa12      	add	r2, sp, #72	; 0x48
   1d204:	482d      	ldr	r0, [pc, #180]	; (1d2bc <bt_conn_send_cb+0x14c>)
   1d206:	f7f6 ff79 	bl	140fc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d20a:	f06f 0015 	mvn.w	r0, #21
   1d20e:	e7d6      	b.n	1d1be <bt_conn_send_cb+0x4e>
		LOG_ERR("not connected!");
   1d210:	4b2b      	ldr	r3, [pc, #172]	; (1d2c0 <bt_conn_send_cb+0x150>)
   1d212:	930d      	str	r3, [sp, #52]	; 0x34
   1d214:	2302      	movs	r3, #2
   1d216:	f88d 3004 	strb.w	r3, [sp, #4]
   1d21a:	2300      	movs	r3, #0
   1d21c:	f88d 3005 	strb.w	r3, [sp, #5]
   1d220:	f88d 3006 	strb.w	r3, [sp, #6]
   1d224:	f88d 3007 	strb.w	r3, [sp, #7]
   1d228:	9a01      	ldr	r2, [sp, #4]
   1d22a:	920c      	str	r2, [sp, #48]	; 0x30
   1d22c:	4619      	mov	r1, r3
   1d22e:	f363 0100 	bfi	r1, r3, #0, #1
   1d232:	f363 0141 	bfi	r1, r3, #1, #1
   1d236:	f363 0182 	bfi	r1, r3, #2, #1
   1d23a:	f363 01c5 	bfi	r1, r3, #3, #3
   1d23e:	2201      	movs	r2, #1
   1d240:	f362 1188 	bfi	r1, r2, #6, #3
   1d244:	2208      	movs	r2, #8
   1d246:	f362 2153 	bfi	r1, r2, #9, #11
   1d24a:	f363 511f 	bfi	r1, r3, #20, #12
   1d24e:	aa0c      	add	r2, sp, #48	; 0x30
   1d250:	481a      	ldr	r0, [pc, #104]	; (1d2bc <bt_conn_send_cb+0x14c>)
   1d252:	f7f6 ff53 	bl	140fc <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
   1d256:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d25a:	e7b0      	b.n	1d1be <bt_conn_send_cb+0x4e>
			LOG_WRN("Disconnected while allocating context");
   1d25c:	4b19      	ldr	r3, [pc, #100]	; (1d2c4 <bt_conn_send_cb+0x154>)
   1d25e:	9307      	str	r3, [sp, #28]
   1d260:	2202      	movs	r2, #2
   1d262:	f88d 2004 	strb.w	r2, [sp, #4]
   1d266:	2300      	movs	r3, #0
   1d268:	f88d 3005 	strb.w	r3, [sp, #5]
   1d26c:	f88d 3006 	strb.w	r3, [sp, #6]
   1d270:	f88d 3007 	strb.w	r3, [sp, #7]
   1d274:	9901      	ldr	r1, [sp, #4]
   1d276:	9106      	str	r1, [sp, #24]
   1d278:	4619      	mov	r1, r3
   1d27a:	f363 0100 	bfi	r1, r3, #0, #1
   1d27e:	f363 0141 	bfi	r1, r3, #1, #1
   1d282:	f363 0182 	bfi	r1, r3, #2, #1
   1d286:	f363 01c5 	bfi	r1, r3, #3, #3
   1d28a:	f362 1188 	bfi	r1, r2, #6, #3
   1d28e:	2208      	movs	r2, #8
   1d290:	f362 2153 	bfi	r1, r2, #9, #11
   1d294:	f363 511f 	bfi	r1, r3, #20, #12
   1d298:	aa06      	add	r2, sp, #24
   1d29a:	4808      	ldr	r0, [pc, #32]	; (1d2bc <bt_conn_send_cb+0x14c>)
   1d29c:	f7f6 ff2e 	bl	140fc <z_impl_z_log_msg_static_create>
			tx_free(tx);
   1d2a0:	4638      	mov	r0, r7
   1d2a2:	f7ff fcc3 	bl	1cc2c <tx_free>
			return -ENOTCONN;
   1d2a6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d2aa:	e788      	b.n	1d1be <bt_conn_send_cb+0x4e>
		tx_data(buf)->tx = NULL;
   1d2ac:	2300      	movs	r3, #0
   1d2ae:	618b      	str	r3, [r1, #24]
   1d2b0:	e77d      	b.n	1d1ae <bt_conn_send_cb+0x3e>
			return -ENOBUFS;
   1d2b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d2b6:	e782      	b.n	1d1be <bt_conn_send_cb+0x4e>
   1d2b8:	000340ec 	.word	0x000340ec
   1d2bc:	00031ce4 	.word	0x00031ce4
   1d2c0:	0003410c 	.word	0x0003410c
   1d2c4:	0003411c 	.word	0x0003411c

0001d2c8 <bt_conn_prepare_events>:
{
   1d2c8:	b570      	push	{r4, r5, r6, lr}
   1d2ca:	4606      	mov	r6, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1d2cc:	4c0e      	ldr	r4, [pc, #56]	; (1d308 <bt_conn_prepare_events+0x40>)
   1d2ce:	4620      	mov	r0, r4
   1d2d0:	f014 fb1c 	bl	3190c <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1d2d4:	4623      	mov	r3, r4
   1d2d6:	2200      	movs	r2, #0
   1d2d8:	2101      	movs	r1, #1
   1d2da:	4630      	mov	r0, r6
   1d2dc:	f014 faef 	bl	318be <k_poll_event_init>
   1d2e0:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1d2e2:	2400      	movs	r4, #0
   1d2e4:	b10c      	cbz	r4, 1d2ea <bt_conn_prepare_events+0x22>
}
   1d2e6:	4628      	mov	r0, r5
   1d2e8:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   1d2ea:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1d2ee:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1d2f2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   1d2f6:	4b05      	ldr	r3, [pc, #20]	; (1d30c <bt_conn_prepare_events+0x44>)
   1d2f8:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1d2fc:	f010 f824 	bl	2d348 <conn_prepare_events>
   1d300:	b900      	cbnz	r0, 1d304 <bt_conn_prepare_events+0x3c>
			ev_count++;
   1d302:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1d304:	3401      	adds	r4, #1
   1d306:	e7ed      	b.n	1d2e4 <bt_conn_prepare_events+0x1c>
   1d308:	20000760 	.word	0x20000760
   1d30c:	200021e8 	.word	0x200021e8

0001d310 <bt_conn_lookup_handle>:
{
   1d310:	b508      	push	{r3, lr}
   1d312:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1d314:	2101      	movs	r1, #1
   1d316:	4802      	ldr	r0, [pc, #8]	; (1d320 <bt_conn_lookup_handle+0x10>)
   1d318:	f010 f8a6 	bl	2d468 <conn_lookup_handle>
}
   1d31c:	bd08      	pop	{r3, pc}
   1d31e:	bf00      	nop
   1d320:	200021e8 	.word	0x200021e8

0001d324 <bt_conn_set_state>:
{
   1d324:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d326:	b083      	sub	sp, #12
   1d328:	af00      	add	r7, sp, #0
   1d32a:	460d      	mov	r5, r1
	if (conn->state == state) {
   1d32c:	7a86      	ldrb	r6, [r0, #10]
   1d32e:	428e      	cmp	r6, r1
   1d330:	d014      	beq.n	1d35c <bt_conn_set_state+0x38>
   1d332:	4604      	mov	r4, r0
	conn->state = state;
   1d334:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1d336:	b916      	cbnz	r6, 1d33e <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1d338:	7883      	ldrb	r3, [r0, #2]
   1d33a:	2b08      	cmp	r3, #8
   1d33c:	d164      	bne.n	1d408 <bt_conn_set_state+0xe4>
	switch (conn->state) {
   1d33e:	7aa3      	ldrb	r3, [r4, #10]
   1d340:	2b08      	cmp	r3, #8
   1d342:	f200 8118 	bhi.w	1d576 <bt_conn_set_state+0x252>
   1d346:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d34a:	007e      	.short	0x007e
   1d34c:	00590112 	.word	0x00590112
   1d350:	00590059 	.word	0x00590059
   1d354:	00590059 	.word	0x00590059
   1d358:	00590062 	.word	0x00590062
		LOG_WRN("no transition %s", state2str(state));
   1d35c:	4608      	mov	r0, r1
   1d35e:	f7ff fbef 	bl	1cb40 <state2str>
   1d362:	466d      	mov	r5, sp
   1d364:	2300      	movs	r3, #0
   1d366:	713b      	strb	r3, [r7, #4]
   1d368:	2302      	movs	r3, #2
   1d36a:	717b      	strb	r3, [r7, #5]
   1d36c:	b088      	sub	sp, #32
   1d36e:	466c      	mov	r4, sp
   1d370:	f114 0210 	adds.w	r2, r4, #16
   1d374:	d011      	beq.n	1d39a <bt_conn_set_state+0x76>
   1d376:	260e      	movs	r6, #14
   1d378:	b11a      	cbz	r2, 1d382 <bt_conn_set_state+0x5e>
   1d37a:	2e04      	cmp	r6, #4
   1d37c:	dd01      	ble.n	1d382 <bt_conn_set_state+0x5e>
   1d37e:	4b9b      	ldr	r3, [pc, #620]	; (1d5ec <bt_conn_set_state+0x2c8>)
   1d380:	6163      	str	r3, [r4, #20]
   1d382:	2300      	movs	r3, #0
   1d384:	703b      	strb	r3, [r7, #0]
   1d386:	2302      	movs	r3, #2
   1d388:	707b      	strb	r3, [r7, #1]
   1d38a:	b19a      	cbz	r2, 1d3b4 <bt_conn_set_state+0x90>
   1d38c:	2e08      	cmp	r6, #8
   1d38e:	dd00      	ble.n	1d392 <bt_conn_set_state+0x6e>
   1d390:	61a0      	str	r0, [r4, #24]
   1d392:	f104 031c 	add.w	r3, r4, #28
   1d396:	2100      	movs	r1, #0
   1d398:	e00a      	b.n	1d3b0 <bt_conn_set_state+0x8c>
   1d39a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1d39e:	e7eb      	b.n	1d378 <bt_conn_set_state+0x54>
   1d3a0:	f101 0008 	add.w	r0, r1, #8
   1d3a4:	4438      	add	r0, r7
   1d3a6:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1d3aa:	f803 0b01 	strb.w	r0, [r3], #1
   1d3ae:	3101      	adds	r1, #1
   1d3b0:	2901      	cmp	r1, #1
   1d3b2:	d9f5      	bls.n	1d3a0 <bt_conn_set_state+0x7c>
   1d3b4:	2e0d      	cmp	r6, #13
   1d3b6:	dd24      	ble.n	1d402 <bt_conn_set_state+0xde>
   1d3b8:	230e      	movs	r3, #14
   1d3ba:	b142      	cbz	r2, 1d3ce <bt_conn_set_state+0xaa>
   1d3bc:	2103      	movs	r1, #3
   1d3be:	7139      	strb	r1, [r7, #4]
   1d3c0:	2100      	movs	r1, #0
   1d3c2:	7179      	strb	r1, [r7, #5]
   1d3c4:	71b9      	strb	r1, [r7, #6]
   1d3c6:	2101      	movs	r1, #1
   1d3c8:	71f9      	strb	r1, [r7, #7]
   1d3ca:	6878      	ldr	r0, [r7, #4]
   1d3cc:	6120      	str	r0, [r4, #16]
   1d3ce:	2100      	movs	r1, #0
   1d3d0:	f36f 0100 	bfc	r1, #0, #1
   1d3d4:	f36f 0141 	bfc	r1, #1, #1
   1d3d8:	f36f 0182 	bfc	r1, #2, #1
   1d3dc:	f36f 01c5 	bfc	r1, #3, #3
   1d3e0:	2002      	movs	r0, #2
   1d3e2:	f360 1188 	bfi	r1, r0, #6, #3
   1d3e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1d3ea:	f363 2153 	bfi	r1, r3, #9, #11
   1d3ee:	f36f 511f 	bfc	r1, #20, #12
   1d3f2:	2300      	movs	r3, #0
   1d3f4:	487e      	ldr	r0, [pc, #504]	; (1d5f0 <bt_conn_set_state+0x2cc>)
   1d3f6:	f7f6 fe81 	bl	140fc <z_impl_z_log_msg_static_create>
   1d3fa:	46ad      	mov	sp, r5
}
   1d3fc:	370c      	adds	r7, #12
   1d3fe:	46bd      	mov	sp, r7
   1d400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("no transition %s", state2str(state));
   1d402:	f06f 031b 	mvn.w	r3, #27
   1d406:	e7d8      	b.n	1d3ba <bt_conn_set_state+0x96>
			bt_conn_ref(conn);
   1d408:	f00f ffe8 	bl	2d3dc <bt_conn_ref>
   1d40c:	e797      	b.n	1d33e <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1d40e:	78a3      	ldrb	r3, [r4, #2]
   1d410:	2b04      	cmp	r3, #4
   1d412:	d0f3      	beq.n	1d3fc <bt_conn_set_state+0xd8>
		k_fifo_init(&conn->tx_queue);
   1d414:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1d418:	f013 fc9b 	bl	30d52 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1d41c:	2100      	movs	r1, #0
   1d41e:	4875      	ldr	r0, [pc, #468]	; (1d5f4 <bt_conn_set_state+0x2d0>)
   1d420:	f009 ff7c 	bl	2731c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1d424:	2300      	movs	r3, #0
   1d426:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1d428:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   1d42a:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d42c:	2b01      	cmp	r3, #1
   1d42e:	d1e5      	bne.n	1d3fc <bt_conn_set_state+0xd8>
			conn->le.conn_param_retry_countdown =
   1d430:	2303      	movs	r3, #3
   1d432:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1d436:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1d43a:	2300      	movs	r3, #0
   1d43c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1d440:	f009 f900 	bl	26644 <k_work_schedule>
   1d444:	e7da      	b.n	1d3fc <bt_conn_set_state+0xd8>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1d446:	78a3      	ldrb	r3, [r4, #2]
   1d448:	2b04      	cmp	r3, #4
   1d44a:	d008      	beq.n	1d45e <bt_conn_set_state+0x13a>
		switch (old_state) {
   1d44c:	2e08      	cmp	r6, #8
   1d44e:	d8d5      	bhi.n	1d3fc <bt_conn_set_state+0xd8>
   1d450:	e8df f006 	tbb	[pc, r6]
   1d454:	4b370953 	.word	0x4b370953
   1d458:	532d414f 	.word	0x532d414f
   1d45c:	53          	.byte	0x53
   1d45d:	00          	.byte	0x00
			bt_conn_unref(conn);
   1d45e:	4620      	mov	r0, r4
   1d460:	f00f ffe3 	bl	2d42a <bt_conn_unref>
			break;
   1d464:	e7ca      	b.n	1d3fc <bt_conn_set_state+0xd8>
			tx_notify(conn);
   1d466:	4620      	mov	r0, r4
   1d468:	f00f fe83 	bl	2d172 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1d46c:	78a3      	ldrb	r3, [r4, #2]
   1d46e:	2b01      	cmp	r3, #1
   1d470:	d011      	beq.n	1d496 <bt_conn_set_state+0x172>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1d472:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d474:	f3bf 8f5b 	dmb	ish
   1d478:	e854 3f00 	ldrex	r3, [r4]
   1d47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d480:	e844 3200 	strex	r2, r3, [r4]
   1d484:	2a00      	cmp	r2, #0
   1d486:	d1f7      	bne.n	1d478 <bt_conn_set_state+0x154>
   1d488:	f3bf 8f5b 	dmb	ish
   1d48c:	2100      	movs	r1, #0
   1d48e:	4859      	ldr	r0, [pc, #356]	; (1d5f4 <bt_conn_set_state+0x2d0>)
   1d490:	f009 ff44 	bl	2731c <z_impl_k_poll_signal_raise>
   1d494:	e7b2      	b.n	1d3fc <bt_conn_set_state+0xd8>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1d496:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1d49a:	4628      	mov	r0, r5
   1d49c:	f013 fda3 	bl	30fe6 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1d4a0:	f010 0f0c 	tst.w	r0, #12
   1d4a4:	d0e5      	beq.n	1d472 <bt_conn_set_state+0x14e>
				k_work_cancel_delayable(&conn->deferred_work);
   1d4a6:	4628      	mov	r0, r5
   1d4a8:	f013 fde4 	bl	31074 <k_work_cancel_delayable>
   1d4ac:	e7e1      	b.n	1d472 <bt_conn_set_state+0x14e>
			if (conn->err) {
   1d4ae:	7a63      	ldrb	r3, [r4, #9]
   1d4b0:	b91b      	cbnz	r3, 1d4ba <bt_conn_set_state+0x196>
			bt_conn_unref(conn);
   1d4b2:	4620      	mov	r0, r4
   1d4b4:	f00f ffb9 	bl	2d42a <bt_conn_unref>
			break;
   1d4b8:	e7a0      	b.n	1d3fc <bt_conn_set_state+0xd8>
				notify_connected(conn);
   1d4ba:	4620      	mov	r0, r4
   1d4bc:	f7ff fb72 	bl	1cba4 <notify_connected>
   1d4c0:	e7f7      	b.n	1d4b2 <bt_conn_set_state+0x18e>
			if (conn->err) {
   1d4c2:	7a63      	ldrb	r3, [r4, #9]
   1d4c4:	b91b      	cbnz	r3, 1d4ce <bt_conn_set_state+0x1aa>
			bt_conn_unref(conn);
   1d4c6:	4620      	mov	r0, r4
   1d4c8:	f00f ffaf 	bl	2d42a <bt_conn_unref>
			break;
   1d4cc:	e796      	b.n	1d3fc <bt_conn_set_state+0xd8>
				notify_connected(conn);
   1d4ce:	4620      	mov	r0, r4
   1d4d0:	f7ff fb68 	bl	1cba4 <notify_connected>
   1d4d4:	e7f7      	b.n	1d4c6 <bt_conn_set_state+0x1a2>
			if (conn->err) {
   1d4d6:	7a63      	ldrb	r3, [r4, #9]
   1d4d8:	b91b      	cbnz	r3, 1d4e2 <bt_conn_set_state+0x1be>
			bt_conn_unref(conn);
   1d4da:	4620      	mov	r0, r4
   1d4dc:	f00f ffa5 	bl	2d42a <bt_conn_unref>
			break;
   1d4e0:	e78c      	b.n	1d3fc <bt_conn_set_state+0xd8>
				notify_connected(conn);
   1d4e2:	4620      	mov	r0, r4
   1d4e4:	f7ff fb5e 	bl	1cba4 <notify_connected>
   1d4e8:	e7f7      	b.n	1d4da <bt_conn_set_state+0x1b6>
			bt_conn_unref(conn);
   1d4ea:	4620      	mov	r0, r4
   1d4ec:	f00f ff9d 	bl	2d42a <bt_conn_unref>
			break;
   1d4f0:	e784      	b.n	1d3fc <bt_conn_set_state+0xd8>
			bt_conn_unref(conn);
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f00f ff99 	bl	2d42a <bt_conn_unref>
			break;
   1d4f8:	e780      	b.n	1d3fc <bt_conn_set_state+0xd8>
			LOG_WRN("Invalid (%u) old state", state);
   1d4fa:	466e      	mov	r6, sp
   1d4fc:	b088      	sub	sp, #32
   1d4fe:	466b      	mov	r3, sp
   1d500:	f113 0210 	adds.w	r2, r3, #16
   1d504:	d02d      	beq.n	1d562 <bt_conn_set_state+0x23e>
   1d506:	210c      	movs	r1, #12
   1d508:	b13a      	cbz	r2, 1d51a <bt_conn_set_state+0x1f6>
   1d50a:	4608      	mov	r0, r1
   1d50c:	2904      	cmp	r1, #4
   1d50e:	dd01      	ble.n	1d514 <bt_conn_set_state+0x1f0>
   1d510:	4c39      	ldr	r4, [pc, #228]	; (1d5f8 <bt_conn_set_state+0x2d4>)
   1d512:	615c      	str	r4, [r3, #20]
   1d514:	2808      	cmp	r0, #8
   1d516:	dd00      	ble.n	1d51a <bt_conn_set_state+0x1f6>
   1d518:	619d      	str	r5, [r3, #24]
   1d51a:	290b      	cmp	r1, #11
   1d51c:	dd24      	ble.n	1d568 <bt_conn_set_state+0x244>
   1d51e:	240c      	movs	r4, #12
   1d520:	b13a      	cbz	r2, 1d532 <bt_conn_set_state+0x20e>
   1d522:	2103      	movs	r1, #3
   1d524:	7139      	strb	r1, [r7, #4]
   1d526:	2100      	movs	r1, #0
   1d528:	7179      	strb	r1, [r7, #5]
   1d52a:	71b9      	strb	r1, [r7, #6]
   1d52c:	71f9      	strb	r1, [r7, #7]
   1d52e:	6878      	ldr	r0, [r7, #4]
   1d530:	6118      	str	r0, [r3, #16]
   1d532:	2100      	movs	r1, #0
   1d534:	f36f 0100 	bfc	r1, #0, #1
   1d538:	f36f 0141 	bfc	r1, #1, #1
   1d53c:	f36f 0182 	bfc	r1, #2, #1
   1d540:	f36f 01c5 	bfc	r1, #3, #3
   1d544:	2302      	movs	r3, #2
   1d546:	f363 1188 	bfi	r1, r3, #6, #3
   1d54a:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1d54e:	f363 2153 	bfi	r1, r3, #9, #11
   1d552:	f36f 511f 	bfc	r1, #20, #12
   1d556:	2300      	movs	r3, #0
   1d558:	4825      	ldr	r0, [pc, #148]	; (1d5f0 <bt_conn_set_state+0x2cc>)
   1d55a:	f7f6 fdcf 	bl	140fc <z_impl_z_log_msg_static_create>
   1d55e:	46b5      	mov	sp, r6
   1d560:	e74c      	b.n	1d3fc <bt_conn_set_state+0xd8>
   1d562:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d566:	e7cf      	b.n	1d508 <bt_conn_set_state+0x1e4>
   1d568:	f06f 041b 	mvn.w	r4, #27
   1d56c:	e7d8      	b.n	1d520 <bt_conn_set_state+0x1fc>
		process_unack_tx(conn);
   1d56e:	4620      	mov	r0, r4
   1d570:	f00f fe7e 	bl	2d270 <process_unack_tx>
		break;
   1d574:	e742      	b.n	1d3fc <bt_conn_set_state+0xd8>
		LOG_WRN("no valid (%u) state was set", state);
   1d576:	466e      	mov	r6, sp
   1d578:	b088      	sub	sp, #32
   1d57a:	466b      	mov	r3, sp
   1d57c:	f113 0210 	adds.w	r2, r3, #16
   1d580:	d12e      	bne.n	1d5e0 <bt_conn_set_state+0x2bc>
   1d582:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d586:	b13a      	cbz	r2, 1d598 <bt_conn_set_state+0x274>
   1d588:	4608      	mov	r0, r1
   1d58a:	2904      	cmp	r1, #4
   1d58c:	dd01      	ble.n	1d592 <bt_conn_set_state+0x26e>
   1d58e:	4c1b      	ldr	r4, [pc, #108]	; (1d5fc <bt_conn_set_state+0x2d8>)
   1d590:	615c      	str	r4, [r3, #20]
   1d592:	2808      	cmp	r0, #8
   1d594:	dd00      	ble.n	1d598 <bt_conn_set_state+0x274>
   1d596:	619d      	str	r5, [r3, #24]
   1d598:	290b      	cmp	r1, #11
   1d59a:	dd23      	ble.n	1d5e4 <bt_conn_set_state+0x2c0>
   1d59c:	240c      	movs	r4, #12
   1d59e:	b13a      	cbz	r2, 1d5b0 <bt_conn_set_state+0x28c>
   1d5a0:	2103      	movs	r1, #3
   1d5a2:	7139      	strb	r1, [r7, #4]
   1d5a4:	2100      	movs	r1, #0
   1d5a6:	7179      	strb	r1, [r7, #5]
   1d5a8:	71b9      	strb	r1, [r7, #6]
   1d5aa:	71f9      	strb	r1, [r7, #7]
   1d5ac:	6878      	ldr	r0, [r7, #4]
   1d5ae:	6118      	str	r0, [r3, #16]
   1d5b0:	2100      	movs	r1, #0
   1d5b2:	f36f 0100 	bfc	r1, #0, #1
   1d5b6:	f36f 0141 	bfc	r1, #1, #1
   1d5ba:	f36f 0182 	bfc	r1, #2, #1
   1d5be:	f36f 01c5 	bfc	r1, #3, #3
   1d5c2:	2302      	movs	r3, #2
   1d5c4:	f363 1188 	bfi	r1, r3, #6, #3
   1d5c8:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1d5cc:	f364 2153 	bfi	r1, r4, #9, #11
   1d5d0:	f36f 511f 	bfc	r1, #20, #12
   1d5d4:	2300      	movs	r3, #0
   1d5d6:	4806      	ldr	r0, [pc, #24]	; (1d5f0 <bt_conn_set_state+0x2cc>)
   1d5d8:	f7f6 fd90 	bl	140fc <z_impl_z_log_msg_static_create>
   1d5dc:	46b5      	mov	sp, r6
   1d5de:	e70d      	b.n	1d3fc <bt_conn_set_state+0xd8>
   1d5e0:	210c      	movs	r1, #12
   1d5e2:	e7d0      	b.n	1d586 <bt_conn_set_state+0x262>
   1d5e4:	f06f 041b 	mvn.w	r4, #27
   1d5e8:	e7d9      	b.n	1d59e <bt_conn_set_state+0x27a>
   1d5ea:	bf00      	nop
   1d5ec:	00034144 	.word	0x00034144
   1d5f0:	00031ce4 	.word	0x00031ce4
   1d5f4:	20000760 	.word	0x20000760
   1d5f8:	00034158 	.word	0x00034158
   1d5fc:	00034170 	.word	0x00034170

0001d600 <bt_conn_index>:
		index = conn - acl_conns;
   1d600:	4b03      	ldr	r3, [pc, #12]	; (1d610 <bt_conn_index+0x10>)
   1d602:	1ac0      	subs	r0, r0, r3
   1d604:	1180      	asrs	r0, r0, #6
   1d606:	4b03      	ldr	r3, [pc, #12]	; (1d614 <bt_conn_index+0x14>)
   1d608:	fb03 f000 	mul.w	r0, r3, r0
}
   1d60c:	b2c0      	uxtb	r0, r0
   1d60e:	4770      	bx	lr
   1d610:	200021e8 	.word	0x200021e8
   1d614:	aaaaaaab 	.word	0xaaaaaaab

0001d618 <bt_conn_create_pdu_timeout>:
{
   1d618:	b530      	push	{r4, r5, lr}
   1d61a:	b089      	sub	sp, #36	; 0x24
   1d61c:	460c      	mov	r4, r1
	if (!pool) {
   1d61e:	4601      	mov	r1, r0
   1d620:	b158      	cbz	r0, 1d63a <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
   1d622:	4608      	mov	r0, r1
   1d624:	f011 fc2f 	bl	2ee86 <net_buf_alloc_fixed>
	if (!buf) {
   1d628:	4605      	mov	r5, r0
   1d62a:	b140      	cbz	r0, 1d63e <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   1d62c:	1d21      	adds	r1, r4, #4
   1d62e:	300c      	adds	r0, #12
   1d630:	f011 fcad 	bl	2ef8e <net_buf_simple_reserve>
}
   1d634:	4628      	mov	r0, r5
   1d636:	b009      	add	sp, #36	; 0x24
   1d638:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
   1d63a:	4912      	ldr	r1, [pc, #72]	; (1d684 <bt_conn_create_pdu_timeout+0x6c>)
   1d63c:	e7f1      	b.n	1d622 <bt_conn_create_pdu_timeout+0xa>
		LOG_WRN("Unable to allocate buffer within timeout");
   1d63e:	4b12      	ldr	r3, [pc, #72]	; (1d688 <bt_conn_create_pdu_timeout+0x70>)
   1d640:	9307      	str	r3, [sp, #28]
   1d642:	2202      	movs	r2, #2
   1d644:	f88d 2004 	strb.w	r2, [sp, #4]
   1d648:	2300      	movs	r3, #0
   1d64a:	f88d 3005 	strb.w	r3, [sp, #5]
   1d64e:	f88d 3006 	strb.w	r3, [sp, #6]
   1d652:	f88d 3007 	strb.w	r3, [sp, #7]
   1d656:	9901      	ldr	r1, [sp, #4]
   1d658:	9106      	str	r1, [sp, #24]
   1d65a:	4619      	mov	r1, r3
   1d65c:	f363 0100 	bfi	r1, r3, #0, #1
   1d660:	f363 0141 	bfi	r1, r3, #1, #1
   1d664:	f363 0182 	bfi	r1, r3, #2, #1
   1d668:	f363 01c5 	bfi	r1, r3, #3, #3
   1d66c:	f362 1188 	bfi	r1, r2, #6, #3
   1d670:	2208      	movs	r2, #8
   1d672:	f362 2153 	bfi	r1, r2, #9, #11
   1d676:	f363 511f 	bfi	r1, r3, #20, #12
   1d67a:	aa06      	add	r2, sp, #24
   1d67c:	4803      	ldr	r0, [pc, #12]	; (1d68c <bt_conn_create_pdu_timeout+0x74>)
   1d67e:	f7f6 fd3d 	bl	140fc <z_impl_z_log_msg_static_create>
		return NULL;
   1d682:	e7d7      	b.n	1d634 <bt_conn_create_pdu_timeout+0x1c>
   1d684:	20000b60 	.word	0x20000b60
   1d688:	0003418c 	.word	0x0003418c
   1d68c:	00031ce4 	.word	0x00031ce4

0001d690 <notify_le_param_updated>:
{
   1d690:	b570      	push	{r4, r5, r6, lr}
   1d692:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1d694:	1d05      	adds	r5, r0, #4
   1d696:	2109      	movs	r1, #9
   1d698:	4628      	mov	r0, r5
   1d69a:	f00f fdbb 	bl	2d214 <atomic_test_bit>
   1d69e:	b178      	cbz	r0, 1d6c0 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   1d6a0:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
   1d6a4:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1d6a8:	4293      	cmp	r3, r2
   1d6aa:	d309      	bcc.n	1d6c0 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   1d6ac:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1d6b0:	4293      	cmp	r3, r2
   1d6b2:	d805      	bhi.n	1d6c0 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   1d6b4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   1d6b8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d6bc:	429a      	cmp	r2, r3
   1d6be:	d002      	beq.n	1d6c6 <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   1d6c0:	4b18      	ldr	r3, [pc, #96]	; (1d724 <notify_le_param_updated+0x94>)
   1d6c2:	681d      	ldr	r5, [r3, #0]
   1d6c4:	e015      	b.n	1d6f2 <notify_le_param_updated+0x62>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d6c6:	f3bf 8f5b 	dmb	ish
   1d6ca:	e855 3f00 	ldrex	r3, [r5]
   1d6ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1d6d2:	e845 3200 	strex	r2, r3, [r5]
   1d6d6:	2a00      	cmp	r2, #0
   1d6d8:	d1f7      	bne.n	1d6ca <notify_le_param_updated+0x3a>
   1d6da:	f3bf 8f5b 	dmb	ish
}
   1d6de:	e7ef      	b.n	1d6c0 <notify_le_param_updated+0x30>
			cb->le_param_updated(conn, conn->le.interval,
   1d6e0:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1d6e4:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1d6e8:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1d6ec:	4620      	mov	r0, r4
   1d6ee:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1d6f0:	692d      	ldr	r5, [r5, #16]
   1d6f2:	b11d      	cbz	r5, 1d6fc <notify_le_param_updated+0x6c>
		if (cb->le_param_updated) {
   1d6f4:	68ee      	ldr	r6, [r5, #12]
   1d6f6:	2e00      	cmp	r6, #0
   1d6f8:	d1f2      	bne.n	1d6e0 <notify_le_param_updated+0x50>
   1d6fa:	e7f9      	b.n	1d6f0 <notify_le_param_updated+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1d6fc:	4d0a      	ldr	r5, [pc, #40]	; (1d728 <notify_le_param_updated+0x98>)
   1d6fe:	e000      	b.n	1d702 <notify_le_param_updated+0x72>
   1d700:	3514      	adds	r5, #20
   1d702:	4b0a      	ldr	r3, [pc, #40]	; (1d72c <notify_le_param_updated+0x9c>)
   1d704:	429d      	cmp	r5, r3
   1d706:	d20b      	bcs.n	1d720 <notify_le_param_updated+0x90>
		if (cb->le_param_updated) {
   1d708:	68ee      	ldr	r6, [r5, #12]
   1d70a:	2e00      	cmp	r6, #0
   1d70c:	d0f8      	beq.n	1d700 <notify_le_param_updated+0x70>
			cb->le_param_updated(conn, conn->le.interval,
   1d70e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1d712:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1d716:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1d71a:	4620      	mov	r0, r4
   1d71c:	47b0      	blx	r6
   1d71e:	e7ef      	b.n	1d700 <notify_le_param_updated+0x70>
}
   1d720:	bd70      	pop	{r4, r5, r6, pc}
   1d722:	bf00      	nop
   1d724:	20003f8c 	.word	0x20003f8c
   1d728:	00031ca4 	.word	0x00031ca4
   1d72c:	00031ca4 	.word	0x00031ca4

0001d730 <le_param_req>:
{
   1d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d732:	4606      	mov	r6, r0
   1d734:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1d736:	4608      	mov	r0, r1
   1d738:	f00f fab0 	bl	2cc9c <bt_le_conn_params_valid>
   1d73c:	4607      	mov	r7, r0
   1d73e:	b338      	cbz	r0, 1d790 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   1d740:	4b15      	ldr	r3, [pc, #84]	; (1d798 <le_param_req+0x68>)
   1d742:	681c      	ldr	r4, [r3, #0]
   1d744:	e000      	b.n	1d748 <le_param_req+0x18>
   1d746:	6924      	ldr	r4, [r4, #16]
   1d748:	b16c      	cbz	r4, 1d766 <le_param_req+0x36>
		if (!cb->le_param_req) {
   1d74a:	68a3      	ldr	r3, [r4, #8]
   1d74c:	2b00      	cmp	r3, #0
   1d74e:	d0fa      	beq.n	1d746 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   1d750:	4629      	mov	r1, r5
   1d752:	4630      	mov	r0, r6
   1d754:	4798      	blx	r3
   1d756:	b1d0      	cbz	r0, 1d78e <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   1d758:	4628      	mov	r0, r5
   1d75a:	f00f fa9f 	bl	2cc9c <bt_le_conn_params_valid>
   1d75e:	2800      	cmp	r0, #0
   1d760:	d1f1      	bne.n	1d746 <le_param_req+0x16>
			return false;
   1d762:	4607      	mov	r7, r0
   1d764:	e014      	b.n	1d790 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1d766:	4c0d      	ldr	r4, [pc, #52]	; (1d79c <le_param_req+0x6c>)
   1d768:	e000      	b.n	1d76c <le_param_req+0x3c>
   1d76a:	3414      	adds	r4, #20
   1d76c:	4b0c      	ldr	r3, [pc, #48]	; (1d7a0 <le_param_req+0x70>)
   1d76e:	429c      	cmp	r4, r3
   1d770:	d20e      	bcs.n	1d790 <le_param_req+0x60>
		if (!cb->le_param_req) {
   1d772:	68a3      	ldr	r3, [r4, #8]
   1d774:	2b00      	cmp	r3, #0
   1d776:	d0f8      	beq.n	1d76a <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   1d778:	4629      	mov	r1, r5
   1d77a:	4630      	mov	r0, r6
   1d77c:	4798      	blx	r3
   1d77e:	b148      	cbz	r0, 1d794 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   1d780:	4628      	mov	r0, r5
   1d782:	f00f fa8b 	bl	2cc9c <bt_le_conn_params_valid>
   1d786:	2800      	cmp	r0, #0
   1d788:	d1ef      	bne.n	1d76a <le_param_req+0x3a>
			return false;
   1d78a:	4607      	mov	r7, r0
   1d78c:	e000      	b.n	1d790 <le_param_req+0x60>
			return false;
   1d78e:	4607      	mov	r7, r0
}
   1d790:	4638      	mov	r0, r7
   1d792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1d794:	4607      	mov	r7, r0
   1d796:	e7fb      	b.n	1d790 <le_param_req+0x60>
   1d798:	20003f8c 	.word	0x20003f8c
   1d79c:	00031ca4 	.word	0x00031ca4
   1d7a0:	00031ca4 	.word	0x00031ca4

0001d7a4 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1d7a4:	4b02      	ldr	r3, [pc, #8]	; (1d7b0 <bt_conn_cb_register+0xc>)
   1d7a6:	681a      	ldr	r2, [r3, #0]
   1d7a8:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1d7aa:	6018      	str	r0, [r3, #0]
}
   1d7ac:	4770      	bx	lr
   1d7ae:	bf00      	nop
   1d7b0:	20003f8c 	.word	0x20003f8c

0001d7b4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7b6:	4607      	mov	r7, r0
   1d7b8:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1d7ba:	2400      	movs	r4, #0
   1d7bc:	b114      	cbz	r4, 1d7c4 <bt_conn_lookup_addr_le+0x10>
		}

		return conn;
	}

	return NULL;
   1d7be:	2500      	movs	r5, #0
}
   1d7c0:	4628      	mov	r0, r5
   1d7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1d7c4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1d7c8:	480b      	ldr	r0, [pc, #44]	; (1d7f8 <bt_conn_lookup_addr_le+0x44>)
   1d7ca:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1d7ce:	f00f fe05 	bl	2d3dc <bt_conn_ref>
		if (!conn) {
   1d7d2:	4605      	mov	r5, r0
   1d7d4:	b170      	cbz	r0, 1d7f4 <bt_conn_lookup_addr_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
   1d7d6:	7883      	ldrb	r3, [r0, #2]
   1d7d8:	2b01      	cmp	r3, #1
   1d7da:	d109      	bne.n	1d7f0 <bt_conn_lookup_addr_le+0x3c>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1d7dc:	4632      	mov	r2, r6
   1d7de:	4639      	mov	r1, r7
   1d7e0:	f00f fe8d 	bl	2d4fe <bt_conn_is_peer_addr_le>
   1d7e4:	2800      	cmp	r0, #0
   1d7e6:	d1eb      	bne.n	1d7c0 <bt_conn_lookup_addr_le+0xc>
			bt_conn_unref(conn);
   1d7e8:	4628      	mov	r0, r5
   1d7ea:	f00f fe1e 	bl	2d42a <bt_conn_unref>
			continue;
   1d7ee:	e001      	b.n	1d7f4 <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
   1d7f0:	f00f fe1b 	bl	2d42a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1d7f4:	3401      	adds	r4, #1
   1d7f6:	e7e1      	b.n	1d7bc <bt_conn_lookup_addr_le+0x8>
   1d7f8:	200021e8 	.word	0x200021e8

0001d7fc <bt_conn_exists_le>:
{
   1d7fc:	b5b0      	push	{r4, r5, r7, lr}
   1d7fe:	b082      	sub	sp, #8
   1d800:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1d802:	f7ff ffd7 	bl	1d7b4 <bt_conn_lookup_addr_le>
	if (conn) {
   1d806:	2800      	cmp	r0, #0
   1d808:	d061      	beq.n	1d8ce <bt_conn_exists_le+0xd2>
   1d80a:	4604      	mov	r4, r0
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1d80c:	7a80      	ldrb	r0, [r0, #10]
   1d80e:	f7ff f997 	bl	1cb40 <state2str>
   1d812:	466d      	mov	r5, sp
   1d814:	2300      	movs	r3, #0
   1d816:	713b      	strb	r3, [r7, #4]
   1d818:	2302      	movs	r3, #2
   1d81a:	717b      	strb	r3, [r7, #5]
   1d81c:	b088      	sub	sp, #32
   1d81e:	46ec      	mov	ip, sp
   1d820:	f11c 0210 	adds.w	r2, ip, #16
   1d824:	d016      	beq.n	1d854 <bt_conn_exists_le+0x58>
   1d826:	f04f 0e0e 	mov.w	lr, #14
   1d82a:	b12a      	cbz	r2, 1d838 <bt_conn_exists_le+0x3c>
   1d82c:	f1be 0f04 	cmp.w	lr, #4
   1d830:	dd02      	ble.n	1d838 <bt_conn_exists_le+0x3c>
   1d832:	4b28      	ldr	r3, [pc, #160]	; (1d8d4 <bt_conn_exists_le+0xd8>)
   1d834:	f8cc 3014 	str.w	r3, [ip, #20]
   1d838:	2300      	movs	r3, #0
   1d83a:	703b      	strb	r3, [r7, #0]
   1d83c:	2302      	movs	r3, #2
   1d83e:	707b      	strb	r3, [r7, #1]
   1d840:	b1aa      	cbz	r2, 1d86e <bt_conn_exists_le+0x72>
   1d842:	f1be 0f08 	cmp.w	lr, #8
   1d846:	dd01      	ble.n	1d84c <bt_conn_exists_le+0x50>
   1d848:	f8cc 0018 	str.w	r0, [ip, #24]
   1d84c:	f10c 031c 	add.w	r3, ip, #28
   1d850:	2100      	movs	r1, #0
   1d852:	e00a      	b.n	1d86a <bt_conn_exists_le+0x6e>
   1d854:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1d858:	e7e7      	b.n	1d82a <bt_conn_exists_le+0x2e>
   1d85a:	f101 0008 	add.w	r0, r1, #8
   1d85e:	4438      	add	r0, r7
   1d860:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1d864:	f803 0b01 	strb.w	r0, [r3], #1
   1d868:	3101      	adds	r1, #1
   1d86a:	2901      	cmp	r1, #1
   1d86c:	d9f5      	bls.n	1d85a <bt_conn_exists_le+0x5e>
   1d86e:	f1be 0f0d 	cmp.w	lr, #13
   1d872:	dd29      	ble.n	1d8c8 <bt_conn_exists_le+0xcc>
   1d874:	230e      	movs	r3, #14
   1d876:	b14a      	cbz	r2, 1d88c <bt_conn_exists_le+0x90>
   1d878:	2103      	movs	r1, #3
   1d87a:	7139      	strb	r1, [r7, #4]
   1d87c:	2100      	movs	r1, #0
   1d87e:	7179      	strb	r1, [r7, #5]
   1d880:	71b9      	strb	r1, [r7, #6]
   1d882:	2101      	movs	r1, #1
   1d884:	71f9      	strb	r1, [r7, #7]
   1d886:	6878      	ldr	r0, [r7, #4]
   1d888:	f8cc 0010 	str.w	r0, [ip, #16]
   1d88c:	2100      	movs	r1, #0
   1d88e:	f36f 0100 	bfc	r1, #0, #1
   1d892:	f36f 0141 	bfc	r1, #1, #1
   1d896:	f36f 0182 	bfc	r1, #2, #1
   1d89a:	f36f 01c5 	bfc	r1, #3, #3
   1d89e:	2002      	movs	r0, #2
   1d8a0:	f360 1188 	bfi	r1, r0, #6, #3
   1d8a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1d8a8:	f363 2153 	bfi	r1, r3, #9, #11
   1d8ac:	f36f 511f 	bfc	r1, #20, #12
   1d8b0:	2300      	movs	r3, #0
   1d8b2:	4809      	ldr	r0, [pc, #36]	; (1d8d8 <bt_conn_exists_le+0xdc>)
   1d8b4:	f7f6 fc22 	bl	140fc <z_impl_z_log_msg_static_create>
   1d8b8:	46ad      	mov	sp, r5
		bt_conn_unref(conn);
   1d8ba:	4620      	mov	r0, r4
   1d8bc:	f00f fdb5 	bl	2d42a <bt_conn_unref>
		return true;
   1d8c0:	2001      	movs	r0, #1
}
   1d8c2:	3708      	adds	r7, #8
   1d8c4:	46bd      	mov	sp, r7
   1d8c6:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1d8c8:	f06f 031b 	mvn.w	r3, #27
   1d8cc:	e7d3      	b.n	1d876 <bt_conn_exists_le+0x7a>
	return false;
   1d8ce:	2000      	movs	r0, #0
   1d8d0:	e7f7      	b.n	1d8c2 <bt_conn_exists_le+0xc6>
   1d8d2:	bf00      	nop
   1d8d4:	000341b8 	.word	0x000341b8
   1d8d8:	00031ce4 	.word	0x00031ce4

0001d8dc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8e0:	4607      	mov	r7, r0
   1d8e2:	460e      	mov	r6, r1
   1d8e4:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1d8e6:	2400      	movs	r4, #0
   1d8e8:	b11c      	cbz	r4, 1d8f2 <bt_conn_lookup_state_le+0x16>
		}

		return conn;
	}

	return NULL;
   1d8ea:	2500      	movs	r5, #0
}
   1d8ec:	4628      	mov	r0, r5
   1d8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1d8f2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1d8f6:	4b11      	ldr	r3, [pc, #68]	; (1d93c <bt_conn_lookup_state_le+0x60>)
   1d8f8:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1d8fc:	f00f fd6e 	bl	2d3dc <bt_conn_ref>
		if (!conn) {
   1d900:	4605      	mov	r5, r0
   1d902:	b188      	cbz	r0, 1d928 <bt_conn_lookup_state_le+0x4c>
		if (conn->type != BT_CONN_TYPE_LE) {
   1d904:	7883      	ldrb	r3, [r0, #2]
   1d906:	2b01      	cmp	r3, #1
   1d908:	d110      	bne.n	1d92c <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1d90a:	b126      	cbz	r6, 1d916 <bt_conn_lookup_state_le+0x3a>
   1d90c:	4632      	mov	r2, r6
   1d90e:	4639      	mov	r1, r7
   1d910:	f00f fdf5 	bl	2d4fe <bt_conn_is_peer_addr_le>
   1d914:	b168      	cbz	r0, 1d932 <bt_conn_lookup_state_le+0x56>
		if (!(conn->state == state && conn->id == id)) {
   1d916:	7aab      	ldrb	r3, [r5, #10]
   1d918:	4543      	cmp	r3, r8
   1d91a:	d102      	bne.n	1d922 <bt_conn_lookup_state_le+0x46>
   1d91c:	7a2b      	ldrb	r3, [r5, #8]
   1d91e:	42bb      	cmp	r3, r7
   1d920:	d0e4      	beq.n	1d8ec <bt_conn_lookup_state_le+0x10>
			bt_conn_unref(conn);
   1d922:	4628      	mov	r0, r5
   1d924:	f00f fd81 	bl	2d42a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1d928:	3401      	adds	r4, #1
   1d92a:	e7dd      	b.n	1d8e8 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   1d92c:	f00f fd7d 	bl	2d42a <bt_conn_unref>
			continue;
   1d930:	e7fa      	b.n	1d928 <bt_conn_lookup_state_le+0x4c>
			bt_conn_unref(conn);
   1d932:	4628      	mov	r0, r5
   1d934:	f00f fd79 	bl	2d42a <bt_conn_unref>
			continue;
   1d938:	e7f6      	b.n	1d928 <bt_conn_lookup_state_le+0x4c>
   1d93a:	bf00      	nop
   1d93c:	200021e8 	.word	0x200021e8

0001d940 <send_conn_le_param_update>:
{
   1d940:	b538      	push	{r3, r4, r5, lr}
   1d942:	4604      	mov	r4, r0
   1d944:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1d946:	4608      	mov	r0, r1
   1d948:	f00f f9a8 	bl	2cc9c <bt_le_conn_params_valid>
   1d94c:	b350      	cbz	r0, 1d9a4 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1d94e:	4b17      	ldr	r3, [pc, #92]	; (1d9ac <send_conn_le_param_update+0x6c>)
   1d950:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   1d954:	f013 0f02 	tst.w	r3, #2
   1d958:	d004      	beq.n	1d964 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1d95a:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1d95e:	f013 0f02 	tst.w	r3, #2
   1d962:	d113      	bne.n	1d98c <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1d964:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1d966:	b9c3      	cbnz	r3, 1d99a <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   1d968:	4629      	mov	r1, r5
   1d96a:	4620      	mov	r0, r4
   1d96c:	f00f fdee 	bl	2d54c <bt_conn_le_conn_update>
		if (rc == 0) {
   1d970:	b9b8      	cbnz	r0, 1d9a2 <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   1d972:	882b      	ldrh	r3, [r5, #0]
   1d974:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1d978:	886b      	ldrh	r3, [r5, #2]
   1d97a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1d97e:	88ab      	ldrh	r3, [r5, #4]
   1d980:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1d984:	88eb      	ldrh	r3, [r5, #6]
   1d986:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1d98a:	e00a      	b.n	1d9a2 <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1d98c:	210a      	movs	r1, #10
   1d98e:	1d20      	adds	r0, r4, #4
   1d990:	f00f fc40 	bl	2d214 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1d994:	2800      	cmp	r0, #0
   1d996:	d1e5      	bne.n	1d964 <send_conn_le_param_update+0x24>
   1d998:	e7e6      	b.n	1d968 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1d99a:	4629      	mov	r1, r5
   1d99c:	4620      	mov	r0, r4
   1d99e:	f00f feb7 	bl	2d710 <bt_l2cap_update_conn_param>
}
   1d9a2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d9a4:	f06f 0015 	mvn.w	r0, #21
   1d9a8:	e7fb      	b.n	1d9a2 <send_conn_le_param_update+0x62>
   1d9aa:	bf00      	nop
   1d9ac:	20000438 	.word	0x20000438

0001d9b0 <deferred_work>:
{
   1d9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9b2:	b087      	sub	sp, #28
   1d9b4:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1d9b6:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1d9ba:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1d9be:	2b00      	cmp	r3, #0
   1d9c0:	d056      	beq.n	1da70 <deferred_work+0xc0>
   1d9c2:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1d9c4:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1d9c8:	2b01      	cmp	r3, #1
   1d9ca:	d173      	bne.n	1dab4 <deferred_work+0x104>
	if (atomic_test_and_clear_bit(conn->flags,
   1d9cc:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1d9d0:	2109      	movs	r1, #9
   1d9d2:	4630      	mov	r0, r6
   1d9d4:	f00f fc02 	bl	2d1dc <atomic_test_and_clear_bit>
   1d9d8:	2800      	cmp	r0, #0
   1d9da:	d074      	beq.n	1dac6 <deferred_work+0x116>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1d9dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1d9e0:	813b      	strh	r3, [r7, #8]
   1d9e2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1d9e6:	817b      	strh	r3, [r7, #10]
   1d9e8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1d9ec:	81bb      	strh	r3, [r7, #12]
   1d9ee:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1d9f2:	81fb      	strh	r3, [r7, #14]
		err = send_conn_le_param_update(conn, param);
   1d9f4:	f107 0108 	add.w	r1, r7, #8
   1d9f8:	4628      	mov	r0, r5
   1d9fa:	f7ff ffa1 	bl	1d940 <send_conn_le_param_update>
		if (!err) {
   1d9fe:	4604      	mov	r4, r0
   1da00:	2800      	cmp	r0, #0
   1da02:	d03f      	beq.n	1da84 <deferred_work+0xd4>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1da04:	466d      	mov	r5, sp
   1da06:	b088      	sub	sp, #32
   1da08:	466b      	mov	r3, sp
   1da0a:	f113 0210 	adds.w	r2, r3, #16
   1da0e:	d054      	beq.n	1daba <deferred_work+0x10a>
   1da10:	210c      	movs	r1, #12
   1da12:	b14a      	cbz	r2, 1da28 <deferred_work+0x78>
   1da14:	4608      	mov	r0, r1
   1da16:	2904      	cmp	r1, #4
   1da18:	dd03      	ble.n	1da22 <deferred_work+0x72>
   1da1a:	f8df c158 	ldr.w	ip, [pc, #344]	; 1db74 <deferred_work+0x1c4>
   1da1e:	f8c3 c014 	str.w	ip, [r3, #20]
   1da22:	2808      	cmp	r0, #8
   1da24:	dd00      	ble.n	1da28 <deferred_work+0x78>
   1da26:	619c      	str	r4, [r3, #24]
   1da28:	290b      	cmp	r1, #11
   1da2a:	dd49      	ble.n	1dac0 <deferred_work+0x110>
   1da2c:	240c      	movs	r4, #12
   1da2e:	b13a      	cbz	r2, 1da40 <deferred_work+0x90>
   1da30:	2103      	movs	r1, #3
   1da32:	7139      	strb	r1, [r7, #4]
   1da34:	2100      	movs	r1, #0
   1da36:	7179      	strb	r1, [r7, #5]
   1da38:	71b9      	strb	r1, [r7, #6]
   1da3a:	71f9      	strb	r1, [r7, #7]
   1da3c:	6878      	ldr	r0, [r7, #4]
   1da3e:	6118      	str	r0, [r3, #16]
   1da40:	2100      	movs	r1, #0
   1da42:	f36f 0100 	bfc	r1, #0, #1
   1da46:	f36f 0141 	bfc	r1, #1, #1
   1da4a:	f36f 0182 	bfc	r1, #2, #1
   1da4e:	f36f 01c5 	bfc	r1, #3, #3
   1da52:	2302      	movs	r3, #2
   1da54:	f363 1188 	bfi	r1, r3, #6, #3
   1da58:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1da5c:	f364 2153 	bfi	r1, r4, #9, #11
   1da60:	f36f 511f 	bfc	r1, #20, #12
   1da64:	2300      	movs	r3, #0
   1da66:	4844      	ldr	r0, [pc, #272]	; (1db78 <deferred_work+0x1c8>)
   1da68:	f7f6 fb48 	bl	140fc <z_impl_z_log_msg_static_create>
   1da6c:	46ad      	mov	sp, r5
   1da6e:	e015      	b.n	1da9c <deferred_work+0xec>
		bt_l2cap_disconnected(conn);
   1da70:	4628      	mov	r0, r5
   1da72:	f00f fdd4 	bl	2d61e <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1da76:	4628      	mov	r0, r5
   1da78:	f7ff f8b6 	bl	1cbe8 <notify_disconnected>
		bt_conn_unref(conn);
   1da7c:	4628      	mov	r0, r5
   1da7e:	f00f fcd4 	bl	2d42a <bt_conn_unref>
		return;
   1da82:	e017      	b.n	1dab4 <deferred_work+0x104>
   1da84:	f3bf 8f5b 	dmb	ish
   1da88:	e856 3f00 	ldrex	r3, [r6]
   1da8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1da90:	e846 3200 	strex	r2, r3, [r6]
   1da94:	2a00      	cmp	r2, #0
   1da96:	d1f7      	bne.n	1da88 <deferred_work+0xd8>
   1da98:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1da9c:	f3bf 8f5b 	dmb	ish
   1daa0:	e856 3f00 	ldrex	r3, [r6]
   1daa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1daa8:	e846 3200 	strex	r2, r3, [r6]
   1daac:	2a00      	cmp	r2, #0
   1daae:	d1f7      	bne.n	1daa0 <deferred_work+0xf0>
   1dab0:	f3bf 8f5b 	dmb	ish
}
   1dab4:	371c      	adds	r7, #28
   1dab6:	46bd      	mov	sp, r7
   1dab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1daba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1dabe:	e7a8      	b.n	1da12 <deferred_work+0x62>
   1dac0:	f06f 041b 	mvn.w	r4, #27
   1dac4:	e7b3      	b.n	1da2e <deferred_work+0x7e>
		param = BT_LE_CONN_PARAM(
   1dac6:	4a2d      	ldr	r2, [pc, #180]	; (1db7c <deferred_work+0x1cc>)
   1dac8:	f107 0310 	add.w	r3, r7, #16
   1dacc:	e892 0003 	ldmia.w	r2, {r0, r1}
   1dad0:	e883 0003 	stmia.w	r3, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1dad4:	4619      	mov	r1, r3
   1dad6:	4628      	mov	r0, r5
   1dad8:	f7ff ff32 	bl	1d940 <send_conn_le_param_update>
		if (!err) {
   1dadc:	4604      	mov	r4, r0
   1dade:	b3a8      	cbz	r0, 1db4c <deferred_work+0x19c>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1dae0:	466d      	mov	r5, sp
   1dae2:	b088      	sub	sp, #32
   1dae4:	466b      	mov	r3, sp
   1dae6:	f113 0210 	adds.w	r2, r3, #16
   1daea:	d03c      	beq.n	1db66 <deferred_work+0x1b6>
   1daec:	210c      	movs	r1, #12
   1daee:	b14a      	cbz	r2, 1db04 <deferred_work+0x154>
   1daf0:	4608      	mov	r0, r1
   1daf2:	2904      	cmp	r1, #4
   1daf4:	dd03      	ble.n	1dafe <deferred_work+0x14e>
   1daf6:	f8df c088 	ldr.w	ip, [pc, #136]	; 1db80 <deferred_work+0x1d0>
   1dafa:	f8c3 c014 	str.w	ip, [r3, #20]
   1dafe:	2808      	cmp	r0, #8
   1db00:	dd00      	ble.n	1db04 <deferred_work+0x154>
   1db02:	619c      	str	r4, [r3, #24]
   1db04:	290b      	cmp	r1, #11
   1db06:	dd31      	ble.n	1db6c <deferred_work+0x1bc>
   1db08:	240c      	movs	r4, #12
   1db0a:	b13a      	cbz	r2, 1db1c <deferred_work+0x16c>
   1db0c:	2103      	movs	r1, #3
   1db0e:	7139      	strb	r1, [r7, #4]
   1db10:	2100      	movs	r1, #0
   1db12:	7179      	strb	r1, [r7, #5]
   1db14:	71b9      	strb	r1, [r7, #6]
   1db16:	71f9      	strb	r1, [r7, #7]
   1db18:	6878      	ldr	r0, [r7, #4]
   1db1a:	6118      	str	r0, [r3, #16]
   1db1c:	2100      	movs	r1, #0
   1db1e:	f36f 0100 	bfc	r1, #0, #1
   1db22:	f36f 0141 	bfc	r1, #1, #1
   1db26:	f36f 0182 	bfc	r1, #2, #1
   1db2a:	f36f 01c5 	bfc	r1, #3, #3
   1db2e:	2302      	movs	r3, #2
   1db30:	f363 1188 	bfi	r1, r3, #6, #3
   1db34:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1db38:	f364 2153 	bfi	r1, r4, #9, #11
   1db3c:	f36f 511f 	bfc	r1, #20, #12
   1db40:	2300      	movs	r3, #0
   1db42:	480d      	ldr	r0, [pc, #52]	; (1db78 <deferred_work+0x1c8>)
   1db44:	f7f6 fada 	bl	140fc <z_impl_z_log_msg_static_create>
   1db48:	46ad      	mov	sp, r5
   1db4a:	e7a7      	b.n	1da9c <deferred_work+0xec>
   1db4c:	f3bf 8f5b 	dmb	ish
   1db50:	e856 3f00 	ldrex	r3, [r6]
   1db54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1db58:	e846 3200 	strex	r2, r3, [r6]
   1db5c:	2a00      	cmp	r2, #0
   1db5e:	d1f7      	bne.n	1db50 <deferred_work+0x1a0>
   1db60:	f3bf 8f5b 	dmb	ish
}
   1db64:	e79a      	b.n	1da9c <deferred_work+0xec>
   1db66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1db6a:	e7c0      	b.n	1daee <deferred_work+0x13e>
   1db6c:	f06f 041b 	mvn.w	r4, #27
   1db70:	e7cb      	b.n	1db0a <deferred_work+0x15a>
   1db72:	bf00      	nop
   1db74:	000341dc 	.word	0x000341dc
   1db78:	00031ce4 	.word	0x00031ce4
   1db7c:	00031ec0 	.word	0x00031ec0
   1db80:	00034204 	.word	0x00034204

0001db84 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1db84:	b508      	push	{r3, lr}
   1db86:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1db88:	4801      	ldr	r0, [pc, #4]	; (1db90 <bt_conn_create_frag_timeout+0xc>)
   1db8a:	f7ff fd45 	bl	1d618 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1db8e:	bd08      	pop	{r3, pc}
   1db90:	20000bb8 	.word	0x20000bb8

0001db94 <send_buf>:
{
   1db94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db98:	4605      	mov	r5, r0
   1db9a:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1db9c:	8a0a      	ldrh	r2, [r1, #16]
	return bt_dev.le.acl_mtu;
   1db9e:	4b1e      	ldr	r3, [pc, #120]	; (1dc18 <send_buf+0x84>)
   1dba0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1dba4:	429a      	cmp	r2, r3
   1dba6:	d801      	bhi.n	1dbac <send_buf+0x18>
   1dba8:	7f0b      	ldrb	r3, [r1, #28]
   1dbaa:	b1c3      	cbz	r3, 1dbde <send_buf+0x4a>
	if (tx_data(buf)->is_cont) {
   1dbac:	7f23      	ldrb	r3, [r4, #28]
   1dbae:	bb0b      	cbnz	r3, 1dbf4 <send_buf+0x60>
	flags = FRAG_START;
   1dbb0:	2600      	movs	r6, #0
	while (buf->len > conn_mtu(conn)) {
   1dbb2:	8a22      	ldrh	r2, [r4, #16]
	return bt_dev.le.acl_mtu;
   1dbb4:	4b18      	ldr	r3, [pc, #96]	; (1dc18 <send_buf+0x84>)
   1dbb6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
	while (buf->len > conn_mtu(conn)) {
   1dbba:	429a      	cmp	r2, r3
   1dbbc:	d91c      	bls.n	1dbf8 <send_buf+0x64>
		frag = create_frag(conn, buf);
   1dbbe:	4621      	mov	r1, r4
   1dbc0:	4628      	mov	r0, r5
   1dbc2:	f00f fcea 	bl	2d59a <create_frag>
		if (!frag) {
   1dbc6:	4607      	mov	r7, r0
   1dbc8:	b310      	cbz	r0, 1dc10 <send_buf+0x7c>
		err = send_frag(conn, buf, frag, flags);
   1dbca:	4633      	mov	r3, r6
   1dbcc:	4602      	mov	r2, r0
   1dbce:	4621      	mov	r1, r4
   1dbd0:	4628      	mov	r0, r5
   1dbd2:	f7ff f901 	bl	1cdd8 <send_frag>
		if (err) {
   1dbd6:	4680      	mov	r8, r0
   1dbd8:	b938      	cbnz	r0, 1dbea <send_buf+0x56>
		flags = FRAG_CONT;
   1dbda:	2601      	movs	r6, #1
   1dbdc:	e7e9      	b.n	1dbb2 <send_buf+0x1e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   1dbde:	2302      	movs	r3, #2
   1dbe0:	2200      	movs	r2, #0
   1dbe2:	f7ff f8f9 	bl	1cdd8 <send_frag>
   1dbe6:	4680      	mov	r8, r0
   1dbe8:	e00f      	b.n	1dc0a <send_buf+0x76>
			tx_data(buf)->is_cont = flags != FRAG_START;
   1dbea:	7726      	strb	r6, [r4, #28]
			net_buf_unref(frag);
   1dbec:	4638      	mov	r0, r7
   1dbee:	f011 f987 	bl	2ef00 <net_buf_unref>
			return err;
   1dbf2:	e00a      	b.n	1dc0a <send_buf+0x76>
		flags = FRAG_CONT;
   1dbf4:	2601      	movs	r6, #1
   1dbf6:	e7dc      	b.n	1dbb2 <send_buf+0x1e>
	tx_data(buf)->is_cont = true;
   1dbf8:	2301      	movs	r3, #1
   1dbfa:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   1dbfc:	2303      	movs	r3, #3
   1dbfe:	2200      	movs	r2, #0
   1dc00:	4621      	mov	r1, r4
   1dc02:	4628      	mov	r0, r5
   1dc04:	f7ff f8e8 	bl	1cdd8 <send_frag>
   1dc08:	4680      	mov	r8, r0
}
   1dc0a:	4640      	mov	r0, r8
   1dc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENOMEM;
   1dc10:	f06f 080b 	mvn.w	r8, #11
   1dc14:	e7f9      	b.n	1dc0a <send_buf+0x76>
   1dc16:	bf00      	nop
   1dc18:	20000438 	.word	0x20000438

0001dc1c <bt_conn_process_tx>:
{
   1dc1c:	b570      	push	{r4, r5, r6, lr}
   1dc1e:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1dc20:	7a83      	ldrb	r3, [r0, #10]
   1dc22:	b923      	cbnz	r3, 1dc2e <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1dc24:	2106      	movs	r1, #6
   1dc26:	3004      	adds	r0, #4
   1dc28:	f00f fad8 	bl	2d1dc <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1dc2c:	b9a8      	cbnz	r0, 1dc5a <bt_conn_process_tx+0x3e>
	buf = k_fifo_peek_head(&conn->tx_queue);
   1dc2e:	f104 0038 	add.w	r0, r4, #56	; 0x38
	return z_impl_k_queue_peek_head(queue);
   1dc32:	f013 f8b1 	bl	30d98 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   1dc36:	4605      	mov	r5, r0
   1dc38:	b198      	cbz	r0, 1dc62 <bt_conn_process_tx+0x46>
	buf = net_buf_ref(buf);
   1dc3a:	4628      	mov	r0, r5
   1dc3c:	f011 f983 	bl	2ef46 <net_buf_ref>
   1dc40:	4605      	mov	r5, r0
	err = send_buf(conn, buf);
   1dc42:	4601      	mov	r1, r0
   1dc44:	4620      	mov	r0, r4
   1dc46:	f7ff ffa5 	bl	1db94 <send_buf>
   1dc4a:	4606      	mov	r6, r0
	net_buf_unref(buf);
   1dc4c:	4628      	mov	r0, r5
   1dc4e:	f011 f957 	bl	2ef00 <net_buf_unref>
	if (err  == -EIO) {
   1dc52:	f116 0f05 	cmn.w	r6, #5
   1dc56:	d012      	beq.n	1dc7e <bt_conn_process_tx+0x62>
}
   1dc58:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   1dc5a:	4620      	mov	r0, r4
   1dc5c:	f00f fb53 	bl	2d306 <conn_cleanup>
		return;
   1dc60:	e7fa      	b.n	1dc58 <bt_conn_process_tx+0x3c>
	BT_ASSERT(buf);
   1dc62:	f44f 735d 	mov.w	r3, #884	; 0x374
   1dc66:	4a0c      	ldr	r2, [pc, #48]	; (1dc98 <bt_conn_process_tx+0x7c>)
   1dc68:	490c      	ldr	r1, [pc, #48]	; (1dc9c <bt_conn_process_tx+0x80>)
   1dc6a:	480d      	ldr	r0, [pc, #52]	; (1dca0 <bt_conn_process_tx+0x84>)
   1dc6c:	f00d fb1a 	bl	2b2a4 <assert_print>
   1dc70:	4040      	eors	r0, r0
   1dc72:	f380 8811 	msr	BASEPRI, r0
   1dc76:	f04f 0003 	mov.w	r0, #3
   1dc7a:	df02      	svc	2
   1dc7c:	e7dd      	b.n	1dc3a <bt_conn_process_tx+0x1e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1dc7e:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   1dc80:	2300      	movs	r3, #0
   1dc82:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1dc84:	4628      	mov	r0, r5
   1dc86:	f011 f93b 	bl	2ef00 <net_buf_unref>
		if (tx) {
   1dc8a:	2e00      	cmp	r6, #0
   1dc8c:	d0e4      	beq.n	1dc58 <bt_conn_process_tx+0x3c>
			conn_tx_destroy(conn, tx);
   1dc8e:	4631      	mov	r1, r6
   1dc90:	4620      	mov	r0, r4
   1dc92:	f00f fa96 	bl	2d1c2 <conn_tx_destroy>
   1dc96:	e7df      	b.n	1dc58 <bt_conn_process_tx+0x3c>
   1dc98:	00034230 	.word	0x00034230
   1dc9c:	000349f4 	.word	0x000349f4
   1dca0:	00033828 	.word	0x00033828

0001dca4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1dca4:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1dca6:	480c      	ldr	r0, [pc, #48]	; (1dcd8 <bt_conn_init+0x34>)
   1dca8:	f013 f853 	bl	30d52 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1dcac:	2400      	movs	r4, #0
   1dcae:	e006      	b.n	1dcbe <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1dcb0:	490a      	ldr	r1, [pc, #40]	; (1dcdc <bt_conn_init+0x38>)
   1dcb2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1dcb6:	4808      	ldr	r0, [pc, #32]	; (1dcd8 <bt_conn_init+0x34>)
   1dcb8:	f013 f857 	bl	30d6a <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1dcbc:	3401      	adds	r4, #1
   1dcbe:	2c02      	cmp	r4, #2
   1dcc0:	d9f6      	bls.n	1dcb0 <bt_conn_init+0xc>
	}

	bt_att_init();
   1dcc2:	f001 fd31 	bl	1f728 <bt_att_init>

	err = bt_smp_init();
   1dcc6:	f010 fff8 	bl	2ecba <bt_smp_init>
	if (err) {
   1dcca:	4604      	mov	r4, r0
   1dccc:	b108      	cbz	r0, 1dcd2 <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1dcce:	4620      	mov	r0, r4
   1dcd0:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   1dcd2:	f00f fd4a 	bl	2d76a <bt_l2cap_init>
	return 0;
   1dcd6:	e7fa      	b.n	1dcce <bt_conn_init+0x2a>
   1dcd8:	20000b30 	.word	0x20000b30
   1dcdc:	20003f5c 	.word	0x20003f5c

0001dce0 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1dce0:	4905      	ldr	r1, [pc, #20]	; (1dcf8 <get_ident+0x18>)
   1dce2:	780a      	ldrb	r2, [r1, #0]
   1dce4:	1c53      	adds	r3, r2, #1
   1dce6:	b2db      	uxtb	r3, r3
   1dce8:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1dcea:	b90b      	cbnz	r3, 1dcf0 <get_ident+0x10>
		ident++;
   1dcec:	3202      	adds	r2, #2
   1dcee:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   1dcf0:	4b01      	ldr	r3, [pc, #4]	; (1dcf8 <get_ident+0x18>)
   1dcf2:	7818      	ldrb	r0, [r3, #0]
   1dcf4:	4770      	bx	lr
   1dcf6:	bf00      	nop
   1dcf8:	20005d41 	.word	0x20005d41

0001dcfc <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1dcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcfe:	b083      	sub	sp, #12
   1dd00:	af00      	add	r7, sp, #0
   1dd02:	4605      	mov	r5, r0
		.recv = l2cap_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1dd04:	2000      	movs	r0, #0
   1dd06:	b3c0      	cbz	r0, 1dd7a <l2cap_accept+0x7e>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   1dd08:	466c      	mov	r4, sp
   1dd0a:	b088      	sub	sp, #32
   1dd0c:	466b      	mov	r3, sp
   1dd0e:	f113 0210 	adds.w	r2, r3, #16
   1dd12:	d043      	beq.n	1dd9c <l2cap_accept+0xa0>
   1dd14:	210c      	movs	r1, #12
   1dd16:	b13a      	cbz	r2, 1dd28 <l2cap_accept+0x2c>
   1dd18:	4608      	mov	r0, r1
   1dd1a:	2904      	cmp	r1, #4
   1dd1c:	dd01      	ble.n	1dd22 <l2cap_accept+0x26>
   1dd1e:	4e22      	ldr	r6, [pc, #136]	; (1dda8 <l2cap_accept+0xac>)
   1dd20:	615e      	str	r6, [r3, #20]
   1dd22:	2808      	cmp	r0, #8
   1dd24:	dd00      	ble.n	1dd28 <l2cap_accept+0x2c>
   1dd26:	619d      	str	r5, [r3, #24]
   1dd28:	290b      	cmp	r1, #11
   1dd2a:	dd3a      	ble.n	1dda2 <l2cap_accept+0xa6>
   1dd2c:	f04f 0c0c 	mov.w	ip, #12
   1dd30:	b13a      	cbz	r2, 1dd42 <l2cap_accept+0x46>
   1dd32:	2103      	movs	r1, #3
   1dd34:	7139      	strb	r1, [r7, #4]
   1dd36:	2100      	movs	r1, #0
   1dd38:	7179      	strb	r1, [r7, #5]
   1dd3a:	71b9      	strb	r1, [r7, #6]
   1dd3c:	71f9      	strb	r1, [r7, #7]
   1dd3e:	6878      	ldr	r0, [r7, #4]
   1dd40:	6118      	str	r0, [r3, #16]
   1dd42:	2100      	movs	r1, #0
   1dd44:	f36f 0100 	bfc	r1, #0, #1
   1dd48:	f36f 0141 	bfc	r1, #1, #1
   1dd4c:	f36f 0182 	bfc	r1, #2, #1
   1dd50:	f36f 01c5 	bfc	r1, #3, #3
   1dd54:	2301      	movs	r3, #1
   1dd56:	f363 1188 	bfi	r1, r3, #6, #3
   1dd5a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   1dd5e:	f36c 2153 	bfi	r1, ip, #9, #11
   1dd62:	f36f 511f 	bfc	r1, #20, #12
   1dd66:	2300      	movs	r3, #0
   1dd68:	4810      	ldr	r0, [pc, #64]	; (1ddac <l2cap_accept+0xb0>)
   1dd6a:	f7f6 f9c7 	bl	140fc <z_impl_z_log_msg_static_create>
   1dd6e:	46a5      	mov	sp, r4

	return -ENOMEM;
   1dd70:	f06f 000b 	mvn.w	r0, #11
}
   1dd74:	370c      	adds	r7, #12
   1dd76:	46bd      	mov	sp, r7
   1dd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (l2cap->chan.chan.conn) {
   1dd7a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1dd7e:	011b      	lsls	r3, r3, #4
   1dd80:	4a0b      	ldr	r2, [pc, #44]	; (1ddb0 <l2cap_accept+0xb4>)
   1dd82:	58d3      	ldr	r3, [r2, r3]
   1dd84:	b10b      	cbz	r3, 1dd8a <l2cap_accept+0x8e>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1dd86:	3001      	adds	r0, #1
   1dd88:	e7bd      	b.n	1dd06 <l2cap_accept+0xa>
		l2cap->chan.chan.ops = &ops;
   1dd8a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1dd8e:	4b08      	ldr	r3, [pc, #32]	; (1ddb0 <l2cap_accept+0xb4>)
   1dd90:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1dd94:	4a07      	ldr	r2, [pc, #28]	; (1ddb4 <l2cap_accept+0xb8>)
   1dd96:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1dd98:	600b      	str	r3, [r1, #0]
		return 0;
   1dd9a:	e7eb      	b.n	1dd74 <l2cap_accept+0x78>
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1dd9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1dda0:	e7b9      	b.n	1dd16 <l2cap_accept+0x1a>
   1dda2:	f06f 0c1b 	mvn.w	ip, #27
   1dda6:	e7c3      	b.n	1dd30 <l2cap_accept+0x34>
   1dda8:	00034288 	.word	0x00034288
   1ddac:	00031d0c 	.word	0x00031d0c
   1ddb0:	20003f90 	.word	0x20003f90
   1ddb4:	000343f4 	.word	0x000343f4

0001ddb8 <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1ddb8:	8a0b      	ldrh	r3, [r1, #16]
   1ddba:	2b01      	cmp	r3, #1
   1ddbc:	d900      	bls.n	1ddc0 <le_conn_param_rsp+0x8>
   1ddbe:	4770      	bx	lr
{
   1ddc0:	b500      	push	{lr}
   1ddc2:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("Too small LE conn param rsp");
   1ddc4:	4b12      	ldr	r3, [pc, #72]	; (1de10 <le_conn_param_rsp+0x58>)
   1ddc6:	9307      	str	r3, [sp, #28]
   1ddc8:	2302      	movs	r3, #2
   1ddca:	f88d 3004 	strb.w	r3, [sp, #4]
   1ddce:	2300      	movs	r3, #0
   1ddd0:	f88d 3005 	strb.w	r3, [sp, #5]
   1ddd4:	f88d 3006 	strb.w	r3, [sp, #6]
   1ddd8:	f88d 3007 	strb.w	r3, [sp, #7]
   1dddc:	9a01      	ldr	r2, [sp, #4]
   1ddde:	9206      	str	r2, [sp, #24]
   1dde0:	4619      	mov	r1, r3
   1dde2:	f363 0100 	bfi	r1, r3, #0, #1
   1dde6:	f363 0141 	bfi	r1, r3, #1, #1
   1ddea:	f363 0182 	bfi	r1, r3, #2, #1
   1ddee:	f363 01c5 	bfi	r1, r3, #3, #3
   1ddf2:	2201      	movs	r2, #1
   1ddf4:	f362 1188 	bfi	r1, r2, #6, #3
   1ddf8:	2208      	movs	r2, #8
   1ddfa:	f362 2153 	bfi	r1, r2, #9, #11
   1ddfe:	f363 511f 	bfi	r1, r3, #20, #12
   1de02:	aa06      	add	r2, sp, #24
   1de04:	4803      	ldr	r0, [pc, #12]	; (1de14 <le_conn_param_rsp+0x5c>)
   1de06:	f7f6 f979 	bl	140fc <z_impl_z_log_msg_static_create>
}
   1de0a:	b009      	add	sp, #36	; 0x24
   1de0c:	f85d fb04 	ldr.w	pc, [sp], #4
   1de10:	000342b0 	.word	0x000342b0
   1de14:	00031d0c 	.word	0x00031d0c

0001de18 <l2cap_chan_add>:
{
   1de18:	b510      	push	{r4, lr}
   1de1a:	b088      	sub	sp, #32
	if (!le_chan) {
   1de1c:	b199      	cbz	r1, 1de46 <l2cap_chan_add+0x2e>
   1de1e:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1de20:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1de22:	2400      	movs	r4, #0
   1de24:	f3bf 8f5b 	dmb	ish
   1de28:	e851 cf00 	ldrex	ip, [r1]
   1de2c:	e841 4e00 	strex	lr, r4, [r1]
   1de30:	f1be 0f00 	cmp.w	lr, #0
   1de34:	d1f8      	bne.n	1de28 <l2cap_chan_add+0x10>
   1de36:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1de3a:	4619      	mov	r1, r3
   1de3c:	f00f fbdf 	bl	2d5fe <bt_l2cap_chan_add>
	return true;
   1de40:	2001      	movs	r0, #1
}
   1de42:	b008      	add	sp, #32
   1de44:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to allocate L2CAP channel ID");
   1de46:	4b13      	ldr	r3, [pc, #76]	; (1de94 <l2cap_chan_add+0x7c>)
   1de48:	9307      	str	r3, [sp, #28]
   1de4a:	2302      	movs	r3, #2
   1de4c:	f88d 3004 	strb.w	r3, [sp, #4]
   1de50:	2400      	movs	r4, #0
   1de52:	f88d 4005 	strb.w	r4, [sp, #5]
   1de56:	f88d 4006 	strb.w	r4, [sp, #6]
   1de5a:	f88d 4007 	strb.w	r4, [sp, #7]
   1de5e:	9b01      	ldr	r3, [sp, #4]
   1de60:	9306      	str	r3, [sp, #24]
   1de62:	4621      	mov	r1, r4
   1de64:	f364 0100 	bfi	r1, r4, #0, #1
   1de68:	f364 0141 	bfi	r1, r4, #1, #1
   1de6c:	f364 0182 	bfi	r1, r4, #2, #1
   1de70:	f364 01c5 	bfi	r1, r4, #3, #3
   1de74:	2301      	movs	r3, #1
   1de76:	f363 1188 	bfi	r1, r3, #6, #3
   1de7a:	2308      	movs	r3, #8
   1de7c:	f363 2153 	bfi	r1, r3, #9, #11
   1de80:	f364 511f 	bfi	r1, r4, #20, #12
   1de84:	4623      	mov	r3, r4
   1de86:	aa06      	add	r2, sp, #24
   1de88:	4803      	ldr	r0, [pc, #12]	; (1de98 <l2cap_chan_add+0x80>)
   1de8a:	f7f6 f937 	bl	140fc <z_impl_z_log_msg_static_create>
		return false;
   1de8e:	4620      	mov	r0, r4
   1de90:	e7d7      	b.n	1de42 <l2cap_chan_add+0x2a>
   1de92:	bf00      	nop
   1de94:	000342cc 	.word	0x000342cc
   1de98:	00031d0c 	.word	0x00031d0c

0001de9c <bt_l2cap_connected>:
{
   1de9c:	b530      	push	{r4, r5, lr}
   1de9e:	b083      	sub	sp, #12
   1dea0:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1dea2:	4c19      	ldr	r4, [pc, #100]	; (1df08 <bt_l2cap_connected+0x6c>)
   1dea4:	e000      	b.n	1dea8 <bt_l2cap_connected+0xc>
   1dea6:	340c      	adds	r4, #12
   1dea8:	4b18      	ldr	r3, [pc, #96]	; (1df0c <bt_l2cap_connected+0x70>)
   1deaa:	429c      	cmp	r4, r3
   1deac:	d22a      	bcs.n	1df04 <bt_l2cap_connected+0x68>
		if (fchan->accept(conn, &chan) < 0) {
   1deae:	6863      	ldr	r3, [r4, #4]
   1deb0:	a901      	add	r1, sp, #4
   1deb2:	4628      	mov	r0, r5
   1deb4:	4798      	blx	r3
   1deb6:	2800      	cmp	r0, #0
   1deb8:	dbf5      	blt.n	1dea6 <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1deba:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1debc:	8823      	ldrh	r3, [r4, #0]
   1debe:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1dec0:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1dec2:	68a2      	ldr	r2, [r4, #8]
   1dec4:	4628      	mov	r0, r5
   1dec6:	f7ff ffa7 	bl	1de18 <l2cap_chan_add>
   1deca:	b1d8      	cbz	r0, 1df04 <bt_l2cap_connected+0x68>
		if (chan->ops->connected) {
   1decc:	9801      	ldr	r0, [sp, #4]
   1dece:	6843      	ldr	r3, [r0, #4]
   1ded0:	681b      	ldr	r3, [r3, #0]
   1ded2:	b103      	cbz	r3, 1ded6 <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
   1ded4:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1ded6:	9b01      	ldr	r3, [sp, #4]
   1ded8:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1deda:	f3bf 8f5b 	dmb	ish
   1dede:	e853 1f00 	ldrex	r1, [r3]
   1dee2:	f041 0101 	orr.w	r1, r1, #1
   1dee6:	e843 1200 	strex	r2, r1, [r3]
   1deea:	2a00      	cmp	r2, #0
   1deec:	d1f7      	bne.n	1dede <bt_l2cap_connected+0x42>
   1deee:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1def2:	9801      	ldr	r0, [sp, #4]
   1def4:	6843      	ldr	r3, [r0, #4]
   1def6:	69db      	ldr	r3, [r3, #28]
   1def8:	2b00      	cmp	r3, #0
   1defa:	d0d4      	beq.n	1dea6 <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1defc:	f100 0110 	add.w	r1, r0, #16
   1df00:	4798      	blx	r3
   1df02:	e7d0      	b.n	1dea6 <bt_l2cap_connected+0xa>
}
   1df04:	b003      	add	sp, #12
   1df06:	bd30      	pop	{r4, r5, pc}
   1df08:	00031c80 	.word	0x00031c80
   1df0c:	00031ca4 	.word	0x00031ca4

0001df10 <l2cap_create_le_sig_pdu>:
{
   1df10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df14:	b082      	sub	sp, #8
   1df16:	af00      	add	r7, sp, #0
   1df18:	460c      	mov	r4, r1
   1df1a:	4616      	mov	r6, r2
   1df1c:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1df1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1df22:	2300      	movs	r3, #0
   1df24:	2100      	movs	r1, #0
   1df26:	4608      	mov	r0, r1
   1df28:	f00f fb94 	bl	2d654 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1df2c:	4680      	mov	r8, r0
   1df2e:	b158      	cbz	r0, 1df48 <l2cap_create_le_sig_pdu+0x38>
	return net_buf_simple_add(&buf->b, len);
   1df30:	2104      	movs	r1, #4
   1df32:	300c      	adds	r0, #12
   1df34:	f011 f82f 	bl	2ef96 <net_buf_simple_add>
	hdr->code = code;
   1df38:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1df3a:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1df3c:	8045      	strh	r5, [r0, #2]
}
   1df3e:	4640      	mov	r0, r8
   1df40:	3708      	adds	r7, #8
   1df42:	46bd      	mov	sp, r7
   1df44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1df48:	466d      	mov	r5, sp
   1df4a:	b088      	sub	sp, #32
   1df4c:	466b      	mov	r3, sp
   1df4e:	f113 0210 	adds.w	r2, r3, #16
   1df52:	d02d      	beq.n	1dfb0 <l2cap_create_le_sig_pdu+0xa0>
   1df54:	210c      	movs	r1, #12
   1df56:	b13a      	cbz	r2, 1df68 <l2cap_create_le_sig_pdu+0x58>
   1df58:	4608      	mov	r0, r1
   1df5a:	2904      	cmp	r1, #4
   1df5c:	dd01      	ble.n	1df62 <l2cap_create_le_sig_pdu+0x52>
   1df5e:	4e17      	ldr	r6, [pc, #92]	; (1dfbc <l2cap_create_le_sig_pdu+0xac>)
   1df60:	615e      	str	r6, [r3, #20]
   1df62:	2808      	cmp	r0, #8
   1df64:	dd00      	ble.n	1df68 <l2cap_create_le_sig_pdu+0x58>
   1df66:	619c      	str	r4, [r3, #24]
   1df68:	290b      	cmp	r1, #11
   1df6a:	dd24      	ble.n	1dfb6 <l2cap_create_le_sig_pdu+0xa6>
   1df6c:	240c      	movs	r4, #12
   1df6e:	b13a      	cbz	r2, 1df80 <l2cap_create_le_sig_pdu+0x70>
   1df70:	2103      	movs	r1, #3
   1df72:	7139      	strb	r1, [r7, #4]
   1df74:	2100      	movs	r1, #0
   1df76:	7179      	strb	r1, [r7, #5]
   1df78:	71b9      	strb	r1, [r7, #6]
   1df7a:	71f9      	strb	r1, [r7, #7]
   1df7c:	6878      	ldr	r0, [r7, #4]
   1df7e:	6118      	str	r0, [r3, #16]
   1df80:	2100      	movs	r1, #0
   1df82:	f36f 0100 	bfc	r1, #0, #1
   1df86:	f36f 0141 	bfc	r1, #1, #1
   1df8a:	f36f 0182 	bfc	r1, #2, #1
   1df8e:	f36f 01c5 	bfc	r1, #3, #3
   1df92:	2301      	movs	r3, #1
   1df94:	f363 1188 	bfi	r1, r3, #6, #3
   1df98:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1df9c:	f364 2153 	bfi	r1, r4, #9, #11
   1dfa0:	f36f 511f 	bfc	r1, #20, #12
   1dfa4:	2300      	movs	r3, #0
   1dfa6:	4806      	ldr	r0, [pc, #24]	; (1dfc0 <l2cap_create_le_sig_pdu+0xb0>)
   1dfa8:	f7f6 f8a8 	bl	140fc <z_impl_z_log_msg_static_create>
   1dfac:	46ad      	mov	sp, r5
		return NULL;
   1dfae:	e7c6      	b.n	1df3e <l2cap_create_le_sig_pdu+0x2e>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1dfb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1dfb4:	e7cf      	b.n	1df56 <l2cap_create_le_sig_pdu+0x46>
   1dfb6:	f06f 041b 	mvn.w	r4, #27
   1dfba:	e7d8      	b.n	1df6e <l2cap_create_le_sig_pdu+0x5e>
   1dfbc:	000342f0 	.word	0x000342f0
   1dfc0:	00031d0c 	.word	0x00031d0c

0001dfc4 <l2cap_recv>:
{
   1dfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfc6:	b091      	sub	sp, #68	; 0x44
   1dfc8:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1dfca:	8a0b      	ldrh	r3, [r1, #16]
   1dfcc:	2b03      	cmp	r3, #3
   1dfce:	d924      	bls.n	1e01a <l2cap_recv+0x56>
   1dfd0:	4606      	mov	r6, r0
   1dfd2:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1dfd4:	2104      	movs	r1, #4
   1dfd6:	f104 000c 	add.w	r0, r4, #12
   1dfda:	f011 f804 	bl	2efe6 <net_buf_simple_pull_mem>
   1dfde:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1dfe0:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   1dfe2:	8a20      	ldrh	r0, [r4, #16]
   1dfe4:	4288      	cmp	r0, r1
   1dfe6:	d065      	beq.n	1e0b4 <l2cap_recv+0xf0>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1dfe8:	466c      	mov	r4, sp
   1dfea:	b088      	sub	sp, #32
   1dfec:	ab02      	add	r3, sp, #8
   1dfee:	f113 0210 	adds.w	r2, r3, #16
   1dff2:	d036      	beq.n	1e062 <l2cap_recv+0x9e>
   1dff4:	2510      	movs	r5, #16
   1dff6:	b162      	cbz	r2, 1e012 <l2cap_recv+0x4e>
   1dff8:	462e      	mov	r6, r5
   1dffa:	2d04      	cmp	r5, #4
   1dffc:	dd03      	ble.n	1e006 <l2cap_recv+0x42>
   1dffe:	f8df c19c 	ldr.w	ip, [pc, #412]	; 1e19c <l2cap_recv+0x1d8>
   1e002:	f8c3 c014 	str.w	ip, [r3, #20]
   1e006:	2e08      	cmp	r6, #8
   1e008:	dd00      	ble.n	1e00c <l2cap_recv+0x48>
   1e00a:	6198      	str	r0, [r3, #24]
   1e00c:	2e0c      	cmp	r6, #12
   1e00e:	dd2b      	ble.n	1e068 <l2cap_recv+0xa4>
   1e010:	61d9      	str	r1, [r3, #28]
   1e012:	2d0f      	cmp	r5, #15
   1e014:	dd4b      	ble.n	1e0ae <l2cap_recv+0xea>
   1e016:	2510      	movs	r5, #16
   1e018:	e028      	b.n	1e06c <l2cap_recv+0xa8>
		LOG_ERR("Too small L2CAP signaling PDU");
   1e01a:	4b61      	ldr	r3, [pc, #388]	; (1e1a0 <l2cap_recv+0x1dc>)
   1e01c:	637b      	str	r3, [r7, #52]	; 0x34
   1e01e:	2302      	movs	r3, #2
   1e020:	713b      	strb	r3, [r7, #4]
   1e022:	2300      	movs	r3, #0
   1e024:	717b      	strb	r3, [r7, #5]
   1e026:	71bb      	strb	r3, [r7, #6]
   1e028:	71fb      	strb	r3, [r7, #7]
   1e02a:	687a      	ldr	r2, [r7, #4]
   1e02c:	633a      	str	r2, [r7, #48]	; 0x30
   1e02e:	4619      	mov	r1, r3
   1e030:	f363 0100 	bfi	r1, r3, #0, #1
   1e034:	f363 0141 	bfi	r1, r3, #1, #1
   1e038:	f363 0182 	bfi	r1, r3, #2, #1
   1e03c:	f363 01c5 	bfi	r1, r3, #3, #3
   1e040:	2201      	movs	r2, #1
   1e042:	f362 1188 	bfi	r1, r2, #6, #3
   1e046:	2208      	movs	r2, #8
   1e048:	f362 2153 	bfi	r1, r2, #9, #11
   1e04c:	f363 511f 	bfi	r1, r3, #20, #12
   1e050:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1e054:	4853      	ldr	r0, [pc, #332]	; (1e1a4 <l2cap_recv+0x1e0>)
   1e056:	f7f6 f851 	bl	140fc <z_impl_z_log_msg_static_create>
}
   1e05a:	2000      	movs	r0, #0
   1e05c:	373c      	adds	r7, #60	; 0x3c
   1e05e:	46bd      	mov	sp, r7
   1e060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1e062:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1e066:	e7c6      	b.n	1dff6 <l2cap_recv+0x32>
   1e068:	f06f 051b 	mvn.w	r5, #27
   1e06c:	b13a      	cbz	r2, 1e07e <l2cap_recv+0xba>
   1e06e:	2104      	movs	r1, #4
   1e070:	7139      	strb	r1, [r7, #4]
   1e072:	2100      	movs	r1, #0
   1e074:	7179      	strb	r1, [r7, #5]
   1e076:	71b9      	strb	r1, [r7, #6]
   1e078:	71f9      	strb	r1, [r7, #7]
   1e07a:	6878      	ldr	r0, [r7, #4]
   1e07c:	6118      	str	r0, [r3, #16]
   1e07e:	2100      	movs	r1, #0
   1e080:	f36f 0100 	bfc	r1, #0, #1
   1e084:	f36f 0141 	bfc	r1, #1, #1
   1e088:	f36f 0182 	bfc	r1, #2, #1
   1e08c:	f36f 01c5 	bfc	r1, #3, #3
   1e090:	2301      	movs	r3, #1
   1e092:	f363 1188 	bfi	r1, r3, #6, #3
   1e096:	f3c5 030a 	ubfx	r3, r5, #0, #11
   1e09a:	f363 2153 	bfi	r1, r3, #9, #11
   1e09e:	f36f 511f 	bfc	r1, #20, #12
   1e0a2:	2300      	movs	r3, #0
   1e0a4:	483f      	ldr	r0, [pc, #252]	; (1e1a4 <l2cap_recv+0x1e0>)
   1e0a6:	f7f6 f829 	bl	140fc <z_impl_z_log_msg_static_create>
   1e0aa:	46a5      	mov	sp, r4
		return 0;
   1e0ac:	e7d5      	b.n	1e05a <l2cap_recv+0x96>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1e0ae:	f06f 051b 	mvn.w	r5, #27
   1e0b2:	e7db      	b.n	1e06c <l2cap_recv+0xa8>
	if (!hdr->ident) {
   1e0b4:	786b      	ldrb	r3, [r5, #1]
   1e0b6:	b14b      	cbz	r3, 1e0cc <l2cap_recv+0x108>
	switch (hdr->code) {
   1e0b8:	782b      	ldrb	r3, [r5, #0]
   1e0ba:	2b01      	cmp	r3, #1
   1e0bc:	d0cd      	beq.n	1e05a <l2cap_recv+0x96>
   1e0be:	2b13      	cmp	r3, #19
   1e0c0:	d125      	bne.n	1e10e <l2cap_recv+0x14a>
		le_conn_param_rsp(l2cap, buf);
   1e0c2:	4621      	mov	r1, r4
   1e0c4:	4630      	mov	r0, r6
   1e0c6:	f7ff fe77 	bl	1ddb8 <le_conn_param_rsp>
		break;
   1e0ca:	e7c6      	b.n	1e05a <l2cap_recv+0x96>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1e0cc:	4b36      	ldr	r3, [pc, #216]	; (1e1a8 <l2cap_recv+0x1e4>)
   1e0ce:	61fb      	str	r3, [r7, #28]
   1e0d0:	2302      	movs	r3, #2
   1e0d2:	713b      	strb	r3, [r7, #4]
   1e0d4:	2300      	movs	r3, #0
   1e0d6:	717b      	strb	r3, [r7, #5]
   1e0d8:	71bb      	strb	r3, [r7, #6]
   1e0da:	71fb      	strb	r3, [r7, #7]
   1e0dc:	687a      	ldr	r2, [r7, #4]
   1e0de:	61ba      	str	r2, [r7, #24]
   1e0e0:	4619      	mov	r1, r3
   1e0e2:	f363 0100 	bfi	r1, r3, #0, #1
   1e0e6:	f363 0141 	bfi	r1, r3, #1, #1
   1e0ea:	f363 0182 	bfi	r1, r3, #2, #1
   1e0ee:	f363 01c5 	bfi	r1, r3, #3, #3
   1e0f2:	2201      	movs	r2, #1
   1e0f4:	f362 1188 	bfi	r1, r2, #6, #3
   1e0f8:	2208      	movs	r2, #8
   1e0fa:	f362 2153 	bfi	r1, r2, #9, #11
   1e0fe:	f363 511f 	bfi	r1, r3, #20, #12
   1e102:	f107 0218 	add.w	r2, r7, #24
   1e106:	4827      	ldr	r0, [pc, #156]	; (1e1a4 <l2cap_recv+0x1e0>)
   1e108:	f7f5 fff8 	bl	140fc <z_impl_z_log_msg_static_create>
		return 0;
   1e10c:	e7a5      	b.n	1e05a <l2cap_recv+0x96>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1e10e:	466c      	mov	r4, sp
   1e110:	b088      	sub	sp, #32
   1e112:	a902      	add	r1, sp, #8
   1e114:	f111 0210 	adds.w	r2, r1, #16
   1e118:	d010      	beq.n	1e13c <l2cap_recv+0x178>
   1e11a:	200c      	movs	r0, #12
   1e11c:	b152      	cbz	r2, 1e134 <l2cap_recv+0x170>
   1e11e:	4684      	mov	ip, r0
   1e120:	2804      	cmp	r0, #4
   1e122:	dd03      	ble.n	1e12c <l2cap_recv+0x168>
   1e124:	f8df e084 	ldr.w	lr, [pc, #132]	; 1e1ac <l2cap_recv+0x1e8>
   1e128:	f8c1 e014 	str.w	lr, [r1, #20]
   1e12c:	f1bc 0f08 	cmp.w	ip, #8
   1e130:	dd07      	ble.n	1e142 <l2cap_recv+0x17e>
   1e132:	618b      	str	r3, [r1, #24]
   1e134:	280b      	cmp	r0, #11
   1e136:	dd2e      	ble.n	1e196 <l2cap_recv+0x1d2>
   1e138:	230c      	movs	r3, #12
   1e13a:	e004      	b.n	1e146 <l2cap_recv+0x182>
   1e13c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e140:	e7ec      	b.n	1e11c <l2cap_recv+0x158>
   1e142:	f06f 031b 	mvn.w	r3, #27
   1e146:	b13a      	cbz	r2, 1e158 <l2cap_recv+0x194>
   1e148:	2003      	movs	r0, #3
   1e14a:	7138      	strb	r0, [r7, #4]
   1e14c:	2000      	movs	r0, #0
   1e14e:	7178      	strb	r0, [r7, #5]
   1e150:	71b8      	strb	r0, [r7, #6]
   1e152:	71f8      	strb	r0, [r7, #7]
   1e154:	6878      	ldr	r0, [r7, #4]
   1e156:	6108      	str	r0, [r1, #16]
   1e158:	2100      	movs	r1, #0
   1e15a:	f36f 0100 	bfc	r1, #0, #1
   1e15e:	f36f 0141 	bfc	r1, #1, #1
   1e162:	f36f 0182 	bfc	r1, #2, #1
   1e166:	f36f 01c5 	bfc	r1, #3, #3
   1e16a:	2002      	movs	r0, #2
   1e16c:	f360 1188 	bfi	r1, r0, #6, #3
   1e170:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1e174:	f363 2153 	bfi	r1, r3, #9, #11
   1e178:	f36f 511f 	bfc	r1, #20, #12
   1e17c:	2300      	movs	r3, #0
   1e17e:	4809      	ldr	r0, [pc, #36]	; (1e1a4 <l2cap_recv+0x1e0>)
   1e180:	f7f5 ffbc 	bl	140fc <z_impl_z_log_msg_static_create>
   1e184:	46a5      	mov	sp, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1e186:	7869      	ldrb	r1, [r5, #1]
   1e188:	6830      	ldr	r0, [r6, #0]
   1e18a:	2200      	movs	r2, #0
   1e18c:	9200      	str	r2, [sp, #0]
   1e18e:	4613      	mov	r3, r2
   1e190:	f00f fa88 	bl	2d6a4 <l2cap_send_reject>
		break;
   1e194:	e761      	b.n	1e05a <l2cap_recv+0x96>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1e196:	f06f 031b 	mvn.w	r3, #27
   1e19a:	e7d4      	b.n	1e146 <l2cap_recv+0x182>
   1e19c:	00034338 	.word	0x00034338
   1e1a0:	00034318 	.word	0x00034318
   1e1a4:	00031d0c 	.word	0x00031d0c
   1e1a8:	0003435c 	.word	0x0003435c
   1e1ac:	00034380 	.word	0x00034380

0001e1b0 <bt_l2cap_recv>:
{
   1e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1b4:	b088      	sub	sp, #32
   1e1b6:	af00      	add	r7, sp, #0
   1e1b8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1e1ba:	8a0b      	ldrh	r3, [r1, #16]
   1e1bc:	2b03      	cmp	r3, #3
   1e1be:	d915      	bls.n	1e1ec <bt_l2cap_recv+0x3c>
   1e1c0:	4606      	mov	r6, r0
   1e1c2:	4615      	mov	r5, r2
   1e1c4:	2104      	movs	r1, #4
   1e1c6:	f104 000c 	add.w	r0, r4, #12
   1e1ca:	f010 ff0c 	bl	2efe6 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1e1ce:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1e1d2:	4641      	mov	r1, r8
   1e1d4:	4630      	mov	r0, r6
   1e1d6:	f00f fa89 	bl	2d6ec <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e1da:	b358      	cbz	r0, 1e234 <bt_l2cap_recv+0x84>
	l2cap_chan_recv(chan, buf, complete);
   1e1dc:	462a      	mov	r2, r5
   1e1de:	4621      	mov	r1, r4
   1e1e0:	f00f f9f1 	bl	2d5c6 <l2cap_chan_recv>
}
   1e1e4:	3720      	adds	r7, #32
   1e1e6:	46bd      	mov	sp, r7
   1e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Too small L2CAP PDU received");
   1e1ec:	4b32      	ldr	r3, [pc, #200]	; (1e2b8 <bt_l2cap_recv+0x108>)
   1e1ee:	61fb      	str	r3, [r7, #28]
   1e1f0:	2302      	movs	r3, #2
   1e1f2:	713b      	strb	r3, [r7, #4]
   1e1f4:	2300      	movs	r3, #0
   1e1f6:	717b      	strb	r3, [r7, #5]
   1e1f8:	71bb      	strb	r3, [r7, #6]
   1e1fa:	71fb      	strb	r3, [r7, #7]
   1e1fc:	687a      	ldr	r2, [r7, #4]
   1e1fe:	61ba      	str	r2, [r7, #24]
   1e200:	4619      	mov	r1, r3
   1e202:	f363 0100 	bfi	r1, r3, #0, #1
   1e206:	f363 0141 	bfi	r1, r3, #1, #1
   1e20a:	f363 0182 	bfi	r1, r3, #2, #1
   1e20e:	f363 01c5 	bfi	r1, r3, #3, #3
   1e212:	2201      	movs	r2, #1
   1e214:	f362 1188 	bfi	r1, r2, #6, #3
   1e218:	2208      	movs	r2, #8
   1e21a:	f362 2153 	bfi	r1, r2, #9, #11
   1e21e:	f363 511f 	bfi	r1, r3, #20, #12
   1e222:	f107 0218 	add.w	r2, r7, #24
   1e226:	4825      	ldr	r0, [pc, #148]	; (1e2bc <bt_l2cap_recv+0x10c>)
   1e228:	f7f5 ff68 	bl	140fc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1e22c:	4620      	mov	r0, r4
   1e22e:	f010 fe67 	bl	2ef00 <net_buf_unref>
		return;
   1e232:	e7d7      	b.n	1e1e4 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1e234:	466d      	mov	r5, sp
   1e236:	b088      	sub	sp, #32
   1e238:	466b      	mov	r3, sp
   1e23a:	f113 0210 	adds.w	r2, r3, #16
   1e23e:	d00e      	beq.n	1e25e <bt_l2cap_recv+0xae>
   1e240:	210c      	movs	r1, #12
   1e242:	b142      	cbz	r2, 1e256 <bt_l2cap_recv+0xa6>
   1e244:	4608      	mov	r0, r1
   1e246:	2904      	cmp	r1, #4
   1e248:	dd01      	ble.n	1e24e <bt_l2cap_recv+0x9e>
   1e24a:	4e1d      	ldr	r6, [pc, #116]	; (1e2c0 <bt_l2cap_recv+0x110>)
   1e24c:	615e      	str	r6, [r3, #20]
   1e24e:	2808      	cmp	r0, #8
   1e250:	dd08      	ble.n	1e264 <bt_l2cap_recv+0xb4>
   1e252:	f8c3 8018 	str.w	r8, [r3, #24]
   1e256:	290b      	cmp	r1, #11
   1e258:	dd2a      	ble.n	1e2b0 <bt_l2cap_recv+0x100>
   1e25a:	260c      	movs	r6, #12
   1e25c:	e004      	b.n	1e268 <bt_l2cap_recv+0xb8>
   1e25e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e262:	e7ee      	b.n	1e242 <bt_l2cap_recv+0x92>
   1e264:	f06f 061b 	mvn.w	r6, #27
   1e268:	b13a      	cbz	r2, 1e27a <bt_l2cap_recv+0xca>
   1e26a:	2103      	movs	r1, #3
   1e26c:	7139      	strb	r1, [r7, #4]
   1e26e:	2100      	movs	r1, #0
   1e270:	7179      	strb	r1, [r7, #5]
   1e272:	71b9      	strb	r1, [r7, #6]
   1e274:	71f9      	strb	r1, [r7, #7]
   1e276:	6878      	ldr	r0, [r7, #4]
   1e278:	6118      	str	r0, [r3, #16]
   1e27a:	2100      	movs	r1, #0
   1e27c:	f36f 0100 	bfc	r1, #0, #1
   1e280:	f36f 0141 	bfc	r1, #1, #1
   1e284:	f36f 0182 	bfc	r1, #2, #1
   1e288:	f36f 01c5 	bfc	r1, #3, #3
   1e28c:	2302      	movs	r3, #2
   1e28e:	f363 1188 	bfi	r1, r3, #6, #3
   1e292:	f3c6 030a 	ubfx	r3, r6, #0, #11
   1e296:	f363 2153 	bfi	r1, r3, #9, #11
   1e29a:	f36f 511f 	bfc	r1, #20, #12
   1e29e:	2300      	movs	r3, #0
   1e2a0:	4806      	ldr	r0, [pc, #24]	; (1e2bc <bt_l2cap_recv+0x10c>)
   1e2a2:	f7f5 ff2b 	bl	140fc <z_impl_z_log_msg_static_create>
   1e2a6:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1e2a8:	4620      	mov	r0, r4
   1e2aa:	f010 fe29 	bl	2ef00 <net_buf_unref>
		return;
   1e2ae:	e799      	b.n	1e1e4 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1e2b0:	f06f 061b 	mvn.w	r6, #27
   1e2b4:	e7d8      	b.n	1e268 <bt_l2cap_recv+0xb8>
   1e2b6:	bf00      	nop
   1e2b8:	000343a8 	.word	0x000343a8
   1e2bc:	00031d0c 	.word	0x00031d0c
   1e2c0:	000343c8 	.word	0x000343c8

0001e2c4 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1e2c4:	2852      	cmp	r0, #82	; 0x52
   1e2c6:	d833      	bhi.n	1e330 <att_op_get_type+0x6c>
   1e2c8:	281b      	cmp	r0, #27
   1e2ca:	d321      	bcc.n	1e310 <att_op_get_type+0x4c>
   1e2cc:	f1a0 031b 	sub.w	r3, r0, #27
   1e2d0:	2b37      	cmp	r3, #55	; 0x37
   1e2d2:	d82f      	bhi.n	1e334 <att_op_get_type+0x70>
   1e2d4:	e8df f003 	tbb	[pc, r3]
   1e2d8:	3b392e37 	.word	0x3b392e37
   1e2dc:	2e352a2e 	.word	0x2e352a2e
   1e2e0:	2e2e2e37 	.word	0x2e2e2e37
   1e2e4:	2e2e2e2e 	.word	0x2e2e2e2e
   1e2e8:	2e2e2e2e 	.word	0x2e2e2e2e
   1e2ec:	2e2e2e2e 	.word	0x2e2e2e2e
   1e2f0:	2e2e2e2e 	.word	0x2e2e2e2e
   1e2f4:	2e2e2e2e 	.word	0x2e2e2e2e
   1e2f8:	2e2e2e2e 	.word	0x2e2e2e2e
   1e2fc:	2e2e2e2e 	.word	0x2e2e2e2e
   1e300:	2e2e2e2e 	.word	0x2e2e2e2e
   1e304:	2e2e2e2e 	.word	0x2e2e2e2e
   1e308:	2e2e2e2e 	.word	0x2e2e2e2e
   1e30c:	332e2e2e 	.word	0x332e2e2e
   1e310:	2819      	cmp	r0, #25
   1e312:	d80f      	bhi.n	1e334 <att_op_get_type+0x70>
   1e314:	b243      	sxtb	r3, r0
   1e316:	b16b      	cbz	r3, 1e334 <att_op_get_type+0x70>
   1e318:	2301      	movs	r3, #1
   1e31a:	4083      	lsls	r3, r0
   1e31c:	4a10      	ldr	r2, [pc, #64]	; (1e360 <att_op_get_type+0x9c>)
   1e31e:	401a      	ands	r2, r3
   1e320:	b9ba      	cbnz	r2, 1e352 <att_op_get_type+0x8e>
   1e322:	4a10      	ldr	r2, [pc, #64]	; (1e364 <att_op_get_type+0xa0>)
   1e324:	401a      	ands	r2, r3
   1e326:	b12a      	cbz	r2, 1e334 <att_op_get_type+0x70>
   1e328:	2001      	movs	r0, #1
   1e32a:	4770      	bx	lr
   1e32c:	2001      	movs	r0, #1
   1e32e:	4770      	bx	lr
   1e330:	28d2      	cmp	r0, #210	; 0xd2
   1e332:	d010      	beq.n	1e356 <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   1e334:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e338:	d10f      	bne.n	1e35a <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1e33a:	2006      	movs	r0, #6
   1e33c:	4770      	bx	lr
		return ATT_COMMAND;
   1e33e:	2000      	movs	r0, #0
   1e340:	4770      	bx	lr
		return ATT_RESPONSE;
   1e342:	2002      	movs	r0, #2
   1e344:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1e346:	2003      	movs	r0, #3
   1e348:	4770      	bx	lr
		return ATT_INDICATION;
   1e34a:	2005      	movs	r0, #5
   1e34c:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1e34e:	2004      	movs	r0, #4
   1e350:	4770      	bx	lr
		return ATT_RESPONSE;
   1e352:	2002      	movs	r0, #2
   1e354:	4770      	bx	lr
		return ATT_COMMAND;
   1e356:	2000      	movs	r0, #0
   1e358:	4770      	bx	lr
		return ATT_COMMAND;
   1e35a:	2000      	movs	r0, #0
}
   1e35c:	4770      	bx	lr
   1e35e:	bf00      	nop
   1e360:	028aaaaa 	.word	0x028aaaaa
   1e364:	01455554 	.word	0x01455554

0001e368 <att_cb>:
{
   1e368:	b508      	push	{r3, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1e36a:	68c3      	ldr	r3, [r0, #12]
   1e36c:	7818      	ldrb	r0, [r3, #0]
   1e36e:	f7ff ffa9 	bl	1e2c4 <att_op_get_type>
	switch (op_type) {
   1e372:	2805      	cmp	r0, #5
   1e374:	d80a      	bhi.n	1e38c <att_cb+0x24>
   1e376:	e8df f000 	tbb	[pc, r0]
   1e37a:	0507      	.short	0x0507
   1e37c:	050b0703 	.word	0x050b0703
   1e380:	4804      	ldr	r0, [pc, #16]	; (1e394 <att_cb+0x2c>)
   1e382:	e000      	b.n	1e386 <att_cb+0x1e>
		return att_req_sent;
   1e384:	4804      	ldr	r0, [pc, #16]	; (1e398 <att_cb+0x30>)
}
   1e386:	bd08      	pop	{r3, pc}
		return att_tx_complete;
   1e388:	4804      	ldr	r0, [pc, #16]	; (1e39c <att_cb+0x34>)
   1e38a:	e7fc      	b.n	1e386 <att_cb+0x1e>
	return att_unknown;
   1e38c:	4804      	ldr	r0, [pc, #16]	; (1e3a0 <att_cb+0x38>)
   1e38e:	e7fa      	b.n	1e386 <att_cb+0x1e>
		return att_cfm_sent;
   1e390:	4804      	ldr	r0, [pc, #16]	; (1e3a4 <att_cb+0x3c>)
   1e392:	e7f8      	b.n	1e386 <att_cb+0x1e>
   1e394:	0002dfe9 	.word	0x0002dfe9
   1e398:	0002dfb1 	.word	0x0002dfb1
   1e39c:	0002df95 	.word	0x0002df95
   1e3a0:	0002df79 	.word	0x0002df79
   1e3a4:	0002dfcd 	.word	0x0002dfcd

0001e3a8 <tx_meta_data_alloc>:
{
   1e3a8:	b538      	push	{r3, r4, r5, lr}
   1e3aa:	4605      	mov	r5, r0
   1e3ac:	460c      	mov	r4, r1
	return z_impl_z_current_get();
   1e3ae:	f008 fd15 	bl	26ddc <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1e3b2:	4b07      	ldr	r3, [pc, #28]	; (1e3d0 <tx_meta_data_alloc+0x28>)
   1e3b4:	4283      	cmp	r3, r0
   1e3b6:	d005      	beq.n	1e3c4 <tx_meta_data_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1e3b8:	462a      	mov	r2, r5
   1e3ba:	4623      	mov	r3, r4
   1e3bc:	4805      	ldr	r0, [pc, #20]	; (1e3d4 <tx_meta_data_alloc+0x2c>)
   1e3be:	f007 ff17 	bl	261f0 <z_impl_k_queue_get>
}
   1e3c2:	bd38      	pop	{r3, r4, r5, pc}
   1e3c4:	2200      	movs	r2, #0
   1e3c6:	2300      	movs	r3, #0
   1e3c8:	4802      	ldr	r0, [pc, #8]	; (1e3d4 <tx_meta_data_alloc+0x2c>)
   1e3ca:	f007 ff11 	bl	261f0 <z_impl_k_queue_get>
		return k_fifo_get(&free_att_tx_meta_data, K_NO_WAIT);
   1e3ce:	e7f8      	b.n	1e3c2 <tx_meta_data_alloc+0x1a>
   1e3d0:	20002f60 	.word	0x20002f60
   1e3d4:	20000b18 	.word	0x20000b18

0001e3d8 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1e3d8:	b510      	push	{r4, lr}
   1e3da:	b094      	sub	sp, #80	; 0x50
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1e3dc:	7a83      	ldrb	r3, [r0, #10]
   1e3de:	2b07      	cmp	r3, #7
   1e3e0:	d10f      	bne.n	1e402 <att_get+0x2a>
		LOG_WRN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1e3e2:	2104      	movs	r1, #4
   1e3e4:	f00f f982 	bl	2d6ec <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e3e8:	4604      	mov	r4, r0
   1e3ea:	b370      	cbz	r0, 1e44a <att_get+0x72>
		LOG_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1e3ec:	2102      	movs	r1, #2
   1e3ee:	3030      	adds	r0, #48	; 0x30
   1e3f0:	f00f fa2c 	bl	2d84c <atomic_test_bit>
   1e3f4:	2800      	cmp	r0, #0
   1e3f6:	d04c      	beq.n	1e492 <att_get+0xba>
		LOG_ERR("ATT channel not connected");
		return NULL;
	}

	return att_chan->att;
   1e3f8:	f854 4c04 	ldr.w	r4, [r4, #-4]
}
   1e3fc:	4620      	mov	r0, r4
   1e3fe:	b014      	add	sp, #80	; 0x50
   1e400:	bd10      	pop	{r4, pc}
		LOG_WRN("Not connected");
   1e402:	4b36      	ldr	r3, [pc, #216]	; (1e4dc <att_get+0x104>)
   1e404:	9313      	str	r3, [sp, #76]	; 0x4c
   1e406:	2302      	movs	r3, #2
   1e408:	f88d 3004 	strb.w	r3, [sp, #4]
   1e40c:	2400      	movs	r4, #0
   1e40e:	f88d 4005 	strb.w	r4, [sp, #5]
   1e412:	f88d 4006 	strb.w	r4, [sp, #6]
   1e416:	f88d 4007 	strb.w	r4, [sp, #7]
   1e41a:	9a01      	ldr	r2, [sp, #4]
   1e41c:	9212      	str	r2, [sp, #72]	; 0x48
   1e41e:	4621      	mov	r1, r4
   1e420:	f364 0100 	bfi	r1, r4, #0, #1
   1e424:	f364 0141 	bfi	r1, r4, #1, #1
   1e428:	f364 0182 	bfi	r1, r4, #2, #1
   1e42c:	f364 01c5 	bfi	r1, r4, #3, #3
   1e430:	f363 1188 	bfi	r1, r3, #6, #3
   1e434:	2308      	movs	r3, #8
   1e436:	f363 2153 	bfi	r1, r3, #9, #11
   1e43a:	f364 511f 	bfi	r1, r4, #20, #12
   1e43e:	4623      	mov	r3, r4
   1e440:	aa12      	add	r2, sp, #72	; 0x48
   1e442:	4827      	ldr	r0, [pc, #156]	; (1e4e0 <att_get+0x108>)
   1e444:	f7f5 fe5a 	bl	140fc <z_impl_z_log_msg_static_create>
		return NULL;
   1e448:	e7d8      	b.n	1e3fc <att_get+0x24>
		LOG_ERR("Unable to find ATT channel");
   1e44a:	4b26      	ldr	r3, [pc, #152]	; (1e4e4 <att_get+0x10c>)
   1e44c:	930d      	str	r3, [sp, #52]	; 0x34
   1e44e:	2302      	movs	r3, #2
   1e450:	f88d 3004 	strb.w	r3, [sp, #4]
   1e454:	2300      	movs	r3, #0
   1e456:	f88d 3005 	strb.w	r3, [sp, #5]
   1e45a:	f88d 3006 	strb.w	r3, [sp, #6]
   1e45e:	f88d 3007 	strb.w	r3, [sp, #7]
   1e462:	9a01      	ldr	r2, [sp, #4]
   1e464:	920c      	str	r2, [sp, #48]	; 0x30
   1e466:	4619      	mov	r1, r3
   1e468:	f363 0100 	bfi	r1, r3, #0, #1
   1e46c:	f363 0141 	bfi	r1, r3, #1, #1
   1e470:	f363 0182 	bfi	r1, r3, #2, #1
   1e474:	f363 01c5 	bfi	r1, r3, #3, #3
   1e478:	2201      	movs	r2, #1
   1e47a:	f362 1188 	bfi	r1, r2, #6, #3
   1e47e:	2208      	movs	r2, #8
   1e480:	f362 2153 	bfi	r1, r2, #9, #11
   1e484:	f363 511f 	bfi	r1, r3, #20, #12
   1e488:	aa0c      	add	r2, sp, #48	; 0x30
   1e48a:	4815      	ldr	r0, [pc, #84]	; (1e4e0 <att_get+0x108>)
   1e48c:	f7f5 fe36 	bl	140fc <z_impl_z_log_msg_static_create>
		return NULL;
   1e490:	e7b4      	b.n	1e3fc <att_get+0x24>
		LOG_ERR("ATT channel not connected");
   1e492:	4b15      	ldr	r3, [pc, #84]	; (1e4e8 <att_get+0x110>)
   1e494:	9307      	str	r3, [sp, #28]
   1e496:	2302      	movs	r3, #2
   1e498:	f88d 3004 	strb.w	r3, [sp, #4]
   1e49c:	2400      	movs	r4, #0
   1e49e:	f88d 4005 	strb.w	r4, [sp, #5]
   1e4a2:	f88d 4006 	strb.w	r4, [sp, #6]
   1e4a6:	f88d 4007 	strb.w	r4, [sp, #7]
   1e4aa:	9b01      	ldr	r3, [sp, #4]
   1e4ac:	9306      	str	r3, [sp, #24]
   1e4ae:	4621      	mov	r1, r4
   1e4b0:	f364 0100 	bfi	r1, r4, #0, #1
   1e4b4:	f364 0141 	bfi	r1, r4, #1, #1
   1e4b8:	f364 0182 	bfi	r1, r4, #2, #1
   1e4bc:	f364 01c5 	bfi	r1, r4, #3, #3
   1e4c0:	2301      	movs	r3, #1
   1e4c2:	f363 1188 	bfi	r1, r3, #6, #3
   1e4c6:	2308      	movs	r3, #8
   1e4c8:	f363 2153 	bfi	r1, r3, #9, #11
   1e4cc:	f364 511f 	bfi	r1, r4, #20, #12
   1e4d0:	4623      	mov	r3, r4
   1e4d2:	aa06      	add	r2, sp, #24
   1e4d4:	4802      	ldr	r0, [pc, #8]	; (1e4e0 <att_get+0x108>)
   1e4d6:	f7f5 fe11 	bl	140fc <z_impl_z_log_msg_static_create>
		return NULL;
   1e4da:	e78f      	b.n	1e3fc <att_get+0x24>
   1e4dc:	00034428 	.word	0x00034428
   1e4e0:	00031cdc 	.word	0x00031cdc
   1e4e4:	00034438 	.word	0x00034438
   1e4e8:	00034454 	.word	0x00034454

0001e4ec <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1e4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4ee:	b083      	sub	sp, #12
   1e4f0:	af00      	add	r7, sp, #0
   1e4f2:	4605      	mov	r5, r0
   1e4f4:	460e      	mov	r6, r1
	return list->head;
   1e4f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1e4f8:	b103      	cbz	r3, 1e4fc <att_chan_new+0x10>
   1e4fa:	3b88      	subs	r3, #136	; 0x88
   1e4fc:	607b      	str	r3, [r7, #4]
	int quota = 0;
   1e4fe:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1e500:	e002      	b.n	1e508 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   1e502:	3201      	adds	r2, #1
   1e504:	e005      	b.n	1e512 <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1e506:	607b      	str	r3, [r7, #4]
   1e508:	687c      	ldr	r4, [r7, #4]
   1e50a:	b16c      	cbz	r4, 1e528 <att_chan_new+0x3c>
		if (chan->att == att) {
   1e50c:	6823      	ldr	r3, [r4, #0]
   1e50e:	42ab      	cmp	r3, r5
   1e510:	d0f7      	beq.n	1e502 <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   1e512:	2a01      	cmp	r2, #1
   1e514:	d06e      	beq.n	1e5f4 <att_chan_new+0x108>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e516:	f114 0388 	adds.w	r3, r4, #136	; 0x88
   1e51a:	d0f4      	beq.n	1e506 <att_chan_new+0x1a>
	return node->next;
   1e51c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1e520:	2b00      	cmp	r3, #0
   1e522:	d0f0      	beq.n	1e506 <att_chan_new+0x1a>
   1e524:	3b88      	subs	r3, #136	; 0x88
   1e526:	e7ee      	b.n	1e506 <att_chan_new+0x1a>
			LOG_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1e528:	2200      	movs	r2, #0
   1e52a:	2300      	movs	r3, #0
   1e52c:	1d39      	adds	r1, r7, #4
   1e52e:	4832      	ldr	r0, [pc, #200]	; (1e5f8 <att_chan_new+0x10c>)
   1e530:	f007 fc5c 	bl	25dec <k_mem_slab_alloc>
   1e534:	bb08      	cbnz	r0, 1e57a <att_chan_new+0x8e>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1e536:	2290      	movs	r2, #144	; 0x90
   1e538:	2100      	movs	r1, #0
   1e53a:	6878      	ldr	r0, [r7, #4]
   1e53c:	f00e f985 	bl	2c84a <memset>
	chan->chan.chan.ops = &ops;
   1e540:	6878      	ldr	r0, [r7, #4]
   1e542:	4b2e      	ldr	r3, [pc, #184]	; (1e5fc <att_chan_new+0x110>)
   1e544:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   1e546:	303c      	adds	r0, #60	; 0x3c
	z_impl_k_queue_init(queue);
   1e548:	f012 fc03 	bl	30d52 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1e54c:	687b      	ldr	r3, [r7, #4]
   1e54e:	3334      	adds	r3, #52	; 0x34
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e550:	f3bf 8f5b 	dmb	ish
   1e554:	e853 2f00 	ldrex	r2, [r3]
   1e558:	e843 6100 	strex	r1, r6, [r3]
   1e55c:	2900      	cmp	r1, #0
   1e55e:	d1f9      	bne.n	1e554 <att_chan_new+0x68>
   1e560:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1e564:	687b      	ldr	r3, [r7, #4]
   1e566:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1e568:	6879      	ldr	r1, [r7, #4]
   1e56a:	4628      	mov	r0, r5
   1e56c:	f00f f97b 	bl	2d866 <att_chan_attach>

	return chan;
   1e570:	687c      	ldr	r4, [r7, #4]
}
   1e572:	4620      	mov	r0, r4
   1e574:	370c      	adds	r7, #12
   1e576:	46bd      	mov	sp, r7
   1e578:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1e57a:	682d      	ldr	r5, [r5, #0]
   1e57c:	466e      	mov	r6, sp
   1e57e:	b088      	sub	sp, #32
   1e580:	466b      	mov	r3, sp
   1e582:	f113 0210 	adds.w	r2, r3, #16
   1e586:	d02f      	beq.n	1e5e8 <att_chan_new+0xfc>
   1e588:	210c      	movs	r1, #12
   1e58a:	b14a      	cbz	r2, 1e5a0 <att_chan_new+0xb4>
   1e58c:	4608      	mov	r0, r1
   1e58e:	2904      	cmp	r1, #4
   1e590:	dd03      	ble.n	1e59a <att_chan_new+0xae>
   1e592:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1e600 <att_chan_new+0x114>
   1e596:	f8c3 c014 	str.w	ip, [r3, #20]
   1e59a:	2808      	cmp	r0, #8
   1e59c:	dd00      	ble.n	1e5a0 <att_chan_new+0xb4>
   1e59e:	619d      	str	r5, [r3, #24]
   1e5a0:	290b      	cmp	r1, #11
   1e5a2:	dd24      	ble.n	1e5ee <att_chan_new+0x102>
   1e5a4:	250c      	movs	r5, #12
   1e5a6:	b13a      	cbz	r2, 1e5b8 <att_chan_new+0xcc>
   1e5a8:	2103      	movs	r1, #3
   1e5aa:	7039      	strb	r1, [r7, #0]
   1e5ac:	2100      	movs	r1, #0
   1e5ae:	7079      	strb	r1, [r7, #1]
   1e5b0:	70b9      	strb	r1, [r7, #2]
   1e5b2:	70f9      	strb	r1, [r7, #3]
   1e5b4:	6838      	ldr	r0, [r7, #0]
   1e5b6:	6118      	str	r0, [r3, #16]
   1e5b8:	2100      	movs	r1, #0
   1e5ba:	f36f 0100 	bfc	r1, #0, #1
   1e5be:	f36f 0141 	bfc	r1, #1, #1
   1e5c2:	f36f 0182 	bfc	r1, #2, #1
   1e5c6:	f36f 01c5 	bfc	r1, #3, #3
   1e5ca:	2302      	movs	r3, #2
   1e5cc:	f363 1188 	bfi	r1, r3, #6, #3
   1e5d0:	f3c5 050a 	ubfx	r5, r5, #0, #11
   1e5d4:	f365 2153 	bfi	r1, r5, #9, #11
   1e5d8:	f36f 511f 	bfc	r1, #20, #12
   1e5dc:	2300      	movs	r3, #0
   1e5de:	4809      	ldr	r0, [pc, #36]	; (1e604 <att_chan_new+0x118>)
   1e5e0:	f7f5 fd8c 	bl	140fc <z_impl_z_log_msg_static_create>
   1e5e4:	46b5      	mov	sp, r6
		return NULL;
   1e5e6:	e7c4      	b.n	1e572 <att_chan_new+0x86>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1e5e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e5ec:	e7cd      	b.n	1e58a <att_chan_new+0x9e>
   1e5ee:	f06f 051b 	mvn.w	r5, #27
   1e5f2:	e7d8      	b.n	1e5a6 <att_chan_new+0xba>
			return NULL;
   1e5f4:	2400      	movs	r4, #0
   1e5f6:	e7bc      	b.n	1e572 <att_chan_new+0x86>
   1e5f8:	20000978 	.word	0x20000978
   1e5fc:	20000770 	.word	0x20000770
   1e600:	00034470 	.word	0x00034470
   1e604:	00031cdc 	.word	0x00031cdc

0001e608 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1e608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e60a:	b083      	sub	sp, #12
   1e60c:	af00      	add	r7, sp, #0
   1e60e:	4606      	mov	r6, r0
   1e610:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1e612:	2200      	movs	r2, #0
   1e614:	2300      	movs	r3, #0
   1e616:	1d39      	adds	r1, r7, #4
   1e618:	482f      	ldr	r0, [pc, #188]	; (1e6d8 <bt_att_accept+0xd0>)
   1e61a:	f007 fbe7 	bl	25dec <k_mem_slab_alloc>
   1e61e:	b9e0      	cbnz	r0, 1e65a <bt_att_accept+0x52>
   1e620:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   1e622:	f008 fbdb 	bl	26ddc <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1e626:	4b2d      	ldr	r3, [pc, #180]	; (1e6dc <bt_att_accept+0xd4>)
   1e628:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   1e62a:	222c      	movs	r2, #44	; 0x2c
   1e62c:	2100      	movs	r1, #0
   1e62e:	6878      	ldr	r0, [r7, #4]
   1e630:	f00e f90b 	bl	2c84a <memset>
	att->conn = conn;
   1e634:	687b      	ldr	r3, [r7, #4]
   1e636:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1e638:	6878      	ldr	r0, [r7, #4]
	list->head = NULL;
   1e63a:	2100      	movs	r1, #0
   1e63c:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1e63e:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1e640:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1e642:	6281      	str	r1, [r0, #40]	; 0x28
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1e644:	f7ff ff52 	bl	1e4ec <att_chan_new>
	if (!chan) {
   1e648:	4603      	mov	r3, r0
   1e64a:	2800      	cmp	r0, #0
   1e64c:	d041      	beq.n	1e6d2 <bt_att_accept+0xca>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1e64e:	3304      	adds	r3, #4
   1e650:	6023      	str	r3, [r4, #0]

	return 0;
}
   1e652:	4628      	mov	r0, r5
   1e654:	370c      	adds	r7, #12
   1e656:	46bd      	mov	sp, r7
   1e658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No available ATT context for conn %p", conn);
   1e65a:	466d      	mov	r5, sp
   1e65c:	b088      	sub	sp, #32
   1e65e:	466b      	mov	r3, sp
   1e660:	f113 0210 	adds.w	r2, r3, #16
   1e664:	d02f      	beq.n	1e6c6 <bt_att_accept+0xbe>
   1e666:	210c      	movs	r1, #12
   1e668:	b13a      	cbz	r2, 1e67a <bt_att_accept+0x72>
   1e66a:	4608      	mov	r0, r1
   1e66c:	2904      	cmp	r1, #4
   1e66e:	dd01      	ble.n	1e674 <bt_att_accept+0x6c>
   1e670:	4c1b      	ldr	r4, [pc, #108]	; (1e6e0 <bt_att_accept+0xd8>)
   1e672:	615c      	str	r4, [r3, #20]
   1e674:	2808      	cmp	r0, #8
   1e676:	dd00      	ble.n	1e67a <bt_att_accept+0x72>
   1e678:	619e      	str	r6, [r3, #24]
   1e67a:	290b      	cmp	r1, #11
   1e67c:	dd26      	ble.n	1e6cc <bt_att_accept+0xc4>
   1e67e:	240c      	movs	r4, #12
   1e680:	b13a      	cbz	r2, 1e692 <bt_att_accept+0x8a>
   1e682:	2103      	movs	r1, #3
   1e684:	7039      	strb	r1, [r7, #0]
   1e686:	2100      	movs	r1, #0
   1e688:	7079      	strb	r1, [r7, #1]
   1e68a:	70b9      	strb	r1, [r7, #2]
   1e68c:	70f9      	strb	r1, [r7, #3]
   1e68e:	6838      	ldr	r0, [r7, #0]
   1e690:	6118      	str	r0, [r3, #16]
   1e692:	2100      	movs	r1, #0
   1e694:	f36f 0100 	bfc	r1, #0, #1
   1e698:	f36f 0141 	bfc	r1, #1, #1
   1e69c:	f36f 0182 	bfc	r1, #2, #1
   1e6a0:	f36f 01c5 	bfc	r1, #3, #3
   1e6a4:	2301      	movs	r3, #1
   1e6a6:	f363 1188 	bfi	r1, r3, #6, #3
   1e6aa:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1e6ae:	f364 2153 	bfi	r1, r4, #9, #11
   1e6b2:	f36f 511f 	bfc	r1, #20, #12
   1e6b6:	2300      	movs	r3, #0
   1e6b8:	480a      	ldr	r0, [pc, #40]	; (1e6e4 <bt_att_accept+0xdc>)
   1e6ba:	f7f5 fd1f 	bl	140fc <z_impl_z_log_msg_static_create>
   1e6be:	46ad      	mov	sp, r5
		return -ENOMEM;
   1e6c0:	f06f 050b 	mvn.w	r5, #11
   1e6c4:	e7c5      	b.n	1e652 <bt_att_accept+0x4a>
		LOG_ERR("No available ATT context for conn %p", conn);
   1e6c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e6ca:	e7cd      	b.n	1e668 <bt_att_accept+0x60>
   1e6cc:	f06f 041b 	mvn.w	r4, #27
   1e6d0:	e7d6      	b.n	1e680 <bt_att_accept+0x78>
		return -ENOMEM;
   1e6d2:	f06f 050b 	mvn.w	r5, #11
   1e6d6:	e7bc      	b.n	1e652 <bt_att_accept+0x4a>
   1e6d8:	2000095c 	.word	0x2000095c
   1e6dc:	20003ffc 	.word	0x20003ffc
   1e6e0:	00034498 	.word	0x00034498
   1e6e4:	00031cdc 	.word	0x00031cdc

0001e6e8 <bt_att_released>:
{
   1e6e8:	b500      	push	{lr}
   1e6ea:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e6ec:	3804      	subs	r0, #4
   1e6ee:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1e6f0:	a901      	add	r1, sp, #4
   1e6f2:	4803      	ldr	r0, [pc, #12]	; (1e700 <bt_att_released+0x18>)
   1e6f4:	f012 f9fc 	bl	30af0 <k_mem_slab_free>
}
   1e6f8:	b003      	add	sp, #12
   1e6fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1e6fe:	bf00      	nop
   1e700:	20000978 	.word	0x20000978

0001e704 <tx_meta_data_free>:
{
   1e704:	b510      	push	{r4, lr}
   1e706:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1e708:	2214      	movs	r2, #20
   1e70a:	2100      	movs	r1, #0
   1e70c:	f00e f89d 	bl	2c84a <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1e710:	4621      	mov	r1, r4
   1e712:	4802      	ldr	r0, [pc, #8]	; (1e71c <tx_meta_data_free+0x18>)
   1e714:	f012 fb29 	bl	30d6a <k_queue_append>
}
   1e718:	bd10      	pop	{r4, pc}
   1e71a:	bf00      	nop
   1e71c:	20000b18 	.word	0x20000b18

0001e720 <chan_send>:
{
   1e720:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e722:	b097      	sub	sp, #92	; 0x5c
   1e724:	4605      	mov	r5, r0
   1e726:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1e728:	698f      	ldr	r7, [r1, #24]
	hdr = (void *)buf->data;
   1e72a:	68ce      	ldr	r6, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1e72c:	2102      	movs	r1, #2
   1e72e:	3034      	adds	r0, #52	; 0x34
   1e730:	f00f f88c 	bl	2d84c <atomic_test_bit>
   1e734:	b340      	cbz	r0, 1e788 <chan_send+0x68>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1e736:	7833      	ldrb	r3, [r6, #0]
   1e738:	2bd2      	cmp	r3, #210	; 0xd2
   1e73a:	d04b      	beq.n	1e7d4 <chan_send+0xb4>
	state->offset = net_buf_simple_headroom(buf);
   1e73c:	f104 000c 	add.w	r0, r4, #12
   1e740:	f010 fc61 	bl	2f006 <net_buf_simple_headroom>
   1e744:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1e748:	8a23      	ldrh	r3, [r4, #16]
   1e74a:	f8ad 300e 	strh.w	r3, [sp, #14]
	data->att_chan = chan;
   1e74e:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1e750:	682b      	ldr	r3, [r5, #0]
   1e752:	681d      	ldr	r5, [r3, #0]
   1e754:	4620      	mov	r0, r4
   1e756:	f7ff fe07 	bl	1e368 <att_cb>
   1e75a:	4603      	mov	r3, r0
   1e75c:	9700      	str	r7, [sp, #0]
   1e75e:	4622      	mov	r2, r4
   1e760:	2104      	movs	r1, #4
   1e762:	4628      	mov	r0, r5
   1e764:	f00e ff7b 	bl	2d65e <bt_l2cap_send_cb>
	if (err) {
   1e768:	4606      	mov	r6, r0
   1e76a:	b150      	cbz	r0, 1e782 <chan_send+0x62>
		if (err == -ENOBUFS) {
   1e76c:	f110 0f69 	cmn.w	r0, #105	; 0x69
   1e770:	d062      	beq.n	1e838 <chan_send+0x118>
	buf->data = buf->__buf + state->offset;
   1e772:	6963      	ldr	r3, [r4, #20]
   1e774:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1e778:	4413      	add	r3, r2
   1e77a:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   1e77c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e780:	8223      	strh	r3, [r4, #16]
}
   1e782:	4630      	mov	r0, r6
   1e784:	b017      	add	sp, #92	; 0x5c
   1e786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("ATT channel not connected");
   1e788:	4b3d      	ldr	r3, [pc, #244]	; (1e880 <chan_send+0x160>)
   1e78a:	9315      	str	r3, [sp, #84]	; 0x54
   1e78c:	2302      	movs	r3, #2
   1e78e:	f88d 3008 	strb.w	r3, [sp, #8]
   1e792:	2300      	movs	r3, #0
   1e794:	f88d 3009 	strb.w	r3, [sp, #9]
   1e798:	f88d 300a 	strb.w	r3, [sp, #10]
   1e79c:	f88d 300b 	strb.w	r3, [sp, #11]
   1e7a0:	9a02      	ldr	r2, [sp, #8]
   1e7a2:	9214      	str	r2, [sp, #80]	; 0x50
   1e7a4:	4619      	mov	r1, r3
   1e7a6:	f363 0100 	bfi	r1, r3, #0, #1
   1e7aa:	f363 0141 	bfi	r1, r3, #1, #1
   1e7ae:	f363 0182 	bfi	r1, r3, #2, #1
   1e7b2:	f363 01c5 	bfi	r1, r3, #3, #3
   1e7b6:	2201      	movs	r2, #1
   1e7b8:	f362 1188 	bfi	r1, r2, #6, #3
   1e7bc:	2208      	movs	r2, #8
   1e7be:	f362 2153 	bfi	r1, r2, #9, #11
   1e7c2:	f363 511f 	bfi	r1, r3, #20, #12
   1e7c6:	aa14      	add	r2, sp, #80	; 0x50
   1e7c8:	482e      	ldr	r0, [pc, #184]	; (1e884 <chan_send+0x164>)
   1e7ca:	f7f5 fc97 	bl	140fc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e7ce:	f06f 0615 	mvn.w	r6, #21
   1e7d2:	e7d6      	b.n	1e782 <chan_send+0x62>
		err = bt_smp_sign(chan->att->conn, buf);
   1e7d4:	682b      	ldr	r3, [r5, #0]
   1e7d6:	4621      	mov	r1, r4
   1e7d8:	6818      	ldr	r0, [r3, #0]
   1e7da:	f010 fa6b 	bl	2ecb4 <bt_smp_sign>
		if (err) {
   1e7de:	4606      	mov	r6, r0
   1e7e0:	2800      	cmp	r0, #0
   1e7e2:	d0ab      	beq.n	1e73c <chan_send+0x1c>
			LOG_ERR("Error signing data");
   1e7e4:	4b28      	ldr	r3, [pc, #160]	; (1e888 <chan_send+0x168>)
   1e7e6:	9309      	str	r3, [sp, #36]	; 0x24
   1e7e8:	2302      	movs	r3, #2
   1e7ea:	f88d 3008 	strb.w	r3, [sp, #8]
   1e7ee:	2300      	movs	r3, #0
   1e7f0:	f88d 3009 	strb.w	r3, [sp, #9]
   1e7f4:	f88d 300a 	strb.w	r3, [sp, #10]
   1e7f8:	f88d 300b 	strb.w	r3, [sp, #11]
   1e7fc:	9a02      	ldr	r2, [sp, #8]
   1e7fe:	9208      	str	r2, [sp, #32]
   1e800:	4619      	mov	r1, r3
   1e802:	f363 0100 	bfi	r1, r3, #0, #1
   1e806:	f363 0141 	bfi	r1, r3, #1, #1
   1e80a:	f363 0182 	bfi	r1, r3, #2, #1
   1e80e:	f363 01c5 	bfi	r1, r3, #3, #3
   1e812:	2201      	movs	r2, #1
   1e814:	f362 1188 	bfi	r1, r2, #6, #3
   1e818:	2208      	movs	r2, #8
   1e81a:	f362 2153 	bfi	r1, r2, #9, #11
   1e81e:	f363 511f 	bfi	r1, r3, #20, #12
   1e822:	aa08      	add	r2, sp, #32
   1e824:	4817      	ldr	r0, [pc, #92]	; (1e884 <chan_send+0x164>)
   1e826:	f7f5 fc69 	bl	140fc <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1e82a:	69a0      	ldr	r0, [r4, #24]
   1e82c:	f7ff ff6a 	bl	1e704 <tx_meta_data_free>
			net_buf_unref(buf);
   1e830:	4620      	mov	r0, r4
   1e832:	f010 fb65 	bl	2ef00 <net_buf_unref>
			return err;
   1e836:	e7a4      	b.n	1e782 <chan_send+0x62>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1e838:	4b14      	ldr	r3, [pc, #80]	; (1e88c <chan_send+0x16c>)
   1e83a:	930f      	str	r3, [sp, #60]	; 0x3c
   1e83c:	2302      	movs	r3, #2
   1e83e:	f88d 3008 	strb.w	r3, [sp, #8]
   1e842:	2300      	movs	r3, #0
   1e844:	f88d 3009 	strb.w	r3, [sp, #9]
   1e848:	f88d 300a 	strb.w	r3, [sp, #10]
   1e84c:	f88d 300b 	strb.w	r3, [sp, #11]
   1e850:	9a02      	ldr	r2, [sp, #8]
   1e852:	920e      	str	r2, [sp, #56]	; 0x38
   1e854:	4619      	mov	r1, r3
   1e856:	f363 0100 	bfi	r1, r3, #0, #1
   1e85a:	f363 0141 	bfi	r1, r3, #1, #1
   1e85e:	f363 0182 	bfi	r1, r3, #2, #1
   1e862:	f363 01c5 	bfi	r1, r3, #3, #3
   1e866:	2201      	movs	r2, #1
   1e868:	f362 1188 	bfi	r1, r2, #6, #3
   1e86c:	2208      	movs	r2, #8
   1e86e:	f362 2153 	bfi	r1, r2, #9, #11
   1e872:	f363 511f 	bfi	r1, r3, #20, #12
   1e876:	aa0e      	add	r2, sp, #56	; 0x38
   1e878:	4802      	ldr	r0, [pc, #8]	; (1e884 <chan_send+0x164>)
   1e87a:	f7f5 fc3f 	bl	140fc <z_impl_z_log_msg_static_create>
   1e87e:	e778      	b.n	1e772 <chan_send+0x52>
   1e880:	00034454 	.word	0x00034454
   1e884:	00031cdc 	.word	0x00031cdc
   1e888:	000344c0 	.word	0x000344c0
   1e88c:	000344d4 	.word	0x000344d4

0001e890 <read_group_cb>:
{
   1e890:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e892:	b085      	sub	sp, #20
   1e894:	4605      	mov	r5, r0
   1e896:	460e      	mov	r6, r1
   1e898:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1e89a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1e89c:	2300      	movs	r3, #0
   1e89e:	f88d 3008 	strb.w	r3, [sp, #8]
   1e8a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1e8a6:	f8ad 300a 	strh.w	r3, [sp, #10]
   1e8aa:	a902      	add	r1, sp, #8
   1e8ac:	6800      	ldr	r0, [r0, #0]
   1e8ae:	f00e f82a 	bl	2c906 <bt_uuid_cmp>
   1e8b2:	b158      	cbz	r0, 1e8cc <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e8b4:	2300      	movs	r3, #0
   1e8b6:	f88d 300c 	strb.w	r3, [sp, #12]
   1e8ba:	f642 0301 	movw	r3, #10241	; 0x2801
   1e8be:	f8ad 300e 	strh.w	r3, [sp, #14]
   1e8c2:	a903      	add	r1, sp, #12
   1e8c4:	6828      	ldr	r0, [r5, #0]
   1e8c6:	f00e f81e 	bl	2c906 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1e8ca:	bb28      	cbnz	r0, 1e918 <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1e8cc:	6861      	ldr	r1, [r4, #4]
   1e8ce:	6828      	ldr	r0, [r5, #0]
   1e8d0:	f00e f819 	bl	2c906 <bt_uuid_cmp>
   1e8d4:	bb40      	cbnz	r0, 1e928 <read_group_cb+0x98>
	if (data->rsp->len &&
   1e8d6:	68e3      	ldr	r3, [r4, #12]
   1e8d8:	781a      	ldrb	r2, [r3, #0]
   1e8da:	b12a      	cbz	r2, 1e8e8 <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1e8dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1e8de:	68a1      	ldr	r1, [r4, #8]
   1e8e0:	8a09      	ldrh	r1, [r1, #16]
   1e8e2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1e8e4:	4293      	cmp	r3, r2
   1e8e6:	db24      	blt.n	1e932 <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1e8e8:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1e8ea:	2104      	movs	r1, #4
   1e8ec:	300c      	adds	r0, #12
   1e8ee:	f010 fb52 	bl	2ef96 <net_buf_simple_add>
   1e8f2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1e8f4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1e8f6:	6923      	ldr	r3, [r4, #16]
   1e8f8:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1e8fa:	9401      	str	r4, [sp, #4]
   1e8fc:	4b10      	ldr	r3, [pc, #64]	; (1e940 <read_group_cb+0xb0>)
   1e8fe:	9300      	str	r3, [sp, #0]
   1e900:	2300      	movs	r3, #0
   1e902:	68a2      	ldr	r2, [r4, #8]
   1e904:	4629      	mov	r1, r5
   1e906:	4638      	mov	r0, r7
   1e908:	f00f f980 	bl	2dc0c <att_chan_read>
	if (read < 0) {
   1e90c:	2800      	cmp	r0, #0
   1e90e:	db12      	blt.n	1e936 <read_group_cb+0xa6>
	if (!data->group) {
   1e910:	6923      	ldr	r3, [r4, #16]
   1e912:	b193      	cbz	r3, 1e93a <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1e914:	2001      	movs	r0, #1
   1e916:	e00a      	b.n	1e92e <read_group_cb+0x9e>
		if (data->group &&
   1e918:	6923      	ldr	r3, [r4, #16]
   1e91a:	b11b      	cbz	r3, 1e924 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1e91c:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1e91e:	42b2      	cmp	r2, r6
   1e920:	d200      	bcs.n	1e924 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1e922:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1e924:	2001      	movs	r0, #1
   1e926:	e002      	b.n	1e92e <read_group_cb+0x9e>
		data->group = NULL;
   1e928:	2300      	movs	r3, #0
   1e92a:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1e92c:	2001      	movs	r0, #1
}
   1e92e:	b005      	add	sp, #20
   1e930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1e932:	2000      	movs	r0, #0
   1e934:	e7fb      	b.n	1e92e <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1e936:	2000      	movs	r0, #0
   1e938:	e7f9      	b.n	1e92e <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1e93a:	2000      	movs	r0, #0
   1e93c:	e7f7      	b.n	1e92e <read_group_cb+0x9e>
   1e93e:	bf00      	nop
   1e940:	0002d81f 	.word	0x0002d81f

0001e944 <read_type_cb>:
{
   1e944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e948:	b083      	sub	sp, #12
   1e94a:	4606      	mov	r6, r0
   1e94c:	4688      	mov	r8, r1
   1e94e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1e950:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1e952:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1e954:	6851      	ldr	r1, [r2, #4]
   1e956:	6800      	ldr	r0, [r0, #0]
   1e958:	f00d ffd5 	bl	2c906 <bt_uuid_cmp>
   1e95c:	b120      	cbz	r0, 1e968 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1e95e:	2501      	movs	r5, #1
}
   1e960:	4628      	mov	r0, r5
   1e962:	b003      	add	sp, #12
   1e964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e968:	2295      	movs	r2, #149	; 0x95
   1e96a:	4631      	mov	r1, r6
   1e96c:	4628      	mov	r0, r5
   1e96e:	f010 f878 	bl	2ea62 <bt_gatt_check_perm>
   1e972:	4605      	mov	r5, r0
   1e974:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e976:	b130      	cbz	r0, 1e986 <read_type_cb+0x42>
		if (data->rsp->len) {
   1e978:	68e3      	ldr	r3, [r4, #12]
   1e97a:	781b      	ldrb	r3, [r3, #0]
   1e97c:	b10b      	cbz	r3, 1e982 <read_type_cb+0x3e>
			data->err = 0x00;
   1e97e:	2300      	movs	r3, #0
   1e980:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1e982:	2500      	movs	r5, #0
   1e984:	e7ec      	b.n	1e960 <read_type_cb+0x1c>
	data->err = 0x00;
   1e986:	f04f 0900 	mov.w	r9, #0
   1e98a:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1e98e:	68a0      	ldr	r0, [r4, #8]
   1e990:	f010 fadd 	bl	2ef4e <net_buf_frag_last>
   1e994:	2102      	movs	r1, #2
   1e996:	300c      	adds	r0, #12
   1e998:	f010 fafd 	bl	2ef96 <net_buf_simple_add>
   1e99c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1e99e:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1e9a2:	9401      	str	r4, [sp, #4]
   1e9a4:	4b10      	ldr	r3, [pc, #64]	; (1e9e8 <read_type_cb+0xa4>)
   1e9a6:	9300      	str	r3, [sp, #0]
   1e9a8:	464b      	mov	r3, r9
   1e9aa:	68a2      	ldr	r2, [r4, #8]
   1e9ac:	4631      	mov	r1, r6
   1e9ae:	4638      	mov	r0, r7
   1e9b0:	f00f f92c 	bl	2dc0c <att_chan_read>
	if (read < 0) {
   1e9b4:	2800      	cmp	r0, #0
   1e9b6:	db06      	blt.n	1e9c6 <read_type_cb+0x82>
	if (!data->item) {
   1e9b8:	6923      	ldr	r3, [r4, #16]
   1e9ba:	2b00      	cmp	r3, #0
   1e9bc:	d0d0      	beq.n	1e960 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1e9be:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1e9c0:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1e9c2:	2200      	movs	r2, #0

	while (buf) {
   1e9c4:	e006      	b.n	1e9d4 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1e9c6:	f00e ff0e 	bl	2d7e6 <err_to_att>
   1e9ca:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1e9cc:	e7c8      	b.n	1e960 <read_type_cb+0x1c>
		bytes += buf->len;
   1e9ce:	8a19      	ldrh	r1, [r3, #16]
   1e9d0:	440a      	add	r2, r1
		buf = buf->frags;
   1e9d2:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1e9d4:	2b00      	cmp	r3, #0
   1e9d6:	d1fa      	bne.n	1e9ce <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1e9d8:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1e9da:	68e3      	ldr	r3, [r4, #12]
   1e9dc:	781b      	ldrb	r3, [r3, #0]
   1e9de:	429d      	cmp	r5, r3
   1e9e0:	bf94      	ite	ls
   1e9e2:	2500      	movls	r5, #0
   1e9e4:	2501      	movhi	r5, #1
   1e9e6:	e7bb      	b.n	1e960 <read_type_cb+0x1c>
   1e9e8:	0002d7f7 	.word	0x0002d7f7

0001e9ec <find_type_cb>:
{
   1e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9f0:	b097      	sub	sp, #92	; 0x5c
   1e9f2:	af02      	add	r7, sp, #8
   1e9f4:	4605      	mov	r5, r0
   1e9f6:	460e      	mov	r6, r1
   1e9f8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1e9fa:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1e9fe:	f8d8 9004 	ldr.w	r9, [r8, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ea02:	2300      	movs	r3, #0
   1ea04:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   1ea08:	f642 0301 	movw	r3, #10241	; 0x2801
   1ea0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   1ea10:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1ea14:	6800      	ldr	r0, [r0, #0]
   1ea16:	f00d ff76 	bl	2c906 <bt_uuid_cmp>
   1ea1a:	b930      	cbnz	r0, 1ea2a <find_type_cb+0x3e>
	data->group = NULL;
   1ea1c:	2300      	movs	r3, #0
   1ea1e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1ea20:	2001      	movs	r0, #1
}
   1ea22:	3754      	adds	r7, #84	; 0x54
   1ea24:	46bd      	mov	sp, r7
   1ea26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ea2a:	2300      	movs	r3, #0
   1ea2c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   1ea30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ea34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   1ea38:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1ea3c:	6828      	ldr	r0, [r5, #0]
   1ea3e:	f00d ff62 	bl	2c906 <bt_uuid_cmp>
   1ea42:	b928      	cbnz	r0, 1ea50 <find_type_cb+0x64>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ea44:	f8b8 c02a 	ldrh.w	ip, [r8, #42]	; 0x2a
   1ea48:	6860      	ldr	r0, [r4, #4]
   1ea4a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ea4c:	2200      	movs	r2, #0
	while (buf) {
   1ea4e:	e00a      	b.n	1ea66 <find_type_cb+0x7a>
		if (data->group &&
   1ea50:	68a3      	ldr	r3, [r4, #8]
   1ea52:	b11b      	cbz	r3, 1ea5c <find_type_cb+0x70>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1ea54:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1ea56:	42b2      	cmp	r2, r6
   1ea58:	d200      	bcs.n	1ea5c <find_type_cb+0x70>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ea5a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1ea5c:	2001      	movs	r0, #1
   1ea5e:	e7e0      	b.n	1ea22 <find_type_cb+0x36>
		bytes += buf->len;
   1ea60:	8a19      	ldrh	r1, [r3, #16]
   1ea62:	440a      	add	r2, r1
		buf = buf->frags;
   1ea64:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1ea66:	2b00      	cmp	r3, #0
   1ea68:	d1fa      	bne.n	1ea60 <find_type_cb+0x74>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ea6a:	ebac 0302 	sub.w	r3, ip, r2
   1ea6e:	2b03      	cmp	r3, #3
   1ea70:	d801      	bhi.n	1ea76 <find_type_cb+0x8a>
		return BT_GATT_ITER_STOP;
   1ea72:	2000      	movs	r0, #0
   1ea74:	e7d5      	b.n	1ea22 <find_type_cb+0x36>
	frag = net_buf_frag_last(data->buf);
   1ea76:	f010 fa6a 	bl	2ef4e <net_buf_frag_last>
   1ea7a:	6078      	str	r0, [r7, #4]
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1ea7c:	f8b8 a02a 	ldrh.w	sl, [r8, #42]	; 0x2a
   1ea80:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1ea82:	2200      	movs	r2, #0
	while (buf) {
   1ea84:	e002      	b.n	1ea8c <find_type_cb+0xa0>
		bytes += buf->len;
   1ea86:	8a19      	ldrh	r1, [r3, #16]
   1ea88:	440a      	add	r2, r1
		buf = buf->frags;
   1ea8a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1ea8c:	2b00      	cmp	r3, #0
   1ea8e:	d1fa      	bne.n	1ea86 <find_type_cb+0x9a>
   1ea90:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1ea94:	687b      	ldr	r3, [r7, #4]
   1ea96:	f103 0b0c 	add.w	fp, r3, #12
   1ea9a:	4658      	mov	r0, fp
   1ea9c:	f010 fab7 	bl	2f00e <net_buf_simple_tailroom>
   1eaa0:	4582      	cmp	sl, r0
   1eaa2:	d25a      	bcs.n	1eb5a <find_type_cb+0x16e>
   1eaa4:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   1eaa8:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1eaaa:	2200      	movs	r2, #0
	while (buf) {
   1eaac:	e002      	b.n	1eab4 <find_type_cb+0xc8>
		bytes += buf->len;
   1eaae:	8a19      	ldrh	r1, [r3, #16]
   1eab0:	440a      	add	r2, r1
		buf = buf->frags;
   1eab2:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1eab4:	2b00      	cmp	r3, #0
   1eab6:	d1fa      	bne.n	1eaae <find_type_cb+0xc2>
   1eab8:	1a80      	subs	r0, r0, r2
	if (!len) {
   1eaba:	2800      	cmp	r0, #0
   1eabc:	d051      	beq.n	1eb62 <find_type_cb+0x176>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1eabe:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1eac2:	2300      	movs	r3, #0
   1eac4:	9300      	str	r3, [sp, #0]
   1eac6:	2310      	movs	r3, #16
   1eac8:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1eacc:	4629      	mov	r1, r5
   1eace:	4648      	mov	r0, r9
   1ead0:	47c0      	blx	r8
	if (read < 0) {
   1ead2:	1e05      	subs	r5, r0, #0
   1ead4:	dba2      	blt.n	1ea1c <find_type_cb+0x30>
	if (read != data->value_len) {
   1ead6:	7c22      	ldrb	r2, [r4, #16]
   1ead8:	42aa      	cmp	r2, r5
   1eada:	f000 80a6 	beq.w	1ec2a <find_type_cb+0x23e>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1eade:	68e1      	ldr	r1, [r4, #12]
   1eae0:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1eae4:	f00d ff2d 	bl	2c942 <bt_uuid_create>
   1eae8:	2800      	cmp	r0, #0
   1eaea:	d151      	bne.n	1eb90 <find_type_cb+0x1a4>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1eaec:	7c20      	ldrb	r0, [r4, #16]
   1eaee:	466e      	mov	r6, sp
   1eaf0:	b088      	sub	sp, #32
   1eaf2:	ab02      	add	r3, sp, #8
   1eaf4:	f113 0210 	adds.w	r2, r3, #16
   1eaf8:	d044      	beq.n	1eb84 <find_type_cb+0x198>
   1eafa:	210c      	movs	r1, #12
   1eafc:	b14a      	cbz	r2, 1eb12 <find_type_cb+0x126>
   1eafe:	460d      	mov	r5, r1
   1eb00:	2904      	cmp	r1, #4
   1eb02:	dd03      	ble.n	1eb0c <find_type_cb+0x120>
   1eb04:	f8df c150 	ldr.w	ip, [pc, #336]	; 1ec58 <find_type_cb+0x26c>
   1eb08:	f8c3 c014 	str.w	ip, [r3, #20]
   1eb0c:	2d08      	cmp	r5, #8
   1eb0e:	dd00      	ble.n	1eb12 <find_type_cb+0x126>
   1eb10:	6198      	str	r0, [r3, #24]
   1eb12:	290b      	cmp	r1, #11
   1eb14:	dd39      	ble.n	1eb8a <find_type_cb+0x19e>
   1eb16:	250c      	movs	r5, #12
   1eb18:	b13a      	cbz	r2, 1eb2a <find_type_cb+0x13e>
   1eb1a:	2103      	movs	r1, #3
   1eb1c:	7439      	strb	r1, [r7, #16]
   1eb1e:	2100      	movs	r1, #0
   1eb20:	7479      	strb	r1, [r7, #17]
   1eb22:	74b9      	strb	r1, [r7, #18]
   1eb24:	74f9      	strb	r1, [r7, #19]
   1eb26:	6938      	ldr	r0, [r7, #16]
   1eb28:	6118      	str	r0, [r3, #16]
   1eb2a:	2100      	movs	r1, #0
   1eb2c:	f36f 0100 	bfc	r1, #0, #1
   1eb30:	f36f 0141 	bfc	r1, #1, #1
   1eb34:	f36f 0182 	bfc	r1, #2, #1
   1eb38:	f36f 01c5 	bfc	r1, #3, #3
   1eb3c:	2302      	movs	r3, #2
   1eb3e:	f363 1188 	bfi	r1, r3, #6, #3
   1eb42:	f3c5 050a 	ubfx	r5, r5, #0, #11
   1eb46:	f365 2153 	bfi	r1, r5, #9, #11
   1eb4a:	f36f 511f 	bfc	r1, #20, #12
   1eb4e:	2300      	movs	r3, #0
   1eb50:	4842      	ldr	r0, [pc, #264]	; (1ec5c <find_type_cb+0x270>)
   1eb52:	f7f5 fad3 	bl	140fc <z_impl_z_log_msg_static_create>
   1eb56:	46b5      	mov	sp, r6
			goto skip;
   1eb58:	e760      	b.n	1ea1c <find_type_cb+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1eb5a:	4658      	mov	r0, fp
   1eb5c:	f010 fa57 	bl	2f00e <net_buf_simple_tailroom>
   1eb60:	e7ab      	b.n	1eaba <find_type_cb+0xce>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1eb62:	6863      	ldr	r3, [r4, #4]
   1eb64:	7a98      	ldrb	r0, [r3, #10]
   1eb66:	f002 f8b3 	bl	20cd0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1eb6a:	2200      	movs	r2, #0
   1eb6c:	2300      	movs	r3, #0
   1eb6e:	f010 f98a 	bl	2ee86 <net_buf_alloc_fixed>
		if (!frag) {
   1eb72:	6078      	str	r0, [r7, #4]
   1eb74:	2800      	cmp	r0, #0
   1eb76:	f43f af54 	beq.w	1ea22 <find_type_cb+0x36>
		net_buf_frag_add(data->buf, frag);
   1eb7a:	6879      	ldr	r1, [r7, #4]
   1eb7c:	6860      	ldr	r0, [r4, #4]
   1eb7e:	f010 f9f7 	bl	2ef70 <net_buf_frag_add>
   1eb82:	e79c      	b.n	1eabe <find_type_cb+0xd2>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1eb84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1eb88:	e7b8      	b.n	1eafc <find_type_cb+0x110>
   1eb8a:	f06f 051b 	mvn.w	r5, #27
   1eb8e:	e7c3      	b.n	1eb18 <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1eb90:	b2ea      	uxtb	r2, r5
   1eb92:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1eb96:	f107 0010 	add.w	r0, r7, #16
   1eb9a:	f00d fed2 	bl	2c942 <bt_uuid_create>
   1eb9e:	2800      	cmp	r0, #0
   1eba0:	d13b      	bne.n	1ec1a <find_type_cb+0x22e>
			LOG_WRN("Unable to create UUID: size %d", read);
   1eba2:	466e      	mov	r6, sp
   1eba4:	b088      	sub	sp, #32
   1eba6:	ab02      	add	r3, sp, #8
   1eba8:	f113 0210 	adds.w	r2, r3, #16
   1ebac:	d02f      	beq.n	1ec0e <find_type_cb+0x222>
   1ebae:	210c      	movs	r1, #12
   1ebb0:	b14a      	cbz	r2, 1ebc6 <find_type_cb+0x1da>
   1ebb2:	4608      	mov	r0, r1
   1ebb4:	2904      	cmp	r1, #4
   1ebb6:	dd03      	ble.n	1ebc0 <find_type_cb+0x1d4>
   1ebb8:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 1ec60 <find_type_cb+0x274>
   1ebbc:	f8c3 c014 	str.w	ip, [r3, #20]
   1ebc0:	2808      	cmp	r0, #8
   1ebc2:	dd00      	ble.n	1ebc6 <find_type_cb+0x1da>
   1ebc4:	619d      	str	r5, [r3, #24]
   1ebc6:	290b      	cmp	r1, #11
   1ebc8:	dd24      	ble.n	1ec14 <find_type_cb+0x228>
   1ebca:	250c      	movs	r5, #12
   1ebcc:	b13a      	cbz	r2, 1ebde <find_type_cb+0x1f2>
   1ebce:	2103      	movs	r1, #3
   1ebd0:	7339      	strb	r1, [r7, #12]
   1ebd2:	2100      	movs	r1, #0
   1ebd4:	7379      	strb	r1, [r7, #13]
   1ebd6:	73b9      	strb	r1, [r7, #14]
   1ebd8:	73f9      	strb	r1, [r7, #15]
   1ebda:	68f8      	ldr	r0, [r7, #12]
   1ebdc:	6118      	str	r0, [r3, #16]
   1ebde:	2100      	movs	r1, #0
   1ebe0:	f36f 0100 	bfc	r1, #0, #1
   1ebe4:	f36f 0141 	bfc	r1, #1, #1
   1ebe8:	f36f 0182 	bfc	r1, #2, #1
   1ebec:	f36f 01c5 	bfc	r1, #3, #3
   1ebf0:	2302      	movs	r3, #2
   1ebf2:	f363 1188 	bfi	r1, r3, #6, #3
   1ebf6:	f3c5 030a 	ubfx	r3, r5, #0, #11
   1ebfa:	f363 2153 	bfi	r1, r3, #9, #11
   1ebfe:	f36f 511f 	bfc	r1, #20, #12
   1ec02:	2300      	movs	r3, #0
   1ec04:	4815      	ldr	r0, [pc, #84]	; (1ec5c <find_type_cb+0x270>)
   1ec06:	f7f5 fa79 	bl	140fc <z_impl_z_log_msg_static_create>
   1ec0a:	46b5      	mov	sp, r6
			goto skip;
   1ec0c:	e706      	b.n	1ea1c <find_type_cb+0x30>
			LOG_WRN("Unable to create UUID: size %d", read);
   1ec0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ec12:	e7cd      	b.n	1ebb0 <find_type_cb+0x1c4>
   1ec14:	f06f 051b 	mvn.w	r5, #27
   1ec18:	e7d8      	b.n	1ebcc <find_type_cb+0x1e0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ec1a:	f107 0110 	add.w	r1, r7, #16
   1ec1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1ec22:	f00d fe70 	bl	2c906 <bt_uuid_cmp>
   1ec26:	b148      	cbz	r0, 1ec3c <find_type_cb+0x250>
   1ec28:	e6f8      	b.n	1ea1c <find_type_cb+0x30>
	} else if (memcmp(data->value, uuid, read)) {
   1ec2a:	462a      	mov	r2, r5
   1ec2c:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1ec30:	68e0      	ldr	r0, [r4, #12]
   1ec32:	f00d fdb6 	bl	2c7a2 <memcmp>
   1ec36:	2800      	cmp	r0, #0
   1ec38:	f47f aef0 	bne.w	1ea1c <find_type_cb+0x30>
	data->err = 0x00;
   1ec3c:	2300      	movs	r3, #0
   1ec3e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1ec40:	2104      	movs	r1, #4
   1ec42:	6878      	ldr	r0, [r7, #4]
   1ec44:	300c      	adds	r0, #12
   1ec46:	f010 f9a6 	bl	2ef96 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ec4a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ec4c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ec4e:	68a3      	ldr	r3, [r4, #8]
   1ec50:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ec52:	2001      	movs	r0, #1
   1ec54:	e6e5      	b.n	1ea22 <find_type_cb+0x36>
   1ec56:	bf00      	nop
   1ec58:	000344f8 	.word	0x000344f8
   1ec5c:	00031cdc 	.word	0x00031cdc
   1ec60:	00034518 	.word	0x00034518

0001ec64 <bt_att_connected>:
{
   1ec64:	b510      	push	{r4, lr}
   1ec66:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1ec68:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1ec6a:	f104 0330 	add.w	r3, r4, #48	; 0x30
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ec6e:	f3bf 8f5b 	dmb	ish
   1ec72:	e853 1f00 	ldrex	r1, [r3]
   1ec76:	f041 0104 	orr.w	r1, r1, #4
   1ec7a:	e843 1200 	strex	r2, r1, [r3]
   1ec7e:	2a00      	cmp	r2, #0
   1ec80:	d1f7      	bne.n	1ec72 <bt_att_connected+0xe>
   1ec82:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ec86:	2317      	movs	r3, #23
   1ec88:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ec8a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1ec8c:	f00f f91b 	bl	2dec6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1ec90:	4904      	ldr	r1, [pc, #16]	; (1eca4 <bt_att_connected+0x40>)
   1ec92:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1ec96:	f012 f99a 	bl	30fce <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1ec9a:	6820      	ldr	r0, [r4, #0]
   1ec9c:	f001 ff66 	bl	20b6c <bt_gatt_connected>
}
   1eca0:	bd10      	pop	{r4, pc}
   1eca2:	bf00      	nop
   1eca4:	0001f8ed 	.word	0x0001f8ed

0001eca8 <bt_att_chan_create_pdu>:
{
   1eca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ecac:	b089      	sub	sp, #36	; 0x24
   1ecae:	af00      	add	r7, sp, #0
   1ecb0:	460c      	mov	r4, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ecb2:	1c53      	adds	r3, r2, #1
   1ecb4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1ecb6:	428b      	cmp	r3, r1
   1ecb8:	d80b      	bhi.n	1ecd2 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1ecba:	4620      	mov	r0, r4
   1ecbc:	f7ff fb02 	bl	1e2c4 <att_op_get_type>
   1ecc0:	2802      	cmp	r0, #2
   1ecc2:	d049      	beq.n	1ed58 <bt_att_chan_create_pdu+0xb0>
   1ecc4:	2804      	cmp	r0, #4
   1ecc6:	d047      	beq.n	1ed58 <bt_att_chan_create_pdu+0xb0>
		timeout = K_FOREVER;
   1ecc8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1eccc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1ecd0:	e046      	b.n	1ed60 <bt_att_chan_create_pdu+0xb8>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1ecd2:	466d      	mov	r5, sp
   1ecd4:	b088      	sub	sp, #32
   1ecd6:	466c      	mov	r4, sp
   1ecd8:	f114 0210 	adds.w	r2, r4, #16
   1ecdc:	d012      	beq.n	1ed04 <bt_att_chan_create_pdu+0x5c>
   1ecde:	2010      	movs	r0, #16
   1ece0:	b162      	cbz	r2, 1ecfc <bt_att_chan_create_pdu+0x54>
   1ece2:	4606      	mov	r6, r0
   1ece4:	2804      	cmp	r0, #4
   1ece6:	dd03      	ble.n	1ecf0 <bt_att_chan_create_pdu+0x48>
   1ece8:	f8df c170 	ldr.w	ip, [pc, #368]	; 1ee5c <bt_att_chan_create_pdu+0x1b4>
   1ecec:	f8c4 c014 	str.w	ip, [r4, #20]
   1ecf0:	2e08      	cmp	r6, #8
   1ecf2:	dd00      	ble.n	1ecf6 <bt_att_chan_create_pdu+0x4e>
   1ecf4:	61a1      	str	r1, [r4, #24]
   1ecf6:	2e0c      	cmp	r6, #12
   1ecf8:	dd07      	ble.n	1ed0a <bt_att_chan_create_pdu+0x62>
   1ecfa:	61e3      	str	r3, [r4, #28]
   1ecfc:	280f      	cmp	r0, #15
   1ecfe:	dd28      	ble.n	1ed52 <bt_att_chan_create_pdu+0xaa>
   1ed00:	2310      	movs	r3, #16
   1ed02:	e004      	b.n	1ed0e <bt_att_chan_create_pdu+0x66>
   1ed04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ed08:	e7ea      	b.n	1ece0 <bt_att_chan_create_pdu+0x38>
   1ed0a:	f06f 031b 	mvn.w	r3, #27
   1ed0e:	b13a      	cbz	r2, 1ed20 <bt_att_chan_create_pdu+0x78>
   1ed10:	2104      	movs	r1, #4
   1ed12:	7139      	strb	r1, [r7, #4]
   1ed14:	2100      	movs	r1, #0
   1ed16:	7179      	strb	r1, [r7, #5]
   1ed18:	71b9      	strb	r1, [r7, #6]
   1ed1a:	71f9      	strb	r1, [r7, #7]
   1ed1c:	6878      	ldr	r0, [r7, #4]
   1ed1e:	6120      	str	r0, [r4, #16]
   1ed20:	2100      	movs	r1, #0
   1ed22:	f36f 0100 	bfc	r1, #0, #1
   1ed26:	f36f 0141 	bfc	r1, #1, #1
   1ed2a:	f36f 0182 	bfc	r1, #2, #1
   1ed2e:	f36f 01c5 	bfc	r1, #3, #3
   1ed32:	2002      	movs	r0, #2
   1ed34:	f360 1188 	bfi	r1, r0, #6, #3
   1ed38:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1ed3c:	f363 2153 	bfi	r1, r3, #9, #11
   1ed40:	f36f 511f 	bfc	r1, #20, #12
   1ed44:	2300      	movs	r3, #0
   1ed46:	4846      	ldr	r0, [pc, #280]	; (1ee60 <bt_att_chan_create_pdu+0x1b8>)
   1ed48:	f7f5 f9d8 	bl	140fc <z_impl_z_log_msg_static_create>
   1ed4c:	46ad      	mov	sp, r5
		return NULL;
   1ed4e:	2500      	movs	r5, #0
   1ed50:	e01c      	b.n	1ed8c <bt_att_chan_create_pdu+0xe4>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1ed52:	f06f 031b 	mvn.w	r3, #27
   1ed56:	e7da      	b.n	1ed0e <bt_att_chan_create_pdu+0x66>
		timeout = BT_ATT_TIMEOUT;
   1ed58:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1ed5c:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1ed60:	4642      	mov	r2, r8
   1ed62:	464b      	mov	r3, r9
   1ed64:	2100      	movs	r1, #0
   1ed66:	4608      	mov	r0, r1
   1ed68:	f00e fc74 	bl	2d654 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1ed6c:	4605      	mov	r5, r0
   1ed6e:	b190      	cbz	r0, 1ed96 <bt_att_chan_create_pdu+0xee>
	data = tx_meta_data_alloc(timeout);
   1ed70:	4640      	mov	r0, r8
   1ed72:	4649      	mov	r1, r9
   1ed74:	f7ff fb18 	bl	1e3a8 <tx_meta_data_alloc>
	if (!data) {
   1ed78:	4606      	mov	r6, r0
   1ed7a:	2800      	cmp	r0, #0
   1ed7c:	d04a      	beq.n	1ee14 <bt_att_chan_create_pdu+0x16c>
	bt_att_tx_meta_data(buf) = data;
   1ed7e:	61a8      	str	r0, [r5, #24]
   1ed80:	2101      	movs	r1, #1
   1ed82:	f105 000c 	add.w	r0, r5, #12
   1ed86:	f010 f906 	bl	2ef96 <net_buf_simple_add>
	hdr->code = op;
   1ed8a:	7004      	strb	r4, [r0, #0]
}
   1ed8c:	4628      	mov	r0, r5
   1ed8e:	3724      	adds	r7, #36	; 0x24
   1ed90:	46bd      	mov	sp, r7
   1ed92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1ed96:	466e      	mov	r6, sp
   1ed98:	b088      	sub	sp, #32
   1ed9a:	466b      	mov	r3, sp
   1ed9c:	f113 0210 	adds.w	r2, r3, #16
   1eda0:	d00f      	beq.n	1edc2 <bt_att_chan_create_pdu+0x11a>
   1eda2:	210c      	movs	r1, #12
   1eda4:	b14a      	cbz	r2, 1edba <bt_att_chan_create_pdu+0x112>
   1eda6:	4608      	mov	r0, r1
   1eda8:	2904      	cmp	r1, #4
   1edaa:	dd03      	ble.n	1edb4 <bt_att_chan_create_pdu+0x10c>
   1edac:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 1ee64 <bt_att_chan_create_pdu+0x1bc>
   1edb0:	f8c3 c014 	str.w	ip, [r3, #20]
   1edb4:	2808      	cmp	r0, #8
   1edb6:	dd07      	ble.n	1edc8 <bt_att_chan_create_pdu+0x120>
   1edb8:	619c      	str	r4, [r3, #24]
   1edba:	290b      	cmp	r1, #11
   1edbc:	dd27      	ble.n	1ee0e <bt_att_chan_create_pdu+0x166>
   1edbe:	240c      	movs	r4, #12
   1edc0:	e004      	b.n	1edcc <bt_att_chan_create_pdu+0x124>
   1edc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1edc6:	e7ed      	b.n	1eda4 <bt_att_chan_create_pdu+0xfc>
   1edc8:	f06f 041b 	mvn.w	r4, #27
   1edcc:	b13a      	cbz	r2, 1edde <bt_att_chan_create_pdu+0x136>
   1edce:	2103      	movs	r1, #3
   1edd0:	7139      	strb	r1, [r7, #4]
   1edd2:	2100      	movs	r1, #0
   1edd4:	7179      	strb	r1, [r7, #5]
   1edd6:	71b9      	strb	r1, [r7, #6]
   1edd8:	71f9      	strb	r1, [r7, #7]
   1edda:	6878      	ldr	r0, [r7, #4]
   1eddc:	6118      	str	r0, [r3, #16]
   1edde:	2100      	movs	r1, #0
   1ede0:	f36f 0100 	bfc	r1, #0, #1
   1ede4:	f36f 0141 	bfc	r1, #1, #1
   1ede8:	f36f 0182 	bfc	r1, #2, #1
   1edec:	f36f 01c5 	bfc	r1, #3, #3
   1edf0:	2301      	movs	r3, #1
   1edf2:	f363 1188 	bfi	r1, r3, #6, #3
   1edf6:	f3c4 030a 	ubfx	r3, r4, #0, #11
   1edfa:	f363 2153 	bfi	r1, r3, #9, #11
   1edfe:	f36f 511f 	bfc	r1, #20, #12
   1ee02:	2300      	movs	r3, #0
   1ee04:	4816      	ldr	r0, [pc, #88]	; (1ee60 <bt_att_chan_create_pdu+0x1b8>)
   1ee06:	f7f5 f979 	bl	140fc <z_impl_z_log_msg_static_create>
   1ee0a:	46b5      	mov	sp, r6
		return NULL;
   1ee0c:	e7be      	b.n	1ed8c <bt_att_chan_create_pdu+0xe4>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1ee0e:	f06f 041b 	mvn.w	r4, #27
   1ee12:	e7db      	b.n	1edcc <bt_att_chan_create_pdu+0x124>
		LOG_WRN("Unable to allocate ATT TX meta");
   1ee14:	4b14      	ldr	r3, [pc, #80]	; (1ee68 <bt_att_chan_create_pdu+0x1c0>)
   1ee16:	61fb      	str	r3, [r7, #28]
   1ee18:	2202      	movs	r2, #2
   1ee1a:	713a      	strb	r2, [r7, #4]
   1ee1c:	2300      	movs	r3, #0
   1ee1e:	717b      	strb	r3, [r7, #5]
   1ee20:	71bb      	strb	r3, [r7, #6]
   1ee22:	71fb      	strb	r3, [r7, #7]
   1ee24:	6879      	ldr	r1, [r7, #4]
   1ee26:	61b9      	str	r1, [r7, #24]
   1ee28:	4619      	mov	r1, r3
   1ee2a:	f363 0100 	bfi	r1, r3, #0, #1
   1ee2e:	f363 0141 	bfi	r1, r3, #1, #1
   1ee32:	f363 0182 	bfi	r1, r3, #2, #1
   1ee36:	f363 01c5 	bfi	r1, r3, #3, #3
   1ee3a:	f362 1188 	bfi	r1, r2, #6, #3
   1ee3e:	2208      	movs	r2, #8
   1ee40:	f362 2153 	bfi	r1, r2, #9, #11
   1ee44:	f363 511f 	bfi	r1, r3, #20, #12
   1ee48:	f107 0218 	add.w	r2, r7, #24
   1ee4c:	4804      	ldr	r0, [pc, #16]	; (1ee60 <bt_att_chan_create_pdu+0x1b8>)
   1ee4e:	f7f5 f955 	bl	140fc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1ee52:	4628      	mov	r0, r5
   1ee54:	f010 f854 	bl	2ef00 <net_buf_unref>
		return NULL;
   1ee58:	4635      	mov	r5, r6
   1ee5a:	e797      	b.n	1ed8c <bt_att_chan_create_pdu+0xe4>
   1ee5c:	00034538 	.word	0x00034538
   1ee60:	00031cdc 	.word	0x00031cdc
   1ee64:	000342f0 	.word	0x000342f0
   1ee68:	00034560 	.word	0x00034560

0001ee6c <bt_att_recv>:
{
   1ee6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ee70:	b094      	sub	sp, #80	; 0x50
   1ee72:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1ee74:	8a0b      	ldrh	r3, [r1, #16]
   1ee76:	b1c3      	cbz	r3, 1eeaa <bt_att_recv+0x3e>
   1ee78:	4606      	mov	r6, r0
   1ee7a:	460d      	mov	r5, r1
   1ee7c:	f1a0 0804 	sub.w	r8, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1ee80:	2101      	movs	r1, #1
   1ee82:	f105 000c 	add.w	r0, r5, #12
   1ee86:	f010 f8ae 	bl	2efe6 <net_buf_simple_pull_mem>
   1ee8a:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1ee8c:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1ee90:	b35b      	cbz	r3, 1eeea <bt_att_recv+0x7e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1ee92:	2300      	movs	r3, #0
   1ee94:	2b0d      	cmp	r3, #13
   1ee96:	d85e      	bhi.n	1ef56 <bt_att_recv+0xea>
		if (hdr->code == handlers[i].op) {
   1ee98:	f894 c000 	ldrb.w	ip, [r4]
   1ee9c:	4a9b      	ldr	r2, [pc, #620]	; (1f10c <bt_att_recv+0x2a0>)
   1ee9e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1eea2:	4594      	cmp	ip, r2
   1eea4:	d026      	beq.n	1eef4 <bt_att_recv+0x88>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1eea6:	3301      	adds	r3, #1
   1eea8:	e7f4      	b.n	1ee94 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1eeaa:	4b99      	ldr	r3, [pc, #612]	; (1f110 <bt_att_recv+0x2a4>)
   1eeac:	64fb      	str	r3, [r7, #76]	; 0x4c
   1eeae:	2302      	movs	r3, #2
   1eeb0:	713b      	strb	r3, [r7, #4]
   1eeb2:	2300      	movs	r3, #0
   1eeb4:	717b      	strb	r3, [r7, #5]
   1eeb6:	71bb      	strb	r3, [r7, #6]
   1eeb8:	71fb      	strb	r3, [r7, #7]
   1eeba:	687a      	ldr	r2, [r7, #4]
   1eebc:	64ba      	str	r2, [r7, #72]	; 0x48
   1eebe:	4619      	mov	r1, r3
   1eec0:	f363 0100 	bfi	r1, r3, #0, #1
   1eec4:	f363 0141 	bfi	r1, r3, #1, #1
   1eec8:	f363 0182 	bfi	r1, r3, #2, #1
   1eecc:	f363 01c5 	bfi	r1, r3, #3, #3
   1eed0:	2201      	movs	r2, #1
   1eed2:	f362 1188 	bfi	r1, r2, #6, #3
   1eed6:	2208      	movs	r2, #8
   1eed8:	f362 2153 	bfi	r1, r2, #9, #11
   1eedc:	f363 511f 	bfi	r1, r3, #20, #12
   1eee0:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1eee4:	488b      	ldr	r0, [pc, #556]	; (1f114 <bt_att_recv+0x2a8>)
   1eee6:	f7f5 f909 	bl	140fc <z_impl_z_log_msg_static_create>
}
   1eeea:	2000      	movs	r0, #0
   1eeec:	3750      	adds	r7, #80	; 0x50
   1eeee:	46bd      	mov	sp, r7
   1eef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			handler = &handlers[i];
   1eef4:	4a85      	ldr	r2, [pc, #532]	; (1f10c <bt_att_recv+0x2a0>)
   1eef6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   1eefa:	f899 a002 	ldrb.w	sl, [r9, #2]
   1eefe:	f1ba 0f01 	cmp.w	sl, #1
   1ef02:	d076      	beq.n	1eff2 <bt_att_recv+0x186>
		} else if (handler->type == ATT_INDICATION &&
   1ef04:	f1ba 0f05 	cmp.w	sl, #5
   1ef08:	f000 809a 	beq.w	1f040 <bt_att_recv+0x1d4>
	if (buf->len < handler->expect_len) {
   1ef0c:	8a29      	ldrh	r1, [r5, #16]
   1ef0e:	f899 3001 	ldrb.w	r3, [r9, #1]
   1ef12:	4299      	cmp	r1, r3
   1ef14:	f080 80f4 	bcs.w	1f100 <bt_att_recv+0x294>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1ef18:	f894 c000 	ldrb.w	ip, [r4]
   1ef1c:	466d      	mov	r5, sp
   1ef1e:	b088      	sub	sp, #32
   1ef20:	466b      	mov	r3, sp
   1ef22:	f113 0210 	adds.w	r2, r3, #16
   1ef26:	f000 80b3 	beq.w	1f090 <bt_att_recv+0x224>
   1ef2a:	2010      	movs	r0, #16
   1ef2c:	b172      	cbz	r2, 1ef4c <bt_att_recv+0xe0>
   1ef2e:	4606      	mov	r6, r0
   1ef30:	2804      	cmp	r0, #4
   1ef32:	dd03      	ble.n	1ef3c <bt_att_recv+0xd0>
   1ef34:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 1f118 <bt_att_recv+0x2ac>
   1ef38:	f8c3 e014 	str.w	lr, [r3, #20]
   1ef3c:	2e08      	cmp	r6, #8
   1ef3e:	dd00      	ble.n	1ef42 <bt_att_recv+0xd6>
   1ef40:	6199      	str	r1, [r3, #24]
   1ef42:	2e0c      	cmp	r6, #12
   1ef44:	f340 80a7 	ble.w	1f096 <bt_att_recv+0x22a>
   1ef48:	f8c3 c01c 	str.w	ip, [r3, #28]
   1ef4c:	280f      	cmp	r0, #15
   1ef4e:	f340 80d4 	ble.w	1f0fa <bt_att_recv+0x28e>
   1ef52:	2610      	movs	r6, #16
   1ef54:	e0a1      	b.n	1f09a <bt_att_recv+0x22e>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1ef56:	7826      	ldrb	r6, [r4, #0]
   1ef58:	466d      	mov	r5, sp
   1ef5a:	b088      	sub	sp, #32
   1ef5c:	466b      	mov	r3, sp
   1ef5e:	f113 0210 	adds.w	r2, r3, #16
   1ef62:	d00f      	beq.n	1ef84 <bt_att_recv+0x118>
   1ef64:	210c      	movs	r1, #12
   1ef66:	b14a      	cbz	r2, 1ef7c <bt_att_recv+0x110>
   1ef68:	4608      	mov	r0, r1
   1ef6a:	2904      	cmp	r1, #4
   1ef6c:	dd03      	ble.n	1ef76 <bt_att_recv+0x10a>
   1ef6e:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 1f11c <bt_att_recv+0x2b0>
   1ef72:	f8c3 c014 	str.w	ip, [r3, #20]
   1ef76:	2808      	cmp	r0, #8
   1ef78:	dd07      	ble.n	1ef8a <bt_att_recv+0x11e>
   1ef7a:	619e      	str	r6, [r3, #24]
   1ef7c:	290b      	cmp	r1, #11
   1ef7e:	dd35      	ble.n	1efec <bt_att_recv+0x180>
   1ef80:	260c      	movs	r6, #12
   1ef82:	e004      	b.n	1ef8e <bt_att_recv+0x122>
   1ef84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ef88:	e7ed      	b.n	1ef66 <bt_att_recv+0xfa>
   1ef8a:	f06f 061b 	mvn.w	r6, #27
   1ef8e:	b13a      	cbz	r2, 1efa0 <bt_att_recv+0x134>
   1ef90:	2103      	movs	r1, #3
   1ef92:	7139      	strb	r1, [r7, #4]
   1ef94:	2100      	movs	r1, #0
   1ef96:	7179      	strb	r1, [r7, #5]
   1ef98:	71b9      	strb	r1, [r7, #6]
   1ef9a:	71f9      	strb	r1, [r7, #7]
   1ef9c:	6878      	ldr	r0, [r7, #4]
   1ef9e:	6118      	str	r0, [r3, #16]
   1efa0:	2100      	movs	r1, #0
   1efa2:	f36f 0100 	bfc	r1, #0, #1
   1efa6:	f36f 0141 	bfc	r1, #1, #1
   1efaa:	f36f 0182 	bfc	r1, #2, #1
   1efae:	f36f 01c5 	bfc	r1, #3, #3
   1efb2:	2302      	movs	r3, #2
   1efb4:	f363 1188 	bfi	r1, r3, #6, #3
   1efb8:	f3c6 030a 	ubfx	r3, r6, #0, #11
   1efbc:	f363 2153 	bfi	r1, r3, #9, #11
   1efc0:	f36f 511f 	bfc	r1, #20, #12
   1efc4:	2300      	movs	r3, #0
   1efc6:	4853      	ldr	r0, [pc, #332]	; (1f114 <bt_att_recv+0x2a8>)
   1efc8:	f7f5 f898 	bl	140fc <z_impl_z_log_msg_static_create>
   1efcc:	46ad      	mov	sp, r5
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1efce:	7824      	ldrb	r4, [r4, #0]
   1efd0:	4620      	mov	r0, r4
   1efd2:	f7ff f977 	bl	1e2c4 <att_op_get_type>
   1efd6:	2800      	cmp	r0, #0
   1efd8:	d087      	beq.n	1eeea <bt_att_recv+0x7e>
   1efda:	2805      	cmp	r0, #5
   1efdc:	d085      	beq.n	1eeea <bt_att_recv+0x7e>
			send_err_rsp(att_chan, hdr->code, 0,
   1efde:	2306      	movs	r3, #6
   1efe0:	2200      	movs	r2, #0
   1efe2:	4621      	mov	r1, r4
   1efe4:	4640      	mov	r0, r8
   1efe6:	f00f f80d 	bl	2e004 <send_err_rsp>
		return 0;
   1efea:	e77e      	b.n	1eeea <bt_att_recv+0x7e>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1efec:	f06f 061b 	mvn.w	r6, #27
   1eff0:	e7cd      	b.n	1ef8e <bt_att_recv+0x122>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1eff2:	2100      	movs	r1, #0
   1eff4:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1eff8:	f00e ff9d 	bl	2df36 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1effc:	2800      	cmp	r0, #0
   1effe:	d081      	beq.n	1ef04 <bt_att_recv+0x98>
			LOG_WRN("Ignoring unexpected request");
   1f000:	4b47      	ldr	r3, [pc, #284]	; (1f120 <bt_att_recv+0x2b4>)
   1f002:	61fb      	str	r3, [r7, #28]
   1f004:	2202      	movs	r2, #2
   1f006:	713a      	strb	r2, [r7, #4]
   1f008:	2300      	movs	r3, #0
   1f00a:	717b      	strb	r3, [r7, #5]
   1f00c:	71bb      	strb	r3, [r7, #6]
   1f00e:	71fb      	strb	r3, [r7, #7]
   1f010:	6879      	ldr	r1, [r7, #4]
   1f012:	61b9      	str	r1, [r7, #24]
   1f014:	4619      	mov	r1, r3
   1f016:	f363 0100 	bfi	r1, r3, #0, #1
   1f01a:	f363 0141 	bfi	r1, r3, #1, #1
   1f01e:	f363 0182 	bfi	r1, r3, #2, #1
   1f022:	f363 01c5 	bfi	r1, r3, #3, #3
   1f026:	f362 1188 	bfi	r1, r2, #6, #3
   1f02a:	2208      	movs	r2, #8
   1f02c:	f362 2153 	bfi	r1, r2, #9, #11
   1f030:	f363 511f 	bfi	r1, r3, #20, #12
   1f034:	f107 0218 	add.w	r2, r7, #24
   1f038:	4836      	ldr	r0, [pc, #216]	; (1f114 <bt_att_recv+0x2a8>)
   1f03a:	f7f5 f85f 	bl	140fc <z_impl_z_log_msg_static_create>
			return 0;
   1f03e:	e754      	b.n	1eeea <bt_att_recv+0x7e>
			   atomic_test_and_set_bit(att_chan->flags,
   1f040:	2101      	movs	r1, #1
   1f042:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1f046:	f00e ff76 	bl	2df36 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1f04a:	2800      	cmp	r0, #0
   1f04c:	f43f af5e 	beq.w	1ef0c <bt_att_recv+0xa0>
			LOG_WRN("Ignoring unexpected indication");
   1f050:	4b34      	ldr	r3, [pc, #208]	; (1f124 <bt_att_recv+0x2b8>)
   1f052:	637b      	str	r3, [r7, #52]	; 0x34
   1f054:	2202      	movs	r2, #2
   1f056:	713a      	strb	r2, [r7, #4]
   1f058:	2300      	movs	r3, #0
   1f05a:	717b      	strb	r3, [r7, #5]
   1f05c:	71bb      	strb	r3, [r7, #6]
   1f05e:	71fb      	strb	r3, [r7, #7]
   1f060:	6879      	ldr	r1, [r7, #4]
   1f062:	6339      	str	r1, [r7, #48]	; 0x30
   1f064:	4619      	mov	r1, r3
   1f066:	f363 0100 	bfi	r1, r3, #0, #1
   1f06a:	f363 0141 	bfi	r1, r3, #1, #1
   1f06e:	f363 0182 	bfi	r1, r3, #2, #1
   1f072:	f363 01c5 	bfi	r1, r3, #3, #3
   1f076:	f362 1188 	bfi	r1, r2, #6, #3
   1f07a:	2208      	movs	r2, #8
   1f07c:	f362 2153 	bfi	r1, r2, #9, #11
   1f080:	f363 511f 	bfi	r1, r3, #20, #12
   1f084:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1f088:	4822      	ldr	r0, [pc, #136]	; (1f114 <bt_att_recv+0x2a8>)
   1f08a:	f7f5 f837 	bl	140fc <z_impl_z_log_msg_static_create>
			return 0;
   1f08e:	e72c      	b.n	1eeea <bt_att_recv+0x7e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1f090:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f094:	e74a      	b.n	1ef2c <bt_att_recv+0xc0>
   1f096:	f06f 061b 	mvn.w	r6, #27
   1f09a:	b13a      	cbz	r2, 1f0ac <bt_att_recv+0x240>
   1f09c:	2104      	movs	r1, #4
   1f09e:	7139      	strb	r1, [r7, #4]
   1f0a0:	2100      	movs	r1, #0
   1f0a2:	7179      	strb	r1, [r7, #5]
   1f0a4:	71b9      	strb	r1, [r7, #6]
   1f0a6:	71f9      	strb	r1, [r7, #7]
   1f0a8:	6878      	ldr	r0, [r7, #4]
   1f0aa:	6118      	str	r0, [r3, #16]
   1f0ac:	2100      	movs	r1, #0
   1f0ae:	f36f 0100 	bfc	r1, #0, #1
   1f0b2:	f36f 0141 	bfc	r1, #1, #1
   1f0b6:	f36f 0182 	bfc	r1, #2, #1
   1f0ba:	f36f 01c5 	bfc	r1, #3, #3
   1f0be:	2301      	movs	r3, #1
   1f0c0:	f363 1188 	bfi	r1, r3, #6, #3
   1f0c4:	f3c6 030a 	ubfx	r3, r6, #0, #11
   1f0c8:	f363 2153 	bfi	r1, r3, #9, #11
   1f0cc:	f36f 511f 	bfc	r1, #20, #12
   1f0d0:	2300      	movs	r3, #0
   1f0d2:	4810      	ldr	r0, [pc, #64]	; (1f114 <bt_att_recv+0x2a8>)
   1f0d4:	f7f5 f812 	bl	140fc <z_impl_z_log_msg_static_create>
   1f0d8:	46ad      	mov	sp, r5
		err = BT_ATT_ERR_INVALID_PDU;
   1f0da:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   1f0dc:	f899 3002 	ldrb.w	r3, [r9, #2]
   1f0e0:	2b01      	cmp	r3, #1
   1f0e2:	f47f af02 	bne.w	1eeea <bt_att_recv+0x7e>
   1f0e6:	2800      	cmp	r0, #0
   1f0e8:	f43f aeff 	beq.w	1eeea <bt_att_recv+0x7e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1f0ec:	4603      	mov	r3, r0
   1f0ee:	2200      	movs	r2, #0
   1f0f0:	7821      	ldrb	r1, [r4, #0]
   1f0f2:	4640      	mov	r0, r8
   1f0f4:	f00e ff86 	bl	2e004 <send_err_rsp>
   1f0f8:	e6f7      	b.n	1eeea <bt_att_recv+0x7e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1f0fa:	f06f 061b 	mvn.w	r6, #27
   1f0fe:	e7cc      	b.n	1f09a <bt_att_recv+0x22e>
		err = handler->func(att_chan, buf);
   1f100:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f104:	4629      	mov	r1, r5
   1f106:	4640      	mov	r0, r8
   1f108:	4798      	blx	r3
   1f10a:	e7e7      	b.n	1f0dc <bt_att_recv+0x270>
   1f10c:	00034654 	.word	0x00034654
   1f110:	00034580 	.word	0x00034580
   1f114:	00031cdc 	.word	0x00031cdc
   1f118:	000345f4 	.word	0x000345f4
   1f11c:	0003459c 	.word	0x0003459c
   1f120:	000345b8 	.word	0x000345b8
   1f124:	000345d4 	.word	0x000345d4

0001f128 <att_write_rsp>:
{
   1f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f12c:	b08a      	sub	sp, #40	; 0x28
   1f12e:	4604      	mov	r4, r0
   1f130:	4617      	mov	r7, r2
   1f132:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1f134:	6803      	ldr	r3, [r0, #0]
   1f136:	4688      	mov	r8, r1
   1f138:	3900      	subs	r1, #0
   1f13a:	bf18      	it	ne
   1f13c:	2101      	movne	r1, #1
   1f13e:	6818      	ldr	r0, [r3, #0]
   1f140:	f00f fd43 	bl	2ebca <bt_gatt_change_aware>
   1f144:	b128      	cbz	r0, 1f152 <att_write_rsp+0x2a>
	if (!handle) {
   1f146:	b975      	cbnz	r5, 1f166 <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1f148:	2601      	movs	r6, #1
}
   1f14a:	4630      	mov	r0, r6
   1f14c:	b00a      	add	sp, #40	; 0x28
   1f14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1f152:	2105      	movs	r1, #5
   1f154:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1f158:	f00e feed 	bl	2df36 <atomic_test_and_set_bit>
   1f15c:	b108      	cbz	r0, 1f162 <att_write_rsp+0x3a>
			return 0;
   1f15e:	2600      	movs	r6, #0
   1f160:	e7f3      	b.n	1f14a <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1f162:	2612      	movs	r6, #18
   1f164:	e7f1      	b.n	1f14a <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1f166:	2218      	movs	r2, #24
   1f168:	2100      	movs	r1, #0
   1f16a:	a804      	add	r0, sp, #16
   1f16c:	f00d fb6d 	bl	2c84a <memset>
	if (rsp) {
   1f170:	b13f      	cbz	r7, 1f182 <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1f172:	2200      	movs	r2, #0
   1f174:	4639      	mov	r1, r7
   1f176:	4620      	mov	r0, r4
   1f178:	f7ff fd96 	bl	1eca8 <bt_att_chan_create_pdu>
   1f17c:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1f17e:	2800      	cmp	r0, #0
   1f180:	d03e      	beq.n	1f200 <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   1f182:	6823      	ldr	r3, [r4, #0]
   1f184:	681b      	ldr	r3, [r3, #0]
   1f186:	9304      	str	r3, [sp, #16]
	data.req = req;
   1f188:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1f18c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1f190:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1f194:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f196:	9307      	str	r3, [sp, #28]
	data.len = len;
   1f198:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1f19c:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1f1a0:	2301      	movs	r3, #1
   1f1a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f1a6:	ab04      	add	r3, sp, #16
   1f1a8:	9302      	str	r3, [sp, #8]
   1f1aa:	4b16      	ldr	r3, [pc, #88]	; (1f204 <att_write_rsp+0xdc>)
   1f1ac:	9301      	str	r3, [sp, #4]
   1f1ae:	2200      	movs	r2, #0
   1f1b0:	9200      	str	r2, [sp, #0]
   1f1b2:	4613      	mov	r3, r2
   1f1b4:	4629      	mov	r1, r5
   1f1b6:	4628      	mov	r0, r5
   1f1b8:	f000 ff14 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1f1bc:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1f1c0:	b936      	cbnz	r6, 1f1d0 <att_write_rsp+0xa8>
	if (data.buf) {
   1f1c2:	9905      	ldr	r1, [sp, #20]
   1f1c4:	2900      	cmp	r1, #0
   1f1c6:	d0c0      	beq.n	1f14a <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1f1c8:	4620      	mov	r0, r4
   1f1ca:	f00e fd12 	bl	2dbf2 <bt_att_chan_send_rsp>
   1f1ce:	e7bc      	b.n	1f14a <att_write_rsp+0x22>
		if (rsp) {
   1f1d0:	b927      	cbnz	r7, 1f1dc <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1f1d2:	f1b8 0f18 	cmp.w	r8, #24
   1f1d6:	d010      	beq.n	1f1fa <att_write_rsp+0xd2>
   1f1d8:	2600      	movs	r6, #0
   1f1da:	e7b6      	b.n	1f14a <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f1dc:	9b05      	ldr	r3, [sp, #20]
   1f1de:	6998      	ldr	r0, [r3, #24]
   1f1e0:	f7ff fa90 	bl	1e704 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1f1e4:	9805      	ldr	r0, [sp, #20]
   1f1e6:	f00f fe8b 	bl	2ef00 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1f1ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1f1ee:	462a      	mov	r2, r5
   1f1f0:	4641      	mov	r1, r8
   1f1f2:	4620      	mov	r0, r4
   1f1f4:	f00e ff06 	bl	2e004 <send_err_rsp>
   1f1f8:	e7eb      	b.n	1f1d2 <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1f1fa:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1f1fe:	e7a4      	b.n	1f14a <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1f200:	260e      	movs	r6, #14
   1f202:	e7a2      	b.n	1f14a <att_write_rsp+0x22>
   1f204:	0002db93 	.word	0x0002db93

0001f208 <bt_att_create_pdu>:
{
   1f208:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f20a:	b083      	sub	sp, #12
   1f20c:	af00      	add	r7, sp, #0
   1f20e:	460e      	mov	r6, r1
   1f210:	4615      	mov	r5, r2
	att = att_get(conn);
   1f212:	f7ff f8e1 	bl	1e3d8 <att_get>
	if (!att) {
   1f216:	4604      	mov	r4, r0
   1f218:	b300      	cbz	r0, 1f25c <bt_att_create_pdu+0x54>
	return list->head;
   1f21a:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f21c:	b314      	cbz	r4, 1f264 <bt_att_create_pdu+0x5c>
   1f21e:	3c88      	subs	r4, #136	; 0x88
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f220:	f114 0088 	adds.w	r0, r4, #136	; 0x88
   1f224:	d007      	beq.n	1f236 <bt_att_create_pdu+0x2e>
	return node->next;
   1f226:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   1f22a:	b120      	cbz	r0, 1f236 <bt_att_create_pdu+0x2e>
   1f22c:	3888      	subs	r0, #136	; 0x88
   1f22e:	e002      	b.n	1f236 <bt_att_create_pdu+0x2e>
   1f230:	4603      	mov	r3, r0
   1f232:	4604      	mov	r4, r0
   1f234:	4618      	mov	r0, r3
   1f236:	b1bc      	cbz	r4, 1f268 <bt_att_create_pdu+0x60>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f238:	1c6b      	adds	r3, r5, #1
   1f23a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1f23c:	4293      	cmp	r3, r2
   1f23e:	d907      	bls.n	1f250 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f240:	2800      	cmp	r0, #0
   1f242:	d0f5      	beq.n	1f230 <bt_att_create_pdu+0x28>
   1f244:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1f248:	2b00      	cmp	r3, #0
   1f24a:	d0f2      	beq.n	1f232 <bt_att_create_pdu+0x2a>
   1f24c:	3b88      	subs	r3, #136	; 0x88
   1f24e:	e7f0      	b.n	1f232 <bt_att_create_pdu+0x2a>
		return bt_att_chan_create_pdu(chan, op, len);
   1f250:	462a      	mov	r2, r5
   1f252:	4631      	mov	r1, r6
   1f254:	4620      	mov	r0, r4
   1f256:	f7ff fd27 	bl	1eca8 <bt_att_chan_create_pdu>
   1f25a:	4604      	mov	r4, r0
}
   1f25c:	4620      	mov	r0, r4
   1f25e:	370c      	adds	r7, #12
   1f260:	46bd      	mov	sp, r7
   1f262:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f264:	4620      	mov	r0, r4
   1f266:	e7e6      	b.n	1f236 <bt_att_create_pdu+0x2e>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1f268:	3501      	adds	r5, #1
   1f26a:	466e      	mov	r6, sp
   1f26c:	b088      	sub	sp, #32
   1f26e:	466b      	mov	r3, sp
   1f270:	f113 0210 	adds.w	r2, r3, #16
   1f274:	d02f      	beq.n	1f2d6 <bt_att_create_pdu+0xce>
   1f276:	210c      	movs	r1, #12
   1f278:	b14a      	cbz	r2, 1f28e <bt_att_create_pdu+0x86>
   1f27a:	4608      	mov	r0, r1
   1f27c:	2904      	cmp	r1, #4
   1f27e:	dd03      	ble.n	1f288 <bt_att_create_pdu+0x80>
   1f280:	f8df c060 	ldr.w	ip, [pc, #96]	; 1f2e4 <bt_att_create_pdu+0xdc>
   1f284:	f8c3 c014 	str.w	ip, [r3, #20]
   1f288:	2808      	cmp	r0, #8
   1f28a:	dd00      	ble.n	1f28e <bt_att_create_pdu+0x86>
   1f28c:	619d      	str	r5, [r3, #24]
   1f28e:	290b      	cmp	r1, #11
   1f290:	dd24      	ble.n	1f2dc <bt_att_create_pdu+0xd4>
   1f292:	250c      	movs	r5, #12
   1f294:	b13a      	cbz	r2, 1f2a6 <bt_att_create_pdu+0x9e>
   1f296:	2103      	movs	r1, #3
   1f298:	7139      	strb	r1, [r7, #4]
   1f29a:	2100      	movs	r1, #0
   1f29c:	7179      	strb	r1, [r7, #5]
   1f29e:	71b9      	strb	r1, [r7, #6]
   1f2a0:	71f9      	strb	r1, [r7, #7]
   1f2a2:	6878      	ldr	r0, [r7, #4]
   1f2a4:	6118      	str	r0, [r3, #16]
   1f2a6:	2100      	movs	r1, #0
   1f2a8:	f36f 0100 	bfc	r1, #0, #1
   1f2ac:	f36f 0141 	bfc	r1, #1, #1
   1f2b0:	f36f 0182 	bfc	r1, #2, #1
   1f2b4:	f36f 01c5 	bfc	r1, #3, #3
   1f2b8:	2302      	movs	r3, #2
   1f2ba:	f363 1188 	bfi	r1, r3, #6, #3
   1f2be:	f3c5 030a 	ubfx	r3, r5, #0, #11
   1f2c2:	f363 2153 	bfi	r1, r3, #9, #11
   1f2c6:	f36f 511f 	bfc	r1, #20, #12
   1f2ca:	2300      	movs	r3, #0
   1f2cc:	4806      	ldr	r0, [pc, #24]	; (1f2e8 <bt_att_create_pdu+0xe0>)
   1f2ce:	f7f4 ff15 	bl	140fc <z_impl_z_log_msg_static_create>
   1f2d2:	46b5      	mov	sp, r6
	return NULL;
   1f2d4:	e7c2      	b.n	1f25c <bt_att_create_pdu+0x54>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1f2d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f2da:	e7cd      	b.n	1f278 <bt_att_create_pdu+0x70>
   1f2dc:	f06f 051b 	mvn.w	r5, #27
   1f2e0:	e7d8      	b.n	1f294 <bt_att_create_pdu+0x8c>
   1f2e2:	bf00      	nop
   1f2e4:	00034614 	.word	0x00034614
   1f2e8:	00031cdc 	.word	0x00031cdc

0001f2ec <att_read_group_rsp>:
{
   1f2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2f0:	b08a      	sub	sp, #40	; 0x28
   1f2f2:	4604      	mov	r4, r0
   1f2f4:	460f      	mov	r7, r1
   1f2f6:	4615      	mov	r5, r2
   1f2f8:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1f2fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1f2fe:	2214      	movs	r2, #20
   1f300:	2100      	movs	r1, #0
   1f302:	eb0d 0002 	add.w	r0, sp, r2
   1f306:	f00d faa0 	bl	2c84a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1f30a:	2201      	movs	r2, #1
   1f30c:	2111      	movs	r1, #17
   1f30e:	4640      	mov	r0, r8
   1f310:	f7ff ff7a 	bl	1f208 <bt_att_create_pdu>
   1f314:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1f316:	b368      	cbz	r0, 1f374 <att_read_group_rsp+0x88>
	data.chan = chan;
   1f318:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   1f31a:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1f31c:	2101      	movs	r1, #1
   1f31e:	300c      	adds	r0, #12
   1f320:	f00f fe39 	bl	2ef96 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1f324:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1f326:	2200      	movs	r2, #0
   1f328:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   1f32a:	9209      	str	r2, [sp, #36]	; 0x24
   1f32c:	ab05      	add	r3, sp, #20
   1f32e:	9302      	str	r3, [sp, #8]
   1f330:	4b11      	ldr	r3, [pc, #68]	; (1f378 <att_read_group_rsp+0x8c>)
   1f332:	9301      	str	r3, [sp, #4]
   1f334:	9200      	str	r2, [sp, #0]
   1f336:	4613      	mov	r3, r2
   1f338:	4631      	mov	r1, r6
   1f33a:	4628      	mov	r0, r5
   1f33c:	f000 fe52 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1f340:	9b08      	ldr	r3, [sp, #32]
   1f342:	781e      	ldrb	r6, [r3, #0]
   1f344:	b146      	cbz	r6, 1f358 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1f346:	9907      	ldr	r1, [sp, #28]
   1f348:	4620      	mov	r0, r4
   1f34a:	f00e fc52 	bl	2dbf2 <bt_att_chan_send_rsp>
	return 0;
   1f34e:	2600      	movs	r6, #0
}
   1f350:	4630      	mov	r0, r6
   1f352:	b00a      	add	sp, #40	; 0x28
   1f354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f358:	9b07      	ldr	r3, [sp, #28]
   1f35a:	6998      	ldr	r0, [r3, #24]
   1f35c:	f7ff f9d2 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1f360:	9807      	ldr	r0, [sp, #28]
   1f362:	f00f fdcd 	bl	2ef00 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1f366:	230a      	movs	r3, #10
   1f368:	462a      	mov	r2, r5
   1f36a:	2110      	movs	r1, #16
   1f36c:	4620      	mov	r0, r4
   1f36e:	f00e fe49 	bl	2e004 <send_err_rsp>
		return 0;
   1f372:	e7ed      	b.n	1f350 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1f374:	260e      	movs	r6, #14
   1f376:	e7eb      	b.n	1f350 <att_read_group_rsp+0x64>
   1f378:	0001e891 	.word	0x0001e891

0001f37c <att_read_mult_vl_req>:
{
   1f37c:	b570      	push	{r4, r5, r6, lr}
   1f37e:	b088      	sub	sp, #32
   1f380:	4606      	mov	r6, r0
   1f382:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1f384:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1f386:	2101      	movs	r1, #1
   1f388:	4620      	mov	r0, r4
   1f38a:	f00f fc1e 	bl	2ebca <bt_gatt_change_aware>
   1f38e:	b950      	cbnz	r0, 1f3a6 <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1f390:	2105      	movs	r1, #5
   1f392:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1f396:	f00e fdce 	bl	2df36 <atomic_test_and_set_bit>
   1f39a:	b110      	cbz	r0, 1f3a2 <att_read_mult_vl_req+0x26>
			return 0;
   1f39c:	2000      	movs	r0, #0
}
   1f39e:	b008      	add	sp, #32
   1f3a0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1f3a2:	2012      	movs	r0, #18
   1f3a4:	e7fb      	b.n	1f39e <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1f3a6:	2210      	movs	r2, #16
   1f3a8:	2100      	movs	r1, #0
   1f3aa:	eb0d 0002 	add.w	r0, sp, r2
   1f3ae:	f00d fa4c 	bl	2c84a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1f3b2:	2200      	movs	r2, #0
   1f3b4:	2121      	movs	r1, #33	; 0x21
   1f3b6:	4620      	mov	r0, r4
   1f3b8:	f7ff ff26 	bl	1f208 <bt_att_create_pdu>
   1f3bc:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1f3be:	b378      	cbz	r0, 1f420 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1f3c0:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1f3c2:	8a2b      	ldrh	r3, [r5, #16]
   1f3c4:	2b01      	cmp	r3, #1
   1f3c6:	d925      	bls.n	1f414 <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   1f3c8:	f105 000c 	add.w	r0, r5, #12
   1f3cc:	f00f fe13 	bl	2eff6 <net_buf_simple_pull_le16>
   1f3d0:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1f3d2:	2301      	movs	r3, #1
   1f3d4:	f88d 301c 	strb.w	r3, [sp, #28]
   1f3d8:	ab04      	add	r3, sp, #16
   1f3da:	9302      	str	r3, [sp, #8]
   1f3dc:	4b11      	ldr	r3, [pc, #68]	; (1f424 <att_read_mult_vl_req+0xa8>)
   1f3de:	9301      	str	r3, [sp, #4]
   1f3e0:	2200      	movs	r2, #0
   1f3e2:	9200      	str	r2, [sp, #0]
   1f3e4:	4613      	mov	r3, r2
   1f3e6:	4601      	mov	r1, r0
   1f3e8:	f000 fdfc 	bl	1ffe4 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1f3ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1f3f0:	2b00      	cmp	r3, #0
   1f3f2:	d0e6      	beq.n	1f3c2 <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f3f4:	9b06      	ldr	r3, [sp, #24]
   1f3f6:	6998      	ldr	r0, [r3, #24]
   1f3f8:	f7ff f984 	bl	1e704 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1f3fc:	9806      	ldr	r0, [sp, #24]
   1f3fe:	f00f fd7f 	bl	2ef00 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1f402:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1f406:	4622      	mov	r2, r4
   1f408:	2120      	movs	r1, #32
   1f40a:	4630      	mov	r0, r6
   1f40c:	f00e fdfa 	bl	2e004 <send_err_rsp>
			return 0;
   1f410:	2000      	movs	r0, #0
   1f412:	e7c4      	b.n	1f39e <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1f414:	9906      	ldr	r1, [sp, #24]
   1f416:	4630      	mov	r0, r6
   1f418:	f00e fbeb 	bl	2dbf2 <bt_att_chan_send_rsp>
	return 0;
   1f41c:	2000      	movs	r0, #0
   1f41e:	e7be      	b.n	1f39e <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1f420:	200e      	movs	r0, #14
   1f422:	e7bc      	b.n	1f39e <att_read_mult_vl_req+0x22>
   1f424:	0002dd61 	.word	0x0002dd61

0001f428 <att_read_mult_req>:
{
   1f428:	b570      	push	{r4, r5, r6, lr}
   1f42a:	b088      	sub	sp, #32
   1f42c:	4606      	mov	r6, r0
   1f42e:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1f430:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1f432:	2101      	movs	r1, #1
   1f434:	4620      	mov	r0, r4
   1f436:	f00f fbc8 	bl	2ebca <bt_gatt_change_aware>
   1f43a:	b950      	cbnz	r0, 1f452 <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1f43c:	2105      	movs	r1, #5
   1f43e:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1f442:	f00e fd78 	bl	2df36 <atomic_test_and_set_bit>
   1f446:	b110      	cbz	r0, 1f44e <att_read_mult_req+0x26>
			return 0;
   1f448:	2000      	movs	r0, #0
}
   1f44a:	b008      	add	sp, #32
   1f44c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1f44e:	2012      	movs	r0, #18
   1f450:	e7fb      	b.n	1f44a <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1f452:	2210      	movs	r2, #16
   1f454:	2100      	movs	r1, #0
   1f456:	eb0d 0002 	add.w	r0, sp, r2
   1f45a:	f00d f9f6 	bl	2c84a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1f45e:	2200      	movs	r2, #0
   1f460:	210f      	movs	r1, #15
   1f462:	4620      	mov	r0, r4
   1f464:	f7ff fed0 	bl	1f208 <bt_att_create_pdu>
   1f468:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1f46a:	b378      	cbz	r0, 1f4cc <att_read_mult_req+0xa4>
	data.chan = chan;
   1f46c:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1f46e:	8a2b      	ldrh	r3, [r5, #16]
   1f470:	2b01      	cmp	r3, #1
   1f472:	d925      	bls.n	1f4c0 <att_read_mult_req+0x98>
   1f474:	f105 000c 	add.w	r0, r5, #12
   1f478:	f00f fdbd 	bl	2eff6 <net_buf_simple_pull_le16>
   1f47c:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1f47e:	2301      	movs	r3, #1
   1f480:	f88d 301c 	strb.w	r3, [sp, #28]
   1f484:	ab04      	add	r3, sp, #16
   1f486:	9302      	str	r3, [sp, #8]
   1f488:	4b11      	ldr	r3, [pc, #68]	; (1f4d0 <att_read_mult_req+0xa8>)
   1f48a:	9301      	str	r3, [sp, #4]
   1f48c:	2200      	movs	r2, #0
   1f48e:	9200      	str	r2, [sp, #0]
   1f490:	4613      	mov	r3, r2
   1f492:	4601      	mov	r1, r0
   1f494:	f000 fda6 	bl	1ffe4 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1f498:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1f49c:	2b00      	cmp	r3, #0
   1f49e:	d0e6      	beq.n	1f46e <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f4a0:	9b06      	ldr	r3, [sp, #24]
   1f4a2:	6998      	ldr	r0, [r3, #24]
   1f4a4:	f7ff f92e 	bl	1e704 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1f4a8:	9806      	ldr	r0, [sp, #24]
   1f4aa:	f00f fd29 	bl	2ef00 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1f4ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1f4b2:	4622      	mov	r2, r4
   1f4b4:	210e      	movs	r1, #14
   1f4b6:	4630      	mov	r0, r6
   1f4b8:	f00e fda4 	bl	2e004 <send_err_rsp>
			return 0;
   1f4bc:	2000      	movs	r0, #0
   1f4be:	e7c4      	b.n	1f44a <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1f4c0:	9906      	ldr	r1, [sp, #24]
   1f4c2:	4630      	mov	r0, r6
   1f4c4:	f00e fb95 	bl	2dbf2 <bt_att_chan_send_rsp>
	return 0;
   1f4c8:	2000      	movs	r0, #0
   1f4ca:	e7be      	b.n	1f44a <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1f4cc:	200e      	movs	r0, #14
   1f4ce:	e7bc      	b.n	1f44a <att_read_mult_req+0x22>
   1f4d0:	0002ddc7 	.word	0x0002ddc7

0001f4d4 <att_read_rsp>:
{
   1f4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f4d8:	b088      	sub	sp, #32
   1f4da:	4604      	mov	r4, r0
   1f4dc:	4688      	mov	r8, r1
   1f4de:	4616      	mov	r6, r2
   1f4e0:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1f4e2:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1f4e4:	2101      	movs	r1, #1
   1f4e6:	4638      	mov	r0, r7
   1f4e8:	f00f fb6f 	bl	2ebca <bt_gatt_change_aware>
   1f4ec:	b128      	cbz	r0, 1f4fa <att_read_rsp+0x26>
	if (!handle) {
   1f4ee:	b975      	cbnz	r5, 1f50e <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1f4f0:	2601      	movs	r6, #1
}
   1f4f2:	4630      	mov	r0, r6
   1f4f4:	b008      	add	sp, #32
   1f4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1f4fa:	2105      	movs	r1, #5
   1f4fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1f500:	f00e fd19 	bl	2df36 <atomic_test_and_set_bit>
   1f504:	b108      	cbz	r0, 1f50a <att_read_rsp+0x36>
			return 0;
   1f506:	2600      	movs	r6, #0
   1f508:	e7f3      	b.n	1f4f2 <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1f50a:	2612      	movs	r6, #18
   1f50c:	e7f1      	b.n	1f4f2 <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1f50e:	2210      	movs	r2, #16
   1f510:	2100      	movs	r1, #0
   1f512:	eb0d 0002 	add.w	r0, sp, r2
   1f516:	f00d f998 	bl	2c84a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1f51a:	2200      	movs	r2, #0
   1f51c:	4631      	mov	r1, r6
   1f51e:	4638      	mov	r0, r7
   1f520:	f7ff fe72 	bl	1f208 <bt_att_create_pdu>
   1f524:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1f526:	b350      	cbz	r0, 1f57e <att_read_rsp+0xaa>
	data.chan = chan;
   1f528:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1f52a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1f52e:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1f532:	2301      	movs	r3, #1
   1f534:	f88d 301c 	strb.w	r3, [sp, #28]
   1f538:	ab04      	add	r3, sp, #16
   1f53a:	9302      	str	r3, [sp, #8]
   1f53c:	4b11      	ldr	r3, [pc, #68]	; (1f584 <att_read_rsp+0xb0>)
   1f53e:	9301      	str	r3, [sp, #4]
   1f540:	2200      	movs	r2, #0
   1f542:	9200      	str	r2, [sp, #0]
   1f544:	4613      	mov	r3, r2
   1f546:	4629      	mov	r1, r5
   1f548:	4628      	mov	r0, r5
   1f54a:	f000 fd4b 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1f54e:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1f552:	b926      	cbnz	r6, 1f55e <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   1f554:	9906      	ldr	r1, [sp, #24]
   1f556:	4620      	mov	r0, r4
   1f558:	f00e fb4b 	bl	2dbf2 <bt_att_chan_send_rsp>
	return 0;
   1f55c:	e7c9      	b.n	1f4f2 <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f55e:	9b06      	ldr	r3, [sp, #24]
   1f560:	6998      	ldr	r0, [r3, #24]
   1f562:	f7ff f8cf 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1f566:	9806      	ldr	r0, [sp, #24]
   1f568:	f00f fcca 	bl	2ef00 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1f56c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1f570:	462a      	mov	r2, r5
   1f572:	4641      	mov	r1, r8
   1f574:	4620      	mov	r0, r4
   1f576:	f00e fd45 	bl	2e004 <send_err_rsp>
		return 0;
   1f57a:	2600      	movs	r6, #0
   1f57c:	e7b9      	b.n	1f4f2 <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   1f57e:	260e      	movs	r6, #14
   1f580:	e7b7      	b.n	1f4f2 <att_read_rsp+0x1e>
   1f582:	bf00      	nop
   1f584:	0002ddc7 	.word	0x0002ddc7

0001f588 <att_read_type_rsp>:
{
   1f588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f58c:	b08a      	sub	sp, #40	; 0x28
   1f58e:	4604      	mov	r4, r0
   1f590:	460f      	mov	r7, r1
   1f592:	4615      	mov	r5, r2
   1f594:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1f596:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1f59a:	2218      	movs	r2, #24
   1f59c:	2100      	movs	r1, #0
   1f59e:	a804      	add	r0, sp, #16
   1f5a0:	f00d f953 	bl	2c84a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1f5a4:	2201      	movs	r2, #1
   1f5a6:	2109      	movs	r1, #9
   1f5a8:	4640      	mov	r0, r8
   1f5aa:	f7ff fe2d 	bl	1f208 <bt_att_create_pdu>
   1f5ae:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1f5b0:	b380      	cbz	r0, 1f614 <att_read_type_rsp+0x8c>
	data.chan = chan;
   1f5b2:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1f5b4:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1f5b6:	2101      	movs	r1, #1
   1f5b8:	300c      	adds	r0, #12
   1f5ba:	f00f fcec 	bl	2ef96 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1f5be:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1f5c0:	2200      	movs	r2, #0
   1f5c2:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1f5c4:	230a      	movs	r3, #10
   1f5c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1f5ca:	ab04      	add	r3, sp, #16
   1f5cc:	9302      	str	r3, [sp, #8]
   1f5ce:	4b12      	ldr	r3, [pc, #72]	; (1f618 <att_read_type_rsp+0x90>)
   1f5d0:	9301      	str	r3, [sp, #4]
   1f5d2:	9200      	str	r2, [sp, #0]
   1f5d4:	4613      	mov	r3, r2
   1f5d6:	4631      	mov	r1, r6
   1f5d8:	4628      	mov	r0, r5
   1f5da:	f000 fd03 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1f5de:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1f5e2:	b93e      	cbnz	r6, 1f5f4 <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1f5e4:	9906      	ldr	r1, [sp, #24]
   1f5e6:	4620      	mov	r0, r4
   1f5e8:	f00e fb03 	bl	2dbf2 <bt_att_chan_send_rsp>
}
   1f5ec:	4630      	mov	r0, r6
   1f5ee:	b00a      	add	sp, #40	; 0x28
   1f5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f5f4:	9b06      	ldr	r3, [sp, #24]
   1f5f6:	6998      	ldr	r0, [r3, #24]
   1f5f8:	f7ff f884 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1f5fc:	9806      	ldr	r0, [sp, #24]
   1f5fe:	f00f fc7f 	bl	2ef00 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1f602:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1f606:	462a      	mov	r2, r5
   1f608:	2108      	movs	r1, #8
   1f60a:	4620      	mov	r0, r4
   1f60c:	f00e fcfa 	bl	2e004 <send_err_rsp>
		return 0;
   1f610:	2600      	movs	r6, #0
   1f612:	e7eb      	b.n	1f5ec <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1f614:	260e      	movs	r6, #14
   1f616:	e7e9      	b.n	1f5ec <att_read_type_rsp+0x64>
   1f618:	0001e945 	.word	0x0001e945

0001f61c <att_find_type_rsp>:
{
   1f61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f620:	b08a      	sub	sp, #40	; 0x28
   1f622:	4604      	mov	r4, r0
   1f624:	460d      	mov	r5, r1
   1f626:	4616      	mov	r6, r2
   1f628:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1f62a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1f62e:	2214      	movs	r2, #20
   1f630:	2100      	movs	r1, #0
   1f632:	eb0d 0002 	add.w	r0, sp, r2
   1f636:	f00d f908 	bl	2c84a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1f63a:	2200      	movs	r2, #0
   1f63c:	2107      	movs	r1, #7
   1f63e:	4640      	mov	r0, r8
   1f640:	f7ff fde2 	bl	1f208 <bt_att_create_pdu>
   1f644:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1f646:	b378      	cbz	r0, 1f6a8 <att_find_type_rsp+0x8c>
	data.chan = chan;
   1f648:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1f64a:	2200      	movs	r2, #0
   1f64c:	9207      	str	r2, [sp, #28]
	data.value = value;
   1f64e:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1f650:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1f654:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1f658:	230a      	movs	r3, #10
   1f65a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1f65e:	ab05      	add	r3, sp, #20
   1f660:	9302      	str	r3, [sp, #8]
   1f662:	4b12      	ldr	r3, [pc, #72]	; (1f6ac <att_find_type_rsp+0x90>)
   1f664:	9301      	str	r3, [sp, #4]
   1f666:	9200      	str	r2, [sp, #0]
   1f668:	4613      	mov	r3, r2
   1f66a:	4631      	mov	r1, r6
   1f66c:	4628      	mov	r0, r5
   1f66e:	f000 fcb9 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1f672:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1f676:	b93e      	cbnz	r6, 1f688 <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1f678:	9906      	ldr	r1, [sp, #24]
   1f67a:	4620      	mov	r0, r4
   1f67c:	f00e fab9 	bl	2dbf2 <bt_att_chan_send_rsp>
}
   1f680:	4630      	mov	r0, r6
   1f682:	b00a      	add	sp, #40	; 0x28
   1f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f688:	9b06      	ldr	r3, [sp, #24]
   1f68a:	6998      	ldr	r0, [r3, #24]
   1f68c:	f7ff f83a 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1f690:	9806      	ldr	r0, [sp, #24]
   1f692:	f00f fc35 	bl	2ef00 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1f696:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1f69a:	462a      	mov	r2, r5
   1f69c:	2106      	movs	r1, #6
   1f69e:	4620      	mov	r0, r4
   1f6a0:	f00e fcb0 	bl	2e004 <send_err_rsp>
		return 0;
   1f6a4:	2600      	movs	r6, #0
   1f6a6:	e7eb      	b.n	1f680 <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1f6a8:	260e      	movs	r6, #14
   1f6aa:	e7e9      	b.n	1f680 <att_find_type_rsp+0x64>
   1f6ac:	0001e9ed 	.word	0x0001e9ed

0001f6b0 <att_find_info_rsp>:
{
   1f6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6b2:	b089      	sub	sp, #36	; 0x24
   1f6b4:	4604      	mov	r4, r0
   1f6b6:	460f      	mov	r7, r1
   1f6b8:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1f6ba:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1f6bc:	2210      	movs	r2, #16
   1f6be:	2100      	movs	r1, #0
   1f6c0:	eb0d 0002 	add.w	r0, sp, r2
   1f6c4:	f00d f8c1 	bl	2c84a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1f6c8:	2200      	movs	r2, #0
   1f6ca:	2105      	movs	r1, #5
   1f6cc:	4628      	mov	r0, r5
   1f6ce:	f7ff fd9b 	bl	1f208 <bt_att_create_pdu>
   1f6d2:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1f6d4:	b318      	cbz	r0, 1f71e <att_find_info_rsp+0x6e>
	data.chan = chan;
   1f6d6:	9404      	str	r4, [sp, #16]
   1f6d8:	ab04      	add	r3, sp, #16
   1f6da:	9302      	str	r3, [sp, #8]
   1f6dc:	4b11      	ldr	r3, [pc, #68]	; (1f724 <att_find_info_rsp+0x74>)
   1f6de:	9301      	str	r3, [sp, #4]
   1f6e0:	2200      	movs	r2, #0
   1f6e2:	9200      	str	r2, [sp, #0]
   1f6e4:	4613      	mov	r3, r2
   1f6e6:	4631      	mov	r1, r6
   1f6e8:	4638      	mov	r0, r7
   1f6ea:	f000 fc7b 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1f6ee:	9b06      	ldr	r3, [sp, #24]
   1f6f0:	b133      	cbz	r3, 1f700 <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   1f6f2:	9905      	ldr	r1, [sp, #20]
   1f6f4:	4620      	mov	r0, r4
   1f6f6:	f00e fa7c 	bl	2dbf2 <bt_att_chan_send_rsp>
	return 0;
   1f6fa:	2000      	movs	r0, #0
}
   1f6fc:	b009      	add	sp, #36	; 0x24
   1f6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1f700:	9b05      	ldr	r3, [sp, #20]
   1f702:	6998      	ldr	r0, [r3, #24]
   1f704:	f7fe fffe 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1f708:	9805      	ldr	r0, [sp, #20]
   1f70a:	f00f fbf9 	bl	2ef00 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1f70e:	230a      	movs	r3, #10
   1f710:	463a      	mov	r2, r7
   1f712:	2104      	movs	r1, #4
   1f714:	4620      	mov	r0, r4
   1f716:	f00e fc75 	bl	2e004 <send_err_rsp>
		return 0;
   1f71a:	2000      	movs	r0, #0
   1f71c:	e7ee      	b.n	1f6fc <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1f71e:	200e      	movs	r0, #14
   1f720:	e7ec      	b.n	1f6fc <att_find_info_rsp+0x4c>
   1f722:	bf00      	nop
   1f724:	0002de0f 	.word	0x0002de0f

0001f728 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1f728:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1f72a:	4809      	ldr	r0, [pc, #36]	; (1f750 <bt_att_init+0x28>)
   1f72c:	f011 fb11 	bl	30d52 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1f730:	2400      	movs	r4, #0
   1f732:	e008      	b.n	1f746 <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1f734:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1f738:	0093      	lsls	r3, r2, #2
   1f73a:	4906      	ldr	r1, [pc, #24]	; (1f754 <bt_att_init+0x2c>)
   1f73c:	4419      	add	r1, r3
   1f73e:	4804      	ldr	r0, [pc, #16]	; (1f750 <bt_att_init+0x28>)
   1f740:	f011 fb13 	bl	30d6a <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1f744:	3401      	adds	r4, #1
   1f746:	2c02      	cmp	r4, #2
   1f748:	d9f4      	bls.n	1f734 <bt_att_init+0xc>
	}

	bt_gatt_init();
   1f74a:	f000 fbe5 	bl	1ff18 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1f74e:	bd10      	pop	{r4, pc}
   1f750:	20000b18 	.word	0x20000b18
   1f754:	20003fc0 	.word	0x20003fc0

0001f758 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1f758:	b530      	push	{r4, r5, lr}
   1f75a:	b083      	sub	sp, #12
   1f75c:	4605      	mov	r5, r0
   1f75e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1f760:	2300      	movs	r3, #0
   1f762:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1f764:	f007 fb3a 	bl	26ddc <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1f768:	4b0b      	ldr	r3, [pc, #44]	; (1f798 <bt_att_req_alloc+0x40>)
   1f76a:	681b      	ldr	r3, [r3, #0]
   1f76c:	4283      	cmp	r3, r0
   1f76e:	d00e      	beq.n	1f78e <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1f770:	462a      	mov	r2, r5
   1f772:	4623      	mov	r3, r4
   1f774:	a901      	add	r1, sp, #4
   1f776:	4809      	ldr	r0, [pc, #36]	; (1f79c <bt_att_req_alloc+0x44>)
   1f778:	f006 fb38 	bl	25dec <k_mem_slab_alloc>
   1f77c:	b950      	cbnz	r0, 1f794 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1f77e:	2210      	movs	r2, #16
   1f780:	2100      	movs	r1, #0
   1f782:	9801      	ldr	r0, [sp, #4]
   1f784:	f00d f861 	bl	2c84a <memset>

	return req;
   1f788:	9801      	ldr	r0, [sp, #4]
}
   1f78a:	b003      	add	sp, #12
   1f78c:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1f78e:	2500      	movs	r5, #0
   1f790:	462c      	mov	r4, r5
   1f792:	e7ed      	b.n	1f770 <bt_att_req_alloc+0x18>
		return NULL;
   1f794:	2000      	movs	r0, #0
   1f796:	e7f8      	b.n	1f78a <bt_att_req_alloc+0x32>
   1f798:	20003ffc 	.word	0x20003ffc
   1f79c:	200009b0 	.word	0x200009b0

0001f7a0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1f7a0:	b500      	push	{lr}
   1f7a2:	b083      	sub	sp, #12
   1f7a4:	9001      	str	r0, [sp, #4]
	LOG_DBG("req %p", req);

	if (req->buf) {
   1f7a6:	6883      	ldr	r3, [r0, #8]
   1f7a8:	b14b      	cbz	r3, 1f7be <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1f7aa:	6998      	ldr	r0, [r3, #24]
   1f7ac:	f7fe ffaa 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1f7b0:	9b01      	ldr	r3, [sp, #4]
   1f7b2:	6898      	ldr	r0, [r3, #8]
   1f7b4:	f00f fba4 	bl	2ef00 <net_buf_unref>
		req->buf = NULL;
   1f7b8:	9b01      	ldr	r3, [sp, #4]
   1f7ba:	2200      	movs	r2, #0
   1f7bc:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1f7be:	a901      	add	r1, sp, #4
   1f7c0:	4802      	ldr	r0, [pc, #8]	; (1f7cc <bt_att_req_free+0x2c>)
   1f7c2:	f011 f995 	bl	30af0 <k_mem_slab_free>
}
   1f7c6:	b003      	add	sp, #12
   1f7c8:	f85d fb04 	ldr.w	pc, [sp], #4
   1f7cc:	200009b0 	.word	0x200009b0

0001f7d0 <att_handle_rsp>:
{
   1f7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f7d4:	b08a      	sub	sp, #40	; 0x28
   1f7d6:	4604      	mov	r4, r0
   1f7d8:	460f      	mov	r7, r1
   1f7da:	4691      	mov	r9, r2
   1f7dc:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1f7de:	3058      	adds	r0, #88	; 0x58
   1f7e0:	f011 fc48 	bl	31074 <k_work_cancel_delayable>
	if (!chan->req) {
   1f7e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1f7e6:	b1f0      	cbz	r0, 1f826 <att_handle_rsp+0x56>
	if (chan->req == &cancel) {
   1f7e8:	4b22      	ldr	r3, [pc, #136]	; (1f874 <att_handle_rsp+0xa4>)
   1f7ea:	4298      	cmp	r0, r3
   1f7ec:	d03f      	beq.n	1f86e <att_handle_rsp+0x9e>
	func = chan->req->func;
   1f7ee:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1f7f0:	f04f 0a00 	mov.w	sl, #0
   1f7f4:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1f7f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1f7fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1f7fe:	f7ff ffcf 	bl	1f7a0 <bt_att_req_free>
	chan->req = NULL;
   1f802:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1f806:	6820      	ldr	r0, [r4, #0]
   1f808:	f00e f8ac 	bl	2d964 <att_req_send_process>
	if (func) {
   1f80c:	b13d      	cbz	r5, 1f81e <att_handle_rsp+0x4e>
		func(chan->att->conn, err, pdu, len, params);
   1f80e:	6823      	ldr	r3, [r4, #0]
   1f810:	6818      	ldr	r0, [r3, #0]
   1f812:	f8cd 8000 	str.w	r8, [sp]
   1f816:	464b      	mov	r3, r9
   1f818:	463a      	mov	r2, r7
   1f81a:	4631      	mov	r1, r6
   1f81c:	47a8      	blx	r5
}
   1f81e:	2000      	movs	r0, #0
   1f820:	b00a      	add	sp, #40	; 0x28
   1f822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("No pending ATT request");
   1f826:	4b14      	ldr	r3, [pc, #80]	; (1f878 <att_handle_rsp+0xa8>)
   1f828:	9309      	str	r3, [sp, #36]	; 0x24
   1f82a:	2302      	movs	r3, #2
   1f82c:	f88d 300c 	strb.w	r3, [sp, #12]
   1f830:	2500      	movs	r5, #0
   1f832:	f88d 500d 	strb.w	r5, [sp, #13]
   1f836:	f88d 500e 	strb.w	r5, [sp, #14]
   1f83a:	f88d 500f 	strb.w	r5, [sp, #15]
   1f83e:	9a03      	ldr	r2, [sp, #12]
   1f840:	9208      	str	r2, [sp, #32]
   1f842:	4629      	mov	r1, r5
   1f844:	f365 0100 	bfi	r1, r5, #0, #1
   1f848:	f365 0141 	bfi	r1, r5, #1, #1
   1f84c:	f365 0182 	bfi	r1, r5, #2, #1
   1f850:	f365 01c5 	bfi	r1, r5, #3, #3
   1f854:	f363 1188 	bfi	r1, r3, #6, #3
   1f858:	2308      	movs	r3, #8
   1f85a:	f363 2153 	bfi	r1, r3, #9, #11
   1f85e:	f365 511f 	bfi	r1, r5, #20, #12
   1f862:	462b      	mov	r3, r5
   1f864:	aa08      	add	r2, sp, #32
   1f866:	4805      	ldr	r0, [pc, #20]	; (1f87c <att_handle_rsp+0xac>)
   1f868:	f7f4 fc48 	bl	140fc <z_impl_z_log_msg_static_create>
		goto process;
   1f86c:	e7cb      	b.n	1f806 <att_handle_rsp+0x36>
		chan->req = NULL;
   1f86e:	2500      	movs	r5, #0
   1f870:	63a5      	str	r5, [r4, #56]	; 0x38
		goto process;
   1f872:	e7c8      	b.n	1f806 <att_handle_rsp+0x36>
   1f874:	20004000 	.word	0x20004000
   1f878:	00034630 	.word	0x00034630
   1f87c:	00031cdc 	.word	0x00031cdc

0001f880 <att_reset>:
{
   1f880:	b530      	push	{r4, r5, lr}
   1f882:	b085      	sub	sp, #20
   1f884:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1f886:	e005      	b.n	1f894 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1f888:	69a0      	ldr	r0, [r4, #24]
   1f88a:	f7fe ff3b 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(buf);
   1f88e:	4620      	mov	r0, r4
   1f890:	f00f fb36 	bl	2ef00 <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1f894:	2200      	movs	r2, #0
   1f896:	2300      	movs	r3, #0
   1f898:	9803      	ldr	r0, [sp, #12]
   1f89a:	300c      	adds	r0, #12
   1f89c:	f00f fafa 	bl	2ee94 <net_buf_get>
   1f8a0:	4604      	mov	r4, r0
   1f8a2:	2800      	cmp	r0, #0
   1f8a4:	d1f0      	bne.n	1f888 <att_reset+0x8>
   1f8a6:	e00b      	b.n	1f8c0 <att_reset+0x40>
	list->tail = node;
   1f8a8:	609a      	str	r2, [r3, #8]
}
   1f8aa:	e011      	b.n	1f8d0 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1f8ac:	6818      	ldr	r0, [r3, #0]
   1f8ae:	68e3      	ldr	r3, [r4, #12]
   1f8b0:	9300      	str	r3, [sp, #0]
   1f8b2:	2300      	movs	r3, #0
   1f8b4:	461a      	mov	r2, r3
   1f8b6:	210e      	movs	r1, #14
   1f8b8:	47a8      	blx	r5
		bt_att_req_free(req);
   1f8ba:	4620      	mov	r0, r4
   1f8bc:	f7ff ff70 	bl	1f7a0 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1f8c0:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1f8c2:	685c      	ldr	r4, [r3, #4]
   1f8c4:	b144      	cbz	r4, 1f8d8 <att_reset+0x58>
	return node->next;
   1f8c6:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1f8c8:	605a      	str	r2, [r3, #4]
	return list->tail;
   1f8ca:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f8cc:	42a1      	cmp	r1, r4
   1f8ce:	d0eb      	beq.n	1f8a8 <att_reset+0x28>
		if (req->func) {
   1f8d0:	6865      	ldr	r5, [r4, #4]
   1f8d2:	2d00      	cmp	r5, #0
   1f8d4:	d1ea      	bne.n	1f8ac <att_reset+0x2c>
   1f8d6:	e7f0      	b.n	1f8ba <att_reset+0x3a>
	att->conn = NULL;
   1f8d8:	2200      	movs	r2, #0
   1f8da:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1f8dc:	a903      	add	r1, sp, #12
   1f8de:	4802      	ldr	r0, [pc, #8]	; (1f8e8 <att_reset+0x68>)
   1f8e0:	f011 f906 	bl	30af0 <k_mem_slab_free>
}
   1f8e4:	b005      	add	sp, #20
   1f8e6:	bd30      	pop	{r4, r5, pc}
   1f8e8:	2000095c 	.word	0x2000095c

0001f8ec <att_timeout>:
{
   1f8ec:	b510      	push	{r4, lr}
   1f8ee:	b088      	sub	sp, #32
   1f8f0:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1f8f2:	4b14      	ldr	r3, [pc, #80]	; (1f944 <att_timeout+0x58>)
   1f8f4:	9307      	str	r3, [sp, #28]
   1f8f6:	2302      	movs	r3, #2
   1f8f8:	f88d 3004 	strb.w	r3, [sp, #4]
   1f8fc:	2300      	movs	r3, #0
   1f8fe:	f88d 3005 	strb.w	r3, [sp, #5]
   1f902:	f88d 3006 	strb.w	r3, [sp, #6]
   1f906:	f88d 3007 	strb.w	r3, [sp, #7]
   1f90a:	9a01      	ldr	r2, [sp, #4]
   1f90c:	9206      	str	r2, [sp, #24]
   1f90e:	4619      	mov	r1, r3
   1f910:	f363 0100 	bfi	r1, r3, #0, #1
   1f914:	f363 0141 	bfi	r1, r3, #1, #1
   1f918:	f363 0182 	bfi	r1, r3, #2, #1
   1f91c:	f363 01c5 	bfi	r1, r3, #3, #3
   1f920:	2201      	movs	r2, #1
   1f922:	f362 1188 	bfi	r1, r2, #6, #3
   1f926:	2208      	movs	r2, #8
   1f928:	f362 2153 	bfi	r1, r2, #9, #11
   1f92c:	f363 511f 	bfi	r1, r3, #20, #12
   1f930:	aa06      	add	r2, sp, #24
   1f932:	4805      	ldr	r0, [pc, #20]	; (1f948 <att_timeout+0x5c>)
   1f934:	f7f4 fbe2 	bl	140fc <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
   1f938:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
   1f93c:	f00e fd11 	bl	2e362 <bt_att_disconnected>
}
   1f940:	b008      	add	sp, #32
   1f942:	bd10      	pop	{r4, pc}
   1f944:	00034648 	.word	0x00034648
   1f948:	00031cdc 	.word	0x00031cdc

0001f94c <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1f94c:	b570      	push	{r4, r5, r6, lr}
   1f94e:	4606      	mov	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1f950:	2400      	movs	r4, #0
   1f952:	b114      	cbz	r4, 1f95a <find_cf_cfg+0xe>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
			return cfg;
		}
	}

	return NULL;
   1f954:	2500      	movs	r5, #0
}
   1f956:	4628      	mov	r0, r5
   1f958:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1f95a:	4d0d      	ldr	r5, [pc, #52]	; (1f990 <find_cf_cfg+0x44>)
   1f95c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1f960:	b166      	cbz	r6, 1f97c <find_cf_cfg+0x30>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1f962:	0123      	lsls	r3, r4, #4
   1f964:	490a      	ldr	r1, [pc, #40]	; (1f990 <find_cf_cfg+0x44>)
   1f966:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1f96a:	3201      	adds	r2, #1
   1f96c:	5cc9      	ldrb	r1, [r1, r3]
   1f96e:	4630      	mov	r0, r6
   1f970:	f00d fdc5 	bl	2d4fe <bt_conn_is_peer_addr_le>
   1f974:	2800      	cmp	r0, #0
   1f976:	d1ee      	bne.n	1f956 <find_cf_cfg+0xa>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1f978:	3401      	adds	r4, #1
   1f97a:	e7ea      	b.n	1f952 <find_cf_cfg+0x6>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f97c:	4628      	mov	r0, r5
   1f97e:	2207      	movs	r2, #7
   1f980:	4904      	ldr	r1, [pc, #16]	; (1f994 <find_cf_cfg+0x48>)
   1f982:	3001      	adds	r0, #1
   1f984:	f00c ff0d 	bl	2c7a2 <memcmp>
   1f988:	2800      	cmp	r0, #0
   1f98a:	d1f5      	bne.n	1f978 <find_cf_cfg+0x2c>
   1f98c:	e7e3      	b.n	1f956 <find_cf_cfg+0xa>
   1f98e:	bf00      	nop
   1f990:	20004028 	.word	0x20004028
   1f994:	000334a0 	.word	0x000334a0

0001f998 <find_sc_cfg>:
{
   1f998:	b570      	push	{r4, r5, r6, lr}
   1f99a:	4606      	mov	r6, r0
   1f99c:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1f99e:	2400      	movs	r4, #0
   1f9a0:	b10c      	cbz	r4, 1f9a6 <find_sc_cfg+0xe>
	return NULL;
   1f9a2:	2000      	movs	r0, #0
}
   1f9a4:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   1f9a6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1f9aa:	4a0c      	ldr	r2, [pc, #48]	; (1f9dc <find_sc_cfg+0x44>)
   1f9ac:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1f9b0:	429e      	cmp	r6, r3
   1f9b2:	d001      	beq.n	1f9b8 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1f9b4:	3401      	adds	r4, #1
   1f9b6:	e7f3      	b.n	1f9a0 <find_sc_cfg+0x8>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1f9b8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1f9bc:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   1f9c0:	2207      	movs	r2, #7
   1f9c2:	4629      	mov	r1, r5
   1f9c4:	3001      	adds	r0, #1
   1f9c6:	f00c feec 	bl	2c7a2 <memcmp>
		if (id == sc_cfg[i].id &&
   1f9ca:	2800      	cmp	r0, #0
   1f9cc:	d1f2      	bne.n	1f9b4 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1f9ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1f9d2:	4802      	ldr	r0, [pc, #8]	; (1f9dc <find_sc_cfg+0x44>)
   1f9d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1f9d8:	e7e4      	b.n	1f9a4 <find_sc_cfg+0xc>
   1f9da:	bf00      	nop
   1f9dc:	20004038 	.word	0x20004038

0001f9e0 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9e2:	4607      	mov	r7, r0
   1f9e4:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f9e6:	2400      	movs	r4, #0
   1f9e8:	b114      	cbz	r4, 1f9f0 <find_ccc_cfg+0x10>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
			return cfg;
		}
	}

	return NULL;
   1f9ea:	2600      	movs	r6, #0
}
   1f9ec:	4630      	mov	r0, r6
   1f9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1f9f0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1f9f4:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   1f9f8:	b167      	cbz	r7, 1fa14 <find_ccc_cfg+0x34>
						    &cfg->peer)) {
   1f9fa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1f9fe:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1fa00:	3201      	adds	r2, #1
   1fa02:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   1fa06:	4638      	mov	r0, r7
   1fa08:	f00d fd79 	bl	2d4fe <bt_conn_is_peer_addr_le>
   1fa0c:	2800      	cmp	r0, #0
   1fa0e:	d1ed      	bne.n	1f9ec <find_ccc_cfg+0xc>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1fa10:	3401      	adds	r4, #1
   1fa12:	e7e9      	b.n	1f9e8 <find_ccc_cfg+0x8>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1fa14:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1fa18:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   1fa1c:	2207      	movs	r2, #7
   1fa1e:	4903      	ldr	r1, [pc, #12]	; (1fa2c <find_ccc_cfg+0x4c>)
   1fa20:	3001      	adds	r0, #1
   1fa22:	f00c febe 	bl	2c7a2 <memcmp>
   1fa26:	2800      	cmp	r0, #0
   1fa28:	d1f2      	bne.n	1fa10 <find_ccc_cfg+0x30>
   1fa2a:	e7df      	b.n	1f9ec <find_ccc_cfg+0xc>
   1fa2c:	000334a0 	.word	0x000334a0

0001fa30 <bt_gatt_service_init>:
   1fa30:	4b0d      	ldr	r3, [pc, #52]	; (1fa68 <bt_gatt_service_init+0x38>)
   1fa32:	f3bf 8f5b 	dmb	ish
   1fa36:	e853 2f00 	ldrex	r2, [r3]
   1fa3a:	f042 0102 	orr.w	r1, r2, #2
   1fa3e:	e843 1000 	strex	r0, r1, [r3]
   1fa42:	2800      	cmp	r0, #0
   1fa44:	d1f7      	bne.n	1fa36 <bt_gatt_service_init+0x6>
   1fa46:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1fa4a:	f012 0f02 	tst.w	r2, #2
   1fa4e:	d10a      	bne.n	1fa66 <bt_gatt_service_init+0x36>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1fa50:	4b06      	ldr	r3, [pc, #24]	; (1fa6c <bt_gatt_service_init+0x3c>)
   1fa52:	e005      	b.n	1fa60 <bt_gatt_service_init+0x30>
		last_static_handle += svc->attr_count;
   1fa54:	685a      	ldr	r2, [r3, #4]
   1fa56:	4906      	ldr	r1, [pc, #24]	; (1fa70 <bt_gatt_service_init+0x40>)
   1fa58:	8808      	ldrh	r0, [r1, #0]
   1fa5a:	4402      	add	r2, r0
   1fa5c:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1fa5e:	3308      	adds	r3, #8
   1fa60:	4a04      	ldr	r2, [pc, #16]	; (1fa74 <bt_gatt_service_init+0x44>)
   1fa62:	4293      	cmp	r3, r2
   1fa64:	d3f6      	bcc.n	1fa54 <bt_gatt_service_init+0x24>
}
   1fa66:	4770      	bx	lr
   1fa68:	20004044 	.word	0x20004044
   1fa6c:	00031ca4 	.word	0x00031ca4
   1fa70:	20005d38 	.word	0x20005d38
   1fa74:	00031cbc 	.word	0x00031cbc

0001fa78 <sc_save>:
{
   1fa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa7c:	b088      	sub	sp, #32
   1fa7e:	4607      	mov	r7, r0
   1fa80:	4688      	mov	r8, r1
   1fa82:	4616      	mov	r6, r2
   1fa84:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1fa86:	f7ff ff87 	bl	1f998 <find_sc_cfg>
	if (!cfg) {
   1fa8a:	4604      	mov	r4, r0
   1fa8c:	b178      	cbz	r0, 1faae <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1fa8e:	8923      	ldrh	r3, [r4, #8]
   1fa90:	b913      	cbnz	r3, 1fa98 <sc_save+0x20>
   1fa92:	8963      	ldrh	r3, [r4, #10]
   1fa94:	2b00      	cmp	r3, #0
   1fa96:	d03a      	beq.n	1fb0e <sc_save+0x96>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1fa98:	462b      	mov	r3, r5
   1fa9a:	4632      	mov	r2, r6
   1fa9c:	f104 010a 	add.w	r1, r4, #10
   1faa0:	f104 0008 	add.w	r0, r4, #8
   1faa4:	f00e fce6 	bl	2e474 <update_range>
}
   1faa8:	b008      	add	sp, #32
   1faaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1faae:	4919      	ldr	r1, [pc, #100]	; (1fb14 <sc_save+0x9c>)
   1fab0:	f7ff ff72 	bl	1f998 <find_sc_cfg>
		if (!cfg) {
   1fab4:	4604      	mov	r4, r0
   1fab6:	b130      	cbz	r0, 1fac6 <sc_save+0x4e>
		cfg->id = id;
   1fab8:	f800 7b01 	strb.w	r7, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   1fabc:	2207      	movs	r2, #7
   1fabe:	4641      	mov	r1, r8
   1fac0:	f00c fe94 	bl	2c7ec <memcpy>
}
   1fac4:	e7e3      	b.n	1fa8e <sc_save+0x16>
			LOG_ERR("unable to save SC: no cfg left");
   1fac6:	4b14      	ldr	r3, [pc, #80]	; (1fb18 <sc_save+0xa0>)
   1fac8:	9307      	str	r3, [sp, #28]
   1faca:	2302      	movs	r3, #2
   1facc:	f88d 3004 	strb.w	r3, [sp, #4]
   1fad0:	2300      	movs	r3, #0
   1fad2:	f88d 3005 	strb.w	r3, [sp, #5]
   1fad6:	f88d 3006 	strb.w	r3, [sp, #6]
   1fada:	f88d 3007 	strb.w	r3, [sp, #7]
   1fade:	9a01      	ldr	r2, [sp, #4]
   1fae0:	9206      	str	r2, [sp, #24]
   1fae2:	4619      	mov	r1, r3
   1fae4:	f363 0100 	bfi	r1, r3, #0, #1
   1fae8:	f363 0141 	bfi	r1, r3, #1, #1
   1faec:	f363 0182 	bfi	r1, r3, #2, #1
   1faf0:	f363 01c5 	bfi	r1, r3, #3, #3
   1faf4:	2201      	movs	r2, #1
   1faf6:	f362 1188 	bfi	r1, r2, #6, #3
   1fafa:	2208      	movs	r2, #8
   1fafc:	f362 2153 	bfi	r1, r2, #9, #11
   1fb00:	f363 511f 	bfi	r1, r3, #20, #12
   1fb04:	aa06      	add	r2, sp, #24
   1fb06:	4805      	ldr	r0, [pc, #20]	; (1fb1c <sc_save+0xa4>)
   1fb08:	f7f4 faf8 	bl	140fc <z_impl_z_log_msg_static_create>
			return;
   1fb0c:	e7cc      	b.n	1faa8 <sc_save+0x30>
		cfg->data.start = start;
   1fb0e:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1fb10:	8165      	strh	r5, [r4, #10]
		goto done;
   1fb12:	e7c9      	b.n	1faa8 <sc_save+0x30>
   1fb14:	000334a0 	.word	0x000334a0
   1fb18:	000346cc 	.word	0x000346cc
   1fb1c:	00031cf4 	.word	0x00031cf4

0001fb20 <clear_ccc_cfg>:
{
   1fb20:	b510      	push	{r4, lr}
   1fb22:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1fb24:	2207      	movs	r2, #7
   1fb26:	4904      	ldr	r1, [pc, #16]	; (1fb38 <clear_ccc_cfg+0x18>)
   1fb28:	3001      	adds	r0, #1
   1fb2a:	f00c fe5f 	bl	2c7ec <memcpy>
	cfg->id = 0U;
   1fb2e:	2300      	movs	r3, #0
   1fb30:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1fb32:	8123      	strh	r3, [r4, #8]
}
   1fb34:	bd10      	pop	{r4, pc}
   1fb36:	bf00      	nop
   1fb38:	000334a0 	.word	0x000334a0

0001fb3c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1fb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fb40:	b089      	sub	sp, #36	; 0x24
   1fb42:	461c      	mov	r4, r3
   1fb44:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1fb48:	68cf      	ldr	r7, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1fb4a:	2b00      	cmp	r3, #0
   1fb4c:	d16b      	bne.n	1fc26 <bt_gatt_attr_write_ccc+0xea>
   1fb4e:	4681      	mov	r9, r0
   1fb50:	460e      	mov	r6, r1
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1fb52:	1e63      	subs	r3, r4, #1
   1fb54:	b29b      	uxth	r3, r3
   1fb56:	2b01      	cmp	r3, #1
   1fb58:	d868      	bhi.n	1fc2c <bt_gatt_attr_write_ccc+0xf0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1fb5a:	2c01      	cmp	r4, #1
   1fb5c:	d91f      	bls.n	1fb9e <bt_gatt_attr_write_ccc+0x62>
   1fb5e:	7853      	ldrb	r3, [r2, #1]
   1fb60:	7815      	ldrb	r5, [r2, #0]
   1fb62:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1fb66:	4639      	mov	r1, r7
   1fb68:	4648      	mov	r0, r9
   1fb6a:	f7ff ff39 	bl	1f9e0 <find_ccc_cfg>
	if (!cfg) {
   1fb6e:	4680      	mov	r8, r0
   1fb70:	b1b8      	cbz	r0, 1fba2 <bt_gatt_attr_write_ccc+0x66>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
		cfg->id = conn->id;
	}

	/* Confirm write if cfg is managed by application */
	if (ccc->cfg_write) {
   1fb72:	693b      	ldr	r3, [r7, #16]
   1fb74:	b143      	cbz	r3, 1fb88 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1fb76:	462a      	mov	r2, r5
   1fb78:	4631      	mov	r1, r6
   1fb7a:	4648      	mov	r0, r9
   1fb7c:	4798      	blx	r3

		if (write < 0) {
   1fb7e:	2800      	cmp	r0, #0
   1fb80:	db0a      	blt.n	1fb98 <bt_gatt_attr_write_ccc+0x5c>
			return write;
		}

		/* Accept size=1 for backwards compatibility */
		if (write != sizeof(value) && write != 1) {
   1fb82:	3801      	subs	r0, #1
   1fb84:	2801      	cmp	r0, #1
   1fb86:	d854      	bhi.n	1fc32 <bt_gatt_attr_write_ccc+0xf6>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
		}
	}

	value_changed = cfg->value != value;
	cfg->value = value;
   1fb88:	f8a8 5008 	strh.w	r5, [r8, #8]

	LOG_DBG("handle 0x%04x value %u", attr->handle, cfg->value);

	/* Update cfg if don't match */
	if (cfg->value != ccc->value) {
   1fb8c:	897b      	ldrh	r3, [r7, #10]
   1fb8e:	429d      	cmp	r5, r3
   1fb90:	d140      	bne.n	1fc14 <bt_gatt_attr_write_ccc+0xd8>
		gatt_delayed_store_enqueue(conn->id, &conn->le.dst, DELAYED_STORE_CCC);
#endif
	}

	/* Disabled CCC is the same as no configured CCC, so clear the entry */
	if (!value) {
   1fb92:	2d00      	cmp	r5, #0
   1fb94:	d043      	beq.n	1fc1e <bt_gatt_attr_write_ccc+0xe2>
		clear_ccc_cfg(cfg);
	}

	return len;
   1fb96:	4620      	mov	r0, r4
}
   1fb98:	b009      	add	sp, #36	; 0x24
   1fb9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1fb9e:	7815      	ldrb	r5, [r2, #0]
   1fba0:	e7e1      	b.n	1fb66 <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1fba2:	b90d      	cbnz	r5, 1fba8 <bt_gatt_attr_write_ccc+0x6c>
			return len;
   1fba4:	4620      	mov	r0, r4
   1fba6:	e7f7      	b.n	1fb98 <bt_gatt_attr_write_ccc+0x5c>
		cfg = find_ccc_cfg(NULL, ccc);
   1fba8:	4639      	mov	r1, r7
   1fbaa:	2000      	movs	r0, #0
   1fbac:	f7ff ff18 	bl	1f9e0 <find_ccc_cfg>
		if (!cfg) {
   1fbb0:	4680      	mov	r8, r0
   1fbb2:	b150      	cbz	r0, 1fbca <bt_gatt_attr_write_ccc+0x8e>
   1fbb4:	2207      	movs	r2, #7
   1fbb6:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1fbba:	3001      	adds	r0, #1
   1fbbc:	f00c fe16 	bl	2c7ec <memcpy>
		cfg->id = conn->id;
   1fbc0:	f899 3008 	ldrb.w	r3, [r9, #8]
   1fbc4:	f888 3000 	strb.w	r3, [r8]
   1fbc8:	e7d3      	b.n	1fb72 <bt_gatt_attr_write_ccc+0x36>
			LOG_WRN("No space to store CCC cfg");
   1fbca:	4b1b      	ldr	r3, [pc, #108]	; (1fc38 <bt_gatt_attr_write_ccc+0xfc>)
   1fbcc:	9307      	str	r3, [sp, #28]
   1fbce:	2202      	movs	r2, #2
   1fbd0:	f88d 2004 	strb.w	r2, [sp, #4]
   1fbd4:	2300      	movs	r3, #0
   1fbd6:	f88d 3005 	strb.w	r3, [sp, #5]
   1fbda:	f88d 3006 	strb.w	r3, [sp, #6]
   1fbde:	f88d 3007 	strb.w	r3, [sp, #7]
   1fbe2:	9901      	ldr	r1, [sp, #4]
   1fbe4:	9106      	str	r1, [sp, #24]
   1fbe6:	4619      	mov	r1, r3
   1fbe8:	f363 0100 	bfi	r1, r3, #0, #1
   1fbec:	f363 0141 	bfi	r1, r3, #1, #1
   1fbf0:	f363 0182 	bfi	r1, r3, #2, #1
   1fbf4:	f363 01c5 	bfi	r1, r3, #3, #3
   1fbf8:	f362 1188 	bfi	r1, r2, #6, #3
   1fbfc:	2208      	movs	r2, #8
   1fbfe:	f362 2153 	bfi	r1, r2, #9, #11
   1fc02:	f363 511f 	bfi	r1, r3, #20, #12
   1fc06:	aa06      	add	r2, sp, #24
   1fc08:	480c      	ldr	r0, [pc, #48]	; (1fc3c <bt_gatt_attr_write_ccc+0x100>)
   1fc0a:	f7f4 fa77 	bl	140fc <z_impl_z_log_msg_static_create>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1fc0e:	f06f 0010 	mvn.w	r0, #16
   1fc12:	e7c1      	b.n	1fb98 <bt_gatt_attr_write_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1fc14:	4639      	mov	r1, r7
   1fc16:	4630      	mov	r0, r6
   1fc18:	f00e fc88 	bl	2e52c <gatt_ccc_changed>
   1fc1c:	e7b9      	b.n	1fb92 <bt_gatt_attr_write_ccc+0x56>
		clear_ccc_cfg(cfg);
   1fc1e:	4640      	mov	r0, r8
   1fc20:	f7ff ff7e 	bl	1fb20 <clear_ccc_cfg>
   1fc24:	e7b7      	b.n	1fb96 <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fc26:	f06f 0006 	mvn.w	r0, #6
   1fc2a:	e7b5      	b.n	1fb98 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1fc2c:	f06f 000c 	mvn.w	r0, #12
   1fc30:	e7b2      	b.n	1fb98 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1fc32:	f06f 000d 	mvn.w	r0, #13
   1fc36:	e7af      	b.n	1fb98 <bt_gatt_attr_write_ccc+0x5c>
   1fc38:	000346ec 	.word	0x000346ec
   1fc3c:	00031cf4 	.word	0x00031cf4

0001fc40 <cf_write>:
{
   1fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc44:	b088      	sub	sp, #32
   1fc46:	461c      	mov	r4, r3
   1fc48:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   1fc4c:	2b01      	cmp	r3, #1
   1fc4e:	d84a      	bhi.n	1fce6 <cf_write+0xa6>
   1fc50:	4606      	mov	r6, r0
   1fc52:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1fc54:	46a0      	mov	r8, r4
   1fc56:	4423      	add	r3, r4
   1fc58:	2b01      	cmp	r3, #1
   1fc5a:	d847      	bhi.n	1fcec <cf_write+0xac>
	cfg = find_cf_cfg(conn);
   1fc5c:	f7ff fe76 	bl	1f94c <find_cf_cfg>
	if (!cfg) {
   1fc60:	4605      	mov	r5, r0
   1fc62:	b1b0      	cbz	r0, 1fc92 <cf_write+0x52>
	if (!cf_set_value(cfg, value, len)) {
   1fc64:	4622      	mov	r2, r4
   1fc66:	4639      	mov	r1, r7
   1fc68:	4628      	mov	r0, r5
   1fc6a:	f00e fc25 	bl	2e4b8 <cf_set_value>
   1fc6e:	2800      	cmp	r0, #0
   1fc70:	d03f      	beq.n	1fcf2 <cf_write+0xb2>
   1fc72:	2207      	movs	r2, #7
   1fc74:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1fc78:	1c68      	adds	r0, r5, #1
   1fc7a:	f00c fdb7 	bl	2c7ec <memcpy>
	cfg->id = conn->id;
   1fc7e:	7a33      	ldrb	r3, [r6, #8]
   1fc80:	702b      	strb	r3, [r5, #0]
	set_change_aware(cfg, true);
   1fc82:	2101      	movs	r1, #1
   1fc84:	4628      	mov	r0, r5
   1fc86:	f00e fd3e 	bl	2e706 <set_change_aware>
}
   1fc8a:	4640      	mov	r0, r8
   1fc8c:	b008      	add	sp, #32
   1fc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1fc92:	f7ff fe5b 	bl	1f94c <find_cf_cfg>
	if (!cfg) {
   1fc96:	4605      	mov	r5, r0
   1fc98:	2800      	cmp	r0, #0
   1fc9a:	d1e3      	bne.n	1fc64 <cf_write+0x24>
		LOG_WRN("No space to store Client Supported Features");
   1fc9c:	4b16      	ldr	r3, [pc, #88]	; (1fcf8 <cf_write+0xb8>)
   1fc9e:	9307      	str	r3, [sp, #28]
   1fca0:	2202      	movs	r2, #2
   1fca2:	f88d 2004 	strb.w	r2, [sp, #4]
   1fca6:	2300      	movs	r3, #0
   1fca8:	f88d 3005 	strb.w	r3, [sp, #5]
   1fcac:	f88d 3006 	strb.w	r3, [sp, #6]
   1fcb0:	f88d 3007 	strb.w	r3, [sp, #7]
   1fcb4:	9901      	ldr	r1, [sp, #4]
   1fcb6:	9106      	str	r1, [sp, #24]
   1fcb8:	4619      	mov	r1, r3
   1fcba:	f363 0100 	bfi	r1, r3, #0, #1
   1fcbe:	f363 0141 	bfi	r1, r3, #1, #1
   1fcc2:	f363 0182 	bfi	r1, r3, #2, #1
   1fcc6:	f363 01c5 	bfi	r1, r3, #3, #3
   1fcca:	f362 1188 	bfi	r1, r2, #6, #3
   1fcce:	2208      	movs	r2, #8
   1fcd0:	f362 2153 	bfi	r1, r2, #9, #11
   1fcd4:	f363 511f 	bfi	r1, r3, #20, #12
   1fcd8:	aa06      	add	r2, sp, #24
   1fcda:	4808      	ldr	r0, [pc, #32]	; (1fcfc <cf_write+0xbc>)
   1fcdc:	f7f4 fa0e 	bl	140fc <z_impl_z_log_msg_static_create>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1fce0:	f06f 0810 	mvn.w	r8, #16
   1fce4:	e7d1      	b.n	1fc8a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fce6:	f06f 0806 	mvn.w	r8, #6
   1fcea:	e7ce      	b.n	1fc8a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1fcec:	f06f 080c 	mvn.w	r8, #12
   1fcf0:	e7cb      	b.n	1fc8a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1fcf2:	f06f 0812 	mvn.w	r8, #18
   1fcf6:	e7c8      	b.n	1fc8a <cf_write+0x4a>
   1fcf8:	00034708 	.word	0x00034708
   1fcfc:	00031cf4 	.word	0x00031cf4

0001fd00 <sc_clear>:
{
   1fd00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd02:	b083      	sub	sp, #12
   1fd04:	af00      	add	r7, sp, #0
   1fd06:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1fd08:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1fd0c:	4629      	mov	r1, r5
   1fd0e:	7a00      	ldrb	r0, [r0, #8]
   1fd10:	f00d f822 	bl	2cd58 <bt_addr_le_is_bonded>
   1fd14:	2800      	cmp	r0, #0
   1fd16:	d040      	beq.n	1fd9a <sc_clear+0x9a>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1fd18:	4629      	mov	r1, r5
   1fd1a:	7a20      	ldrb	r0, [r4, #8]
   1fd1c:	f00e fcfd 	bl	2e71a <bt_gatt_clear_sc>
		if (err) {
   1fd20:	4604      	mov	r4, r0
   1fd22:	2800      	cmp	r0, #0
   1fd24:	d040      	beq.n	1fda8 <sc_clear+0xa8>
			LOG_ERR("Failed to clear SC %d", err);
   1fd26:	466d      	mov	r5, sp
   1fd28:	b088      	sub	sp, #32
   1fd2a:	466b      	mov	r3, sp
   1fd2c:	f113 0210 	adds.w	r2, r3, #16
   1fd30:	d02d      	beq.n	1fd8e <sc_clear+0x8e>
   1fd32:	210c      	movs	r1, #12
   1fd34:	b13a      	cbz	r2, 1fd46 <sc_clear+0x46>
   1fd36:	4608      	mov	r0, r1
   1fd38:	2904      	cmp	r1, #4
   1fd3a:	dd01      	ble.n	1fd40 <sc_clear+0x40>
   1fd3c:	4e1c      	ldr	r6, [pc, #112]	; (1fdb0 <sc_clear+0xb0>)
   1fd3e:	615e      	str	r6, [r3, #20]
   1fd40:	2808      	cmp	r0, #8
   1fd42:	dd00      	ble.n	1fd46 <sc_clear+0x46>
   1fd44:	619c      	str	r4, [r3, #24]
   1fd46:	290b      	cmp	r1, #11
   1fd48:	dd24      	ble.n	1fd94 <sc_clear+0x94>
   1fd4a:	240c      	movs	r4, #12
   1fd4c:	b13a      	cbz	r2, 1fd5e <sc_clear+0x5e>
   1fd4e:	2103      	movs	r1, #3
   1fd50:	7139      	strb	r1, [r7, #4]
   1fd52:	2100      	movs	r1, #0
   1fd54:	7179      	strb	r1, [r7, #5]
   1fd56:	71b9      	strb	r1, [r7, #6]
   1fd58:	71f9      	strb	r1, [r7, #7]
   1fd5a:	6878      	ldr	r0, [r7, #4]
   1fd5c:	6118      	str	r0, [r3, #16]
   1fd5e:	2100      	movs	r1, #0
   1fd60:	f36f 0100 	bfc	r1, #0, #1
   1fd64:	f36f 0141 	bfc	r1, #1, #1
   1fd68:	f36f 0182 	bfc	r1, #2, #1
   1fd6c:	f36f 01c5 	bfc	r1, #3, #3
   1fd70:	2301      	movs	r3, #1
   1fd72:	f363 1188 	bfi	r1, r3, #6, #3
   1fd76:	f3c4 040a 	ubfx	r4, r4, #0, #11
   1fd7a:	f364 2153 	bfi	r1, r4, #9, #11
   1fd7e:	f36f 511f 	bfc	r1, #20, #12
   1fd82:	2300      	movs	r3, #0
   1fd84:	480b      	ldr	r0, [pc, #44]	; (1fdb4 <sc_clear+0xb4>)
   1fd86:	f7f4 f9b9 	bl	140fc <z_impl_z_log_msg_static_create>
   1fd8a:	46ad      	mov	sp, r5
   1fd8c:	e00c      	b.n	1fda8 <sc_clear+0xa8>
   1fd8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fd92:	e7cf      	b.n	1fd34 <sc_clear+0x34>
   1fd94:	f06f 041b 	mvn.w	r4, #27
   1fd98:	e7d8      	b.n	1fd4c <sc_clear+0x4c>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1fd9a:	4629      	mov	r1, r5
   1fd9c:	7a20      	ldrb	r0, [r4, #8]
   1fd9e:	f7ff fdfb 	bl	1f998 <find_sc_cfg>
		if (cfg) {
   1fda2:	b108      	cbz	r0, 1fda8 <sc_clear+0xa8>
			clear_sc_cfg(cfg);
   1fda4:	f00e fcb3 	bl	2e70e <clear_sc_cfg>
}
   1fda8:	370c      	adds	r7, #12
   1fdaa:	46bd      	mov	sp, r7
   1fdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fdae:	bf00      	nop
   1fdb0:	00034734 	.word	0x00034734
   1fdb4:	00031cf4 	.word	0x00031cf4

0001fdb8 <sc_indicate_rsp>:
{
   1fdb8:	b510      	push	{r4, lr}
   1fdba:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fdbc:	4b16      	ldr	r3, [pc, #88]	; (1fe18 <sc_indicate_rsp+0x60>)
   1fdbe:	f3bf 8f5b 	dmb	ish
   1fdc2:	e853 2f00 	ldrex	r2, [r3]
   1fdc6:	f022 0202 	bic.w	r2, r2, #2
   1fdca:	e843 2100 	strex	r1, r2, [r3]
   1fdce:	2900      	cmp	r1, #0
   1fdd0:	d1f7      	bne.n	1fdc2 <sc_indicate_rsp+0xa>
   1fdd2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fdd6:	f3bf 8f5b 	dmb	ish
   1fdda:	681b      	ldr	r3, [r3, #0]
   1fddc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1fde0:	f013 0f01 	tst.w	r3, #1
   1fde4:	d104      	bne.n	1fdf0 <sc_indicate_rsp+0x38>
	if (bt_att_fixed_chan_only(conn)) {
   1fde6:	4620      	mov	r0, r4
   1fde8:	f00e fafc 	bl	2e3e4 <bt_att_fixed_chan_only>
   1fdec:	b930      	cbnz	r0, 1fdfc <sc_indicate_rsp+0x44>
}
   1fdee:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1fdf0:	2200      	movs	r2, #0
   1fdf2:	2300      	movs	r3, #0
   1fdf4:	4809      	ldr	r0, [pc, #36]	; (1fe1c <sc_indicate_rsp+0x64>)
   1fdf6:	f006 fc2d 	bl	26654 <k_work_reschedule>
   1fdfa:	e7f4      	b.n	1fde6 <sc_indicate_rsp+0x2e>
		cfg = find_cf_cfg(conn);
   1fdfc:	4620      	mov	r0, r4
   1fdfe:	f7ff fda5 	bl	1f94c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1fe02:	2800      	cmp	r0, #0
   1fe04:	d0f3      	beq.n	1fdee <sc_indicate_rsp+0x36>
   1fe06:	7a02      	ldrb	r2, [r0, #8]
   1fe08:	f012 0f01 	tst.w	r2, #1
   1fe0c:	d0ef      	beq.n	1fdee <sc_indicate_rsp+0x36>
			set_change_aware(cfg, true);
   1fe0e:	2101      	movs	r1, #1
   1fe10:	f00e fc79 	bl	2e706 <set_change_aware>
}
   1fe14:	e7eb      	b.n	1fdee <sc_indicate_rsp+0x36>
   1fe16:	bf00      	nop
   1fe18:	20002360 	.word	0x20002360
   1fe1c:	20002330 	.word	0x20002330

0001fe20 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1fe20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1fe24:	6881      	ldr	r1, [r0, #8]
   1fe26:	4b2c      	ldr	r3, [pc, #176]	; (1fed8 <disconnected_cb+0xb8>)
   1fe28:	4299      	cmp	r1, r3
   1fe2a:	d002      	beq.n	1fe32 <disconnected_cb+0x12>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1fe2c:	2001      	movs	r0, #1
   1fe2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe32:	4604      	mov	r4, r0
   1fe34:	4616      	mov	r6, r2
	ccc = attr->user_data;
   1fe36:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1fe38:	897b      	ldrh	r3, [r7, #10]
   1fe3a:	2b00      	cmp	r3, #0
   1fe3c:	d0f6      	beq.n	1fe2c <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1fe3e:	2500      	movs	r5, #0
	value_used = false;
   1fe40:	46aa      	mov	sl, r5
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1fe42:	b15d      	cbz	r5, 1fe5c <disconnected_cb+0x3c>
	if (!value_used) {
   1fe44:	f1ba 0f00 	cmp.w	sl, #0
   1fe48:	d1f0      	bne.n	1fe2c <disconnected_cb+0xc>
		ccc->value = 0U;
   1fe4a:	2300      	movs	r3, #0
   1fe4c:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   1fe4e:	68fb      	ldr	r3, [r7, #12]
   1fe50:	2b00      	cmp	r3, #0
   1fe52:	d0eb      	beq.n	1fe2c <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   1fe54:	2100      	movs	r1, #0
   1fe56:	4620      	mov	r0, r4
   1fe58:	4798      	blx	r3
   1fe5a:	e7e7      	b.n	1fe2c <disconnected_cb+0xc>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1fe5c:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   1fe60:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   1fe64:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1fe68:	b1cb      	cbz	r3, 1fe9e <disconnected_cb+0x7e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1fe6a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1fe6e:	f108 0901 	add.w	r9, r8, #1
   1fe72:	464a      	mov	r2, r9
   1fe74:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1fe78:	4630      	mov	r0, r6
   1fe7a:	f00d fb40 	bl	2d4fe <bt_conn_is_peer_addr_le>
   1fe7e:	b998      	cbnz	r0, 1fea8 <disconnected_cb+0x88>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1fe80:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1fe84:	4649      	mov	r1, r9
   1fe86:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1fe8a:	f7fd fc93 	bl	1d7b4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1fe8e:	4603      	mov	r3, r0
   1fe90:	b128      	cbz	r0, 1fe9e <disconnected_cb+0x7e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1fe92:	7a82      	ldrb	r2, [r0, #10]
   1fe94:	2a07      	cmp	r2, #7
   1fe96:	d004      	beq.n	1fea2 <disconnected_cb+0x82>
				bt_conn_unref(tmp);
   1fe98:	4618      	mov	r0, r3
   1fe9a:	f00d fac6 	bl	2d42a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1fe9e:	3501      	adds	r5, #1
   1fea0:	e7cf      	b.n	1fe42 <disconnected_cb+0x22>
					value_used = true;
   1fea2:	f04f 0a01 	mov.w	sl, #1
   1fea6:	e7f7      	b.n	1fe98 <disconnected_cb+0x78>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1fea8:	f106 0b88 	add.w	fp, r6, #136	; 0x88
   1feac:	4659      	mov	r1, fp
   1feae:	7a30      	ldrb	r0, [r6, #8]
   1feb0:	f00c ff52 	bl	2cd58 <bt_addr_le_is_bonded>
   1feb4:	b950      	cbnz	r0, 1fecc <disconnected_cb+0xac>
				if (ccc == &sc_ccc) {
   1feb6:	4b09      	ldr	r3, [pc, #36]	; (1fedc <disconnected_cb+0xbc>)
   1feb8:	429f      	cmp	r7, r3
   1feba:	d003      	beq.n	1fec4 <disconnected_cb+0xa4>
				clear_ccc_cfg(cfg);
   1febc:	4640      	mov	r0, r8
   1febe:	f7ff fe2f 	bl	1fb20 <clear_ccc_cfg>
   1fec2:	e7ec      	b.n	1fe9e <disconnected_cb+0x7e>
					sc_clear(conn);
   1fec4:	4630      	mov	r0, r6
   1fec6:	f7ff ff1b 	bl	1fd00 <sc_clear>
   1feca:	e7f7      	b.n	1febc <disconnected_cb+0x9c>
   1fecc:	2207      	movs	r2, #7
   1fece:	4659      	mov	r1, fp
   1fed0:	4648      	mov	r0, r9
   1fed2:	f00c fc8b 	bl	2c7ec <memcpy>
}
   1fed6:	e7e2      	b.n	1fe9e <disconnected_cb+0x7e>
   1fed8:	0001fb3d 	.word	0x0001fb3d
   1fedc:	200007e0 	.word	0x200007e0

0001fee0 <clear_cf_cfg>:
{
   1fee0:	b510      	push	{r4, lr}
   1fee2:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1fee4:	2207      	movs	r2, #7
   1fee6:	490b      	ldr	r1, [pc, #44]	; (1ff14 <clear_cf_cfg+0x34>)
   1fee8:	3001      	adds	r0, #1
   1feea:	f00c fc7f 	bl	2c7ec <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1feee:	2201      	movs	r2, #1
   1fef0:	2100      	movs	r1, #0
   1fef2:	f104 0008 	add.w	r0, r4, #8
   1fef6:	f00c fca8 	bl	2c84a <memset>
	atomic_set(cfg->flags, 0);
   1fefa:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fefc:	2300      	movs	r3, #0
   1fefe:	f3bf 8f5b 	dmb	ish
   1ff02:	e854 2f00 	ldrex	r2, [r4]
   1ff06:	e844 3100 	strex	r1, r3, [r4]
   1ff0a:	2900      	cmp	r1, #0
   1ff0c:	d1f9      	bne.n	1ff02 <clear_cf_cfg+0x22>
   1ff0e:	f3bf 8f5b 	dmb	ish
}
   1ff12:	bd10      	pop	{r4, pc}
   1ff14:	000334a0 	.word	0x000334a0

0001ff18 <bt_gatt_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ff18:	4b13      	ldr	r3, [pc, #76]	; (1ff68 <bt_gatt_init+0x50>)
   1ff1a:	f3bf 8f5b 	dmb	ish
   1ff1e:	e853 2f00 	ldrex	r2, [r3]
   1ff22:	f042 0101 	orr.w	r1, r2, #1
   1ff26:	e843 1000 	strex	r0, r1, [r3]
   1ff2a:	2800      	cmp	r0, #0
   1ff2c:	d1f7      	bne.n	1ff1e <bt_gatt_init+0x6>
   1ff2e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1ff32:	f012 0f01 	tst.w	r2, #1
   1ff36:	d000      	beq.n	1ff3a <bt_gatt_init+0x22>
   1ff38:	4770      	bx	lr
{
   1ff3a:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1ff3c:	f7ff fd78 	bl	1fa30 <bt_gatt_service_init>
	list->head = NULL;
   1ff40:	4b0a      	ldr	r3, [pc, #40]	; (1ff6c <bt_gatt_init+0x54>)
   1ff42:	2200      	movs	r2, #0
   1ff44:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1ff46:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1ff48:	4c09      	ldr	r4, [pc, #36]	; (1ff70 <bt_gatt_init+0x58>)
   1ff4a:	490a      	ldr	r1, [pc, #40]	; (1ff74 <bt_gatt_init+0x5c>)
   1ff4c:	4620      	mov	r0, r4
   1ff4e:	f011 f83e 	bl	30fce <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1ff52:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ff56:	2300      	movs	r3, #0
   1ff58:	4620      	mov	r0, r4
   1ff5a:	f7f8 fefb 	bl	18d54 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1ff5e:	4906      	ldr	r1, [pc, #24]	; (1ff78 <bt_gatt_init+0x60>)
   1ff60:	4806      	ldr	r0, [pc, #24]	; (1ff7c <bt_gatt_init+0x64>)
   1ff62:	f011 f834 	bl	30fce <k_work_init_delayable>
}
   1ff66:	bd10      	pop	{r4, pc}
   1ff68:	20004044 	.word	0x20004044
   1ff6c:	20004048 	.word	0x20004048
   1ff70:	200022b8 	.word	0x200022b8
   1ff74:	0002ea5b 	.word	0x0002ea5b
   1ff78:	00020531 	.word	0x00020531
   1ff7c:	20002330 	.word	0x20002330

0001ff80 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1ff80:	b328      	cbz	r0, 1ffce <bt_gatt_attr_get_handle+0x4e>
   1ff82:	4684      	mov	ip, r0
	if (attr->handle) {
   1ff84:	8a00      	ldrh	r0, [r0, #16]
   1ff86:	bb38      	cbnz	r0, 1ffd8 <bt_gatt_attr_get_handle+0x58>
{
   1ff88:	b470      	push	{r4, r5, r6}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ff8a:	4d14      	ldr	r5, [pc, #80]	; (1ffdc <bt_gatt_attr_get_handle+0x5c>)
	uint16_t handle = 1;
   1ff8c:	2201      	movs	r2, #1
   1ff8e:	e003      	b.n	1ff98 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1ff90:	686b      	ldr	r3, [r5, #4]
   1ff92:	4413      	add	r3, r2
   1ff94:	b29a      	uxth	r2, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ff96:	3508      	adds	r5, #8
   1ff98:	4b11      	ldr	r3, [pc, #68]	; (1ffe0 <bt_gatt_attr_get_handle+0x60>)
   1ff9a:	429d      	cmp	r5, r3
   1ff9c:	d21a      	bcs.n	1ffd4 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1ff9e:	682c      	ldr	r4, [r5, #0]
   1ffa0:	4564      	cmp	r4, ip
   1ffa2:	d8f5      	bhi.n	1ff90 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ffa4:	686e      	ldr	r6, [r5, #4]
   1ffa6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1ffaa:	009b      	lsls	r3, r3, #2
   1ffac:	3b14      	subs	r3, #20
   1ffae:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1ffb0:	4563      	cmp	r3, ip
   1ffb2:	d3ed      	bcc.n	1ff90 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ffb4:	2300      	movs	r3, #0
   1ffb6:	429e      	cmp	r6, r3
   1ffb8:	d9ed      	bls.n	1ff96 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1ffba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ffbe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1ffc2:	4561      	cmp	r1, ip
   1ffc4:	d005      	beq.n	1ffd2 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ffc6:	3301      	adds	r3, #1
   1ffc8:	3201      	adds	r2, #1
   1ffca:	b292      	uxth	r2, r2
   1ffcc:	e7f3      	b.n	1ffb6 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1ffce:	2000      	movs	r0, #0
   1ffd0:	4770      	bx	lr
				return handle;
   1ffd2:	4610      	mov	r0, r2
}
   1ffd4:	bc70      	pop	{r4, r5, r6}
   1ffd6:	4770      	bx	lr
   1ffd8:	4770      	bx	lr
   1ffda:	bf00      	nop
   1ffdc:	00031ca4 	.word	0x00031ca4
   1ffe0:	00031cbc 	.word	0x00031cbc

0001ffe4 <bt_gatt_foreach_attr_type>:
{
   1ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffe8:	b089      	sub	sp, #36	; 0x24
   1ffea:	4682      	mov	sl, r0
   1ffec:	9107      	str	r1, [sp, #28]
   1ffee:	4690      	mov	r8, r2
   1fff0:	4699      	mov	r9, r3
   1fff2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1fff4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1fff8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1fffc:	b91b      	cbnz	r3, 20006 <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   1fffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20002:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   20006:	4b1b      	ldr	r3, [pc, #108]	; (20074 <bt_gatt_foreach_attr_type+0x90>)
   20008:	881b      	ldrh	r3, [r3, #0]
   2000a:	4553      	cmp	r3, sl
   2000c:	d22a      	bcs.n	20064 <bt_gatt_foreach_attr_type+0x80>
}
   2000e:	b009      	add	sp, #36	; 0x24
   20010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   20014:	b28c      	uxth	r4, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   20016:	3608      	adds	r6, #8
   20018:	4b17      	ldr	r3, [pc, #92]	; (20078 <bt_gatt_foreach_attr_type+0x94>)
   2001a:	429e      	cmp	r6, r3
   2001c:	d2f7      	bcs.n	2000e <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   2001e:	6873      	ldr	r3, [r6, #4]
   20020:	18e1      	adds	r1, r4, r3
   20022:	42b9      	cmp	r1, r7
   20024:	d3f6      	bcc.n	20014 <bt_gatt_foreach_attr_type+0x30>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   20026:	2500      	movs	r5, #0
   20028:	6873      	ldr	r3, [r6, #4]
   2002a:	42ab      	cmp	r3, r5
   2002c:	d9f3      	bls.n	20016 <bt_gatt_foreach_attr_type+0x32>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2002e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   20032:	f8cd b010 	str.w	fp, [sp, #16]
   20036:	f8cd a00c 	str.w	sl, [sp, #12]
   2003a:	ab12      	add	r3, sp, #72	; 0x48
   2003c:	9302      	str	r3, [sp, #8]
   2003e:	f8cd 9004 	str.w	r9, [sp, #4]
   20042:	f8cd 8000 	str.w	r8, [sp]
   20046:	9b07      	ldr	r3, [sp, #28]
   20048:	463a      	mov	r2, r7
   2004a:	4621      	mov	r1, r4
   2004c:	f8d6 c000 	ldr.w	ip, [r6]
   20050:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   20054:	f00e fb9e 	bl	2e794 <gatt_foreach_iter>
   20058:	2800      	cmp	r0, #0
   2005a:	d0d8      	beq.n	2000e <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2005c:	3501      	adds	r5, #1
   2005e:	3401      	adds	r4, #1
   20060:	b2a4      	uxth	r4, r4
   20062:	e7e1      	b.n	20028 <bt_gatt_foreach_attr_type+0x44>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   20064:	4e05      	ldr	r6, [pc, #20]	; (2007c <bt_gatt_foreach_attr_type+0x98>)
		uint16_t handle = 1;
   20066:	2401      	movs	r4, #1
   20068:	9713      	str	r7, [sp, #76]	; 0x4c
   2006a:	4657      	mov	r7, sl
   2006c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   20070:	e7d2      	b.n	20018 <bt_gatt_foreach_attr_type+0x34>
   20072:	bf00      	nop
   20074:	20005d38 	.word	0x20005d38
   20078:	00031cbc 	.word	0x00031cbc
   2007c:	00031ca4 	.word	0x00031ca4

00020080 <db_hash_gen>:
{
   20080:	b510      	push	{r4, lr}
   20082:	b0da      	sub	sp, #360	; 0x168
	uint8_t key[16] = {};
   20084:	2300      	movs	r3, #0
   20086:	934a      	str	r3, [sp, #296]	; 0x128
   20088:	934b      	str	r3, [sp, #300]	; 0x12c
   2008a:	934c      	str	r3, [sp, #304]	; 0x130
   2008c:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2008e:	aa1e      	add	r2, sp, #120	; 0x78
   20090:	a94a      	add	r1, sp, #296	; 0x128
   20092:	a806      	add	r0, sp, #24
   20094:	f00c f9e5 	bl	2c462 <tc_cmac_setup>
   20098:	b318      	cbz	r0, 200e2 <db_hash_gen+0x62>
   2009a:	ac06      	add	r4, sp, #24
   2009c:	9402      	str	r4, [sp, #8]
   2009e:	4b35      	ldr	r3, [pc, #212]	; (20174 <db_hash_gen+0xf4>)
   200a0:	9301      	str	r3, [sp, #4]
   200a2:	2200      	movs	r2, #0
   200a4:	9200      	str	r2, [sp, #0]
   200a6:	4613      	mov	r3, r2
   200a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   200ac:	2001      	movs	r0, #1
   200ae:	f7ff ff99 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   200b2:	4621      	mov	r1, r4
   200b4:	4830      	ldr	r0, [pc, #192]	; (20178 <db_hash_gen+0xf8>)
   200b6:	f00c fa71 	bl	2c59c <tc_cmac_final>
   200ba:	b3b0      	cbz	r0, 2012a <db_hash_gen+0xaa>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   200bc:	2110      	movs	r1, #16
   200be:	482e      	ldr	r0, [pc, #184]	; (20178 <db_hash_gen+0xf8>)
   200c0:	f00e f9c2 	bl	2e448 <sys_mem_swap>
   200c4:	4b2d      	ldr	r3, [pc, #180]	; (2017c <db_hash_gen+0xfc>)
   200c6:	f3bf 8f5b 	dmb	ish
   200ca:	e853 1f00 	ldrex	r1, [r3]
   200ce:	f041 0108 	orr.w	r1, r1, #8
   200d2:	e843 1200 	strex	r2, r1, [r3]
   200d6:	2a00      	cmp	r2, #0
   200d8:	d1f7      	bne.n	200ca <db_hash_gen+0x4a>
   200da:	f3bf 8f5b 	dmb	ish
}
   200de:	b05a      	add	sp, #360	; 0x168
   200e0:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to setup AES CMAC");
   200e2:	4b27      	ldr	r3, [pc, #156]	; (20180 <db_hash_gen+0x100>)
   200e4:	9359      	str	r3, [sp, #356]	; 0x164
   200e6:	2302      	movs	r3, #2
   200e8:	f88d 3014 	strb.w	r3, [sp, #20]
   200ec:	2300      	movs	r3, #0
   200ee:	f88d 3015 	strb.w	r3, [sp, #21]
   200f2:	f88d 3016 	strb.w	r3, [sp, #22]
   200f6:	f88d 3017 	strb.w	r3, [sp, #23]
   200fa:	9a05      	ldr	r2, [sp, #20]
   200fc:	9258      	str	r2, [sp, #352]	; 0x160
   200fe:	4619      	mov	r1, r3
   20100:	f363 0100 	bfi	r1, r3, #0, #1
   20104:	f363 0141 	bfi	r1, r3, #1, #1
   20108:	f363 0182 	bfi	r1, r3, #2, #1
   2010c:	f363 01c5 	bfi	r1, r3, #3, #3
   20110:	2201      	movs	r2, #1
   20112:	f362 1188 	bfi	r1, r2, #6, #3
   20116:	2208      	movs	r2, #8
   20118:	f362 2153 	bfi	r1, r2, #9, #11
   2011c:	f363 511f 	bfi	r1, r3, #20, #12
   20120:	aa58      	add	r2, sp, #352	; 0x160
   20122:	4818      	ldr	r0, [pc, #96]	; (20184 <db_hash_gen+0x104>)
   20124:	f7f3 ffea 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   20128:	e7d9      	b.n	200de <db_hash_gen+0x5e>
		LOG_ERR("Unable to calculate hash");
   2012a:	4b17      	ldr	r3, [pc, #92]	; (20188 <db_hash_gen+0x108>)
   2012c:	9353      	str	r3, [sp, #332]	; 0x14c
   2012e:	2302      	movs	r3, #2
   20130:	f88d 3014 	strb.w	r3, [sp, #20]
   20134:	2300      	movs	r3, #0
   20136:	f88d 3015 	strb.w	r3, [sp, #21]
   2013a:	f88d 3016 	strb.w	r3, [sp, #22]
   2013e:	f88d 3017 	strb.w	r3, [sp, #23]
   20142:	9a05      	ldr	r2, [sp, #20]
   20144:	9252      	str	r2, [sp, #328]	; 0x148
   20146:	4619      	mov	r1, r3
   20148:	f363 0100 	bfi	r1, r3, #0, #1
   2014c:	f363 0141 	bfi	r1, r3, #1, #1
   20150:	f363 0182 	bfi	r1, r3, #2, #1
   20154:	f363 01c5 	bfi	r1, r3, #3, #3
   20158:	2201      	movs	r2, #1
   2015a:	f362 1188 	bfi	r1, r2, #6, #3
   2015e:	2208      	movs	r2, #8
   20160:	f362 2153 	bfi	r1, r2, #9, #11
   20164:	f363 511f 	bfi	r1, r3, #20, #12
   20168:	aa52      	add	r2, sp, #328	; 0x148
   2016a:	4806      	ldr	r0, [pc, #24]	; (20184 <db_hash_gen+0x104>)
   2016c:	f7f3 ffc6 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   20170:	e7b5      	b.n	200de <db_hash_gen+0x5e>
   20172:	bf00      	nop
   20174:	0002e587 	.word	0x0002e587
   20178:	200022a8 	.word	0x200022a8
   2017c:	20002360 	.word	0x20002360
   20180:	0003474c 	.word	0x0003474c
   20184:	00031cf4 	.word	0x00031cf4
   20188:	00034768 	.word	0x00034768

0002018c <db_hash_read>:
{
   2018c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20190:	b084      	sub	sp, #16
   20192:	4604      	mov	r4, r0
   20194:	460d      	mov	r5, r1
   20196:	4616      	mov	r6, r2
   20198:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2019a:	491f      	ldr	r1, [pc, #124]	; (20218 <db_hash_read+0x8c>)
   2019c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   201a0:	f010 ff78 	bl	31094 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   201a4:	f3bf 8f5b 	dmb	ish
   201a8:	4b1c      	ldr	r3, [pc, #112]	; (2021c <db_hash_read+0x90>)
   201aa:	681b      	ldr	r3, [r3, #0]
   201ac:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   201b0:	f013 0f08 	tst.w	r3, #8
   201b4:	d017      	beq.n	201e6 <db_hash_read+0x5a>
	cfg = find_cf_cfg(conn);
   201b6:	4620      	mov	r0, r4
   201b8:	f7ff fbc8 	bl	1f94c <find_cf_cfg>
	if (cfg &&
   201bc:	b118      	cbz	r0, 201c6 <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   201be:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   201c0:	f012 0f01 	tst.w	r2, #1
   201c4:	d112      	bne.n	201ec <db_hash_read+0x60>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   201c6:	2310      	movs	r3, #16
   201c8:	9302      	str	r3, [sp, #8]
   201ca:	4b15      	ldr	r3, [pc, #84]	; (20220 <db_hash_read+0x94>)
   201cc:	9301      	str	r3, [sp, #4]
   201ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   201d2:	9300      	str	r3, [sp, #0]
   201d4:	463b      	mov	r3, r7
   201d6:	4632      	mov	r2, r6
   201d8:	4629      	mov	r1, r5
   201da:	4620      	mov	r0, r4
   201dc:	f00e fb2a 	bl	2e834 <bt_gatt_attr_read>
}
   201e0:	b004      	add	sp, #16
   201e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen();
   201e6:	f7ff ff4b 	bl	20080 <db_hash_gen>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
   201ea:	e7e4      	b.n	201b6 <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   201ec:	f100 080c 	add.w	r8, r0, #12
   201f0:	2100      	movs	r1, #0
   201f2:	4640      	mov	r0, r8
   201f4:	f00e fa36 	bl	2e664 <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   201f8:	2800      	cmp	r0, #0
   201fa:	d1e4      	bne.n	201c6 <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   201fc:	f3bf 8f5b 	dmb	ish
   20200:	e858 3f00 	ldrex	r3, [r8]
   20204:	f043 0302 	orr.w	r3, r3, #2
   20208:	e848 3200 	strex	r2, r3, [r8]
   2020c:	2a00      	cmp	r2, #0
   2020e:	d1f7      	bne.n	20200 <db_hash_read+0x74>
   20210:	f3bf 8f5b 	dmb	ish
   20214:	e7d7      	b.n	201c6 <db_hash_read+0x3a>
   20216:	bf00      	nop
   20218:	200022e8 	.word	0x200022e8
   2021c:	20002360 	.word	0x20002360
   20220:	200022a8 	.word	0x200022a8

00020224 <do_db_hash>:
{
   20224:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20226:	f3bf 8f5b 	dmb	ish
   2022a:	4b05      	ldr	r3, [pc, #20]	; (20240 <do_db_hash+0x1c>)
   2022c:	681b      	ldr	r3, [r3, #0]
   2022e:	f3bf 8f5b 	dmb	ish
	if (new_hash) {
   20232:	f013 0f08 	tst.w	r3, #8
   20236:	d000      	beq.n	2023a <do_db_hash+0x16>
}
   20238:	bd08      	pop	{r3, pc}
		db_hash_gen();
   2023a:	f7ff ff21 	bl	20080 <db_hash_gen>
}
   2023e:	e7fb      	b.n	20238 <do_db_hash+0x14>
   20240:	20002360 	.word	0x20002360

00020244 <gatt_find_by_uuid>:
{
   20244:	b510      	push	{r4, lr}
   20246:	b084      	sub	sp, #16
   20248:	4604      	mov	r4, r0
   2024a:	460a      	mov	r2, r1
	found->attr = NULL;
   2024c:	2300      	movs	r3, #0
   2024e:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   20250:	9002      	str	r0, [sp, #8]
   20252:	4907      	ldr	r1, [pc, #28]	; (20270 <gatt_find_by_uuid+0x2c>)
   20254:	9101      	str	r1, [sp, #4]
   20256:	2101      	movs	r1, #1
   20258:	9100      	str	r1, [sp, #0]
   2025a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2025e:	8880      	ldrh	r0, [r0, #4]
   20260:	f7ff fec0 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   20264:	6820      	ldr	r0, [r4, #0]
}
   20266:	3800      	subs	r0, #0
   20268:	bf18      	it	ne
   2026a:	2001      	movne	r0, #1
   2026c:	b004      	add	sp, #16
   2026e:	bd10      	pop	{r4, pc}
   20270:	0002e57f 	.word	0x0002e57f

00020274 <bt_gatt_attr_next>:
{
   20274:	b510      	push	{r4, lr}
   20276:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   20278:	2400      	movs	r4, #0
   2027a:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   2027c:	f7ff fe80 	bl	1ff80 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   20280:	3001      	adds	r0, #1
   20282:	b280      	uxth	r0, r0
   20284:	ab05      	add	r3, sp, #20
   20286:	9302      	str	r3, [sp, #8]
   20288:	4b05      	ldr	r3, [pc, #20]	; (202a0 <bt_gatt_attr_next+0x2c>)
   2028a:	9301      	str	r3, [sp, #4]
   2028c:	9400      	str	r4, [sp, #0]
   2028e:	4623      	mov	r3, r4
   20290:	4622      	mov	r2, r4
   20292:	4601      	mov	r1, r0
   20294:	f7ff fea6 	bl	1ffe4 <bt_gatt_foreach_attr_type>
}
   20298:	9805      	ldr	r0, [sp, #20]
   2029a:	b006      	add	sp, #24
   2029c:	bd10      	pop	{r4, pc}
   2029e:	bf00      	nop
   202a0:	0002e527 	.word	0x0002e527

000202a4 <gatt_indicate>:
{
   202a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202a8:	b096      	sub	sp, #88	; 0x58
   202aa:	4605      	mov	r5, r0
   202ac:	460f      	mov	r7, r1
   202ae:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   202b0:	6856      	ldr	r6, [r2, #4]
   202b2:	2294      	movs	r2, #148	; 0x94
   202b4:	4631      	mov	r1, r6
   202b6:	f00e fbd4 	bl	2ea62 <bt_gatt_check_perm>
   202ba:	2800      	cmp	r0, #0
   202bc:	d13f      	bne.n	2033e <gatt_indicate+0x9a>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   202be:	2202      	movs	r2, #2
   202c0:	4631      	mov	r1, r6
   202c2:	4628      	mov	r0, r5
   202c4:	f00e fbf0 	bl	2eaa8 <bt_gatt_is_subscribed>
   202c8:	2800      	cmp	r0, #0
   202ca:	d05d      	beq.n	20388 <gatt_indicate+0xe4>
	len = sizeof(*ind) + params->len;
   202cc:	8aa6      	ldrh	r6, [r4, #20]
   202ce:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   202d0:	9600      	str	r6, [sp, #0]
   202d2:	231d      	movs	r3, #29
   202d4:	2200      	movs	r2, #0
   202d6:	4621      	mov	r1, r4
   202d8:	4855      	ldr	r0, [pc, #340]	; (20430 <gatt_indicate+0x18c>)
   202da:	f00e fa86 	bl	2e7ea <gatt_req_alloc>
	if (!req) {
   202de:	4681      	mov	r9, r0
   202e0:	2800      	cmp	r0, #0
   202e2:	f000 80a2 	beq.w	2042a <gatt_indicate+0x186>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   202e6:	4632      	mov	r2, r6
   202e8:	211d      	movs	r1, #29
   202ea:	4628      	mov	r0, r5
   202ec:	f7fe ff8c 	bl	1f208 <bt_att_create_pdu>
	if (!buf) {
   202f0:	4680      	mov	r8, r0
   202f2:	2800      	cmp	r0, #0
   202f4:	d06d      	beq.n	203d2 <gatt_indicate+0x12e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   202f6:	2301      	movs	r3, #1
   202f8:	2200      	movs	r2, #0
   202fa:	4611      	mov	r1, r2
   202fc:	f00e f89d 	bl	2e43a <bt_att_set_tx_meta_data>
   20300:	f108 0a0c 	add.w	sl, r8, #12
   20304:	2102      	movs	r1, #2
   20306:	4650      	mov	r0, sl
   20308:	f00e fe45 	bl	2ef96 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2030c:	4606      	mov	r6, r0
   2030e:	f826 7b02 	strh.w	r7, [r6], #2
   20312:	8aa1      	ldrh	r1, [r4, #20]
   20314:	4650      	mov	r0, sl
   20316:	f00e fe3e 	bl	2ef96 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   2031a:	8aa2      	ldrh	r2, [r4, #20]
   2031c:	6921      	ldr	r1, [r4, #16]
   2031e:	4630      	mov	r0, r6
   20320:	f00c fa64 	bl	2c7ec <memcpy>
	req->buf = buf;
   20324:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   20328:	4649      	mov	r1, r9
   2032a:	4628      	mov	r0, r5
   2032c:	f00e f843 	bl	2e3b6 <bt_att_req_send>
	if (err) {
   20330:	4604      	mov	r4, r0
   20332:	2800      	cmp	r0, #0
   20334:	d175      	bne.n	20422 <gatt_indicate+0x17e>
}
   20336:	4620      	mov	r0, r4
   20338:	b016      	add	sp, #88	; 0x58
   2033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
   2033e:	4b3d      	ldr	r3, [pc, #244]	; (20434 <gatt_indicate+0x190>)
   20340:	9315      	str	r3, [sp, #84]	; 0x54
   20342:	2202      	movs	r2, #2
   20344:	f88d 200c 	strb.w	r2, [sp, #12]
   20348:	2300      	movs	r3, #0
   2034a:	f88d 300d 	strb.w	r3, [sp, #13]
   2034e:	f88d 300e 	strb.w	r3, [sp, #14]
   20352:	f88d 300f 	strb.w	r3, [sp, #15]
   20356:	9903      	ldr	r1, [sp, #12]
   20358:	9114      	str	r1, [sp, #80]	; 0x50
   2035a:	4619      	mov	r1, r3
   2035c:	f363 0100 	bfi	r1, r3, #0, #1
   20360:	f363 0141 	bfi	r1, r3, #1, #1
   20364:	f363 0182 	bfi	r1, r3, #2, #1
   20368:	f363 01c5 	bfi	r1, r3, #3, #3
   2036c:	f362 1188 	bfi	r1, r2, #6, #3
   20370:	2208      	movs	r2, #8
   20372:	f362 2153 	bfi	r1, r2, #9, #11
   20376:	f363 511f 	bfi	r1, r3, #20, #12
   2037a:	aa14      	add	r2, sp, #80	; 0x50
   2037c:	482e      	ldr	r0, [pc, #184]	; (20438 <gatt_indicate+0x194>)
   2037e:	f7f3 febd 	bl	140fc <z_impl_z_log_msg_static_create>
		return -EPERM;
   20382:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20386:	e7d6      	b.n	20336 <gatt_indicate+0x92>
			LOG_WRN("Device is not subscribed to characteristic");
   20388:	4b2c      	ldr	r3, [pc, #176]	; (2043c <gatt_indicate+0x198>)
   2038a:	930f      	str	r3, [sp, #60]	; 0x3c
   2038c:	2202      	movs	r2, #2
   2038e:	f88d 200c 	strb.w	r2, [sp, #12]
   20392:	2300      	movs	r3, #0
   20394:	f88d 300d 	strb.w	r3, [sp, #13]
   20398:	f88d 300e 	strb.w	r3, [sp, #14]
   2039c:	f88d 300f 	strb.w	r3, [sp, #15]
   203a0:	9903      	ldr	r1, [sp, #12]
   203a2:	910e      	str	r1, [sp, #56]	; 0x38
   203a4:	4619      	mov	r1, r3
   203a6:	f363 0100 	bfi	r1, r3, #0, #1
   203aa:	f363 0141 	bfi	r1, r3, #1, #1
   203ae:	f363 0182 	bfi	r1, r3, #2, #1
   203b2:	f363 01c5 	bfi	r1, r3, #3, #3
   203b6:	f362 1188 	bfi	r1, r2, #6, #3
   203ba:	2208      	movs	r2, #8
   203bc:	f362 2153 	bfi	r1, r2, #9, #11
   203c0:	f363 511f 	bfi	r1, r3, #20, #12
   203c4:	aa0e      	add	r2, sp, #56	; 0x38
   203c6:	481c      	ldr	r0, [pc, #112]	; (20438 <gatt_indicate+0x194>)
   203c8:	f7f3 fe98 	bl	140fc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   203cc:	f06f 0415 	mvn.w	r4, #21
   203d0:	e7b1      	b.n	20336 <gatt_indicate+0x92>
		LOG_WRN("No buffer available to send indication");
   203d2:	4b1b      	ldr	r3, [pc, #108]	; (20440 <gatt_indicate+0x19c>)
   203d4:	9309      	str	r3, [sp, #36]	; 0x24
   203d6:	2202      	movs	r2, #2
   203d8:	f88d 200c 	strb.w	r2, [sp, #12]
   203dc:	2300      	movs	r3, #0
   203de:	f88d 300d 	strb.w	r3, [sp, #13]
   203e2:	f88d 300e 	strb.w	r3, [sp, #14]
   203e6:	f88d 300f 	strb.w	r3, [sp, #15]
   203ea:	9903      	ldr	r1, [sp, #12]
   203ec:	9108      	str	r1, [sp, #32]
   203ee:	4619      	mov	r1, r3
   203f0:	f363 0100 	bfi	r1, r3, #0, #1
   203f4:	f363 0141 	bfi	r1, r3, #1, #1
   203f8:	f363 0182 	bfi	r1, r3, #2, #1
   203fc:	f363 01c5 	bfi	r1, r3, #3, #3
   20400:	f362 1188 	bfi	r1, r2, #6, #3
   20404:	2208      	movs	r2, #8
   20406:	f362 2153 	bfi	r1, r2, #9, #11
   2040a:	f363 511f 	bfi	r1, r3, #20, #12
   2040e:	aa08      	add	r2, sp, #32
   20410:	4809      	ldr	r0, [pc, #36]	; (20438 <gatt_indicate+0x194>)
   20412:	f7f3 fe73 	bl	140fc <z_impl_z_log_msg_static_create>
		bt_att_req_free(req);
   20416:	4648      	mov	r0, r9
   20418:	f7ff f9c2 	bl	1f7a0 <bt_att_req_free>
		return -ENOMEM;
   2041c:	f06f 040b 	mvn.w	r4, #11
   20420:	e789      	b.n	20336 <gatt_indicate+0x92>
		bt_att_req_free(req);
   20422:	4648      	mov	r0, r9
   20424:	f7ff f9bc 	bl	1f7a0 <bt_att_req_free>
   20428:	e785      	b.n	20336 <gatt_indicate+0x92>
		return -ENOMEM;
   2042a:	f06f 040b 	mvn.w	r4, #11
   2042e:	e782      	b.n	20336 <gatt_indicate+0x92>
   20430:	0002e55d 	.word	0x0002e55d
   20434:	00034784 	.word	0x00034784
   20438:	00031cf4 	.word	0x00031cf4
   2043c:	0003479c 	.word	0x0003479c
   20440:	000347c8 	.word	0x000347c8

00020444 <bt_gatt_indicate>:
   20444:	f3bf 8f5b 	dmb	ish
   20448:	4b37      	ldr	r3, [pc, #220]	; (20528 <bt_gatt_indicate+0xe4>)
   2044a:	681b      	ldr	r3, [r3, #0]
   2044c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   20450:	f013 0f04 	tst.w	r3, #4
   20454:	d05e      	beq.n	20514 <bt_gatt_indicate+0xd0>
{
   20456:	b530      	push	{r4, r5, lr}
   20458:	b08d      	sub	sp, #52	; 0x34
   2045a:	4605      	mov	r5, r0
   2045c:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2045e:	b110      	cbz	r0, 20466 <bt_gatt_indicate+0x22>
   20460:	7a83      	ldrb	r3, [r0, #10]
   20462:	2b07      	cmp	r3, #7
   20464:	d159      	bne.n	2051a <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   20466:	6860      	ldr	r0, [r4, #4]
   20468:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2046a:	f7ff fd89 	bl	1ff80 <bt_gatt_attr_get_handle>
   2046e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   20472:	6821      	ldr	r1, [r4, #0]
   20474:	b341      	cbz	r1, 204c8 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   20476:	a805      	add	r0, sp, #20
   20478:	f7ff fee4 	bl	20244 <gatt_find_by_uuid>
   2047c:	2800      	cmp	r0, #0
   2047e:	d04f      	beq.n	20520 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   20480:	9b05      	ldr	r3, [sp, #20]
   20482:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   20484:	9b05      	ldr	r3, [sp, #20]
   20486:	6818      	ldr	r0, [r3, #0]
   20488:	2300      	movs	r3, #0
   2048a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2048e:	f642 0303 	movw	r3, #10243	; 0x2803
   20492:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   20496:	a90b      	add	r1, sp, #44	; 0x2c
   20498:	f00c fa35 	bl	2c906 <bt_uuid_cmp>
   2049c:	b948      	cbnz	r0, 204b2 <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2049e:	9805      	ldr	r0, [sp, #20]
   204a0:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   204a2:	799b      	ldrb	r3, [r3, #6]
   204a4:	f013 0f20 	tst.w	r3, #32
   204a8:	d013      	beq.n	204d2 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   204aa:	f00e fa87 	bl	2e9bc <bt_gatt_attr_value_handle>
   204ae:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   204b2:	b18d      	cbz	r5, 204d8 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   204b4:	2301      	movs	r3, #1
   204b6:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   204b8:	4622      	mov	r2, r4
   204ba:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   204be:	4628      	mov	r0, r5
   204c0:	f7ff fef0 	bl	202a4 <gatt_indicate>
}
   204c4:	b00d      	add	sp, #52	; 0x34
   204c6:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   204c8:	2800      	cmp	r0, #0
   204ca:	d1db      	bne.n	20484 <bt_gatt_indicate+0x40>
			return -ENOENT;
   204cc:	f06f 0001 	mvn.w	r0, #1
   204d0:	e7f8      	b.n	204c4 <bt_gatt_indicate+0x80>
			return -EINVAL;
   204d2:	f06f 0015 	mvn.w	r0, #21
   204d6:	e7f5      	b.n	204c4 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   204d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   204dc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   204de:	2302      	movs	r3, #2
   204e0:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   204e4:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   204e6:	2300      	movs	r3, #0
   204e8:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   204ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   204ee:	f642 1202 	movw	r2, #10498	; 0x2902
   204f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   204f6:	aa05      	add	r2, sp, #20
   204f8:	9202      	str	r2, [sp, #8]
   204fa:	4a0c      	ldr	r2, [pc, #48]	; (2052c <bt_gatt_indicate+0xe8>)
   204fc:	9201      	str	r2, [sp, #4]
   204fe:	2201      	movs	r2, #1
   20500:	9200      	str	r2, [sp, #0]
   20502:	aa0a      	add	r2, sp, #40	; 0x28
   20504:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20508:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2050c:	f7ff fd6a 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	return data.err;
   20510:	9807      	ldr	r0, [sp, #28]
   20512:	e7d7      	b.n	204c4 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   20514:	f06f 000a 	mvn.w	r0, #10
}
   20518:	4770      	bx	lr
		return -ENOTCONN;
   2051a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2051e:	e7d1      	b.n	204c4 <bt_gatt_indicate+0x80>
			return -ENOENT;
   20520:	f06f 0001 	mvn.w	r0, #1
   20524:	e7ce      	b.n	204c4 <bt_gatt_indicate+0x80>
   20526:	bf00      	nop
   20528:	2000050c 	.word	0x2000050c
   2052c:	000209b1 	.word	0x000209b1

00020530 <sc_process>:
{
   20530:	b510      	push	{r4, lr}
   20532:	b082      	sub	sp, #8
   20534:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   20536:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2053a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   2053e:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   20542:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   20546:	f1a0 0120 	sub.w	r1, r0, #32
   2054a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2054e:	f3bf 8f5b 	dmb	ish
   20552:	e854 2f00 	ldrex	r2, [r4]
   20556:	f022 0201 	bic.w	r2, r2, #1
   2055a:	e844 2000 	strex	r0, r2, [r4]
   2055e:	2800      	cmp	r0, #0
   20560:	d1f7      	bne.n	20552 <sc_process+0x22>
   20562:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   20566:	2000      	movs	r0, #0
   20568:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   2056c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   20570:	4a0e      	ldr	r2, [pc, #56]	; (205ac <sc_process+0x7c>)
   20572:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   20576:	4a0e      	ldr	r2, [pc, #56]	; (205b0 <sc_process+0x80>)
   20578:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   2057c:	aa01      	add	r2, sp, #4
   2057e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   20582:	2204      	movs	r2, #4
   20584:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   20588:	f7ff ff5c 	bl	20444 <bt_gatt_indicate>
   2058c:	b108      	cbz	r0, 20592 <sc_process+0x62>
}
   2058e:	b002      	add	sp, #8
   20590:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20592:	f3bf 8f5b 	dmb	ish
   20596:	e854 3f00 	ldrex	r3, [r4]
   2059a:	f043 0302 	orr.w	r3, r3, #2
   2059e:	e844 3200 	strex	r2, r3, [r4]
   205a2:	2a00      	cmp	r2, #0
   205a4:	d1f7      	bne.n	20596 <sc_process+0x66>
   205a6:	f3bf 8f5b 	dmb	ish
   205aa:	e7f0      	b.n	2058e <sc_process+0x5e>
   205ac:	00034888 	.word	0x00034888
   205b0:	0001fdb9 	.word	0x0001fdb9

000205b4 <sc_restore>:
{
   205b4:	b510      	push	{r4, lr}
   205b6:	b088      	sub	sp, #32
   205b8:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   205ba:	f100 0188 	add.w	r1, r0, #136	; 0x88
   205be:	7a00      	ldrb	r0, [r0, #8]
   205c0:	f7ff f9ea 	bl	1f998 <find_sc_cfg>
	if (!cfg) {
   205c4:	b1f0      	cbz	r0, 20604 <sc_restore+0x50>
   205c6:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   205c8:	8902      	ldrh	r2, [r0, #8]
   205ca:	b90a      	cbnz	r2, 205d0 <sc_restore+0x1c>
   205cc:	8941      	ldrh	r1, [r0, #10]
   205ce:	b1c9      	cbz	r1, 20604 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   205d0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   205d4:	895b      	ldrh	r3, [r3, #10]
   205d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   205da:	4620      	mov	r0, r4
   205dc:	f7fd f810 	bl	1d600 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   205e0:	491b      	ldr	r1, [pc, #108]	; (20650 <sc_restore+0x9c>)
   205e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   205e6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   205ea:	4a1a      	ldr	r2, [pc, #104]	; (20654 <sc_restore+0xa0>)
   205ec:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   205ee:	4a1a      	ldr	r2, [pc, #104]	; (20658 <sc_restore+0xa4>)
   205f0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   205f2:	aa01      	add	r2, sp, #4
   205f4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   205f6:	2204      	movs	r2, #4
   205f8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   205fa:	4619      	mov	r1, r3
   205fc:	4620      	mov	r0, r4
   205fe:	f7ff ff21 	bl	20444 <bt_gatt_indicate>
   20602:	b908      	cbnz	r0, 20608 <sc_restore+0x54>
}
   20604:	b008      	add	sp, #32
   20606:	bd10      	pop	{r4, pc}
		LOG_ERR("SC restore indication failed");
   20608:	4b14      	ldr	r3, [pc, #80]	; (2065c <sc_restore+0xa8>)
   2060a:	9307      	str	r3, [sp, #28]
   2060c:	2302      	movs	r3, #2
   2060e:	f88d 3000 	strb.w	r3, [sp]
   20612:	2300      	movs	r3, #0
   20614:	f88d 3001 	strb.w	r3, [sp, #1]
   20618:	f88d 3002 	strb.w	r3, [sp, #2]
   2061c:	f88d 3003 	strb.w	r3, [sp, #3]
   20620:	9a00      	ldr	r2, [sp, #0]
   20622:	9206      	str	r2, [sp, #24]
   20624:	4619      	mov	r1, r3
   20626:	f363 0100 	bfi	r1, r3, #0, #1
   2062a:	f363 0141 	bfi	r1, r3, #1, #1
   2062e:	f363 0182 	bfi	r1, r3, #2, #1
   20632:	f363 01c5 	bfi	r1, r3, #3, #3
   20636:	2201      	movs	r2, #1
   20638:	f362 1188 	bfi	r1, r2, #6, #3
   2063c:	2208      	movs	r2, #8
   2063e:	f362 2153 	bfi	r1, r2, #9, #11
   20642:	f363 511f 	bfi	r1, r3, #20, #12
   20646:	aa06      	add	r2, sp, #24
   20648:	4805      	ldr	r0, [pc, #20]	; (20660 <sc_restore+0xac>)
   2064a:	f7f3 fd57 	bl	140fc <z_impl_z_log_msg_static_create>
   2064e:	e7d9      	b.n	20604 <sc_restore+0x50>
   20650:	20004010 	.word	0x20004010
   20654:	00034888 	.word	0x00034888
   20658:	0002e757 	.word	0x0002e757
   2065c:	000347f0 	.word	0x000347f0
   20660:	00031cf4 	.word	0x00031cf4

00020664 <update_ccc>:
{
   20664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20668:	b082      	sub	sp, #8
   2066a:	af00      	add	r7, sp, #0
	struct bt_conn *conn = data->conn;
   2066c:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   20670:	6882      	ldr	r2, [r0, #8]
   20672:	4b39      	ldr	r3, [pc, #228]	; (20758 <update_ccc+0xf4>)
   20674:	429a      	cmp	r2, r3
   20676:	d004      	beq.n	20682 <update_ccc+0x1e>
}
   20678:	2001      	movs	r0, #1
   2067a:	3708      	adds	r7, #8
   2067c:	46bd      	mov	sp, r7
   2067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20682:	4604      	mov	r4, r0
	ccc = attr->user_data;
   20684:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   20688:	2500      	movs	r5, #0
   2068a:	2d00      	cmp	r5, #0
   2068c:	d1f4      	bne.n	20678 <update_ccc+0x14>
		if (!cfg->value ||
   2068e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   20692:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   20696:	891b      	ldrh	r3, [r3, #8]
   20698:	2b00      	cmp	r3, #0
   2069a:	d054      	beq.n	20746 <update_ccc+0xe2>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2069c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   206a0:	eb09 0243 	add.w	r2, r9, r3, lsl #1
   206a4:	3201      	adds	r2, #1
   206a6:	f819 1013 	ldrb.w	r1, [r9, r3, lsl #1]
   206aa:	4640      	mov	r0, r8
   206ac:	f00c ff27 	bl	2d4fe <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   206b0:	2800      	cmp	r0, #0
   206b2:	d048      	beq.n	20746 <update_ccc+0xe2>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   206b4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   206b8:	4621      	mov	r1, r4
   206ba:	4640      	mov	r0, r8
   206bc:	f00e f9d1 	bl	2ea62 <bt_gatt_check_perm>
		if (err) {
   206c0:	b108      	cbz	r0, 206c6 <update_ccc+0x62>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   206c2:	2803      	cmp	r0, #3
   206c4:	d00a      	beq.n	206dc <update_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   206c6:	4649      	mov	r1, r9
   206c8:	4620      	mov	r0, r4
   206ca:	f00d ff2f 	bl	2e52c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   206ce:	4b23      	ldr	r3, [pc, #140]	; (2075c <update_ccc+0xf8>)
   206d0:	4599      	cmp	r9, r3
   206d2:	d1d1      	bne.n	20678 <update_ccc+0x14>
			sc_restore(conn);
   206d4:	4640      	mov	r0, r8
   206d6:	f7ff ff6d 	bl	205b4 <sc_restore>
   206da:	e7cd      	b.n	20678 <update_ccc+0x14>
				LOG_WRN("CCC %p not writable", attr);
   206dc:	46ea      	mov	sl, sp
   206de:	b088      	sub	sp, #32
   206e0:	466b      	mov	r3, sp
   206e2:	f113 0210 	adds.w	r2, r3, #16
   206e6:	d030      	beq.n	2074a <update_ccc+0xe6>
   206e8:	210c      	movs	r1, #12
   206ea:	b14a      	cbz	r2, 20700 <update_ccc+0x9c>
   206ec:	4608      	mov	r0, r1
   206ee:	2904      	cmp	r1, #4
   206f0:	dd03      	ble.n	206fa <update_ccc+0x96>
   206f2:	f8df c06c 	ldr.w	ip, [pc, #108]	; 20760 <update_ccc+0xfc>
   206f6:	f8c3 c014 	str.w	ip, [r3, #20]
   206fa:	2808      	cmp	r0, #8
   206fc:	dd00      	ble.n	20700 <update_ccc+0x9c>
   206fe:	619c      	str	r4, [r3, #24]
   20700:	290b      	cmp	r1, #11
   20702:	dd25      	ble.n	20750 <update_ccc+0xec>
   20704:	210c      	movs	r1, #12
   20706:	b13a      	cbz	r2, 20718 <update_ccc+0xb4>
   20708:	2003      	movs	r0, #3
   2070a:	7138      	strb	r0, [r7, #4]
   2070c:	2000      	movs	r0, #0
   2070e:	7178      	strb	r0, [r7, #5]
   20710:	71b8      	strb	r0, [r7, #6]
   20712:	71f8      	strb	r0, [r7, #7]
   20714:	6878      	ldr	r0, [r7, #4]
   20716:	6118      	str	r0, [r3, #16]
   20718:	f36f 0600 	bfc	r6, #0, #1
   2071c:	f36f 0641 	bfc	r6, #1, #1
   20720:	f36f 0682 	bfc	r6, #2, #1
   20724:	f36f 06c5 	bfc	r6, #3, #3
   20728:	2302      	movs	r3, #2
   2072a:	f363 1688 	bfi	r6, r3, #6, #3
   2072e:	f3c1 030a 	ubfx	r3, r1, #0, #11
   20732:	f363 2653 	bfi	r6, r3, #9, #11
   20736:	f36f 561f 	bfc	r6, #20, #12
   2073a:	2300      	movs	r3, #0
   2073c:	4631      	mov	r1, r6
   2073e:	4809      	ldr	r0, [pc, #36]	; (20764 <update_ccc+0x100>)
   20740:	f7f3 fcdc 	bl	140fc <z_impl_z_log_msg_static_create>
   20744:	46d5      	mov	sp, sl
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   20746:	3501      	adds	r5, #1
   20748:	e79f      	b.n	2068a <update_ccc+0x26>
				LOG_WRN("CCC %p not writable", attr);
   2074a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2074e:	e7cc      	b.n	206ea <update_ccc+0x86>
   20750:	f06f 011b 	mvn.w	r1, #27
   20754:	e7d7      	b.n	20706 <update_ccc+0xa2>
   20756:	bf00      	nop
   20758:	0001fb3d 	.word	0x0001fb3d
   2075c:	200007e0 	.word	0x200007e0
   20760:	00034810 	.word	0x00034810
   20764:	00031cf4 	.word	0x00031cf4

00020768 <gatt_notify>:
{
   20768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2076c:	b095      	sub	sp, #84	; 0x54
   2076e:	4605      	mov	r5, r0
   20770:	460f      	mov	r7, r1
   20772:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   20774:	6856      	ldr	r6, [r2, #4]
   20776:	2294      	movs	r2, #148	; 0x94
   20778:	4631      	mov	r1, r6
   2077a:	f00e f972 	bl	2ea62 <bt_gatt_check_perm>
   2077e:	bb70      	cbnz	r0, 207de <gatt_notify+0x76>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   20780:	2201      	movs	r2, #1
   20782:	4631      	mov	r1, r6
   20784:	4628      	mov	r0, r5
   20786:	f00e f98f 	bl	2eaa8 <bt_gatt_is_subscribed>
   2078a:	2800      	cmp	r0, #0
   2078c:	d04c      	beq.n	20828 <gatt_notify+0xc0>
				sizeof(*nfy) + params->len);
   2078e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   20790:	3202      	adds	r2, #2
   20792:	211b      	movs	r1, #27
   20794:	4628      	mov	r0, r5
   20796:	f7fe fd37 	bl	1f208 <bt_att_create_pdu>
	if (!buf) {
   2079a:	4680      	mov	r8, r0
   2079c:	2800      	cmp	r0, #0
   2079e:	d068      	beq.n	20872 <gatt_notify+0x10a>
   207a0:	f100 090c 	add.w	r9, r0, #12
   207a4:	2102      	movs	r1, #2
   207a6:	4648      	mov	r0, r9
   207a8:	f00e fbf5 	bl	2ef96 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   207ac:	4606      	mov	r6, r0
   207ae:	f826 7b02 	strh.w	r7, [r6], #2
   207b2:	89a1      	ldrh	r1, [r4, #12]
   207b4:	4648      	mov	r0, r9
   207b6:	f00e fbee 	bl	2ef96 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   207ba:	89a2      	ldrh	r2, [r4, #12]
   207bc:	68a1      	ldr	r1, [r4, #8]
   207be:	4630      	mov	r0, r6
   207c0:	f00c f814 	bl	2c7ec <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   207c4:	2301      	movs	r3, #1
   207c6:	6962      	ldr	r2, [r4, #20]
   207c8:	6921      	ldr	r1, [r4, #16]
   207ca:	4640      	mov	r0, r8
   207cc:	f00d fe35 	bl	2e43a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   207d0:	4641      	mov	r1, r8
   207d2:	4628      	mov	r0, r5
   207d4:	f00d fdd7 	bl	2e386 <bt_att_send>
}
   207d8:	b015      	add	sp, #84	; 0x54
   207da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Link is not encrypted");
   207de:	4b37      	ldr	r3, [pc, #220]	; (208bc <gatt_notify+0x154>)
   207e0:	9313      	str	r3, [sp, #76]	; 0x4c
   207e2:	2202      	movs	r2, #2
   207e4:	f88d 2004 	strb.w	r2, [sp, #4]
   207e8:	2300      	movs	r3, #0
   207ea:	f88d 3005 	strb.w	r3, [sp, #5]
   207ee:	f88d 3006 	strb.w	r3, [sp, #6]
   207f2:	f88d 3007 	strb.w	r3, [sp, #7]
   207f6:	9901      	ldr	r1, [sp, #4]
   207f8:	9112      	str	r1, [sp, #72]	; 0x48
   207fa:	4619      	mov	r1, r3
   207fc:	f363 0100 	bfi	r1, r3, #0, #1
   20800:	f363 0141 	bfi	r1, r3, #1, #1
   20804:	f363 0182 	bfi	r1, r3, #2, #1
   20808:	f363 01c5 	bfi	r1, r3, #3, #3
   2080c:	f362 1188 	bfi	r1, r2, #6, #3
   20810:	2208      	movs	r2, #8
   20812:	f362 2153 	bfi	r1, r2, #9, #11
   20816:	f363 511f 	bfi	r1, r3, #20, #12
   2081a:	aa12      	add	r2, sp, #72	; 0x48
   2081c:	4828      	ldr	r0, [pc, #160]	; (208c0 <gatt_notify+0x158>)
   2081e:	f7f3 fc6d 	bl	140fc <z_impl_z_log_msg_static_create>
		return -EPERM;
   20822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20826:	e7d7      	b.n	207d8 <gatt_notify+0x70>
			LOG_WRN("Device is not subscribed to characteristic");
   20828:	4b26      	ldr	r3, [pc, #152]	; (208c4 <gatt_notify+0x15c>)
   2082a:	930d      	str	r3, [sp, #52]	; 0x34
   2082c:	2202      	movs	r2, #2
   2082e:	f88d 2004 	strb.w	r2, [sp, #4]
   20832:	2300      	movs	r3, #0
   20834:	f88d 3005 	strb.w	r3, [sp, #5]
   20838:	f88d 3006 	strb.w	r3, [sp, #6]
   2083c:	f88d 3007 	strb.w	r3, [sp, #7]
   20840:	9901      	ldr	r1, [sp, #4]
   20842:	910c      	str	r1, [sp, #48]	; 0x30
   20844:	4619      	mov	r1, r3
   20846:	f363 0100 	bfi	r1, r3, #0, #1
   2084a:	f363 0141 	bfi	r1, r3, #1, #1
   2084e:	f363 0182 	bfi	r1, r3, #2, #1
   20852:	f363 01c5 	bfi	r1, r3, #3, #3
   20856:	f362 1188 	bfi	r1, r2, #6, #3
   2085a:	2208      	movs	r2, #8
   2085c:	f362 2153 	bfi	r1, r2, #9, #11
   20860:	f363 511f 	bfi	r1, r3, #20, #12
   20864:	aa0c      	add	r2, sp, #48	; 0x30
   20866:	4816      	ldr	r0, [pc, #88]	; (208c0 <gatt_notify+0x158>)
   20868:	f7f3 fc48 	bl	140fc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   2086c:	f06f 0015 	mvn.w	r0, #21
   20870:	e7b2      	b.n	207d8 <gatt_notify+0x70>
		LOG_WRN("No buffer available to send notification");
   20872:	4b15      	ldr	r3, [pc, #84]	; (208c8 <gatt_notify+0x160>)
   20874:	9307      	str	r3, [sp, #28]
   20876:	2202      	movs	r2, #2
   20878:	f88d 2004 	strb.w	r2, [sp, #4]
   2087c:	2300      	movs	r3, #0
   2087e:	f88d 3005 	strb.w	r3, [sp, #5]
   20882:	f88d 3006 	strb.w	r3, [sp, #6]
   20886:	f88d 3007 	strb.w	r3, [sp, #7]
   2088a:	9901      	ldr	r1, [sp, #4]
   2088c:	9106      	str	r1, [sp, #24]
   2088e:	4619      	mov	r1, r3
   20890:	f363 0100 	bfi	r1, r3, #0, #1
   20894:	f363 0141 	bfi	r1, r3, #1, #1
   20898:	f363 0182 	bfi	r1, r3, #2, #1
   2089c:	f363 01c5 	bfi	r1, r3, #3, #3
   208a0:	f362 1188 	bfi	r1, r2, #6, #3
   208a4:	2208      	movs	r2, #8
   208a6:	f362 2153 	bfi	r1, r2, #9, #11
   208aa:	f363 511f 	bfi	r1, r3, #20, #12
   208ae:	aa06      	add	r2, sp, #24
   208b0:	4803      	ldr	r0, [pc, #12]	; (208c0 <gatt_notify+0x158>)
   208b2:	f7f3 fc23 	bl	140fc <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   208b6:	f06f 000b 	mvn.w	r0, #11
   208ba:	e78d      	b.n	207d8 <gatt_notify+0x70>
   208bc:	00034784 	.word	0x00034784
   208c0:	00031cf4 	.word	0x00031cf4
   208c4:	0003479c 	.word	0x0003479c
   208c8:	00034824 	.word	0x00034824

000208cc <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   208cc:	f3bf 8f5b 	dmb	ish
   208d0:	4b35      	ldr	r3, [pc, #212]	; (209a8 <bt_gatt_notify_cb+0xdc>)
   208d2:	681b      	ldr	r3, [r3, #0]
   208d4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   208d8:	f013 0f04 	tst.w	r3, #4
   208dc:	d05a      	beq.n	20994 <bt_gatt_notify_cb+0xc8>
{
   208de:	b530      	push	{r4, r5, lr}
   208e0:	b08d      	sub	sp, #52	; 0x34
   208e2:	4605      	mov	r5, r0
   208e4:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   208e6:	b110      	cbz	r0, 208ee <bt_gatt_notify_cb+0x22>
   208e8:	7a83      	ldrb	r3, [r0, #10]
   208ea:	2b07      	cmp	r3, #7
   208ec:	d155      	bne.n	2099a <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
   208ee:	6860      	ldr	r0, [r4, #4]
   208f0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   208f2:	f7ff fb45 	bl	1ff80 <bt_gatt_attr_get_handle>
   208f6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   208fa:	6821      	ldr	r1, [r4, #0]
   208fc:	b331      	cbz	r1, 2094c <bt_gatt_notify_cb+0x80>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   208fe:	a805      	add	r0, sp, #20
   20900:	f7ff fca0 	bl	20244 <gatt_find_by_uuid>
   20904:	2800      	cmp	r0, #0
   20906:	d04b      	beq.n	209a0 <bt_gatt_notify_cb+0xd4>
		params->attr = data.attr;
   20908:	9b05      	ldr	r3, [sp, #20]
   2090a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2090c:	9b05      	ldr	r3, [sp, #20]
   2090e:	6818      	ldr	r0, [r3, #0]
   20910:	2300      	movs	r3, #0
   20912:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   20916:	f642 0303 	movw	r3, #10243	; 0x2803
   2091a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2091e:	a90b      	add	r1, sp, #44	; 0x2c
   20920:	f00b fff1 	bl	2c906 <bt_uuid_cmp>
   20924:	b948      	cbnz	r0, 2093a <bt_gatt_notify_cb+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   20926:	9805      	ldr	r0, [sp, #20]
   20928:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2092a:	799b      	ldrb	r3, [r3, #6]
   2092c:	f013 0f10 	tst.w	r3, #16
   20930:	d011      	beq.n	20956 <bt_gatt_notify_cb+0x8a>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   20932:	f00e f843 	bl	2e9bc <bt_gatt_attr_value_handle>
   20936:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   2093a:	b17d      	cbz	r5, 2095c <bt_gatt_notify_cb+0x90>
		return gatt_notify(conn, data.handle, params);
   2093c:	4622      	mov	r2, r4
   2093e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   20942:	4628      	mov	r0, r5
   20944:	f7ff ff10 	bl	20768 <gatt_notify>
}
   20948:	b00d      	add	sp, #52	; 0x34
   2094a:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   2094c:	2800      	cmp	r0, #0
   2094e:	d1dd      	bne.n	2090c <bt_gatt_notify_cb+0x40>
			return -ENOENT;
   20950:	f06f 0001 	mvn.w	r0, #1
   20954:	e7f8      	b.n	20948 <bt_gatt_notify_cb+0x7c>
			return -EINVAL;
   20956:	f06f 0015 	mvn.w	r0, #21
   2095a:	e7f5      	b.n	20948 <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
   2095c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   20960:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   20962:	2201      	movs	r2, #1
   20964:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   20968:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2096a:	2300      	movs	r3, #0
   2096c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   20970:	f642 1102 	movw	r1, #10498	; 0x2902
   20974:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   20978:	a905      	add	r1, sp, #20
   2097a:	9102      	str	r1, [sp, #8]
   2097c:	490b      	ldr	r1, [pc, #44]	; (209ac <bt_gatt_notify_cb+0xe0>)
   2097e:	9101      	str	r1, [sp, #4]
   20980:	9200      	str	r2, [sp, #0]
   20982:	aa0a      	add	r2, sp, #40	; 0x28
   20984:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20988:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2098c:	f7ff fb2a 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	return data.err;
   20990:	9807      	ldr	r0, [sp, #28]
   20992:	e7d9      	b.n	20948 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   20994:	f06f 000a 	mvn.w	r0, #10
}
   20998:	4770      	bx	lr
		return -ENOTCONN;
   2099a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2099e:	e7d3      	b.n	20948 <bt_gatt_notify_cb+0x7c>
			return -ENOENT;
   209a0:	f06f 0001 	mvn.w	r0, #1
   209a4:	e7d0      	b.n	20948 <bt_gatt_notify_cb+0x7c>
   209a6:	bf00      	nop
   209a8:	2000050c 	.word	0x2000050c
   209ac:	000209b1 	.word	0x000209b1

000209b0 <notify_cb>:
{
   209b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209b4:	b089      	sub	sp, #36	; 0x24
   209b6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   209b8:	6882      	ldr	r2, [r0, #8]
   209ba:	4b66      	ldr	r3, [pc, #408]	; (20b54 <notify_cb+0x1a4>)
   209bc:	429a      	cmp	r2, r3
   209be:	d005      	beq.n	209cc <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   209c0:	f04f 0a01 	mov.w	sl, #1
}
   209c4:	4650      	mov	r0, sl
   209c6:	b009      	add	sp, #36	; 0x24
   209c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209cc:	4607      	mov	r7, r0
	ccc = attr->user_data;
   209ce:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   209d0:	4b61      	ldr	r3, [pc, #388]	; (20b58 <notify_cb+0x1a8>)
   209d2:	429d      	cmp	r5, r3
   209d4:	d02d      	beq.n	20a32 <notify_cb+0x82>
			err = 0;
   209d6:	2400      	movs	r4, #0
   209d8:	e082      	b.n	20ae0 <notify_cb+0x130>
				sc = (struct sc_data *)data->ind_params->data;
   209da:	6933      	ldr	r3, [r6, #16]
   209dc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   209de:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   209e2:	8853      	ldrh	r3, [r2, #2]
   209e4:	8812      	ldrh	r2, [r2, #0]
   209e6:	4649      	mov	r1, r9
   209e8:	f8df c170 	ldr.w	ip, [pc, #368]	; 20b5c <notify_cb+0x1ac>
   209ec:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   209f0:	f7ff f842 	bl	1fa78 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   209f4:	3401      	adds	r4, #1
   209f6:	2c00      	cmp	r4, #0
   209f8:	d1ed      	bne.n	209d6 <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   209fa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   209fe:	4b57      	ldr	r3, [pc, #348]	; (20b5c <notify_cb+0x1ac>)
   20a00:	eb03 0982 	add.w	r9, r3, r2, lsl #2
   20a04:	f109 0901 	add.w	r9, r9, #1
	return memcmp(a, b, sizeof(*a));
   20a08:	2207      	movs	r2, #7
   20a0a:	4955      	ldr	r1, [pc, #340]	; (20b60 <notify_cb+0x1b0>)
   20a0c:	4648      	mov	r0, r9
   20a0e:	f00b fec8 	bl	2c7a2 <memcmp>
   20a12:	2800      	cmp	r0, #0
   20a14:	d0ee      	beq.n	209f4 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   20a16:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   20a1a:	2207      	movs	r2, #7
   20a1c:	4649      	mov	r1, r9
   20a1e:	484f      	ldr	r0, [pc, #316]	; (20b5c <notify_cb+0x1ac>)
   20a20:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   20a24:	f7fc ff5a 	bl	1d8dc <bt_conn_lookup_state_le>
			if (!conn) {
   20a28:	2800      	cmp	r0, #0
   20a2a:	d0d6      	beq.n	209da <notify_cb+0x2a>
			bt_conn_unref(conn);
   20a2c:	f00c fcfd 	bl	2d42a <bt_conn_unref>
   20a30:	e7e0      	b.n	209f4 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   20a32:	2400      	movs	r4, #0
   20a34:	e7df      	b.n	209f6 <notify_cb+0x46>
			bt_conn_unref(conn);
   20a36:	f00c fcf8 	bl	2d42a <bt_conn_unref>
			continue;
   20a3a:	e050      	b.n	20ade <notify_cb+0x12e>
			bt_conn_unref(conn);
   20a3c:	4648      	mov	r0, r9
   20a3e:	f00c fcf4 	bl	2d42a <bt_conn_unref>
			continue;
   20a42:	e04c      	b.n	20ade <notify_cb+0x12e>
			LOG_WRN("Link is not encrypted");
   20a44:	4b47      	ldr	r3, [pc, #284]	; (20b64 <notify_cb+0x1b4>)
   20a46:	9307      	str	r3, [sp, #28]
   20a48:	2202      	movs	r2, #2
   20a4a:	f88d 2004 	strb.w	r2, [sp, #4]
   20a4e:	2300      	movs	r3, #0
   20a50:	f88d 3005 	strb.w	r3, [sp, #5]
   20a54:	f88d 3006 	strb.w	r3, [sp, #6]
   20a58:	f88d 3007 	strb.w	r3, [sp, #7]
   20a5c:	9901      	ldr	r1, [sp, #4]
   20a5e:	9106      	str	r1, [sp, #24]
   20a60:	f363 0800 	bfi	r8, r3, #0, #1
   20a64:	f363 0841 	bfi	r8, r3, #1, #1
   20a68:	f363 0882 	bfi	r8, r3, #2, #1
   20a6c:	f363 08c5 	bfi	r8, r3, #3, #3
   20a70:	f362 1888 	bfi	r8, r2, #6, #3
   20a74:	2208      	movs	r2, #8
   20a76:	f362 2853 	bfi	r8, r2, #9, #11
   20a7a:	f363 581f 	bfi	r8, r3, #20, #12
   20a7e:	aa06      	add	r2, sp, #24
   20a80:	4641      	mov	r1, r8
   20a82:	4839      	ldr	r0, [pc, #228]	; (20b68 <notify_cb+0x1b8>)
   20a84:	f7f3 fb3a 	bl	140fc <z_impl_z_log_msg_static_create>
			bt_conn_unref(conn);
   20a88:	4648      	mov	r0, r9
   20a8a:	f00c fcce 	bl	2d42a <bt_conn_unref>
			continue;
   20a8e:	e026      	b.n	20ade <notify_cb+0x12e>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   20a90:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   20a94:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   20a98:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   20a9a:	f012 0f02 	tst.w	r2, #2
   20a9e:	d049      	beq.n	20b34 <notify_cb+0x184>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   20aa0:	6932      	ldr	r2, [r6, #16]
   20aa2:	88b1      	ldrh	r1, [r6, #4]
   20aa4:	4648      	mov	r0, r9
   20aa6:	f7ff fbfd 	bl	202a4 <gatt_indicate>
			if (err == 0) {
   20aaa:	4683      	mov	fp, r0
   20aac:	b970      	cbnz	r0, 20acc <notify_cb+0x11c>
				data->ind_params->_ref++;
   20aae:	6932      	ldr	r2, [r6, #16]
   20ab0:	7d93      	ldrb	r3, [r2, #22]
   20ab2:	3301      	adds	r3, #1
   20ab4:	7593      	strb	r3, [r2, #22]
   20ab6:	e009      	b.n	20acc <notify_cb+0x11c>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   20ab8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   20abc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   20ac0:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   20ac2:	f013 0f01 	tst.w	r3, #1
   20ac6:	d13a      	bne.n	20b3e <notify_cb+0x18e>
			err = 0;
   20ac8:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   20acc:	4648      	mov	r0, r9
   20ace:	f00c fcac 	bl	2d42a <bt_conn_unref>
		if (err < 0) {
   20ad2:	f1bb 0f00 	cmp.w	fp, #0
   20ad6:	f6ff af75 	blt.w	209c4 <notify_cb+0x14>
		data->err = 0;
   20ada:	2300      	movs	r3, #0
   20adc:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   20ade:	3401      	adds	r4, #1
   20ae0:	2c00      	cmp	r4, #0
   20ae2:	d133      	bne.n	20b4c <notify_cb+0x19c>
		if (cfg->value != data->type) {
   20ae4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   20ae8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   20aec:	891a      	ldrh	r2, [r3, #8]
   20aee:	89b3      	ldrh	r3, [r6, #12]
   20af0:	429a      	cmp	r2, r3
   20af2:	d1f4      	bne.n	20ade <notify_cb+0x12e>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   20af4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   20af8:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   20afc:	3101      	adds	r1, #1
   20afe:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   20b02:	f7fc fe57 	bl	1d7b4 <bt_conn_lookup_addr_le>
		if (!conn) {
   20b06:	4681      	mov	r9, r0
   20b08:	2800      	cmp	r0, #0
   20b0a:	d0e8      	beq.n	20ade <notify_cb+0x12e>
		if (conn->state != BT_CONN_CONNECTED) {
   20b0c:	7a83      	ldrb	r3, [r0, #10]
   20b0e:	2b07      	cmp	r3, #7
   20b10:	d191      	bne.n	20a36 <notify_cb+0x86>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   20b12:	696b      	ldr	r3, [r5, #20]
   20b14:	b11b      	cbz	r3, 20b1e <notify_cb+0x16e>
   20b16:	4639      	mov	r1, r7
   20b18:	4798      	blx	r3
   20b1a:	2800      	cmp	r0, #0
   20b1c:	d08e      	beq.n	20a3c <notify_cb+0x8c>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   20b1e:	2294      	movs	r2, #148	; 0x94
   20b20:	4639      	mov	r1, r7
   20b22:	4648      	mov	r0, r9
   20b24:	f00d ff9d 	bl	2ea62 <bt_gatt_check_perm>
   20b28:	4682      	mov	sl, r0
   20b2a:	2800      	cmp	r0, #0
   20b2c:	d18a      	bne.n	20a44 <notify_cb+0x94>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   20b2e:	89b3      	ldrh	r3, [r6, #12]
   20b30:	2b02      	cmp	r3, #2
   20b32:	d0ad      	beq.n	20a90 <notify_cb+0xe0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   20b34:	2b01      	cmp	r3, #1
   20b36:	d0bf      	beq.n	20ab8 <notify_cb+0x108>
			err = 0;
   20b38:	f04f 0b00 	mov.w	fp, #0
   20b3c:	e7c6      	b.n	20acc <notify_cb+0x11c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   20b3e:	6932      	ldr	r2, [r6, #16]
   20b40:	88b1      	ldrh	r1, [r6, #4]
   20b42:	4648      	mov	r0, r9
   20b44:	f7ff fe10 	bl	20768 <gatt_notify>
   20b48:	4683      	mov	fp, r0
   20b4a:	e7bf      	b.n	20acc <notify_cb+0x11c>
	return BT_GATT_ITER_CONTINUE;
   20b4c:	f04f 0a01 	mov.w	sl, #1
   20b50:	e738      	b.n	209c4 <notify_cb+0x14>
   20b52:	bf00      	nop
   20b54:	0001fb3d 	.word	0x0001fb3d
   20b58:	200007e0 	.word	0x200007e0
   20b5c:	20004038 	.word	0x20004038
   20b60:	000334a0 	.word	0x000334a0
   20b64:	00034784 	.word	0x00034784
   20b68:	00031cf4 	.word	0x00031cf4

00020b6c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   20b6c:	b500      	push	{lr}
   20b6e:	b087      	sub	sp, #28
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   20b70:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   20b72:	2001      	movs	r0, #1
   20b74:	f88d 0014 	strb.w	r0, [sp, #20]
   20b78:	ab04      	add	r3, sp, #16
   20b7a:	9302      	str	r3, [sp, #8]
   20b7c:	4b05      	ldr	r3, [pc, #20]	; (20b94 <bt_gatt_connected+0x28>)
   20b7e:	9301      	str	r3, [sp, #4]
   20b80:	2200      	movs	r2, #0
   20b82:	9200      	str	r2, [sp, #0]
   20b84:	4613      	mov	r3, r2
   20b86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20b8a:	f7ff fa2b 	bl	1ffe4 <bt_gatt_foreach_attr_type>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   20b8e:	b007      	add	sp, #28
   20b90:	f85d fb04 	ldr.w	pc, [sp], #4
   20b94:	00020665 	.word	0x00020665

00020b98 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   20b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b9a:	4605      	mov	r5, r0
   20b9c:	460e      	mov	r6, r1
   20b9e:	4617      	mov	r7, r2
	return list->head;
   20ba0:	4b0a      	ldr	r3, [pc, #40]	; (20bcc <bt_gatt_att_max_mtu_changed+0x34>)
   20ba2:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   20ba4:	b104      	cbz	r4, 20ba8 <bt_gatt_att_max_mtu_changed+0x10>
   20ba6:	3c04      	subs	r4, #4
   20ba8:	b174      	cbz	r4, 20bc8 <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   20baa:	6823      	ldr	r3, [r4, #0]
   20bac:	b143      	cbz	r3, 20bc0 <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   20bae:	463a      	mov	r2, r7
   20bb0:	4631      	mov	r1, r6
   20bb2:	4628      	mov	r0, r5
   20bb4:	4798      	blx	r3
	return node->next;
   20bb6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   20bb8:	2c00      	cmp	r4, #0
   20bba:	d0f5      	beq.n	20ba8 <bt_gatt_att_max_mtu_changed+0x10>
   20bbc:	3c04      	subs	r4, #4
   20bbe:	e7f3      	b.n	20ba8 <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20bc0:	1d23      	adds	r3, r4, #4
   20bc2:	d1f8      	bne.n	20bb6 <bt_gatt_att_max_mtu_changed+0x1e>
   20bc4:	461c      	mov	r4, r3
   20bc6:	e7ef      	b.n	20ba8 <bt_gatt_att_max_mtu_changed+0x10>
		}
	}
}
   20bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20bca:	bf00      	nop
   20bcc:	20004048 	.word	0x20004048

00020bd0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   20bd0:	b510      	push	{r4, lr}
   20bd2:	b084      	sub	sp, #16
   20bd4:	4604      	mov	r4, r0
   20bd6:	9002      	str	r0, [sp, #8]
   20bd8:	4b07      	ldr	r3, [pc, #28]	; (20bf8 <bt_gatt_disconnected+0x28>)
   20bda:	9301      	str	r3, [sp, #4]
   20bdc:	2200      	movs	r2, #0
   20bde:	9200      	str	r2, [sp, #0]
   20be0:	4613      	mov	r3, r2
   20be2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20be6:	2001      	movs	r0, #1
   20be8:	f7ff f9fc 	bl	1ffe4 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   20bec:	4620      	mov	r0, r4
   20bee:	f00d fe0a 	bl	2e806 <remove_cf_cfg>
#endif
}
   20bf2:	b004      	add	sp, #16
   20bf4:	bd10      	pop	{r4, pc}
   20bf6:	bf00      	nop
   20bf8:	0001fe21 	.word	0x0001fe21

00020bfc <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   20bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20bfe:	b083      	sub	sp, #12
   20c00:	af00      	add	r7, sp, #0
   20c02:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   20c04:	2000      	movs	r0, #0
   20c06:	b3c0      	cbz	r0, 20c7a <bt_smp_accept+0x7e>
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   20c08:	466c      	mov	r4, sp
   20c0a:	b088      	sub	sp, #32
   20c0c:	466b      	mov	r3, sp
   20c0e:	f113 0210 	adds.w	r2, r3, #16
   20c12:	d043      	beq.n	20c9c <bt_smp_accept+0xa0>
   20c14:	210c      	movs	r1, #12
   20c16:	b13a      	cbz	r2, 20c28 <bt_smp_accept+0x2c>
   20c18:	4608      	mov	r0, r1
   20c1a:	2904      	cmp	r1, #4
   20c1c:	dd01      	ble.n	20c22 <bt_smp_accept+0x26>
   20c1e:	4e22      	ldr	r6, [pc, #136]	; (20ca8 <bt_smp_accept+0xac>)
   20c20:	615e      	str	r6, [r3, #20]
   20c22:	2808      	cmp	r0, #8
   20c24:	dd00      	ble.n	20c28 <bt_smp_accept+0x2c>
   20c26:	619d      	str	r5, [r3, #24]
   20c28:	290b      	cmp	r1, #11
   20c2a:	dd3a      	ble.n	20ca2 <bt_smp_accept+0xa6>
   20c2c:	f04f 0c0c 	mov.w	ip, #12
   20c30:	b13a      	cbz	r2, 20c42 <bt_smp_accept+0x46>
   20c32:	2103      	movs	r1, #3
   20c34:	7139      	strb	r1, [r7, #4]
   20c36:	2100      	movs	r1, #0
   20c38:	7179      	strb	r1, [r7, #5]
   20c3a:	71b9      	strb	r1, [r7, #6]
   20c3c:	71f9      	strb	r1, [r7, #7]
   20c3e:	6878      	ldr	r0, [r7, #4]
   20c40:	6118      	str	r0, [r3, #16]
   20c42:	2100      	movs	r1, #0
   20c44:	f36f 0100 	bfc	r1, #0, #1
   20c48:	f36f 0141 	bfc	r1, #1, #1
   20c4c:	f36f 0182 	bfc	r1, #2, #1
   20c50:	f36f 01c5 	bfc	r1, #3, #3
   20c54:	2301      	movs	r3, #1
   20c56:	f363 1188 	bfi	r1, r3, #6, #3
   20c5a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   20c5e:	f36c 2153 	bfi	r1, ip, #9, #11
   20c62:	f36f 511f 	bfc	r1, #20, #12
   20c66:	2300      	movs	r3, #0
   20c68:	4810      	ldr	r0, [pc, #64]	; (20cac <bt_smp_accept+0xb0>)
   20c6a:	f7f3 fa47 	bl	140fc <z_impl_z_log_msg_static_create>
   20c6e:	46a5      	mov	sp, r4

	return -ENOMEM;
   20c70:	f06f 000b 	mvn.w	r0, #11
}
   20c74:	370c      	adds	r7, #12
   20c76:	46bd      	mov	sp, r7
   20c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->chan.conn) {
   20c7a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   20c7e:	011b      	lsls	r3, r3, #4
   20c80:	4a0b      	ldr	r2, [pc, #44]	; (20cb0 <bt_smp_accept+0xb4>)
   20c82:	58d3      	ldr	r3, [r2, r3]
   20c84:	b10b      	cbz	r3, 20c8a <bt_smp_accept+0x8e>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   20c86:	3001      	adds	r0, #1
   20c88:	e7bd      	b.n	20c06 <bt_smp_accept+0xa>
		smp->chan.ops = &ops;
   20c8a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   20c8e:	4b08      	ldr	r3, [pc, #32]	; (20cb0 <bt_smp_accept+0xb4>)
   20c90:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   20c94:	4a07      	ldr	r2, [pc, #28]	; (20cb4 <bt_smp_accept+0xb8>)
   20c96:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   20c98:	600b      	str	r3, [r1, #0]
		return 0;
   20c9a:	e7eb      	b.n	20c74 <bt_smp_accept+0x78>
	LOG_ERR("No available SMP context for conn %p", conn);
   20c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20ca0:	e7b9      	b.n	20c16 <bt_smp_accept+0x1a>
   20ca2:	f06f 0c1b 	mvn.w	ip, #27
   20ca6:	e7c3      	b.n	20c30 <bt_smp_accept+0x34>
   20ca8:	0003498c 	.word	0x0003498c
   20cac:	00031d34 	.word	0x00031d34
   20cb0:	20004050 	.word	0x20004050
   20cb4:	000349b4 	.word	0x000349b4

00020cb8 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   20cb8:	4b03      	ldr	r3, [pc, #12]	; (20cc8 <pool_id+0x10>)
   20cba:	1ac0      	subs	r0, r0, r3
   20cbc:	1080      	asrs	r0, r0, #2
}
   20cbe:	4b03      	ldr	r3, [pc, #12]	; (20ccc <pool_id+0x14>)
   20cc0:	fb03 f000 	mul.w	r0, r3, r0
   20cc4:	4770      	bx	lr
   20cc6:	bf00      	nop
   20cc8:	20000b60 	.word	0x20000b60
   20ccc:	ba2e8ba3 	.word	0xba2e8ba3

00020cd0 <net_buf_pool_get>:
}
   20cd0:	222c      	movs	r2, #44	; 0x2c
   20cd2:	4b02      	ldr	r3, [pc, #8]	; (20cdc <net_buf_pool_get+0xc>)
   20cd4:	fb02 3000 	mla	r0, r2, r0, r3
   20cd8:	4770      	bx	lr
   20cda:	bf00      	nop
   20cdc:	20000b60 	.word	0x20000b60

00020ce0 <endpoint_ctx>:

	return true;
}

static struct nrf_usbd_ep_ctx *endpoint_ctx(const uint8_t ep)
{
   20ce0:	b510      	push	{r4, lr}
   20ce2:	4604      	mov	r4, r0
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
   20ce4:	f00e f9bd 	bl	2f062 <ep_is_valid>
   20ce8:	b1c0      	cbz	r0, 20d1c <endpoint_ctx+0x3c>
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
   20cea:	f004 030f 	and.w	r3, r4, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
   20cee:	f014 0f80 	tst.w	r4, #128	; 0x80
   20cf2:	d10a      	bne.n	20d0a <endpoint_ctx+0x2a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20cf4:	f014 0f08 	tst.w	r4, #8
   20cf8:	d114      	bne.n	20d24 <endpoint_ctx+0x44>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
   20cfa:	f103 0009 	add.w	r0, r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   20cfe:	0140      	lsls	r0, r0, #5
   20d00:	3048      	adds	r0, #72	; 0x48
   20d02:	4b09      	ldr	r3, [pc, #36]	; (20d28 <endpoint_ctx+0x48>)
   20d04:	4418      	add	r0, r3
   20d06:	3004      	adds	r0, #4
					    ep_num];
		}
	}

	return NULL;
}
   20d08:	bd10      	pop	{r4, pc}
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   20d0a:	f014 0f08 	tst.w	r4, #8
   20d0e:	d107      	bne.n	20d20 <endpoint_ctx+0x40>
			return &ctx->ep_ctx[ep_num];
   20d10:	0158      	lsls	r0, r3, #5
   20d12:	3048      	adds	r0, #72	; 0x48
   20d14:	4b04      	ldr	r3, [pc, #16]	; (20d28 <endpoint_ctx+0x48>)
   20d16:	4418      	add	r0, r3
   20d18:	3004      	adds	r0, #4
   20d1a:	e7f5      	b.n	20d08 <endpoint_ctx+0x28>
		return NULL;
   20d1c:	2000      	movs	r0, #0
   20d1e:	e7f3      	b.n	20d08 <endpoint_ctx+0x28>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   20d20:	4802      	ldr	r0, [pc, #8]	; (20d2c <endpoint_ctx+0x4c>)
   20d22:	e7f1      	b.n	20d08 <endpoint_ctx+0x28>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   20d24:	4802      	ldr	r0, [pc, #8]	; (20d30 <endpoint_ctx+0x50>)
   20d26:	e7ef      	b.n	20d08 <endpoint_ctx+0x28>
   20d28:	20004080 	.word	0x20004080
   20d2c:	200041cc 	.word	0x200041cc
   20d30:	200042ec 	.word	0x200042ec

00020d34 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
   20d34:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   20d36:	2400      	movs	r4, #0
   20d38:	e005      	b.n	20d46 <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
   20d3a:	b2e0      	uxtb	r0, r4
   20d3c:	f00e f9ac 	bl	2f098 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   20d40:	f00e f9b4 	bl	2f0ac <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   20d44:	3401      	adds	r4, #1
   20d46:	2c07      	cmp	r4, #7
   20d48:	d9f7      	bls.n	20d3a <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   20d4a:	2400      	movs	r4, #0
   20d4c:	e002      	b.n	20d54 <eps_ctx_init+0x20>

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
		}

		ep_ctx_reset(ep_ctx);
   20d4e:	f00e f9ad 	bl	2f0ac <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   20d52:	3401      	adds	r4, #1
   20d54:	2c07      	cmp	r4, #7
   20d56:	d80a      	bhi.n	20d6e <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
   20d58:	b2e0      	uxtb	r0, r4
   20d5a:	f00e f9a3 	bl	2f0a4 <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   20d5e:	6903      	ldr	r3, [r0, #16]
   20d60:	2b00      	cmp	r3, #0
   20d62:	d1f4      	bne.n	20d4e <eps_ctx_init+0x1a>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   20d64:	4b0a      	ldr	r3, [pc, #40]	; (20d90 <eps_ctx_init+0x5c>)
   20d66:	eb03 1384 	add.w	r3, r3, r4, lsl #6
   20d6a:	6103      	str	r3, [r0, #16]
   20d6c:	e7ef      	b.n	20d4e <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   20d6e:	2088      	movs	r0, #136	; 0x88
   20d70:	f00e f992 	bl	2f098 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   20d74:	f00e f99a 	bl	2f0ac <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   20d78:	2008      	movs	r0, #8
   20d7a:	f00e f993 	bl	2f0a4 <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   20d7e:	6903      	ldr	r3, [r0, #16]
   20d80:	b11b      	cbz	r3, 20d8a <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
   20d82:	f00e f993 	bl	2f0ac <ep_ctx_reset>
	}

	return 0;
}
   20d86:	2000      	movs	r0, #0
   20d88:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   20d8a:	4b02      	ldr	r3, [pc, #8]	; (20d94 <eps_ctx_init+0x60>)
   20d8c:	6103      	str	r3, [r0, #16]
   20d8e:	e7f8      	b.n	20d82 <eps_ctx_init+0x4e>
   20d90:	20004710 	.word	0x20004710
   20d94:	20004310 	.word	0x20004310

00020d98 <usbd_evt_get>:
{
   20d98:	b508      	push	{r3, lr}
	return z_impl_k_queue_get(queue, timeout);
   20d9a:	2200      	movs	r2, #0
   20d9c:	2300      	movs	r3, #0
   20d9e:	4802      	ldr	r0, [pc, #8]	; (20da8 <usbd_evt_get+0x10>)
   20da0:	f005 fa26 	bl	261f0 <z_impl_k_queue_get>
}
   20da4:	bd08      	pop	{r3, pc}
   20da6:	bf00      	nop
   20da8:	20000b48 	.word	0x20000b48

00020dac <usbd_evt_flush>:
{
   20dac:	b510      	push	{r4, lr}
   20dae:	e004      	b.n	20dba <usbd_evt_flush+0xe>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   20db0:	1d01      	adds	r1, r0, #4
   20db2:	4805      	ldr	r0, [pc, #20]	; (20dc8 <usbd_evt_flush+0x1c>)
   20db4:	f00f fe9c 	bl	30af0 <k_mem_slab_free>
	} while (ev != NULL);
   20db8:	b12c      	cbz	r4, 20dc6 <usbd_evt_flush+0x1a>
		ev = usbd_evt_get();
   20dba:	f7ff ffed 	bl	20d98 <usbd_evt_get>
		if (ev) {
   20dbe:	4604      	mov	r4, r0
   20dc0:	2800      	cmp	r0, #0
   20dc2:	d1f5      	bne.n	20db0 <usbd_evt_flush+0x4>
   20dc4:	e7f8      	b.n	20db8 <usbd_evt_flush+0xc>
}
   20dc6:	bd10      	pop	{r4, pc}
   20dc8:	20000994 	.word	0x20000994

00020dcc <usbd_evt_alloc>:
{
   20dcc:	b500      	push	{lr}
   20dce:	b08f      	sub	sp, #60	; 0x3c
	if (k_mem_slab_alloc(&fifo_elem_slab,
   20dd0:	2200      	movs	r2, #0
   20dd2:	2300      	movs	r3, #0
   20dd4:	a901      	add	r1, sp, #4
   20dd6:	4833      	ldr	r0, [pc, #204]	; (20ea4 <usbd_evt_alloc+0xd8>)
   20dd8:	f005 f808 	bl	25dec <k_mem_slab_alloc>
   20ddc:	b920      	cbnz	r0, 20de8 <usbd_evt_alloc+0x1c>
	ev = (struct usbd_event *)block.data;
   20dde:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   20de0:	6040      	str	r0, [r0, #4]
}
   20de2:	b00f      	add	sp, #60	; 0x3c
   20de4:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("USBD event allocation failed!");
   20de8:	4b2f      	ldr	r3, [pc, #188]	; (20ea8 <usbd_evt_alloc+0xdc>)
   20dea:	9307      	str	r3, [sp, #28]
   20dec:	2302      	movs	r3, #2
   20dee:	f88d 3000 	strb.w	r3, [sp]
   20df2:	2300      	movs	r3, #0
   20df4:	f88d 3001 	strb.w	r3, [sp, #1]
   20df8:	f88d 3002 	strb.w	r3, [sp, #2]
   20dfc:	f88d 3003 	strb.w	r3, [sp, #3]
   20e00:	9a00      	ldr	r2, [sp, #0]
   20e02:	9206      	str	r2, [sp, #24]
   20e04:	4619      	mov	r1, r3
   20e06:	f363 0100 	bfi	r1, r3, #0, #1
   20e0a:	f363 0141 	bfi	r1, r3, #1, #1
   20e0e:	f363 0182 	bfi	r1, r3, #2, #1
   20e12:	f363 01c5 	bfi	r1, r3, #3, #3
   20e16:	2201      	movs	r2, #1
   20e18:	f362 1188 	bfi	r1, r2, #6, #3
   20e1c:	2208      	movs	r2, #8
   20e1e:	f362 2153 	bfi	r1, r2, #9, #11
   20e22:	f363 511f 	bfi	r1, r3, #20, #12
   20e26:	aa06      	add	r2, sp, #24
   20e28:	4820      	ldr	r0, [pc, #128]	; (20eac <usbd_evt_alloc+0xe0>)
   20e2a:	f7f3 f967 	bl	140fc <z_impl_z_log_msg_static_create>
		usbd_evt_flush();
   20e2e:	f7ff ffbd 	bl	20dac <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   20e32:	2200      	movs	r2, #0
   20e34:	2300      	movs	r3, #0
   20e36:	a901      	add	r1, sp, #4
   20e38:	481a      	ldr	r0, [pc, #104]	; (20ea4 <usbd_evt_alloc+0xd8>)
   20e3a:	f004 ffd7 	bl	25dec <k_mem_slab_alloc>
   20e3e:	b320      	cbz	r0, 20e8a <usbd_evt_alloc+0xbe>
			LOG_ERR("USBD event memory corrupted");
   20e40:	4b1b      	ldr	r3, [pc, #108]	; (20eb0 <usbd_evt_alloc+0xe4>)
   20e42:	930d      	str	r3, [sp, #52]	; 0x34
   20e44:	2302      	movs	r3, #2
   20e46:	f88d 3000 	strb.w	r3, [sp]
   20e4a:	2300      	movs	r3, #0
   20e4c:	f88d 3001 	strb.w	r3, [sp, #1]
   20e50:	f88d 3002 	strb.w	r3, [sp, #2]
   20e54:	f88d 3003 	strb.w	r3, [sp, #3]
   20e58:	9a00      	ldr	r2, [sp, #0]
   20e5a:	920c      	str	r2, [sp, #48]	; 0x30
   20e5c:	4619      	mov	r1, r3
   20e5e:	f363 0100 	bfi	r1, r3, #0, #1
   20e62:	f363 0141 	bfi	r1, r3, #1, #1
   20e66:	f363 0182 	bfi	r1, r3, #2, #1
   20e6a:	f363 01c5 	bfi	r1, r3, #3, #3
   20e6e:	2201      	movs	r2, #1
   20e70:	f362 1188 	bfi	r1, r2, #6, #3
   20e74:	2208      	movs	r2, #8
   20e76:	f362 2153 	bfi	r1, r2, #9, #11
   20e7a:	f363 511f 	bfi	r1, r3, #20, #12
   20e7e:	aa0c      	add	r2, sp, #48	; 0x30
   20e80:	480a      	ldr	r0, [pc, #40]	; (20eac <usbd_evt_alloc+0xe0>)
   20e82:	f7f3 f93b 	bl	140fc <z_impl_z_log_msg_static_create>
			return NULL;
   20e86:	2000      	movs	r0, #0
   20e88:	e7ab      	b.n	20de2 <usbd_evt_alloc+0x16>
		ev = (struct usbd_event *)block.data;
   20e8a:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   20e8c:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   20e8e:	2304      	movs	r3, #4
   20e90:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   20e92:	4808      	ldr	r0, [pc, #32]	; (20eb4 <usbd_evt_alloc+0xe8>)
   20e94:	f00f ff69 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   20e98:	4907      	ldr	r1, [pc, #28]	; (20eb8 <usbd_evt_alloc+0xec>)
   20e9a:	4808      	ldr	r0, [pc, #32]	; (20ebc <usbd_evt_alloc+0xf0>)
   20e9c:	f010 f887 	bl	30fae <k_work_submit_to_queue>
		return NULL;
   20ea0:	e7f1      	b.n	20e86 <usbd_evt_alloc+0xba>
   20ea2:	bf00      	nop
   20ea4:	20000994 	.word	0x20000994
   20ea8:	00034a08 	.word	0x00034a08
   20eac:	00031ddc 	.word	0x00031ddc
   20eb0:	00034a28 	.word	0x00034a28
   20eb4:	20000b48 	.word	0x20000b48
   20eb8:	200040a8 	.word	0x200040a8
   20ebc:	20002368 	.word	0x20002368

00020ec0 <submit_dc_power_event>:
{
   20ec0:	b510      	push	{r4, lr}
   20ec2:	4604      	mov	r4, r0
	struct usbd_event *ev = usbd_evt_alloc();
   20ec4:	f7ff ff82 	bl	20dcc <usbd_evt_alloc>
	if (!ev) {
   20ec8:	b150      	cbz	r0, 20ee0 <submit_dc_power_event+0x20>
   20eca:	4601      	mov	r1, r0
	ev->evt_type = USBD_EVT_POWER;
   20ecc:	2300      	movs	r3, #0
   20ece:	7403      	strb	r3, [r0, #16]
	ev->evt.pwr_evt.state = state;
   20ed0:	7204      	strb	r4, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   20ed2:	4806      	ldr	r0, [pc, #24]	; (20eec <submit_dc_power_event+0x2c>)
   20ed4:	f00f ff49 	bl	30d6a <k_queue_append>
	if (usbd_ctx.attached) {
   20ed8:	4b05      	ldr	r3, [pc, #20]	; (20ef0 <submit_dc_power_event+0x30>)
   20eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   20ede:	b903      	cbnz	r3, 20ee2 <submit_dc_power_event+0x22>
}
   20ee0:	bd10      	pop	{r4, pc}
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   20ee2:	4904      	ldr	r1, [pc, #16]	; (20ef4 <submit_dc_power_event+0x34>)
   20ee4:	4804      	ldr	r0, [pc, #16]	; (20ef8 <submit_dc_power_event+0x38>)
   20ee6:	f010 f862 	bl	30fae <k_work_submit_to_queue>
}
   20eea:	e7f9      	b.n	20ee0 <submit_dc_power_event+0x20>
   20eec:	20000b48 	.word	0x20000b48
   20ef0:	20004080 	.word	0x20004080
   20ef4:	200040a8 	.word	0x200040a8
   20ef8:	20002368 	.word	0x20002368

00020efc <usb_dc_power_event_handler>:
{
   20efc:	b5b0      	push	{r4, r5, r7, lr}
   20efe:	b082      	sub	sp, #8
   20f00:	af00      	add	r7, sp, #0
	switch (event) {
   20f02:	2801      	cmp	r0, #1
   20f04:	d040      	beq.n	20f88 <usb_dc_power_event_handler+0x8c>
   20f06:	4601      	mov	r1, r0
   20f08:	2802      	cmp	r0, #2
   20f0a:	d040      	beq.n	20f8e <usb_dc_power_event_handler+0x92>
   20f0c:	2800      	cmp	r0, #0
   20f0e:	d03d      	beq.n	20f8c <usb_dc_power_event_handler+0x90>
		LOG_ERR("Unknown USB power event %d", event);
   20f10:	466c      	mov	r4, sp
   20f12:	b088      	sub	sp, #32
   20f14:	466b      	mov	r3, sp
   20f16:	f113 0210 	adds.w	r2, r3, #16
   20f1a:	d02f      	beq.n	20f7c <usb_dc_power_event_handler+0x80>
   20f1c:	200c      	movs	r0, #12
   20f1e:	b142      	cbz	r2, 20f32 <usb_dc_power_event_handler+0x36>
   20f20:	4684      	mov	ip, r0
   20f22:	2804      	cmp	r0, #4
   20f24:	dd01      	ble.n	20f2a <usb_dc_power_event_handler+0x2e>
   20f26:	4d1c      	ldr	r5, [pc, #112]	; (20f98 <usb_dc_power_event_handler+0x9c>)
   20f28:	615d      	str	r5, [r3, #20]
   20f2a:	f1bc 0f08 	cmp.w	ip, #8
   20f2e:	dd00      	ble.n	20f32 <usb_dc_power_event_handler+0x36>
   20f30:	6199      	str	r1, [r3, #24]
   20f32:	280b      	cmp	r0, #11
   20f34:	dd25      	ble.n	20f82 <usb_dc_power_event_handler+0x86>
   20f36:	f04f 0c0c 	mov.w	ip, #12
   20f3a:	b13a      	cbz	r2, 20f4c <usb_dc_power_event_handler+0x50>
   20f3c:	2103      	movs	r1, #3
   20f3e:	7139      	strb	r1, [r7, #4]
   20f40:	2100      	movs	r1, #0
   20f42:	7179      	strb	r1, [r7, #5]
   20f44:	71b9      	strb	r1, [r7, #6]
   20f46:	71f9      	strb	r1, [r7, #7]
   20f48:	6878      	ldr	r0, [r7, #4]
   20f4a:	6118      	str	r0, [r3, #16]
   20f4c:	2100      	movs	r1, #0
   20f4e:	f36f 0100 	bfc	r1, #0, #1
   20f52:	f36f 0141 	bfc	r1, #1, #1
   20f56:	f36f 0182 	bfc	r1, #2, #1
   20f5a:	f36f 01c5 	bfc	r1, #3, #3
   20f5e:	2301      	movs	r3, #1
   20f60:	f363 1188 	bfi	r1, r3, #6, #3
   20f64:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   20f68:	f36c 2153 	bfi	r1, ip, #9, #11
   20f6c:	f36f 511f 	bfc	r1, #20, #12
   20f70:	2300      	movs	r3, #0
   20f72:	480a      	ldr	r0, [pc, #40]	; (20f9c <usb_dc_power_event_handler+0xa0>)
   20f74:	f7f3 f8c2 	bl	140fc <z_impl_z_log_msg_static_create>
   20f78:	46a5      	mov	sp, r4
   20f7a:	e00a      	b.n	20f92 <usb_dc_power_event_handler+0x96>
   20f7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20f80:	e7cd      	b.n	20f1e <usb_dc_power_event_handler+0x22>
   20f82:	f06f 0c1b 	mvn.w	ip, #27
   20f86:	e7d8      	b.n	20f3a <usb_dc_power_event_handler+0x3e>
		new_state = USBD_DETACHED;
   20f88:	2000      	movs	r0, #0
   20f8a:	e000      	b.n	20f8e <usb_dc_power_event_handler+0x92>
	switch (event) {
   20f8c:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
   20f8e:	f7ff ff97 	bl	20ec0 <submit_dc_power_event>
}
   20f92:	3708      	adds	r7, #8
   20f94:	46bd      	mov	sp, r7
   20f96:	bdb0      	pop	{r4, r5, r7, pc}
   20f98:	00034a44 	.word	0x00034a44
   20f9c:	00031ddc 	.word	0x00031ddc

00020fa0 <usbd_sof_trigger_iso_read>:
 * ISO OUT endpoint does not generate irq by itself and reading
 * from ISO OUT ep is synchronized with SOF frame. For more details
 * refer to Nordic usbd specification.
 */
static void usbd_sof_trigger_iso_read(void)
{
   20fa0:	b510      	push	{r4, lr}
   20fa2:	b08e      	sub	sp, #56	; 0x38
	struct usbd_event *ev;
	struct nrf_usbd_ep_ctx *ep_ctx;

	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
   20fa4:	2008      	movs	r0, #8
   20fa6:	f7ff fe9b 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   20faa:	b120      	cbz	r0, 20fb6 <usbd_sof_trigger_iso_read+0x16>
   20fac:	4604      	mov	r4, r0
		LOG_ERR("There is no ISO ep");
		return;
	}

	if (ep_ctx->cfg.en) {
   20fae:	7a03      	ldrb	r3, [r0, #8]
   20fb0:	bb2b      	cbnz	r3, 20ffe <usbd_sof_trigger_iso_read+0x5e>
		usbd_evt_put(ev);
		usbd_work_schedule();
	} else {
		LOG_DBG("Endpoint is not enabled");
	}
}
   20fb2:	b00e      	add	sp, #56	; 0x38
   20fb4:	bd10      	pop	{r4, pc}
		LOG_ERR("There is no ISO ep");
   20fb6:	4b2d      	ldr	r3, [pc, #180]	; (2106c <usbd_sof_trigger_iso_read+0xcc>)
   20fb8:	930d      	str	r3, [sp, #52]	; 0x34
   20fba:	2302      	movs	r3, #2
   20fbc:	f88d 3004 	strb.w	r3, [sp, #4]
   20fc0:	2300      	movs	r3, #0
   20fc2:	f88d 3005 	strb.w	r3, [sp, #5]
   20fc6:	f88d 3006 	strb.w	r3, [sp, #6]
   20fca:	f88d 3007 	strb.w	r3, [sp, #7]
   20fce:	9a01      	ldr	r2, [sp, #4]
   20fd0:	920c      	str	r2, [sp, #48]	; 0x30
   20fd2:	4619      	mov	r1, r3
   20fd4:	f363 0100 	bfi	r1, r3, #0, #1
   20fd8:	f363 0141 	bfi	r1, r3, #1, #1
   20fdc:	f363 0182 	bfi	r1, r3, #2, #1
   20fe0:	f363 01c5 	bfi	r1, r3, #3, #3
   20fe4:	2201      	movs	r2, #1
   20fe6:	f362 1188 	bfi	r1, r2, #6, #3
   20fea:	2208      	movs	r2, #8
   20fec:	f362 2153 	bfi	r1, r2, #9, #11
   20ff0:	f363 511f 	bfi	r1, r3, #20, #12
   20ff4:	aa0c      	add	r2, sp, #48	; 0x30
   20ff6:	481e      	ldr	r0, [pc, #120]	; (21070 <usbd_sof_trigger_iso_read+0xd0>)
   20ff8:	f7f3 f880 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   20ffc:	e7d9      	b.n	20fb2 <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
   20ffe:	2301      	movs	r3, #1
   21000:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
   21002:	7703      	strb	r3, [r0, #28]
		ev = usbd_evt_alloc();
   21004:	f7ff fee2 	bl	20dcc <usbd_evt_alloc>
		if (!ev) {
   21008:	4601      	mov	r1, r0
   2100a:	b158      	cbz	r0, 21024 <usbd_sof_trigger_iso_read+0x84>
		ev->evt_type = USBD_EVT_EP;
   2100c:	2301      	movs	r3, #1
   2100e:	7403      	strb	r3, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   21010:	7303      	strb	r3, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   21012:	6084      	str	r4, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   21014:	4817      	ldr	r0, [pc, #92]	; (21074 <usbd_sof_trigger_iso_read+0xd4>)
   21016:	f00f fea8 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   2101a:	4917      	ldr	r1, [pc, #92]	; (21078 <usbd_sof_trigger_iso_read+0xd8>)
   2101c:	4817      	ldr	r0, [pc, #92]	; (2107c <usbd_sof_trigger_iso_read+0xdc>)
   2101e:	f00f ffc6 	bl	30fae <k_work_submit_to_queue>
}
   21022:	e7c6      	b.n	20fb2 <usbd_sof_trigger_iso_read+0x12>
			LOG_ERR("Failed to alloc evt");
   21024:	4b16      	ldr	r3, [pc, #88]	; (21080 <usbd_sof_trigger_iso_read+0xe0>)
   21026:	9307      	str	r3, [sp, #28]
   21028:	2302      	movs	r3, #2
   2102a:	f88d 3004 	strb.w	r3, [sp, #4]
   2102e:	2300      	movs	r3, #0
   21030:	f88d 3005 	strb.w	r3, [sp, #5]
   21034:	f88d 3006 	strb.w	r3, [sp, #6]
   21038:	f88d 3007 	strb.w	r3, [sp, #7]
   2103c:	9a01      	ldr	r2, [sp, #4]
   2103e:	9206      	str	r2, [sp, #24]
   21040:	4619      	mov	r1, r3
   21042:	f363 0100 	bfi	r1, r3, #0, #1
   21046:	f363 0141 	bfi	r1, r3, #1, #1
   2104a:	f363 0182 	bfi	r1, r3, #2, #1
   2104e:	f363 01c5 	bfi	r1, r3, #3, #3
   21052:	2201      	movs	r2, #1
   21054:	f362 1188 	bfi	r1, r2, #6, #3
   21058:	2208      	movs	r2, #8
   2105a:	f362 2153 	bfi	r1, r2, #9, #11
   2105e:	f363 511f 	bfi	r1, r3, #20, #12
   21062:	aa06      	add	r2, sp, #24
   21064:	4802      	ldr	r0, [pc, #8]	; (21070 <usbd_sof_trigger_iso_read+0xd0>)
   21066:	f7f3 f849 	bl	140fc <z_impl_z_log_msg_static_create>
			return;
   2106a:	e7a2      	b.n	20fb2 <usbd_sof_trigger_iso_read+0x12>
   2106c:	00034a60 	.word	0x00034a60
   21070:	00031ddc 	.word	0x00031ddc
   21074:	20000b48 	.word	0x20000b48
   21078:	200040a8 	.word	0x200040a8
   2107c:	20002368 	.word	0x20002368
   21080:	00034a74 	.word	0x00034a74

00021084 <usbd_event_transfer_data>:
{
   21084:	b5f0      	push	{r4, r5, r6, r7, lr}
   21086:	b083      	sub	sp, #12
   21088:	af00      	add	r7, sp, #0
   2108a:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   2108c:	7886      	ldrb	r6, [r0, #2]
   2108e:	4630      	mov	r0, r6
   21090:	f7ff fe26 	bl	20ce0 <endpoint_ctx>
   21094:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   21096:	f016 0f80 	tst.w	r6, #128	; 0x80
   2109a:	d118      	bne.n	210ce <usbd_event_transfer_data+0x4a>
		switch (p_event->data.eptransfer.status) {
   2109c:	78e3      	ldrb	r3, [r4, #3]
   2109e:	2b00      	cmp	r3, #0
   210a0:	d06e      	beq.n	21180 <usbd_event_transfer_data+0xfc>
   210a2:	2b01      	cmp	r3, #1
   210a4:	f040 8084 	bne.w	211b0 <usbd_event_transfer_data+0x12c>
			struct usbd_event *ev = usbd_evt_alloc();
   210a8:	f7ff fe90 	bl	20dcc <usbd_evt_alloc>
			if (!ev) {
   210ac:	4601      	mov	r1, r0
   210ae:	2800      	cmp	r0, #0
   210b0:	f000 80b6 	beq.w	21220 <usbd_event_transfer_data+0x19c>
			ep_ctx->read_pending = true;
   210b4:	2301      	movs	r3, #1
   210b6:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   210b8:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   210ba:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   210bc:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   210be:	485d      	ldr	r0, [pc, #372]	; (21234 <usbd_event_transfer_data+0x1b0>)
   210c0:	f00f fe53 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   210c4:	495c      	ldr	r1, [pc, #368]	; (21238 <usbd_event_transfer_data+0x1b4>)
   210c6:	485d      	ldr	r0, [pc, #372]	; (2123c <usbd_event_transfer_data+0x1b8>)
   210c8:	f00f ff71 	bl	30fae <k_work_submit_to_queue>
}
   210cc:	e0a8      	b.n	21220 <usbd_event_transfer_data+0x19c>
		switch (p_event->data.eptransfer.status) {
   210ce:	78e3      	ldrb	r3, [r4, #3]
   210d0:	2b00      	cmp	r3, #0
   210d2:	d03b      	beq.n	2114c <usbd_event_transfer_data+0xc8>
   210d4:	2b03      	cmp	r3, #3
   210d6:	f000 80a3 	beq.w	21220 <usbd_event_transfer_data+0x19c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   210da:	466c      	mov	r4, sp
   210dc:	b088      	sub	sp, #32
   210de:	4669      	mov	r1, sp
   210e0:	f111 0210 	adds.w	r2, r1, #16
   210e4:	d046      	beq.n	21174 <usbd_event_transfer_data+0xf0>
   210e6:	2010      	movs	r0, #16
   210e8:	b162      	cbz	r2, 21104 <usbd_event_transfer_data+0x80>
   210ea:	4605      	mov	r5, r0
   210ec:	2804      	cmp	r0, #4
   210ee:	dd03      	ble.n	210f8 <usbd_event_transfer_data+0x74>
   210f0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 21240 <usbd_event_transfer_data+0x1bc>
   210f4:	f8c1 c014 	str.w	ip, [r1, #20]
   210f8:	2d08      	cmp	r5, #8
   210fa:	dd00      	ble.n	210fe <usbd_event_transfer_data+0x7a>
   210fc:	618b      	str	r3, [r1, #24]
   210fe:	2d0c      	cmp	r5, #12
   21100:	dd00      	ble.n	21104 <usbd_event_transfer_data+0x80>
   21102:	61ce      	str	r6, [r1, #28]
   21104:	280f      	cmp	r0, #15
   21106:	dd38      	ble.n	2117a <usbd_event_transfer_data+0xf6>
   21108:	2310      	movs	r3, #16
   2110a:	b13a      	cbz	r2, 2111c <usbd_event_transfer_data+0x98>
   2110c:	2004      	movs	r0, #4
   2110e:	7138      	strb	r0, [r7, #4]
   21110:	2000      	movs	r0, #0
   21112:	7178      	strb	r0, [r7, #5]
   21114:	71b8      	strb	r0, [r7, #6]
   21116:	71f8      	strb	r0, [r7, #7]
   21118:	6878      	ldr	r0, [r7, #4]
   2111a:	6108      	str	r0, [r1, #16]
   2111c:	2100      	movs	r1, #0
   2111e:	f36f 0100 	bfc	r1, #0, #1
   21122:	f36f 0141 	bfc	r1, #1, #1
   21126:	f36f 0182 	bfc	r1, #2, #1
   2112a:	f36f 01c5 	bfc	r1, #3, #3
   2112e:	2001      	movs	r0, #1
   21130:	f360 1188 	bfi	r1, r0, #6, #3
   21134:	f3c3 030a 	ubfx	r3, r3, #0, #11
   21138:	f363 2153 	bfi	r1, r3, #9, #11
   2113c:	f36f 511f 	bfc	r1, #20, #12
   21140:	2300      	movs	r3, #0
   21142:	4840      	ldr	r0, [pc, #256]	; (21244 <usbd_event_transfer_data+0x1c0>)
   21144:	f7f2 ffda 	bl	140fc <z_impl_z_log_msg_static_create>
   21148:	46a5      	mov	sp, r4
   2114a:	e069      	b.n	21220 <usbd_event_transfer_data+0x19c>
			struct usbd_event *ev = usbd_evt_alloc();
   2114c:	f7ff fe3e 	bl	20dcc <usbd_evt_alloc>
			if (!ev) {
   21150:	4601      	mov	r1, r0
   21152:	2800      	cmp	r0, #0
   21154:	d064      	beq.n	21220 <usbd_event_transfer_data+0x19c>
			ep_ctx->write_in_progress = false;
   21156:	2300      	movs	r3, #0
   21158:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   2115a:	2301      	movs	r3, #1
   2115c:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   2115e:	2303      	movs	r3, #3
   21160:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   21162:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   21164:	4833      	ldr	r0, [pc, #204]	; (21234 <usbd_event_transfer_data+0x1b0>)
   21166:	f00f fe00 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   2116a:	4933      	ldr	r1, [pc, #204]	; (21238 <usbd_event_transfer_data+0x1b4>)
   2116c:	4833      	ldr	r0, [pc, #204]	; (2123c <usbd_event_transfer_data+0x1b8>)
   2116e:	f00f ff1e 	bl	30fae <k_work_submit_to_queue>
}
   21172:	e055      	b.n	21220 <usbd_event_transfer_data+0x19c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   21174:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21178:	e7b6      	b.n	210e8 <usbd_event_transfer_data+0x64>
   2117a:	f06f 031b 	mvn.w	r3, #27
   2117e:	e7c4      	b.n	2110a <usbd_event_transfer_data+0x86>
			struct usbd_event *ev = usbd_evt_alloc();
   21180:	f7ff fe24 	bl	20dcc <usbd_evt_alloc>
			if (!ev) {
   21184:	4606      	mov	r6, r0
   21186:	2800      	cmp	r0, #0
   21188:	d04a      	beq.n	21220 <usbd_event_transfer_data+0x19c>
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   2118a:	78a1      	ldrb	r1, [r4, #2]
   2118c:	482e      	ldr	r0, [pc, #184]	; (21248 <usbd_event_transfer_data+0x1c4>)
   2118e:	f00d ff47 	bl	2f020 <nrf_usbd_ep_amount_get>
   21192:	60e8      	str	r0, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   21194:	2301      	movs	r3, #1
   21196:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   21198:	2302      	movs	r3, #2
   2119a:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   2119c:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   2119e:	4631      	mov	r1, r6
   211a0:	4824      	ldr	r0, [pc, #144]	; (21234 <usbd_event_transfer_data+0x1b0>)
   211a2:	f00f fde2 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   211a6:	4924      	ldr	r1, [pc, #144]	; (21238 <usbd_event_transfer_data+0x1b4>)
   211a8:	4824      	ldr	r0, [pc, #144]	; (2123c <usbd_event_transfer_data+0x1b8>)
   211aa:	f00f ff00 	bl	30fae <k_work_submit_to_queue>
}
   211ae:	e037      	b.n	21220 <usbd_event_transfer_data+0x19c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   211b0:	466c      	mov	r4, sp
   211b2:	b088      	sub	sp, #32
   211b4:	4669      	mov	r1, sp
   211b6:	f111 0210 	adds.w	r2, r1, #16
   211ba:	d034      	beq.n	21226 <usbd_event_transfer_data+0x1a2>
   211bc:	2010      	movs	r0, #16
   211be:	b162      	cbz	r2, 211da <usbd_event_transfer_data+0x156>
   211c0:	4605      	mov	r5, r0
   211c2:	2804      	cmp	r0, #4
   211c4:	dd03      	ble.n	211ce <usbd_event_transfer_data+0x14a>
   211c6:	f8df c078 	ldr.w	ip, [pc, #120]	; 21240 <usbd_event_transfer_data+0x1bc>
   211ca:	f8c1 c014 	str.w	ip, [r1, #20]
   211ce:	2d08      	cmp	r5, #8
   211d0:	dd00      	ble.n	211d4 <usbd_event_transfer_data+0x150>
   211d2:	618b      	str	r3, [r1, #24]
   211d4:	2d0c      	cmp	r5, #12
   211d6:	dd00      	ble.n	211da <usbd_event_transfer_data+0x156>
   211d8:	61ce      	str	r6, [r1, #28]
   211da:	280f      	cmp	r0, #15
   211dc:	dd26      	ble.n	2122c <usbd_event_transfer_data+0x1a8>
   211de:	2310      	movs	r3, #16
   211e0:	b13a      	cbz	r2, 211f2 <usbd_event_transfer_data+0x16e>
   211e2:	2004      	movs	r0, #4
   211e4:	7138      	strb	r0, [r7, #4]
   211e6:	2000      	movs	r0, #0
   211e8:	7178      	strb	r0, [r7, #5]
   211ea:	71b8      	strb	r0, [r7, #6]
   211ec:	71f8      	strb	r0, [r7, #7]
   211ee:	6878      	ldr	r0, [r7, #4]
   211f0:	6108      	str	r0, [r1, #16]
   211f2:	2100      	movs	r1, #0
   211f4:	f36f 0100 	bfc	r1, #0, #1
   211f8:	f36f 0141 	bfc	r1, #1, #1
   211fc:	f36f 0182 	bfc	r1, #2, #1
   21200:	f36f 01c5 	bfc	r1, #3, #3
   21204:	2001      	movs	r0, #1
   21206:	f360 1188 	bfi	r1, r0, #6, #3
   2120a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   2120e:	f363 2153 	bfi	r1, r3, #9, #11
   21212:	f36f 511f 	bfc	r1, #20, #12
   21216:	2300      	movs	r3, #0
   21218:	480a      	ldr	r0, [pc, #40]	; (21244 <usbd_event_transfer_data+0x1c0>)
   2121a:	f7f2 ff6f 	bl	140fc <z_impl_z_log_msg_static_create>
   2121e:	46a5      	mov	sp, r4
}
   21220:	370c      	adds	r7, #12
   21222:	46bd      	mov	sp, r7
   21224:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   21226:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2122a:	e7c8      	b.n	211be <usbd_event_transfer_data+0x13a>
   2122c:	f06f 031b 	mvn.w	r3, #27
   21230:	e7d6      	b.n	211e0 <usbd_event_transfer_data+0x15c>
   21232:	bf00      	nop
   21234:	20000b48 	.word	0x20000b48
   21238:	200040a8 	.word	0x200040a8
   2123c:	20002368 	.word	0x20002368
   21240:	00034a88 	.word	0x00034a88
   21244:	00031ddc 	.word	0x00031ddc
   21248:	40027000 	.word	0x40027000

0002124c <usbd_work_process_recvreq>:
	if (!ep_ctx->read_pending) {
   2124c:	7f4b      	ldrb	r3, [r1, #29]
   2124e:	2b00      	cmp	r3, #0
   21250:	d05f      	beq.n	21312 <usbd_work_process_recvreq+0xc6>
{
   21252:	b5f0      	push	{r4, r5, r6, r7, lr}
   21254:	b085      	sub	sp, #20
   21256:	af00      	add	r7, sp, #0
   21258:	460c      	mov	r4, r1
	if (!ep_ctx->read_complete) {
   2125a:	7f0b      	ldrb	r3, [r1, #28]
   2125c:	b913      	cbnz	r3, 21264 <usbd_work_process_recvreq+0x18>
}
   2125e:	3714      	adds	r7, #20
   21260:	46bd      	mov	sp, r7
   21262:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_ctx->read_pending = false;
   21264:	2600      	movs	r6, #0
   21266:	774e      	strb	r6, [r1, #29]
	ep_ctx->read_complete = false;
   21268:	770e      	strb	r6, [r1, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2126a:	f100 0538 	add.w	r5, r0, #56	; 0x38
	return z_impl_k_mutex_lock(mutex, timeout);
   2126e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21276:	4628      	mov	r0, r5
   21278:	f004 fef8 	bl	2606c <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   2127c:	6963      	ldr	r3, [r4, #20]
   2127e:	607b      	str	r3, [r7, #4]
   21280:	6863      	ldr	r3, [r4, #4]
   21282:	60bb      	str	r3, [r7, #8]
   21284:	60fe      	str	r6, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   21286:	1d39      	adds	r1, r7, #4
   21288:	7a60      	ldrb	r0, [r4, #9]
   2128a:	f003 fd4f 	bl	24d2c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   2128e:	4b21      	ldr	r3, [pc, #132]	; (21314 <usbd_work_process_recvreq+0xc8>)
   21290:	4298      	cmp	r0, r3
   21292:	d034      	beq.n	212fe <usbd_work_process_recvreq+0xb2>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   21294:	466e      	mov	r6, sp
   21296:	b088      	sub	sp, #32
   21298:	466b      	mov	r3, sp
   2129a:	f113 0210 	adds.w	r2, r3, #16
   2129e:	d032      	beq.n	21306 <usbd_work_process_recvreq+0xba>
   212a0:	210c      	movs	r1, #12
   212a2:	b14a      	cbz	r2, 212b8 <usbd_work_process_recvreq+0x6c>
   212a4:	460c      	mov	r4, r1
   212a6:	2904      	cmp	r1, #4
   212a8:	dd03      	ble.n	212b2 <usbd_work_process_recvreq+0x66>
   212aa:	f8df c06c 	ldr.w	ip, [pc, #108]	; 21318 <usbd_work_process_recvreq+0xcc>
   212ae:	f8c3 c014 	str.w	ip, [r3, #20]
   212b2:	2c08      	cmp	r4, #8
   212b4:	dd00      	ble.n	212b8 <usbd_work_process_recvreq+0x6c>
   212b6:	6198      	str	r0, [r3, #24]
   212b8:	290b      	cmp	r1, #11
   212ba:	dd27      	ble.n	2130c <usbd_work_process_recvreq+0xc0>
   212bc:	240c      	movs	r4, #12
   212be:	b13a      	cbz	r2, 212d0 <usbd_work_process_recvreq+0x84>
   212c0:	2103      	movs	r1, #3
   212c2:	7039      	strb	r1, [r7, #0]
   212c4:	2100      	movs	r1, #0
   212c6:	7079      	strb	r1, [r7, #1]
   212c8:	70b9      	strb	r1, [r7, #2]
   212ca:	70f9      	strb	r1, [r7, #3]
   212cc:	6838      	ldr	r0, [r7, #0]
   212ce:	6118      	str	r0, [r3, #16]
   212d0:	2100      	movs	r1, #0
   212d2:	f36f 0100 	bfc	r1, #0, #1
   212d6:	f36f 0141 	bfc	r1, #1, #1
   212da:	f36f 0182 	bfc	r1, #2, #1
   212de:	f36f 01c5 	bfc	r1, #3, #3
   212e2:	2301      	movs	r3, #1
   212e4:	f363 1188 	bfi	r1, r3, #6, #3
   212e8:	f3c4 040a 	ubfx	r4, r4, #0, #11
   212ec:	f364 2153 	bfi	r1, r4, #9, #11
   212f0:	f36f 511f 	bfc	r1, #20, #12
   212f4:	2300      	movs	r3, #0
   212f6:	4809      	ldr	r0, [pc, #36]	; (2131c <usbd_work_process_recvreq+0xd0>)
   212f8:	f7f2 ff00 	bl	140fc <z_impl_z_log_msg_static_create>
   212fc:	46b5      	mov	sp, r6
	return z_impl_k_mutex_unlock(mutex);
   212fe:	4628      	mov	r0, r5
   21300:	f004 ff38 	bl	26174 <z_impl_k_mutex_unlock>
   21304:	e7ab      	b.n	2125e <usbd_work_process_recvreq+0x12>
   21306:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2130a:	e7ca      	b.n	212a2 <usbd_work_process_recvreq+0x56>
   2130c:	f06f 041b 	mvn.w	r4, #27
   21310:	e7d5      	b.n	212be <usbd_work_process_recvreq+0x72>
   21312:	4770      	bx	lr
   21314:	0bad0000 	.word	0x0bad0000
   21318:	00034ab4 	.word	0x00034ab4
   2131c:	00031ddc 	.word	0x00031ddc

00021320 <usbd_work_process_setup>:
{
   21320:	b538      	push	{r3, r4, r5, lr}
   21322:	4605      	mov	r5, r0
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   21324:	6944      	ldr	r4, [r0, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   21326:	2208      	movs	r2, #8
   21328:	2100      	movs	r1, #0
   2132a:	4620      	mov	r0, r4
   2132c:	f00b fa8d 	bl	2c84a <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   21330:	4b1e      	ldr	r3, [pc, #120]	; (213ac <usbd_work_process_setup+0x8c>)
   21332:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   21336:	7022      	strb	r2, [r4, #0]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
   21338:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
   2133c:	7062      	strb	r2, [r4, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
   2133e:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
   21342:	b289      	uxth	r1, r1
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   21344:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
   21348:	0212      	lsls	r2, r2, #8
   2134a:	b292      	uxth	r2, r2
   2134c:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2134e:	8062      	strh	r2, [r4, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
   21350:	f8d3 1490 	ldr.w	r1, [r3, #1168]	; 0x490
   21354:	b289      	uxth	r1, r1
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   21356:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
   2135a:	0212      	lsls	r2, r2, #8
   2135c:	b292      	uxth	r2, r2
   2135e:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   21360:	80a2      	strh	r2, [r4, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
   21362:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   21366:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   21368:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   2136c:	021b      	lsls	r3, r3, #8
   2136e:	b29b      	uxth	r3, r3
   21370:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   21372:	80e3      	strh	r3, [r4, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   21374:	2208      	movs	r2, #8
   21376:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   21378:	4621      	mov	r1, r4
   2137a:	480d      	ldr	r0, [pc, #52]	; (213b0 <usbd_work_process_setup+0x90>)
   2137c:	f00b fa36 	bl	2c7ec <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   21380:	682b      	ldr	r3, [r5, #0]
   21382:	2100      	movs	r1, #0
   21384:	7a68      	ldrb	r0, [r5, #9]
   21386:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   21388:	f994 3000 	ldrsb.w	r3, [r4]
   2138c:	2b00      	cmp	r3, #0
   2138e:	db01      	blt.n	21394 <usbd_work_process_setup+0x74>
   21390:	88e3      	ldrh	r3, [r4, #6]
   21392:	b923      	cbnz	r3, 2139e <usbd_work_process_setup+0x7e>
		ctx->ctrl_read_len = 0U;
   21394:	4b07      	ldr	r3, [pc, #28]	; (213b4 <usbd_work_process_setup+0x94>)
   21396:	2200      	movs	r2, #0
   21398:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
   2139c:	bd38      	pop	{r3, r4, r5, pc}
		ctx->ctrl_read_len = usbd_setup->wLength;
   2139e:	4a05      	ldr	r2, [pc, #20]	; (213b4 <usbd_work_process_setup+0x94>)
   213a0:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   213a4:	f003 ff32 	bl	2520c <nrfx_usbd_setup_data_clear>
   213a8:	e7f8      	b.n	2139c <usbd_work_process_setup+0x7c>
   213aa:	bf00      	nop
   213ac:	40027000 	.word	0x40027000
   213b0:	20004084 	.word	0x20004084
   213b4:	20004080 	.word	0x20004080

000213b8 <usbd_work_process_ep_events>:
{
   213b8:	b538      	push	{r3, r4, r5, lr}
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   213ba:	6804      	ldr	r4, [r0, #0]
	switch (ep_evt->evt_type) {
   213bc:	7903      	ldrb	r3, [r0, #4]
   213be:	2b03      	cmp	r3, #3
   213c0:	d806      	bhi.n	213d0 <usbd_work_process_ep_events+0x18>
   213c2:	e8df f003 	tbb	[pc, r3]
   213c6:	0602      	.short	0x0602
   213c8:	100b      	.short	0x100b
		usbd_work_process_setup(ep_ctx);
   213ca:	4620      	mov	r0, r4
   213cc:	f7ff ffa8 	bl	21320 <usbd_work_process_setup>
}
   213d0:	bd38      	pop	{r3, r4, r5, pc}
		usbd_work_process_recvreq(ctx, ep_ctx);
   213d2:	4621      	mov	r1, r4
   213d4:	480f      	ldr	r0, [pc, #60]	; (21414 <usbd_work_process_ep_events+0x5c>)
   213d6:	f7ff ff39 	bl	2124c <usbd_work_process_recvreq>
		break;
   213da:	e7f9      	b.n	213d0 <usbd_work_process_ep_events+0x18>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   213dc:	6823      	ldr	r3, [r4, #0]
   213de:	2101      	movs	r1, #1
   213e0:	7a60      	ldrb	r0, [r4, #9]
   213e2:	4798      	blx	r3
		break;
   213e4:	e7f4      	b.n	213d0 <usbd_work_process_ep_events+0x18>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   213e6:	7aa3      	ldrb	r3, [r4, #10]
   213e8:	b90b      	cbnz	r3, 213ee <usbd_work_process_ep_events+0x36>
		    !ep_ctx->trans_zlp) {
   213ea:	7fe3      	ldrb	r3, [r4, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   213ec:	b123      	cbz	r3, 213f8 <usbd_work_process_ep_events+0x40>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   213ee:	6823      	ldr	r3, [r4, #0]
   213f0:	2102      	movs	r1, #2
   213f2:	7a60      	ldrb	r0, [r4, #9]
   213f4:	4798      	blx	r3
}
   213f6:	e7eb      	b.n	213d0 <usbd_work_process_ep_events+0x18>
	return z_impl_k_mutex_lock(mutex, timeout);
   213f8:	4d07      	ldr	r5, [pc, #28]	; (21418 <usbd_work_process_ep_events+0x60>)
   213fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   213fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21402:	4628      	mov	r0, r5
   21404:	f004 fe32 	bl	2606c <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
   21408:	f003 ff46 	bl	25298 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
   2140c:	4628      	mov	r0, r5
   2140e:	f004 feb1 	bl	26174 <z_impl_k_mutex_unlock>
   21412:	e7ec      	b.n	213ee <usbd_work_process_ep_events+0x36>
   21414:	20004080 	.word	0x20004080
   21418:	200040b8 	.word	0x200040b8

0002141c <usbd_work_process_pwr_events>:
{
   2141c:	b510      	push	{r4, lr}
	switch (pwr_evt->state) {
   2141e:	7803      	ldrb	r3, [r0, #0]
   21420:	2b04      	cmp	r3, #4
   21422:	d81c      	bhi.n	2145e <usbd_work_process_pwr_events+0x42>
   21424:	e8df f003 	tbb	[pc, r3]
   21428:	2c0c031c 	.word	0x2c0c031c
   2142c:	3b          	.byte	0x3b
   2142d:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   2142e:	f003 fbdb 	bl	24be8 <nrfx_usbd_is_enabled>
   21432:	b9a0      	cbnz	r0, 2145e <usbd_work_process_pwr_events+0x42>
			nrfx_usbd_enable();
   21434:	f003 fb64 	bl	24b00 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
   21438:	481f      	ldr	r0, [pc, #124]	; (214b8 <usbd_work_process_pwr_events+0x9c>)
   2143a:	f00d fea3 	bl	2f184 <hfxo_start>
   2143e:	e00e      	b.n	2145e <usbd_work_process_pwr_events+0x42>
		usbd_enable_endpoints(ctx);
   21440:	4c1d      	ldr	r4, [pc, #116]	; (214b8 <usbd_work_process_pwr_events+0x9c>)
   21442:	4620      	mov	r0, r4
   21444:	f00d fe6c 	bl	2f120 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
   21448:	2001      	movs	r0, #1
   2144a:	f003 fbb1 	bl	24bb0 <nrfx_usbd_start>
		ctx->ready = true;
   2144e:	2301      	movs	r3, #1
   21450:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   21454:	6823      	ldr	r3, [r4, #0]
   21456:	b113      	cbz	r3, 2145e <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   21458:	2100      	movs	r1, #0
   2145a:	2002      	movs	r0, #2
   2145c:	4798      	blx	r3
}
   2145e:	bd10      	pop	{r4, pc}
		ctx->ready = false;
   21460:	4c15      	ldr	r4, [pc, #84]	; (214b8 <usbd_work_process_pwr_events+0x9c>)
   21462:	2300      	movs	r3, #0
   21464:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   21468:	f004 f8be 	bl	255e8 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   2146c:	4620      	mov	r0, r4
   2146e:	f00d fe3d 	bl	2f0ec <hfxo_stop>
		if (ctx->status_cb) {
   21472:	6823      	ldr	r3, [r4, #0]
   21474:	2b00      	cmp	r3, #0
   21476:	d0f2      	beq.n	2145e <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   21478:	2100      	movs	r1, #0
   2147a:	2004      	movs	r0, #4
   2147c:	4798      	blx	r3
   2147e:	e7ee      	b.n	2145e <usbd_work_process_pwr_events+0x42>
	return get_usbd_ctx()->ready;
   21480:	4b0d      	ldr	r3, [pc, #52]	; (214b8 <usbd_work_process_pwr_events+0x9c>)
   21482:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
   21486:	2b00      	cmp	r3, #0
   21488:	d0e9      	beq.n	2145e <usbd_work_process_pwr_events+0x42>
			nrfx_usbd_suspend();
   2148a:	f003 fbb7 	bl	24bfc <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   2148e:	4b0a      	ldr	r3, [pc, #40]	; (214b8 <usbd_work_process_pwr_events+0x9c>)
   21490:	681b      	ldr	r3, [r3, #0]
   21492:	2b00      	cmp	r3, #0
   21494:	d0e3      	beq.n	2145e <usbd_work_process_pwr_events+0x42>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   21496:	2100      	movs	r1, #0
   21498:	2005      	movs	r0, #5
   2149a:	4798      	blx	r3
   2149c:	e7df      	b.n	2145e <usbd_work_process_pwr_events+0x42>
		if (ctx->status_cb && dev_ready()) {
   2149e:	4b06      	ldr	r3, [pc, #24]	; (214b8 <usbd_work_process_pwr_events+0x9c>)
   214a0:	681b      	ldr	r3, [r3, #0]
   214a2:	2b00      	cmp	r3, #0
   214a4:	d0db      	beq.n	2145e <usbd_work_process_pwr_events+0x42>
	return get_usbd_ctx()->ready;
   214a6:	4a04      	ldr	r2, [pc, #16]	; (214b8 <usbd_work_process_pwr_events+0x9c>)
   214a8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
   214ac:	2a00      	cmp	r2, #0
   214ae:	d0d6      	beq.n	2145e <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_RESUME, NULL);
   214b0:	2100      	movs	r1, #0
   214b2:	2006      	movs	r0, #6
   214b4:	4798      	blx	r3
}
   214b6:	e7d2      	b.n	2145e <usbd_work_process_pwr_events+0x42>
   214b8:	20004080 	.word	0x20004080

000214bc <usbd_reinit>:
{
   214bc:	b508      	push	{r3, lr}
	nrfx_power_usbevt_disable();
   214be:	f00f f8f0 	bl	306a2 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   214c2:	f004 f891 	bl	255e8 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   214c6:	f003 fb11 	bl	24aec <nrfx_usbd_uninit>
	usbd_evt_flush();
   214ca:	f7ff fc6f 	bl	20dac <usbd_evt_flush>
	ret = eps_ctx_init();
   214ce:	f7ff fc31 	bl	20d34 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   214d2:	f00f f8df 	bl	30694 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   214d6:	4802      	ldr	r0, [pc, #8]	; (214e0 <usbd_reinit+0x24>)
   214d8:	f003 fbd0 	bl	24c7c <nrfx_usbd_init>
}
   214dc:	bd08      	pop	{r3, pc}
   214de:	bf00      	nop
   214e0:	00021975 	.word	0x00021975

000214e4 <usbd_work_handler>:

/* Work handler */
static void usbd_work_handler(struct k_work *item)
{
   214e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   214e8:	b088      	sub	sp, #32
   214ea:	af00      	add	r7, sp, #0
   214ec:	4606      	mov	r6, r0
	struct nrf_usbd_ctx *ctx;
	struct usbd_event *ev;

	ctx = CONTAINER_OF(item, struct nrf_usbd_ctx, usb_work);

	while ((ev = usbd_evt_get()) != NULL) {
   214ee:	e04f      	b.n	21590 <usbd_work_handler+0xac>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   214f0:	1d21      	adds	r1, r4, #4
   214f2:	487e      	ldr	r0, [pc, #504]	; (216ec <usbd_work_handler+0x208>)
   214f4:	f00f fafc 	bl	30af0 <k_mem_slab_free>
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
			/* Drop non-power events when cable is detached. */
			usbd_evt_free(ev);
			continue;
   214f8:	e04a      	b.n	21590 <usbd_work_handler+0xac>
		}

		switch (ev->evt_type) {
		case USBD_EVT_EP:
			if (!ctx->attached) {
   214fa:	f816 3c04 	ldrb.w	r3, [r6, #-4]
   214fe:	2b00      	cmp	r3, #0
   21500:	d13e      	bne.n	21580 <usbd_work_handler+0x9c>
				LOG_ERR("not attached, EP 0x%02x event dropped",
   21502:	68a3      	ldr	r3, [r4, #8]
   21504:	f893 c009 	ldrb.w	ip, [r3, #9]
   21508:	46ea      	mov	sl, sp
   2150a:	b088      	sub	sp, #32
   2150c:	466b      	mov	r3, sp
   2150e:	f113 0210 	adds.w	r2, r3, #16
   21512:	d010      	beq.n	21536 <usbd_work_handler+0x52>
   21514:	210c      	movs	r1, #12
   21516:	b152      	cbz	r2, 2152e <usbd_work_handler+0x4a>
   21518:	4608      	mov	r0, r1
   2151a:	2904      	cmp	r1, #4
   2151c:	dd03      	ble.n	21526 <usbd_work_handler+0x42>
   2151e:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 216f0 <usbd_work_handler+0x20c>
   21522:	f8c3 e014 	str.w	lr, [r3, #20]
   21526:	2808      	cmp	r0, #8
   21528:	dd08      	ble.n	2153c <usbd_work_handler+0x58>
   2152a:	f8c3 c018 	str.w	ip, [r3, #24]
   2152e:	290b      	cmp	r1, #11
   21530:	dd4c      	ble.n	215cc <usbd_work_handler+0xe8>
   21532:	210c      	movs	r1, #12
   21534:	e004      	b.n	21540 <usbd_work_handler+0x5c>
   21536:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2153a:	e7ec      	b.n	21516 <usbd_work_handler+0x32>
   2153c:	f06f 011b 	mvn.w	r1, #27
   21540:	b13a      	cbz	r2, 21552 <usbd_work_handler+0x6e>
   21542:	2003      	movs	r0, #3
   21544:	7138      	strb	r0, [r7, #4]
   21546:	2000      	movs	r0, #0
   21548:	7178      	strb	r0, [r7, #5]
   2154a:	71b8      	strb	r0, [r7, #6]
   2154c:	71f8      	strb	r0, [r7, #7]
   2154e:	6878      	ldr	r0, [r7, #4]
   21550:	6118      	str	r0, [r3, #16]
   21552:	f36f 0800 	bfc	r8, #0, #1
   21556:	f36f 0841 	bfc	r8, #1, #1
   2155a:	f36f 0882 	bfc	r8, #2, #1
   2155e:	f36f 08c5 	bfc	r8, #3, #3
   21562:	2301      	movs	r3, #1
   21564:	f363 1888 	bfi	r8, r3, #6, #3
   21568:	f3c1 030a 	ubfx	r3, r1, #0, #11
   2156c:	f363 2853 	bfi	r8, r3, #9, #11
   21570:	f36f 581f 	bfc	r8, #20, #12
   21574:	2300      	movs	r3, #0
   21576:	4641      	mov	r1, r8
   21578:	485e      	ldr	r0, [pc, #376]	; (216f4 <usbd_work_handler+0x210>)
   2157a:	f7f2 fdbf 	bl	140fc <z_impl_z_log_msg_static_create>
   2157e:	46d5      	mov	sp, sl
					(uint32_t)ev->evt.ep_evt.ep->cfg.addr);
			}
			usbd_work_process_ep_events(&ev->evt.ep_evt);
   21580:	f104 0008 	add.w	r0, r4, #8
   21584:	f7ff ff18 	bl	213b8 <usbd_work_process_ep_events>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   21588:	1d21      	adds	r1, r4, #4
   2158a:	4858      	ldr	r0, [pc, #352]	; (216ec <usbd_work_handler+0x208>)
   2158c:	f00f fab0 	bl	30af0 <k_mem_slab_free>
	while ((ev = usbd_evt_get()) != NULL) {
   21590:	f7ff fc02 	bl	20d98 <usbd_evt_get>
   21594:	4604      	mov	r4, r0
   21596:	2800      	cmp	r0, #0
   21598:	f000 80a3 	beq.w	216e2 <usbd_work_handler+0x1fe>
	return get_usbd_ctx()->ready;
   2159c:	4b56      	ldr	r3, [pc, #344]	; (216f8 <usbd_work_handler+0x214>)
   2159e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   215a2:	b913      	cbnz	r3, 215aa <usbd_work_handler+0xc6>
   215a4:	7c23      	ldrb	r3, [r4, #16]
   215a6:	2b00      	cmp	r3, #0
   215a8:	d1a2      	bne.n	214f0 <usbd_work_handler+0xc>
		switch (ev->evt_type) {
   215aa:	7c23      	ldrb	r3, [r4, #16]
   215ac:	2b04      	cmp	r3, #4
   215ae:	d858      	bhi.n	21662 <usbd_work_handler+0x17e>
   215b0:	a201      	add	r2, pc, #4	; (adr r2, 215b8 <usbd_work_handler+0xd4>)
   215b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   215b6:	bf00      	nop
   215b8:	000215d3 	.word	0x000215d3
   215bc:	000214fb 	.word	0x000214fb
   215c0:	000215dd 	.word	0x000215dd
   215c4:	00021609 	.word	0x00021609
   215c8:	0002161d 	.word	0x0002161d
				LOG_ERR("not attached, EP 0x%02x event dropped",
   215cc:	f06f 011b 	mvn.w	r1, #27
   215d0:	e7b6      	b.n	21540 <usbd_work_handler+0x5c>
			break;
		case USBD_EVT_POWER:
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
   215d2:	f104 0008 	add.w	r0, r4, #8
   215d6:	f7ff ff21 	bl	2141c <usbd_work_process_pwr_events>
			break;
   215da:	e7d5      	b.n	21588 <usbd_work_handler+0xa4>
		case USBD_EVT_RESET:
			LOG_DBG("USBD reset event");
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   215dc:	f106 0a10 	add.w	sl, r6, #16
	return z_impl_k_mutex_lock(mutex, timeout);
   215e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   215e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   215e8:	4650      	mov	r0, sl
   215ea:	f004 fd3f 	bl	2606c <z_impl_k_mutex_lock>
			eps_ctx_init();
   215ee:	f7ff fba1 	bl	20d34 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
   215f2:	4650      	mov	r0, sl
   215f4:	f004 fdbe 	bl	26174 <z_impl_k_mutex_unlock>
			k_mutex_unlock(&ctx->drv_lock);

			if (ctx->status_cb) {
   215f8:	f856 3c28 	ldr.w	r3, [r6, #-40]
   215fc:	2b00      	cmp	r3, #0
   215fe:	d0c3      	beq.n	21588 <usbd_work_handler+0xa4>
				ctx->status_cb(USB_DC_RESET, NULL);
   21600:	2100      	movs	r1, #0
   21602:	2001      	movs	r0, #1
   21604:	4798      	blx	r3
   21606:	e7bf      	b.n	21588 <usbd_work_handler+0xa4>
			}
			break;
		case USBD_EVT_SOF:
			usbd_sof_trigger_iso_read();
   21608:	f7ff fcca 	bl	20fa0 <usbd_sof_trigger_iso_read>

			if (ctx->status_cb) {
   2160c:	f856 3c28 	ldr.w	r3, [r6, #-40]
   21610:	2b00      	cmp	r3, #0
   21612:	d0b9      	beq.n	21588 <usbd_work_handler+0xa4>
				ctx->status_cb(USB_DC_SOF, NULL);
   21614:	2100      	movs	r1, #0
   21616:	200a      	movs	r0, #10
   21618:	4798      	blx	r3
   2161a:	e7b5      	b.n	21588 <usbd_work_handler+0xa4>
		case USBD_EVT_REINIT: {
				/*
				 * Reinitialize the peripheral after queue
				 * overflow.
				 */
				LOG_ERR("USBD event queue full!");
   2161c:	4b37      	ldr	r3, [pc, #220]	; (216fc <usbd_work_handler+0x218>)
   2161e:	61fb      	str	r3, [r7, #28]
   21620:	2302      	movs	r3, #2
   21622:	713b      	strb	r3, [r7, #4]
   21624:	2300      	movs	r3, #0
   21626:	717b      	strb	r3, [r7, #5]
   21628:	71bb      	strb	r3, [r7, #6]
   2162a:	71fb      	strb	r3, [r7, #7]
   2162c:	687a      	ldr	r2, [r7, #4]
   2162e:	61ba      	str	r2, [r7, #24]
   21630:	f363 0500 	bfi	r5, r3, #0, #1
   21634:	f363 0541 	bfi	r5, r3, #1, #1
   21638:	f363 0582 	bfi	r5, r3, #2, #1
   2163c:	f363 05c5 	bfi	r5, r3, #3, #3
   21640:	2201      	movs	r2, #1
   21642:	f362 1588 	bfi	r5, r2, #6, #3
   21646:	2208      	movs	r2, #8
   21648:	f362 2553 	bfi	r5, r2, #9, #11
   2164c:	f363 551f 	bfi	r5, r3, #20, #12
   21650:	f107 0218 	add.w	r2, r7, #24
   21654:	4629      	mov	r1, r5
   21656:	4827      	ldr	r0, [pc, #156]	; (216f4 <usbd_work_handler+0x210>)
   21658:	f7f2 fd50 	bl	140fc <z_impl_z_log_msg_static_create>
				usbd_reinit();
   2165c:	f7ff ff2e 	bl	214bc <usbd_reinit>
				break;
   21660:	e792      	b.n	21588 <usbd_work_handler+0xa4>
			}
		default:
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   21662:	46ea      	mov	sl, sp
   21664:	b088      	sub	sp, #32
   21666:	4669      	mov	r1, sp
   21668:	f111 0210 	adds.w	r2, r1, #16
   2166c:	d131      	bne.n	216d2 <usbd_work_handler+0x1ee>
   2166e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21672:	b152      	cbz	r2, 2168a <usbd_work_handler+0x1a6>
   21674:	4684      	mov	ip, r0
   21676:	2804      	cmp	r0, #4
   21678:	dd03      	ble.n	21682 <usbd_work_handler+0x19e>
   2167a:	f8df e084 	ldr.w	lr, [pc, #132]	; 21700 <usbd_work_handler+0x21c>
   2167e:	f8c1 e014 	str.w	lr, [r1, #20]
   21682:	f1bc 0f08 	cmp.w	ip, #8
   21686:	dd26      	ble.n	216d6 <usbd_work_handler+0x1f2>
   21688:	618b      	str	r3, [r1, #24]
   2168a:	280b      	cmp	r0, #11
   2168c:	dd26      	ble.n	216dc <usbd_work_handler+0x1f8>
   2168e:	230c      	movs	r3, #12
   21690:	b13a      	cbz	r2, 216a2 <usbd_work_handler+0x1be>
   21692:	2003      	movs	r0, #3
   21694:	7138      	strb	r0, [r7, #4]
   21696:	2000      	movs	r0, #0
   21698:	7178      	strb	r0, [r7, #5]
   2169a:	71b8      	strb	r0, [r7, #6]
   2169c:	71f8      	strb	r0, [r7, #7]
   2169e:	6878      	ldr	r0, [r7, #4]
   216a0:	6108      	str	r0, [r1, #16]
   216a2:	f36f 0900 	bfc	r9, #0, #1
   216a6:	f36f 0941 	bfc	r9, #1, #1
   216aa:	f36f 0982 	bfc	r9, #2, #1
   216ae:	f36f 09c5 	bfc	r9, #3, #3
   216b2:	2101      	movs	r1, #1
   216b4:	f361 1988 	bfi	r9, r1, #6, #3
   216b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
   216bc:	f363 2953 	bfi	r9, r3, #9, #11
   216c0:	f36f 591f 	bfc	r9, #20, #12
   216c4:	2300      	movs	r3, #0
   216c6:	4649      	mov	r1, r9
   216c8:	480a      	ldr	r0, [pc, #40]	; (216f4 <usbd_work_handler+0x210>)
   216ca:	f7f2 fd17 	bl	140fc <z_impl_z_log_msg_static_create>
   216ce:	46d5      	mov	sp, sl
   216d0:	e75a      	b.n	21588 <usbd_work_handler+0xa4>
   216d2:	200c      	movs	r0, #12
   216d4:	e7cd      	b.n	21672 <usbd_work_handler+0x18e>
   216d6:	f06f 031b 	mvn.w	r3, #27
   216da:	e7d9      	b.n	21690 <usbd_work_handler+0x1ac>
   216dc:	f06f 031b 	mvn.w	r3, #27
   216e0:	e7d6      	b.n	21690 <usbd_work_handler+0x1ac>
			break;
		}
		usbd_evt_free(ev);
	}
}
   216e2:	3720      	adds	r7, #32
   216e4:	46bd      	mov	sp, r7
   216e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   216ea:	bf00      	nop
   216ec:	20000994 	.word	0x20000994
   216f0:	00034adc 	.word	0x00034adc
   216f4:	00031ddc 	.word	0x00031ddc
   216f8:	20004080 	.word	0x20004080
   216fc:	00034b04 	.word	0x00034b04
   21700:	00034b1c 	.word	0x00034b1c

00021704 <usbd_event_transfer_ctrl>:
{
   21704:	b5f0      	push	{r4, r5, r6, r7, lr}
   21706:	b083      	sub	sp, #12
   21708:	af00      	add	r7, sp, #0
   2170a:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   2170c:	7886      	ldrb	r6, [r0, #2]
   2170e:	4630      	mov	r0, r6
   21710:	f7ff fae6 	bl	20ce0 <endpoint_ctx>
   21714:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   21716:	f016 0f80 	tst.w	r6, #128	; 0x80
   2171a:	d118      	bne.n	2174e <usbd_event_transfer_ctrl+0x4a>
		switch (p_event->data.eptransfer.status) {
   2171c:	78e3      	ldrb	r3, [r4, #3]
   2171e:	2b00      	cmp	r3, #0
   21720:	d06f      	beq.n	21802 <usbd_event_transfer_ctrl+0xfe>
   21722:	2b01      	cmp	r3, #1
   21724:	f040 80d6 	bne.w	218d4 <usbd_event_transfer_ctrl+0x1d0>
			struct usbd_event *ev = usbd_evt_alloc();
   21728:	f7ff fb50 	bl	20dcc <usbd_evt_alloc>
			if (!ev) {
   2172c:	4601      	mov	r1, r0
   2172e:	2800      	cmp	r0, #0
   21730:	f000 8108 	beq.w	21944 <usbd_event_transfer_ctrl+0x240>
			ep_ctx->read_pending = true;
   21734:	2301      	movs	r3, #1
   21736:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   21738:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2173a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   2173c:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   2173e:	4886      	ldr	r0, [pc, #536]	; (21958 <usbd_event_transfer_ctrl+0x254>)
   21740:	f00f fb13 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   21744:	4985      	ldr	r1, [pc, #532]	; (2195c <usbd_event_transfer_ctrl+0x258>)
   21746:	4886      	ldr	r0, [pc, #536]	; (21960 <usbd_event_transfer_ctrl+0x25c>)
   21748:	f00f fc31 	bl	30fae <k_work_submit_to_queue>
}
   2174c:	e0fa      	b.n	21944 <usbd_event_transfer_ctrl+0x240>
		switch (p_event->data.eptransfer.status) {
   2174e:	78e3      	ldrb	r3, [r4, #3]
   21750:	2b00      	cmp	r3, #0
   21752:	d03b      	beq.n	217cc <usbd_event_transfer_ctrl+0xc8>
   21754:	2b03      	cmp	r3, #3
   21756:	f000 80f5 	beq.w	21944 <usbd_event_transfer_ctrl+0x240>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   2175a:	466c      	mov	r4, sp
   2175c:	b088      	sub	sp, #32
   2175e:	4669      	mov	r1, sp
   21760:	f111 0210 	adds.w	r2, r1, #16
   21764:	d047      	beq.n	217f6 <usbd_event_transfer_ctrl+0xf2>
   21766:	2010      	movs	r0, #16
   21768:	b162      	cbz	r2, 21784 <usbd_event_transfer_ctrl+0x80>
   2176a:	4605      	mov	r5, r0
   2176c:	2804      	cmp	r0, #4
   2176e:	dd03      	ble.n	21778 <usbd_event_transfer_ctrl+0x74>
   21770:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 21964 <usbd_event_transfer_ctrl+0x260>
   21774:	f8c1 c014 	str.w	ip, [r1, #20]
   21778:	2d08      	cmp	r5, #8
   2177a:	dd00      	ble.n	2177e <usbd_event_transfer_ctrl+0x7a>
   2177c:	618b      	str	r3, [r1, #24]
   2177e:	2d0c      	cmp	r5, #12
   21780:	dd00      	ble.n	21784 <usbd_event_transfer_ctrl+0x80>
   21782:	61ce      	str	r6, [r1, #28]
   21784:	280f      	cmp	r0, #15
   21786:	dd39      	ble.n	217fc <usbd_event_transfer_ctrl+0xf8>
   21788:	2310      	movs	r3, #16
   2178a:	b13a      	cbz	r2, 2179c <usbd_event_transfer_ctrl+0x98>
   2178c:	2004      	movs	r0, #4
   2178e:	7138      	strb	r0, [r7, #4]
   21790:	2000      	movs	r0, #0
   21792:	7178      	strb	r0, [r7, #5]
   21794:	71b8      	strb	r0, [r7, #6]
   21796:	71f8      	strb	r0, [r7, #7]
   21798:	6878      	ldr	r0, [r7, #4]
   2179a:	6108      	str	r0, [r1, #16]
   2179c:	2100      	movs	r1, #0
   2179e:	f36f 0100 	bfc	r1, #0, #1
   217a2:	f36f 0141 	bfc	r1, #1, #1
   217a6:	f36f 0182 	bfc	r1, #2, #1
   217aa:	f36f 01c5 	bfc	r1, #3, #3
   217ae:	2001      	movs	r0, #1
   217b0:	f360 1188 	bfi	r1, r0, #6, #3
   217b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   217b8:	f363 2153 	bfi	r1, r3, #9, #11
   217bc:	f36f 511f 	bfc	r1, #20, #12
   217c0:	2300      	movs	r3, #0
   217c2:	4869      	ldr	r0, [pc, #420]	; (21968 <usbd_event_transfer_ctrl+0x264>)
   217c4:	f7f2 fc9a 	bl	140fc <z_impl_z_log_msg_static_create>
   217c8:	46a5      	mov	sp, r4
   217ca:	e0bb      	b.n	21944 <usbd_event_transfer_ctrl+0x240>
			struct usbd_event *ev = usbd_evt_alloc();
   217cc:	f7ff fafe 	bl	20dcc <usbd_evt_alloc>
			if (!ev) {
   217d0:	4601      	mov	r1, r0
   217d2:	2800      	cmp	r0, #0
   217d4:	f000 80b6 	beq.w	21944 <usbd_event_transfer_ctrl+0x240>
			ep_ctx->write_in_progress = false;
   217d8:	2300      	movs	r3, #0
   217da:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   217dc:	2301      	movs	r3, #1
   217de:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   217e0:	2303      	movs	r3, #3
   217e2:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   217e4:	6085      	str	r5, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   217e6:	485c      	ldr	r0, [pc, #368]	; (21958 <usbd_event_transfer_ctrl+0x254>)
   217e8:	f00f fabf 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   217ec:	495b      	ldr	r1, [pc, #364]	; (2195c <usbd_event_transfer_ctrl+0x258>)
   217ee:	485c      	ldr	r0, [pc, #368]	; (21960 <usbd_event_transfer_ctrl+0x25c>)
   217f0:	f00f fbdd 	bl	30fae <k_work_submit_to_queue>
}
   217f4:	e0a6      	b.n	21944 <usbd_event_transfer_ctrl+0x240>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   217f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   217fa:	e7b5      	b.n	21768 <usbd_event_transfer_ctrl+0x64>
   217fc:	f06f 031b 	mvn.w	r3, #27
   21800:	e7c3      	b.n	2178a <usbd_event_transfer_ctrl+0x86>
			struct usbd_event *ev = usbd_evt_alloc();
   21802:	f7ff fae3 	bl	20dcc <usbd_evt_alloc>
			if (!ev) {
   21806:	4606      	mov	r6, r0
   21808:	2800      	cmp	r0, #0
   2180a:	f000 809b 	beq.w	21944 <usbd_event_transfer_ctrl+0x240>
			ev->evt_type = USBD_EVT_EP;
   2180e:	2301      	movs	r3, #1
   21810:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   21812:	2302      	movs	r3, #2
   21814:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   21816:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   21818:	f105 010c 	add.w	r1, r5, #12
   2181c:	78a0      	ldrb	r0, [r4, #2]
   2181e:	f003 fb19 	bl	24e54 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   21822:	4684      	mov	ip, r0
   21824:	b3b0      	cbz	r0, 21894 <usbd_event_transfer_ctrl+0x190>
				LOG_ERR("_ep_status_get failed! Code: %d",
   21826:	466c      	mov	r4, sp
   21828:	b088      	sub	sp, #32
   2182a:	466b      	mov	r3, sp
   2182c:	f113 0210 	adds.w	r2, r3, #16
   21830:	d043      	beq.n	218ba <usbd_event_transfer_ctrl+0x1b6>
   21832:	210c      	movs	r1, #12
   21834:	b152      	cbz	r2, 2184c <usbd_event_transfer_ctrl+0x148>
   21836:	4608      	mov	r0, r1
   21838:	2904      	cmp	r1, #4
   2183a:	dd03      	ble.n	21844 <usbd_event_transfer_ctrl+0x140>
   2183c:	f8df e12c 	ldr.w	lr, [pc, #300]	; 2196c <usbd_event_transfer_ctrl+0x268>
   21840:	f8c3 e014 	str.w	lr, [r3, #20]
   21844:	2808      	cmp	r0, #8
   21846:	dd01      	ble.n	2184c <usbd_event_transfer_ctrl+0x148>
   21848:	f8c3 c018 	str.w	ip, [r3, #24]
   2184c:	290b      	cmp	r1, #11
   2184e:	dd37      	ble.n	218c0 <usbd_event_transfer_ctrl+0x1bc>
   21850:	f04f 0c0c 	mov.w	ip, #12
   21854:	b13a      	cbz	r2, 21866 <usbd_event_transfer_ctrl+0x162>
   21856:	2103      	movs	r1, #3
   21858:	7139      	strb	r1, [r7, #4]
   2185a:	2100      	movs	r1, #0
   2185c:	7179      	strb	r1, [r7, #5]
   2185e:	71b9      	strb	r1, [r7, #6]
   21860:	71f9      	strb	r1, [r7, #7]
   21862:	6878      	ldr	r0, [r7, #4]
   21864:	6118      	str	r0, [r3, #16]
   21866:	2100      	movs	r1, #0
   21868:	f36f 0100 	bfc	r1, #0, #1
   2186c:	f36f 0141 	bfc	r1, #1, #1
   21870:	f36f 0182 	bfc	r1, #2, #1
   21874:	f36f 01c5 	bfc	r1, #3, #3
   21878:	2301      	movs	r3, #1
   2187a:	f363 1188 	bfi	r1, r3, #6, #3
   2187e:	f3cc 030a 	ubfx	r3, ip, #0, #11
   21882:	f363 2153 	bfi	r1, r3, #9, #11
   21886:	f36f 511f 	bfc	r1, #20, #12
   2188a:	2300      	movs	r3, #0
   2188c:	4836      	ldr	r0, [pc, #216]	; (21968 <usbd_event_transfer_ctrl+0x264>)
   2188e:	f7f2 fc35 	bl	140fc <z_impl_z_log_msg_static_create>
   21892:	46a5      	mov	sp, r4
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   21894:	4b36      	ldr	r3, [pc, #216]	; (21970 <usbd_event_transfer_ctrl+0x26c>)
   21896:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
   2189a:	68ea      	ldr	r2, [r5, #12]
   2189c:	4293      	cmp	r3, r2
   2189e:	d812      	bhi.n	218c6 <usbd_event_transfer_ctrl+0x1c2>
				ctx->ctrl_read_len = 0U;
   218a0:	4b33      	ldr	r3, [pc, #204]	; (21970 <usbd_event_transfer_ctrl+0x26c>)
   218a2:	2200      	movs	r2, #0
   218a4:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
   218a8:	4631      	mov	r1, r6
   218aa:	482b      	ldr	r0, [pc, #172]	; (21958 <usbd_event_transfer_ctrl+0x254>)
   218ac:	f00f fa5d 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   218b0:	492a      	ldr	r1, [pc, #168]	; (2195c <usbd_event_transfer_ctrl+0x258>)
   218b2:	482b      	ldr	r0, [pc, #172]	; (21960 <usbd_event_transfer_ctrl+0x25c>)
   218b4:	f00f fb7b 	bl	30fae <k_work_submit_to_queue>
}
   218b8:	e044      	b.n	21944 <usbd_event_transfer_ctrl+0x240>
				LOG_ERR("_ep_status_get failed! Code: %d",
   218ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   218be:	e7b9      	b.n	21834 <usbd_event_transfer_ctrl+0x130>
   218c0:	f06f 0c1b 	mvn.w	ip, #27
   218c4:	e7c6      	b.n	21854 <usbd_event_transfer_ctrl+0x150>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   218c6:	1a9b      	subs	r3, r3, r2
   218c8:	4a29      	ldr	r2, [pc, #164]	; (21970 <usbd_event_transfer_ctrl+0x26c>)
   218ca:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   218ce:	f003 fc9d 	bl	2520c <nrfx_usbd_setup_data_clear>
   218d2:	e7e9      	b.n	218a8 <usbd_event_transfer_ctrl+0x1a4>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   218d4:	466c      	mov	r4, sp
   218d6:	b088      	sub	sp, #32
   218d8:	4669      	mov	r1, sp
   218da:	f111 0210 	adds.w	r2, r1, #16
   218de:	d034      	beq.n	2194a <usbd_event_transfer_ctrl+0x246>
   218e0:	2010      	movs	r0, #16
   218e2:	b162      	cbz	r2, 218fe <usbd_event_transfer_ctrl+0x1fa>
   218e4:	4605      	mov	r5, r0
   218e6:	2804      	cmp	r0, #4
   218e8:	dd03      	ble.n	218f2 <usbd_event_transfer_ctrl+0x1ee>
   218ea:	f8df c078 	ldr.w	ip, [pc, #120]	; 21964 <usbd_event_transfer_ctrl+0x260>
   218ee:	f8c1 c014 	str.w	ip, [r1, #20]
   218f2:	2d08      	cmp	r5, #8
   218f4:	dd00      	ble.n	218f8 <usbd_event_transfer_ctrl+0x1f4>
   218f6:	618b      	str	r3, [r1, #24]
   218f8:	2d0c      	cmp	r5, #12
   218fa:	dd00      	ble.n	218fe <usbd_event_transfer_ctrl+0x1fa>
   218fc:	61ce      	str	r6, [r1, #28]
   218fe:	280f      	cmp	r0, #15
   21900:	dd26      	ble.n	21950 <usbd_event_transfer_ctrl+0x24c>
   21902:	2310      	movs	r3, #16
   21904:	b13a      	cbz	r2, 21916 <usbd_event_transfer_ctrl+0x212>
   21906:	2004      	movs	r0, #4
   21908:	7138      	strb	r0, [r7, #4]
   2190a:	2000      	movs	r0, #0
   2190c:	7178      	strb	r0, [r7, #5]
   2190e:	71b8      	strb	r0, [r7, #6]
   21910:	71f8      	strb	r0, [r7, #7]
   21912:	6878      	ldr	r0, [r7, #4]
   21914:	6108      	str	r0, [r1, #16]
   21916:	2100      	movs	r1, #0
   21918:	f36f 0100 	bfc	r1, #0, #1
   2191c:	f36f 0141 	bfc	r1, #1, #1
   21920:	f36f 0182 	bfc	r1, #2, #1
   21924:	f36f 01c5 	bfc	r1, #3, #3
   21928:	2001      	movs	r0, #1
   2192a:	f360 1188 	bfi	r1, r0, #6, #3
   2192e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   21932:	f363 2153 	bfi	r1, r3, #9, #11
   21936:	f36f 511f 	bfc	r1, #20, #12
   2193a:	2300      	movs	r3, #0
   2193c:	480a      	ldr	r0, [pc, #40]	; (21968 <usbd_event_transfer_ctrl+0x264>)
   2193e:	f7f2 fbdd 	bl	140fc <z_impl_z_log_msg_static_create>
   21942:	46a5      	mov	sp, r4
}
   21944:	370c      	adds	r7, #12
   21946:	46bd      	mov	sp, r7
   21948:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   2194a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2194e:	e7c8      	b.n	218e2 <usbd_event_transfer_ctrl+0x1de>
   21950:	f06f 031b 	mvn.w	r3, #27
   21954:	e7d6      	b.n	21904 <usbd_event_transfer_ctrl+0x200>
   21956:	bf00      	nop
   21958:	20000b48 	.word	0x20000b48
   2195c:	200040a8 	.word	0x200040a8
   21960:	20002368 	.word	0x20002368
   21964:	00034a88 	.word	0x00034a88
   21968:	00031ddc 	.word	0x00031ddc
   2196c:	00034b34 	.word	0x00034b34
   21970:	20004080 	.word	0x20004080

00021974 <usbd_event_handler>:
{
   21974:	b510      	push	{r4, lr}
   21976:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
   21978:	2300      	movs	r3, #0
   2197a:	9303      	str	r3, [sp, #12]
   2197c:	9304      	str	r3, [sp, #16]
   2197e:	9305      	str	r3, [sp, #20]
   21980:	9306      	str	r3, [sp, #24]
   21982:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
   21984:	7803      	ldrb	r3, [r0, #0]
   21986:	3b01      	subs	r3, #1
   21988:	2b05      	cmp	r3, #5
   2198a:	d81c      	bhi.n	219c6 <usbd_event_handler+0x52>
   2198c:	e8df f003 	tbb	[pc, r3]
   21990:	211d0325 	.word	0x211d0325
   21994:	2943      	.short	0x2943
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   21996:	2303      	movs	r3, #3
   21998:	f88d 3014 	strb.w	r3, [sp, #20]
		ev = usbd_evt_alloc();
   2199c:	f7ff fa16 	bl	20dcc <usbd_evt_alloc>
		if (!ev) {
   219a0:	4603      	mov	r3, r0
   219a2:	b180      	cbz	r0, 219c6 <usbd_event_handler+0x52>
		ev->evt_type = evt.evt_type;
   219a4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   219a8:	7402      	strb	r2, [r0, #16]
		ev->evt = evt.evt;
   219aa:	f100 0208 	add.w	r2, r0, #8
   219ae:	a905      	add	r1, sp, #20
   219b0:	c903      	ldmia	r1, {r0, r1}
   219b2:	e882 0003 	stmia.w	r2, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
   219b6:	4619      	mov	r1, r3
   219b8:	4821      	ldr	r0, [pc, #132]	; (21a40 <usbd_event_handler+0xcc>)
   219ba:	f00f f9d6 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   219be:	4921      	ldr	r1, [pc, #132]	; (21a44 <usbd_event_handler+0xd0>)
   219c0:	4821      	ldr	r0, [pc, #132]	; (21a48 <usbd_event_handler+0xd4>)
   219c2:	f00f faf4 	bl	30fae <k_work_submit_to_queue>
}
   219c6:	b008      	add	sp, #32
   219c8:	bd10      	pop	{r4, pc}
		evt.evt.pwr_evt.state = USBD_RESUMED;
   219ca:	2304      	movs	r3, #4
   219cc:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   219d0:	e7e4      	b.n	2199c <usbd_event_handler+0x28>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   219d2:	2304      	movs	r3, #4
   219d4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   219d8:	e7e0      	b.n	2199c <usbd_event_handler+0x28>
		evt.evt_type = USBD_EVT_RESET;
   219da:	2302      	movs	r3, #2
   219dc:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
   219e0:	e7dc      	b.n	2199c <usbd_event_handler+0x28>
   219e2:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   219e4:	7880      	ldrb	r0, [r0, #2]
   219e6:	f7ff f97b 	bl	20ce0 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   219ea:	7a83      	ldrb	r3, [r0, #10]
   219ec:	2b01      	cmp	r3, #1
   219ee:	d00e      	beq.n	21a0e <usbd_event_handler+0x9a>
   219f0:	d805      	bhi.n	219fe <usbd_event_handler+0x8a>
   219f2:	2b00      	cmp	r3, #0
   219f4:	d1e7      	bne.n	219c6 <usbd_event_handler+0x52>
			usbd_event_transfer_ctrl(p_event);
   219f6:	4620      	mov	r0, r4
   219f8:	f7ff fe84 	bl	21704 <usbd_event_transfer_ctrl>
	if (put_evt) {
   219fc:	e7e3      	b.n	219c6 <usbd_event_handler+0x52>
   219fe:	3b02      	subs	r3, #2
   21a00:	b2db      	uxtb	r3, r3
   21a02:	2b01      	cmp	r3, #1
   21a04:	d8df      	bhi.n	219c6 <usbd_event_handler+0x52>
			usbd_event_transfer_data(p_event);
   21a06:	4620      	mov	r0, r4
   21a08:	f7ff fb3c 	bl	21084 <usbd_event_transfer_data>
	if (put_evt) {
   21a0c:	e7db      	b.n	219c6 <usbd_event_handler+0x52>
			usbd_event_transfer_data(p_event);
   21a0e:	4620      	mov	r0, r4
   21a10:	f7ff fb38 	bl	21084 <usbd_event_transfer_data>
	if (put_evt) {
   21a14:	e7d7      	b.n	219c6 <usbd_event_handler+0x52>
		nrfx_usbd_setup_get(&drv_setup);
   21a16:	a801      	add	r0, sp, #4
   21a18:	f003 fbcc 	bl	251b4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   21a1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   21a20:	2b05      	cmp	r3, #5
   21a22:	d007      	beq.n	21a34 <usbd_event_handler+0xc0>
				endpoint_ctx(NRF_USBD_EPOUT(0));
   21a24:	2000      	movs	r0, #0
   21a26:	f7ff f95b 	bl	20ce0 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
   21a2a:	2301      	movs	r3, #1
   21a2c:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
   21a30:	9005      	str	r0, [sp, #20]
	if (put_evt) {
   21a32:	e7b3      	b.n	2199c <usbd_event_handler+0x28>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   21a34:	f89d 3004 	ldrb.w	r3, [sp, #4]
   21a38:	f013 0f60 	tst.w	r3, #96	; 0x60
   21a3c:	d0c3      	beq.n	219c6 <usbd_event_handler+0x52>
   21a3e:	e7f1      	b.n	21a24 <usbd_event_handler+0xb0>
   21a40:	20000b48 	.word	0x20000b48
   21a44:	200040a8 	.word	0x200040a8
   21a48:	20002368 	.word	0x20002368

00021a4c <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
   21a4c:	b530      	push	{r4, r5, lr}
   21a4e:	b083      	sub	sp, #12

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
   21a50:	4812      	ldr	r0, [pc, #72]	; (21a9c <usb_init+0x50>)
   21a52:	f003 f913 	bl	24c7c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   21a56:	4b12      	ldr	r3, [pc, #72]	; (21aa0 <usb_init+0x54>)
   21a58:	4298      	cmp	r0, r3
   21a5a:	d11b      	bne.n	21a94 <usb_init+0x48>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   21a5c:	4811      	ldr	r0, [pc, #68]	; (21aa4 <usb_init+0x58>)
   21a5e:	f002 fcbf 	bl	243e0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
   21a62:	4811      	ldr	r0, [pc, #68]	; (21aa8 <usb_init+0x5c>)
   21a64:	f002 fcec 	bl	24440 <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
   21a68:	4d10      	ldr	r5, [pc, #64]	; (21aac <usb_init+0x60>)
   21a6a:	2400      	movs	r4, #0
   21a6c:	9400      	str	r4, [sp, #0]
   21a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21a76:	490e      	ldr	r1, [pc, #56]	; (21ab0 <usb_init+0x64>)
   21a78:	4628      	mov	r0, r5
   21a7a:	f004 fda5 	bl	265c8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   21a7e:	490d      	ldr	r1, [pc, #52]	; (21ab4 <usb_init+0x68>)
   21a80:	4628      	mov	r0, r5
   21a82:	f004 fa07 	bl	25e94 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
   21a86:	490c      	ldr	r1, [pc, #48]	; (21ab8 <usb_init+0x6c>)
   21a88:	480c      	ldr	r0, [pc, #48]	; (21abc <usb_init+0x70>)
   21a8a:	f00f fa74 	bl	30f76 <k_work_init>

	return 0;
   21a8e:	4620      	mov	r0, r4
}
   21a90:	b003      	add	sp, #12
   21a92:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   21a94:	f06f 0004 	mvn.w	r0, #4
   21a98:	e7fa      	b.n	21a90 <usb_init+0x44>
   21a9a:	bf00      	nop
   21a9c:	00021975 	.word	0x00021975
   21aa0:	0bad0000 	.word	0x0bad0000
   21aa4:	00034c44 	.word	0x00034c44
   21aa8:	00034c40 	.word	0x00034c40
   21aac:	20002368 	.word	0x20002368
   21ab0:	20007500 	.word	0x20007500
   21ab4:	00034b54 	.word	0x00034b54
   21ab8:	000214e5 	.word	0x000214e5
   21abc:	200040a8 	.word	0x200040a8

00021ac0 <usb_dc_attach>:
{
   21ac0:	b510      	push	{r4, lr}
	if (ctx->attached) {
   21ac2:	4b18      	ldr	r3, [pc, #96]	; (21b24 <usb_dc_attach+0x64>)
   21ac4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   21ac8:	b113      	cbz	r3, 21ad0 <usb_dc_attach+0x10>
		return 0;
   21aca:	2400      	movs	r4, #0
}
   21acc:	4620      	mov	r0, r4
   21ace:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
   21ad0:	4c15      	ldr	r4, [pc, #84]	; (21b28 <usb_dc_attach+0x68>)
   21ad2:	4620      	mov	r0, r4
   21ad4:	f00f f8a3 	bl	30c1e <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   21ad8:	2000      	movs	r0, #0
   21ada:	f000 fdcd 	bl	22678 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
   21ade:	f844 0c1c 	str.w	r0, [r4, #-28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21ae2:	2200      	movs	r2, #0
   21ae4:	2101      	movs	r1, #1
   21ae6:	2027      	movs	r0, #39	; 0x27
   21ae8:	f00a fdae 	bl	2c648 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
   21aec:	f00e fdd2 	bl	30694 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   21af0:	f7ff f920 	bl	20d34 <eps_ctx_init>
	if (ret == 0) {
   21af4:	4604      	mov	r4, r0
   21af6:	b918      	cbnz	r0, 21b00 <usb_dc_attach+0x40>
		ctx->attached = true;
   21af8:	4b0a      	ldr	r3, [pc, #40]	; (21b24 <usb_dc_attach+0x64>)
   21afa:	2201      	movs	r2, #1
   21afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   21b00:	4b0a      	ldr	r3, [pc, #40]	; (21b2c <usb_dc_attach+0x6c>)
   21b02:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   21b04:	b11b      	cbz	r3, 21b0e <usb_dc_attach+0x4e>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   21b06:	490a      	ldr	r1, [pc, #40]	; (21b30 <usb_dc_attach+0x70>)
   21b08:	480a      	ldr	r0, [pc, #40]	; (21b34 <usb_dc_attach+0x74>)
   21b0a:	f00f fa50 	bl	30fae <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   21b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21b12:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   21b16:	f013 0f01 	tst.w	r3, #1
   21b1a:	d0d7      	beq.n	21acc <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   21b1c:	2000      	movs	r0, #0
   21b1e:	f7ff f9ed 	bl	20efc <usb_dc_power_event_handler>
   21b22:	e7d3      	b.n	21acc <usb_dc_attach+0xc>
   21b24:	20004080 	.word	0x20004080
   21b28:	200040b8 	.word	0x200040b8
   21b2c:	20000b48 	.word	0x20000b48
   21b30:	200040a8 	.word	0x200040a8
   21b34:	20002368 	.word	0x20002368

00021b38 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   21b38:	4b07      	ldr	r3, [pc, #28]	; (21b58 <usb_dc_set_address+0x20>)
   21b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   21b3e:	b12b      	cbz	r3, 21b4c <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
   21b40:	4b05      	ldr	r3, [pc, #20]	; (21b58 <usb_dc_set_address+0x20>)
   21b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   21b46:	b123      	cbz	r3, 21b52 <usb_dc_set_address+0x1a>
	return 0;
   21b48:	2000      	movs	r0, #0
   21b4a:	4770      	bx	lr
		return -ENODEV;
   21b4c:	f06f 0012 	mvn.w	r0, #18
   21b50:	4770      	bx	lr
   21b52:	f06f 0012 	mvn.w	r0, #18
}
   21b56:	4770      	bx	lr
   21b58:	20004080 	.word	0x20004080

00021b5c <usb_dc_ep_check_cap>:
{
   21b5c:	b500      	push	{lr}
   21b5e:	b095      	sub	sp, #84	; 0x54
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   21b60:	7801      	ldrb	r1, [r0, #0]
   21b62:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   21b66:	7903      	ldrb	r3, [r0, #4]
   21b68:	b903      	cbnz	r3, 21b6c <usb_dc_ep_check_cap+0x10>
   21b6a:	b93a      	cbnz	r2, 21b7c <usb_dc_ep_check_cap+0x20>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   21b6c:	2a08      	cmp	r2, #8
   21b6e:	d82b      	bhi.n	21bc8 <usb_dc_ep_check_cap+0x6c>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   21b70:	2b01      	cmp	r3, #1
   21b72:	d04f      	beq.n	21c14 <usb_dc_ep_check_cap+0xb8>
	return 0;
   21b74:	2000      	movs	r0, #0
}
   21b76:	b015      	add	sp, #84	; 0x54
   21b78:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("invalid endpoint configuration");
   21b7c:	4b3a      	ldr	r3, [pc, #232]	; (21c68 <usb_dc_ep_check_cap+0x10c>)
   21b7e:	9307      	str	r3, [sp, #28]
   21b80:	2302      	movs	r3, #2
   21b82:	f88d 3004 	strb.w	r3, [sp, #4]
   21b86:	2300      	movs	r3, #0
   21b88:	f88d 3005 	strb.w	r3, [sp, #5]
   21b8c:	f88d 3006 	strb.w	r3, [sp, #6]
   21b90:	f88d 3007 	strb.w	r3, [sp, #7]
   21b94:	9a01      	ldr	r2, [sp, #4]
   21b96:	9206      	str	r2, [sp, #24]
   21b98:	4619      	mov	r1, r3
   21b9a:	f363 0100 	bfi	r1, r3, #0, #1
   21b9e:	f363 0141 	bfi	r1, r3, #1, #1
   21ba2:	f363 0182 	bfi	r1, r3, #2, #1
   21ba6:	f363 01c5 	bfi	r1, r3, #3, #3
   21baa:	2201      	movs	r2, #1
   21bac:	f362 1188 	bfi	r1, r2, #6, #3
   21bb0:	2208      	movs	r2, #8
   21bb2:	f362 2153 	bfi	r1, r2, #9, #11
   21bb6:	f363 511f 	bfi	r1, r3, #20, #12
   21bba:	aa06      	add	r2, sp, #24
   21bbc:	482b      	ldr	r0, [pc, #172]	; (21c6c <usb_dc_ep_check_cap+0x110>)
   21bbe:	f7f2 fa9d 	bl	140fc <z_impl_z_log_msg_static_create>
		return -1;
   21bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21bc6:	e7d6      	b.n	21b76 <usb_dc_ep_check_cap+0x1a>
		LOG_ERR("invalid endpoint index/address");
   21bc8:	4b29      	ldr	r3, [pc, #164]	; (21c70 <usb_dc_ep_check_cap+0x114>)
   21bca:	9313      	str	r3, [sp, #76]	; 0x4c
   21bcc:	2302      	movs	r3, #2
   21bce:	f88d 3004 	strb.w	r3, [sp, #4]
   21bd2:	2300      	movs	r3, #0
   21bd4:	f88d 3005 	strb.w	r3, [sp, #5]
   21bd8:	f88d 3006 	strb.w	r3, [sp, #6]
   21bdc:	f88d 3007 	strb.w	r3, [sp, #7]
   21be0:	9a01      	ldr	r2, [sp, #4]
   21be2:	9212      	str	r2, [sp, #72]	; 0x48
   21be4:	4619      	mov	r1, r3
   21be6:	f363 0100 	bfi	r1, r3, #0, #1
   21bea:	f363 0141 	bfi	r1, r3, #1, #1
   21bee:	f363 0182 	bfi	r1, r3, #2, #1
   21bf2:	f363 01c5 	bfi	r1, r3, #3, #3
   21bf6:	2201      	movs	r2, #1
   21bf8:	f362 1188 	bfi	r1, r2, #6, #3
   21bfc:	2208      	movs	r2, #8
   21bfe:	f362 2153 	bfi	r1, r2, #9, #11
   21c02:	f363 511f 	bfi	r1, r3, #20, #12
   21c06:	aa12      	add	r2, sp, #72	; 0x48
   21c08:	4818      	ldr	r0, [pc, #96]	; (21c6c <usb_dc_ep_check_cap+0x110>)
   21c0a:	f7f2 fa77 	bl	140fc <z_impl_z_log_msg_static_create>
		return -1;
   21c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21c12:	e7b0      	b.n	21b76 <usb_dc_ep_check_cap+0x1a>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   21c14:	f011 0f08 	tst.w	r1, #8
   21c18:	d001      	beq.n	21c1e <usb_dc_ep_check_cap+0xc2>
	return 0;
   21c1a:	2000      	movs	r0, #0
   21c1c:	e7ab      	b.n	21b76 <usb_dc_ep_check_cap+0x1a>
		LOG_WRN("invalid endpoint type");
   21c1e:	4b15      	ldr	r3, [pc, #84]	; (21c74 <usb_dc_ep_check_cap+0x118>)
   21c20:	930d      	str	r3, [sp, #52]	; 0x34
   21c22:	2202      	movs	r2, #2
   21c24:	f88d 2004 	strb.w	r2, [sp, #4]
   21c28:	2300      	movs	r3, #0
   21c2a:	f88d 3005 	strb.w	r3, [sp, #5]
   21c2e:	f88d 3006 	strb.w	r3, [sp, #6]
   21c32:	f88d 3007 	strb.w	r3, [sp, #7]
   21c36:	9901      	ldr	r1, [sp, #4]
   21c38:	910c      	str	r1, [sp, #48]	; 0x30
   21c3a:	4619      	mov	r1, r3
   21c3c:	f363 0100 	bfi	r1, r3, #0, #1
   21c40:	f363 0141 	bfi	r1, r3, #1, #1
   21c44:	f363 0182 	bfi	r1, r3, #2, #1
   21c48:	f363 01c5 	bfi	r1, r3, #3, #3
   21c4c:	f362 1188 	bfi	r1, r2, #6, #3
   21c50:	2208      	movs	r2, #8
   21c52:	f362 2153 	bfi	r1, r2, #9, #11
   21c56:	f363 511f 	bfi	r1, r3, #20, #12
   21c5a:	aa0c      	add	r2, sp, #48	; 0x30
   21c5c:	4803      	ldr	r0, [pc, #12]	; (21c6c <usb_dc_ep_check_cap+0x110>)
   21c5e:	f7f2 fa4d 	bl	140fc <z_impl_z_log_msg_static_create>
		return -1;
   21c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21c66:	e786      	b.n	21b76 <usb_dc_ep_check_cap+0x1a>
   21c68:	00034b60 	.word	0x00034b60
   21c6c:	00031ddc 	.word	0x00031ddc
   21c70:	00034b80 	.word	0x00034b80
   21c74:	00034ba0 	.word	0x00034ba0

00021c78 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   21c78:	4b26      	ldr	r3, [pc, #152]	; (21d14 <usb_dc_ep_configure+0x9c>)
   21c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   21c7e:	2b00      	cmp	r3, #0
   21c80:	d041      	beq.n	21d06 <usb_dc_ep_configure+0x8e>
{
   21c82:	b530      	push	{r4, r5, lr}
   21c84:	b089      	sub	sp, #36	; 0x24
   21c86:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   21c88:	7805      	ldrb	r5, [r0, #0]
   21c8a:	4628      	mov	r0, r5
   21c8c:	f7ff f828 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   21c90:	2800      	cmp	r0, #0
   21c92:	d03b      	beq.n	21d0c <usb_dc_ep_configure+0x94>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   21c94:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   21c96:	7922      	ldrb	r2, [r4, #4]
   21c98:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   21c9a:	8862      	ldrh	r2, [r4, #2]
   21c9c:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   21c9e:	7820      	ldrb	r0, [r4, #0]
   21ca0:	f010 0f08 	tst.w	r0, #8
   21ca4:	d103      	bne.n	21cae <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   21ca6:	8863      	ldrh	r3, [r4, #2]
   21ca8:	1e5a      	subs	r2, r3, #1
   21caa:	4213      	tst	r3, r2
   21cac:	d105      	bne.n	21cba <usb_dc_ep_configure+0x42>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   21cae:	8861      	ldrh	r1, [r4, #2]
   21cb0:	f002 ffd4 	bl	24c5c <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   21cb4:	2000      	movs	r0, #0
}
   21cb6:	b009      	add	sp, #36	; 0x24
   21cb8:	bd30      	pop	{r4, r5, pc}
			LOG_ERR("EP max packet size must be a power of 2");
   21cba:	4b17      	ldr	r3, [pc, #92]	; (21d18 <usb_dc_ep_configure+0xa0>)
   21cbc:	9307      	str	r3, [sp, #28]
   21cbe:	2302      	movs	r3, #2
   21cc0:	f88d 3004 	strb.w	r3, [sp, #4]
   21cc4:	2300      	movs	r3, #0
   21cc6:	f88d 3005 	strb.w	r3, [sp, #5]
   21cca:	f88d 3006 	strb.w	r3, [sp, #6]
   21cce:	f88d 3007 	strb.w	r3, [sp, #7]
   21cd2:	9a01      	ldr	r2, [sp, #4]
   21cd4:	9206      	str	r2, [sp, #24]
   21cd6:	4619      	mov	r1, r3
   21cd8:	f363 0100 	bfi	r1, r3, #0, #1
   21cdc:	f363 0141 	bfi	r1, r3, #1, #1
   21ce0:	f363 0182 	bfi	r1, r3, #2, #1
   21ce4:	f363 01c5 	bfi	r1, r3, #3, #3
   21ce8:	2201      	movs	r2, #1
   21cea:	f362 1188 	bfi	r1, r2, #6, #3
   21cee:	2208      	movs	r2, #8
   21cf0:	f362 2153 	bfi	r1, r2, #9, #11
   21cf4:	f363 511f 	bfi	r1, r3, #20, #12
   21cf8:	aa06      	add	r2, sp, #24
   21cfa:	4808      	ldr	r0, [pc, #32]	; (21d1c <usb_dc_ep_configure+0xa4>)
   21cfc:	f7f2 f9fe 	bl	140fc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   21d00:	f06f 0015 	mvn.w	r0, #21
   21d04:	e7d7      	b.n	21cb6 <usb_dc_ep_configure+0x3e>
		return -ENODEV;
   21d06:	f06f 0012 	mvn.w	r0, #18
}
   21d0a:	4770      	bx	lr
		return -EINVAL;
   21d0c:	f06f 0015 	mvn.w	r0, #21
   21d10:	e7d1      	b.n	21cb6 <usb_dc_ep_configure+0x3e>
   21d12:	bf00      	nop
   21d14:	20004080 	.word	0x20004080
   21d18:	00034bb8 	.word	0x00034bb8
   21d1c:	00031ddc 	.word	0x00031ddc

00021d20 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   21d20:	4b2a      	ldr	r3, [pc, #168]	; (21dcc <usb_dc_ep_set_stall+0xac>)
   21d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   21d26:	2b00      	cmp	r3, #0
   21d28:	d047      	beq.n	21dba <usb_dc_ep_set_stall+0x9a>
{
   21d2a:	b530      	push	{r4, r5, lr}
   21d2c:	b089      	sub	sp, #36	; 0x24
   21d2e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   21d30:	4b26      	ldr	r3, [pc, #152]	; (21dcc <usb_dc_ep_set_stall+0xac>)
   21d32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   21d36:	2b00      	cmp	r3, #0
   21d38:	d042      	beq.n	21dc0 <usb_dc_ep_set_stall+0xa0>
	ep_ctx = endpoint_ctx(ep);
   21d3a:	f7fe ffd1 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   21d3e:	4605      	mov	r5, r0
   21d40:	2800      	cmp	r0, #0
   21d42:	d040      	beq.n	21dc6 <usb_dc_ep_set_stall+0xa6>
	switch (ep_ctx->cfg.type) {
   21d44:	7a83      	ldrb	r3, [r0, #10]
   21d46:	2b01      	cmp	r3, #1
   21d48:	d011      	beq.n	21d6e <usb_dc_ep_set_stall+0x4e>
   21d4a:	d808      	bhi.n	21d5e <usb_dc_ep_set_stall+0x3e>
   21d4c:	b90b      	cbnz	r3, 21d52 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_setup_stall();
   21d4e:	f003 faab 	bl	252a8 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
   21d52:	2000      	movs	r0, #0
   21d54:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   21d56:	696b      	ldr	r3, [r5, #20]
   21d58:	61ab      	str	r3, [r5, #24]
}
   21d5a:	b009      	add	sp, #36	; 0x24
   21d5c:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
   21d5e:	3b02      	subs	r3, #2
   21d60:	b2db      	uxtb	r3, r3
   21d62:	2b01      	cmp	r3, #1
   21d64:	d8f5      	bhi.n	21d52 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   21d66:	4620      	mov	r0, r4
   21d68:	f003 f9f0 	bl	2514c <nrfx_usbd_ep_stall>
		break;
   21d6c:	e7f1      	b.n	21d52 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
   21d6e:	4b18      	ldr	r3, [pc, #96]	; (21dd0 <usb_dc_ep_set_stall+0xb0>)
   21d70:	9307      	str	r3, [sp, #28]
   21d72:	2302      	movs	r3, #2
   21d74:	f88d 3004 	strb.w	r3, [sp, #4]
   21d78:	2300      	movs	r3, #0
   21d7a:	f88d 3005 	strb.w	r3, [sp, #5]
   21d7e:	f88d 3006 	strb.w	r3, [sp, #6]
   21d82:	f88d 3007 	strb.w	r3, [sp, #7]
   21d86:	9a01      	ldr	r2, [sp, #4]
   21d88:	9206      	str	r2, [sp, #24]
   21d8a:	4619      	mov	r1, r3
   21d8c:	f363 0100 	bfi	r1, r3, #0, #1
   21d90:	f363 0141 	bfi	r1, r3, #1, #1
   21d94:	f363 0182 	bfi	r1, r3, #2, #1
   21d98:	f363 01c5 	bfi	r1, r3, #3, #3
   21d9c:	2201      	movs	r2, #1
   21d9e:	f362 1188 	bfi	r1, r2, #6, #3
   21da2:	2208      	movs	r2, #8
   21da4:	f362 2153 	bfi	r1, r2, #9, #11
   21da8:	f363 511f 	bfi	r1, r3, #20, #12
   21dac:	aa06      	add	r2, sp, #24
   21dae:	4809      	ldr	r0, [pc, #36]	; (21dd4 <usb_dc_ep_set_stall+0xb4>)
   21db0:	f7f2 f9a4 	bl	140fc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   21db4:	f06f 0015 	mvn.w	r0, #21
   21db8:	e7cf      	b.n	21d5a <usb_dc_ep_set_stall+0x3a>
		return -ENODEV;
   21dba:	f06f 0012 	mvn.w	r0, #18
}
   21dbe:	4770      	bx	lr
		return -ENODEV;
   21dc0:	f06f 0012 	mvn.w	r0, #18
   21dc4:	e7c9      	b.n	21d5a <usb_dc_ep_set_stall+0x3a>
		return -EINVAL;
   21dc6:	f06f 0015 	mvn.w	r0, #21
   21dca:	e7c6      	b.n	21d5a <usb_dc_ep_set_stall+0x3a>
   21dcc:	20004080 	.word	0x20004080
   21dd0:	00034be0 	.word	0x00034be0
   21dd4:	00031ddc 	.word	0x00031ddc

00021dd8 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
   21dd8:	4b11      	ldr	r3, [pc, #68]	; (21e20 <usb_dc_ep_clear_stall+0x48>)
   21dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   21dde:	b19b      	cbz	r3, 21e08 <usb_dc_ep_clear_stall+0x30>
{
   21de0:	b510      	push	{r4, lr}
   21de2:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   21de4:	4b0e      	ldr	r3, [pc, #56]	; (21e20 <usb_dc_ep_clear_stall+0x48>)
   21de6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   21dea:	b183      	cbz	r3, 21e0e <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
   21dec:	f7fe ff78 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   21df0:	b180      	cbz	r0, 21e14 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   21df2:	f014 0f08 	tst.w	r4, #8
   21df6:	d110      	bne.n	21e1a <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   21df8:	4620      	mov	r0, r4
   21dfa:	f003 f9cf 	bl	2519c <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   21dfe:	4620      	mov	r0, r4
   21e00:	f003 fc80 	bl	25704 <nrfx_usbd_ep_stall_clear>
	return 0;
   21e04:	2000      	movs	r0, #0
}
   21e06:	bd10      	pop	{r4, pc}
		return -ENODEV;
   21e08:	f06f 0012 	mvn.w	r0, #18
}
   21e0c:	4770      	bx	lr
		return -ENODEV;
   21e0e:	f06f 0012 	mvn.w	r0, #18
   21e12:	e7f8      	b.n	21e06 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   21e14:	f06f 0015 	mvn.w	r0, #21
   21e18:	e7f5      	b.n	21e06 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   21e1a:	f06f 0015 	mvn.w	r0, #21
   21e1e:	e7f2      	b.n	21e06 <usb_dc_ep_clear_stall+0x2e>
   21e20:	20004080 	.word	0x20004080

00021e24 <usb_dc_ep_is_stalled>:
{
   21e24:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   21e26:	4b10      	ldr	r3, [pc, #64]	; (21e68 <usb_dc_ep_is_stalled+0x44>)
   21e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   21e2c:	b17b      	cbz	r3, 21e4e <usb_dc_ep_is_stalled+0x2a>
   21e2e:	4604      	mov	r4, r0
   21e30:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
   21e32:	4b0d      	ldr	r3, [pc, #52]	; (21e68 <usb_dc_ep_is_stalled+0x44>)
   21e34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   21e38:	b163      	cbz	r3, 21e54 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
   21e3a:	f7fe ff51 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   21e3e:	b160      	cbz	r0, 21e5a <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
   21e40:	b175      	cbz	r5, 21e60 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   21e42:	4620      	mov	r0, r4
   21e44:	f003 f98a 	bl	2515c <nrfx_usbd_ep_stall_check>
   21e48:	7028      	strb	r0, [r5, #0]
	return 0;
   21e4a:	2000      	movs	r0, #0
}
   21e4c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   21e4e:	f06f 0012 	mvn.w	r0, #18
   21e52:	e7fb      	b.n	21e4c <usb_dc_ep_is_stalled+0x28>
   21e54:	f06f 0012 	mvn.w	r0, #18
   21e58:	e7f8      	b.n	21e4c <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   21e5a:	f06f 0015 	mvn.w	r0, #21
   21e5e:	e7f5      	b.n	21e4c <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   21e60:	f06f 0015 	mvn.w	r0, #21
   21e64:	e7f2      	b.n	21e4c <usb_dc_ep_is_stalled+0x28>
   21e66:	bf00      	nop
   21e68:	20004080 	.word	0x20004080

00021e6c <usb_dc_ep_enable>:
{
   21e6c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   21e6e:	4b15      	ldr	r3, [pc, #84]	; (21ec4 <usb_dc_ep_enable+0x58>)
   21e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   21e74:	b1eb      	cbz	r3, 21eb2 <usb_dc_ep_enable+0x46>
   21e76:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   21e78:	f7fe ff32 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   21e7c:	4605      	mov	r5, r0
   21e7e:	b1d8      	cbz	r0, 21eb8 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   21e80:	f014 0f08 	tst.w	r4, #8
   21e84:	d009      	beq.n	21e9a <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
   21e86:	7a2b      	ldrb	r3, [r5, #8]
   21e88:	b9cb      	cbnz	r3, 21ebe <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
   21e8a:	2301      	movs	r3, #1
   21e8c:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
   21e8e:	4b0d      	ldr	r3, [pc, #52]	; (21ec4 <usb_dc_ep_enable+0x58>)
   21e90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
   21e94:	b943      	cbnz	r3, 21ea8 <usb_dc_ep_enable+0x3c>
	return 0;
   21e96:	2000      	movs	r0, #0
}
   21e98:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   21e9a:	4620      	mov	r0, r4
   21e9c:	f003 f97e 	bl	2519c <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   21ea0:	4620      	mov	r0, r4
   21ea2:	f003 fc2f 	bl	25704 <nrfx_usbd_ep_stall_clear>
   21ea6:	e7ee      	b.n	21e86 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   21ea8:	4620      	mov	r0, r4
   21eaa:	f003 fbd3 	bl	25654 <nrfx_usbd_ep_enable>
	return 0;
   21eae:	2000      	movs	r0, #0
   21eb0:	e7f2      	b.n	21e98 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
   21eb2:	f06f 0012 	mvn.w	r0, #18
   21eb6:	e7ef      	b.n	21e98 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
   21eb8:	f06f 0015 	mvn.w	r0, #21
   21ebc:	e7ec      	b.n	21e98 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
   21ebe:	f06f 0077 	mvn.w	r0, #119	; 0x77
   21ec2:	e7e9      	b.n	21e98 <usb_dc_ep_enable+0x2c>
   21ec4:	20004080 	.word	0x20004080

00021ec8 <usb_dc_ep_write>:
{
   21ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ecc:	b085      	sub	sp, #20
   21ece:	af00      	add	r7, sp, #0
   21ed0:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
   21ed2:	4b7c      	ldr	r3, [pc, #496]	; (220c4 <usb_dc_ep_write+0x1fc>)
   21ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   21ed8:	2b00      	cmp	r3, #0
   21eda:	f000 80e6 	beq.w	220aa <usb_dc_ep_write+0x1e2>
   21ede:	4604      	mov	r4, r0
   21ee0:	4689      	mov	r9, r1
   21ee2:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
   21ee4:	4b77      	ldr	r3, [pc, #476]	; (220c4 <usb_dc_ep_write+0x1fc>)
   21ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   21eea:	2b00      	cmp	r3, #0
   21eec:	f000 80e0 	beq.w	220b0 <usb_dc_ep_write+0x1e8>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   21ef0:	f010 0f80 	tst.w	r0, #128	; 0x80
   21ef4:	f000 80df 	beq.w	220b6 <usb_dc_ep_write+0x1ee>
	ep_ctx = endpoint_ctx(ep);
   21ef8:	f7fe fef2 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   21efc:	4605      	mov	r5, r0
   21efe:	2800      	cmp	r0, #0
   21f00:	f000 80dc 	beq.w	220bc <usb_dc_ep_write+0x1f4>
	if (!ep_ctx->cfg.en) {
   21f04:	7a03      	ldrb	r3, [r0, #8]
   21f06:	2b00      	cmp	r3, #0
   21f08:	d077      	beq.n	21ffa <usb_dc_ep_write+0x132>
	return z_impl_k_mutex_lock(mutex, timeout);
   21f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21f12:	486d      	ldr	r0, [pc, #436]	; (220c8 <usb_dc_ep_write+0x200>)
   21f14:	f004 f8aa 	bl	2606c <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
   21f18:	7fab      	ldrb	r3, [r5, #30]
   21f1a:	2b00      	cmp	r3, #0
   21f1c:	f040 80a9 	bne.w	22072 <usb_dc_ep_write+0x1aa>
	if (!data_len && ep_ctx->trans_zlp) {
   21f20:	b91e      	cbnz	r6, 21f2a <usb_dc_ep_write+0x62>
   21f22:	7feb      	ldrb	r3, [r5, #31]
   21f24:	b10b      	cbz	r3, 21f2a <usb_dc_ep_write+0x62>
		ep_ctx->trans_zlp = false;
   21f26:	2300      	movs	r3, #0
   21f28:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   21f2a:	7aab      	ldrb	r3, [r5, #10]
   21f2c:	b963      	cbnz	r3, 21f48 <usb_dc_ep_write+0x80>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   21f2e:	b15e      	cbz	r6, 21f48 <usb_dc_ep_write+0x80>
   21f30:	4a64      	ldr	r2, [pc, #400]	; (220c4 <usb_dc_ep_write+0x1fc>)
   21f32:	8952      	ldrh	r2, [r2, #10]
   21f34:	4296      	cmp	r6, r2
   21f36:	d207      	bcs.n	21f48 <usb_dc_ep_write+0x80>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   21f38:	6869      	ldr	r1, [r5, #4]
   21f3a:	fbb6 f2f1 	udiv	r2, r6, r1
   21f3e:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   21f42:	b90a      	cbnz	r2, 21f48 <usb_dc_ep_write+0x80>
			ep_ctx->trans_zlp = true;
   21f44:	2201      	movs	r2, #1
   21f46:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   21f48:	b923      	cbnz	r3, 21f54 <usb_dc_ep_write+0x8c>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   21f4a:	f003 f9b5 	bl	252b8 <nrfx_usbd_last_setup_dir_get>
   21f4e:	4284      	cmp	r4, r0
   21f50:	f040 8095 	bne.w	2207e <usb_dc_ep_write+0x1b6>
	ep_ctx->write_in_progress = true;
   21f54:	2301      	movs	r3, #1
   21f56:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   21f58:	f8c7 9004 	str.w	r9, [r7, #4]
   21f5c:	60be      	str	r6, [r7, #8]
   21f5e:	2300      	movs	r3, #0
   21f60:	60fb      	str	r3, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   21f62:	1d39      	adds	r1, r7, #4
   21f64:	4620      	mov	r0, r4
   21f66:	f002 fee1 	bl	24d2c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   21f6a:	4b58      	ldr	r3, [pc, #352]	; (220cc <usb_dc_ep_write+0x204>)
   21f6c:	4298      	cmp	r0, r3
   21f6e:	f000 8093 	beq.w	22098 <usb_dc_ep_write+0x1d0>
		ep_ctx->write_in_progress = false;
   21f72:	2300      	movs	r3, #0
   21f74:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
   21f76:	f1b8 0f00 	cmp.w	r8, #0
   21f7a:	d001      	beq.n	21f80 <usb_dc_ep_write+0xb8>
			*ret_bytes = 0;
   21f7c:	f8c8 3000 	str.w	r3, [r8]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   21f80:	466d      	mov	r5, sp
   21f82:	b088      	sub	sp, #32
   21f84:	466b      	mov	r3, sp
   21f86:	f113 0210 	adds.w	r2, r3, #16
   21f8a:	d07f      	beq.n	2208c <usb_dc_ep_write+0x1c4>
   21f8c:	210c      	movs	r1, #12
   21f8e:	b13a      	cbz	r2, 21fa0 <usb_dc_ep_write+0xd8>
   21f90:	460c      	mov	r4, r1
   21f92:	2904      	cmp	r1, #4
   21f94:	dd01      	ble.n	21f9a <usb_dc_ep_write+0xd2>
   21f96:	4e4e      	ldr	r6, [pc, #312]	; (220d0 <usb_dc_ep_write+0x208>)
   21f98:	615e      	str	r6, [r3, #20]
   21f9a:	2c08      	cmp	r4, #8
   21f9c:	dd00      	ble.n	21fa0 <usb_dc_ep_write+0xd8>
   21f9e:	6198      	str	r0, [r3, #24]
   21fa0:	290b      	cmp	r1, #11
   21fa2:	dd76      	ble.n	22092 <usb_dc_ep_write+0x1ca>
   21fa4:	240c      	movs	r4, #12
   21fa6:	b13a      	cbz	r2, 21fb8 <usb_dc_ep_write+0xf0>
   21fa8:	2103      	movs	r1, #3
   21faa:	7039      	strb	r1, [r7, #0]
   21fac:	2100      	movs	r1, #0
   21fae:	7079      	strb	r1, [r7, #1]
   21fb0:	70b9      	strb	r1, [r7, #2]
   21fb2:	70f9      	strb	r1, [r7, #3]
   21fb4:	6838      	ldr	r0, [r7, #0]
   21fb6:	6118      	str	r0, [r3, #16]
   21fb8:	2100      	movs	r1, #0
   21fba:	f36f 0100 	bfc	r1, #0, #1
   21fbe:	f36f 0141 	bfc	r1, #1, #1
   21fc2:	f36f 0182 	bfc	r1, #2, #1
   21fc6:	f36f 01c5 	bfc	r1, #3, #3
   21fca:	2301      	movs	r3, #1
   21fcc:	f363 1188 	bfi	r1, r3, #6, #3
   21fd0:	f3c4 030a 	ubfx	r3, r4, #0, #11
   21fd4:	f363 2153 	bfi	r1, r3, #9, #11
   21fd8:	f36f 511f 	bfc	r1, #20, #12
   21fdc:	2300      	movs	r3, #0
   21fde:	483d      	ldr	r0, [pc, #244]	; (220d4 <usb_dc_ep_write+0x20c>)
   21fe0:	f7f2 f88c 	bl	140fc <z_impl_z_log_msg_static_create>
   21fe4:	46ad      	mov	sp, r5
		result = -EIO;
   21fe6:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
   21fea:	4837      	ldr	r0, [pc, #220]	; (220c8 <usb_dc_ep_write+0x200>)
   21fec:	f004 f8c2 	bl	26174 <z_impl_k_mutex_unlock>
}
   21ff0:	4620      	mov	r0, r4
   21ff2:	3714      	adds	r7, #20
   21ff4:	46bd      	mov	sp, r7
   21ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   21ffa:	466d      	mov	r5, sp
   21ffc:	b088      	sub	sp, #32
   21ffe:	466b      	mov	r3, sp
   22000:	f113 0210 	adds.w	r2, r3, #16
   22004:	d02f      	beq.n	22066 <usb_dc_ep_write+0x19e>
   22006:	210c      	movs	r1, #12
   22008:	b13a      	cbz	r2, 2201a <usb_dc_ep_write+0x152>
   2200a:	4608      	mov	r0, r1
   2200c:	2904      	cmp	r1, #4
   2200e:	dd01      	ble.n	22014 <usb_dc_ep_write+0x14c>
   22010:	4e31      	ldr	r6, [pc, #196]	; (220d8 <usb_dc_ep_write+0x210>)
   22012:	615e      	str	r6, [r3, #20]
   22014:	2808      	cmp	r0, #8
   22016:	dd00      	ble.n	2201a <usb_dc_ep_write+0x152>
   22018:	619c      	str	r4, [r3, #24]
   2201a:	290b      	cmp	r1, #11
   2201c:	dd26      	ble.n	2206c <usb_dc_ep_write+0x1a4>
   2201e:	240c      	movs	r4, #12
   22020:	b13a      	cbz	r2, 22032 <usb_dc_ep_write+0x16a>
   22022:	2103      	movs	r1, #3
   22024:	7039      	strb	r1, [r7, #0]
   22026:	2100      	movs	r1, #0
   22028:	7079      	strb	r1, [r7, #1]
   2202a:	70b9      	strb	r1, [r7, #2]
   2202c:	70f9      	strb	r1, [r7, #3]
   2202e:	6838      	ldr	r0, [r7, #0]
   22030:	6118      	str	r0, [r3, #16]
   22032:	2100      	movs	r1, #0
   22034:	f36f 0100 	bfc	r1, #0, #1
   22038:	f36f 0141 	bfc	r1, #1, #1
   2203c:	f36f 0182 	bfc	r1, #2, #1
   22040:	f36f 01c5 	bfc	r1, #3, #3
   22044:	2301      	movs	r3, #1
   22046:	f363 1188 	bfi	r1, r3, #6, #3
   2204a:	f3c4 040a 	ubfx	r4, r4, #0, #11
   2204e:	f364 2153 	bfi	r1, r4, #9, #11
   22052:	f36f 511f 	bfc	r1, #20, #12
   22056:	2300      	movs	r3, #0
   22058:	481e      	ldr	r0, [pc, #120]	; (220d4 <usb_dc_ep_write+0x20c>)
   2205a:	f7f2 f84f 	bl	140fc <z_impl_z_log_msg_static_create>
   2205e:	46ad      	mov	sp, r5
		return -EINVAL;
   22060:	f06f 0415 	mvn.w	r4, #21
   22064:	e7c4      	b.n	21ff0 <usb_dc_ep_write+0x128>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   22066:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2206a:	e7cd      	b.n	22008 <usb_dc_ep_write+0x140>
   2206c:	f06f 041b 	mvn.w	r4, #27
   22070:	e7d6      	b.n	22020 <usb_dc_ep_write+0x158>
   22072:	4815      	ldr	r0, [pc, #84]	; (220c8 <usb_dc_ep_write+0x200>)
   22074:	f004 f87e 	bl	26174 <z_impl_k_mutex_unlock>
		return -EAGAIN;
   22078:	f06f 040a 	mvn.w	r4, #10
   2207c:	e7b8      	b.n	21ff0 <usb_dc_ep_write+0x128>
		nrfx_usbd_setup_clear();
   2207e:	f003 f90b 	bl	25298 <nrfx_usbd_setup_clear>
   22082:	4811      	ldr	r0, [pc, #68]	; (220c8 <usb_dc_ep_write+0x200>)
   22084:	f004 f876 	bl	26174 <z_impl_k_mutex_unlock>
		return 0;
   22088:	2400      	movs	r4, #0
   2208a:	e7b1      	b.n	21ff0 <usb_dc_ep_write+0x128>
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   2208c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22090:	e77d      	b.n	21f8e <usb_dc_ep_write+0xc6>
   22092:	f06f 041b 	mvn.w	r4, #27
   22096:	e786      	b.n	21fa6 <usb_dc_ep_write+0xde>
		if (ret_bytes) {
   22098:	f1b8 0f00 	cmp.w	r8, #0
   2209c:	d003      	beq.n	220a6 <usb_dc_ep_write+0x1de>
			*ret_bytes = data_len;
   2209e:	f8c8 6000 	str.w	r6, [r8]
	int result = 0;
   220a2:	2400      	movs	r4, #0
   220a4:	e7a1      	b.n	21fea <usb_dc_ep_write+0x122>
   220a6:	2400      	movs	r4, #0
   220a8:	e79f      	b.n	21fea <usb_dc_ep_write+0x122>
		return -ENODEV;
   220aa:	f06f 0412 	mvn.w	r4, #18
   220ae:	e79f      	b.n	21ff0 <usb_dc_ep_write+0x128>
   220b0:	f06f 0412 	mvn.w	r4, #18
   220b4:	e79c      	b.n	21ff0 <usb_dc_ep_write+0x128>
		return -EINVAL;
   220b6:	f06f 0415 	mvn.w	r4, #21
   220ba:	e799      	b.n	21ff0 <usb_dc_ep_write+0x128>
		return -EINVAL;
   220bc:	f06f 0415 	mvn.w	r4, #21
   220c0:	e796      	b.n	21ff0 <usb_dc_ep_write+0x128>
   220c2:	bf00      	nop
   220c4:	20004080 	.word	0x20004080
   220c8:	200040b8 	.word	0x200040b8
   220cc:	0bad0000 	.word	0x0bad0000
   220d0:	00034c24 	.word	0x00034c24
   220d4:	00031ddc 	.word	0x00031ddc
   220d8:	00034c04 	.word	0x00034c04

000220dc <usb_dc_ep_read_wait>:
{
   220dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   220e0:	b083      	sub	sp, #12
   220e2:	af00      	add	r7, sp, #0
   220e4:	4699      	mov	r9, r3
	return get_usbd_ctx()->attached;
   220e6:	4b4e      	ldr	r3, [pc, #312]	; (22220 <usb_dc_ep_read_wait+0x144>)
   220e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   220ec:	2b00      	cmp	r3, #0
   220ee:	f000 808a 	beq.w	22206 <usb_dc_ep_read_wait+0x12a>
   220f2:	4606      	mov	r6, r0
   220f4:	460d      	mov	r5, r1
   220f6:	4690      	mov	r8, r2
	return get_usbd_ctx()->ready;
   220f8:	4b49      	ldr	r3, [pc, #292]	; (22220 <usb_dc_ep_read_wait+0x144>)
   220fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   220fe:	2b00      	cmp	r3, #0
   22100:	f000 8084 	beq.w	2220c <usb_dc_ep_read_wait+0x130>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   22104:	f010 0f80 	tst.w	r0, #128	; 0x80
   22108:	f040 8083 	bne.w	22212 <usb_dc_ep_read_wait+0x136>
	if (!data && max_data_len) {
   2210c:	b369      	cbz	r1, 2216a <usb_dc_ep_read_wait+0x8e>
	ep_ctx = endpoint_ctx(ep);
   2210e:	4630      	mov	r0, r6
   22110:	f7fe fde6 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   22114:	4604      	mov	r4, r0
   22116:	2800      	cmp	r0, #0
   22118:	d07e      	beq.n	22218 <usb_dc_ep_read_wait+0x13c>
	if (!ep_ctx->cfg.en) {
   2211a:	7a03      	ldrb	r3, [r0, #8]
   2211c:	b353      	cbz	r3, 22174 <usb_dc_ep_read_wait+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
   2211e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22126:	483f      	ldr	r0, [pc, #252]	; (22224 <usb_dc_ep_read_wait+0x148>)
   22128:	f003 ffa0 	bl	2606c <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   2212c:	68e3      	ldr	r3, [r4, #12]
   2212e:	4646      	mov	r6, r8
   22130:	4598      	cmp	r8, r3
   22132:	bf28      	it	cs
   22134:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
   22136:	2d00      	cmp	r5, #0
   22138:	d058      	beq.n	221ec <usb_dc_ep_read_wait+0x110>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   2213a:	4632      	mov	r2, r6
   2213c:	69a1      	ldr	r1, [r4, #24]
   2213e:	4628      	mov	r0, r5
   22140:	f00a fb54 	bl	2c7ec <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   22144:	69a3      	ldr	r3, [r4, #24]
   22146:	4433      	add	r3, r6
   22148:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   2214a:	68e3      	ldr	r3, [r4, #12]
   2214c:	1b9b      	subs	r3, r3, r6
   2214e:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   22150:	f1b9 0f00 	cmp.w	r9, #0
   22154:	d001      	beq.n	2215a <usb_dc_ep_read_wait+0x7e>
		*read_bytes = bytes_to_copy;
   22156:	f8c9 6000 	str.w	r6, [r9]
	return z_impl_k_mutex_unlock(mutex);
   2215a:	4832      	ldr	r0, [pc, #200]	; (22224 <usb_dc_ep_read_wait+0x148>)
   2215c:	f004 f80a 	bl	26174 <z_impl_k_mutex_unlock>
	return 0;
   22160:	2000      	movs	r0, #0
}
   22162:	370c      	adds	r7, #12
   22164:	46bd      	mov	sp, r7
   22166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data && max_data_len) {
   2216a:	2a00      	cmp	r2, #0
   2216c:	d0cf      	beq.n	2210e <usb_dc_ep_read_wait+0x32>
		return -EINVAL;
   2216e:	f06f 0015 	mvn.w	r0, #21
   22172:	e7f6      	b.n	22162 <usb_dc_ep_read_wait+0x86>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   22174:	466d      	mov	r5, sp
   22176:	b088      	sub	sp, #32
   22178:	466b      	mov	r3, sp
   2217a:	f113 0210 	adds.w	r2, r3, #16
   2217e:	d02f      	beq.n	221e0 <usb_dc_ep_read_wait+0x104>
   22180:	210c      	movs	r1, #12
   22182:	b13a      	cbz	r2, 22194 <usb_dc_ep_read_wait+0xb8>
   22184:	4608      	mov	r0, r1
   22186:	2904      	cmp	r1, #4
   22188:	dd01      	ble.n	2218e <usb_dc_ep_read_wait+0xb2>
   2218a:	4c27      	ldr	r4, [pc, #156]	; (22228 <usb_dc_ep_read_wait+0x14c>)
   2218c:	615c      	str	r4, [r3, #20]
   2218e:	2808      	cmp	r0, #8
   22190:	dd00      	ble.n	22194 <usb_dc_ep_read_wait+0xb8>
   22192:	619e      	str	r6, [r3, #24]
   22194:	290b      	cmp	r1, #11
   22196:	dd26      	ble.n	221e6 <usb_dc_ep_read_wait+0x10a>
   22198:	240c      	movs	r4, #12
   2219a:	b13a      	cbz	r2, 221ac <usb_dc_ep_read_wait+0xd0>
   2219c:	2103      	movs	r1, #3
   2219e:	7139      	strb	r1, [r7, #4]
   221a0:	2100      	movs	r1, #0
   221a2:	7179      	strb	r1, [r7, #5]
   221a4:	71b9      	strb	r1, [r7, #6]
   221a6:	71f9      	strb	r1, [r7, #7]
   221a8:	6878      	ldr	r0, [r7, #4]
   221aa:	6118      	str	r0, [r3, #16]
   221ac:	2100      	movs	r1, #0
   221ae:	f36f 0100 	bfc	r1, #0, #1
   221b2:	f36f 0141 	bfc	r1, #1, #1
   221b6:	f36f 0182 	bfc	r1, #2, #1
   221ba:	f36f 01c5 	bfc	r1, #3, #3
   221be:	2301      	movs	r3, #1
   221c0:	f363 1188 	bfi	r1, r3, #6, #3
   221c4:	f3c4 040a 	ubfx	r4, r4, #0, #11
   221c8:	f364 2153 	bfi	r1, r4, #9, #11
   221cc:	f36f 511f 	bfc	r1, #20, #12
   221d0:	2300      	movs	r3, #0
   221d2:	4816      	ldr	r0, [pc, #88]	; (2222c <usb_dc_ep_read_wait+0x150>)
   221d4:	f7f1 ff92 	bl	140fc <z_impl_z_log_msg_static_create>
   221d8:	46ad      	mov	sp, r5
		return -EINVAL;
   221da:	f06f 0015 	mvn.w	r0, #21
   221de:	e7c0      	b.n	22162 <usb_dc_ep_read_wait+0x86>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   221e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   221e4:	e7cd      	b.n	22182 <usb_dc_ep_read_wait+0xa6>
   221e6:	f06f 041b 	mvn.w	r4, #27
   221ea:	e7d6      	b.n	2219a <usb_dc_ep_read_wait+0xbe>
	if (!data && !max_data_len) {
   221ec:	f1b8 0f00 	cmp.w	r8, #0
   221f0:	d1a3      	bne.n	2213a <usb_dc_ep_read_wait+0x5e>
		if (read_bytes) {
   221f2:	f1b9 0f00 	cmp.w	r9, #0
   221f6:	d001      	beq.n	221fc <usb_dc_ep_read_wait+0x120>
			*read_bytes = ep_ctx->buf.len;
   221f8:	f8c9 3000 	str.w	r3, [r9]
   221fc:	4809      	ldr	r0, [pc, #36]	; (22224 <usb_dc_ep_read_wait+0x148>)
   221fe:	f003 ffb9 	bl	26174 <z_impl_k_mutex_unlock>
		return 0;
   22202:	2000      	movs	r0, #0
   22204:	e7ad      	b.n	22162 <usb_dc_ep_read_wait+0x86>
		return -ENODEV;
   22206:	f06f 0012 	mvn.w	r0, #18
   2220a:	e7aa      	b.n	22162 <usb_dc_ep_read_wait+0x86>
   2220c:	f06f 0012 	mvn.w	r0, #18
   22210:	e7a7      	b.n	22162 <usb_dc_ep_read_wait+0x86>
		return -EINVAL;
   22212:	f06f 0015 	mvn.w	r0, #21
   22216:	e7a4      	b.n	22162 <usb_dc_ep_read_wait+0x86>
		return -EINVAL;
   22218:	f06f 0015 	mvn.w	r0, #21
   2221c:	e7a1      	b.n	22162 <usb_dc_ep_read_wait+0x86>
   2221e:	bf00      	nop
   22220:	20004080 	.word	0x20004080
   22224:	200040b8 	.word	0x200040b8
   22228:	00034c04 	.word	0x00034c04
   2222c:	00031ddc 	.word	0x00031ddc

00022230 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
   22230:	4b46      	ldr	r3, [pc, #280]	; (2234c <usb_dc_ep_read_continue+0x11c>)
   22232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   22236:	2b00      	cmp	r3, #0
   22238:	d07b      	beq.n	22332 <usb_dc_ep_read_continue+0x102>
{
   2223a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2223c:	b083      	sub	sp, #12
   2223e:	af00      	add	r7, sp, #0
   22240:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
   22242:	4b42      	ldr	r3, [pc, #264]	; (2234c <usb_dc_ep_read_continue+0x11c>)
   22244:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   22248:	2b00      	cmp	r3, #0
   2224a:	d075      	beq.n	22338 <usb_dc_ep_read_continue+0x108>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2224c:	f010 0f80 	tst.w	r0, #128	; 0x80
   22250:	d175      	bne.n	2233e <usb_dc_ep_read_continue+0x10e>
	ep_ctx = endpoint_ctx(ep);
   22252:	f7fe fd45 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   22256:	4604      	mov	r4, r0
   22258:	2800      	cmp	r0, #0
   2225a:	d073      	beq.n	22344 <usb_dc_ep_read_continue+0x114>
	if (!ep_ctx->cfg.en) {
   2225c:	7a03      	ldrb	r3, [r0, #8]
   2225e:	b1b3      	cbz	r3, 2228e <usb_dc_ep_read_continue+0x5e>
	return z_impl_k_mutex_lock(mutex, timeout);
   22260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22268:	4839      	ldr	r0, [pc, #228]	; (22350 <usb_dc_ep_read_continue+0x120>)
   2226a:	f003 feff 	bl	2606c <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
   2226e:	68e3      	ldr	r3, [r4, #12]
   22270:	b933      	cbnz	r3, 22280 <usb_dc_ep_read_continue+0x50>
		ep_ctx->buf.curr = ep_ctx->buf.data;
   22272:	6963      	ldr	r3, [r4, #20]
   22274:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
   22276:	2301      	movs	r3, #1
   22278:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
   2227a:	7f63      	ldrb	r3, [r4, #29]
   2227c:	2b00      	cmp	r3, #0
   2227e:	d142      	bne.n	22306 <usb_dc_ep_read_continue+0xd6>
	return z_impl_k_mutex_unlock(mutex);
   22280:	4833      	ldr	r0, [pc, #204]	; (22350 <usb_dc_ep_read_continue+0x120>)
   22282:	f003 ff77 	bl	26174 <z_impl_k_mutex_unlock>
	return 0;
   22286:	2000      	movs	r0, #0
}
   22288:	370c      	adds	r7, #12
   2228a:	46bd      	mov	sp, r7
   2228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   2228e:	466e      	mov	r6, sp
   22290:	b088      	sub	sp, #32
   22292:	466b      	mov	r3, sp
   22294:	f113 0210 	adds.w	r2, r3, #16
   22298:	d02f      	beq.n	222fa <usb_dc_ep_read_continue+0xca>
   2229a:	210c      	movs	r1, #12
   2229c:	b13a      	cbz	r2, 222ae <usb_dc_ep_read_continue+0x7e>
   2229e:	4608      	mov	r0, r1
   222a0:	2904      	cmp	r1, #4
   222a2:	dd01      	ble.n	222a8 <usb_dc_ep_read_continue+0x78>
   222a4:	4c2b      	ldr	r4, [pc, #172]	; (22354 <usb_dc_ep_read_continue+0x124>)
   222a6:	615c      	str	r4, [r3, #20]
   222a8:	2808      	cmp	r0, #8
   222aa:	dd00      	ble.n	222ae <usb_dc_ep_read_continue+0x7e>
   222ac:	619d      	str	r5, [r3, #24]
   222ae:	290b      	cmp	r1, #11
   222b0:	dd26      	ble.n	22300 <usb_dc_ep_read_continue+0xd0>
   222b2:	240c      	movs	r4, #12
   222b4:	b13a      	cbz	r2, 222c6 <usb_dc_ep_read_continue+0x96>
   222b6:	2103      	movs	r1, #3
   222b8:	7139      	strb	r1, [r7, #4]
   222ba:	2100      	movs	r1, #0
   222bc:	7179      	strb	r1, [r7, #5]
   222be:	71b9      	strb	r1, [r7, #6]
   222c0:	71f9      	strb	r1, [r7, #7]
   222c2:	6878      	ldr	r0, [r7, #4]
   222c4:	6118      	str	r0, [r3, #16]
   222c6:	2100      	movs	r1, #0
   222c8:	f36f 0100 	bfc	r1, #0, #1
   222cc:	f36f 0141 	bfc	r1, #1, #1
   222d0:	f36f 0182 	bfc	r1, #2, #1
   222d4:	f36f 01c5 	bfc	r1, #3, #3
   222d8:	2301      	movs	r3, #1
   222da:	f363 1188 	bfi	r1, r3, #6, #3
   222de:	f3c4 040a 	ubfx	r4, r4, #0, #11
   222e2:	f364 2153 	bfi	r1, r4, #9, #11
   222e6:	f36f 511f 	bfc	r1, #20, #12
   222ea:	2300      	movs	r3, #0
   222ec:	481a      	ldr	r0, [pc, #104]	; (22358 <usb_dc_ep_read_continue+0x128>)
   222ee:	f7f1 ff05 	bl	140fc <z_impl_z_log_msg_static_create>
   222f2:	46b5      	mov	sp, r6
		return -EINVAL;
   222f4:	f06f 0015 	mvn.w	r0, #21
   222f8:	e7c6      	b.n	22288 <usb_dc_ep_read_continue+0x58>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   222fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   222fe:	e7cd      	b.n	2229c <usb_dc_ep_read_continue+0x6c>
   22300:	f06f 041b 	mvn.w	r4, #27
   22304:	e7d6      	b.n	222b4 <usb_dc_ep_read_continue+0x84>
			struct usbd_event *ev = usbd_evt_alloc();
   22306:	f7fe fd61 	bl	20dcc <usbd_evt_alloc>
			if (!ev) {
   2230a:	4601      	mov	r1, r0
   2230c:	b158      	cbz	r0, 22326 <usb_dc_ep_read_continue+0xf6>
			ev->evt_type = USBD_EVT_EP;
   2230e:	2301      	movs	r3, #1
   22310:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   22312:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   22314:	7303      	strb	r3, [r0, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
   22316:	4811      	ldr	r0, [pc, #68]	; (2235c <usb_dc_ep_read_continue+0x12c>)
   22318:	f00e fd27 	bl	30d6a <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   2231c:	4910      	ldr	r1, [pc, #64]	; (22360 <usb_dc_ep_read_continue+0x130>)
   2231e:	4811      	ldr	r0, [pc, #68]	; (22364 <usb_dc_ep_read_continue+0x134>)
   22320:	f00e fe45 	bl	30fae <k_work_submit_to_queue>
}
   22324:	e7ac      	b.n	22280 <usb_dc_ep_read_continue+0x50>
   22326:	480a      	ldr	r0, [pc, #40]	; (22350 <usb_dc_ep_read_continue+0x120>)
   22328:	f003 ff24 	bl	26174 <z_impl_k_mutex_unlock>
				return -ENOMEM;
   2232c:	f06f 000b 	mvn.w	r0, #11
   22330:	e7aa      	b.n	22288 <usb_dc_ep_read_continue+0x58>
		return -ENODEV;
   22332:	f06f 0012 	mvn.w	r0, #18
}
   22336:	4770      	bx	lr
		return -ENODEV;
   22338:	f06f 0012 	mvn.w	r0, #18
   2233c:	e7a4      	b.n	22288 <usb_dc_ep_read_continue+0x58>
		return -EINVAL;
   2233e:	f06f 0015 	mvn.w	r0, #21
   22342:	e7a1      	b.n	22288 <usb_dc_ep_read_continue+0x58>
		return -EINVAL;
   22344:	f06f 0015 	mvn.w	r0, #21
   22348:	e79e      	b.n	22288 <usb_dc_ep_read_continue+0x58>
   2234a:	bf00      	nop
   2234c:	20004080 	.word	0x20004080
   22350:	200040b8 	.word	0x200040b8
   22354:	00034c04 	.word	0x00034c04
   22358:	00031ddc 	.word	0x00031ddc
   2235c:	20000b48 	.word	0x20000b48
   22360:	200040a8 	.word	0x200040a8
   22364:	20002368 	.word	0x20002368

00022368 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   22368:	4b08      	ldr	r3, [pc, #32]	; (2238c <usb_dc_ep_set_callback+0x24>)
   2236a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   2236e:	b13b      	cbz	r3, 22380 <usb_dc_ep_set_callback+0x18>
{
   22370:	b510      	push	{r4, lr}
   22372:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
   22374:	f7fe fcb4 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   22378:	b128      	cbz	r0, 22386 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   2237a:	6004      	str	r4, [r0, #0]
	return 0;
   2237c:	2000      	movs	r0, #0
}
   2237e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   22380:	f06f 0012 	mvn.w	r0, #18
}
   22384:	4770      	bx	lr
		return -EINVAL;
   22386:	f06f 0015 	mvn.w	r0, #21
   2238a:	e7f8      	b.n	2237e <usb_dc_ep_set_callback+0x16>
   2238c:	20004080 	.word	0x20004080

00022390 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   22390:	4b01      	ldr	r3, [pc, #4]	; (22398 <usb_dc_set_status_callback+0x8>)
   22392:	6018      	str	r0, [r3, #0]
}
   22394:	4770      	bx	lr
   22396:	bf00      	nop
   22398:	20004080 	.word	0x20004080

0002239c <usb_dc_ep_mps>:
{
   2239c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   2239e:	4b07      	ldr	r3, [pc, #28]	; (223bc <usb_dc_ep_mps+0x20>)
   223a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   223a4:	b123      	cbz	r3, 223b0 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   223a6:	f7fe fc9b 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   223aa:	b120      	cbz	r0, 223b6 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   223ac:	6840      	ldr	r0, [r0, #4]
}
   223ae:	bd08      	pop	{r3, pc}
		return -ENODEV;
   223b0:	f06f 0012 	mvn.w	r0, #18
   223b4:	e7fb      	b.n	223ae <usb_dc_ep_mps+0x12>
		return -EINVAL;
   223b6:	f06f 0015 	mvn.w	r0, #21
   223ba:	e7f8      	b.n	223ae <usb_dc_ep_mps+0x12>
   223bc:	20004080 	.word	0x20004080

000223c0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   223c0:	4800      	ldr	r0, [pc, #0]	; (223c4 <get_hf_flags+0x4>)
   223c2:	4770      	bx	lr
   223c4:	20004964 	.word	0x20004964

000223c8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   223c8:	4b03      	ldr	r3, [pc, #12]	; (223d8 <get_subsys+0x10>)
   223ca:	1ac0      	subs	r0, r0, r3
   223cc:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   223ce:	4b03      	ldr	r3, [pc, #12]	; (223dc <get_subsys+0x14>)
   223d0:	fb03 f000 	mul.w	r0, r3, r0
   223d4:	4770      	bx	lr
   223d6:	bf00      	nop
   223d8:	20004924 	.word	0x20004924
   223dc:	b6db6db7 	.word	0xb6db6db7

000223e0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   223e0:	b538      	push	{r3, r4, r5, lr}
   223e2:	4605      	mov	r5, r0
   223e4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   223e6:	f7ff ffef 	bl	223c8 <get_subsys>
   223ea:	4601      	mov	r1, r0
   223ec:	2240      	movs	r2, #64	; 0x40
   223ee:	4803      	ldr	r0, [pc, #12]	; (223fc <onoff_stop+0x1c>)
   223f0:	f00c ffaa 	bl	2f348 <stop>
   223f4:	4601      	mov	r1, r0
	notify(mgr, res);
   223f6:	4628      	mov	r0, r5
   223f8:	47a0      	blx	r4
}
   223fa:	bd38      	pop	{r3, r4, r5, pc}
   223fc:	00031a34 	.word	0x00031a34

00022400 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   22400:	b530      	push	{r4, r5, lr}
   22402:	b083      	sub	sp, #12
   22404:	4605      	mov	r5, r0
   22406:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   22408:	f7ff ffde 	bl	223c8 <get_subsys>
   2240c:	4601      	mov	r1, r0
   2240e:	2340      	movs	r3, #64	; 0x40
   22410:	9300      	str	r3, [sp, #0]
   22412:	4623      	mov	r3, r4
   22414:	4a05      	ldr	r2, [pc, #20]	; (2242c <onoff_start+0x2c>)
   22416:	4806      	ldr	r0, [pc, #24]	; (22430 <onoff_start+0x30>)
   22418:	f00c ffb0 	bl	2f37c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2241c:	1e01      	subs	r1, r0, #0
   2241e:	db01      	blt.n	22424 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   22420:	b003      	add	sp, #12
   22422:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   22424:	4628      	mov	r0, r5
   22426:	47a0      	blx	r4
}
   22428:	e7fa      	b.n	22420 <onoff_start+0x20>
   2242a:	bf00      	nop
   2242c:	0002f3c5 	.word	0x0002f3c5
   22430:	00031a34 	.word	0x00031a34

00022434 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   22434:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   22436:	b110      	cbz	r0, 2243e <clock_event_handler+0xa>
   22438:	2801      	cmp	r0, #1
   2243a:	d00d      	beq.n	22458 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   2243c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   2243e:	2100      	movs	r1, #0
   22440:	4808      	ldr	r0, [pc, #32]	; (22464 <clock_event_handler+0x30>)
   22442:	f00c ff0a 	bl	2f25a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   22446:	6883      	ldr	r3, [r0, #8]
   22448:	f013 0f07 	tst.w	r3, #7
   2244c:	d1f6      	bne.n	2243c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   2244e:	2100      	movs	r1, #0
   22450:	4804      	ldr	r0, [pc, #16]	; (22464 <clock_event_handler+0x30>)
   22452:	f00c ff67 	bl	2f324 <clkstarted_handle>
   22456:	e7f1      	b.n	2243c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   22458:	2101      	movs	r1, #1
   2245a:	4802      	ldr	r0, [pc, #8]	; (22464 <clock_event_handler+0x30>)
   2245c:	f00c ff62 	bl	2f324 <clkstarted_handle>
}
   22460:	e7ec      	b.n	2243c <clock_event_handler+0x8>
   22462:	bf00      	nop
   22464:	00031a34 	.word	0x00031a34

00022468 <generic_hfclk_start>:
{
   22468:	b510      	push	{r4, lr}
   2246a:	b082      	sub	sp, #8
	__asm__ volatile(
   2246c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22470:	f3ef 8411 	mrs	r4, BASEPRI
   22474:	f383 8812 	msr	BASEPRI_MAX, r3
   22478:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2247c:	4a14      	ldr	r2, [pc, #80]	; (224d0 <generic_hfclk_start+0x68>)
   2247e:	6813      	ldr	r3, [r2, #0]
   22480:	f043 0102 	orr.w	r1, r3, #2
   22484:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   22486:	f013 0f01 	tst.w	r3, #1
   2248a:	d109      	bne.n	224a0 <generic_hfclk_start+0x38>
	bool already_started = false;
   2248c:	2300      	movs	r3, #0
	__asm__ volatile(
   2248e:	f384 8811 	msr	BASEPRI, r4
   22492:	f3bf 8f6f 	isb	sy
	if (already_started) {
   22496:	b9b3      	cbnz	r3, 224c6 <generic_hfclk_start+0x5e>
	hfclk_start();
   22498:	f00c ff9c 	bl	2f3d4 <hfclk_start>
}
   2249c:	b002      	add	sp, #8
   2249e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   224a0:	f10d 0207 	add.w	r2, sp, #7
   224a4:	2101      	movs	r1, #1
   224a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   224aa:	f00c feb3 	bl	2f214 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   224ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   224b2:	2b01      	cmp	r3, #1
   224b4:	d001      	beq.n	224ba <generic_hfclk_start+0x52>
	bool already_started = false;
   224b6:	2300      	movs	r3, #0
   224b8:	e7e9      	b.n	2248e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   224ba:	f7ff ff81 	bl	223c0 <get_hf_flags>
   224be:	f00c ff1e 	bl	2f2fe <set_on_state>
			already_started = true;
   224c2:	2301      	movs	r3, #1
   224c4:	e7e3      	b.n	2248e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   224c6:	2100      	movs	r1, #0
   224c8:	4802      	ldr	r0, [pc, #8]	; (224d4 <generic_hfclk_start+0x6c>)
   224ca:	f00c ff2b 	bl	2f324 <clkstarted_handle>
		return;
   224ce:	e7e5      	b.n	2249c <generic_hfclk_start+0x34>
   224d0:	20004974 	.word	0x20004974
   224d4:	00031a34 	.word	0x00031a34

000224d8 <generic_hfclk_stop>:
{
   224d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   224da:	f04f 0340 	mov.w	r3, #64	; 0x40
   224de:	f3ef 8411 	mrs	r4, BASEPRI
   224e2:	f383 8812 	msr	BASEPRI_MAX, r3
   224e6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   224ea:	4a08      	ldr	r2, [pc, #32]	; (2250c <generic_hfclk_stop+0x34>)
   224ec:	6813      	ldr	r3, [r2, #0]
   224ee:	f023 0102 	bic.w	r1, r3, #2
   224f2:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   224f4:	f013 0f01 	tst.w	r3, #1
   224f8:	d004      	beq.n	22504 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   224fa:	f384 8811 	msr	BASEPRI, r4
   224fe:	f3bf 8f6f 	isb	sy
}
   22502:	bd10      	pop	{r4, pc}
		hfclk_stop();
   22504:	f00c ff70 	bl	2f3e8 <hfclk_stop>
   22508:	e7f7      	b.n	224fa <generic_hfclk_stop+0x22>
   2250a:	bf00      	nop
   2250c:	20004974 	.word	0x20004974

00022510 <lfclk_spinwait>:
{
   22510:	b570      	push	{r4, r5, r6, lr}
   22512:	b082      	sub	sp, #8
   22514:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   22516:	2801      	cmp	r0, #1
   22518:	d107      	bne.n	2252a <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2251a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2251e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   22522:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   22526:	2b01      	cmp	r3, #1
   22528:	d04c      	beq.n	225c4 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2252a:	f00e fb23 	bl	30b74 <k_is_in_isr>
   2252e:	4604      	mov	r4, r0
   22530:	b918      	cbnz	r0, 2253a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   22532:	4b28      	ldr	r3, [pc, #160]	; (225d4 <lfclk_spinwait+0xc4>)
   22534:	781b      	ldrb	r3, [r3, #0]
   22536:	2b00      	cmp	r3, #0
   22538:	d139      	bne.n	225ae <lfclk_spinwait+0x9e>
	__asm__ volatile(
   2253a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2253e:	f3ef 8611 	mrs	r6, BASEPRI
   22542:	f383 8812 	msr	BASEPRI_MAX, r3
   22546:	f3bf 8f6f 	isb	sy
   2254a:	2401      	movs	r4, #1
	if (!isr_mode) {
   2254c:	b924      	cbnz	r4, 22558 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   2254e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22552:	2202      	movs	r2, #2
   22554:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   22558:	aa01      	add	r2, sp, #4
   2255a:	2100      	movs	r1, #0
   2255c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   22560:	f00c fe58 	bl	2f214 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   22564:	b120      	cbz	r0, 22570 <lfclk_spinwait+0x60>
		 && ((type == target_type)
   22566:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   22568:	2b01      	cmp	r3, #1
   2256a:	d026      	beq.n	225ba <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2256c:	2d01      	cmp	r5, #1
   2256e:	d024      	beq.n	225ba <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   22570:	b1fc      	cbz	r4, 225b2 <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   22572:	4630      	mov	r0, r6
   22574:	f7f4 ffde 	bl	17534 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   22578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2257c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   22580:	2b00      	cmp	r3, #0
   22582:	d1e9      	bne.n	22558 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22588:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   2258c:	2b00      	cmp	r3, #0
   2258e:	d0e3      	beq.n	22558 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22594:	2200      	movs	r2, #0
   22596:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2259a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   2259e:	2201      	movs	r2, #1
   225a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   225a4:	490c      	ldr	r1, [pc, #48]	; (225d8 <lfclk_spinwait+0xc8>)
   225a6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   225aa:	609a      	str	r2, [r3, #8]
}
   225ac:	e7d4      	b.n	22558 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
   225ae:	2600      	movs	r6, #0
   225b0:	e7cc      	b.n	2254c <lfclk_spinwait+0x3c>
				k_msleep(1);
   225b2:	2001      	movs	r0, #1
   225b4:	f00c ff22 	bl	2f3fc <k_msleep>
   225b8:	e7de      	b.n	22578 <lfclk_spinwait+0x68>
	if (isr_mode) {
   225ba:	b12c      	cbz	r4, 225c8 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   225bc:	f386 8811 	msr	BASEPRI, r6
   225c0:	f3bf 8f6f 	isb	sy
}
   225c4:	b002      	add	sp, #8
   225c6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   225c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   225cc:	2202      	movs	r2, #2
   225ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   225d2:	e7f7      	b.n	225c4 <lfclk_spinwait+0xb4>
   225d4:	20005d4a 	.word	0x20005d4a
   225d8:	e000e100 	.word	0xe000e100

000225dc <api_blocking_start>:
{
   225dc:	b500      	push	{lr}
   225de:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   225e0:	f8cd d000 	str.w	sp, [sp]
   225e4:	f8cd d004 	str.w	sp, [sp, #4]
   225e8:	2300      	movs	r3, #0
   225ea:	9302      	str	r3, [sp, #8]
   225ec:	2301      	movs	r3, #1
   225ee:	9303      	str	r3, [sp, #12]
   225f0:	ab04      	add	r3, sp, #16
   225f2:	9304      	str	r3, [sp, #16]
   225f4:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   225f6:	466b      	mov	r3, sp
   225f8:	4a06      	ldr	r2, [pc, #24]	; (22614 <api_blocking_start+0x38>)
   225fa:	f00c fedb 	bl	2f3b4 <api_start>
	if (err < 0) {
   225fe:	2800      	cmp	r0, #0
   22600:	db05      	blt.n	2260e <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   22602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   22606:	2300      	movs	r3, #0
   22608:	4668      	mov	r0, sp
   2260a:	f003 fe57 	bl	262bc <z_impl_k_sem_take>
}
   2260e:	b007      	add	sp, #28
   22610:	f85d fb04 	ldr.w	pc, [sp], #4
   22614:	0002f429 	.word	0x0002f429

00022618 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   22618:	b570      	push	{r4, r5, r6, lr}
   2261a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2261c:	2200      	movs	r2, #0
   2261e:	2101      	movs	r1, #1
   22620:	4610      	mov	r0, r2
   22622:	f00a f811 	bl	2c648 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   22626:	4811      	ldr	r0, [pc, #68]	; (2266c <clk_init+0x54>)
   22628:	f001 fdd0 	bl	241cc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2262c:	4b10      	ldr	r3, [pc, #64]	; (22670 <clk_init+0x58>)
   2262e:	4298      	cmp	r0, r3
   22630:	d119      	bne.n	22666 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   22632:	f00d ff65 	bl	30500 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   22636:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   22638:	2c01      	cmp	r4, #1
   2263a:	d812      	bhi.n	22662 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   2263c:	4621      	mov	r1, r4
   2263e:	4630      	mov	r0, r6
   22640:	f00c fe0b 	bl	2f25a <get_sub_data>
   22644:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   22646:	4621      	mov	r1, r4
   22648:	4630      	mov	r0, r6
   2264a:	f00c fe13 	bl	2f274 <get_onoff_manager>
   2264e:	4909      	ldr	r1, [pc, #36]	; (22674 <clk_init+0x5c>)
   22650:	f008 fa42 	bl	2aad8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   22654:	2800      	cmp	r0, #0
   22656:	db05      	blt.n	22664 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   22658:	2301      	movs	r3, #1
   2265a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   2265c:	441c      	add	r4, r3
   2265e:	b2e4      	uxtb	r4, r4
   22660:	e7ea      	b.n	22638 <clk_init+0x20>
	}

	return 0;
   22662:	2000      	movs	r0, #0
}
   22664:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   22666:	f06f 0004 	mvn.w	r0, #4
   2266a:	e7fb      	b.n	22664 <clk_init+0x4c>
   2266c:	00022435 	.word	0x00022435
   22670:	0bad0000 	.word	0x0bad0000
   22674:	00034c54 	.word	0x00034c54

00022678 <z_nrf_clock_control_get_onoff>:
{
   22678:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
   2267a:	b2c1      	uxtb	r1, r0
   2267c:	4801      	ldr	r0, [pc, #4]	; (22684 <z_nrf_clock_control_get_onoff+0xc>)
   2267e:	f00c fdf9 	bl	2f274 <get_onoff_manager>
}
   22682:	bd08      	pop	{r3, pc}
   22684:	00031a34 	.word	0x00031a34

00022688 <z_nrf_clock_control_lf_on>:
{
   22688:	b510      	push	{r4, lr}
   2268a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2268c:	4b10      	ldr	r3, [pc, #64]	; (226d0 <z_nrf_clock_control_lf_on+0x48>)
   2268e:	2101      	movs	r1, #1
   22690:	f3bf 8f5b 	dmb	ish
   22694:	e853 2f00 	ldrex	r2, [r3]
   22698:	e843 1000 	strex	r0, r1, [r3]
   2269c:	2800      	cmp	r0, #0
   2269e:	d1f9      	bne.n	22694 <z_nrf_clock_control_lf_on+0xc>
   226a0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   226a4:	b11a      	cbz	r2, 226ae <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   226a6:	1e63      	subs	r3, r4, #1
   226a8:	2b01      	cmp	r3, #1
   226aa:	d90d      	bls.n	226c8 <z_nrf_clock_control_lf_on+0x40>
}
   226ac:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   226ae:	4809      	ldr	r0, [pc, #36]	; (226d4 <z_nrf_clock_control_lf_on+0x4c>)
   226b0:	f00c fde0 	bl	2f274 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   226b4:	4908      	ldr	r1, [pc, #32]	; (226d8 <z_nrf_clock_control_lf_on+0x50>)
   226b6:	2300      	movs	r3, #0
   226b8:	604b      	str	r3, [r1, #4]
   226ba:	608b      	str	r3, [r1, #8]
   226bc:	60cb      	str	r3, [r1, #12]
   226be:	2301      	movs	r3, #1
   226c0:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   226c2:	f008 fa26 	bl	2ab12 <onoff_request>
   226c6:	e7ee      	b.n	226a6 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   226c8:	4620      	mov	r0, r4
   226ca:	f7ff ff21 	bl	22510 <lfclk_spinwait>
		break;
   226ce:	e7ed      	b.n	226ac <z_nrf_clock_control_lf_on+0x24>
   226d0:	20004920 	.word	0x20004920
   226d4:	00031a34 	.word	0x00031a34
   226d8:	20004910 	.word	0x20004910

000226dc <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   226dc:	b510      	push	{r4, lr}
   226de:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
   226e0:	280a      	cmp	r0, #10
   226e2:	d006      	beq.n	226f2 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   226e4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   226e6:	4806      	ldr	r0, [pc, #24]	; (22700 <console_out+0x24>)
   226e8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   226ea:	69db      	ldr	r3, [r3, #28]
   226ec:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
   226ee:	4620      	mov	r0, r4
   226f0:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   226f2:	4803      	ldr	r0, [pc, #12]	; (22700 <console_out+0x24>)
   226f4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   226f6:	69db      	ldr	r3, [r3, #28]
   226f8:	210d      	movs	r1, #13
   226fa:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   226fc:	e7f2      	b.n	226e4 <console_out+0x8>
   226fe:	bf00      	nop
   22700:	00031ac0 	.word	0x00031ac0

00022704 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   22704:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   22706:	4c04      	ldr	r4, [pc, #16]	; (22718 <uart_console_hook_install+0x14>)
   22708:	4620      	mov	r0, r4
   2270a:	f7f6 fa2f 	bl	18b6c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   2270e:	4620      	mov	r0, r4
   22710:	f7f0 fdbc 	bl	1328c <__printk_hook_install>
#endif
}
   22714:	bd10      	pop	{r4, pc}
   22716:	bf00      	nop
   22718:	000226dd 	.word	0x000226dd

0002271c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   2271c:	b508      	push	{r3, lr}
   2271e:	4805      	ldr	r0, [pc, #20]	; (22734 <uart_console_init+0x18>)
   22720:	f00e f92e 	bl	30980 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   22724:	b118      	cbz	r0, 2272e <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   22726:	f7ff ffed 	bl	22704 <uart_console_hook_install>

	return 0;
   2272a:	2000      	movs	r0, #0
}
   2272c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2272e:	f06f 0012 	mvn.w	r0, #18
   22732:	e7fb      	b.n	2272c <uart_console_init+0x10>
   22734:	00031ac0 	.word	0x00031ac0

00022738 <random_byte_get>:
	__asm__ volatile(
   22738:	f04f 0240 	mov.w	r2, #64	; 0x40
   2273c:	f3ef 8311 	mrs	r3, BASEPRI
   22740:	f382 8812 	msr	BASEPRI_MAX, r2
   22744:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   22748:	4a0a      	ldr	r2, [pc, #40]	; (22774 <random_byte_get+0x3c>)
   2274a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2274e:	b16a      	cbz	r2, 2276c <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   22750:	4a08      	ldr	r2, [pc, #32]	; (22774 <random_byte_get+0x3c>)
   22752:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   22756:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22758:	2100      	movs	r1, #0
   2275a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   2275e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   22762:	f383 8811 	msr	BASEPRI, r3
   22766:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   2276a:	4770      	bx	lr
	int retval = -EAGAIN;
   2276c:	f06f 000a 	mvn.w	r0, #10
   22770:	e7f7      	b.n	22762 <random_byte_get+0x2a>
   22772:	bf00      	nop
   22774:	4000d000 	.word	0x4000d000

00022778 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   22778:	b5f0      	push	{r4, r5, r6, r7, lr}
   2277a:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   2277c:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   2277e:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   22780:	f04f 0340 	mov.w	r3, #64	; 0x40
   22784:	f3ef 8011 	mrs	r0, BASEPRI
   22788:	f383 8812 	msr	BASEPRI_MAX, r3
   2278c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   22790:	f89e 6000 	ldrb.w	r6, [lr]
   22794:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   22796:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   2279a:	1bad      	subs	r5, r5, r6
   2279c:	4025      	ands	r5, r4
	if (available < len) {
   2279e:	42aa      	cmp	r2, r5
   227a0:	d900      	bls.n	227a4 <rng_pool_get+0x2c>
		len = available;
   227a2:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   227a4:	eb06 0c02 	add.w	ip, r6, r2
   227a8:	ea0c 0c04 	and.w	ip, ip, r4
   227ac:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   227b0:	f380 8811 	msr	BASEPRI, r0
   227b4:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   227b8:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   227ba:	e007      	b.n	227cc <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   227bc:	eb0e 0203 	add.w	r2, lr, r3
   227c0:	7952      	ldrb	r2, [r2, #5]
   227c2:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   227c6:	3301      	adds	r3, #1
   227c8:	4023      	ands	r3, r4
	while (likely(len--)) {
   227ca:	4662      	mov	r2, ip
   227cc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   227d0:	fa1f fc8c 	uxth.w	ip, ip
   227d4:	2a00      	cmp	r2, #0
   227d6:	d1f1      	bne.n	227bc <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   227d8:	42be      	cmp	r6, r7
   227da:	d10f      	bne.n	227fc <rng_pool_get+0x84>
	__asm__ volatile(
   227dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   227e0:	f3ef 8311 	mrs	r3, BASEPRI
   227e4:	f382 8812 	msr	BASEPRI_MAX, r2
   227e8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   227ec:	f89e 2000 	ldrb.w	r2, [lr]
   227f0:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   227f4:	f383 8811 	msr	BASEPRI, r3
   227f8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   227fc:	1a40      	subs	r0, r0, r1
   227fe:	b280      	uxth	r0, r0
	available = available - len;
   22800:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   22802:	f89e 3004 	ldrb.w	r3, [lr, #4]
   22806:	42ab      	cmp	r3, r5
   22808:	d302      	bcc.n	22810 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2280a:	4b02      	ldr	r3, [pc, #8]	; (22814 <rng_pool_get+0x9c>)
   2280c:	2201      	movs	r2, #1
   2280e:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   22810:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22812:	bf00      	nop
   22814:	4000d000 	.word	0x4000d000

00022818 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   22818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2281a:	460d      	mov	r5, r1
   2281c:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2281e:	f013 0f01 	tst.w	r3, #1
   22822:	d103      	bne.n	2282c <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   22824:	4826      	ldr	r0, [pc, #152]	; (228c0 <entropy_nrf5_get_entropy_isr+0xa8>)
   22826:	f7ff ffa7 	bl	22778 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   2282c:	b90a      	cbnz	r2, 22832 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   2282e:	4620      	mov	r0, r4
   22830:	e7fb      	b.n	2282a <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   22832:	f04f 0340 	mov.w	r3, #64	; 0x40
   22836:	f3ef 8611 	mrs	r6, BASEPRI
   2283a:	f383 8812 	msr	BASEPRI_MAX, r3
   2283e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   22842:	200d      	movs	r0, #13
   22844:	f7f4 ffd4 	bl	177f0 <arch_irq_is_enabled>
   22848:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2284a:	200d      	movs	r0, #13
   2284c:	f009 fef7 	bl	2c63e <arch_irq_disable>
	__asm__ volatile(
   22850:	f386 8811 	msr	BASEPRI, r6
   22854:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22858:	4b1a      	ldr	r3, [pc, #104]	; (228c4 <entropy_nrf5_get_entropy_isr+0xac>)
   2285a:	2200      	movs	r2, #0
   2285c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22860:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22864:	2201      	movs	r2, #1
   22866:	601a      	str	r2, [r3, #0]
   22868:	4b17      	ldr	r3, [pc, #92]	; (228c8 <entropy_nrf5_get_entropy_isr+0xb0>)
   2286a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2286e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22872:	4626      	mov	r6, r4
   22874:	e00b      	b.n	2288e <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   22876:	f04f 0340 	mov.w	r3, #64	; 0x40
   2287a:	f3ef 8011 	mrs	r0, BASEPRI
   2287e:	f383 8812 	msr	BASEPRI_MAX, r3
   22882:	f3bf 8f6f 	isb	sy
   22886:	f7f4 fe55 	bl	17534 <arch_cpu_atomic_idle>
}
   2288a:	e000      	b.n	2288e <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   2288c:	b18e      	cbz	r6, 228b2 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2288e:	4b0d      	ldr	r3, [pc, #52]	; (228c4 <entropy_nrf5_get_entropy_isr+0xac>)
   22890:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   22894:	2b00      	cmp	r3, #0
   22896:	d0ee      	beq.n	22876 <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   22898:	f7ff ff4e 	bl	22738 <random_byte_get>
   2289c:	4b0a      	ldr	r3, [pc, #40]	; (228c8 <entropy_nrf5_get_entropy_isr+0xb0>)
   2289e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   228a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   228a6:	2800      	cmp	r0, #0
   228a8:	dbf0      	blt.n	2288c <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   228aa:	3e01      	subs	r6, #1
   228ac:	b2b6      	uxth	r6, r6
   228ae:	55a8      	strb	r0, [r5, r6]
   228b0:	e7ec      	b.n	2288c <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   228b2:	2f00      	cmp	r7, #0
   228b4:	d0bb      	beq.n	2282e <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   228b6:	200d      	movs	r0, #13
   228b8:	f009 febc 	bl	2c634 <arch_irq_enable>
   228bc:	e7b7      	b.n	2282e <entropy_nrf5_get_entropy_isr+0x16>
   228be:	bf00      	nop
   228c0:	200049a8 	.word	0x200049a8
   228c4:	4000d000 	.word	0x4000d000
   228c8:	e000e100 	.word	0xe000e100

000228cc <isr>:
{
   228cc:	b510      	push	{r4, lr}
	byte = random_byte_get();
   228ce:	f7ff ff33 	bl	22738 <random_byte_get>
	if (byte < 0) {
   228d2:	2800      	cmp	r0, #0
   228d4:	db06      	blt.n	228e4 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   228d6:	b2c4      	uxtb	r4, r0
   228d8:	4621      	mov	r1, r4
   228da:	480a      	ldr	r0, [pc, #40]	; (22904 <isr+0x38>)
   228dc:	f00c fda9 	bl	2f432 <rng_pool_put>
	if (ret < 0) {
   228e0:	2800      	cmp	r0, #0
   228e2:	db00      	blt.n	228e6 <isr+0x1a>
}
   228e4:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   228e6:	4621      	mov	r1, r4
   228e8:	4807      	ldr	r0, [pc, #28]	; (22908 <isr+0x3c>)
   228ea:	f00c fda2 	bl	2f432 <rng_pool_put>
		if (ret < 0) {
   228ee:	2800      	cmp	r0, #0
   228f0:	db03      	blt.n	228fa <isr+0x2e>
	z_impl_k_sem_give(sem);
   228f2:	4806      	ldr	r0, [pc, #24]	; (2290c <isr+0x40>)
   228f4:	f003 fcba 	bl	2626c <z_impl_k_sem_give>
}
   228f8:	e7f4      	b.n	228e4 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   228fa:	4b05      	ldr	r3, [pc, #20]	; (22910 <isr+0x44>)
   228fc:	2201      	movs	r2, #1
   228fe:	605a      	str	r2, [r3, #4]
}
   22900:	e7f7      	b.n	228f2 <isr+0x26>
   22902:	bf00      	nop
   22904:	200049a8 	.word	0x200049a8
   22908:	200049bd 	.word	0x200049bd
   2290c:	20004990 	.word	0x20004990
   22910:	4000d000 	.word	0x4000d000

00022914 <entropy_nrf5_get_entropy>:
{
   22914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22916:	460f      	mov	r7, r1
   22918:	4614      	mov	r4, r2
	while (len) {
   2291a:	e007      	b.n	2292c <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   2291c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22924:	f106 0018 	add.w	r0, r6, #24
   22928:	f003 fcc8 	bl	262bc <z_impl_k_sem_take>
   2292c:	b1bc      	cbz	r4, 2295e <entropy_nrf5_get_entropy+0x4a>
   2292e:	4e0d      	ldr	r6, [pc, #52]	; (22964 <entropy_nrf5_get_entropy+0x50>)
   22930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22938:	4630      	mov	r0, r6
   2293a:	f003 fcbf 	bl	262bc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2293e:	4622      	mov	r2, r4
   22940:	4639      	mov	r1, r7
   22942:	f106 0045 	add.w	r0, r6, #69	; 0x45
   22946:	f7ff ff17 	bl	22778 <rng_pool_get>
   2294a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   2294c:	4630      	mov	r0, r6
   2294e:	f003 fc8d 	bl	2626c <z_impl_k_sem_give>
		if (bytes == 0U) {
   22952:	2d00      	cmp	r5, #0
   22954:	d0e2      	beq.n	2291c <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   22956:	1b64      	subs	r4, r4, r5
   22958:	b2a4      	uxth	r4, r4
		buf += bytes;
   2295a:	442f      	add	r7, r5
   2295c:	e7e6      	b.n	2292c <entropy_nrf5_get_entropy+0x18>
}
   2295e:	2000      	movs	r0, #0
   22960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22962:	bf00      	nop
   22964:	20004978 	.word	0x20004978

00022968 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   22968:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2296a:	4c18      	ldr	r4, [pc, #96]	; (229cc <entropy_nrf5_init+0x64>)
   2296c:	2201      	movs	r2, #1
   2296e:	4611      	mov	r1, r2
   22970:	4620      	mov	r0, r4
   22972:	f00e fa17 	bl	30da4 <z_impl_k_sem_init>
   22976:	2201      	movs	r2, #1
   22978:	2100      	movs	r1, #0
   2297a:	f104 0018 	add.w	r0, r4, #24
   2297e:	f00e fa11 	bl	30da4 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   22982:	2204      	movs	r2, #4
   22984:	2108      	movs	r1, #8
   22986:	f104 0045 	add.w	r0, r4, #69	; 0x45
   2298a:	f00c fd65 	bl	2f458 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   2298e:	220c      	movs	r2, #12
   22990:	2110      	movs	r1, #16
   22992:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22996:	f00c fd5f 	bl	2f458 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   2299a:	4b0d      	ldr	r3, [pc, #52]	; (229d0 <entropy_nrf5_init+0x68>)
   2299c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   229a0:	f022 0201 	bic.w	r2, r2, #1
   229a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   229a8:	2400      	movs	r4, #0
   229aa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   229ae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   229b2:	2101      	movs	r1, #1
   229b4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   229b8:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   229ba:	4622      	mov	r2, r4
   229bc:	200d      	movs	r0, #13
   229be:	f009 fe43 	bl	2c648 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   229c2:	200d      	movs	r0, #13
   229c4:	f009 fe36 	bl	2c634 <arch_irq_enable>

	return 0;
}
   229c8:	4620      	mov	r0, r4
   229ca:	bd10      	pop	{r4, pc}
   229cc:	20004978 	.word	0x20004978
   229d0:	4000d000 	.word	0x4000d000

000229d4 <nrf_gpio_pin_write>:
}


NRF_STATIC_INLINE void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value)
{
    if (value == 0)
   229d4:	b969      	cbnz	r1, 229f2 <nrf_gpio_pin_write+0x1e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   229d6:	f000 011f 	and.w	r1, r0, #31

    return pin_number >> 5;
   229da:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   229dc:	2801      	cmp	r0, #1
   229de:	d006      	beq.n	229ee <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   229e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   229e4:	2301      	movs	r3, #1
   229e6:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   229e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   229ec:	4770      	bx	lr
        case 1: return NRF_P1;
   229ee:	4a08      	ldr	r2, [pc, #32]	; (22a10 <nrf_gpio_pin_write+0x3c>)
   229f0:	e7f8      	b.n	229e4 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   229f2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   229f6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   229f8:	2801      	cmp	r0, #1
   229fa:	d006      	beq.n	22a0a <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   229fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22a00:	2301      	movs	r3, #1
   22a02:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   22a04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   22a08:	4770      	bx	lr
        case 1: return NRF_P1;
   22a0a:	4a01      	ldr	r2, [pc, #4]	; (22a10 <nrf_gpio_pin_write+0x3c>)
   22a0c:	e7f8      	b.n	22a00 <nrf_gpio_pin_write+0x2c>
   22a0e:	bf00      	nop
   22a10:	50000300 	.word	0x50000300

00022a14 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   22a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a18:	4606      	mov	r6, r0
   22a1a:	460f      	mov	r7, r1
   22a1c:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22a1e:	2400      	movs	r4, #0
   22a20:	e027      	b.n	22a72 <pinctrl_configure_pins+0x5e>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   22a22:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22a26:	e030      	b.n	22a8a <pinctrl_configure_pins+0x76>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   22a28:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22a2c:	f04f 0b01 	mov.w	fp, #1
			write = 1U;
   22a30:	4659      	mov	r1, fp
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   22a32:	2d7f      	cmp	r5, #127	; 0x7f
   22a34:	d01b      	beq.n	22a6e <pinctrl_configure_pins+0x5a>
			if (write != NO_WRITE) {
   22a36:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   22a3a:	d149      	bne.n	22ad0 <pinctrl_configure_pins+0xbc>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   22a3c:	f856 200a 	ldr.w	r2, [r6, sl]
   22a40:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   22a44:	d148      	bne.n	22ad8 <pinctrl_configure_pins+0xc4>
   22a46:	46dc      	mov	ip, fp
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   22a48:	f3c2 12c1 	ubfx	r2, r2, #7, #2
    *p_pin = pin_number & 0x1F;
   22a4c:	f005 011f 	and.w	r1, r5, #31
    return pin_number >> 5;
   22a50:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22a52:	2d01      	cmp	r5, #1
   22a54:	d045      	beq.n	22ae2 <pinctrl_configure_pins+0xce>
        case 0: return NRF_P0;
   22a56:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   22a5a:	ea4b 034c 	orr.w	r3, fp, ip, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   22a5e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22a62:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   22a66:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   22a6a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22a6e:	3401      	adds	r4, #1
   22a70:	b2e4      	uxtb	r4, r4
   22a72:	42bc      	cmp	r4, r7
   22a74:	d237      	bcs.n	22ae6 <pinctrl_configure_pins+0xd2>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   22a76:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   22a7a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22a7e:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   22a82:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   22a86:	2d7f      	cmp	r5, #127	; 0x7f
   22a88:	d0cb      	beq.n	22a22 <pinctrl_configure_pins+0xe>
		switch (NRF_GET_FUN(pins[i])) {
   22a8a:	0c1b      	lsrs	r3, r3, #16
   22a8c:	2b03      	cmp	r3, #3
   22a8e:	d82d      	bhi.n	22aec <pinctrl_configure_pins+0xd8>
   22a90:	a201      	add	r2, pc, #4	; (adr r2, 22a98 <pinctrl_configure_pins+0x84>)
   22a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22a96:	bf00      	nop
   22a98:	00022a29 	.word	0x00022a29
   22a9c:	00022aa9 	.word	0x00022aa9
   22aa0:	00022ab7 	.word	0x00022ab7
   22aa4:	00022ac3 	.word	0x00022ac3
			NRF_PSEL_UART(reg, RXD) = pin;
   22aa8:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
   22aac:	f04f 0b00 	mov.w	fp, #0
		uint32_t write = NO_WRITE;
   22ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   22ab4:	e7bd      	b.n	22a32 <pinctrl_configure_pins+0x1e>
			NRF_PSEL_UART(reg, RTS) = pin;
   22ab6:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22aba:	f04f 0b01 	mov.w	fp, #1
			write = 1U;
   22abe:	4659      	mov	r1, fp
			break;
   22ac0:	e7b7      	b.n	22a32 <pinctrl_configure_pins+0x1e>
			NRF_PSEL_UART(reg, CTS) = pin;
   22ac2:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
   22ac6:	f04f 0b00 	mov.w	fp, #0
		uint32_t write = NO_WRITE;
   22aca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   22ace:	e7b0      	b.n	22a32 <pinctrl_configure_pins+0x1e>
				nrf_gpio_pin_write(pin, write);
   22ad0:	4628      	mov	r0, r5
   22ad2:	f7ff ff7f 	bl	229d4 <nrf_gpio_pin_write>
   22ad6:	e7b1      	b.n	22a3c <pinctrl_configure_pins+0x28>
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22ad8:	f04f 0c01 	mov.w	ip, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   22adc:	f04f 0b00 	mov.w	fp, #0
   22ae0:	e7b2      	b.n	22a48 <pinctrl_configure_pins+0x34>
        case 1: return NRF_P1;
   22ae2:	4804      	ldr	r0, [pc, #16]	; (22af4 <pinctrl_configure_pins+0xe0>)
   22ae4:	e7b9      	b.n	22a5a <pinctrl_configure_pins+0x46>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   22ae6:	2000      	movs	r0, #0
}
   22ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (NRF_GET_FUN(pins[i])) {
   22aec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22af0:	e7fa      	b.n	22ae8 <pinctrl_configure_pins+0xd4>
   22af2:	bf00      	nop
   22af4:	50000300 	.word	0x50000300

00022af8 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   22af8:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   22afa:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   22afc:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   22b00:	d06f      	beq.n	22be2 <baudrate_set+0xea>
   22b02:	d83a      	bhi.n	22b7a <baudrate_set+0x82>
   22b04:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   22b08:	d06e      	beq.n	22be8 <baudrate_set+0xf0>
   22b0a:	d90a      	bls.n	22b22 <baudrate_set+0x2a>
   22b0c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   22b10:	d075      	beq.n	22bfe <baudrate_set+0x106>
   22b12:	d924      	bls.n	22b5e <baudrate_set+0x66>
   22b14:	f647 2312 	movw	r3, #31250	; 0x7a12
   22b18:	4299      	cmp	r1, r3
   22b1a:	d12b      	bne.n	22b74 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   22b1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   22b20:	e013      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22b22:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   22b26:	d061      	beq.n	22bec <baudrate_set+0xf4>
   22b28:	d907      	bls.n	22b3a <baudrate_set+0x42>
   22b2a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   22b2e:	d063      	beq.n	22bf8 <baudrate_set+0x100>
   22b30:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   22b34:	d110      	bne.n	22b58 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   22b36:	4b3c      	ldr	r3, [pc, #240]	; (22c28 <baudrate_set+0x130>)
   22b38:	e007      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22b3a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   22b3e:	d058      	beq.n	22bf2 <baudrate_set+0xfa>
   22b40:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   22b44:	d105      	bne.n	22b52 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   22b46:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22b4a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   22b4e:	2000      	movs	r0, #0
   22b50:	4770      	bx	lr
	switch (baudrate) {
   22b52:	f06f 0015 	mvn.w	r0, #21
   22b56:	4770      	bx	lr
   22b58:	f06f 0015 	mvn.w	r0, #21
   22b5c:	4770      	bx	lr
   22b5e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   22b62:	d04e      	beq.n	22c02 <baudrate_set+0x10a>
   22b64:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   22b68:	d101      	bne.n	22b6e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   22b6a:	4b30      	ldr	r3, [pc, #192]	; (22c2c <baudrate_set+0x134>)
   22b6c:	e7ed      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22b6e:	f06f 0015 	mvn.w	r0, #21
   22b72:	4770      	bx	lr
   22b74:	f06f 0015 	mvn.w	r0, #21
   22b78:	4770      	bx	lr
   22b7a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   22b7e:	d042      	beq.n	22c06 <baudrate_set+0x10e>
   22b80:	d909      	bls.n	22b96 <baudrate_set+0x9e>
   22b82:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   22b86:	d046      	beq.n	22c16 <baudrate_set+0x11e>
   22b88:	d91f      	bls.n	22bca <baudrate_set+0xd2>
   22b8a:	4b29      	ldr	r3, [pc, #164]	; (22c30 <baudrate_set+0x138>)
   22b8c:	4299      	cmp	r1, r3
   22b8e:	d148      	bne.n	22c22 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   22b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22b94:	e7d9      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22b96:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   22b9a:	d037      	beq.n	22c0c <baudrate_set+0x114>
   22b9c:	d905      	bls.n	22baa <baudrate_set+0xb2>
   22b9e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   22ba2:	d10f      	bne.n	22bc4 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   22ba4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   22ba8:	e7cf      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22baa:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   22bae:	4299      	cmp	r1, r3
   22bb0:	d02e      	beq.n	22c10 <baudrate_set+0x118>
   22bb2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   22bb6:	d102      	bne.n	22bbe <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   22bb8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   22bbc:	e7c5      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22bbe:	f06f 0015 	mvn.w	r0, #21
   22bc2:	4770      	bx	lr
   22bc4:	f06f 0015 	mvn.w	r0, #21
   22bc8:	4770      	bx	lr
   22bca:	4b1a      	ldr	r3, [pc, #104]	; (22c34 <baudrate_set+0x13c>)
   22bcc:	4299      	cmp	r1, r3
   22bce:	d025      	beq.n	22c1c <baudrate_set+0x124>
   22bd0:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   22bd4:	d102      	bne.n	22bdc <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22bd6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22bda:	e7b6      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22bdc:	f06f 0015 	mvn.w	r0, #21
   22be0:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   22be2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   22be6:	e7b0      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   22be8:	4b13      	ldr	r3, [pc, #76]	; (22c38 <baudrate_set+0x140>)
   22bea:	e7ae      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   22bec:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   22bf0:	e7ab      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22bf2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22bf6:	e7a8      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   22bf8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   22bfc:	e7a5      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   22bfe:	4b0f      	ldr	r3, [pc, #60]	; (22c3c <baudrate_set+0x144>)
   22c00:	e7a3      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22c02:	4b0f      	ldr	r3, [pc, #60]	; (22c40 <baudrate_set+0x148>)
   22c04:	e7a1      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   22c06:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   22c0a:	e79e      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   22c0c:	4b0d      	ldr	r3, [pc, #52]	; (22c44 <baudrate_set+0x14c>)
   22c0e:	e79c      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   22c10:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   22c14:	e799      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   22c16:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22c1a:	e796      	b.n	22b4a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   22c1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22c20:	e793      	b.n	22b4a <baudrate_set+0x52>
	switch (baudrate) {
   22c22:	f06f 0015 	mvn.w	r0, #21
}
   22c26:	4770      	bx	lr
   22c28:	0013b000 	.word	0x0013b000
   22c2c:	004ea000 	.word	0x004ea000
   22c30:	000f4240 	.word	0x000f4240
   22c34:	0003d090 	.word	0x0003d090
   22c38:	00275000 	.word	0x00275000
   22c3c:	0075c000 	.word	0x0075c000
   22c40:	003af000 	.word	0x003af000
   22c44:	013a9000 	.word	0x013a9000

00022c48 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   22c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c4a:	4605      	mov	r5, r0
   22c4c:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   22c4e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22c50:	f00d ff90 	bl	30b74 <k_is_in_isr>
   22c54:	b910      	cbnz	r0, 22c5c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   22c56:	4b12      	ldr	r3, [pc, #72]	; (22ca0 <uarte_nrfx_poll_out+0x58>)
   22c58:	781b      	ldrb	r3, [r3, #0]
   22c5a:	b983      	cbnz	r3, 22c7e <uarte_nrfx_poll_out+0x36>
   22c5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c60:	f3ef 8411 	mrs	r4, BASEPRI
   22c64:	f383 8812 	msr	BASEPRI_MAX, r3
   22c68:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   22c6c:	4628      	mov	r0, r5
   22c6e:	f00c fd4f 	bl	2f710 <is_tx_ready>
   22c72:	b940      	cbnz	r0, 22c86 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   22c74:	f384 8811 	msr	BASEPRI, r4
   22c78:	f3bf 8f6f 	isb	sy
}
   22c7c:	e7ee      	b.n	22c5c <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   22c7e:	4628      	mov	r0, r5
   22c80:	f00c ff3b 	bl	2fafa <wait_tx_ready>
   22c84:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   22c86:	697b      	ldr	r3, [r7, #20]
   22c88:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   22c8a:	2201      	movs	r2, #1
   22c8c:	6979      	ldr	r1, [r7, #20]
   22c8e:	4628      	mov	r0, r5
   22c90:	f00c feb3 	bl	2f9fa <tx_start>
	__asm__ volatile(
   22c94:	f384 8811 	msr	BASEPRI, r4
   22c98:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   22c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c9e:	bf00      	nop
   22ca0:	20005d4a 	.word	0x20005d4a

00022ca4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   22ca4:	b530      	push	{r4, r5, lr}
   22ca6:	b089      	sub	sp, #36	; 0x24
   22ca8:	4604      	mov	r4, r0
   22caa:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   22cac:	f101 001c 	add.w	r0, r1, #28
   22cb0:	f001 fc4c 	bl	2454c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   22cb4:	4b1d      	ldr	r3, [pc, #116]	; (22d2c <endtx_stoptx_ppi_init+0x88>)
   22cb6:	4298      	cmp	r0, r3
   22cb8:	d112      	bne.n	22ce0 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   22cba:	7f2b      	ldrb	r3, [r5, #28]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   22cbc:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   22cc0:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   22cc2:	4a1b      	ldr	r2, [pc, #108]	; (22d30 <endtx_stoptx_ppi_init+0x8c>)
   22cc4:	33a2      	adds	r3, #162	; 0xa2
   22cc6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   22cca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   22cce:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   22cd0:	7f29      	ldrb	r1, [r5, #28]
   22cd2:	2301      	movs	r3, #1
   22cd4:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   22cd6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   22cda:	2000      	movs	r0, #0
}
   22cdc:	b009      	add	sp, #36	; 0x24
   22cde:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   22ce0:	4b14      	ldr	r3, [pc, #80]	; (22d34 <endtx_stoptx_ppi_init+0x90>)
   22ce2:	9307      	str	r3, [sp, #28]
   22ce4:	2302      	movs	r3, #2
   22ce6:	f88d 3004 	strb.w	r3, [sp, #4]
   22cea:	2300      	movs	r3, #0
   22cec:	f88d 3005 	strb.w	r3, [sp, #5]
   22cf0:	f88d 3006 	strb.w	r3, [sp, #6]
   22cf4:	f88d 3007 	strb.w	r3, [sp, #7]
   22cf8:	9a01      	ldr	r2, [sp, #4]
   22cfa:	9206      	str	r2, [sp, #24]
   22cfc:	4619      	mov	r1, r3
   22cfe:	f363 0100 	bfi	r1, r3, #0, #1
   22d02:	f363 0141 	bfi	r1, r3, #1, #1
   22d06:	f363 0182 	bfi	r1, r3, #2, #1
   22d0a:	f363 01c5 	bfi	r1, r3, #3, #3
   22d0e:	2201      	movs	r2, #1
   22d10:	f362 1188 	bfi	r1, r2, #6, #3
   22d14:	2208      	movs	r2, #8
   22d16:	f362 2153 	bfi	r1, r2, #9, #11
   22d1a:	f363 511f 	bfi	r1, r3, #20, #12
   22d1e:	aa06      	add	r2, sp, #24
   22d20:	4805      	ldr	r0, [pc, #20]	; (22d38 <endtx_stoptx_ppi_init+0x94>)
   22d22:	f7f1 f9eb 	bl	140fc <z_impl_z_log_msg_static_create>
		return -EIO;
   22d26:	f06f 0004 	mvn.w	r0, #4
   22d2a:	e7d7      	b.n	22cdc <endtx_stoptx_ppi_init+0x38>
   22d2c:	0bad0000 	.word	0x0bad0000
   22d30:	4001f000 	.word	0x4001f000
   22d34:	00034d0c 	.word	0x00034d0c
   22d38:	00031db4 	.word	0x00031db4

00022d3c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22d3c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   22d40:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   22d44:	4b01      	ldr	r3, [pc, #4]	; (22d4c <set_comparator+0x10>)
   22d46:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   22d4a:	4770      	bx	lr
   22d4c:	40011000 	.word	0x40011000

00022d50 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22d54:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   22d56:	4a02      	ldr	r2, [pc, #8]	; (22d60 <event_enable+0x10>)
   22d58:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   22d5c:	4770      	bx	lr
   22d5e:	bf00      	nop
   22d60:	40011000 	.word	0x40011000

00022d64 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22d68:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   22d6a:	4a02      	ldr	r2, [pc, #8]	; (22d74 <event_disable+0x10>)
   22d6c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   22d70:	4770      	bx	lr
   22d72:	bf00      	nop
   22d74:	40011000 	.word	0x40011000

00022d78 <counter>:
     return p_reg->COUNTER;
   22d78:	4b01      	ldr	r3, [pc, #4]	; (22d80 <counter+0x8>)
   22d7a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   22d7e:	4770      	bx	lr
   22d80:	40011000 	.word	0x40011000

00022d84 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   22d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d88:	4606      	mov	r6, r0
   22d8a:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   22d8c:	f7ff ffea 	bl	22d64 <event_disable>
	event_clear(chan);
   22d90:	4630      	mov	r0, r6
   22d92:	f00c ff4b 	bl	2fc2c <event_clear>
	uint32_t cc_val = req_cc;
   22d96:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   22d98:	2703      	movs	r7, #3
   22d9a:	e001      	b.n	22da0 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   22d9c:	193d      	adds	r5, r7, r4
			cc_inc++;
   22d9e:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   22da0:	4629      	mov	r1, r5
   22da2:	4630      	mov	r0, r6
   22da4:	f7ff ffca 	bl	22d3c <set_comparator>
		event_enable(chan);
   22da8:	4630      	mov	r0, r6
   22daa:	f7ff ffd1 	bl	22d50 <event_enable>
		now = counter();
   22dae:	f7ff ffe3 	bl	22d78 <counter>
   22db2:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   22db4:	1cc1      	adds	r1, r0, #3
   22db6:	4628      	mov	r0, r5
   22db8:	f00c ff27 	bl	2fc0a <counter_sub>
   22dbc:	4b0b      	ldr	r3, [pc, #44]	; (22dec <set_alarm+0x68>)
   22dbe:	4298      	cmp	r0, r3
   22dc0:	d911      	bls.n	22de6 <set_alarm+0x62>
			if (event_check(chan)) {
   22dc2:	4630      	mov	r0, r6
   22dc4:	f00c ff25 	bl	2fc12 <event_check>
   22dc8:	2800      	cmp	r0, #0
   22dca:	d0e7      	beq.n	22d9c <set_alarm+0x18>
				now = counter();
   22dcc:	f7ff ffd4 	bl	22d78 <counter>
   22dd0:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   22dd2:	4641      	mov	r1, r8
   22dd4:	f00c ff19 	bl	2fc0a <counter_sub>
   22dd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22ddc:	d903      	bls.n	22de6 <set_alarm+0x62>
					event_clear(chan);
   22dde:	4630      	mov	r0, r6
   22de0:	f00c ff24 	bl	2fc2c <event_clear>
   22de4:	e7da      	b.n	22d9c <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   22de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22dea:	bf00      	nop
   22dec:	007ffffd 	.word	0x007ffffd

00022df0 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
   22df0:	4b03      	ldr	r3, [pc, #12]	; (22e00 <int_event_disable_rtc+0x10>)
   22df2:	4a04      	ldr	r2, [pc, #16]	; (22e04 <int_event_disable_rtc+0x14>)
   22df4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   22df8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
   22dfc:	4770      	bx	lr
   22dfe:	bf00      	nop
   22e00:	40011000 	.word	0x40011000
   22e04:	000f0003 	.word	0x000f0003

00022e08 <compare_int_lock>:
{
   22e08:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22e0a:	2301      	movs	r3, #1
   22e0c:	4083      	lsls	r3, r0
   22e0e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22e12:	4a0e      	ldr	r2, [pc, #56]	; (22e4c <compare_int_lock+0x44>)
   22e14:	f3bf 8f5b 	dmb	ish
   22e18:	e852 1f00 	ldrex	r1, [r2]
   22e1c:	ea01 0e0c 	and.w	lr, r1, ip
   22e20:	e842 e400 	strex	r4, lr, [r2]
   22e24:	2c00      	cmp	r4, #0
   22e26:	d1f7      	bne.n	22e18 <compare_int_lock+0x10>
   22e28:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22e2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22e30:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   22e32:	4807      	ldr	r0, [pc, #28]	; (22e50 <compare_int_lock+0x48>)
   22e34:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   22e38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22e3c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   22e40:	420b      	tst	r3, r1
}
   22e42:	bf14      	ite	ne
   22e44:	2001      	movne	r0, #1
   22e46:	2000      	moveq	r0, #0
   22e48:	bd10      	pop	{r4, pc}
   22e4a:	bf00      	nop
   22e4c:	200049f0 	.word	0x200049f0
   22e50:	40011000 	.word	0x40011000

00022e54 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22e58:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   22e5a:	4a14      	ldr	r2, [pc, #80]	; (22eac <channel_processing_check_and_clear+0x58>)
   22e5c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   22e60:	4213      	tst	r3, r2
   22e62:	d101      	bne.n	22e68 <channel_processing_check_and_clear+0x14>
	return false;
   22e64:	2000      	movs	r0, #0
}
   22e66:	4770      	bx	lr
{
   22e68:	b510      	push	{r4, lr}
   22e6a:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   22e6c:	2301      	movs	r3, #1
   22e6e:	4083      	lsls	r3, r0
   22e70:	43db      	mvns	r3, r3
   22e72:	490f      	ldr	r1, [pc, #60]	; (22eb0 <channel_processing_check_and_clear+0x5c>)
   22e74:	f3bf 8f5b 	dmb	ish
   22e78:	e851 2f00 	ldrex	r2, [r1]
   22e7c:	ea02 0003 	and.w	r0, r2, r3
   22e80:	e841 0c00 	strex	ip, r0, [r1]
   22e84:	f1bc 0f00 	cmp.w	ip, #0
   22e88:	d1f6      	bne.n	22e78 <channel_processing_check_and_clear+0x24>
   22e8a:	f3bf 8f5b 	dmb	ish
   22e8e:	fa22 f304 	lsr.w	r3, r2, r4
   22e92:	f013 0f01 	tst.w	r3, #1
   22e96:	d103      	bne.n	22ea0 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   22e98:	4620      	mov	r0, r4
   22e9a:	f00c feba 	bl	2fc12 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   22e9e:	b118      	cbz	r0, 22ea8 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   22ea0:	4620      	mov	r0, r4
   22ea2:	f00c fec3 	bl	2fc2c <event_clear>
			return true;
   22ea6:	2001      	movs	r0, #1
}
   22ea8:	bd10      	pop	{r4, pc}
   22eaa:	bf00      	nop
   22eac:	40011000 	.word	0x40011000
   22eb0:	200049ec 	.word	0x200049ec

00022eb4 <compare_int_unlock>:
	if (key) {
   22eb4:	b901      	cbnz	r1, 22eb8 <compare_int_unlock+0x4>
}
   22eb6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   22eb8:	2301      	movs	r3, #1
   22eba:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ebc:	4a11      	ldr	r2, [pc, #68]	; (22f04 <compare_int_unlock+0x50>)
   22ebe:	f3bf 8f5b 	dmb	ish
   22ec2:	e852 cf00 	ldrex	ip, [r2]
   22ec6:	ea4c 0c03 	orr.w	ip, ip, r3
   22eca:	e842 c100 	strex	r1, ip, [r2]
   22ece:	2900      	cmp	r1, #0
   22ed0:	d1f7      	bne.n	22ec2 <compare_int_unlock+0xe>
   22ed2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22eda:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   22edc:	4a0a      	ldr	r2, [pc, #40]	; (22f08 <compare_int_unlock+0x54>)
   22ede:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22ee2:	f3bf 8f5b 	dmb	ish
   22ee6:	4b09      	ldr	r3, [pc, #36]	; (22f0c <compare_int_unlock+0x58>)
   22ee8:	681b      	ldr	r3, [r3, #0]
   22eea:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22eee:	40c3      	lsrs	r3, r0
   22ef0:	f013 0f01 	tst.w	r3, #1
   22ef4:	d0df      	beq.n	22eb6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22ef6:	4b06      	ldr	r3, [pc, #24]	; (22f10 <compare_int_unlock+0x5c>)
   22ef8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   22efc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   22f00:	e7d9      	b.n	22eb6 <compare_int_unlock+0x2>
   22f02:	bf00      	nop
   22f04:	200049f0 	.word	0x200049f0
   22f08:	40011000 	.word	0x40011000
   22f0c:	200049ec 	.word	0x200049ec
   22f10:	e000e100 	.word	0xe000e100

00022f14 <sys_clock_timeout_handler>:
{
   22f14:	b538      	push	{r3, r4, r5, lr}
   22f16:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   22f18:	4610      	mov	r0, r2
   22f1a:	4619      	mov	r1, r3
   22f1c:	f00c fe92 	bl	2fc44 <absolute_time_to_cc>
   22f20:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   22f22:	490d      	ldr	r1, [pc, #52]	; (22f58 <sys_clock_timeout_handler+0x44>)
   22f24:	680b      	ldr	r3, [r1, #0]
   22f26:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   22f28:	181b      	adds	r3, r3, r0
   22f2a:	684c      	ldr	r4, [r1, #4]
   22f2c:	f144 0400 	adc.w	r4, r4, #0
   22f30:	600b      	str	r3, [r1, #0]
   22f32:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22f34:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   22f38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22f3c:	d209      	bcs.n	22f52 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22f3e:	4b07      	ldr	r3, [pc, #28]	; (22f5c <sys_clock_timeout_handler+0x48>)
   22f40:	681b      	ldr	r3, [r3, #0]
   22f42:	0a19      	lsrs	r1, r3, #8
   22f44:	061b      	lsls	r3, r3, #24
   22f46:	18d4      	adds	r4, r2, r3
   22f48:	f141 0500 	adc.w	r5, r1, #0
   22f4c:	4b04      	ldr	r3, [pc, #16]	; (22f60 <sys_clock_timeout_handler+0x4c>)
   22f4e:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   22f52:	f004 f851 	bl	26ff8 <sys_clock_announce>
}
   22f56:	bd38      	pop	{r3, r4, r5, pc}
   22f58:	20002450 	.word	0x20002450
   22f5c:	200049f4 	.word	0x200049f4
   22f60:	20002458 	.word	0x20002458

00022f64 <z_nrf_rtc_timer_read>:
{
   22f64:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22f66:	4b0d      	ldr	r3, [pc, #52]	; (22f9c <z_nrf_rtc_timer_read+0x38>)
   22f68:	681c      	ldr	r4, [r3, #0]
   22f6a:	0a25      	lsrs	r5, r4, #8
   22f6c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22f6e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   22f72:	f7ff ff01 	bl	22d78 <counter>
   22f76:	4603      	mov	r3, r0
	val += cntr;
   22f78:	1900      	adds	r0, r0, r4
   22f7a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22f82:	d20a      	bcs.n	22f9a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   22f84:	4b06      	ldr	r3, [pc, #24]	; (22fa0 <z_nrf_rtc_timer_read+0x3c>)
   22f86:	e9d3 2300 	ldrd	r2, r3, [r3]
   22f8a:	4290      	cmp	r0, r2
   22f8c:	eb71 0303 	sbcs.w	r3, r1, r3
   22f90:	d203      	bcs.n	22f9a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   22f92:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22f96:	f141 0100 	adc.w	r1, r1, #0
}
   22f9a:	bd38      	pop	{r3, r4, r5, pc}
   22f9c:	200049f4 	.word	0x200049f4
   22fa0:	20002458 	.word	0x20002458

00022fa4 <compare_set_nolocks>:
{
   22fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22fa6:	4606      	mov	r6, r0
   22fa8:	4614      	mov	r4, r2
   22faa:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   22fac:	4610      	mov	r0, r2
   22fae:	4619      	mov	r1, r3
   22fb0:	f00c fe48 	bl	2fc44 <absolute_time_to_cc>
   22fb4:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22fb6:	f7ff ffd5 	bl	22f64 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22fba:	42a0      	cmp	r0, r4
   22fbc:	eb71 0305 	sbcs.w	r3, r1, r5
   22fc0:	d215      	bcs.n	22fee <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   22fc2:	1a20      	subs	r0, r4, r0
   22fc4:	eb65 0101 	sbc.w	r1, r5, r1
   22fc8:	4b17      	ldr	r3, [pc, #92]	; (23028 <compare_set_nolocks+0x84>)
   22fca:	4298      	cmp	r0, r3
   22fcc:	f171 0100 	sbcs.w	r1, r1, #0
   22fd0:	d227      	bcs.n	23022 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   22fd2:	4b16      	ldr	r3, [pc, #88]	; (2302c <compare_set_nolocks+0x88>)
   22fd4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   22fd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   22fdc:	42ab      	cmp	r3, r5
   22fde:	bf08      	it	eq
   22fe0:	42a2      	cmpeq	r2, r4
   22fe2:	d012      	beq.n	2300a <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   22fe4:	4639      	mov	r1, r7
   22fe6:	4630      	mov	r0, r6
   22fe8:	f7ff fecc 	bl	22d84 <set_alarm>
   22fec:	e00d      	b.n	2300a <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   22fee:	2301      	movs	r3, #1
   22ff0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ff2:	4a0f      	ldr	r2, [pc, #60]	; (23030 <compare_set_nolocks+0x8c>)
   22ff4:	f3bf 8f5b 	dmb	ish
   22ff8:	e852 0f00 	ldrex	r0, [r2]
   22ffc:	4318      	orrs	r0, r3
   22ffe:	e842 0100 	strex	r1, r0, [r2]
   23002:	2900      	cmp	r1, #0
   23004:	d1f8      	bne.n	22ff8 <compare_set_nolocks+0x54>
   23006:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   2300a:	4b08      	ldr	r3, [pc, #32]	; (2302c <compare_set_nolocks+0x88>)
   2300c:	0132      	lsls	r2, r6, #4
   2300e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   23012:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   23016:	9906      	ldr	r1, [sp, #24]
   23018:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   2301a:	9b07      	ldr	r3, [sp, #28]
   2301c:	6073      	str	r3, [r6, #4]
	return ret;
   2301e:	2000      	movs	r0, #0
}
   23020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   23022:	f06f 0015 	mvn.w	r0, #21
   23026:	e7fb      	b.n	23020 <compare_set_nolocks+0x7c>
   23028:	00800001 	.word	0x00800001
   2302c:	20002440 	.word	0x20002440
   23030:	200049ec 	.word	0x200049ec

00023034 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   23034:	b530      	push	{r4, r5, lr}
   23036:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
   23038:	f7ff feda 	bl	22df0 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
   2303c:	2300      	movs	r3, #0
   2303e:	4a1d      	ldr	r2, [pc, #116]	; (230b4 <sys_clock_driver_init+0x80>)
   23040:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   23044:	2b00      	cmp	r3, #0
   23046:	dd24      	ble.n	23092 <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
   23048:	4c1a      	ldr	r4, [pc, #104]	; (230b4 <sys_clock_driver_init+0x80>)
   2304a:	2502      	movs	r5, #2
   2304c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23050:	4b19      	ldr	r3, [pc, #100]	; (230b8 <sys_clock_driver_init+0x84>)
   23052:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   23056:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2305a:	2200      	movs	r2, #0
   2305c:	2101      	movs	r1, #1
   2305e:	2011      	movs	r0, #17
   23060:	f009 faf2 	bl	2c648 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   23064:	2011      	movs	r0, #17
   23066:	f009 fae5 	bl	2c634 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2306a:	2301      	movs	r3, #1
   2306c:	60a3      	str	r3, [r4, #8]
   2306e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   23070:	4a12      	ldr	r2, [pc, #72]	; (230bc <sys_clock_driver_init+0x88>)
   23072:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   23074:	2400      	movs	r4, #0
   23076:	9401      	str	r4, [sp, #4]
   23078:	4b11      	ldr	r3, [pc, #68]	; (230c0 <sys_clock_driver_init+0x8c>)
   2307a:	9300      	str	r3, [sp, #0]
   2307c:	4a11      	ldr	r2, [pc, #68]	; (230c4 <sys_clock_driver_init+0x90>)
   2307e:	2300      	movs	r3, #0
   23080:	4620      	mov	r0, r4
   23082:	f00c fde9 	bl	2fc58 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   23086:	4628      	mov	r0, r5
   23088:	f7ff fafe 	bl	22688 <z_nrf_clock_control_lf_on>

	return 0;
}
   2308c:	4620      	mov	r0, r4
   2308e:	b003      	add	sp, #12
   23090:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   23092:	4a0d      	ldr	r2, [pc, #52]	; (230c8 <sys_clock_driver_init+0x94>)
   23094:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   23098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2309c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   230a0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   230a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   230a8:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   230aa:	4902      	ldr	r1, [pc, #8]	; (230b4 <sys_clock_driver_init+0x80>)
   230ac:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   230b0:	3301      	adds	r3, #1
   230b2:	e7c7      	b.n	23044 <sys_clock_driver_init+0x10>
   230b4:	40011000 	.word	0x40011000
   230b8:	e000e100 	.word	0xe000e100
   230bc:	200049f0 	.word	0x200049f0
   230c0:	00022f15 	.word	0x00022f15
   230c4:	007fffff 	.word	0x007fffff
   230c8:	20002440 	.word	0x20002440

000230cc <process_channel>:
{
   230cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   230d0:	b082      	sub	sp, #8
   230d2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   230d4:	f7ff febe 	bl	22e54 <channel_processing_check_and_clear>
   230d8:	b910      	cbnz	r0, 230e0 <process_channel+0x14>
}
   230da:	b002      	add	sp, #8
   230dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   230e0:	f7ff ff40 	bl	22f64 <z_nrf_rtc_timer_read>
   230e4:	4682      	mov	sl, r0
   230e6:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   230e8:	f00c fdaf 	bl	2fc4a <full_int_lock>
   230ec:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   230ee:	4b15      	ldr	r3, [pc, #84]	; (23144 <process_channel+0x78>)
   230f0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   230f4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   230f8:	45c2      	cmp	sl, r8
   230fa:	eb75 0509 	sbcs.w	r5, r5, r9
   230fe:	d20b      	bcs.n	23118 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   23100:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   23102:	4630      	mov	r0, r6
   23104:	f00c fda5 	bl	2fc52 <full_int_unlock>
		if (handler) {
   23108:	2d00      	cmp	r5, #0
   2310a:	d0e6      	beq.n	230da <process_channel+0xe>
			handler(chan, expire_time, user_context);
   2310c:	9700      	str	r7, [sp, #0]
   2310e:	4642      	mov	r2, r8
   23110:	464b      	mov	r3, r9
   23112:	4620      	mov	r0, r4
   23114:	47a8      	blx	r5
}
   23116:	e7e0      	b.n	230da <process_channel+0xe>
			handler = cc_data[chan].callback;
   23118:	4a0a      	ldr	r2, [pc, #40]	; (23144 <process_channel+0x78>)
   2311a:	0123      	lsls	r3, r4, #4
   2311c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   23120:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   23122:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   23124:	2000      	movs	r0, #0
   23126:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   23128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2312c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23130:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   23134:	4620      	mov	r0, r4
   23136:	f7ff fe15 	bl	22d64 <event_disable>
			event_clear(chan);
   2313a:	4620      	mov	r0, r4
   2313c:	f00c fd76 	bl	2fc2c <event_clear>
   23140:	e7df      	b.n	23102 <process_channel+0x36>
   23142:	bf00      	nop
   23144:	20002440 	.word	0x20002440

00023148 <rtc_nrf_isr>:
{
   23148:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   2314a:	4b0e      	ldr	r3, [pc, #56]	; (23184 <rtc_nrf_isr+0x3c>)
   2314c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   23150:	f013 0f02 	tst.w	r3, #2
   23154:	d00d      	beq.n	23172 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23156:	4b0b      	ldr	r3, [pc, #44]	; (23184 <rtc_nrf_isr+0x3c>)
   23158:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   2315c:	b14b      	cbz	r3, 23172 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2315e:	4b09      	ldr	r3, [pc, #36]	; (23184 <rtc_nrf_isr+0x3c>)
   23160:	2200      	movs	r2, #0
   23162:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   23166:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   2316a:	4a07      	ldr	r2, [pc, #28]	; (23188 <rtc_nrf_isr+0x40>)
   2316c:	6813      	ldr	r3, [r2, #0]
   2316e:	3301      	adds	r3, #1
   23170:	6013      	str	r3, [r2, #0]
{
   23172:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   23174:	2c00      	cmp	r4, #0
   23176:	dd00      	ble.n	2317a <rtc_nrf_isr+0x32>
}
   23178:	bd10      	pop	{r4, pc}
		process_channel(chan);
   2317a:	4620      	mov	r0, r4
   2317c:	f7ff ffa6 	bl	230cc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   23180:	3401      	adds	r4, #1
   23182:	e7f7      	b.n	23174 <rtc_nrf_isr+0x2c>
   23184:	40011000 	.word	0x40011000
   23188:	200049f4 	.word	0x200049f4

0002318c <sys_clock_set_timeout>:
{
   2318c:	b510      	push	{r4, lr}
   2318e:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   23190:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23194:	d006      	beq.n	231a4 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   23196:	2801      	cmp	r0, #1
   23198:	dd09      	ble.n	231ae <sys_clock_set_timeout+0x22>
   2319a:	4b15      	ldr	r3, [pc, #84]	; (231f0 <sys_clock_set_timeout+0x64>)
   2319c:	4298      	cmp	r0, r3
   2319e:	dc24      	bgt.n	231ea <sys_clock_set_timeout+0x5e>
   231a0:	4604      	mov	r4, r0
   231a2:	e005      	b.n	231b0 <sys_clock_set_timeout+0x24>
		sys_busy = false;
   231a4:	4b13      	ldr	r3, [pc, #76]	; (231f4 <sys_clock_set_timeout+0x68>)
   231a6:	2200      	movs	r2, #0
   231a8:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   231aa:	4c13      	ldr	r4, [pc, #76]	; (231f8 <sys_clock_set_timeout+0x6c>)
   231ac:	e003      	b.n	231b6 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   231ae:	2401      	movs	r4, #1
		sys_busy = true;
   231b0:	4b10      	ldr	r3, [pc, #64]	; (231f4 <sys_clock_set_timeout+0x68>)
   231b2:	2201      	movs	r2, #1
   231b4:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   231b6:	f7ff fed5 	bl	22f64 <z_nrf_rtc_timer_read>
   231ba:	4b10      	ldr	r3, [pc, #64]	; (231fc <sys_clock_set_timeout+0x70>)
   231bc:	681a      	ldr	r2, [r3, #0]
   231be:	685b      	ldr	r3, [r3, #4]
   231c0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   231c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   231c6:	d300      	bcc.n	231ca <sys_clock_set_timeout+0x3e>
		cyc = 0;
   231c8:	2400      	movs	r4, #0
	cyc += unannounced;
   231ca:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   231cc:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   231d0:	d300      	bcc.n	231d4 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   231d2:	4c09      	ldr	r4, [pc, #36]	; (231f8 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   231d4:	2000      	movs	r0, #0
   231d6:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   231d8:	9001      	str	r0, [sp, #4]
   231da:	4909      	ldr	r1, [pc, #36]	; (23200 <sys_clock_set_timeout+0x74>)
   231dc:	9100      	str	r1, [sp, #0]
   231de:	f143 0300 	adc.w	r3, r3, #0
   231e2:	f00c fd39 	bl	2fc58 <compare_set>
}
   231e6:	b002      	add	sp, #8
   231e8:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   231ea:	4c03      	ldr	r4, [pc, #12]	; (231f8 <sys_clock_set_timeout+0x6c>)
   231ec:	e7e0      	b.n	231b0 <sys_clock_set_timeout+0x24>
   231ee:	bf00      	nop
   231f0:	007ffffe 	.word	0x007ffffe
   231f4:	20005d44 	.word	0x20005d44
   231f8:	007fffff 	.word	0x007fffff
   231fc:	20002450 	.word	0x20002450
   23200:	00022f15 	.word	0x00022f15

00023204 <sys_clock_elapsed>:
{
   23204:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   23206:	f7ff fead 	bl	22f64 <z_nrf_rtc_timer_read>
   2320a:	4b02      	ldr	r3, [pc, #8]	; (23214 <sys_clock_elapsed+0x10>)
   2320c:	681b      	ldr	r3, [r3, #0]
}
   2320e:	1ac0      	subs	r0, r0, r3
   23210:	bd08      	pop	{r3, pc}
   23212:	bf00      	nop
   23214:	20002450 	.word	0x20002450

00023218 <sys_clock_disable>:
{
   23218:	b508      	push	{r3, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2321a:	4b07      	ldr	r3, [pc, #28]	; (23238 <sys_clock_disable+0x20>)
   2321c:	2201      	movs	r2, #1
   2321e:	605a      	str	r2, [r3, #4]
	irq_disable(RTC_IRQn);
   23220:	2011      	movs	r0, #17
   23222:	f009 fa0c 	bl	2c63e <arch_irq_disable>
	int_event_disable_rtc();
   23226:	f7ff fde3 	bl	22df0 <int_event_disable_rtc>
   2322a:	4b04      	ldr	r3, [pc, #16]	; (2323c <sys_clock_disable+0x24>)
   2322c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   23230:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   23234:	bd08      	pop	{r3, pc}
   23236:	bf00      	nop
   23238:	40011000 	.word	0x40011000
   2323c:	e000e100 	.word	0xe000e100

00023240 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   23240:	b508      	push	{r3, lr}
   23242:	4602      	mov	r2, r0
   23244:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   23246:	4802      	ldr	r0, [pc, #8]	; (23250 <multithreading_lock_acquire+0x10>)
   23248:	f002 ff10 	bl	2606c <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   2324c:	bd08      	pop	{r3, pc}
   2324e:	bf00      	nop
   23250:	200009e0 	.word	0x200009e0

00023254 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   23254:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   23256:	4802      	ldr	r0, [pc, #8]	; (23260 <multithreading_lock_release+0xc>)
   23258:	f002 ff8c 	bl	26174 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   2325c:	bd08      	pop	{r3, pc}
   2325e:	bf00      	nop
   23260:	200009e0 	.word	0x200009e0

00023264 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23264:	b510      	push	{r4, lr}
   23266:	b088      	sub	sp, #32
	z_impl_log_panic();
   23268:	f7f0 fe50 	bl	13f0c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2326c:	4b13      	ldr	r3, [pc, #76]	; (232bc <k_sys_fatal_error_handler+0x58>)
   2326e:	9307      	str	r3, [sp, #28]
   23270:	2302      	movs	r3, #2
   23272:	f88d 3004 	strb.w	r3, [sp, #4]
   23276:	2400      	movs	r4, #0
   23278:	f88d 4005 	strb.w	r4, [sp, #5]
   2327c:	f88d 4006 	strb.w	r4, [sp, #6]
   23280:	f88d 4007 	strb.w	r4, [sp, #7]
   23284:	9b01      	ldr	r3, [sp, #4]
   23286:	9306      	str	r3, [sp, #24]
   23288:	4621      	mov	r1, r4
   2328a:	f364 0100 	bfi	r1, r4, #0, #1
   2328e:	f364 0141 	bfi	r1, r4, #1, #1
   23292:	f364 0182 	bfi	r1, r4, #2, #1
   23296:	f364 01c5 	bfi	r1, r4, #3, #3
   2329a:	2301      	movs	r3, #1
   2329c:	f363 1188 	bfi	r1, r3, #6, #3
   232a0:	2308      	movs	r3, #8
   232a2:	f363 2153 	bfi	r1, r3, #9, #11
   232a6:	f364 511f 	bfi	r1, r4, #20, #12
   232aa:	4623      	mov	r3, r4
   232ac:	aa06      	add	r2, sp, #24
   232ae:	4804      	ldr	r0, [pc, #16]	; (232c0 <k_sys_fatal_error_handler+0x5c>)
   232b0:	f7f0 ff24 	bl	140fc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   232b4:	4620      	mov	r0, r4
   232b6:	f009 faf6 	bl	2c8a6 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   232ba:	bf00      	nop
   232bc:	00034e04 	.word	0x00034e04
   232c0:	00031d4c 	.word	0x00031d4c

000232c4 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   232c4:	b510      	push	{r4, lr}
   232c6:	4603      	mov	r3, r0
   232c8:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   232ca:	4803      	ldr	r0, [pc, #12]	; (232d8 <rand_prio_low_vector_get_blocking+0x14>)
   232cc:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   232ce:	680c      	ldr	r4, [r1, #0]
   232d0:	4619      	mov	r1, r3
   232d2:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   232d4:	bd10      	pop	{r4, pc}
   232d6:	bf00      	nop
   232d8:	00031a50 	.word	0x00031a50

000232dc <sdc_assertion_handler>:
{
   232dc:	b590      	push	{r4, r7, lr}
   232de:	b083      	sub	sp, #12
   232e0:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   232e2:	466c      	mov	r4, sp
   232e4:	2300      	movs	r3, #0
   232e6:	713b      	strb	r3, [r7, #4]
   232e8:	2302      	movs	r3, #2
   232ea:	717b      	strb	r3, [r7, #5]
   232ec:	b08a      	sub	sp, #40	; 0x28
   232ee:	46ec      	mov	ip, sp
   232f0:	f11c 0210 	adds.w	r2, ip, #16
   232f4:	d01b      	beq.n	2332e <sdc_assertion_handler+0x52>
   232f6:	f04f 0e12 	mov.w	lr, #18
   232fa:	b12a      	cbz	r2, 23308 <sdc_assertion_handler+0x2c>
   232fc:	f1be 0f04 	cmp.w	lr, #4
   23300:	dd02      	ble.n	23308 <sdc_assertion_handler+0x2c>
   23302:	4b2a      	ldr	r3, [pc, #168]	; (233ac <sdc_assertion_handler+0xd0>)
   23304:	f8cc 3014 	str.w	r3, [ip, #20]
   23308:	2300      	movs	r3, #0
   2330a:	703b      	strb	r3, [r7, #0]
   2330c:	2302      	movs	r3, #2
   2330e:	707b      	strb	r3, [r7, #1]
   23310:	b1d2      	cbz	r2, 23348 <sdc_assertion_handler+0x6c>
   23312:	4673      	mov	r3, lr
   23314:	f1be 0f08 	cmp.w	lr, #8
   23318:	dd01      	ble.n	2331e <sdc_assertion_handler+0x42>
   2331a:	f8cc 0018 	str.w	r0, [ip, #24]
   2331e:	2b0c      	cmp	r3, #12
   23320:	dd01      	ble.n	23326 <sdc_assertion_handler+0x4a>
   23322:	f8cc 101c 	str.w	r1, [ip, #28]
   23326:	f10c 0320 	add.w	r3, ip, #32
   2332a:	2100      	movs	r1, #0
   2332c:	e00a      	b.n	23344 <sdc_assertion_handler+0x68>
   2332e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   23332:	e7e2      	b.n	232fa <sdc_assertion_handler+0x1e>
   23334:	f101 0008 	add.w	r0, r1, #8
   23338:	4438      	add	r0, r7
   2333a:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   2333e:	f803 0b01 	strb.w	r0, [r3], #1
   23342:	3101      	adds	r1, #1
   23344:	2901      	cmp	r1, #1
   23346:	d9f5      	bls.n	23334 <sdc_assertion_handler+0x58>
   23348:	f1be 0f11 	cmp.w	lr, #17
   2334c:	dd2b      	ble.n	233a6 <sdc_assertion_handler+0xca>
   2334e:	2312      	movs	r3, #18
   23350:	b14a      	cbz	r2, 23366 <sdc_assertion_handler+0x8a>
   23352:	2104      	movs	r1, #4
   23354:	7139      	strb	r1, [r7, #4]
   23356:	2100      	movs	r1, #0
   23358:	7179      	strb	r1, [r7, #5]
   2335a:	71b9      	strb	r1, [r7, #6]
   2335c:	2101      	movs	r1, #1
   2335e:	71f9      	strb	r1, [r7, #7]
   23360:	6878      	ldr	r0, [r7, #4]
   23362:	f8cc 0010 	str.w	r0, [ip, #16]
   23366:	2100      	movs	r1, #0
   23368:	f36f 0100 	bfc	r1, #0, #1
   2336c:	f36f 0141 	bfc	r1, #1, #1
   23370:	f36f 0182 	bfc	r1, #2, #1
   23374:	f36f 01c5 	bfc	r1, #3, #3
   23378:	2001      	movs	r0, #1
   2337a:	f360 1188 	bfi	r1, r0, #6, #3
   2337e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   23382:	f363 2153 	bfi	r1, r3, #9, #11
   23386:	f36f 511f 	bfc	r1, #20, #12
   2338a:	2300      	movs	r3, #0
   2338c:	4808      	ldr	r0, [pc, #32]	; (233b0 <sdc_assertion_handler+0xd4>)
   2338e:	f7f0 feb5 	bl	140fc <z_impl_z_log_msg_static_create>
   23392:	46a5      	mov	sp, r4
	k_oops();
   23394:	4040      	eors	r0, r0
   23396:	f380 8811 	msr	BASEPRI, r0
   2339a:	f04f 0003 	mov.w	r0, #3
   2339e:	df02      	svc	2
}
   233a0:	370c      	adds	r7, #12
   233a2:	46bd      	mov	sp, r7
   233a4:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   233a6:	f06f 031b 	mvn.w	r3, #27
   233aa:	e7d1      	b.n	23350 <sdc_assertion_handler+0x74>
   233ac:	00034e24 	.word	0x00034e24
   233b0:	00031d2c 	.word	0x00031d2c

000233b4 <event_packet_process>:
{
   233b4:	b570      	push	{r4, r5, r6, lr}
   233b6:	b088      	sub	sp, #32
   233b8:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   233ba:	f00c fc6a 	bl	2fc92 <event_packet_is_discardable>
   233be:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   233c0:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   233c2:	461d      	mov	r5, r3
   233c4:	b18b      	cbz	r3, 233ea <event_packet_process+0x36>
   233c6:	2200      	movs	r2, #0
   233c8:	2300      	movs	r3, #0
   233ca:	4629      	mov	r1, r5
   233cc:	f7f5 fd40 	bl	18e50 <bt_buf_get_evt>
	if (!evt_buf) {
   233d0:	4606      	mov	r6, r0
   233d2:	b178      	cbz	r0, 233f4 <event_packet_process+0x40>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   233d4:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   233d6:	3202      	adds	r2, #2
   233d8:	4621      	mov	r1, r4
   233da:	300c      	adds	r0, #12
   233dc:	f00b fde1 	bl	2efa2 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   233e0:	4630      	mov	r0, r6
   233e2:	f7f8 fa9b 	bl	1b91c <bt_recv>
}
   233e6:	b008      	add	sp, #32
   233e8:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   233ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   233ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   233f2:	e7ea      	b.n	233ca <event_packet_process+0x16>
		if (discardable) {
   233f4:	2d00      	cmp	r5, #0
   233f6:	d1f6      	bne.n	233e6 <event_packet_process+0x32>
		LOG_ERR("No event buffer available");
   233f8:	4b11      	ldr	r3, [pc, #68]	; (23440 <event_packet_process+0x8c>)
   233fa:	9307      	str	r3, [sp, #28]
   233fc:	2302      	movs	r3, #2
   233fe:	f88d 3004 	strb.w	r3, [sp, #4]
   23402:	2300      	movs	r3, #0
   23404:	f88d 3005 	strb.w	r3, [sp, #5]
   23408:	f88d 3006 	strb.w	r3, [sp, #6]
   2340c:	f88d 3007 	strb.w	r3, [sp, #7]
   23410:	9a01      	ldr	r2, [sp, #4]
   23412:	9206      	str	r2, [sp, #24]
   23414:	4619      	mov	r1, r3
   23416:	f363 0100 	bfi	r1, r3, #0, #1
   2341a:	f363 0141 	bfi	r1, r3, #1, #1
   2341e:	f363 0182 	bfi	r1, r3, #2, #1
   23422:	f363 01c5 	bfi	r1, r3, #3, #3
   23426:	2201      	movs	r2, #1
   23428:	f362 1188 	bfi	r1, r2, #6, #3
   2342c:	2208      	movs	r2, #8
   2342e:	f362 2153 	bfi	r1, r2, #9, #11
   23432:	f363 511f 	bfi	r1, r3, #20, #12
   23436:	aa06      	add	r2, sp, #24
   23438:	4802      	ldr	r0, [pc, #8]	; (23444 <event_packet_process+0x90>)
   2343a:	f7f0 fe5f 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   2343e:	e7d2      	b.n	233e6 <event_packet_process+0x32>
   23440:	00034e4c 	.word	0x00034e4c
   23444:	00031d2c 	.word	0x00031d2c

00023448 <data_packet_process>:
{
   23448:	b530      	push	{r4, r5, lr}
   2344a:	b089      	sub	sp, #36	; 0x24
   2344c:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   2344e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23456:	2003      	movs	r0, #3
   23458:	f7f5 fcc8 	bl	18dec <bt_buf_get_rx>
	if (!data_buf) {
   2345c:	b158      	cbz	r0, 23476 <data_packet_process+0x2e>
   2345e:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   23460:	8862      	ldrh	r2, [r4, #2]
   23462:	3204      	adds	r2, #4
   23464:	4621      	mov	r1, r4
   23466:	300c      	adds	r0, #12
   23468:	f00b fd9b 	bl	2efa2 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   2346c:	4628      	mov	r0, r5
   2346e:	f7f8 fa55 	bl	1b91c <bt_recv>
}
   23472:	b009      	add	sp, #36	; 0x24
   23474:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No data buffer available");
   23476:	4b12      	ldr	r3, [pc, #72]	; (234c0 <data_packet_process+0x78>)
   23478:	9307      	str	r3, [sp, #28]
   2347a:	2302      	movs	r3, #2
   2347c:	f88d 3004 	strb.w	r3, [sp, #4]
   23480:	2300      	movs	r3, #0
   23482:	f88d 3005 	strb.w	r3, [sp, #5]
   23486:	f88d 3006 	strb.w	r3, [sp, #6]
   2348a:	f88d 3007 	strb.w	r3, [sp, #7]
   2348e:	9a01      	ldr	r2, [sp, #4]
   23490:	9206      	str	r2, [sp, #24]
   23492:	4619      	mov	r1, r3
   23494:	f363 0100 	bfi	r1, r3, #0, #1
   23498:	f363 0141 	bfi	r1, r3, #1, #1
   2349c:	f363 0182 	bfi	r1, r3, #2, #1
   234a0:	f363 01c5 	bfi	r1, r3, #3, #3
   234a4:	2201      	movs	r2, #1
   234a6:	f362 1188 	bfi	r1, r2, #6, #3
   234aa:	2208      	movs	r2, #8
   234ac:	f362 2153 	bfi	r1, r2, #9, #11
   234b0:	f363 511f 	bfi	r1, r3, #20, #12
   234b4:	aa06      	add	r2, sp, #24
   234b6:	4803      	ldr	r0, [pc, #12]	; (234c4 <data_packet_process+0x7c>)
   234b8:	f7f0 fe20 	bl	140fc <z_impl_z_log_msg_static_create>
		return;
   234bc:	e7d9      	b.n	23472 <data_packet_process+0x2a>
   234be:	bf00      	nop
   234c0:	00034e68 	.word	0x00034e68
   234c4:	00031d2c 	.word	0x00031d2c

000234c8 <fetch_and_process_hci_msg>:
{
   234c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   234ca:	b083      	sub	sp, #12
   234cc:	af00      	add	r7, sp, #0
   234ce:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   234d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   234d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   234d8:	f7ff feb2 	bl	23240 <multithreading_lock_acquire>
	if (!errcode) {
   234dc:	b118      	cbz	r0, 234e6 <fetch_and_process_hci_msg+0x1e>
		return false;
   234de:	2000      	movs	r0, #0
}
   234e0:	370c      	adds	r7, #12
   234e2:	46bd      	mov	sp, r7
   234e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   234e6:	1df9      	adds	r1, r7, #7
   234e8:	4620      	mov	r0, r4
   234ea:	f000 fb7b 	bl	23be4 <hci_internal_msg_get>
   234ee:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   234f0:	f7ff feb0 	bl	23254 <multithreading_lock_release>
	if (errcode) {
   234f4:	2d00      	cmp	r5, #0
   234f6:	d1f2      	bne.n	234de <fetch_and_process_hci_msg+0x16>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   234f8:	79fb      	ldrb	r3, [r7, #7]
   234fa:	2b04      	cmp	r3, #4
   234fc:	d036      	beq.n	2356c <fetch_and_process_hci_msg+0xa4>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   234fe:	2b02      	cmp	r3, #2
   23500:	d039      	beq.n	23576 <fetch_and_process_hci_msg+0xae>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   23502:	466d      	mov	r5, sp
   23504:	b088      	sub	sp, #32
   23506:	4669      	mov	r1, sp
   23508:	f111 0210 	adds.w	r2, r1, #16
   2350c:	d038      	beq.n	23580 <fetch_and_process_hci_msg+0xb8>
   2350e:	200c      	movs	r0, #12
   23510:	b13a      	cbz	r2, 23522 <fetch_and_process_hci_msg+0x5a>
   23512:	4604      	mov	r4, r0
   23514:	2804      	cmp	r0, #4
   23516:	dd01      	ble.n	2351c <fetch_and_process_hci_msg+0x54>
   23518:	4e1c      	ldr	r6, [pc, #112]	; (2358c <fetch_and_process_hci_msg+0xc4>)
   2351a:	614e      	str	r6, [r1, #20]
   2351c:	2c08      	cmp	r4, #8
   2351e:	dd00      	ble.n	23522 <fetch_and_process_hci_msg+0x5a>
   23520:	618b      	str	r3, [r1, #24]
   23522:	280b      	cmp	r0, #11
   23524:	dd2f      	ble.n	23586 <fetch_and_process_hci_msg+0xbe>
   23526:	230c      	movs	r3, #12
   23528:	b13a      	cbz	r2, 2353a <fetch_and_process_hci_msg+0x72>
   2352a:	2003      	movs	r0, #3
   2352c:	7038      	strb	r0, [r7, #0]
   2352e:	2000      	movs	r0, #0
   23530:	7078      	strb	r0, [r7, #1]
   23532:	70b8      	strb	r0, [r7, #2]
   23534:	70f8      	strb	r0, [r7, #3]
   23536:	6838      	ldr	r0, [r7, #0]
   23538:	6108      	str	r0, [r1, #16]
   2353a:	2100      	movs	r1, #0
   2353c:	f36f 0100 	bfc	r1, #0, #1
   23540:	f36f 0141 	bfc	r1, #1, #1
   23544:	f36f 0182 	bfc	r1, #2, #1
   23548:	f36f 01c5 	bfc	r1, #3, #3
   2354c:	2401      	movs	r4, #1
   2354e:	f364 1188 	bfi	r1, r4, #6, #3
   23552:	f3c3 030a 	ubfx	r3, r3, #0, #11
   23556:	f363 2153 	bfi	r1, r3, #9, #11
   2355a:	f36f 511f 	bfc	r1, #20, #12
   2355e:	2300      	movs	r3, #0
   23560:	480b      	ldr	r0, [pc, #44]	; (23590 <fetch_and_process_hci_msg+0xc8>)
   23562:	f7f0 fdcb 	bl	140fc <z_impl_z_log_msg_static_create>
   23566:	46ad      	mov	sp, r5
	return true;
   23568:	4620      	mov	r0, r4
   2356a:	e7b9      	b.n	234e0 <fetch_and_process_hci_msg+0x18>
		event_packet_process(p_hci_buffer);
   2356c:	4620      	mov	r0, r4
   2356e:	f7ff ff21 	bl	233b4 <event_packet_process>
	return true;
   23572:	2001      	movs	r0, #1
   23574:	e7b4      	b.n	234e0 <fetch_and_process_hci_msg+0x18>
		data_packet_process(p_hci_buffer);
   23576:	4620      	mov	r0, r4
   23578:	f7ff ff66 	bl	23448 <data_packet_process>
	return true;
   2357c:	2001      	movs	r0, #1
   2357e:	e7af      	b.n	234e0 <fetch_and_process_hci_msg+0x18>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   23580:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23584:	e7c4      	b.n	23510 <fetch_and_process_hci_msg+0x48>
   23586:	f06f 031b 	mvn.w	r3, #27
   2358a:	e7cd      	b.n	23528 <fetch_and_process_hci_msg+0x60>
   2358c:	00034e84 	.word	0x00034e84
   23590:	00031d2c 	.word	0x00031d2c

00023594 <receive_signal_raise>:
{
   23594:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   23596:	4902      	ldr	r1, [pc, #8]	; (235a0 <receive_signal_raise+0xc>)
   23598:	4802      	ldr	r0, [pc, #8]	; (235a4 <receive_signal_raise+0x10>)
   2359a:	f00d fd08 	bl	30fae <k_work_submit_to_queue>
}
   2359e:	bd08      	pop	{r3, pc}
   235a0:	20004a40 	.word	0x20004a40
   235a4:	20002d18 	.word	0x20002d18

000235a8 <acl_handle>:
{
   235a8:	b538      	push	{r3, r4, r5, lr}
   235aa:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   235ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   235b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   235b4:	f7ff fe44 	bl	23240 <multithreading_lock_acquire>
	if (!errcode) {
   235b8:	4605      	mov	r5, r0
   235ba:	b108      	cbz	r0, 235c0 <acl_handle+0x18>
}
   235bc:	4628      	mov	r0, r5
   235be:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   235c0:	68e0      	ldr	r0, [r4, #12]
   235c2:	f7e9 facc 	bl	cb5e <sdc_hci_data_put>
   235c6:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   235c8:	f7ff fe44 	bl	23254 <multithreading_lock_release>
		if (errcode) {
   235cc:	2d00      	cmp	r5, #0
   235ce:	d0f5      	beq.n	235bc <acl_handle+0x14>
   235d0:	4902      	ldr	r1, [pc, #8]	; (235dc <acl_handle+0x34>)
   235d2:	4803      	ldr	r0, [pc, #12]	; (235e0 <acl_handle+0x38>)
   235d4:	f00d fceb 	bl	30fae <k_work_submit_to_queue>
}
   235d8:	e7f0      	b.n	235bc <acl_handle+0x14>
   235da:	bf00      	nop
   235dc:	20004a40 	.word	0x20004a40
   235e0:	20002d18 	.word	0x20002d18

000235e4 <cmd_handle>:
{
   235e4:	b538      	push	{r3, r4, r5, lr}
   235e6:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   235e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   235ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   235f0:	f7ff fe26 	bl	23240 <multithreading_lock_acquire>
	if (!errcode) {
   235f4:	4604      	mov	r4, r0
   235f6:	b108      	cbz	r0, 235fc <cmd_handle+0x18>
}
   235f8:	4620      	mov	r0, r4
   235fa:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   235fc:	68e8      	ldr	r0, [r5, #12]
   235fe:	f000 fac9 	bl	23b94 <hci_internal_cmd_put>
   23602:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   23604:	f7ff fe26 	bl	23254 <multithreading_lock_release>
	if (errcode) {
   23608:	2c00      	cmp	r4, #0
   2360a:	d1f5      	bne.n	235f8 <cmd_handle+0x14>
   2360c:	4902      	ldr	r1, [pc, #8]	; (23618 <cmd_handle+0x34>)
   2360e:	4803      	ldr	r0, [pc, #12]	; (2361c <cmd_handle+0x38>)
   23610:	f00d fccd 	bl	30fae <k_work_submit_to_queue>
	return 0;
   23614:	e7f0      	b.n	235f8 <cmd_handle+0x14>
   23616:	bf00      	nop
   23618:	20004a40 	.word	0x20004a40
   2361c:	20002d18 	.word	0x20002d18

00023620 <rand_prio_high_vector_get>:
{
   23620:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   23622:	4b08      	ldr	r3, [pc, #32]	; (23644 <rand_prio_high_vector_get+0x24>)
   23624:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   23626:	685c      	ldr	r4, [r3, #4]
   23628:	b144      	cbz	r4, 2363c <rand_prio_high_vector_get+0x1c>
   2362a:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   2362c:	2300      	movs	r3, #0
   2362e:	4601      	mov	r1, r0
   23630:	4804      	ldr	r0, [pc, #16]	; (23644 <rand_prio_high_vector_get+0x24>)
   23632:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   23634:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   23638:	b2c0      	uxtb	r0, r0
   2363a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2363c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23640:	e7f8      	b.n	23634 <rand_prio_high_vector_get+0x14>
   23642:	bf00      	nop
   23644:	00031a50 	.word	0x00031a50

00023648 <rand_prio_low_vector_get>:
{
   23648:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   2364a:	4b08      	ldr	r3, [pc, #32]	; (2366c <rand_prio_low_vector_get+0x24>)
   2364c:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   2364e:	685c      	ldr	r4, [r3, #4]
   23650:	b144      	cbz	r4, 23664 <rand_prio_low_vector_get+0x1c>
   23652:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   23654:	2300      	movs	r3, #0
   23656:	4601      	mov	r1, r0
   23658:	4804      	ldr	r0, [pc, #16]	; (2366c <rand_prio_low_vector_get+0x24>)
   2365a:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   2365c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   23660:	b2c0      	uxtb	r0, r0
   23662:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   23664:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23668:	e7f8      	b.n	2365c <rand_prio_low_vector_get+0x14>
   2366a:	bf00      	nop
   2366c:	00031a50 	.word	0x00031a50

00023670 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   23670:	b5b0      	push	{r4, r5, r7, lr}
   23672:	b090      	sub	sp, #64	; 0x40
   23674:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   23676:	4975      	ldr	r1, [pc, #468]	; (2384c <hci_driver_open+0x1dc>)
   23678:	4875      	ldr	r0, [pc, #468]	; (23850 <hci_driver_open+0x1e0>)
   2367a:	f00d fc7c 	bl	30f76 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   2367e:	f000 fc53 	bl	23f28 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   23682:	f107 0014 	add.w	r0, r7, #20
   23686:	f7dd f8b5 	bl	7f4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   2368a:	466c      	mov	r4, sp
   2368c:	2300      	movs	r3, #0
   2368e:	713b      	strb	r3, [r7, #4]
   23690:	2302      	movs	r3, #2
   23692:	717b      	strb	r3, [r7, #5]
   23694:	b088      	sub	sp, #32
   23696:	46ec      	mov	ip, sp
   23698:	f11c 0210 	adds.w	r2, ip, #16
   2369c:	d014      	beq.n	236c8 <hci_driver_open+0x58>
   2369e:	200e      	movs	r0, #14
   236a0:	b122      	cbz	r2, 236ac <hci_driver_open+0x3c>
   236a2:	2804      	cmp	r0, #4
   236a4:	dd02      	ble.n	236ac <hci_driver_open+0x3c>
   236a6:	4b6b      	ldr	r3, [pc, #428]	; (23854 <hci_driver_open+0x1e4>)
   236a8:	f8cc 3014 	str.w	r3, [ip, #20]
   236ac:	2300      	movs	r3, #0
   236ae:	703b      	strb	r3, [r7, #0]
   236b0:	2302      	movs	r3, #2
   236b2:	707b      	strb	r3, [r7, #1]
   236b4:	b1b2      	cbz	r2, 236e4 <hci_driver_open+0x74>
   236b6:	2808      	cmp	r0, #8
   236b8:	dd02      	ble.n	236c0 <hci_driver_open+0x50>
   236ba:	4b67      	ldr	r3, [pc, #412]	; (23858 <hci_driver_open+0x1e8>)
   236bc:	f8cc 3018 	str.w	r3, [ip, #24]
   236c0:	f10c 031c 	add.w	r3, ip, #28
   236c4:	2100      	movs	r1, #0
   236c6:	e00b      	b.n	236e0 <hci_driver_open+0x70>
   236c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   236cc:	e7e8      	b.n	236a0 <hci_driver_open+0x30>
   236ce:	f101 0540 	add.w	r5, r1, #64	; 0x40
   236d2:	eb05 0e07 	add.w	lr, r5, r7
   236d6:	f81e ec40 	ldrb.w	lr, [lr, #-64]
   236da:	f803 eb01 	strb.w	lr, [r3], #1
   236de:	3101      	adds	r1, #1
   236e0:	2901      	cmp	r1, #1
   236e2:	d9f4      	bls.n	236ce <hci_driver_open+0x5e>
   236e4:	280d      	cmp	r0, #13
   236e6:	dd3f      	ble.n	23768 <hci_driver_open+0xf8>
   236e8:	230e      	movs	r3, #14
   236ea:	b14a      	cbz	r2, 23700 <hci_driver_open+0x90>
   236ec:	2103      	movs	r1, #3
   236ee:	7139      	strb	r1, [r7, #4]
   236f0:	2100      	movs	r1, #0
   236f2:	7179      	strb	r1, [r7, #5]
   236f4:	71b9      	strb	r1, [r7, #6]
   236f6:	2101      	movs	r1, #1
   236f8:	71f9      	strb	r1, [r7, #7]
   236fa:	6878      	ldr	r0, [r7, #4]
   236fc:	f8cc 0010 	str.w	r0, [ip, #16]
   23700:	2100      	movs	r1, #0
   23702:	f36f 0100 	bfc	r1, #0, #1
   23706:	f36f 0141 	bfc	r1, #1, #1
   2370a:	f36f 0182 	bfc	r1, #2, #1
   2370e:	f36f 01c5 	bfc	r1, #3, #3
   23712:	2003      	movs	r0, #3
   23714:	f360 1188 	bfi	r1, r0, #6, #3
   23718:	f3c3 030a 	ubfx	r3, r3, #0, #11
   2371c:	f363 2153 	bfi	r1, r3, #9, #11
   23720:	2314      	movs	r3, #20
   23722:	f363 511f 	bfi	r1, r3, #20, #12
   23726:	18fb      	adds	r3, r7, r3
   23728:	484c      	ldr	r0, [pc, #304]	; (2385c <hci_driver_open+0x1ec>)
   2372a:	f7f0 fce7 	bl	140fc <z_impl_z_log_msg_static_create>
   2372e:	46a5      	mov	sp, r4
   23730:	484b      	ldr	r0, [pc, #300]	; (23860 <hci_driver_open+0x1f0>)
   23732:	f00d f925 	bl	30980 <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   23736:	b1d0      	cbz	r0, 2376e <hci_driver_open+0xfe>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   23738:	4a4a      	ldr	r2, [pc, #296]	; (23864 <hci_driver_open+0x1f4>)
   2373a:	f107 0308 	add.w	r3, r7, #8
   2373e:	ca07      	ldmia	r2, {r0, r1, r2}
   23740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   23744:	4618      	mov	r0, r3
   23746:	f7dd f9ff 	bl	b48 <sdc_rand_source_register>
	if (err) {
   2374a:	4603      	mov	r3, r0
   2374c:	bb90      	cbnz	r0, 237b4 <hci_driver_open+0x144>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   2374e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23752:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23756:	f7ff fd73 	bl	23240 <multithreading_lock_acquire>
	if (err) {
   2375a:	4604      	mov	r4, r0
   2375c:	2800      	cmp	r0, #0
   2375e:	d069      	beq.n	23834 <hci_driver_open+0x1c4>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   23760:	4620      	mov	r0, r4
   23762:	3740      	adds	r7, #64	; 0x40
   23764:	46bd      	mov	sp, r7
   23766:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   23768:	f06f 031b 	mvn.w	r3, #27
   2376c:	e7bd      	b.n	236ea <hci_driver_open+0x7a>
		LOG_ERR("Entropy source device not ready");
   2376e:	4b3e      	ldr	r3, [pc, #248]	; (23868 <hci_driver_open+0x1f8>)
   23770:	63fb      	str	r3, [r7, #60]	; 0x3c
   23772:	2302      	movs	r3, #2
   23774:	713b      	strb	r3, [r7, #4]
   23776:	2300      	movs	r3, #0
   23778:	717b      	strb	r3, [r7, #5]
   2377a:	71bb      	strb	r3, [r7, #6]
   2377c:	71fb      	strb	r3, [r7, #7]
   2377e:	687a      	ldr	r2, [r7, #4]
   23780:	63ba      	str	r2, [r7, #56]	; 0x38
   23782:	4619      	mov	r1, r3
   23784:	f363 0100 	bfi	r1, r3, #0, #1
   23788:	f363 0141 	bfi	r1, r3, #1, #1
   2378c:	f363 0182 	bfi	r1, r3, #2, #1
   23790:	f363 01c5 	bfi	r1, r3, #3, #3
   23794:	2201      	movs	r2, #1
   23796:	f362 1188 	bfi	r1, r2, #6, #3
   2379a:	2208      	movs	r2, #8
   2379c:	f362 2153 	bfi	r1, r2, #9, #11
   237a0:	f363 511f 	bfi	r1, r3, #20, #12
   237a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
   237a8:	482c      	ldr	r0, [pc, #176]	; (2385c <hci_driver_open+0x1ec>)
   237aa:	f7f0 fca7 	bl	140fc <z_impl_z_log_msg_static_create>
		return -ENODEV;
   237ae:	f06f 0412 	mvn.w	r4, #18
   237b2:	e7d5      	b.n	23760 <hci_driver_open+0xf0>
		LOG_ERR("Failed to register rand source (%d)", err);
   237b4:	466c      	mov	r4, sp
   237b6:	b088      	sub	sp, #32
   237b8:	4669      	mov	r1, sp
   237ba:	f111 0210 	adds.w	r2, r1, #16
   237be:	d00e      	beq.n	237de <hci_driver_open+0x16e>
   237c0:	200c      	movs	r0, #12
   237c2:	b142      	cbz	r2, 237d6 <hci_driver_open+0x166>
   237c4:	4684      	mov	ip, r0
   237c6:	2804      	cmp	r0, #4
   237c8:	dd01      	ble.n	237ce <hci_driver_open+0x15e>
   237ca:	4d28      	ldr	r5, [pc, #160]	; (2386c <hci_driver_open+0x1fc>)
   237cc:	614d      	str	r5, [r1, #20]
   237ce:	f1bc 0f08 	cmp.w	ip, #8
   237d2:	dd07      	ble.n	237e4 <hci_driver_open+0x174>
   237d4:	618b      	str	r3, [r1, #24]
   237d6:	280b      	cmp	r0, #11
   237d8:	dd29      	ble.n	2382e <hci_driver_open+0x1be>
   237da:	230c      	movs	r3, #12
   237dc:	e004      	b.n	237e8 <hci_driver_open+0x178>
   237de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   237e2:	e7ee      	b.n	237c2 <hci_driver_open+0x152>
   237e4:	f06f 031b 	mvn.w	r3, #27
   237e8:	b13a      	cbz	r2, 237fa <hci_driver_open+0x18a>
   237ea:	2003      	movs	r0, #3
   237ec:	7138      	strb	r0, [r7, #4]
   237ee:	2000      	movs	r0, #0
   237f0:	7178      	strb	r0, [r7, #5]
   237f2:	71b8      	strb	r0, [r7, #6]
   237f4:	71f8      	strb	r0, [r7, #7]
   237f6:	6878      	ldr	r0, [r7, #4]
   237f8:	6108      	str	r0, [r1, #16]
   237fa:	2100      	movs	r1, #0
   237fc:	f36f 0100 	bfc	r1, #0, #1
   23800:	f36f 0141 	bfc	r1, #1, #1
   23804:	f36f 0182 	bfc	r1, #2, #1
   23808:	f36f 01c5 	bfc	r1, #3, #3
   2380c:	2001      	movs	r0, #1
   2380e:	f360 1188 	bfi	r1, r0, #6, #3
   23812:	f3c3 030a 	ubfx	r3, r3, #0, #11
   23816:	f363 2153 	bfi	r1, r3, #9, #11
   2381a:	f36f 511f 	bfc	r1, #20, #12
   2381e:	2300      	movs	r3, #0
   23820:	480e      	ldr	r0, [pc, #56]	; (2385c <hci_driver_open+0x1ec>)
   23822:	f7f0 fc6b 	bl	140fc <z_impl_z_log_msg_static_create>
   23826:	46a5      	mov	sp, r4
		return -EINVAL;
   23828:	f06f 0415 	mvn.w	r4, #21
   2382c:	e798      	b.n	23760 <hci_driver_open+0xf0>
		LOG_ERR("Failed to register rand source (%d)", err);
   2382e:	f06f 031b 	mvn.w	r3, #27
   23832:	e7d9      	b.n	237e8 <hci_driver_open+0x178>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   23834:	490e      	ldr	r1, [pc, #56]	; (23870 <hci_driver_open+0x200>)
   23836:	480f      	ldr	r0, [pc, #60]	; (23874 <hci_driver_open+0x204>)
   23838:	f7dd f84a 	bl	8d0 <sdc_enable>
	if (err) {
   2383c:	4604      	mov	r4, r0
   2383e:	b910      	cbnz	r0, 23846 <hci_driver_open+0x1d6>
	MULTITHREADING_LOCK_RELEASE();
   23840:	f7ff fd08 	bl	23254 <multithreading_lock_release>
	return 0;
   23844:	e78c      	b.n	23760 <hci_driver_open+0xf0>
		MULTITHREADING_LOCK_RELEASE();
   23846:	f7ff fd05 	bl	23254 <multithreading_lock_release>
		return err;
   2384a:	e789      	b.n	23760 <hci_driver_open+0xf0>
   2384c:	0002fd61 	.word	0x0002fd61
   23850:	20004a40 	.word	0x20004a40
   23854:	000335d4 	.word	0x000335d4
   23858:	00034ec0 	.word	0x00034ec0
   2385c:	00031d2c 	.word	0x00031d2c
   23860:	00031a50 	.word	0x00031a50
   23864:	00031ec8 	.word	0x00031ec8
   23868:	00034ee8 	.word	0x00034ee8
   2386c:	00034f08 	.word	0x00034f08
   23870:	20002460 	.word	0x20002460
   23874:	00023595 	.word	0x00023595

00023878 <configure_memory_usage>:
{
   23878:	b5b0      	push	{r4, r5, r7, lr}
   2387a:	b082      	sub	sp, #8
   2387c:	af00      	add	r7, sp, #0
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2387e:	2301      	movs	r3, #1
   23880:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23882:	1d3a      	adds	r2, r7, #4
   23884:	2102      	movs	r1, #2
   23886:	2000      	movs	r0, #0
   23888:	f7dc ffc2 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   2388c:	2800      	cmp	r0, #0
   2388e:	db35      	blt.n	238fc <configure_memory_usage+0x84>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   23890:	2108      	movs	r1, #8
   23892:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23894:	1d3a      	adds	r2, r7, #4
   23896:	2000      	movs	r0, #0
   23898:	f7dc ffba 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   2389c:	2800      	cmp	r0, #0
   2389e:	db2d      	blt.n	238fc <configure_memory_usage+0x84>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   238a0:	231b      	movs	r3, #27
   238a2:	717b      	strb	r3, [r7, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   238a4:	713b      	strb	r3, [r7, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   238a6:	2302      	movs	r3, #2
   238a8:	71fb      	strb	r3, [r7, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   238aa:	2103      	movs	r1, #3
   238ac:	71b9      	strb	r1, [r7, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   238ae:	1d3a      	adds	r2, r7, #4
   238b0:	2000      	movs	r0, #0
   238b2:	f7dc ffad 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   238b6:	2800      	cmp	r0, #0
   238b8:	db20      	blt.n	238fc <configure_memory_usage+0x84>
	cfg.event_length.event_length_us =
   238ba:	f641 534c 	movw	r3, #7500	; 0x1d4c
   238be:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   238c0:	1d3a      	adds	r2, r7, #4
   238c2:	2104      	movs	r1, #4
   238c4:	2000      	movs	r0, #0
   238c6:	f7dc ffa3 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   238ca:	2800      	cmp	r0, #0
   238cc:	db16      	blt.n	238fc <configure_memory_usage+0x84>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   238ce:	2301      	movs	r3, #1
   238d0:	713b      	strb	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   238d2:	1d3a      	adds	r2, r7, #4
   238d4:	2105      	movs	r1, #5
   238d6:	2000      	movs	r0, #0
   238d8:	f7dc ff9a 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   238dc:	2800      	cmp	r0, #0
   238de:	db0d      	blt.n	238fc <configure_memory_usage+0x84>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   238e0:	231f      	movs	r3, #31
   238e2:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   238e4:	1d3a      	adds	r2, r7, #4
   238e6:	2107      	movs	r1, #7
   238e8:	2000      	movs	r0, #0
   238ea:	f7dc ff91 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   238ee:	2800      	cmp	r0, #0
   238f0:	db04      	blt.n	238fc <configure_memory_usage+0x84>
	if (required_memory > sizeof(sdc_mempool)) {
   238f2:	f240 73fa 	movw	r3, #2042	; 0x7fa
   238f6:	4298      	cmp	r0, r3
   238f8:	d803      	bhi.n	23902 <configure_memory_usage+0x8a>
	return 0;
   238fa:	2000      	movs	r0, #0
}
   238fc:	3708      	adds	r7, #8
   238fe:	46bd      	mov	sp, r7
   23900:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   23902:	466c      	mov	r4, sp
   23904:	b088      	sub	sp, #32
   23906:	466b      	mov	r3, sp
   23908:	f113 0210 	adds.w	r2, r3, #16
   2390c:	d03d      	beq.n	2398a <configure_memory_usage+0x112>
   2390e:	2110      	movs	r1, #16
   23910:	b172      	cbz	r2, 23930 <configure_memory_usage+0xb8>
   23912:	468c      	mov	ip, r1
   23914:	2904      	cmp	r1, #4
   23916:	dd01      	ble.n	2391c <configure_memory_usage+0xa4>
   23918:	4d1f      	ldr	r5, [pc, #124]	; (23998 <configure_memory_usage+0x120>)
   2391a:	615d      	str	r5, [r3, #20]
   2391c:	f1bc 0f08 	cmp.w	ip, #8
   23920:	dd02      	ble.n	23928 <configure_memory_usage+0xb0>
   23922:	f240 75fa 	movw	r5, #2042	; 0x7fa
   23926:	619d      	str	r5, [r3, #24]
   23928:	f1bc 0f0c 	cmp.w	ip, #12
   2392c:	dd00      	ble.n	23930 <configure_memory_usage+0xb8>
   2392e:	61d8      	str	r0, [r3, #28]
   23930:	290f      	cmp	r1, #15
   23932:	dd2d      	ble.n	23990 <configure_memory_usage+0x118>
   23934:	f04f 0c10 	mov.w	ip, #16
   23938:	b13a      	cbz	r2, 2394a <configure_memory_usage+0xd2>
   2393a:	2104      	movs	r1, #4
   2393c:	7039      	strb	r1, [r7, #0]
   2393e:	2100      	movs	r1, #0
   23940:	7079      	strb	r1, [r7, #1]
   23942:	70b9      	strb	r1, [r7, #2]
   23944:	70f9      	strb	r1, [r7, #3]
   23946:	6838      	ldr	r0, [r7, #0]
   23948:	6118      	str	r0, [r3, #16]
   2394a:	2100      	movs	r1, #0
   2394c:	f36f 0100 	bfc	r1, #0, #1
   23950:	f36f 0141 	bfc	r1, #1, #1
   23954:	f36f 0182 	bfc	r1, #2, #1
   23958:	f36f 01c5 	bfc	r1, #3, #3
   2395c:	2301      	movs	r3, #1
   2395e:	f363 1188 	bfi	r1, r3, #6, #3
   23962:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
   23966:	f36c 2153 	bfi	r1, ip, #9, #11
   2396a:	f36f 511f 	bfc	r1, #20, #12
   2396e:	2300      	movs	r3, #0
   23970:	480a      	ldr	r0, [pc, #40]	; (2399c <configure_memory_usage+0x124>)
   23972:	f7f0 fbc3 	bl	140fc <z_impl_z_log_msg_static_create>
   23976:	46a5      	mov	sp, r4
		k_panic();
   23978:	4040      	eors	r0, r0
   2397a:	f380 8811 	msr	BASEPRI, r0
   2397e:	f04f 0004 	mov.w	r0, #4
   23982:	df02      	svc	2
		return -ENOMEM;
   23984:	f06f 000b 	mvn.w	r0, #11
   23988:	e7b8      	b.n	238fc <configure_memory_usage+0x84>
		LOG_ERR("Allocated memory too low: %u < %u",
   2398a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2398e:	e7bf      	b.n	23910 <configure_memory_usage+0x98>
   23990:	f06f 0c1b 	mvn.w	ip, #27
   23994:	e7d0      	b.n	23938 <configure_memory_usage+0xc0>
   23996:	bf00      	nop
   23998:	00034f2c 	.word	0x00034f2c
   2399c:	00031d2c 	.word	0x00031d2c

000239a0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   239a0:	b508      	push	{r3, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
   239a2:	4806      	ldr	r0, [pc, #24]	; (239bc <hci_driver_init+0x1c>)
   239a4:	f7f8 f824 	bl	1b9f0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   239a8:	4805      	ldr	r0, [pc, #20]	; (239c0 <hci_driver_init+0x20>)
   239aa:	f7dc ffbb 	bl	924 <sdc_init>

	err = configure_supported_features();
   239ae:	f00c f9b7 	bl	2fd20 <configure_supported_features>
	if (err) {
   239b2:	b100      	cbz	r0, 239b6 <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   239b4:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   239b6:	f7ff ff5f 	bl	23878 <configure_memory_usage>
	if (err) {
   239ba:	e7fb      	b.n	239b4 <hci_driver_init+0x14>
   239bc:	00034f7c 	.word	0x00034f7c
   239c0:	000232dd 	.word	0x000232dd

000239c4 <hci_driver_receive_process>:
{
   239c4:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   239c6:	4805      	ldr	r0, [pc, #20]	; (239dc <hci_driver_receive_process+0x18>)
   239c8:	f7ff fd7e 	bl	234c8 <fetch_and_process_hci_msg>
   239cc:	b900      	cbnz	r0, 239d0 <hci_driver_receive_process+0xc>
}
   239ce:	bd08      	pop	{r3, pc}
   239d0:	4903      	ldr	r1, [pc, #12]	; (239e0 <hci_driver_receive_process+0x1c>)
   239d2:	4804      	ldr	r0, [pc, #16]	; (239e4 <hci_driver_receive_process+0x20>)
   239d4:	f00d faeb 	bl	30fae <k_work_submit_to_queue>
   239d8:	e7f9      	b.n	239ce <hci_driver_receive_process+0xa>
   239da:	bf00      	nop
   239dc:	200049f8 	.word	0x200049f8
   239e0:	20004a40 	.word	0x20004a40
   239e4:	20002d18 	.word	0x20002d18

000239e8 <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   239e8:	f242 0332 	movw	r3, #8242	; 0x2032
   239ec:	4298      	cmp	r0, r3
   239ee:	d04a      	beq.n	23a86 <command_generates_command_complete_event+0x9e>
   239f0:	d82d      	bhi.n	23a4e <command_generates_command_complete_event+0x66>
   239f2:	f242 0326 	movw	r3, #8230	; 0x2026
   239f6:	4298      	cmp	r0, r3
   239f8:	d847      	bhi.n	23a8a <command_generates_command_complete_event+0xa2>
   239fa:	f242 030d 	movw	r3, #8205	; 0x200d
   239fe:	4298      	cmp	r0, r3
   23a00:	d218      	bcs.n	23a34 <command_generates_command_complete_event+0x4c>
   23a02:	f240 4306 	movw	r3, #1030	; 0x406
   23a06:	4298      	cmp	r0, r3
   23a08:	d041      	beq.n	23a8e <command_generates_command_complete_event+0xa6>
   23a0a:	f240 431d 	movw	r3, #1053	; 0x41d
   23a0e:	4298      	cmp	r0, r3
   23a10:	d001      	beq.n	23a16 <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   23a12:	2001      	movs	r0, #1
   23a14:	4770      	bx	lr
	switch (hci_opcode) {
   23a16:	2000      	movs	r0, #0
   23a18:	4770      	bx	lr
   23a1a:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   23a1e:	382d      	subs	r0, #45	; 0x2d
   23a20:	b280      	uxth	r0, r0
   23a22:	4b1e      	ldr	r3, [pc, #120]	; (23a9c <command_generates_command_complete_event+0xb4>)
   23a24:	40c3      	lsrs	r3, r0
   23a26:	f013 0f01 	tst.w	r3, #1
   23a2a:	d101      	bne.n	23a30 <command_generates_command_complete_event+0x48>
		return true;
   23a2c:	2001      	movs	r0, #1
   23a2e:	4770      	bx	lr
	switch (hci_opcode) {
   23a30:	2000      	movs	r0, #0
   23a32:	4770      	bx	lr
   23a34:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   23a38:	380d      	subs	r0, #13
   23a3a:	b280      	uxth	r0, r0
   23a3c:	4b18      	ldr	r3, [pc, #96]	; (23aa0 <command_generates_command_complete_event+0xb8>)
   23a3e:	40c3      	lsrs	r3, r0
   23a40:	f013 0f01 	tst.w	r3, #1
   23a44:	d101      	bne.n	23a4a <command_generates_command_complete_event+0x62>
		return true;
   23a46:	2001      	movs	r0, #1
   23a48:	4770      	bx	lr
	switch (hci_opcode) {
   23a4a:	2000      	movs	r0, #0
   23a4c:	4770      	bx	lr
   23a4e:	f242 0385 	movw	r3, #8325	; 0x2085
   23a52:	4298      	cmp	r0, r3
   23a54:	d80b      	bhi.n	23a6e <command_generates_command_complete_event+0x86>
   23a56:	f242 036d 	movw	r3, #8301	; 0x206d
   23a5a:	4298      	cmp	r0, r3
   23a5c:	d2dd      	bcs.n	23a1a <command_generates_command_complete_event+0x32>
   23a5e:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   23a62:	3803      	subs	r0, #3
   23a64:	b280      	uxth	r0, r0
   23a66:	2801      	cmp	r0, #1
   23a68:	d913      	bls.n	23a92 <command_generates_command_complete_event+0xaa>
		return true;
   23a6a:	2001      	movs	r0, #1
   23a6c:	4770      	bx	lr
	switch (hci_opcode) {
   23a6e:	f64f 5302 	movw	r3, #64770	; 0xfd02
   23a72:	4298      	cmp	r0, r3
   23a74:	d00f      	beq.n	23a96 <command_generates_command_complete_event+0xae>
   23a76:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   23a7a:	4298      	cmp	r0, r3
   23a7c:	d001      	beq.n	23a82 <command_generates_command_complete_event+0x9a>
		return true;
   23a7e:	2001      	movs	r0, #1
	}
}
   23a80:	4770      	bx	lr
	switch (hci_opcode) {
   23a82:	2000      	movs	r0, #0
   23a84:	4770      	bx	lr
   23a86:	2000      	movs	r0, #0
   23a88:	4770      	bx	lr
		return true;
   23a8a:	2001      	movs	r0, #1
   23a8c:	4770      	bx	lr
	switch (hci_opcode) {
   23a8e:	2000      	movs	r0, #0
   23a90:	4770      	bx	lr
   23a92:	2000      	movs	r0, #0
   23a94:	4770      	bx	lr
   23a96:	2000      	movs	r0, #0
   23a98:	4770      	bx	lr
   23a9a:	bf00      	nop
   23a9c:	01000401 	.word	0x01000401
   23aa0:	03001241 	.word	0x03001241

00023aa4 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   23aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23aa6:	b083      	sub	sp, #12
   23aa8:	4607      	mov	r7, r0
   23aaa:	460e      	mov	r6, r1
   23aac:	7843      	ldrb	r3, [r0, #1]
   23aae:	7805      	ldrb	r5, [r0, #0]
   23ab0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   23ab4:	2304      	movs	r3, #4
   23ab6:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   23aba:	4b35      	ldr	r3, [pc, #212]	; (23b90 <cmd_put+0xec>)
   23abc:	681c      	ldr	r4, [r3, #0]
   23abe:	b13c      	cbz	r4, 23ad0 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   23ac0:	f10d 0307 	add.w	r3, sp, #7
   23ac4:	f10d 0206 	add.w	r2, sp, #6
   23ac8:	47a0      	blx	r4
   23aca:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   23acc:	2801      	cmp	r0, #1
   23ace:	d121      	bne.n	23b14 <cmd_put+0x70>

		switch (BT_OGF(opcode)) {
   23ad0:	0aab      	lsrs	r3, r5, #10
   23ad2:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   23ad6:	d20b      	bcs.n	23af0 <cmd_put+0x4c>
   23ad8:	b21a      	sxth	r2, r3
   23ada:	2a00      	cmp	r2, #0
   23adc:	d04b      	beq.n	23b76 <cmd_put+0xd2>
   23ade:	3b01      	subs	r3, #1
   23ae0:	2b07      	cmp	r3, #7
   23ae2:	d84a      	bhi.n	23b7a <cmd_put+0xd6>
   23ae4:	e8df f003 	tbb	[pc, r3]
   23ae8:	2f274922 	.word	0x2f274922
   23aec:	3f494937 	.word	0x3f494937
   23af0:	2b3f      	cmp	r3, #63	; 0x3f
   23af2:	d107      	bne.n	23b04 <cmd_put+0x60>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   23af4:	f10d 0206 	add.w	r2, sp, #6
   23af8:	4631      	mov	r1, r6
   23afa:	4638      	mov	r0, r7
   23afc:	f00c fc14 	bl	30328 <vs_cmd_put>
   23b00:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   23b02:	e000      	b.n	23b06 <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   23b04:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   23b06:	4628      	mov	r0, r5
   23b08:	f7ff ff6e 	bl	239e8 <command_generates_command_complete_event>
   23b0c:	f080 0001 	eor.w	r0, r0, #1
   23b10:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   23b14:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23b18:	b90b      	cbnz	r3, 23b1e <cmd_put+0x7a>
   23b1a:	2c01      	cmp	r4, #1
   23b1c:	d12f      	bne.n	23b7e <cmd_put+0xda>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   23b1e:	4622      	mov	r2, r4
   23b20:	4629      	mov	r1, r5
   23b22:	4630      	mov	r0, r6
   23b24:	f00c f920 	bl	2fd68 <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   23b28:	b003      	add	sp, #12
   23b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = link_control_cmd_put(cmd_in);
   23b2c:	4638      	mov	r0, r7
   23b2e:	f00c f936 	bl	2fd9e <link_control_cmd_put>
   23b32:	4604      	mov	r4, r0
			break;
   23b34:	e7e7      	b.n	23b06 <cmd_put+0x62>
			status = controller_and_baseband_cmd_put(cmd_in,
   23b36:	f10d 0206 	add.w	r2, sp, #6
   23b3a:	4631      	mov	r1, r6
   23b3c:	4638      	mov	r0, r7
   23b3e:	f00c f945 	bl	2fdcc <controller_and_baseband_cmd_put>
   23b42:	4604      	mov	r4, r0
			break;
   23b44:	e7df      	b.n	23b06 <cmd_put+0x62>
			status = info_param_cmd_put(cmd_in,
   23b46:	f10d 0206 	add.w	r2, sp, #6
   23b4a:	4631      	mov	r1, r6
   23b4c:	4638      	mov	r0, r7
   23b4e:	f00c fa6f 	bl	30030 <info_param_cmd_put>
   23b52:	4604      	mov	r4, r0
			break;
   23b54:	e7d7      	b.n	23b06 <cmd_put+0x62>
			status = status_param_cmd_put(cmd_in,
   23b56:	f10d 0206 	add.w	r2, sp, #6
   23b5a:	4631      	mov	r1, r6
   23b5c:	4638      	mov	r0, r7
   23b5e:	f00c f91c 	bl	2fd9a <status_param_cmd_put>
   23b62:	4604      	mov	r4, r0
			break;
   23b64:	e7cf      	b.n	23b06 <cmd_put+0x62>
			status = le_controller_cmd_put(cmd_in,
   23b66:	f10d 0206 	add.w	r2, sp, #6
   23b6a:	4631      	mov	r1, r6
   23b6c:	4638      	mov	r0, r7
   23b6e:	f00c faf1 	bl	30154 <le_controller_cmd_put>
   23b72:	4604      	mov	r4, r0
			break;
   23b74:	e7c7      	b.n	23b06 <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   23b76:	2401      	movs	r4, #1
   23b78:	e7c5      	b.n	23b06 <cmd_put+0x62>
   23b7a:	2401      	movs	r4, #1
   23b7c:	e7c3      	b.n	23b06 <cmd_put+0x62>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   23b7e:	4623      	mov	r3, r4
   23b80:	f89d 2006 	ldrb.w	r2, [sp, #6]
   23b84:	4629      	mov	r1, r5
   23b86:	4630      	mov	r0, r6
   23b88:	f00c f8f7 	bl	2fd7a <encode_command_complete_header>
}
   23b8c:	e7cc      	b.n	23b28 <cmd_put+0x84>
   23b8e:	bf00      	nop
   23b90:	20004a50 	.word	0x20004a50

00023b94 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   23b94:	b538      	push	{r3, r4, r5, lr}
   23b96:	7842      	ldrb	r2, [r0, #1]
   23b98:	7803      	ldrb	r3, [r0, #0]
   23b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23b9e:	b21c      	sxth	r4, r3
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   23ba0:	4b0e      	ldr	r3, [pc, #56]	; (23bdc <hci_internal_cmd_put+0x48>)
   23ba2:	781b      	ldrb	r3, [r3, #0]
   23ba4:	b9b3      	cbnz	r3, 23bd4 <hci_internal_cmd_put+0x40>
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   23ba6:	4d0e      	ldr	r5, [pc, #56]	; (23be0 <hci_internal_cmd_put+0x4c>)
   23ba8:	4629      	mov	r1, r5
   23baa:	f7ff ff7b 	bl	23aa4 <cmd_put>
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
   23bae:	2301      	movs	r3, #1
   23bb0:	f805 3c01 	strb.w	r3, [r5, #-1]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   23bb4:	f242 0383 	movw	r3, #8323	; 0x2083
   23bb8:	429c      	cmp	r4, r3
   23bba:	d001      	beq.n	23bc0 <hci_internal_cmd_put+0x2c>
		 */

		cmd_complete_or_status.occurred = false;
	}

	return 0;
   23bbc:	2000      	movs	r0, #0
}
   23bbe:	bd38      	pop	{r3, r4, r5, pc}
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
   23bc0:	1e6b      	subs	r3, r5, #1
   23bc2:	785b      	ldrb	r3, [r3, #1]
		&&
   23bc4:	2b0e      	cmp	r3, #14
   23bc6:	d001      	beq.n	23bcc <hci_internal_cmd_put+0x38>
	return 0;
   23bc8:	2000      	movs	r0, #0
   23bca:	e7f8      	b.n	23bbe <hci_internal_cmd_put+0x2a>
		cmd_complete_or_status.occurred = false;
   23bcc:	2000      	movs	r0, #0
   23bce:	1e6b      	subs	r3, r5, #1
   23bd0:	7018      	strb	r0, [r3, #0]
   23bd2:	e7f4      	b.n	23bbe <hci_internal_cmd_put+0x2a>
		return -NRF_EPERM;
   23bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23bd8:	e7f1      	b.n	23bbe <hci_internal_cmd_put+0x2a>
   23bda:	bf00      	nop
   23bdc:	20004a54 	.word	0x20004a54
   23be0:	20004a55 	.word	0x20004a55

00023be4 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   23be4:	b538      	push	{r3, r4, r5, lr}
   23be6:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   23be8:	4b08      	ldr	r3, [pc, #32]	; (23c0c <hci_internal_msg_get+0x28>)
   23bea:	781b      	ldrb	r3, [r3, #0]
   23bec:	b913      	cbnz	r3, 23bf4 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   23bee:	f7e8 ffc1 	bl	cb74 <sdc_hci_get>
}
   23bf2:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   23bf4:	4d05      	ldr	r5, [pc, #20]	; (23c0c <hci_internal_msg_get+0x28>)
   23bf6:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   23bf8:	3202      	adds	r2, #2
   23bfa:	1c69      	adds	r1, r5, #1
   23bfc:	f008 fdf6 	bl	2c7ec <memcpy>
		cmd_complete_or_status.occurred = false;
   23c00:	2000      	movs	r0, #0
   23c02:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   23c04:	2304      	movs	r3, #4
   23c06:	7023      	strb	r3, [r4, #0]
		return 0;
   23c08:	e7f3      	b.n	23bf2 <hci_internal_msg_get+0xe>
   23c0a:	bf00      	nop
   23c0c:	20004a54 	.word	0x20004a54

00023c10 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   23c10:	b538      	push	{r3, r4, r5, lr}
   23c12:	4605      	mov	r5, r0
   23c14:	460c      	mov	r4, r1
   23c16:	4809      	ldr	r0, [pc, #36]	; (23c3c <bt_rand+0x2c>)
   23c18:	f00c feb2 	bl	30980 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   23c1c:	f080 0301 	eor.w	r3, r0, #1
   23c20:	f013 0fff 	tst.w	r3, #255	; 0xff
   23c24:	d106      	bne.n	23c34 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   23c26:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   23c28:	4804      	ldr	r0, [pc, #16]	; (23c3c <bt_rand+0x2c>)
   23c2a:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   23c2c:	681b      	ldr	r3, [r3, #0]
   23c2e:	4629      	mov	r1, r5
   23c30:	4798      	blx	r3
}
   23c32:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   23c34:	f06f 0012 	mvn.w	r0, #18
   23c38:	e7fb      	b.n	23c32 <bt_rand+0x22>
   23c3a:	bf00      	nop
   23c3c:	00031a50 	.word	0x00031a50

00023c40 <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   23c40:	b508      	push	{r3, lr}
   23c42:	e002      	b.n	23c4a <public_key+0xa>
		if (err) {
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
			err = -1;
   23c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
						   ecdh.private_key_be);
	} while (err);
   23c48:	b190      	cbz	r0, 23c70 <public_key+0x30>
		err = bt_rand(ecdh.private_key_be, 32);
   23c4a:	2120      	movs	r1, #32
   23c4c:	4809      	ldr	r0, [pc, #36]	; (23c74 <public_key+0x34>)
   23c4e:	f7ff ffdf 	bl	23c10 <bt_rand>
		if (err) {
   23c52:	b960      	cbnz	r0, 23c6e <public_key+0x2e>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   23c54:	2220      	movs	r2, #32
   23c56:	4908      	ldr	r1, [pc, #32]	; (23c78 <public_key+0x38>)
   23c58:	4806      	ldr	r0, [pc, #24]	; (23c74 <public_key+0x34>)
   23c5a:	f008 fda2 	bl	2c7a2 <memcmp>
   23c5e:	2800      	cmp	r0, #0
   23c60:	d0f0      	beq.n	23c44 <public_key+0x4>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   23c62:	4904      	ldr	r1, [pc, #16]	; (23c74 <public_key+0x34>)
   23c64:	f101 0020 	add.w	r0, r1, #32
   23c68:	f003 fb9e 	bl	273a8 <ocrypto_ecdh_p256_public_key>
   23c6c:	e7ec      	b.n	23c48 <public_key+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   23c6e:	201f      	movs	r0, #31

	return 0;
}
   23c70:	bd08      	pop	{r3, pc}
   23c72:	bf00      	nop
   23c74:	20004ab0 	.word	0x20004ab0
   23c78:	00034fe8 	.word	0x00034fe8

00023c7c <ecdh_p256_public_key>:
	return 0;
}
#endif /* defined(BT_CTLR_ECDH_LIB_TINYCRYPT) */

static struct net_buf *ecdh_p256_public_key(void)
{
   23c7c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = public_key();
   23c7e:	f7ff ffdf 	bl	23c40 <public_key>
   23c82:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   23c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23c8c:	2001      	movs	r0, #1
   23c8e:	f7f5 f8ad 	bl	18dec <bt_buf_get_rx>
   23c92:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   23c94:	f100 060c 	add.w	r6, r0, #12
   23c98:	2102      	movs	r1, #2
   23c9a:	4630      	mov	r0, r6
   23c9c:	f00b f97b 	bl	2ef96 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   23ca0:	233e      	movs	r3, #62	; 0x3e
   23ca2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   23ca4:	2342      	movs	r3, #66	; 0x42
   23ca6:	7043      	strb	r3, [r0, #1]
   23ca8:	2101      	movs	r1, #1
   23caa:	4630      	mov	r0, r6
   23cac:	f00b f973 	bl	2ef96 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   23cb0:	2308      	movs	r3, #8
   23cb2:	7003      	strb	r3, [r0, #0]
   23cb4:	2141      	movs	r1, #65	; 0x41
   23cb6:	4630      	mov	r0, r6
   23cb8:	f00b f96d 	bl	2ef96 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   23cbc:	7005      	strb	r5, [r0, #0]

	if (status) {
   23cbe:	b91d      	cbnz	r5, 23cc8 <ecdh_p256_public_key+0x4c>
		(void)memset(evt->key, 0, sizeof(evt->key));
	} else {
		/* Reverse X */
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   23cc0:	1c42      	adds	r2, r0, #1

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   23cc2:	4b0e      	ldr	r3, [pc, #56]	; (23cfc <ecdh_p256_public_key+0x80>)

	for (; length > 0; length--) {
   23cc4:	2120      	movs	r1, #32
   23cc6:	e00a      	b.n	23cde <ecdh_p256_public_key+0x62>
		(void)memset(evt->key, 0, sizeof(evt->key));
   23cc8:	2240      	movs	r2, #64	; 0x40
   23cca:	2100      	movs	r1, #0
   23ccc:	3001      	adds	r0, #1
   23cce:	f008 fdbc 	bl	2c84a <memset>
   23cd2:	e011      	b.n	23cf8 <ecdh_p256_public_key+0x7c>
		*pdst++ = *psrc--;
   23cd4:	f813 c901 	ldrb.w	ip, [r3], #-1
   23cd8:	f802 cb01 	strb.w	ip, [r2], #1
	for (; length > 0; length--) {
   23cdc:	3901      	subs	r1, #1
   23cde:	2900      	cmp	r1, #0
   23ce0:	d1f8      	bne.n	23cd4 <ecdh_p256_public_key+0x58>
		/* Reverse Y */
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   23ce2:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   23ce4:	4b06      	ldr	r3, [pc, #24]	; (23d00 <ecdh_p256_public_key+0x84>)
	for (; length > 0; length--) {
   23ce6:	2220      	movs	r2, #32
   23ce8:	e004      	b.n	23cf4 <ecdh_p256_public_key+0x78>
		*pdst++ = *psrc--;
   23cea:	f813 1901 	ldrb.w	r1, [r3], #-1
   23cee:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   23cf2:	3a01      	subs	r2, #1
   23cf4:	2a00      	cmp	r2, #0
   23cf6:	d1f8      	bne.n	23cea <ecdh_p256_public_key+0x6e>
	}

	return buf;
}
   23cf8:	4620      	mov	r0, r4
   23cfa:	bd70      	pop	{r4, r5, r6, pc}
   23cfc:	20004aef 	.word	0x20004aef
   23d00:	20004b0f 	.word	0x20004b0f

00023d04 <common_secret>:
{
   23d04:	b5b0      	push	{r4, r5, r7, lr}
   23d06:	b082      	sub	sp, #8
   23d08:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   23d0a:	b150      	cbz	r0, 23d22 <common_secret+0x1e>
   23d0c:	4924      	ldr	r1, [pc, #144]	; (23da0 <common_secret+0x9c>)
   23d0e:	4825      	ldr	r0, [pc, #148]	; (23da4 <common_secret+0xa0>)
   23d10:	4602      	mov	r2, r0
   23d12:	f003 fb5d 	bl	273d0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   23d16:	4603      	mov	r3, r0
   23d18:	b928      	cbnz	r0, 23d26 <common_secret+0x22>
	return 0;
   23d1a:	2000      	movs	r0, #0
}
   23d1c:	3708      	adds	r7, #8
   23d1e:	46bd      	mov	sp, r7
   23d20:	bdb0      	pop	{r4, r5, r7, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   23d22:	4921      	ldr	r1, [pc, #132]	; (23da8 <common_secret+0xa4>)
   23d24:	e7f3      	b.n	23d0e <common_secret+0xa>
		LOG_ERR("public key is not valid (err %d)", err);
   23d26:	466c      	mov	r4, sp
   23d28:	b088      	sub	sp, #32
   23d2a:	4669      	mov	r1, sp
   23d2c:	f111 0210 	adds.w	r2, r1, #16
   23d30:	d02f      	beq.n	23d92 <common_secret+0x8e>
   23d32:	200c      	movs	r0, #12
   23d34:	b142      	cbz	r2, 23d48 <common_secret+0x44>
   23d36:	4684      	mov	ip, r0
   23d38:	2804      	cmp	r0, #4
   23d3a:	dd01      	ble.n	23d40 <common_secret+0x3c>
   23d3c:	4d1b      	ldr	r5, [pc, #108]	; (23dac <common_secret+0xa8>)
   23d3e:	614d      	str	r5, [r1, #20]
   23d40:	f1bc 0f08 	cmp.w	ip, #8
   23d44:	dd00      	ble.n	23d48 <common_secret+0x44>
   23d46:	618b      	str	r3, [r1, #24]
   23d48:	280b      	cmp	r0, #11
   23d4a:	dd25      	ble.n	23d98 <common_secret+0x94>
   23d4c:	230c      	movs	r3, #12
   23d4e:	b13a      	cbz	r2, 23d60 <common_secret+0x5c>
   23d50:	2003      	movs	r0, #3
   23d52:	7138      	strb	r0, [r7, #4]
   23d54:	2000      	movs	r0, #0
   23d56:	7178      	strb	r0, [r7, #5]
   23d58:	71b8      	strb	r0, [r7, #6]
   23d5a:	71f8      	strb	r0, [r7, #7]
   23d5c:	6878      	ldr	r0, [r7, #4]
   23d5e:	6108      	str	r0, [r1, #16]
   23d60:	2100      	movs	r1, #0
   23d62:	f36f 0100 	bfc	r1, #0, #1
   23d66:	f36f 0141 	bfc	r1, #1, #1
   23d6a:	f36f 0182 	bfc	r1, #2, #1
   23d6e:	f36f 01c5 	bfc	r1, #3, #3
   23d72:	2001      	movs	r0, #1
   23d74:	f360 1188 	bfi	r1, r0, #6, #3
   23d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
   23d7c:	f363 2153 	bfi	r1, r3, #9, #11
   23d80:	f36f 511f 	bfc	r1, #20, #12
   23d84:	2300      	movs	r3, #0
   23d86:	480a      	ldr	r0, [pc, #40]	; (23db0 <common_secret+0xac>)
   23d88:	f7f0 f9b8 	bl	140fc <z_impl_z_log_msg_static_create>
   23d8c:	46a5      	mov	sp, r4
		return BT_HCI_ERR_INVALID_PARAM;
   23d8e:	2012      	movs	r0, #18
   23d90:	e7c4      	b.n	23d1c <common_secret+0x18>
		LOG_ERR("public key is not valid (err %d)", err);
   23d92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23d96:	e7cd      	b.n	23d34 <common_secret+0x30>
   23d98:	f06f 031b 	mvn.w	r3, #27
   23d9c:	e7d7      	b.n	23d4e <common_secret+0x4a>
   23d9e:	bf00      	nop
   23da0:	00034fe8 	.word	0x00034fe8
   23da4:	20004ad0 	.word	0x20004ad0
   23da8:	20004ab0 	.word	0x20004ab0
   23dac:	00034fa4 	.word	0x00034fa4
   23db0:	00031d24 	.word	0x00031d24

00023db4 <ecdh_p256_common_secret>:

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   23db4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);
   23db6:	f7ff ffa5 	bl	23d04 <common_secret>
   23dba:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   23dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23dc4:	2001      	movs	r0, #1
   23dc6:	f7f5 f811 	bl	18dec <bt_buf_get_rx>
   23dca:	4604      	mov	r4, r0
   23dcc:	f100 060c 	add.w	r6, r0, #12
   23dd0:	2102      	movs	r1, #2
   23dd2:	4630      	mov	r0, r6
   23dd4:	f00b f8df 	bl	2ef96 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   23dd8:	233e      	movs	r3, #62	; 0x3e
   23dda:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   23ddc:	2322      	movs	r3, #34	; 0x22
   23dde:	7043      	strb	r3, [r0, #1]
   23de0:	2101      	movs	r1, #1
   23de2:	4630      	mov	r0, r6
   23de4:	f00b f8d7 	bl	2ef96 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   23de8:	2309      	movs	r3, #9
   23dea:	7003      	strb	r3, [r0, #0]
   23dec:	2121      	movs	r1, #33	; 0x21
   23dee:	4630      	mov	r0, r6
   23df0:	f00b f8d1 	bl	2ef96 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   23df4:	7005      	strb	r5, [r0, #0]

	if (status) {
   23df6:	b91d      	cbnz	r5, 23e00 <ecdh_p256_common_secret+0x4c>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
	} else {
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   23df8:	3001      	adds	r0, #1
	psrc += length - 1;
   23dfa:	4b09      	ldr	r3, [pc, #36]	; (23e20 <ecdh_p256_common_secret+0x6c>)
	for (; length > 0; length--) {
   23dfc:	2220      	movs	r2, #32
   23dfe:	e00a      	b.n	23e16 <ecdh_p256_common_secret+0x62>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   23e00:	2220      	movs	r2, #32
   23e02:	21ff      	movs	r1, #255	; 0xff
   23e04:	3001      	adds	r0, #1
   23e06:	f008 fd20 	bl	2c84a <memset>
   23e0a:	e006      	b.n	23e1a <ecdh_p256_common_secret+0x66>
		*pdst++ = *psrc--;
   23e0c:	f813 1901 	ldrb.w	r1, [r3], #-1
   23e10:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   23e14:	3a01      	subs	r2, #1
   23e16:	2a00      	cmp	r2, #0
   23e18:	d1f8      	bne.n	23e0c <ecdh_p256_common_secret+0x58>
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   23e1a:	4620      	mov	r0, r4
   23e1c:	bd70      	pop	{r4, r5, r6, pc}
   23e1e:	bf00      	nop
   23e20:	20004aef 	.word	0x20004aef

00023e24 <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   23e24:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   23e26:	2100      	movs	r1, #0
   23e28:	4801      	ldr	r0, [pc, #4]	; (23e30 <work_submit+0xc>)
   23e2a:	f003 fa77 	bl	2731c <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   23e2e:	bd08      	pop	{r3, pc}
   23e30:	20004a9c 	.word	0x20004a9c

00023e34 <ecdh_cmd_process>:
{
   23e34:	b510      	push	{r4, lr}
   23e36:	b088      	sub	sp, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23e38:	f3bf 8f5b 	dmb	ish
   23e3c:	4b24      	ldr	r3, [pc, #144]	; (23ed0 <ecdh_cmd_process+0x9c>)
   23e3e:	681b      	ldr	r3, [r3, #0]
   23e40:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   23e44:	2b02      	cmp	r3, #2
   23e46:	d03b      	beq.n	23ec0 <ecdh_cmd_process+0x8c>
   23e48:	2b04      	cmp	r3, #4
   23e4a:	d03d      	beq.n	23ec8 <ecdh_cmd_process+0x94>
   23e4c:	2b01      	cmp	r3, #1
   23e4e:	d024      	beq.n	23e9a <ecdh_cmd_process+0x66>
		LOG_WRN("Unknown command");
   23e50:	4b20      	ldr	r3, [pc, #128]	; (23ed4 <ecdh_cmd_process+0xa0>)
   23e52:	9307      	str	r3, [sp, #28]
   23e54:	2302      	movs	r3, #2
   23e56:	f88d 3004 	strb.w	r3, [sp, #4]
   23e5a:	2400      	movs	r4, #0
   23e5c:	f88d 4005 	strb.w	r4, [sp, #5]
   23e60:	f88d 4006 	strb.w	r4, [sp, #6]
   23e64:	f88d 4007 	strb.w	r4, [sp, #7]
   23e68:	9a01      	ldr	r2, [sp, #4]
   23e6a:	9206      	str	r2, [sp, #24]
   23e6c:	4621      	mov	r1, r4
   23e6e:	f364 0100 	bfi	r1, r4, #0, #1
   23e72:	f364 0141 	bfi	r1, r4, #1, #1
   23e76:	f364 0182 	bfi	r1, r4, #2, #1
   23e7a:	f364 01c5 	bfi	r1, r4, #3, #3
   23e7e:	f363 1188 	bfi	r1, r3, #6, #3
   23e82:	2308      	movs	r3, #8
   23e84:	f363 2153 	bfi	r1, r3, #9, #11
   23e88:	f364 511f 	bfi	r1, r4, #20, #12
   23e8c:	4623      	mov	r3, r4
   23e8e:	aa06      	add	r2, sp, #24
   23e90:	4811      	ldr	r0, [pc, #68]	; (23ed8 <ecdh_cmd_process+0xa4>)
   23e92:	f7f0 f933 	bl	140fc <z_impl_z_log_msg_static_create>
		buf = NULL;
   23e96:	4620      	mov	r0, r4
		break;
   23e98:	e001      	b.n	23e9e <ecdh_cmd_process+0x6a>
		buf = ecdh_p256_public_key();
   23e9a:	f7ff feef 	bl	23c7c <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23e9e:	4b0c      	ldr	r3, [pc, #48]	; (23ed0 <ecdh_cmd_process+0x9c>)
   23ea0:	2200      	movs	r2, #0
   23ea2:	f3bf 8f5b 	dmb	ish
   23ea6:	e853 1f00 	ldrex	r1, [r3]
   23eaa:	e843 2400 	strex	r4, r2, [r3]
   23eae:	2c00      	cmp	r4, #0
   23eb0:	d1f9      	bne.n	23ea6 <ecdh_cmd_process+0x72>
   23eb2:	f3bf 8f5b 	dmb	ish
	if (buf) {
   23eb6:	b108      	cbz	r0, 23ebc <ecdh_cmd_process+0x88>
		bt_recv(buf);
   23eb8:	f7f7 fd30 	bl	1b91c <bt_recv>
}
   23ebc:	b008      	add	sp, #32
   23ebe:	bd10      	pop	{r4, pc}
		buf = ecdh_p256_common_secret(false);
   23ec0:	2000      	movs	r0, #0
   23ec2:	f7ff ff77 	bl	23db4 <ecdh_p256_common_secret>
		break;
   23ec6:	e7ea      	b.n	23e9e <ecdh_cmd_process+0x6a>
		buf = ecdh_p256_common_secret(true);
   23ec8:	2001      	movs	r0, #1
   23eca:	f7ff ff73 	bl	23db4 <ecdh_p256_common_secret>
		break;
   23ece:	e7e6      	b.n	23e9e <ecdh_cmd_process+0x6a>
   23ed0:	20004aac 	.word	0x20004aac
   23ed4:	00034fc8 	.word	0x00034fc8
   23ed8:	00031d24 	.word	0x00031d24

00023edc <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   23edc:	b500      	push	{lr}
   23ede:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   23ee0:	2300      	movs	r3, #0
   23ee2:	9301      	str	r3, [sp, #4]
   23ee4:	9302      	str	r3, [sp, #8]
   23ee6:	9303      	str	r3, [sp, #12]
   23ee8:	9304      	str	r3, [sp, #16]
   23eea:	9305      	str	r3, [sp, #20]
   23eec:	f89d 3011 	ldrb.w	r3, [sp, #17]
   23ef0:	2201      	movs	r2, #1
   23ef2:	f362 0305 	bfi	r3, r2, #0, #6
   23ef6:	f88d 3011 	strb.w	r3, [sp, #17]
   23efa:	4b0a      	ldr	r3, [pc, #40]	; (23f24 <ecdh_thread+0x48>)
   23efc:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   23efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23f06:	2101      	movs	r1, #1
   23f08:	a801      	add	r0, sp, #4
   23f0a:	f003 f9a9 	bl	27260 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   23f0e:	4805      	ldr	r0, [pc, #20]	; (23f24 <ecdh_thread+0x48>)
   23f10:	f00d fd01 	bl	31916 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   23f14:	9b04      	ldr	r3, [sp, #16]
   23f16:	f36f 3394 	bfc	r3, #14, #7
   23f1a:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   23f1c:	f7ff ff8a 	bl	23e34 <ecdh_cmd_process>
	while (true) {
   23f20:	e7ed      	b.n	23efe <ecdh_thread+0x22>
   23f22:	bf00      	nop
   23f24:	20004a9c 	.word	0x20004a9c

00023f28 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   23f28:	b510      	push	{r4, lr}
   23f2a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   23f2c:	480d      	ldr	r0, [pc, #52]	; (23f64 <hci_ecdh_init+0x3c>)
   23f2e:	f00d fced 	bl	3190c <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23f32:	4c0d      	ldr	r4, [pc, #52]	; (23f68 <hci_ecdh_init+0x40>)
   23f34:	2200      	movs	r2, #0
   23f36:	2300      	movs	r3, #0
   23f38:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23f3c:	2300      	movs	r3, #0
   23f3e:	9304      	str	r3, [sp, #16]
   23f40:	220a      	movs	r2, #10
   23f42:	9203      	str	r2, [sp, #12]
   23f44:	9302      	str	r3, [sp, #8]
   23f46:	9301      	str	r3, [sp, #4]
   23f48:	9300      	str	r3, [sp, #0]
   23f4a:	4b08      	ldr	r3, [pc, #32]	; (23f6c <hci_ecdh_init+0x44>)
   23f4c:	f44f 7262 	mov.w	r2, #904	; 0x388
   23f50:	4907      	ldr	r1, [pc, #28]	; (23f70 <hci_ecdh_init+0x48>)
   23f52:	4620      	mov	r0, r4
   23f54:	f00c fe25 	bl	30ba2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   23f58:	4906      	ldr	r1, [pc, #24]	; (23f74 <hci_ecdh_init+0x4c>)
   23f5a:	4620      	mov	r0, r4
   23f5c:	f001 ff9a 	bl	25e94 <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   23f60:	b008      	add	sp, #32
   23f62:	bd10      	pop	{r4, pc}
   23f64:	20004a9c 	.word	0x20004a9c
   23f68:	20002c60 	.word	0x20002c60
   23f6c:	00023edd 	.word	0x00023edd
   23f70:	20007940 	.word	0x20007940
   23f74:	00034fd8 	.word	0x00034fd8

00023f78 <hci_ecdh_uninit>:

void hci_ecdh_uninit(void)
{
   23f78:	b508      	push	{r3, lr}
	z_impl_k_thread_abort(thread);
   23f7a:	4802      	ldr	r0, [pc, #8]	; (23f84 <hci_ecdh_uninit+0xc>)
   23f7c:	f7f4 fc96 	bl	188ac <z_impl_k_thread_abort>
#if !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK)
	k_thread_abort(&ecdh_thread_data);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   23f80:	bd08      	pop	{r3, pc}
   23f82:	bf00      	nop
   23f84:	20002c60 	.word	0x20002c60

00023f88 <hci_cmd_le_read_local_p256_public_key>:


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   23f88:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23f8a:	4b0a      	ldr	r3, [pc, #40]	; (23fb4 <hci_cmd_le_read_local_p256_public_key+0x2c>)
   23f8c:	2201      	movs	r2, #1
   23f8e:	f3bf 8f5b 	dmb	ish
   23f92:	e853 1f00 	ldrex	r1, [r3]
   23f96:	2900      	cmp	r1, #0
   23f98:	d103      	bne.n	23fa2 <hci_cmd_le_read_local_p256_public_key+0x1a>
   23f9a:	e843 2000 	strex	r0, r2, [r3]
   23f9e:	2800      	cmp	r0, #0
   23fa0:	d1f7      	bne.n	23f92 <hci_cmd_le_read_local_p256_public_key+0xa>
   23fa2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   23fa6:	d103      	bne.n	23fb0 <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   23fa8:	f7ff ff3c 	bl	23e24 <work_submit>

	return 0;
   23fac:	2000      	movs	r0, #0
}
   23fae:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23fb0:	200c      	movs	r0, #12
   23fb2:	e7fc      	b.n	23fae <hci_cmd_le_read_local_p256_public_key+0x26>
   23fb4:	20004aac 	.word	0x20004aac

00023fb8 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   23fb8:	b508      	push	{r3, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   23fba:	b1a1      	cbz	r1, 23fe6 <cmd_le_generate_dhkey+0x2e>
   23fbc:	2204      	movs	r2, #4
   23fbe:	4b17      	ldr	r3, [pc, #92]	; (2401c <cmd_le_generate_dhkey+0x64>)
   23fc0:	f3bf 8f5b 	dmb	ish
   23fc4:	e853 1f00 	ldrex	r1, [r3]
   23fc8:	2900      	cmp	r1, #0
   23fca:	d104      	bne.n	23fd6 <cmd_le_generate_dhkey+0x1e>
   23fcc:	e843 2c00 	strex	ip, r2, [r3]
   23fd0:	f1bc 0f00 	cmp.w	ip, #0
   23fd4:	d1f6      	bne.n	23fc4 <cmd_le_generate_dhkey+0xc>
   23fd6:	f3bf 8f5b 	dmb	ish
   23fda:	d11c      	bne.n	24016 <cmd_le_generate_dhkey+0x5e>
	psrc += length - 1;
   23fdc:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   23fe0:	4b0f      	ldr	r3, [pc, #60]	; (24020 <cmd_le_generate_dhkey+0x68>)
	for (; length > 0; length--) {
   23fe2:	2120      	movs	r1, #32
   23fe4:	e006      	b.n	23ff4 <cmd_le_generate_dhkey+0x3c>
   23fe6:	2202      	movs	r2, #2
   23fe8:	e7e9      	b.n	23fbe <cmd_le_generate_dhkey+0x6>
		*pdst++ = *psrc--;
   23fea:	f812 c901 	ldrb.w	ip, [r2], #-1
   23fee:	f803 cb01 	strb.w	ip, [r3], #1
	for (; length > 0; length--) {
   23ff2:	3901      	subs	r1, #1
   23ff4:	2900      	cmp	r1, #0
   23ff6:	d1f8      	bne.n	23fea <cmd_le_generate_dhkey+0x32>
	psrc += length - 1;
   23ff8:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   23ffa:	4b0a      	ldr	r3, [pc, #40]	; (24024 <cmd_le_generate_dhkey+0x6c>)
	for (; length > 0; length--) {
   23ffc:	2220      	movs	r2, #32
   23ffe:	e004      	b.n	2400a <cmd_le_generate_dhkey+0x52>
		*pdst++ = *psrc--;
   24000:	f810 1901 	ldrb.w	r1, [r0], #-1
   24004:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   24008:	3a01      	subs	r2, #1
   2400a:	2a00      	cmp	r2, #0
   2400c:	d1f8      	bne.n	24000 <cmd_le_generate_dhkey+0x48>
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);

	work_submit();
   2400e:	f7ff ff09 	bl	23e24 <work_submit>

	return 0;
   24012:	2000      	movs	r0, #0
}
   24014:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   24016:	200c      	movs	r0, #12
   24018:	e7fc      	b.n	24014 <cmd_le_generate_dhkey+0x5c>
   2401a:	bf00      	nop
   2401c:	20004aac 	.word	0x20004aac
   24020:	20004ad0 	.word	0x20004ad0
   24024:	20004af0 	.word	0x20004af0

00024028 <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   24028:	b500      	push	{lr}
   2402a:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   2402c:	f00c fa0c 	bl	30448 <m_config_clock_source_get>
   24030:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   24034:	2332      	movs	r3, #50	; 0x32
   24036:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   2403a:	2300      	movs	r3, #0
   2403c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   24040:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   24044:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   24048:	4a03      	ldr	r2, [pc, #12]	; (24058 <mpsl_lib_init_internal+0x30>)
   2404a:	2119      	movs	r1, #25
   2404c:	4668      	mov	r0, sp
   2404e:	f7e7 ff77 	bl	bf40 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   24052:	b003      	add	sp, #12
   24054:	f85d fb04 	ldr.w	pc, [sp], #4
   24058:	0002405d 	.word	0x0002405d

0002405c <m_assert_handler>:
{
   2405c:	b590      	push	{r4, r7, lr}
   2405e:	b083      	sub	sp, #12
   24060:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   24062:	466c      	mov	r4, sp
   24064:	2300      	movs	r3, #0
   24066:	713b      	strb	r3, [r7, #4]
   24068:	2302      	movs	r3, #2
   2406a:	717b      	strb	r3, [r7, #5]
   2406c:	b08a      	sub	sp, #40	; 0x28
   2406e:	46ec      	mov	ip, sp
   24070:	f11c 0210 	adds.w	r2, ip, #16
   24074:	d01b      	beq.n	240ae <m_assert_handler+0x52>
   24076:	f04f 0e12 	mov.w	lr, #18
   2407a:	b12a      	cbz	r2, 24088 <m_assert_handler+0x2c>
   2407c:	f1be 0f04 	cmp.w	lr, #4
   24080:	dd02      	ble.n	24088 <m_assert_handler+0x2c>
   24082:	4b2a      	ldr	r3, [pc, #168]	; (2412c <m_assert_handler+0xd0>)
   24084:	f8cc 3014 	str.w	r3, [ip, #20]
   24088:	2300      	movs	r3, #0
   2408a:	703b      	strb	r3, [r7, #0]
   2408c:	2302      	movs	r3, #2
   2408e:	707b      	strb	r3, [r7, #1]
   24090:	b1d2      	cbz	r2, 240c8 <m_assert_handler+0x6c>
   24092:	4673      	mov	r3, lr
   24094:	f1be 0f08 	cmp.w	lr, #8
   24098:	dd01      	ble.n	2409e <m_assert_handler+0x42>
   2409a:	f8cc 0018 	str.w	r0, [ip, #24]
   2409e:	2b0c      	cmp	r3, #12
   240a0:	dd01      	ble.n	240a6 <m_assert_handler+0x4a>
   240a2:	f8cc 101c 	str.w	r1, [ip, #28]
   240a6:	f10c 0320 	add.w	r3, ip, #32
   240aa:	2100      	movs	r1, #0
   240ac:	e00a      	b.n	240c4 <m_assert_handler+0x68>
   240ae:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   240b2:	e7e2      	b.n	2407a <m_assert_handler+0x1e>
   240b4:	f101 0008 	add.w	r0, r1, #8
   240b8:	4438      	add	r0, r7
   240ba:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   240be:	f803 0b01 	strb.w	r0, [r3], #1
   240c2:	3101      	adds	r1, #1
   240c4:	2901      	cmp	r1, #1
   240c6:	d9f5      	bls.n	240b4 <m_assert_handler+0x58>
   240c8:	f1be 0f11 	cmp.w	lr, #17
   240cc:	dd2b      	ble.n	24126 <m_assert_handler+0xca>
   240ce:	2312      	movs	r3, #18
   240d0:	b14a      	cbz	r2, 240e6 <m_assert_handler+0x8a>
   240d2:	2104      	movs	r1, #4
   240d4:	7139      	strb	r1, [r7, #4]
   240d6:	2100      	movs	r1, #0
   240d8:	7179      	strb	r1, [r7, #5]
   240da:	71b9      	strb	r1, [r7, #6]
   240dc:	2101      	movs	r1, #1
   240de:	71f9      	strb	r1, [r7, #7]
   240e0:	6878      	ldr	r0, [r7, #4]
   240e2:	f8cc 0010 	str.w	r0, [ip, #16]
   240e6:	2100      	movs	r1, #0
   240e8:	f36f 0100 	bfc	r1, #0, #1
   240ec:	f36f 0141 	bfc	r1, #1, #1
   240f0:	f36f 0182 	bfc	r1, #2, #1
   240f4:	f36f 01c5 	bfc	r1, #3, #3
   240f8:	2001      	movs	r0, #1
   240fa:	f360 1188 	bfi	r1, r0, #6, #3
   240fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
   24102:	f363 2153 	bfi	r1, r3, #9, #11
   24106:	f36f 511f 	bfc	r1, #20, #12
   2410a:	2300      	movs	r3, #0
   2410c:	4808      	ldr	r0, [pc, #32]	; (24130 <m_assert_handler+0xd4>)
   2410e:	f7ef fff5 	bl	140fc <z_impl_z_log_msg_static_create>
   24112:	46a5      	mov	sp, r4
	k_oops();
   24114:	4040      	eors	r0, r0
   24116:	f380 8811 	msr	BASEPRI, r0
   2411a:	f04f 0003 	mov.w	r0, #3
   2411e:	df02      	svc	2
}
   24120:	370c      	adds	r7, #12
   24122:	46bd      	mov	sp, r7
   24124:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   24126:	f06f 031b 	mvn.w	r3, #27
   2412a:	e7d1      	b.n	240d0 <m_assert_handler+0x74>
   2412c:	00035014 	.word	0x00035014
   24130:	00031d64 	.word	0x00031d64

00024134 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(void)
{
   24134:	b530      	push	{r4, r5, lr}
   24136:	b083      	sub	sp, #12

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   24138:	4d0d      	ldr	r5, [pc, #52]	; (24170 <mpsl_low_prio_init+0x3c>)
   2413a:	2400      	movs	r4, #0
   2413c:	9400      	str	r4, [sp, #0]
   2413e:	f06f 0309 	mvn.w	r3, #9
   24142:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24146:	490b      	ldr	r1, [pc, #44]	; (24174 <mpsl_low_prio_init+0x40>)
   24148:	4628      	mov	r0, r5
   2414a:	f002 fa3d 	bl	265c8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   2414e:	490a      	ldr	r1, [pc, #40]	; (24178 <mpsl_low_prio_init+0x44>)
   24150:	4628      	mov	r0, r5
   24152:	f001 fe9f 	bl	25e94 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   24156:	4909      	ldr	r1, [pc, #36]	; (2417c <mpsl_low_prio_init+0x48>)
   24158:	4809      	ldr	r0, [pc, #36]	; (24180 <mpsl_low_prio_init+0x4c>)
   2415a:	f00c ff0c 	bl	30f76 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2415e:	4622      	mov	r2, r4
   24160:	2104      	movs	r1, #4
   24162:	2019      	movs	r0, #25
   24164:	f008 fa70 	bl	2c648 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   24168:	4620      	mov	r0, r4
   2416a:	b003      	add	sp, #12
   2416c:	bd30      	pop	{r4, r5, pc}
   2416e:	bf00      	nop
   24170:	20002d18 	.word	0x20002d18
   24174:	20007d40 	.word	0x20007d40
   24178:	00035028 	.word	0x00035028
   2417c:	000304d1 	.word	0x000304d1
   24180:	20004b10 	.word	0x20004b10

00024184 <mpsl_low_prio_irq_handler>:
{
   24184:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   24186:	4902      	ldr	r1, [pc, #8]	; (24190 <mpsl_low_prio_irq_handler+0xc>)
   24188:	4802      	ldr	r0, [pc, #8]	; (24194 <mpsl_low_prio_irq_handler+0x10>)
   2418a:	f00c ff10 	bl	30fae <k_work_submit_to_queue>
}
   2418e:	bd08      	pop	{r3, pc}
   24190:	20004b10 	.word	0x20004b10
   24194:	20002d18 	.word	0x20002d18

00024198 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   24198:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2419a:	4b02      	ldr	r3, [pc, #8]	; (241a4 <mpsl_hfclk_callback+0xc>)
   2419c:	681b      	ldr	r3, [r3, #0]
   2419e:	2000      	movs	r0, #0
   241a0:	4798      	blx	r3
}
   241a2:	bd08      	pop	{r3, pc}
   241a4:	20004b20 	.word	0x20004b20

000241a8 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   241a8:	b508      	push	{r3, lr}
	switch (domain) {
   241aa:	b128      	cbz	r0, 241b8 <nrfx_clock_start+0x10>
   241ac:	2801      	cmp	r0, #1
   241ae:	d102      	bne.n	241b6 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   241b0:	4804      	ldr	r0, [pc, #16]	; (241c4 <nrfx_clock_start+0x1c>)
   241b2:	f7e7 fd27 	bl	bc04 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   241b6:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   241b8:	4b03      	ldr	r3, [pc, #12]	; (241c8 <nrfx_clock_start+0x20>)
   241ba:	681b      	ldr	r3, [r3, #0]
   241bc:	2001      	movs	r0, #1
   241be:	4798      	blx	r3
}
   241c0:	e7f9      	b.n	241b6 <nrfx_clock_start+0xe>
   241c2:	bf00      	nop
   241c4:	00024199 	.word	0x00024199
   241c8:	20004b20 	.word	0x20004b20

000241cc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   241cc:	4b01      	ldr	r3, [pc, #4]	; (241d4 <nrfx_clock_init+0x8>)
   241ce:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   241d0:	4801      	ldr	r0, [pc, #4]	; (241d8 <nrfx_clock_init+0xc>)
   241d2:	4770      	bx	lr
   241d4:	20004b20 	.word	0x20004b20
   241d8:	0bad0000 	.word	0x0bad0000

000241dc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   241dc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   241e0:	4905      	ldr	r1, [pc, #20]	; (241f8 <__NVIC_SystemReset+0x1c>)
   241e2:	68ca      	ldr	r2, [r1, #12]
   241e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   241e8:	4b04      	ldr	r3, [pc, #16]	; (241fc <__NVIC_SystemReset+0x20>)
   241ea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   241ec:	60cb      	str	r3, [r1, #12]
   241ee:	f3bf 8f4f 	dsb	sy
    __NOP();
   241f2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   241f4:	e7fd      	b.n	241f2 <__NVIC_SystemReset+0x16>
   241f6:	bf00      	nop
   241f8:	e000ed00 	.word	0xe000ed00
   241fc:	05fa0004 	.word	0x05fa0004

00024200 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   24200:	4b02      	ldr	r3, [pc, #8]	; (2420c <nvmc_wait+0xc>)
   24202:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   24206:	2b00      	cmp	r3, #0
   24208:	d0fa      	beq.n	24200 <nvmc_wait>
}
   2420a:	4770      	bx	lr
   2420c:	4001e000 	.word	0x4001e000

00024210 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   24210:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   24212:	4b03      	ldr	r3, [pc, #12]	; (24220 <nvmc_config+0x10>)
   24214:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   24218:	f7ff fff2 	bl	24200 <nvmc_wait>
}
   2421c:	bd08      	pop	{r3, pc}
   2421e:	bf00      	nop
   24220:	4001e000 	.word	0x4001e000

00024224 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   24224:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   24226:	f00c f97c 	bl	30522 <nrf52_errata_36>
   2422a:	b140      	cbz	r0, 2423e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   2422c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24230:	2200      	movs	r2, #0
   24232:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   24236:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2423a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2423e:	f00c f97a 	bl	30536 <nrf52_errata_66>
   24242:	2800      	cmp	r0, #0
   24244:	d046      	beq.n	242d4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   24246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2424a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2424e:	4b4b      	ldr	r3, [pc, #300]	; (2437c <SystemInit+0x158>)
   24250:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   24254:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   24258:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2425c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   24260:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   24264:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   24268:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2426c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   24270:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   24274:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   24278:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2427c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   24280:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   24284:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   24288:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2428c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   24290:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   24294:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   24298:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2429c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   242a0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   242a4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   242a8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   242ac:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   242b0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   242b4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   242b8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   242bc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   242c0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   242c4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   242c8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   242cc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   242d0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   242d4:	f00c f939 	bl	3054a <nrf52_errata_98>
   242d8:	b118      	cbz	r0, 242e2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   242da:	4b29      	ldr	r3, [pc, #164]	; (24380 <SystemInit+0x15c>)
   242dc:	4a29      	ldr	r2, [pc, #164]	; (24384 <SystemInit+0x160>)
   242de:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   242e2:	f00c f945 	bl	30570 <nrf52_errata_103>
   242e6:	b118      	cbz	r0, 242f0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   242e8:	4b27      	ldr	r3, [pc, #156]	; (24388 <SystemInit+0x164>)
   242ea:	22fb      	movs	r2, #251	; 0xfb
   242ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   242f0:	f00c f951 	bl	30596 <nrf52_errata_115>
   242f4:	b170      	cbz	r0, 24314 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   242f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   242fa:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
   242fe:	f023 030f 	bic.w	r3, r3, #15
   24302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24306:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
   2430a:	f002 020f 	and.w	r2, r2, #15
   2430e:	4313      	orrs	r3, r2
   24310:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   24314:	f00c f952 	bl	305bc <nrf52_errata_120>
   24318:	b120      	cbz	r0, 24324 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2431a:	4b1c      	ldr	r3, [pc, #112]	; (2438c <SystemInit+0x168>)
   2431c:	f44f 7200 	mov.w	r2, #512	; 0x200
   24320:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   24324:	f00c f95d 	bl	305e2 <nrf52_errata_136>
   24328:	b160      	cbz	r0, 24344 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2432a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2432e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   24332:	f013 0f01 	tst.w	r3, #1
   24336:	d005      	beq.n	24344 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   24338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2433c:	f06f 0201 	mvn.w	r2, #1
   24340:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   24344:	f00c f967 	bl	30616 <nrf52_handle_approtect>

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   24348:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2434c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
   24350:	f013 0f01 	tst.w	r3, #1
   24354:	d100      	bne.n	24358 <SystemInit+0x134>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   24356:	bd08      	pop	{r3, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   24358:	2001      	movs	r0, #1
   2435a:	f7ff ff59 	bl	24210 <nvmc_config>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   2435e:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   24362:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   24366:	f023 0301 	bic.w	r3, r3, #1
   2436a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            nvmc_wait();
   2436e:	f7ff ff47 	bl	24200 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   24372:	2000      	movs	r0, #0
   24374:	f7ff ff4c 	bl	24210 <nvmc_config>
            NVIC_SystemReset();
   24378:	f7ff ff30 	bl	241dc <__NVIC_SystemReset>
   2437c:	4000c000 	.word	0x4000c000
   24380:	40005000 	.word	0x40005000
   24384:	00038148 	.word	0x00038148
   24388:	4000f000 	.word	0x4000f000
   2438c:	40029000 	.word	0x40029000

00024390 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   24390:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   24392:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   24394:	fab4 f384 	clz	r3, r4
   24398:	f1c3 031f 	rsb	r3, r3, #31
   2439c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   243a0:	2b00      	cmp	r3, #0
   243a2:	db16      	blt.n	243d2 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   243a4:	2201      	movs	r2, #1
   243a6:	fa02 f303 	lsl.w	r3, r2, r3
   243aa:	ea24 0303 	bic.w	r3, r4, r3
   243ae:	f3bf 8f5b 	dmb	ish
   243b2:	e850 2f00 	ldrex	r2, [r0]
   243b6:	42a2      	cmp	r2, r4
   243b8:	d104      	bne.n	243c4 <nrfx_flag32_alloc+0x34>
   243ba:	e840 3e00 	strex	lr, r3, [r0]
   243be:	f1be 0f00 	cmp.w	lr, #0
   243c2:	d1f6      	bne.n	243b2 <nrfx_flag32_alloc+0x22>
   243c4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   243c8:	d1e3      	bne.n	24392 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   243ca:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   243ce:	4802      	ldr	r0, [pc, #8]	; (243d8 <nrfx_flag32_alloc+0x48>)
}
   243d0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   243d2:	4802      	ldr	r0, [pc, #8]	; (243dc <nrfx_flag32_alloc+0x4c>)
   243d4:	e7fc      	b.n	243d0 <nrfx_flag32_alloc+0x40>
   243d6:	bf00      	nop
   243d8:	0bad0000 	.word	0x0bad0000
   243dc:	0bad0002 	.word	0x0bad0002

000243e0 <nrfx_power_init>:
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    NRFX_ASSERT(p_config);
    if (m_initialized)
   243e0:	4b0f      	ldr	r3, [pc, #60]	; (24420 <nrfx_power_init+0x40>)
   243e2:	781b      	ldrb	r3, [r3, #0]
   243e4:	b10b      	cbz	r3, 243ea <nrfx_power_init+0xa>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   243e6:	480f      	ldr	r0, [pc, #60]	; (24424 <nrfx_power_init+0x44>)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    return NRFX_SUCCESS;
}
   243e8:	4770      	bx	lr
{
   243ea:	b510      	push	{r4, lr}
   243ec:	4604      	mov	r4, r0
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   243ee:	7801      	ldrb	r1, [r0, #0]
   243f0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   243f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   243f8:	f00c f931 	bl	3065e <nrf_power_dcdcen_vddh_set>
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   243fc:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   243fe:	f013 0f01 	tst.w	r3, #1
   24402:	d00b      	beq.n	2441c <nrfx_power_init+0x3c>
   24404:	2201      	movs	r2, #1
   24406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2440a:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    nrfx_power_clock_irq_init();
   2440e:	f00c f938 	bl	30682 <nrfx_power_clock_irq_init>
    m_initialized = true;
   24412:	4b03      	ldr	r3, [pc, #12]	; (24420 <nrfx_power_init+0x40>)
   24414:	2201      	movs	r2, #1
   24416:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
   24418:	4803      	ldr	r0, [pc, #12]	; (24428 <nrfx_power_init+0x48>)
}
   2441a:	bd10      	pop	{r4, pc}
   2441c:	2200      	movs	r2, #0
   2441e:	e7f2      	b.n	24406 <nrfx_power_init+0x26>
   24420:	20005d45 	.word	0x20005d45
   24424:	0bad000c 	.word	0x0bad000c
   24428:	0bad0000 	.word	0x0bad0000

0002442c <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
   2442c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
   2442e:	f00c f938 	bl	306a2 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
   24432:	4b02      	ldr	r3, [pc, #8]	; (2443c <nrfx_power_usbevt_uninit+0x10>)
   24434:	2200      	movs	r2, #0
   24436:	601a      	str	r2, [r3, #0]
}
   24438:	bd08      	pop	{r3, pc}
   2443a:	bf00      	nop
   2443c:	20004b24 	.word	0x20004b24

00024440 <nrfx_power_usbevt_init>:
{
   24440:	b510      	push	{r4, lr}
   24442:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
   24444:	f7ff fff2 	bl	2442c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   24448:	6823      	ldr	r3, [r4, #0]
   2444a:	b10b      	cbz	r3, 24450 <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
   2444c:	4a01      	ldr	r2, [pc, #4]	; (24454 <nrfx_power_usbevt_init+0x14>)
   2444e:	6013      	str	r3, [r2, #0]
}
   24450:	bd10      	pop	{r4, pc}
   24452:	bf00      	nop
   24454:	20004b24 	.word	0x20004b24

00024458 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   24458:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   2445a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2445e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   24462:	f014 0f04 	tst.w	r4, #4
   24466:	d00c      	beq.n	24482 <nrfx_power_irq_handler+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24468:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    if (ret)
   2446c:	b14b      	cbz	r3, 24482 <nrfx_power_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2446e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24472:	2200      	movs	r2, #0
   24474:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   24478:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   2447c:	4b30      	ldr	r3, [pc, #192]	; (24540 <nrfx_power_irq_handler+0xe8>)
   2447e:	681b      	ldr	r3, [r3, #0]
   24480:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   24482:	f014 0f20 	tst.w	r4, #32
   24486:	d00e      	beq.n	244a6 <nrfx_power_irq_handler+0x4e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2448c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    if (ret)
   24490:	b14b      	cbz	r3, 244a6 <nrfx_power_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24496:	2000      	movs	r0, #0
   24498:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
   2449c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   244a0:	4b28      	ldr	r3, [pc, #160]	; (24544 <nrfx_power_irq_handler+0xec>)
   244a2:	681b      	ldr	r3, [r3, #0]
   244a4:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   244a6:	f014 0f40 	tst.w	r4, #64	; 0x40
   244aa:	d00f      	beq.n	244cc <nrfx_power_irq_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   244ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   244b0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (ret)
   244b4:	b153      	cbz	r3, 244cc <nrfx_power_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   244ba:	2200      	movs	r2, #0
   244bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   244c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   244c4:	4b1f      	ldr	r3, [pc, #124]	; (24544 <nrfx_power_irq_handler+0xec>)
   244c6:	681b      	ldr	r3, [r3, #0]
   244c8:	2001      	movs	r0, #1
   244ca:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   244cc:	f014 0f80 	tst.w	r4, #128	; 0x80
   244d0:	d00e      	beq.n	244f0 <nrfx_power_irq_handler+0x98>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   244d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   244d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    if (ret)
   244da:	b14b      	cbz	r3, 244f0 <nrfx_power_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   244e0:	2000      	movs	r0, #0
   244e2:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
   244e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   244ea:	4b17      	ldr	r3, [pc, #92]	; (24548 <nrfx_power_irq_handler+0xf0>)
   244ec:	681b      	ldr	r3, [r3, #0]
   244ee:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   244f0:	f414 7f80 	tst.w	r4, #256	; 0x100
   244f4:	d00f      	beq.n	24516 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   244f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   244fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    if (ret)
   244fe:	b153      	cbz	r3, 24516 <nrfx_power_irq_handler+0xbe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24504:	2200      	movs	r2, #0
   24506:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2450a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   2450e:	4b0e      	ldr	r3, [pc, #56]	; (24548 <nrfx_power_irq_handler+0xf0>)
   24510:	681b      	ldr	r3, [r3, #0]
   24512:	2001      	movs	r0, #1
   24514:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   24516:	f414 7f00 	tst.w	r4, #512	; 0x200
   2451a:	d00f      	beq.n	2453c <nrfx_power_irq_handler+0xe4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2451c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24520:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    if (ret)
   24524:	b153      	cbz	r3, 2453c <nrfx_power_irq_handler+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2452a:	2200      	movs	r2, #0
   2452c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   24530:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   24534:	4b04      	ldr	r3, [pc, #16]	; (24548 <nrfx_power_irq_handler+0xf0>)
   24536:	681b      	ldr	r3, [r3, #0]
   24538:	2002      	movs	r0, #2
   2453a:	4798      	blx	r3
    }
#endif
}
   2453c:	bd10      	pop	{r4, pc}
   2453e:	bf00      	nop
   24540:	20004b2c 	.word	0x20004b2c
   24544:	20004b28 	.word	0x20004b28
   24548:	20004b24 	.word	0x20004b24

0002454c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   2454c:	b508      	push	{r3, lr}
   2454e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   24550:	4801      	ldr	r0, [pc, #4]	; (24558 <nrfx_ppi_channel_alloc+0xc>)
   24552:	f7ff ff1d 	bl	24390 <nrfx_flag32_alloc>
}
   24556:	bd08      	pop	{r3, pc}
   24558:	20000880 	.word	0x20000880

0002455c <usbd_dma_pending_set>:
 *
 * Internal function to set the flag informing about EasyDMA transfer pending.
 * This function is called always just after the EasyDMA transfer is started.
 */
static inline void usbd_dma_pending_set(void)
{
   2455c:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   2455e:	f00c f916 	bl	3078e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   24562:	b118      	cbz	r0, 2456c <usbd_dma_pending_set+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   24564:	4b03      	ldr	r3, [pc, #12]	; (24574 <usbd_dma_pending_set+0x18>)
   24566:	2282      	movs	r2, #130	; 0x82
   24568:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = true;
   2456c:	4b02      	ldr	r3, [pc, #8]	; (24578 <usbd_dma_pending_set+0x1c>)
   2456e:	2201      	movs	r2, #1
   24570:	701a      	strb	r2, [r3, #0]
}
   24572:	bd08      	pop	{r3, pc}
   24574:	40027000 	.word	0x40027000
   24578:	20005d46 	.word	0x20005d46

0002457c <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   2457c:	b508      	push	{r3, lr}
   2457e:	f00c f906 	bl	3078e <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   24582:	b118      	cbz	r0, 2458c <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   24584:	4b03      	ldr	r3, [pc, #12]	; (24594 <usbd_dma_pending_clear+0x18>)
   24586:	2200      	movs	r2, #0
   24588:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   2458c:	4b02      	ldr	r3, [pc, #8]	; (24598 <usbd_dma_pending_clear+0x1c>)
   2458e:	2200      	movs	r2, #0
   24590:	701a      	strb	r2, [r3, #0]
}
   24592:	bd08      	pop	{r3, pc}
   24594:	40027000 	.word	0x40027000
   24598:	20005d46 	.word	0x20005d46

0002459c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   2459c:	b500      	push	{lr}
   2459e:	b083      	sub	sp, #12
    m_bus_suspend = false;
   245a0:	2300      	movs	r3, #0
   245a2:	4a07      	ldr	r2, [pc, #28]	; (245c0 <ev_usbreset_handler+0x24>)
   245a4:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   245a6:	4a07      	ldr	r2, [pc, #28]	; (245c4 <ev_usbreset_handler+0x28>)
   245a8:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   245aa:	9301      	str	r3, [sp, #4]
   245ac:	2301      	movs	r3, #1
   245ae:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   245b2:	4b05      	ldr	r3, [pc, #20]	; (245c8 <ev_usbreset_handler+0x2c>)
   245b4:	681b      	ldr	r3, [r3, #0]
   245b6:	a801      	add	r0, sp, #4
   245b8:	4798      	blx	r3
}
   245ba:	b003      	add	sp, #12
   245bc:	f85d fb04 	ldr.w	pc, [sp], #4
   245c0:	20005d48 	.word	0x20005d48
   245c4:	20005d47 	.word	0x20005d47
   245c8:	20004d70 	.word	0x20004d70

000245cc <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
   245cc:	b500      	push	{lr}
   245ce:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
   245d0:	2300      	movs	r3, #0
   245d2:	f88d 3004 	strb.w	r3, [sp, #4]
        (((p_reg->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
}

NRF_STATIC_INLINE uint32_t nrf_usbd_framecntr_get(NRF_USBD_Type const * p_reg)
{
    return p_reg->FRAMECNTR;
   245d6:	4b0c      	ldr	r3, [pc, #48]	; (24608 <ev_sof_handler+0x3c>)
   245d8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   245dc:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   245e0:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
   245e4:	b163      	cbz	r3, 24600 <ev_sof_handler+0x34>

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   245e6:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    }
    m_ep_ready |= iso_ready_mask;
   245ea:	4a08      	ldr	r2, [pc, #32]	; (2460c <ev_sof_handler+0x40>)
   245ec:	6813      	ldr	r3, [r2, #0]
   245ee:	430b      	orrs	r3, r1
   245f0:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
   245f2:	4b07      	ldr	r3, [pc, #28]	; (24610 <ev_sof_handler+0x44>)
   245f4:	681b      	ldr	r3, [r3, #0]
   245f6:	a801      	add	r0, sp, #4
   245f8:	4798      	blx	r3
}
   245fa:	b003      	add	sp, #12
   245fc:	f85d fb04 	ldr.w	pc, [sp], #4
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   24600:	f44f 7180 	mov.w	r1, #256	; 0x100
   24604:	e7f1      	b.n	245ea <ev_sof_handler+0x1e>
   24606:	bf00      	nop
   24608:	40027000 	.word	0x40027000
   2460c:	20004d6c 	.word	0x20004d6c
   24610:	20004d70 	.word	0x20004d70

00024614 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   24614:	b510      	push	{r4, lr}
   24616:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
   24618:	4b1e      	ldr	r3, [pc, #120]	; (24694 <ev_usbevent_handler+0x80>)
   2461a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   2461e:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   24622:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   24626:	f414 7f80 	tst.w	r4, #256	; 0x100
   2462a:	d00b      	beq.n	24644 <ev_usbevent_handler+0x30>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   2462c:	4b1a      	ldr	r3, [pc, #104]	; (24698 <ev_usbevent_handler+0x84>)
   2462e:	2201      	movs	r2, #1
   24630:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   24632:	2300      	movs	r3, #0
   24634:	9301      	str	r3, [sp, #4]
   24636:	2302      	movs	r3, #2
   24638:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   2463c:	4b17      	ldr	r3, [pc, #92]	; (2469c <ev_usbevent_handler+0x88>)
   2463e:	681b      	ldr	r3, [r3, #0]
   24640:	a801      	add	r0, sp, #4
   24642:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   24644:	f414 7f00 	tst.w	r4, #512	; 0x200
   24648:	d00a      	beq.n	24660 <ev_usbevent_handler+0x4c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   2464a:	2300      	movs	r3, #0
   2464c:	4a12      	ldr	r2, [pc, #72]	; (24698 <ev_usbevent_handler+0x84>)
   2464e:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   24650:	9301      	str	r3, [sp, #4]
   24652:	2303      	movs	r3, #3
   24654:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   24658:	4b10      	ldr	r3, [pc, #64]	; (2469c <ev_usbevent_handler+0x88>)
   2465a:	681b      	ldr	r3, [r3, #0]
   2465c:	a801      	add	r0, sp, #4
   2465e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   24660:	f414 6f80 	tst.w	r4, #1024	; 0x400
   24664:	d013      	beq.n	2468e <ev_usbevent_handler+0x7a>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   24666:	4b0c      	ldr	r3, [pc, #48]	; (24698 <ev_usbevent_handler+0x84>)
   24668:	781b      	ldrb	r3, [r3, #0]
   2466a:	b183      	cbz	r3, 2468e <ev_usbevent_handler+0x7a>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   2466c:	2200      	movs	r2, #0
   2466e:	4b0a      	ldr	r3, [pc, #40]	; (24698 <ev_usbevent_handler+0x84>)
   24670:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   24672:	4b08      	ldr	r3, [pc, #32]	; (24694 <ev_usbevent_handler+0x80>)
   24674:	2101      	movs	r1, #1
   24676:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2467a:	6599      	str	r1, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   2467e:	9201      	str	r2, [sp, #4]
   24680:	2304      	movs	r3, #4
   24682:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   24686:	4b05      	ldr	r3, [pc, #20]	; (2469c <ev_usbevent_handler+0x88>)
   24688:	681b      	ldr	r3, [r3, #0]
   2468a:	a801      	add	r0, sp, #4
   2468c:	4798      	blx	r3
        }
    }
}
   2468e:	b002      	add	sp, #8
   24690:	bd10      	pop	{r4, pc}
   24692:	bf00      	nop
   24694:	40027000 	.word	0x40027000
   24698:	20005d48 	.word	0x20005d48
   2469c:	20004d70 	.word	0x20004d70

000246a0 <usbd_errata_171_begin>:
	__asm__ volatile(
   246a0:	f04f 0240 	mov.w	r2, #64	; 0x40
   246a4:	f3ef 8311 	mrs	r3, BASEPRI
   246a8:	f382 8812 	msr	BASEPRI_MAX, r2
   246ac:	f3bf 8f6f 	isb	sy
 * @brief Begin errata 171.
 */
static inline void usbd_errata_171_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   246b0:	4a0b      	ldr	r2, [pc, #44]	; (246e0 <usbd_errata_171_begin+0x40>)
   246b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   246b6:	b972      	cbnz	r2, 246d6 <usbd_errata_171_begin+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   246b8:	4a09      	ldr	r2, [pc, #36]	; (246e0 <usbd_errata_171_begin+0x40>)
   246ba:	f249 3175 	movw	r1, #37749	; 0x9375
   246be:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   246c2:	20c0      	movs	r0, #192	; 0xc0
   246c4:	f8c2 0c14 	str.w	r0, [r2, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   246c8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   246cc:	f383 8811 	msr	BASEPRI, r3
   246d0:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   246d4:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   246d6:	4a02      	ldr	r2, [pc, #8]	; (246e0 <usbd_errata_171_begin+0x40>)
   246d8:	21c0      	movs	r1, #192	; 0xc0
   246da:	f8c2 1c14 	str.w	r1, [r2, #3092]	; 0xc14
   246de:	e7f5      	b.n	246cc <usbd_errata_171_begin+0x2c>
   246e0:	4006e000 	.word	0x4006e000

000246e4 <usbd_errata_171_end>:
	__asm__ volatile(
   246e4:	f04f 0240 	mov.w	r2, #64	; 0x40
   246e8:	f3ef 8311 	mrs	r3, BASEPRI
   246ec:	f382 8812 	msr	BASEPRI_MAX, r2
   246f0:	f3bf 8f6f 	isb	sy
 * @brief End errata 171.
 */
static inline void usbd_errata_171_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   246f4:	4a0b      	ldr	r2, [pc, #44]	; (24724 <usbd_errata_171_end+0x40>)
   246f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   246fa:	b972      	cbnz	r2, 2471a <usbd_errata_171_end+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   246fc:	4a09      	ldr	r2, [pc, #36]	; (24724 <usbd_errata_171_end+0x40>)
   246fe:	f249 3175 	movw	r1, #37749	; 0x9375
   24702:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   24706:	2000      	movs	r0, #0
   24708:	f8c2 0c14 	str.w	r0, [r2, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2470c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   24710:	f383 8811 	msr	BASEPRI, r3
   24714:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   24718:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2471a:	4a02      	ldr	r2, [pc, #8]	; (24724 <usbd_errata_171_end+0x40>)
   2471c:	2100      	movs	r1, #0
   2471e:	f8c2 1c14 	str.w	r1, [r2, #3092]	; 0xc14
   24722:	e7f5      	b.n	24710 <usbd_errata_171_end+0x2c>
   24724:	4006e000 	.word	0x4006e000

00024728 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   24728:	f04f 0240 	mov.w	r2, #64	; 0x40
   2472c:	f3ef 8311 	mrs	r3, BASEPRI
   24730:	f382 8812 	msr	BASEPRI_MAX, r2
   24734:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   24738:	4a0b      	ldr	r2, [pc, #44]	; (24768 <usbd_errata_187_211_begin+0x40>)
   2473a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   2473e:	b972      	cbnz	r2, 2475e <usbd_errata_187_211_begin+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24740:	4a09      	ldr	r2, [pc, #36]	; (24768 <usbd_errata_187_211_begin+0x40>)
   24742:	f249 3175 	movw	r1, #37749	; 0x9375
   24746:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2474a:	2003      	movs	r0, #3
   2474c:	f8c2 0d14 	str.w	r0, [r2, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24750:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   24754:	f383 8811 	msr	BASEPRI, r3
   24758:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2475c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2475e:	4a02      	ldr	r2, [pc, #8]	; (24768 <usbd_errata_187_211_begin+0x40>)
   24760:	2103      	movs	r1, #3
   24762:	f8c2 1d14 	str.w	r1, [r2, #3348]	; 0xd14
   24766:	e7f5      	b.n	24754 <usbd_errata_187_211_begin+0x2c>
   24768:	4006e000 	.word	0x4006e000

0002476c <usbd_errata_187_211_end>:
	__asm__ volatile(
   2476c:	f04f 0240 	mov.w	r2, #64	; 0x40
   24770:	f3ef 8311 	mrs	r3, BASEPRI
   24774:	f382 8812 	msr	BASEPRI_MAX, r2
   24778:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2477c:	4a0b      	ldr	r2, [pc, #44]	; (247ac <usbd_errata_187_211_end+0x40>)
   2477e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   24782:	b972      	cbnz	r2, 247a2 <usbd_errata_187_211_end+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24784:	4a09      	ldr	r2, [pc, #36]	; (247ac <usbd_errata_187_211_end+0x40>)
   24786:	f249 3175 	movw	r1, #37749	; 0x9375
   2478a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   2478e:	2000      	movs	r0, #0
   24790:	f8c2 0d14 	str.w	r0, [r2, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   24794:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   24798:	f383 8811 	msr	BASEPRI, r3
   2479c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   247a0:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   247a2:	4a02      	ldr	r2, [pc, #8]	; (247ac <usbd_errata_187_211_end+0x40>)
   247a4:	2100      	movs	r1, #0
   247a6:	f8c2 1d14 	str.w	r1, [r2, #3348]	; 0xd14
   247aa:	e7f5      	b.n	24798 <usbd_errata_187_211_end+0x2c>
   247ac:	4006e000 	.word	0x4006e000

000247b0 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
   247b0:	b508      	push	{r3, lr}
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   247b2:	f00b ffd9 	bl	30768 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   247b6:	b9e0      	cbnz	r0, 247f2 <usbd_enable+0x42>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   247b8:	f00b ffcc 	bl	30754 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
   247bc:	b9e0      	cbnz	r0, 247f8 <usbd_enable+0x48>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   247be:	4b13      	ldr	r3, [pc, #76]	; (2480c <usbd_enable+0x5c>)
   247c0:	2201      	movs	r2, #1
   247c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   247c6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   247ca:	4b10      	ldr	r3, [pc, #64]	; (2480c <usbd_enable+0x5c>)
   247cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   247d0:	f413 6f00 	tst.w	r3, #2048	; 0x800
   247d4:	d0f9      	beq.n	247ca <usbd_enable+0x1a>
    p_reg->EVENTCAUSE = flags;
   247d6:	4b0d      	ldr	r3, [pc, #52]	; (2480c <usbd_enable+0x5c>)
   247d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   247dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   247e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   247e4:	f00b ffb6 	bl	30754 <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
   247e8:	b948      	cbnz	r0, 247fe <usbd_enable+0x4e>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   247ea:	f00b ffbd 	bl	30768 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
   247ee:	b948      	cbnz	r0, 24804 <usbd_enable+0x54>
    {
        usbd_errata_187_211_end();
    }
}
   247f0:	bd08      	pop	{r3, pc}
        usbd_errata_187_211_begin();
   247f2:	f7ff ff99 	bl	24728 <usbd_errata_187_211_begin>
   247f6:	e7df      	b.n	247b8 <usbd_enable+0x8>
        usbd_errata_171_begin();
   247f8:	f7ff ff52 	bl	246a0 <usbd_errata_171_begin>
   247fc:	e7df      	b.n	247be <usbd_enable+0xe>
        usbd_errata_171_end();
   247fe:	f7ff ff71 	bl	246e4 <usbd_errata_171_end>
   24802:	e7f2      	b.n	247ea <usbd_enable+0x3a>
        usbd_errata_187_211_end();
   24804:	f7ff ffb2 	bl	2476c <usbd_errata_187_211_end>
}
   24808:	e7f2      	b.n	247f0 <usbd_enable+0x40>
   2480a:	bf00      	nop
   2480c:	40027000 	.word	0x40027000

00024810 <nrf_usbd_epin_dma_handler>:
{
   24810:	b510      	push	{r4, lr}
   24812:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   24814:	f7ff feb2 	bl	2457c <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24818:	b262      	sxtb	r2, r4
   2481a:	2a00      	cmp	r2, #0
   2481c:	db1e      	blt.n	2485c <nrf_usbd_epin_dma_handler+0x4c>
   2481e:	4b1c      	ldr	r3, [pc, #112]	; (24890 <nrf_usbd_epin_dma_handler+0x80>)
   24820:	f004 000f 	and.w	r0, r4, #15
   24824:	0104      	lsls	r4, r0, #4
   24826:	eb03 1100 	add.w	r1, r3, r0, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2482a:	7b89      	ldrb	r1, [r1, #14]
   2482c:	2903      	cmp	r1, #3
   2482e:	d017      	beq.n	24860 <nrf_usbd_epin_dma_handler+0x50>
    else if (p_state->handler.feeder == NULL)
   24830:	591b      	ldr	r3, [r3, r4]
   24832:	bb43      	cbnz	r3, 24886 <nrf_usbd_epin_dma_handler+0x76>
    return NRFX_USBD_EP_BITPOS(ep);
   24834:	2a00      	cmp	r2, #0
   24836:	db29      	blt.n	2488c <nrf_usbd_epin_dma_handler+0x7c>
   24838:	2210      	movs	r2, #16
   2483a:	4402      	add	r2, r0
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2483c:	2301      	movs	r3, #1
   2483e:	4093      	lsls	r3, r2
   24840:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24842:	4a14      	ldr	r2, [pc, #80]	; (24894 <nrf_usbd_epin_dma_handler+0x84>)
   24844:	f3bf 8f5b 	dmb	ish
   24848:	e852 0f00 	ldrex	r0, [r2]
   2484c:	4018      	ands	r0, r3
   2484e:	e842 0100 	strex	r1, r0, [r2]
   24852:	2900      	cmp	r1, #0
   24854:	d1f8      	bne.n	24848 <nrf_usbd_epin_dma_handler+0x38>
   24856:	f3bf 8f5b 	dmb	ish
}
   2485a:	e014      	b.n	24886 <nrf_usbd_epin_dma_handler+0x76>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2485c:	4b0e      	ldr	r3, [pc, #56]	; (24898 <nrf_usbd_epin_dma_handler+0x88>)
   2485e:	e7df      	b.n	24820 <nrf_usbd_epin_dma_handler+0x10>
    return NRFX_USBD_EP_BITPOS(ep);
   24860:	2a00      	cmp	r2, #0
   24862:	db11      	blt.n	24888 <nrf_usbd_epin_dma_handler+0x78>
   24864:	2210      	movs	r2, #16
   24866:	4402      	add	r2, r0
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24868:	2301      	movs	r3, #1
   2486a:	4093      	lsls	r3, r2
   2486c:	43db      	mvns	r3, r3
   2486e:	4a09      	ldr	r2, [pc, #36]	; (24894 <nrf_usbd_epin_dma_handler+0x84>)
   24870:	f3bf 8f5b 	dmb	ish
   24874:	e852 0f00 	ldrex	r0, [r2]
   24878:	4018      	ands	r0, r3
   2487a:	e842 0100 	strex	r1, r0, [r2]
   2487e:	2900      	cmp	r1, #0
   24880:	d1f8      	bne.n	24874 <nrf_usbd_epin_dma_handler+0x64>
   24882:	f3bf 8f5b 	dmb	ish
}
   24886:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   24888:	2200      	movs	r2, #0
   2488a:	e7ec      	b.n	24866 <nrf_usbd_epin_dma_handler+0x56>
   2488c:	2200      	movs	r2, #0
   2488e:	e7d4      	b.n	2483a <nrf_usbd_epin_dma_handler+0x2a>
   24890:	20004c48 	.word	0x20004c48
   24894:	20004d68 	.word	0x20004d68
   24898:	20004cd8 	.word	0x20004cd8

0002489c <nrf_usbd_ep0in_dma_handler>:
{
   2489c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2489e:	f7ff fe6d 	bl	2457c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   248a2:	4b13      	ldr	r3, [pc, #76]	; (248f0 <nrf_usbd_ep0in_dma_handler+0x54>)
   248a4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   248a8:	2b03      	cmp	r3, #3
   248aa:	d004      	beq.n	248b6 <nrf_usbd_ep0in_dma_handler+0x1a>
    else if (p_state->handler.feeder == NULL)
   248ac:	4b10      	ldr	r3, [pc, #64]	; (248f0 <nrf_usbd_ep0in_dma_handler+0x54>)
   248ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   248b2:	b173      	cbz	r3, 248d2 <nrf_usbd_ep0in_dma_handler+0x36>
}
   248b4:	bd08      	pop	{r3, pc}
   248b6:	4b0f      	ldr	r3, [pc, #60]	; (248f4 <nrf_usbd_ep0in_dma_handler+0x58>)
   248b8:	f3bf 8f5b 	dmb	ish
   248bc:	e853 1f00 	ldrex	r1, [r3]
   248c0:	f021 0101 	bic.w	r1, r1, #1
   248c4:	e843 1200 	strex	r2, r1, [r3]
   248c8:	2a00      	cmp	r2, #0
   248ca:	d1f7      	bne.n	248bc <nrf_usbd_ep0in_dma_handler+0x20>
   248cc:	f3bf 8f5b 	dmb	ish
   248d0:	e7f0      	b.n	248b4 <nrf_usbd_ep0in_dma_handler+0x18>
   248d2:	4b08      	ldr	r3, [pc, #32]	; (248f4 <nrf_usbd_ep0in_dma_handler+0x58>)
   248d4:	f3bf 8f5b 	dmb	ish
   248d8:	e853 1f00 	ldrex	r1, [r3]
   248dc:	f021 0101 	bic.w	r1, r1, #1
   248e0:	e843 1200 	strex	r2, r1, [r3]
   248e4:	2a00      	cmp	r2, #0
   248e6:	d1f7      	bne.n	248d8 <nrf_usbd_ep0in_dma_handler+0x3c>
   248e8:	f3bf 8f5b 	dmb	ish
   248ec:	e7e2      	b.n	248b4 <nrf_usbd_ep0in_dma_handler+0x18>
   248ee:	bf00      	nop
   248f0:	20004c48 	.word	0x20004c48
   248f4:	20004d68 	.word	0x20004d68

000248f8 <usbd_ep_data_handler>:
{
   248f8:	b530      	push	{r4, r5, lr}
   248fa:	b083      	sub	sp, #12
   248fc:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   248fe:	2501      	movs	r5, #1
   24900:	408d      	lsls	r5, r1
   24902:	4a1f      	ldr	r2, [pc, #124]	; (24980 <usbd_ep_data_handler+0x88>)
   24904:	6813      	ldr	r3, [r2, #0]
   24906:	432b      	orrs	r3, r5
   24908:	6013      	str	r3, [r2, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   2490a:	f010 0f80 	tst.w	r0, #128	; 0x80
   2490e:	d111      	bne.n	24934 <usbd_ep_data_handler+0x3c>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   24910:	4b1c      	ldr	r3, [pc, #112]	; (24984 <usbd_ep_data_handler+0x8c>)
   24912:	681b      	ldr	r3, [r3, #0]
   24914:	421d      	tst	r5, r3
   24916:	d10b      	bne.n	24930 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   24918:	2306      	movs	r3, #6
   2491a:	f88d 3004 	strb.w	r3, [sp, #4]
   2491e:	f88d 0006 	strb.w	r0, [sp, #6]
   24922:	2301      	movs	r3, #1
   24924:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   24928:	4b17      	ldr	r3, [pc, #92]	; (24988 <usbd_ep_data_handler+0x90>)
   2492a:	681b      	ldr	r3, [r3, #0]
   2492c:	a801      	add	r0, sp, #4
   2492e:	4798      	blx	r3
}
   24930:	b003      	add	sp, #12
   24932:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   24934:	f000 030f 	and.w	r3, r0, #15
   24938:	4a14      	ldr	r2, [pc, #80]	; (2498c <usbd_ep_data_handler+0x94>)
   2493a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2493e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24942:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   24946:	681a      	ldr	r2, [r3, #0]
    if (ret)
   24948:	b132      	cbz	r2, 24958 <usbd_ep_data_handler+0x60>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2494a:	2200      	movs	r2, #0
   2494c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   2494e:	681b      	ldr	r3, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   24950:	2880      	cmp	r0, #128	; 0x80
   24952:	d012      	beq.n	2497a <usbd_ep_data_handler+0x82>
                nrf_usbd_epin_dma_handler(ep);
   24954:	f7ff ff5c 	bl	24810 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   24958:	4b0a      	ldr	r3, [pc, #40]	; (24984 <usbd_ep_data_handler+0x8c>)
   2495a:	681b      	ldr	r3, [r3, #0]
   2495c:	421d      	tst	r5, r3
   2495e:	d1e7      	bne.n	24930 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   24960:	2306      	movs	r3, #6
   24962:	f88d 3004 	strb.w	r3, [sp, #4]
   24966:	f88d 4006 	strb.w	r4, [sp, #6]
   2496a:	2300      	movs	r3, #0
   2496c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   24970:	4b05      	ldr	r3, [pc, #20]	; (24988 <usbd_ep_data_handler+0x90>)
   24972:	681b      	ldr	r3, [r3, #0]
   24974:	a801      	add	r0, sp, #4
   24976:	4798      	blx	r3
   24978:	e7da      	b.n	24930 <usbd_ep_data_handler+0x38>
                nrf_usbd_ep0in_dma_handler();
   2497a:	f7ff ff8f 	bl	2489c <nrf_usbd_ep0in_dma_handler>
   2497e:	e7eb      	b.n	24958 <usbd_ep_data_handler+0x60>
   24980:	20004d6c 	.word	0x20004d6c
   24984:	20004d68 	.word	0x20004d68
   24988:	20004d70 	.word	0x20004d70
   2498c:	00035078 	.word	0x00035078

00024990 <ev_setup_data_handler>:
{
   24990:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   24992:	4b07      	ldr	r3, [pc, #28]	; (249b0 <ev_setup_data_handler+0x20>)
   24994:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   24996:	f993 3000 	ldrsb.w	r3, [r3]
   2499a:	2b00      	cmp	r3, #0
   2499c:	db06      	blt.n	249ac <ev_setup_data_handler+0x1c>
   2499e:	2310      	movs	r3, #16
   249a0:	f000 010f 	and.w	r1, r0, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   249a4:	4419      	add	r1, r3
   249a6:	f7ff ffa7 	bl	248f8 <usbd_ep_data_handler>
}
   249aa:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   249ac:	2300      	movs	r3, #0
   249ae:	e7f7      	b.n	249a0 <ev_setup_data_handler+0x10>
   249b0:	20005d47 	.word	0x20005d47

000249b4 <nrf_usbd_epoutiso_dma_handler>:
{
   249b4:	b510      	push	{r4, lr}
   249b6:	b082      	sub	sp, #8
   249b8:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   249ba:	f7ff fddf 	bl	2457c <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   249be:	b261      	sxtb	r1, r4
   249c0:	2900      	cmp	r1, #0
   249c2:	db2d      	blt.n	24a20 <nrf_usbd_epoutiso_dma_handler+0x6c>
   249c4:	4a17      	ldr	r2, [pc, #92]	; (24a24 <nrf_usbd_epoutiso_dma_handler+0x70>)
   249c6:	f004 030f 	and.w	r3, r4, #15
   249ca:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   249ce:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   249d2:	7b80      	ldrb	r0, [r0, #14]
   249d4:	2803      	cmp	r0, #3
   249d6:	d021      	beq.n	24a1c <nrf_usbd_epoutiso_dma_handler+0x68>
    else if (p_state->handler.consumer == NULL)
   249d8:	f852 200c 	ldr.w	r2, [r2, ip]
   249dc:	b9f2      	cbnz	r2, 24a1c <nrf_usbd_epoutiso_dma_handler+0x68>
    return NRFX_USBD_EP_BITPOS(ep);
   249de:	2900      	cmp	r1, #0
   249e0:	db00      	blt.n	249e4 <nrf_usbd_epoutiso_dma_handler+0x30>
   249e2:	2210      	movs	r2, #16
   249e4:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   249e6:	2301      	movs	r3, #1
   249e8:	4093      	lsls	r3, r2
   249ea:	43db      	mvns	r3, r3
   249ec:	4a0e      	ldr	r2, [pc, #56]	; (24a28 <nrf_usbd_epoutiso_dma_handler+0x74>)
   249ee:	f3bf 8f5b 	dmb	ish
   249f2:	e852 0f00 	ldrex	r0, [r2]
   249f6:	4018      	ands	r0, r3
   249f8:	e842 0100 	strex	r1, r0, [r2]
   249fc:	2900      	cmp	r1, #0
   249fe:	d1f8      	bne.n	249f2 <nrf_usbd_epoutiso_dma_handler+0x3e>
   24a00:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   24a04:	2306      	movs	r3, #6
   24a06:	f88d 3004 	strb.w	r3, [sp, #4]
   24a0a:	f88d 4006 	strb.w	r4, [sp, #6]
   24a0e:	2300      	movs	r3, #0
   24a10:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   24a14:	4b05      	ldr	r3, [pc, #20]	; (24a2c <nrf_usbd_epoutiso_dma_handler+0x78>)
   24a16:	681b      	ldr	r3, [r3, #0]
   24a18:	a801      	add	r0, sp, #4
   24a1a:	4798      	blx	r3
}
   24a1c:	b002      	add	sp, #8
   24a1e:	bd10      	pop	{r4, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24a20:	4a03      	ldr	r2, [pc, #12]	; (24a30 <nrf_usbd_epoutiso_dma_handler+0x7c>)
   24a22:	e7d0      	b.n	249c6 <nrf_usbd_epoutiso_dma_handler+0x12>
   24a24:	20004c48 	.word	0x20004c48
   24a28:	20004d68 	.word	0x20004d68
   24a2c:	20004d70 	.word	0x20004d70
   24a30:	20004cd8 	.word	0x20004cd8

00024a34 <nrf_usbd_epiniso_dma_handler>:
{
   24a34:	b510      	push	{r4, lr}
   24a36:	b082      	sub	sp, #8
   24a38:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   24a3a:	f7ff fd9f 	bl	2457c <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24a3e:	b261      	sxtb	r1, r4
   24a40:	2900      	cmp	r1, #0
   24a42:	db2c      	blt.n	24a9e <nrf_usbd_epiniso_dma_handler+0x6a>
   24a44:	4a22      	ldr	r2, [pc, #136]	; (24ad0 <nrf_usbd_epiniso_dma_handler+0x9c>)
   24a46:	f004 030f 	and.w	r3, r4, #15
   24a4a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   24a4e:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   24a52:	7b80      	ldrb	r0, [r0, #14]
   24a54:	2803      	cmp	r0, #3
   24a56:	d024      	beq.n	24aa2 <nrf_usbd_epiniso_dma_handler+0x6e>
    else if (p_state->handler.feeder == NULL)
   24a58:	f852 200c 	ldr.w	r2, [r2, ip]
   24a5c:	bba2      	cbnz	r2, 24ac8 <nrf_usbd_epiniso_dma_handler+0x94>
    return NRFX_USBD_EP_BITPOS(ep);
   24a5e:	2900      	cmp	r1, #0
   24a60:	db00      	blt.n	24a64 <nrf_usbd_epiniso_dma_handler+0x30>
   24a62:	2210      	movs	r2, #16
   24a64:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24a66:	2301      	movs	r3, #1
   24a68:	4093      	lsls	r3, r2
   24a6a:	43db      	mvns	r3, r3
   24a6c:	4a19      	ldr	r2, [pc, #100]	; (24ad4 <nrf_usbd_epiniso_dma_handler+0xa0>)
   24a6e:	f3bf 8f5b 	dmb	ish
   24a72:	e852 0f00 	ldrex	r0, [r2]
   24a76:	4018      	ands	r0, r3
   24a78:	e842 0100 	strex	r1, r0, [r2]
   24a7c:	2900      	cmp	r1, #0
   24a7e:	d1f8      	bne.n	24a72 <nrf_usbd_epiniso_dma_handler+0x3e>
   24a80:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   24a84:	2306      	movs	r3, #6
   24a86:	f88d 3004 	strb.w	r3, [sp, #4]
   24a8a:	f88d 4006 	strb.w	r4, [sp, #6]
   24a8e:	2300      	movs	r3, #0
   24a90:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   24a94:	4b10      	ldr	r3, [pc, #64]	; (24ad8 <nrf_usbd_epiniso_dma_handler+0xa4>)
   24a96:	681b      	ldr	r3, [r3, #0]
   24a98:	a801      	add	r0, sp, #4
   24a9a:	4798      	blx	r3
}
   24a9c:	e014      	b.n	24ac8 <nrf_usbd_epiniso_dma_handler+0x94>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24a9e:	4a0f      	ldr	r2, [pc, #60]	; (24adc <nrf_usbd_epiniso_dma_handler+0xa8>)
   24aa0:	e7d1      	b.n	24a46 <nrf_usbd_epiniso_dma_handler+0x12>
    return NRFX_USBD_EP_BITPOS(ep);
   24aa2:	2900      	cmp	r1, #0
   24aa4:	db12      	blt.n	24acc <nrf_usbd_epiniso_dma_handler+0x98>
   24aa6:	2210      	movs	r2, #16
   24aa8:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   24aaa:	2301      	movs	r3, #1
   24aac:	4093      	lsls	r3, r2
   24aae:	43db      	mvns	r3, r3
   24ab0:	4a08      	ldr	r2, [pc, #32]	; (24ad4 <nrf_usbd_epiniso_dma_handler+0xa0>)
   24ab2:	f3bf 8f5b 	dmb	ish
   24ab6:	e852 0f00 	ldrex	r0, [r2]
   24aba:	4018      	ands	r0, r3
   24abc:	e842 0100 	strex	r1, r0, [r2]
   24ac0:	2900      	cmp	r1, #0
   24ac2:	d1f8      	bne.n	24ab6 <nrf_usbd_epiniso_dma_handler+0x82>
   24ac4:	f3bf 8f5b 	dmb	ish
}
   24ac8:	b002      	add	sp, #8
   24aca:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   24acc:	2200      	movs	r2, #0
   24ace:	e7eb      	b.n	24aa8 <nrf_usbd_epiniso_dma_handler+0x74>
   24ad0:	20004c48 	.word	0x20004c48
   24ad4:	20004d68 	.word	0x20004d68
   24ad8:	20004d70 	.word	0x20004d70
   24adc:	20004cd8 	.word	0x20004cd8

00024ae0 <nrfx_usbd_isoinconfig_set>:
}

NRF_STATIC_INLINE void nrf_usbd_isoinconfig_set(NRF_USBD_Type *        p_reg,
                                                nrf_usbd_isoinconfig_t config)
{
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   24ae0:	4b01      	ldr	r3, [pc, #4]	; (24ae8 <nrfx_usbd_isoinconfig_set+0x8>)
   24ae2:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
   24ae6:	4770      	bx	lr
   24ae8:	40027000 	.word	0x40027000

00024aec <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   24aec:	2300      	movs	r3, #0
   24aee:	4a02      	ldr	r2, [pc, #8]	; (24af8 <nrfx_usbd_uninit+0xc>)
   24af0:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   24af2:	4a02      	ldr	r2, [pc, #8]	; (24afc <nrfx_usbd_uninit+0x10>)
   24af4:	7013      	strb	r3, [r2, #0]
    return;
}
   24af6:	4770      	bx	lr
   24af8:	20004d70 	.word	0x20004d70
   24afc:	20005d49 	.word	0x20005d49

00024b00 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   24b00:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
   24b02:	4b25      	ldr	r3, [pc, #148]	; (24b98 <nrfx_usbd_enable+0x98>)
   24b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
   24b08:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   24b0c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
   24b10:	f7ff fe4e 	bl	247b0 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
   24b14:	f00b fe45 	bl	307a2 <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
   24b18:	b110      	cbz	r0, 24b20 <nrfx_usbd_enable+0x20>
   24b1a:	4b20      	ldr	r3, [pc, #128]	; (24b9c <nrfx_usbd_enable+0x9c>)
   24b1c:	781b      	ldrb	r3, [r3, #0]
   24b1e:	bb53      	cbnz	r3, 24b76 <nrfx_usbd_enable+0x76>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   24b20:	f00b fe22 	bl	30768 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   24b24:	bb90      	cbnz	r0, 24b8c <nrfx_usbd_enable+0x8c>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   24b26:	f00b fe0b 	bl	30740 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
   24b2a:	b158      	cbz	r0, 24b44 <nrfx_usbd_enable+0x44>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   24b2c:	4b1a      	ldr	r3, [pc, #104]	; (24b98 <nrfx_usbd_enable+0x98>)
   24b2e:	f240 72e3 	movw	r2, #2019	; 0x7e3
   24b32:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   24b36:	2240      	movs	r2, #64	; 0x40
   24b38:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   24b3c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   24b40:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   24b44:	4b14      	ldr	r3, [pc, #80]	; (24b98 <nrfx_usbd_enable+0x98>)
   24b46:	2280      	movs	r2, #128	; 0x80
   24b48:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
   24b4c:	2000      	movs	r0, #0
   24b4e:	f7ff ffc7 	bl	24ae0 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   24b52:	4b13      	ldr	r3, [pc, #76]	; (24ba0 <nrfx_usbd_enable+0xa0>)
   24b54:	f240 12ff 	movw	r2, #511	; 0x1ff
   24b58:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   24b5a:	2400      	movs	r4, #0
   24b5c:	4b11      	ldr	r3, [pc, #68]	; (24ba4 <nrfx_usbd_enable+0xa4>)
   24b5e:	601c      	str	r4, [r3, #0]
    usbd_dma_pending_clear();
   24b60:	f7ff fd0c 	bl	2457c <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   24b64:	4b10      	ldr	r3, [pc, #64]	; (24ba8 <nrfx_usbd_enable+0xa8>)
   24b66:	701c      	strb	r4, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   24b68:	4b10      	ldr	r3, [pc, #64]	; (24bac <nrfx_usbd_enable+0xac>)
   24b6a:	2202      	movs	r2, #2
   24b6c:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   24b6e:	f00b fdfb 	bl	30768 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   24b72:	b970      	cbnz	r0, 24b92 <nrfx_usbd_enable+0x92>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   24b74:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   24b76:	4b08      	ldr	r3, [pc, #32]	; (24b98 <nrfx_usbd_enable+0x98>)
   24b78:	2400      	movs	r4, #0
   24b7a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   24b7e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
   24b82:	f7ff fe15 	bl	247b0 <usbd_enable>
         m_first_enable = false;
   24b86:	4b05      	ldr	r3, [pc, #20]	; (24b9c <nrfx_usbd_enable+0x9c>)
   24b88:	701c      	strb	r4, [r3, #0]
   24b8a:	e7c9      	b.n	24b20 <nrfx_usbd_enable+0x20>
        usbd_errata_187_211_begin();
   24b8c:	f7ff fdcc 	bl	24728 <usbd_errata_187_211_begin>
   24b90:	e7c9      	b.n	24b26 <nrfx_usbd_enable+0x26>
        usbd_errata_187_211_end();
   24b92:	f7ff fdeb 	bl	2476c <usbd_errata_187_211_end>
}
   24b96:	e7ed      	b.n	24b74 <nrfx_usbd_enable+0x74>
   24b98:	40027000 	.word	0x40027000
   24b9c:	20000904 	.word	0x20000904
   24ba0:	20004d6c 	.word	0x20004d6c
   24ba4:	20004d68 	.word	0x20004d68
   24ba8:	20005d47 	.word	0x20005d47
   24bac:	20005d49 	.word	0x20005d49

00024bb0 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
   24bb0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   24bb2:	4b09      	ldr	r3, [pc, #36]	; (24bd8 <nrfx_usbd_start+0x28>)
   24bb4:	2200      	movs	r2, #0
   24bb6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   24bb8:	b960      	cbnz	r0, 24bd4 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
   24bba:	4b08      	ldr	r3, [pc, #32]	; (24bdc <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
   24bbc:	4c08      	ldr	r4, [pc, #32]	; (24be0 <nrfx_usbd_start+0x30>)
   24bbe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   24bc2:	2027      	movs	r0, #39	; 0x27
   24bc4:	f007 fd36 	bl	2c634 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   24bc8:	2301      	movs	r3, #1
   24bca:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   24bce:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   24bd2:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   24bd4:	4b03      	ldr	r3, [pc, #12]	; (24be4 <nrfx_usbd_start+0x34>)
   24bd6:	e7f1      	b.n	24bbc <nrfx_usbd_start+0xc>
   24bd8:	20005d48 	.word	0x20005d48
   24bdc:	01c01407 	.word	0x01c01407
   24be0:	40027000 	.word	0x40027000
   24be4:	01e01407 	.word	0x01e01407

00024be8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   24be8:	4b03      	ldr	r3, [pc, #12]	; (24bf8 <nrfx_usbd_is_enabled+0x10>)
   24bea:	7818      	ldrb	r0, [r3, #0]
}
   24bec:	2801      	cmp	r0, #1
   24bee:	bf94      	ite	ls
   24bf0:	2000      	movls	r0, #0
   24bf2:	2001      	movhi	r0, #1
   24bf4:	4770      	bx	lr
   24bf6:	bf00      	nop
   24bf8:	20005d49 	.word	0x20005d49

00024bfc <nrfx_usbd_suspend>:
	__asm__ volatile(
   24bfc:	f04f 0240 	mov.w	r2, #64	; 0x40
   24c00:	f3ef 8311 	mrs	r3, BASEPRI
   24c04:	f382 8812 	msr	BASEPRI_MAX, r2
   24c08:	f3bf 8f6f 	isb	sy
bool nrfx_usbd_suspend(void)
{
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
   24c0c:	4a11      	ldr	r2, [pc, #68]	; (24c54 <nrfx_usbd_suspend+0x58>)
   24c0e:	7812      	ldrb	r2, [r2, #0]
   24c10:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   24c14:	b1c2      	cbz	r2, 24c48 <nrfx_usbd_suspend+0x4c>
    return p_reg->EVENTCAUSE;
   24c16:	4a10      	ldr	r2, [pc, #64]	; (24c58 <nrfx_usbd_suspend+0x5c>)
   24c18:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   24c1c:	f412 7f00 	tst.w	r2, #512	; 0x200
   24c20:	d111      	bne.n	24c46 <nrfx_usbd_suspend+0x4a>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   24c22:	4a0d      	ldr	r2, [pc, #52]	; (24c58 <nrfx_usbd_suspend+0x5c>)
   24c24:	2101      	movs	r1, #1
   24c26:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   24c2a:	f8d2 152c 	ldr.w	r1, [r2, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   24c2e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   24c32:	f412 7f00 	tst.w	r2, #512	; 0x200
   24c36:	d007      	beq.n	24c48 <nrfx_usbd_suspend+0x4c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   24c38:	4a07      	ldr	r2, [pc, #28]	; (24c58 <nrfx_usbd_suspend+0x5c>)
   24c3a:	2000      	movs	r0, #0
   24c3c:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   24c40:	f8d2 252c 	ldr.w	r2, [r2, #1324]	; 0x52c
}
   24c44:	e000      	b.n	24c48 <nrfx_usbd_suspend+0x4c>
    bool suspended = false;
   24c46:	2000      	movs	r0, #0
	__asm__ volatile(
   24c48:	f383 8811 	msr	BASEPRI, r3
   24c4c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
   24c50:	4770      	bx	lr
   24c52:	bf00      	nop
   24c54:	20005d48 	.word	0x20005d48
   24c58:	40027000 	.word	0x40027000

00024c5c <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24c5c:	f010 0f80 	tst.w	r0, #128	; 0x80
   24c60:	d106      	bne.n	24c70 <nrfx_usbd_ep_max_packet_size_set+0x14>
   24c62:	4b04      	ldr	r3, [pc, #16]	; (24c74 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
   24c64:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24c68:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
   24c6c:	8199      	strh	r1, [r3, #12]
}
   24c6e:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24c70:	4b01      	ldr	r3, [pc, #4]	; (24c78 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
   24c72:	e7f7      	b.n	24c64 <nrfx_usbd_ep_max_packet_size_set+0x8>
   24c74:	20004c48 	.word	0x20004c48
   24c78:	20004cd8 	.word	0x20004cd8

00024c7c <nrfx_usbd_init>:
{
   24c7c:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   24c7e:	4b25      	ldr	r3, [pc, #148]	; (24d14 <nrfx_usbd_init+0x98>)
   24c80:	781c      	ldrb	r4, [r3, #0]
   24c82:	2c00      	cmp	r4, #0
   24c84:	d144      	bne.n	24d10 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
   24c86:	4b24      	ldr	r3, [pc, #144]	; (24d18 <nrfx_usbd_init+0x9c>)
   24c88:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   24c8a:	4b22      	ldr	r3, [pc, #136]	; (24d14 <nrfx_usbd_init+0x98>)
   24c8c:	2201      	movs	r2, #1
   24c8e:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   24c90:	4625      	mov	r5, r4
   24c92:	e012      	b.n	24cba <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24c94:	2140      	movs	r1, #64	; 0x40
   24c96:	4630      	mov	r0, r6
   24c98:	f7ff ffe0 	bl	24c5c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24c9c:	f016 0f80 	tst.w	r6, #128	; 0x80
   24ca0:	d115      	bne.n	24cce <nrfx_usbd_init+0x52>
   24ca2:	491e      	ldr	r1, [pc, #120]	; (24d1c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   24ca4:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24ca8:	0118      	lsls	r0, r3, #4
   24caa:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   24cae:	2200      	movs	r2, #0
   24cb0:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
   24cb2:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   24cb4:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   24cb6:	3501      	adds	r5, #1
   24cb8:	b2ed      	uxtb	r5, r5
   24cba:	2d08      	cmp	r5, #8
   24cbc:	d81c      	bhi.n	24cf8 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   24cbe:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24cc2:	f015 0f08 	tst.w	r5, #8
   24cc6:	d0e5      	beq.n	24c94 <nrfx_usbd_init+0x18>
   24cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
   24ccc:	e7e3      	b.n	24c96 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24cce:	4914      	ldr	r1, [pc, #80]	; (24d20 <nrfx_usbd_init+0xa4>)
   24cd0:	e7e8      	b.n	24ca4 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24cd2:	2140      	movs	r1, #64	; 0x40
   24cd4:	4620      	mov	r0, r4
   24cd6:	f7ff ffc1 	bl	24c5c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24cda:	f014 0f80 	tst.w	r4, #128	; 0x80
   24cde:	d113      	bne.n	24d08 <nrfx_usbd_init+0x8c>
   24ce0:	490e      	ldr	r1, [pc, #56]	; (24d1c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   24ce2:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24ce6:	0118      	lsls	r0, r3, #4
   24ce8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   24cec:	2200      	movs	r2, #0
   24cee:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
   24cf0:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   24cf2:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   24cf4:	3401      	adds	r4, #1
   24cf6:	b2e4      	uxtb	r4, r4
   24cf8:	2c08      	cmp	r4, #8
   24cfa:	d807      	bhi.n	24d0c <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   24cfc:	f014 0f08 	tst.w	r4, #8
   24d00:	d0e7      	beq.n	24cd2 <nrfx_usbd_init+0x56>
   24d02:	f240 11ff 	movw	r1, #511	; 0x1ff
   24d06:	e7e5      	b.n	24cd4 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24d08:	4905      	ldr	r1, [pc, #20]	; (24d20 <nrfx_usbd_init+0xa4>)
   24d0a:	e7ea      	b.n	24ce2 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
   24d0c:	4805      	ldr	r0, [pc, #20]	; (24d24 <nrfx_usbd_init+0xa8>)
}
   24d0e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
   24d10:	4805      	ldr	r0, [pc, #20]	; (24d28 <nrfx_usbd_init+0xac>)
   24d12:	e7fc      	b.n	24d0e <nrfx_usbd_init+0x92>
   24d14:	20005d49 	.word	0x20005d49
   24d18:	20004d70 	.word	0x20004d70
   24d1c:	20004c48 	.word	0x20004c48
   24d20:	20004cd8 	.word	0x20004cd8
   24d24:	0bad0000 	.word	0x0bad0000
   24d28:	0bad0005 	.word	0x0bad0005

00024d2c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   24d2c:	b570      	push	{r4, r5, r6, lr}
    return NRFX_USBD_EP_BITPOS(ep);
   24d2e:	b245      	sxtb	r5, r0
   24d30:	2d00      	cmp	r5, #0
   24d32:	db12      	blt.n	24d5a <nrfx_usbd_ep_transfer+0x2e>
   24d34:	2310      	movs	r3, #16
   24d36:	f000 020f 	and.w	r2, r0, #15
   24d3a:	18d4      	adds	r4, r2, r3
	__asm__ volatile(
   24d3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d40:	f3ef 8c11 	mrs	ip, BASEPRI
   24d44:	f383 8812 	msr	BASEPRI_MAX, r3
   24d48:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   24d4c:	b93a      	cbnz	r2, 24d5e <nrfx_usbd_ep_transfer+0x32>
   24d4e:	4b2f      	ldr	r3, [pc, #188]	; (24e0c <nrfx_usbd_ep_transfer+0xe0>)
   24d50:	781b      	ldrb	r3, [r3, #0]
   24d52:	4283      	cmp	r3, r0
   24d54:	d003      	beq.n	24d5e <nrfx_usbd_ep_transfer+0x32>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
   24d56:	482e      	ldr	r0, [pc, #184]	; (24e10 <nrfx_usbd_ep_transfer+0xe4>)
   24d58:	e052      	b.n	24e00 <nrfx_usbd_ep_transfer+0xd4>
    return NRFX_USBD_EP_BITPOS(ep);
   24d5a:	2300      	movs	r3, #0
   24d5c:	e7eb      	b.n	24d36 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   24d5e:	4b2d      	ldr	r3, [pc, #180]	; (24e14 <nrfx_usbd_ep_transfer+0xe8>)
   24d60:	681b      	ldr	r3, [r3, #0]
   24d62:	43db      	mvns	r3, r3
   24d64:	b29b      	uxth	r3, r3
   24d66:	482c      	ldr	r0, [pc, #176]	; (24e18 <nrfx_usbd_ep_transfer+0xec>)
   24d68:	6800      	ldr	r0, [r0, #0]
   24d6a:	4303      	orrs	r3, r0
   24d6c:	f04f 0e01 	mov.w	lr, #1
   24d70:	fa0e fe04 	lsl.w	lr, lr, r4
   24d74:	ea13 0f0e 	tst.w	r3, lr
   24d78:	d141      	bne.n	24dfe <nrfx_usbd_ep_transfer+0xd2>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24d7a:	2d00      	cmp	r5, #0
   24d7c:	db1e      	blt.n	24dbc <nrfx_usbd_ep_transfer+0x90>
   24d7e:	4827      	ldr	r0, [pc, #156]	; (24e1c <nrfx_usbd_ep_transfer+0xf0>)
   24d80:	0116      	lsls	r6, r2, #4
   24d82:	eb00 1402 	add.w	r4, r0, r2, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
   24d86:	2d00      	cmp	r5, #0
   24d88:	db1a      	blt.n	24dc0 <nrfx_usbd_ep_transfer+0x94>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   24d8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   24d8e:	4b24      	ldr	r3, [pc, #144]	; (24e20 <nrfx_usbd_ep_transfer+0xf4>)
   24d90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   24d94:	4a23      	ldr	r2, [pc, #140]	; (24e24 <nrfx_usbd_ep_transfer+0xf8>)
   24d96:	5182      	str	r2, [r0, r6]
        }
        *p_context = *p_transfer;
   24d98:	c907      	ldmia	r1, {r0, r1, r2}
   24d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   24d9e:	6063      	str	r3, [r4, #4]

        p_state->transfer_cnt = 0;
   24da0:	2300      	movs	r3, #0
   24da2:	60a3      	str	r3, [r4, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   24da4:	73a3      	strb	r3, [r4, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   24da6:	4a1c      	ldr	r2, [pc, #112]	; (24e18 <nrfx_usbd_ep_transfer+0xec>)
   24da8:	6813      	ldr	r3, [r2, #0]
   24daa:	ea43 030e 	orr.w	r3, r3, lr
   24dae:	6013      	str	r3, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24db0:	4b1d      	ldr	r3, [pc, #116]	; (24e28 <nrfx_usbd_ep_transfer+0xfc>)
   24db2:	2280      	movs	r2, #128	; 0x80
   24db4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
   24db8:	481c      	ldr	r0, [pc, #112]	; (24e2c <nrfx_usbd_ep_transfer+0x100>)
}
   24dba:	e021      	b.n	24e00 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24dbc:	481c      	ldr	r0, [pc, #112]	; (24e30 <nrfx_usbd_ep_transfer+0x104>)
   24dbe:	e7df      	b.n	24d80 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   24dc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   24dc4:	4b1b      	ldr	r3, [pc, #108]	; (24e34 <nrfx_usbd_ep_transfer+0x108>)
   24dc6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   24dca:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   24dcc:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   24dd0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24dd4:	d006      	beq.n	24de4 <nrfx_usbd_ep_transfer+0xb8>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   24dd6:	688a      	ldr	r2, [r1, #8]
   24dd8:	f012 0f01 	tst.w	r2, #1
   24ddc:	d10c      	bne.n	24df8 <nrfx_usbd_ep_transfer+0xcc>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   24dde:	4a16      	ldr	r2, [pc, #88]	; (24e38 <nrfx_usbd_ep_transfer+0x10c>)
   24de0:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   24de2:	e7d9      	b.n	24d98 <nrfx_usbd_ep_transfer+0x6c>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   24de4:	688a      	ldr	r2, [r1, #8]
   24de6:	f012 0f01 	tst.w	r2, #1
   24dea:	d102      	bne.n	24df2 <nrfx_usbd_ep_transfer+0xc6>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   24dec:	4a13      	ldr	r2, [pc, #76]	; (24e3c <nrfx_usbd_ep_transfer+0x110>)
   24dee:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   24df0:	e7d2      	b.n	24d98 <nrfx_usbd_ep_transfer+0x6c>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   24df2:	4a13      	ldr	r2, [pc, #76]	; (24e40 <nrfx_usbd_ep_transfer+0x114>)
   24df4:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   24df6:	e7cf      	b.n	24d98 <nrfx_usbd_ep_transfer+0x6c>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   24df8:	4a12      	ldr	r2, [pc, #72]	; (24e44 <nrfx_usbd_ep_transfer+0x118>)
   24dfa:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   24dfc:	e7cc      	b.n	24d98 <nrfx_usbd_ep_transfer+0x6c>
        ret = NRFX_ERROR_BUSY;
   24dfe:	4812      	ldr	r0, [pc, #72]	; (24e48 <nrfx_usbd_ep_transfer+0x11c>)
	__asm__ volatile(
   24e00:	f38c 8811 	msr	BASEPRI, ip
   24e04:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   24e08:	bd70      	pop	{r4, r5, r6, pc}
   24e0a:	bf00      	nop
   24e0c:	20005d47 	.word	0x20005d47
   24e10:	0bad000a 	.word	0x0bad000a
   24e14:	20004d6c 	.word	0x20004d6c
   24e18:	20004d68 	.word	0x20004d68
   24e1c:	20004c48 	.word	0x20004c48
   24e20:	20004b70 	.word	0x20004b70
   24e24:	000307a7 	.word	0x000307a7
   24e28:	e000e100 	.word	0xe000e100
   24e2c:	0bad0000 	.word	0x0bad0000
   24e30:	20004cd8 	.word	0x20004cd8
   24e34:	20004bdc 	.word	0x20004bdc
   24e38:	00030895 	.word	0x00030895
   24e3c:	000307dd 	.word	0x000307dd
   24e40:	000307ff 	.word	0x000307ff
   24e44:	000308d3 	.word	0x000308d3
   24e48:	0bad000b 	.word	0x0bad000b

00024e4c <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
   24e4c:	4800      	ldr	r0, [pc, #0]	; (24e50 <nrfx_usbd_feeder_buffer_get+0x4>)
   24e4e:	4770      	bx	lr
   24e50:	20004b30 	.word	0x20004b30

00024e54 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
   24e54:	b500      	push	{lr}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24e56:	f010 0f80 	tst.w	r0, #128	; 0x80
   24e5a:	d11c      	bne.n	24e96 <nrfx_usbd_ep_status_get+0x42>
   24e5c:	4a10      	ldr	r2, [pc, #64]	; (24ea0 <nrfx_usbd_ep_status_get+0x4c>)
        NRF_USBD_EP_NR_GET(ep));
   24e5e:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24e62:	ea4f 1c00 	mov.w	ip, r0, lsl #4
   24e66:	eb02 1000 	add.w	r0, r2, r0, lsl #4
	__asm__ volatile(
   24e6a:	f04f 0e40 	mov.w	lr, #64	; 0x40
   24e6e:	f3ef 8311 	mrs	r3, BASEPRI
   24e72:	f38e 8812 	msr	BASEPRI_MAX, lr
   24e76:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
   24e7a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   24e7e:	f8c1 e000 	str.w	lr, [r1]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   24e82:	f852 200c 	ldr.w	r2, [r2, ip]
   24e86:	b142      	cbz	r2, 24e9a <nrfx_usbd_ep_status_get+0x46>
   24e88:	2004      	movs	r0, #4
	__asm__ volatile(
   24e8a:	f383 8811 	msr	BASEPRI, r3
   24e8e:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   24e92:	f85d fb04 	ldr.w	pc, [sp], #4
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24e96:	4a03      	ldr	r2, [pc, #12]	; (24ea4 <nrfx_usbd_ep_status_get+0x50>)
   24e98:	e7e1      	b.n	24e5e <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   24e9a:	7b80      	ldrb	r0, [r0, #14]
   24e9c:	e7f5      	b.n	24e8a <nrfx_usbd_ep_status_get+0x36>
   24e9e:	bf00      	nop
   24ea0:	20004c48 	.word	0x20004c48
   24ea4:	20004cd8 	.word	0x20004cd8

00024ea8 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   24ea8:	f010 0f08 	tst.w	r0, #8
   24eac:	d107      	bne.n	24ebe <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   24eae:	f000 000f 	and.w	r0, r0, #15
   24eb2:	f500 7094 	add.w	r0, r0, #296	; 0x128
   24eb6:	4b06      	ldr	r3, [pc, #24]	; (24ed0 <nrfx_usbd_epout_size_get+0x28>)
   24eb8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24ebc:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   24ebe:	4b04      	ldr	r3, [pc, #16]	; (24ed0 <nrfx_usbd_epout_size_get+0x28>)
   24ec0:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   24ec4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   24ec8:	d100      	bne.n	24ecc <nrfx_usbd_epout_size_get+0x24>
   24eca:	4770      	bx	lr
            size_isoout = 0;
   24ecc:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   24ece:	4770      	bx	lr
   24ed0:	40027000 	.word	0x40027000

00024ed4 <usbd_dmareq_process>:
    if (!m_dma_pending)
   24ed4:	4b57      	ldr	r3, [pc, #348]	; (25034 <usbd_dmareq_process+0x160>)
   24ed6:	781b      	ldrb	r3, [r3, #0]
   24ed8:	2b00      	cmp	r3, #0
   24eda:	f040 80aa 	bne.w	25032 <usbd_dmareq_process+0x15e>
{
   24ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ee2:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   24ee4:	4b54      	ldr	r3, [pc, #336]	; (25038 <usbd_dmareq_process+0x164>)
   24ee6:	681b      	ldr	r3, [r3, #0]
   24ee8:	4a54      	ldr	r2, [pc, #336]	; (2503c <usbd_dmareq_process+0x168>)
   24eea:	6812      	ldr	r2, [r2, #0]
   24eec:	4013      	ands	r3, r2
   24eee:	f000 809d 	beq.w	2502c <usbd_dmareq_process+0x158>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   24ef2:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
   24ef6:	d00d      	beq.n	24f14 <usbd_dmareq_process+0x40>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
   24ef8:	f00b fc96 	bl	30828 <usbd_dma_scheduler_algorithm>
   24efc:	4606      	mov	r6, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   24efe:	2e0f      	cmp	r6, #15
   24f00:	d910      	bls.n	24f24 <usbd_dmareq_process+0x50>
   24f02:	f1a6 0310 	sub.w	r3, r6, #16
   24f06:	b2df      	uxtb	r7, r3
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24f08:	f013 0f80 	tst.w	r3, #128	; 0x80
   24f0c:	d107      	bne.n	24f1e <usbd_dmareq_process+0x4a>
   24f0e:	f8df a130 	ldr.w	sl, [pc, #304]	; 25040 <usbd_dmareq_process+0x16c>
   24f12:	e00c      	b.n	24f2e <usbd_dmareq_process+0x5a>
                pos = usbd_dma_scheduler_algorithm(req);
   24f14:	4618      	mov	r0, r3
   24f16:	f00b fc87 	bl	30828 <usbd_dma_scheduler_algorithm>
   24f1a:	4606      	mov	r6, r0
   24f1c:	e7ef      	b.n	24efe <usbd_dmareq_process+0x2a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24f1e:	f8df a124 	ldr.w	sl, [pc, #292]	; 25044 <usbd_dmareq_process+0x170>
   24f22:	e004      	b.n	24f2e <usbd_dmareq_process+0x5a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   24f24:	f066 077f 	orn	r7, r6, #127	; 0x7f
   24f28:	b2ff      	uxtb	r7, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   24f2a:	f8df a118 	ldr.w	sl, [pc, #280]	; 25044 <usbd_dmareq_process+0x170>
   24f2e:	f007 040f 	and.w	r4, r7, #15
   24f32:	ea4f 1b04 	mov.w	fp, r4, lsl #4
   24f36:	eb0a 1804 	add.w	r8, sl, r4, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
   24f3a:	b27d      	sxtb	r5, r7
   24f3c:	2d00      	cmp	r5, #0
   24f3e:	db36      	blt.n	24fae <usbd_dmareq_process+0xda>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   24f40:	4638      	mov	r0, r7
   24f42:	f7ff ffb1 	bl	24ea8 <nrfx_usbd_epout_size_get>
   24f46:	4681      	mov	r9, r0
                continue_transfer = p_state->handler.consumer(
   24f48:	f85a a00b 	ldr.w	sl, [sl, fp]
   24f4c:	4603      	mov	r3, r0
   24f4e:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   24f52:	f8d8 1004 	ldr.w	r1, [r8, #4]
   24f56:	a802      	add	r0, sp, #8
   24f58:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
   24f5a:	9b02      	ldr	r3, [sp, #8]
   24f5c:	b113      	cbz	r3, 24f64 <usbd_dmareq_process+0x90>
                else if (transfer.size < rx_size)
   24f5e:	9b03      	ldr	r3, [sp, #12]
   24f60:	454b      	cmp	r3, r9
   24f62:	d332      	bcc.n	24fca <usbd_dmareq_process+0xf6>
                if (!continue_transfer)
   24f64:	b910      	cbnz	r0, 24f6c <usbd_dmareq_process+0x98>
                    p_state->handler.consumer = NULL;
   24f66:	2300      	movs	r3, #0
   24f68:	f8c8 3000 	str.w	r3, [r8]
            usbd_dma_pending_set();
   24f6c:	f7ff faf6 	bl	2455c <usbd_dma_pending_set>
            m_ep_ready &= ~(1U << pos);
   24f70:	2201      	movs	r2, #1
   24f72:	40b2      	lsls	r2, r6
   24f74:	4931      	ldr	r1, [pc, #196]	; (2503c <usbd_dmareq_process+0x168>)
   24f76:	680b      	ldr	r3, [r1, #0]
   24f78:	ea23 0302 	bic.w	r3, r3, r2
   24f7c:	600b      	str	r3, [r1, #0]
            p_state->transfer_cnt += transfer.size;
   24f7e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   24f82:	9b03      	ldr	r3, [sp, #12]
   24f84:	441a      	add	r2, r3
   24f86:	f8c8 2008 	str.w	r2, [r8, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   24f8a:	9a02      	ldr	r2, [sp, #8]
   24f8c:	4639      	mov	r1, r7
   24f8e:	482e      	ldr	r0, [pc, #184]	; (25048 <usbd_dmareq_process+0x174>)
   24f90:	f00b fbad 	bl	306ee <nrf_usbd_ep_easydma_set>
    return (nrf_usbd_task_t)(
   24f94:	2d00      	cmp	r5, #0
   24f96:	db36      	blt.n	25006 <usbd_dmareq_process+0x132>
   24f98:	2328      	movs	r3, #40	; 0x28
   24f9a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   24f9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24fa2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   24fa6:	2201      	movs	r2, #1
   24fa8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   24faa:	681b      	ldr	r3, [r3, #0]
}
   24fac:	e03a      	b.n	25024 <usbd_dmareq_process+0x150>
                continue_transfer = p_state->handler.feeder(
   24fae:	f85a 300b 	ldr.w	r3, [sl, fp]
   24fb2:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   24fb6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   24fba:	a802      	add	r0, sp, #8
   24fbc:	4798      	blx	r3
                if (!continue_transfer)
   24fbe:	2800      	cmp	r0, #0
   24fc0:	d1d4      	bne.n	24f6c <usbd_dmareq_process+0x98>
                    p_state->handler.feeder = NULL;
   24fc2:	2300      	movs	r3, #0
   24fc4:	f8c8 3000 	str.w	r3, [r8]
   24fc8:	e7d0      	b.n	24f6c <usbd_dmareq_process+0x98>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   24fca:	2202      	movs	r2, #2
   24fcc:	f888 200e 	strb.w	r2, [r8, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   24fd0:	2301      	movs	r3, #1
   24fd2:	40b3      	lsls	r3, r6
   24fd4:	43db      	mvns	r3, r3
   24fd6:	4918      	ldr	r1, [pc, #96]	; (25038 <usbd_dmareq_process+0x164>)
   24fd8:	f3bf 8f5b 	dmb	ish
   24fdc:	e851 4f00 	ldrex	r4, [r1]
   24fe0:	401c      	ands	r4, r3
   24fe2:	e841 4000 	strex	r0, r4, [r1]
   24fe6:	2800      	cmp	r0, #0
   24fe8:	d1f8      	bne.n	24fdc <usbd_dmareq_process+0x108>
   24fea:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   24fee:	2306      	movs	r3, #6
   24ff0:	f88d 3004 	strb.w	r3, [sp, #4]
   24ff4:	f88d 7006 	strb.w	r7, [sp, #6]
   24ff8:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
   24ffc:	4b13      	ldr	r3, [pc, #76]	; (2504c <usbd_dmareq_process+0x178>)
   24ffe:	681b      	ldr	r3, [r3, #0]
   25000:	a801      	add	r0, sp, #4
   25002:	4798      	blx	r3
                    continue;
   25004:	e76e      	b.n	24ee4 <usbd_dmareq_process+0x10>
    return (nrf_usbd_task_t)(
   25006:	2304      	movs	r3, #4
   25008:	e7c7      	b.n	24f9a <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2500a:	4b11      	ldr	r3, [pc, #68]	; (25050 <usbd_dmareq_process+0x17c>)
   2500c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   25010:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25014:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   25018:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   2501a:	b93b      	cbnz	r3, 2502c <usbd_dmareq_process+0x158>
   2501c:	4b0a      	ldr	r3, [pc, #40]	; (25048 <usbd_dmareq_process+0x174>)
   2501e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   25022:	b91b      	cbnz	r3, 2502c <usbd_dmareq_process+0x158>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   25024:	2d00      	cmp	r5, #0
   25026:	dbf0      	blt.n	2500a <usbd_dmareq_process+0x136>
   25028:	4b0a      	ldr	r3, [pc, #40]	; (25054 <usbd_dmareq_process+0x180>)
   2502a:	e7ef      	b.n	2500c <usbd_dmareq_process+0x138>
}
   2502c:	b005      	add	sp, #20
   2502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25032:	4770      	bx	lr
   25034:	20005d46 	.word	0x20005d46
   25038:	20004d68 	.word	0x20004d68
   2503c:	20004d6c 	.word	0x20004d6c
   25040:	20004c48 	.word	0x20004c48
   25044:	20004cd8 	.word	0x20004cd8
   25048:	40027000 	.word	0x40027000
   2504c:	20004d70 	.word	0x20004d70
   25050:	00035078 	.word	0x00035078
   25054:	00035064 	.word	0x00035064

00025058 <ev_epdata_handler>:
{
   25058:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
   2505a:	4b0f      	ldr	r3, [pc, #60]	; (25098 <ev_epdata_handler+0x40>)
   2505c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   25060:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
   25064:	e008      	b.n	25078 <ev_epdata_handler+0x20>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25066:	f042 0080 	orr.w	r0, r2, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
   2506a:	b2d2      	uxtb	r2, r2
   2506c:	2301      	movs	r3, #1
   2506e:	4093      	lsls	r3, r2
   25070:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   25074:	f7ff fc40 	bl	248f8 <usbd_ep_data_handler>
    while (dataepstatus)
   25078:	b154      	cbz	r4, 25090 <ev_epdata_handler+0x38>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2507a:	fa94 f2a4 	rbit	r2, r4
   2507e:	fab2 f282 	clz	r2, r2
   25082:	4611      	mov	r1, r2
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25084:	2a0f      	cmp	r2, #15
   25086:	d9ee      	bls.n	25066 <ev_epdata_handler+0xe>
   25088:	f1a2 0010 	sub.w	r0, r2, #16
   2508c:	b2c0      	uxtb	r0, r0
   2508e:	e7ec      	b.n	2506a <ev_epdata_handler+0x12>
        usbd_dmareq_process();
   25090:	f7ff ff20 	bl	24ed4 <usbd_dmareq_process>
}
   25094:	bd10      	pop	{r4, pc}
   25096:	bf00      	nop
   25098:	40027000 	.word	0x40027000

0002509c <nrf_usbd_epout_dma_handler>:
{
   2509c:	b510      	push	{r4, lr}
   2509e:	b082      	sub	sp, #8
   250a0:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   250a2:	f7ff fa6b 	bl	2457c <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   250a6:	b261      	sxtb	r1, r4
   250a8:	2900      	cmp	r1, #0
   250aa:	db2c      	blt.n	25106 <nrf_usbd_epout_dma_handler+0x6a>
   250ac:	4a23      	ldr	r2, [pc, #140]	; (2513c <nrf_usbd_epout_dma_handler+0xa0>)
   250ae:	f004 030f 	and.w	r3, r4, #15
   250b2:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   250b6:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   250ba:	7b80      	ldrb	r0, [r0, #14]
   250bc:	2803      	cmp	r0, #3
   250be:	d024      	beq.n	2510a <nrf_usbd_epout_dma_handler+0x6e>
    else if (p_state->handler.consumer == NULL)
   250c0:	f852 200c 	ldr.w	r2, [r2, ip]
   250c4:	bba2      	cbnz	r2, 25130 <nrf_usbd_epout_dma_handler+0x94>
    return NRFX_USBD_EP_BITPOS(ep);
   250c6:	2900      	cmp	r1, #0
   250c8:	db00      	blt.n	250cc <nrf_usbd_epout_dma_handler+0x30>
   250ca:	2210      	movs	r2, #16
   250cc:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   250ce:	2301      	movs	r3, #1
   250d0:	4093      	lsls	r3, r2
   250d2:	43db      	mvns	r3, r3
   250d4:	4a1a      	ldr	r2, [pc, #104]	; (25140 <nrf_usbd_epout_dma_handler+0xa4>)
   250d6:	f3bf 8f5b 	dmb	ish
   250da:	e852 0f00 	ldrex	r0, [r2]
   250de:	4018      	ands	r0, r3
   250e0:	e842 0100 	strex	r1, r0, [r2]
   250e4:	2900      	cmp	r1, #0
   250e6:	d1f8      	bne.n	250da <nrf_usbd_epout_dma_handler+0x3e>
   250e8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   250ec:	2306      	movs	r3, #6
   250ee:	f88d 3004 	strb.w	r3, [sp, #4]
   250f2:	f88d 4006 	strb.w	r4, [sp, #6]
   250f6:	2300      	movs	r3, #0
   250f8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   250fc:	4b11      	ldr	r3, [pc, #68]	; (25144 <nrf_usbd_epout_dma_handler+0xa8>)
   250fe:	681b      	ldr	r3, [r3, #0]
   25100:	a801      	add	r0, sp, #4
   25102:	4798      	blx	r3
   25104:	e014      	b.n	25130 <nrf_usbd_epout_dma_handler+0x94>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   25106:	4a10      	ldr	r2, [pc, #64]	; (25148 <nrf_usbd_epout_dma_handler+0xac>)
   25108:	e7d1      	b.n	250ae <nrf_usbd_epout_dma_handler+0x12>
    return NRFX_USBD_EP_BITPOS(ep);
   2510a:	2900      	cmp	r1, #0
   2510c:	db14      	blt.n	25138 <nrf_usbd_epout_dma_handler+0x9c>
   2510e:	2210      	movs	r2, #16
   25110:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   25112:	2301      	movs	r3, #1
   25114:	4093      	lsls	r3, r2
   25116:	43db      	mvns	r3, r3
   25118:	4a09      	ldr	r2, [pc, #36]	; (25140 <nrf_usbd_epout_dma_handler+0xa4>)
   2511a:	f3bf 8f5b 	dmb	ish
   2511e:	e852 0f00 	ldrex	r0, [r2]
   25122:	4018      	ands	r0, r3
   25124:	e842 0100 	strex	r1, r0, [r2]
   25128:	2900      	cmp	r1, #0
   2512a:	d1f8      	bne.n	2511e <nrf_usbd_epout_dma_handler+0x82>
   2512c:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   25130:	f7ff fed0 	bl	24ed4 <usbd_dmareq_process>
}
   25134:	b002      	add	sp, #8
   25136:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   25138:	2200      	movs	r2, #0
   2513a:	e7e9      	b.n	25110 <nrf_usbd_epout_dma_handler+0x74>
   2513c:	20004c48 	.word	0x20004c48
   25140:	20004d68 	.word	0x20004d68
   25144:	20004d70 	.word	0x20004d70
   25148:	20004cd8 	.word	0x20004cd8

0002514c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   2514c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   25150:	4b01      	ldr	r3, [pc, #4]	; (25158 <nrfx_usbd_ep_stall+0xc>)
   25152:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   25156:	4770      	bx	lr
   25158:	40027000 	.word	0x40027000

0002515c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2515c:	f010 0f08 	tst.w	r0, #8
   25160:	d117      	bne.n	25192 <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   25162:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   25166:	f010 0f80 	tst.w	r0, #128	; 0x80
   2516a:	d10c      	bne.n	25186 <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
   2516c:	f503 7388 	add.w	r3, r3, #272	; 0x110
   25170:	009b      	lsls	r3, r3, #2
   25172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25176:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   2517a:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   2517c:	2801      	cmp	r0, #1
   2517e:	bf14      	ite	ne
   25180:	2000      	movne	r0, #0
   25182:	2001      	moveq	r0, #1
   25184:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
   25186:	f503 7384 	add.w	r3, r3, #264	; 0x108
   2518a:	4a03      	ldr	r2, [pc, #12]	; (25198 <nrfx_usbd_ep_stall_check+0x3c>)
   2518c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   25190:	e7f4      	b.n	2517c <nrfx_usbd_ep_stall_check+0x20>
        return false;
   25192:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   25194:	4770      	bx	lr
   25196:	bf00      	nop
   25198:	40027000 	.word	0x40027000

0002519c <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   2519c:	4b04      	ldr	r3, [pc, #16]	; (251b0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   2519e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   251a2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   251a6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   251aa:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   251ae:	4770      	bx	lr
   251b0:	40027000 	.word	0x40027000

000251b4 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   251b4:	b510      	push	{r4, lr}
   251b6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   251b8:	2208      	movs	r2, #8
   251ba:	2100      	movs	r1, #0
   251bc:	f007 fb45 	bl	2c84a <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   251c0:	4b11      	ldr	r3, [pc, #68]	; (25208 <nrfx_usbd_setup_get+0x54>)
   251c2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   251c6:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   251c8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
   251cc:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   251ce:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
   251d2:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   251d4:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   251d8:	0209      	lsls	r1, r1, #8
   251da:	b289      	uxth	r1, r1
   251dc:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   251de:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   251e0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
   251e4:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   251e6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   251ea:	0209      	lsls	r1, r1, #8
   251ec:	b289      	uxth	r1, r1
   251ee:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   251f0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   251f2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   251f6:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   251f8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   251fc:	021b      	lsls	r3, r3, #8
   251fe:	b29b      	uxth	r3, r3
   25200:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   25202:	80e3      	strh	r3, [r4, #6]
}
   25204:	bd10      	pop	{r4, pc}
   25206:	bf00      	nop
   25208:	40027000 	.word	0x40027000

0002520c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2520c:	4b02      	ldr	r3, [pc, #8]	; (25218 <nrfx_usbd_setup_data_clear+0xc>)
   2520e:	2201      	movs	r2, #1
   25210:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   25212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   25214:	4770      	bx	lr
   25216:	bf00      	nop
   25218:	40027000 	.word	0x40027000

0002521c <nrf_usbd_ep0out_dma_handler>:
{
   2521c:	b500      	push	{lr}
   2521e:	b083      	sub	sp, #12
    usbd_dma_pending_clear();
   25220:	f7ff f9ac 	bl	2457c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   25224:	4b19      	ldr	r3, [pc, #100]	; (2528c <nrf_usbd_ep0out_dma_handler+0x70>)
   25226:	7b9b      	ldrb	r3, [r3, #14]
   25228:	2b03      	cmp	r3, #3
   2522a:	d005      	beq.n	25238 <nrf_usbd_ep0out_dma_handler+0x1c>
    else if (p_state->handler.consumer == NULL)
   2522c:	4b17      	ldr	r3, [pc, #92]	; (2528c <nrf_usbd_ep0out_dma_handler+0x70>)
   2522e:	681b      	ldr	r3, [r3, #0]
   25230:	b183      	cbz	r3, 25254 <nrf_usbd_ep0out_dma_handler+0x38>
        nrfx_usbd_setup_data_clear();
   25232:	f7ff ffeb 	bl	2520c <nrfx_usbd_setup_data_clear>
}
   25236:	e026      	b.n	25286 <nrf_usbd_ep0out_dma_handler+0x6a>
   25238:	4b15      	ldr	r3, [pc, #84]	; (25290 <nrf_usbd_ep0out_dma_handler+0x74>)
   2523a:	f3bf 8f5b 	dmb	ish
   2523e:	e853 1f00 	ldrex	r1, [r3]
   25242:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   25246:	e843 1200 	strex	r2, r1, [r3]
   2524a:	2a00      	cmp	r2, #0
   2524c:	d1f7      	bne.n	2523e <nrf_usbd_ep0out_dma_handler+0x22>
   2524e:	f3bf 8f5b 	dmb	ish
   25252:	e018      	b.n	25286 <nrf_usbd_ep0out_dma_handler+0x6a>
   25254:	4b0e      	ldr	r3, [pc, #56]	; (25290 <nrf_usbd_ep0out_dma_handler+0x74>)
   25256:	f3bf 8f5b 	dmb	ish
   2525a:	e853 1f00 	ldrex	r1, [r3]
   2525e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   25262:	e843 1200 	strex	r2, r1, [r3]
   25266:	2a00      	cmp	r2, #0
   25268:	d1f7      	bne.n	2525a <nrf_usbd_ep0out_dma_handler+0x3e>
   2526a:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2526e:	2306      	movs	r3, #6
   25270:	f88d 3004 	strb.w	r3, [sp, #4]
   25274:	2300      	movs	r3, #0
   25276:	f88d 3006 	strb.w	r3, [sp, #6]
   2527a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   2527e:	4b05      	ldr	r3, [pc, #20]	; (25294 <nrf_usbd_ep0out_dma_handler+0x78>)
   25280:	681b      	ldr	r3, [r3, #0]
   25282:	a801      	add	r0, sp, #4
   25284:	4798      	blx	r3
}
   25286:	b003      	add	sp, #12
   25288:	f85d fb04 	ldr.w	pc, [sp], #4
   2528c:	20004c48 	.word	0x20004c48
   25290:	20004d68 	.word	0x20004d68
   25294:	20004d70 	.word	0x20004d70

00025298 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   25298:	4b02      	ldr	r3, [pc, #8]	; (252a4 <nrfx_usbd_setup_clear+0xc>)
   2529a:	2201      	movs	r2, #1
   2529c:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   252a0:	4770      	bx	lr
   252a2:	bf00      	nop
   252a4:	40027000 	.word	0x40027000

000252a8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   252a8:	4b02      	ldr	r3, [pc, #8]	; (252b4 <nrfx_usbd_setup_stall+0xc>)
   252aa:	2201      	movs	r2, #1
   252ac:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   252ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   252b0:	4770      	bx	lr
   252b2:	bf00      	nop
   252b4:	40027000 	.word	0x40027000

000252b8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   252b8:	4b01      	ldr	r3, [pc, #4]	; (252c0 <nrfx_usbd_last_setup_dir_get+0x8>)
   252ba:	7818      	ldrb	r0, [r3, #0]
   252bc:	4770      	bx	lr
   252be:	bf00      	nop
   252c0:	20005d47 	.word	0x20005d47

000252c4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   252c4:	b410      	push	{r4}
	__asm__ volatile(
   252c6:	f04f 0240 	mov.w	r2, #64	; 0x40
   252ca:	f3ef 8311 	mrs	r3, BASEPRI
   252ce:	f382 8812 	msr	BASEPRI_MAX, r2
   252d2:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
   252d6:	f010 0f80 	tst.w	r0, #128	; 0x80
   252da:	d11d      	bne.n	25318 <nrfx_usbd_transfer_out_drop+0x54>
   252dc:	2110      	movs	r1, #16
   252de:	f000 020f 	and.w	r2, r0, #15
   252e2:	4411      	add	r1, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   252e4:	f04f 0c01 	mov.w	ip, #1
   252e8:	fa0c fc01 	lsl.w	ip, ip, r1
   252ec:	4c0b      	ldr	r4, [pc, #44]	; (2531c <nrfx_usbd_transfer_out_drop+0x58>)
   252ee:	6821      	ldr	r1, [r4, #0]
   252f0:	ea21 010c 	bic.w	r1, r1, ip
   252f4:	6021      	str	r1, [r4, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   252f6:	f010 0f08 	tst.w	r0, #8
   252fa:	d107      	bne.n	2530c <nrfx_usbd_transfer_out_drop+0x48>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   252fc:	4908      	ldr	r1, [pc, #32]	; (25320 <nrfx_usbd_transfer_out_drop+0x5c>)
   252fe:	f502 7294 	add.w	r2, r2, #296	; 0x128
   25302:	2000      	movs	r0, #0
   25304:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   25308:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	__asm__ volatile(
   2530c:	f383 8811 	msr	BASEPRI, r3
   25310:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   25314:	bc10      	pop	{r4}
   25316:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
   25318:	2100      	movs	r1, #0
   2531a:	e7e0      	b.n	252de <nrfx_usbd_transfer_out_drop+0x1a>
   2531c:	20004d6c 	.word	0x20004d6c
   25320:	40027000 	.word	0x40027000

00025324 <usbd_ep_abort>:
{
   25324:	b570      	push	{r4, r5, r6, lr}
   25326:	b082      	sub	sp, #8
	__asm__ volatile(
   25328:	f04f 0340 	mov.w	r3, #64	; 0x40
   2532c:	f3ef 8511 	mrs	r5, BASEPRI
   25330:	f383 8812 	msr	BASEPRI_MAX, r3
   25334:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   25338:	b242      	sxtb	r2, r0
   2533a:	2a00      	cmp	r2, #0
   2533c:	db23      	blt.n	25386 <usbd_ep_abort+0x62>
   2533e:	4c3a      	ldr	r4, [pc, #232]	; (25428 <usbd_ep_abort+0x104>)
   25340:	f000 030f 	and.w	r3, r0, #15
   25344:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   25348:	2a00      	cmp	r2, #0
   2534a:	db21      	blt.n	25390 <usbd_ep_abort+0x6c>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2534c:	4a37      	ldr	r2, [pc, #220]	; (2542c <usbd_ep_abort+0x108>)
   2534e:	6812      	ldr	r2, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   25350:	f103 0110 	add.w	r1, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   25354:	2301      	movs	r3, #1
   25356:	408b      	lsls	r3, r1
   25358:	ea33 0202 	bics.w	r2, r3, r2
   2535c:	d115      	bne.n	2538a <usbd_ep_abort+0x66>
            p_state->handler.consumer = NULL;
   2535e:	2200      	movs	r2, #0
   25360:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   25362:	4932      	ldr	r1, [pc, #200]	; (2542c <usbd_ep_abort+0x108>)
   25364:	680a      	ldr	r2, [r1, #0]
   25366:	ea22 0203 	bic.w	r2, r2, r3
   2536a:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2536c:	4930      	ldr	r1, [pc, #192]	; (25430 <usbd_ep_abort+0x10c>)
   2536e:	680a      	ldr	r2, [r1, #0]
   25370:	ea22 0203 	bic.w	r2, r2, r3
   25374:	600a      	str	r2, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   25376:	2303      	movs	r3, #3
   25378:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
   2537a:	f385 8811 	msr	BASEPRI, r5
   2537e:	f3bf 8f6f 	isb	sy
}
   25382:	b002      	add	sp, #8
   25384:	bd70      	pop	{r4, r5, r6, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   25386:	4c2b      	ldr	r4, [pc, #172]	; (25434 <usbd_ep_abort+0x110>)
   25388:	e7da      	b.n	25340 <usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
   2538a:	f7ff ff9b 	bl	252c4 <nrfx_usbd_transfer_out_drop>
   2538e:	e7f2      	b.n	25376 <usbd_ep_abort+0x52>
        if(!NRF_USBD_EPISO_CHECK(ep))
   25390:	f010 0f08 	tst.w	r0, #8
   25394:	d113      	bne.n	253be <usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
   25396:	2880      	cmp	r0, #128	; 0x80
   25398:	d034      	beq.n	25404 <usbd_ep_abort+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   2539a:	f203 32da 	addw	r2, r3, #986	; 0x3da
   2539e:	0052      	lsls	r2, r2, #1
   253a0:	4925      	ldr	r1, [pc, #148]	; (25438 <usbd_ep_abort+0x114>)
   253a2:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   253a6:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   253aa:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   253ac:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   253b0:	f8d1 6804 	ldr.w	r6, [r1, #2052]	; 0x804
   253b4:	4332      	orrs	r2, r6
   253b6:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   253ba:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   253be:	4a1c      	ldr	r2, [pc, #112]	; (25430 <usbd_ep_abort+0x10c>)
   253c0:	6811      	ldr	r1, [r2, #0]
   253c2:	4a1a      	ldr	r2, [pc, #104]	; (2542c <usbd_ep_abort+0x108>)
   253c4:	6816      	ldr	r6, [r2, #0]
   253c6:	ea66 0c01 	orn	ip, r6, r1
   253ca:	2201      	movs	r2, #1
   253cc:	fa02 f303 	lsl.w	r3, r2, r3
   253d0:	ea1c 0f03 	tst.w	ip, r3
   253d4:	d0d1      	beq.n	2537a <usbd_ep_abort+0x56>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   253d6:	ea26 0603 	bic.w	r6, r6, r3
   253da:	4a14      	ldr	r2, [pc, #80]	; (2542c <usbd_ep_abort+0x108>)
   253dc:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   253de:	4319      	orrs	r1, r3
   253e0:	4b13      	ldr	r3, [pc, #76]	; (25430 <usbd_ep_abort+0x10c>)
   253e2:	6019      	str	r1, [r3, #0]
            p_state->handler.feeder = NULL;
   253e4:	2300      	movs	r3, #0
   253e6:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   253e8:	2303      	movs	r3, #3
   253ea:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   253ec:	2206      	movs	r2, #6
   253ee:	f88d 2004 	strb.w	r2, [sp, #4]
   253f2:	f88d 0006 	strb.w	r0, [sp, #6]
   253f6:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   253fa:	4b10      	ldr	r3, [pc, #64]	; (2543c <usbd_ep_abort+0x118>)
   253fc:	681b      	ldr	r3, [r3, #0]
   253fe:	a801      	add	r0, sp, #4
   25400:	4798      	blx	r3
   25402:	e7ba      	b.n	2537a <usbd_ep_abort+0x56>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   25404:	490c      	ldr	r1, [pc, #48]	; (25438 <usbd_ep_abort+0x114>)
   25406:	f240 72b4 	movw	r2, #1972	; 0x7b4
   2540a:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2540e:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   25412:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   25414:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   25418:	f8d1 6804 	ldr.w	r6, [r1, #2052]	; 0x804
   2541c:	4332      	orrs	r2, r6
   2541e:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   25422:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   25426:	e7ca      	b.n	253be <usbd_ep_abort+0x9a>
   25428:	20004c48 	.word	0x20004c48
   2542c:	20004d68 	.word	0x20004d68
   25430:	20004d6c 	.word	0x20004d6c
   25434:	20004cd8 	.word	0x20004cd8
   25438:	40027000 	.word	0x40027000
   2543c:	20004d70 	.word	0x20004d70

00025440 <ev_setup_handler>:
{
   25440:	b510      	push	{r4, lr}
   25442:	b082      	sub	sp, #8
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   25444:	4b20      	ldr	r3, [pc, #128]	; (254c8 <ev_setup_handler+0x88>)
   25446:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2544a:	4b20      	ldr	r3, [pc, #128]	; (254cc <ev_setup_handler+0x8c>)
   2544c:	681b      	ldr	r3, [r3, #0]
   2544e:	43db      	mvns	r3, r3
   25450:	b29b      	uxth	r3, r3
   25452:	4a1f      	ldr	r2, [pc, #124]	; (254d0 <ev_setup_handler+0x90>)
   25454:	6812      	ldr	r2, [r2, #0]
   25456:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   25458:	4a1e      	ldr	r2, [pc, #120]	; (254d4 <ev_setup_handler+0x94>)
   2545a:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   2545c:	f992 2000 	ldrsb.w	r2, [r2]
   25460:	2a00      	cmp	r2, #0
   25462:	db2a      	blt.n	254ba <ev_setup_handler+0x7a>
   25464:	2210      	movs	r2, #16
   25466:	f000 010f 	and.w	r1, r0, #15
   2546a:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   2546c:	2201      	movs	r2, #1
   2546e:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   25470:	4213      	tst	r3, r2
   25472:	d124      	bne.n	254be <ev_setup_handler+0x7e>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   25474:	f014 0f80 	tst.w	r4, #128	; 0x80
   25478:	d124      	bne.n	254c4 <ev_setup_handler+0x84>
   2547a:	2200      	movs	r2, #0
    m_last_setup_dir =
   2547c:	4b15      	ldr	r3, [pc, #84]	; (254d4 <ev_setup_handler+0x94>)
   2547e:	701a      	strb	r2, [r3, #0]
   25480:	4b13      	ldr	r3, [pc, #76]	; (254d0 <ev_setup_handler+0x90>)
   25482:	f3bf 8f5b 	dmb	ish
   25486:	e853 1f00 	ldrex	r1, [r3]
   2548a:	f021 1101 	bic.w	r1, r1, #65537	; 0x10001
   2548e:	e843 1200 	strex	r2, r1, [r3]
   25492:	2a00      	cmp	r2, #0
   25494:	d1f7      	bne.n	25486 <ev_setup_handler+0x46>
   25496:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   2549a:	4a0c      	ldr	r2, [pc, #48]	; (254cc <ev_setup_handler+0x8c>)
   2549c:	6813      	ldr	r3, [r2, #0]
   2549e:	f043 0301 	orr.w	r3, r3, #1
   254a2:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   254a4:	2300      	movs	r3, #0
   254a6:	9301      	str	r3, [sp, #4]
   254a8:	2305      	movs	r3, #5
   254aa:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   254ae:	4b0a      	ldr	r3, [pc, #40]	; (254d8 <ev_setup_handler+0x98>)
   254b0:	681b      	ldr	r3, [r3, #0]
   254b2:	a801      	add	r0, sp, #4
   254b4:	4798      	blx	r3
}
   254b6:	b002      	add	sp, #8
   254b8:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   254ba:	2200      	movs	r2, #0
   254bc:	e7d3      	b.n	25466 <ev_setup_handler+0x26>
        usbd_ep_abort(m_last_setup_dir);
   254be:	f7ff ff31 	bl	25324 <usbd_ep_abort>
   254c2:	e7d7      	b.n	25474 <ev_setup_handler+0x34>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   254c4:	2280      	movs	r2, #128	; 0x80
   254c6:	e7d9      	b.n	2547c <ev_setup_handler+0x3c>
   254c8:	40027000 	.word	0x40027000
   254cc:	20004d6c 	.word	0x20004d6c
   254d0:	20004d68 	.word	0x20004d68
   254d4:	20005d47 	.word	0x20005d47
   254d8:	20004d70 	.word	0x20004d70

000254dc <nrfx_usbd_irq_handler>:
{
   254dc:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
   254de:	4b1c      	ldr	r3, [pc, #112]	; (25550 <nrfx_usbd_irq_handler+0x74>)
   254e0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    uint32_t active = 0;
   254e4:	2400      	movs	r4, #0
    while (to_process)
   254e6:	e003      	b.n	254f0 <nrfx_usbd_irq_handler+0x14>
        to_process &= ~(1UL << event_nr);
   254e8:	2301      	movs	r3, #1
   254ea:	408b      	lsls	r3, r1
   254ec:	ea22 0203 	bic.w	r2, r2, r3
    while (to_process)
   254f0:	b1a2      	cbz	r2, 2551c <nrfx_usbd_irq_handler+0x40>
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
   254f2:	fa92 f1a2 	rbit	r1, r2
   254f6:	fab1 f181 	clz	r1, r1
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   254fa:	f101 0340 	add.w	r3, r1, #64	; 0x40
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   254fe:	009b      	lsls	r3, r3, #2
   25500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25504:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   25508:	6818      	ldr	r0, [r3, #0]
    if (ret)
   2550a:	2800      	cmp	r0, #0
   2550c:	d0ec      	beq.n	254e8 <nrfx_usbd_irq_handler+0xc>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2550e:	2000      	movs	r0, #0
   25510:	6018      	str	r0, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   25512:	681b      	ldr	r3, [r3, #0]
            active |= 1UL << event_nr;
   25514:	2301      	movs	r3, #1
   25516:	408b      	lsls	r3, r1
   25518:	431c      	orrs	r4, r3
   2551a:	e7e5      	b.n	254e8 <nrfx_usbd_irq_handler+0xc>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   2551c:	f404 0600 	and.w	r6, r4, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   25520:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
   25524:	e00b      	b.n	2553e <nrfx_usbd_irq_handler+0x62>
        m_isr[event_nr]();
   25526:	fa94 f5a4 	rbit	r5, r4
   2552a:	fab5 f585 	clz	r5, r5
   2552e:	4b09      	ldr	r3, [pc, #36]	; (25554 <nrfx_usbd_irq_handler+0x78>)
   25530:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   25534:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   25536:	2301      	movs	r3, #1
   25538:	40ab      	lsls	r3, r5
   2553a:	ea24 0403 	bic.w	r4, r4, r3
    while (active)
   2553e:	2c00      	cmp	r4, #0
   25540:	d1f1      	bne.n	25526 <nrfx_usbd_irq_handler+0x4a>
    usbd_dmareq_process();
   25542:	f7ff fcc7 	bl	24ed4 <usbd_dmareq_process>
    if (setup_active)
   25546:	b906      	cbnz	r6, 2554a <nrfx_usbd_irq_handler+0x6e>
}
   25548:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   2554a:	f7ff ff79 	bl	25440 <ev_setup_handler>
}
   2554e:	e7fb      	b.n	25548 <nrfx_usbd_irq_handler+0x6c>
   25550:	40027000 	.word	0x40027000
   25554:	0003508c 	.word	0x0003508c

00025558 <usbd_ep_abort_all>:
{
   25558:	b538      	push	{r3, r4, r5, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   2555a:	4b12      	ldr	r3, [pc, #72]	; (255a4 <usbd_ep_abort_all+0x4c>)
   2555c:	885b      	ldrh	r3, [r3, #2]
   2555e:	4a12      	ldr	r2, [pc, #72]	; (255a8 <usbd_ep_abort_all+0x50>)
   25560:	6814      	ldr	r4, [r2, #0]
   25562:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    while (0 != ep_waiting)
   25566:	e009      	b.n	2557c <usbd_ep_abort_all+0x24>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25568:	f045 0080 	orr.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   2556c:	f010 0f08 	tst.w	r0, #8
   25570:	d00f      	beq.n	25592 <usbd_ep_abort_all+0x3a>
        ep_waiting &= ~(1U << bitpos);
   25572:	b2ed      	uxtb	r5, r5
   25574:	2301      	movs	r3, #1
   25576:	40ab      	lsls	r3, r5
   25578:	ea24 0403 	bic.w	r4, r4, r3
    while (0 != ep_waiting)
   2557c:	b164      	cbz	r4, 25598 <usbd_ep_abort_all+0x40>
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2557e:	fa94 f5a4 	rbit	r5, r4
   25582:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   25586:	2d0f      	cmp	r5, #15
   25588:	d9ee      	bls.n	25568 <usbd_ep_abort_all+0x10>
   2558a:	f1a5 0010 	sub.w	r0, r5, #16
   2558e:	b2c0      	uxtb	r0, r0
   25590:	e7ec      	b.n	2556c <usbd_ep_abort_all+0x14>
            usbd_ep_abort(bit2ep(bitpos));
   25592:	f7ff fec7 	bl	25324 <usbd_ep_abort>
   25596:	e7ec      	b.n	25572 <usbd_ep_abort_all+0x1a>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   25598:	4b02      	ldr	r3, [pc, #8]	; (255a4 <usbd_ep_abort_all+0x4c>)
   2559a:	f240 12ff 	movw	r2, #511	; 0x1ff
   2559e:	601a      	str	r2, [r3, #0]
}
   255a0:	bd38      	pop	{r3, r4, r5, pc}
   255a2:	bf00      	nop
   255a4:	20004d6c 	.word	0x20004d6c
   255a8:	20004d68 	.word	0x20004d68

000255ac <nrfx_usbd_stop>:
{
   255ac:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   255ae:	4b0c      	ldr	r3, [pc, #48]	; (255e0 <nrfx_usbd_stop+0x34>)
   255b0:	2280      	movs	r2, #128	; 0x80
   255b2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   255b6:	2027      	movs	r0, #39	; 0x27
   255b8:	f7f2 f91a 	bl	177f0 <arch_irq_is_enabled>
   255bc:	b900      	cbnz	r0, 255c0 <nrfx_usbd_stop+0x14>
}
   255be:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
   255c0:	f7ff ffca 	bl	25558 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   255c4:	4c07      	ldr	r4, [pc, #28]	; (255e4 <nrfx_usbd_stop+0x38>)
   255c6:	2300      	movs	r3, #0
   255c8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   255cc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   255d0:	2027      	movs	r0, #39	; 0x27
   255d2:	f007 f834 	bl	2c63e <arch_irq_disable>
    p_reg->INTENCLR = mask;
   255d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   255da:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   255de:	e7ee      	b.n	255be <nrfx_usbd_stop+0x12>
   255e0:	e000e100 	.word	0xe000e100
   255e4:	40027000 	.word	0x40027000

000255e8 <nrfx_usbd_disable>:
{
   255e8:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   255ea:	f7ff ffdf 	bl	255ac <nrfx_usbd_stop>
    return p_reg->INTENSET;
   255ee:	4b08      	ldr	r3, [pc, #32]	; (25610 <nrfx_usbd_disable+0x28>)
   255f0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   255f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   255f8:	2200      	movs	r2, #0
   255fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   255fe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   25602:	f7fe ffbb 	bl	2457c <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   25606:	4b03      	ldr	r3, [pc, #12]	; (25614 <nrfx_usbd_disable+0x2c>)
   25608:	2201      	movs	r2, #1
   2560a:	701a      	strb	r2, [r3, #0]
}
   2560c:	bd08      	pop	{r3, pc}
   2560e:	bf00      	nop
   25610:	40027000 	.word	0x40027000
   25614:	20005d49 	.word	0x20005d49

00025618 <nrfx_usbd_ep_disable>:
{
   25618:	b510      	push	{r4, lr}
   2561a:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   2561c:	f7ff fe82 	bl	25324 <usbd_ep_abort>
    nrf_usbd_ep_disable(NRF_USBD, ep_to_hal(ep));
   25620:	4621      	mov	r1, r4
   25622:	4809      	ldr	r0, [pc, #36]	; (25648 <nrfx_usbd_ep_disable+0x30>)
   25624:	f00b f84a 	bl	306bc <nrf_usbd_ep_disable>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   25628:	f014 0f80 	tst.w	r4, #128	; 0x80
   2562c:	d109      	bne.n	25642 <nrfx_usbd_ep_disable+0x2a>
   2562e:	4b07      	ldr	r3, [pc, #28]	; (2564c <nrfx_usbd_ep_disable+0x34>)
   25630:	f004 040f 	and.w	r4, r4, #15
   25634:	5d1a      	ldrb	r2, [r3, r4]
   25636:	2301      	movs	r3, #1
   25638:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   2563a:	4a03      	ldr	r2, [pc, #12]	; (25648 <nrfx_usbd_ep_disable+0x30>)
   2563c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   25640:	bd10      	pop	{r4, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   25642:	4b03      	ldr	r3, [pc, #12]	; (25650 <nrfx_usbd_ep_disable+0x38>)
   25644:	e7f4      	b.n	25630 <nrfx_usbd_ep_disable+0x18>
   25646:	bf00      	nop
   25648:	40027000 	.word	0x40027000
   2564c:	0003504c 	.word	0x0003504c
   25650:	00035058 	.word	0x00035058

00025654 <nrfx_usbd_ep_enable>:
{
   25654:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   25656:	b241      	sxtb	r1, r0
   25658:	2900      	cmp	r1, #0
   2565a:	db22      	blt.n	256a2 <nrfx_usbd_ep_enable+0x4e>
   2565c:	4b25      	ldr	r3, [pc, #148]	; (256f4 <nrfx_usbd_ep_enable+0xa0>)
   2565e:	f000 040f 	and.w	r4, r0, #15
   25662:	5d1a      	ldrb	r2, [r3, r4]
   25664:	2301      	movs	r3, #1
   25666:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   25668:	4a23      	ldr	r2, [pc, #140]	; (256f8 <nrfx_usbd_ep_enable+0xa4>)
   2566a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   2566e:	2900      	cmp	r1, #0
   25670:	db19      	blt.n	256a6 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   25672:	4b21      	ldr	r3, [pc, #132]	; (256f8 <nrfx_usbd_ep_enable+0xa4>)
   25674:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
   25678:	40e3      	lsrs	r3, r4
   2567a:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   2567e:	b97b      	cbnz	r3, 256a0 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
   25680:	2900      	cmp	r1, #0
   25682:	db16      	blt.n	256b2 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
   25684:	4d1c      	ldr	r5, [pc, #112]	; (256f8 <nrfx_usbd_ep_enable+0xa4>)
   25686:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
   2568a:	2201      	movs	r2, #1
   2568c:	40a2      	lsls	r2, r4
   2568e:	4313      	orrs	r3, r2
   25690:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   25694:	b124      	cbz	r4, 256a0 <nrfx_usbd_ep_enable+0x4c>
   25696:	2900      	cmp	r1, #0
   25698:	db02      	blt.n	256a0 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
   2569a:	f010 0f08 	tst.w	r0, #8
   2569e:	d011      	beq.n	256c4 <nrfx_usbd_ep_enable+0x70>
}
   256a0:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   256a2:	4b16      	ldr	r3, [pc, #88]	; (256fc <nrfx_usbd_ep_enable+0xa8>)
   256a4:	e7db      	b.n	2565e <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   256a6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   256aa:	40e3      	lsrs	r3, r4
   256ac:	f003 0301 	and.w	r3, r3, #1
   256b0:	e7e5      	b.n	2567e <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
   256b2:	4d11      	ldr	r5, [pc, #68]	; (256f8 <nrfx_usbd_ep_enable+0xa4>)
   256b4:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
   256b8:	2201      	movs	r2, #1
   256ba:	40a2      	lsls	r2, r4
   256bc:	4313      	orrs	r3, r2
   256be:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   256c2:	e7e7      	b.n	25694 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
   256c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   256c8:	f3ef 8511 	mrs	r5, BASEPRI
   256cc:	f383 8812 	msr	BASEPRI_MAX, r3
   256d0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   256d4:	f7ff fdf6 	bl	252c4 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
   256d8:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   256da:	2201      	movs	r2, #1
   256dc:	40a2      	lsls	r2, r4
   256de:	4908      	ldr	r1, [pc, #32]	; (25700 <nrfx_usbd_ep_enable+0xac>)
   256e0:	680b      	ldr	r3, [r1, #0]
   256e2:	ea23 0302 	bic.w	r3, r3, r2
   256e6:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
   256e8:	f385 8811 	msr	BASEPRI, r5
   256ec:	f3bf 8f6f 	isb	sy
}
   256f0:	e7d6      	b.n	256a0 <nrfx_usbd_ep_enable+0x4c>
   256f2:	bf00      	nop
   256f4:	0003504c 	.word	0x0003504c
   256f8:	40027000 	.word	0x40027000
   256fc:	00035058 	.word	0x00035058
   25700:	20004d68 	.word	0x20004d68

00025704 <nrfx_usbd_ep_stall_clear>:
{
   25704:	b510      	push	{r4, lr}
   25706:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   25708:	f010 0f80 	tst.w	r0, #128	; 0x80
   2570c:	d003      	beq.n	25716 <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   2570e:	4b06      	ldr	r3, [pc, #24]	; (25728 <nrfx_usbd_ep_stall_clear+0x24>)
   25710:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   25714:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   25716:	f7ff fd21 	bl	2515c <nrfx_usbd_ep_stall_check>
   2571a:	2800      	cmp	r0, #0
   2571c:	d0f7      	beq.n	2570e <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
   2571e:	4620      	mov	r0, r4
   25720:	f7ff fdd0 	bl	252c4 <nrfx_usbd_transfer_out_drop>
   25724:	e7f3      	b.n	2570e <nrfx_usbd_ep_stall_clear+0xa>
   25726:	bf00      	nop
   25728:	40027000 	.word	0x40027000

0002572c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   2572c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2572e:	4c11      	ldr	r4, [pc, #68]	; (25774 <_DoInit+0x48>)
   25730:	2303      	movs	r3, #3
   25732:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   25734:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   25736:	4a10      	ldr	r2, [pc, #64]	; (25778 <_DoInit+0x4c>)
   25738:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2573a:	4b10      	ldr	r3, [pc, #64]	; (2577c <_DoInit+0x50>)
   2573c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   2573e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   25742:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   25744:	2300      	movs	r3, #0
   25746:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   25748:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2574a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   2574c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   2574e:	4a0c      	ldr	r2, [pc, #48]	; (25780 <_DoInit+0x54>)
   25750:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   25752:	2210      	movs	r2, #16
   25754:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   25756:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   25758:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2575a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2575c:	4909      	ldr	r1, [pc, #36]	; (25784 <_DoInit+0x58>)
   2575e:	1de0      	adds	r0, r4, #7
   25760:	f006 ffe8 	bl	2c734 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   25764:	4908      	ldr	r1, [pc, #32]	; (25788 <_DoInit+0x5c>)
   25766:	4620      	mov	r0, r4
   25768:	f006 ffe4 	bl	2c734 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   2576c:	2320      	movs	r3, #32
   2576e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   25770:	bd10      	pop	{r4, pc}
   25772:	bf00      	nop
   25774:	20005184 	.word	0x20005184
   25778:	000350fc 	.word	0x000350fc
   2577c:	20004d84 	.word	0x20004d84
   25780:	20004d74 	.word	0x20004d74
   25784:	00035108 	.word	0x00035108
   25788:	0003510c 	.word	0x0003510c

0002578c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2578c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25790:	4604      	mov	r4, r0
   25792:	460e      	mov	r6, r1
   25794:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   25796:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2579a:	4a2d      	ldr	r2, [pc, #180]	; (25850 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   2579c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   257a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   257a2:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   257a4:	42bb      	cmp	r3, r7
   257a6:	d84c      	bhi.n	25842 <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   257a8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   257ac:	4a28      	ldr	r2, [pc, #160]	; (25850 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   257ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   257b2:	f8d2 8020 	ldr.w	r8, [r2, #32]
   257b6:	eba8 0907 	sub.w	r9, r8, r7
   257ba:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   257be:	4295      	cmp	r5, r2
   257c0:	d904      	bls.n	257cc <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   257c2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   257c4:	429d      	cmp	r5, r3
   257c6:	d916      	bls.n	257f6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   257c8:	2000      	movs	r0, #0
   257ca:	e03f      	b.n	2584c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   257cc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 25850 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   257d0:	1c63      	adds	r3, r4, #1
   257d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   257d6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   257da:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   257dc:	462a      	mov	r2, r5
   257de:	4631      	mov	r1, r6
   257e0:	4438      	add	r0, r7
   257e2:	f007 f803 	bl	2c7ec <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   257e6:	442f      	add	r7, r5
   257e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   257ec:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   257f0:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   257f2:	2001      	movs	r0, #1
   257f4:	e02a      	b.n	2584c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   257f6:	1c43      	adds	r3, r0, #1
   257f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   257fc:	4a14      	ldr	r2, [pc, #80]	; (25850 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   257fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   25802:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   25804:	464a      	mov	r2, r9
   25806:	4631      	mov	r1, r6
   25808:	4438      	add	r0, r7
   2580a:	f006 ffef 	bl	2c7ec <memcpy>
      NumBytes -= Rem;
   2580e:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   25812:	eb18 0505 	adds.w	r5, r8, r5
   25816:	d107      	bne.n	25828 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   25818:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2581c:	4b0c      	ldr	r3, [pc, #48]	; (25850 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   2581e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   25822:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   25824:	2001      	movs	r0, #1
   25826:	e011      	b.n	2584c <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   25828:	1c63      	adds	r3, r4, #1
   2582a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2582e:	4a08      	ldr	r2, [pc, #32]	; (25850 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   25830:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   25834:	462a      	mov	r2, r5
   25836:	eb06 0109 	add.w	r1, r6, r9
   2583a:	6858      	ldr	r0, [r3, #4]
   2583c:	f006 ffd6 	bl	2c7ec <memcpy>
   25840:	e7ea      	b.n	25818 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   25842:	1bdb      	subs	r3, r3, r7
   25844:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   25846:	42ab      	cmp	r3, r5
   25848:	d2c0      	bcs.n	257cc <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   2584a:	2000      	movs	r0, #0
}
   2584c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25850:	20005184 	.word	0x20005184

00025854 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   25854:	4b06      	ldr	r3, [pc, #24]	; (25870 <SEGGER_RTT_HasDataUp+0x1c>)
   25856:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2585a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   2585e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   25860:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   25864:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   25868:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   2586a:	1a80      	subs	r0, r0, r2
   2586c:	4770      	bx	lr
   2586e:	bf00      	nop
   25870:	20005184 	.word	0x20005184

00025874 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   25874:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   25876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2587a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2587e:	4802      	ldr	r0, [pc, #8]	; (25888 <zephyr_rtt_mutex_lock+0x14>)
   25880:	f000 fbf4 	bl	2606c <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   25884:	bd08      	pop	{r3, pc}
   25886:	bf00      	nop
   25888:	20000a1c 	.word	0x20000a1c

0002588c <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   2588c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   2588e:	4802      	ldr	r0, [pc, #8]	; (25898 <zephyr_rtt_mutex_unlock+0xc>)
   25890:	f000 fc70 	bl	26174 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   25894:	bd08      	pop	{r3, pc}
   25896:	bf00      	nop
   25898:	20000a1c 	.word	0x20000a1c

0002589c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   2589c:	4b03      	ldr	r3, [pc, #12]	; (258ac <z_device_state_init+0x10>)

	while (dev < __device_end) {
   2589e:	e000      	b.n	258a2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   258a0:	331c      	adds	r3, #28
	while (dev < __device_end) {
   258a2:	4a03      	ldr	r2, [pc, #12]	; (258b0 <z_device_state_init+0x14>)
   258a4:	4293      	cmp	r3, r2
   258a6:	d3fb      	bcc.n	258a0 <z_device_state_init+0x4>
	}
}
   258a8:	4770      	bx	lr
   258aa:	bf00      	nop
   258ac:	00031a34 	.word	0x00031a34
   258b0:	00031adc 	.word	0x00031adc

000258b4 <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   258b4:	4a04      	ldr	r2, [pc, #16]	; (258c8 <z_device_get_all_static+0x14>)
   258b6:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   258b8:	4b04      	ldr	r3, [pc, #16]	; (258cc <z_device_get_all_static+0x18>)
   258ba:	1a9b      	subs	r3, r3, r2
   258bc:	109b      	asrs	r3, r3, #2
}
   258be:	4804      	ldr	r0, [pc, #16]	; (258d0 <z_device_get_all_static+0x1c>)
   258c0:	fb03 f000 	mul.w	r0, r3, r0
   258c4:	4770      	bx	lr
   258c6:	bf00      	nop
   258c8:	00031a34 	.word	0x00031a34
   258cc:	00031adc 	.word	0x00031adc
   258d0:	b6db6db7 	.word	0xb6db6db7

000258d4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   258d4:	2804      	cmp	r0, #4
   258d6:	d80c      	bhi.n	258f2 <reason_to_str+0x1e>
   258d8:	e8df f000 	tbb	[pc, r0]
   258dc:	07050d03 	.word	0x07050d03
   258e0:	09          	.byte	0x09
   258e1:	00          	.byte	0x00
   258e2:	4806      	ldr	r0, [pc, #24]	; (258fc <reason_to_str+0x28>)
   258e4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   258e6:	4806      	ldr	r0, [pc, #24]	; (25900 <reason_to_str+0x2c>)
   258e8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   258ea:	4806      	ldr	r0, [pc, #24]	; (25904 <reason_to_str+0x30>)
   258ec:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   258ee:	4806      	ldr	r0, [pc, #24]	; (25908 <reason_to_str+0x34>)
   258f0:	4770      	bx	lr
	default:
		return "Unknown error";
   258f2:	4806      	ldr	r0, [pc, #24]	; (2590c <reason_to_str+0x38>)
   258f4:	4770      	bx	lr
		return "Unhandled interrupt";
   258f6:	4806      	ldr	r0, [pc, #24]	; (25910 <reason_to_str+0x3c>)
	}
}
   258f8:	4770      	bx	lr
   258fa:	bf00      	nop
   258fc:	00035118 	.word	0x00035118
   25900:	0003513c 	.word	0x0003513c
   25904:	0003514c 	.word	0x0003514c
   25908:	00035158 	.word	0x00035158
   2590c:	00035168 	.word	0x00035168
   25910:	00035128 	.word	0x00035128

00025914 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25914:	b130      	cbz	r0, 25924 <thread_name_get+0x10>
{
   25916:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25918:	f00b f932 	bl	30b80 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2591c:	b120      	cbz	r0, 25928 <thread_name_get+0x14>
   2591e:	7803      	ldrb	r3, [r0, #0]
   25920:	b123      	cbz	r3, 2592c <thread_name_get+0x18>
}
   25922:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   25924:	4802      	ldr	r0, [pc, #8]	; (25930 <thread_name_get+0x1c>)
}
   25926:	4770      	bx	lr
		thread_name = "unknown";
   25928:	4801      	ldr	r0, [pc, #4]	; (25930 <thread_name_get+0x1c>)
   2592a:	e7fa      	b.n	25922 <thread_name_get+0xe>
   2592c:	4800      	ldr	r0, [pc, #0]	; (25930 <thread_name_get+0x1c>)
	return thread_name;
   2592e:	e7f8      	b.n	25922 <thread_name_get+0xe>
   25930:	00033570 	.word	0x00033570

00025934 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25938:	b089      	sub	sp, #36	; 0x24
   2593a:	af00      	add	r7, sp, #0
   2593c:	4606      	mov	r6, r0
   2593e:	460c      	mov	r4, r1
	__asm__ volatile(
   25940:	f04f 0340 	mov.w	r3, #64	; 0x40
   25944:	f3ef 8811 	mrs	r8, BASEPRI
   25948:	f383 8812 	msr	BASEPRI_MAX, r3
   2594c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25950:	f001 fa44 	bl	26ddc <z_impl_z_current_get>
   25954:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25956:	4630      	mov	r0, r6
   25958:	f7ff ffbc 	bl	258d4 <reason_to_str>
   2595c:	46e9      	mov	r9, sp
   2595e:	2301      	movs	r3, #1
   25960:	713b      	strb	r3, [r7, #4]
   25962:	2303      	movs	r3, #3
   25964:	717b      	strb	r3, [r7, #5]
   25966:	b08a      	sub	sp, #40	; 0x28
   25968:	46ec      	mov	ip, sp
   2596a:	f11c 0210 	adds.w	r2, ip, #16
   2596e:	d021      	beq.n	259b4 <z_fatal_error+0x80>
   25970:	f04f 0e16 	mov.w	lr, #22
   25974:	b152      	cbz	r2, 2598c <z_fatal_error+0x58>
   25976:	4673      	mov	r3, lr
   25978:	f1be 0f04 	cmp.w	lr, #4
   2597c:	dd02      	ble.n	25984 <z_fatal_error+0x50>
   2597e:	4972      	ldr	r1, [pc, #456]	; (25b48 <z_fatal_error+0x214>)
   25980:	f8cc 1014 	str.w	r1, [ip, #20]
   25984:	2b08      	cmp	r3, #8
   25986:	dd01      	ble.n	2598c <z_fatal_error+0x58>
   25988:	f8cc 6018 	str.w	r6, [ip, #24]
   2598c:	2301      	movs	r3, #1
   2598e:	703b      	strb	r3, [r7, #0]
   25990:	2303      	movs	r3, #3
   25992:	707b      	strb	r3, [r7, #1]
   25994:	b1da      	cbz	r2, 259ce <z_fatal_error+0x9a>
   25996:	4673      	mov	r3, lr
   25998:	f1be 0f0c 	cmp.w	lr, #12
   2599c:	dd01      	ble.n	259a2 <z_fatal_error+0x6e>
   2599e:	f8cc 001c 	str.w	r0, [ip, #28]
   259a2:	2b10      	cmp	r3, #16
   259a4:	dd02      	ble.n	259ac <z_fatal_error+0x78>
   259a6:	2300      	movs	r3, #0
   259a8:	f8cc 3020 	str.w	r3, [ip, #32]
   259ac:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   259b0:	2100      	movs	r1, #0
   259b2:	e00a      	b.n	259ca <z_fatal_error+0x96>
   259b4:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   259b8:	e7dc      	b.n	25974 <z_fatal_error+0x40>
   259ba:	f101 0020 	add.w	r0, r1, #32
   259be:	4438      	add	r0, r7
   259c0:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   259c4:	f803 0b01 	strb.w	r0, [r3], #1
   259c8:	3101      	adds	r1, #1
   259ca:	2901      	cmp	r1, #1
   259cc:	d9f5      	bls.n	259ba <z_fatal_error+0x86>
   259ce:	f1be 0f15 	cmp.w	lr, #21
   259d2:	dd50      	ble.n	25a76 <z_fatal_error+0x142>
   259d4:	2316      	movs	r3, #22
   259d6:	b14a      	cbz	r2, 259ec <z_fatal_error+0xb8>
   259d8:	2105      	movs	r1, #5
   259da:	7139      	strb	r1, [r7, #4]
   259dc:	2100      	movs	r1, #0
   259de:	7179      	strb	r1, [r7, #5]
   259e0:	71b9      	strb	r1, [r7, #6]
   259e2:	2101      	movs	r1, #1
   259e4:	71f9      	strb	r1, [r7, #7]
   259e6:	6878      	ldr	r0, [r7, #4]
   259e8:	f8cc 0010 	str.w	r0, [ip, #16]
   259ec:	2100      	movs	r1, #0
   259ee:	f36f 0100 	bfc	r1, #0, #1
   259f2:	f36f 0141 	bfc	r1, #1, #1
   259f6:	f36f 0182 	bfc	r1, #2, #1
   259fa:	f36f 01c5 	bfc	r1, #3, #3
   259fe:	2001      	movs	r0, #1
   25a00:	f360 1188 	bfi	r1, r0, #6, #3
   25a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
   25a08:	f363 2153 	bfi	r1, r3, #9, #11
   25a0c:	f36f 511f 	bfc	r1, #20, #12
   25a10:	2300      	movs	r3, #0
   25a12:	484e      	ldr	r0, [pc, #312]	; (25b4c <z_fatal_error+0x218>)
   25a14:	f7ee fb72 	bl	140fc <z_impl_z_log_msg_static_create>
   25a18:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25a1a:	b11c      	cbz	r4, 25a24 <z_fatal_error+0xf0>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   25a1c:	69e3      	ldr	r3, [r4, #28]
   25a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25a22:	bb5b      	cbnz	r3, 25a7c <z_fatal_error+0x148>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   25a24:	4628      	mov	r0, r5
   25a26:	f7ff ff75 	bl	25914 <thread_name_get>
   25a2a:	46e9      	mov	r9, sp
   25a2c:	2301      	movs	r3, #1
   25a2e:	713b      	strb	r3, [r7, #4]
   25a30:	2303      	movs	r3, #3
   25a32:	717b      	strb	r3, [r7, #5]
   25a34:	b08a      	sub	sp, #40	; 0x28
   25a36:	46ec      	mov	ip, sp
   25a38:	f11c 0210 	adds.w	r2, ip, #16
   25a3c:	d03f      	beq.n	25abe <z_fatal_error+0x18a>
   25a3e:	f04f 0e12 	mov.w	lr, #18
   25a42:	b152      	cbz	r2, 25a5a <z_fatal_error+0x126>
   25a44:	4673      	mov	r3, lr
   25a46:	f1be 0f04 	cmp.w	lr, #4
   25a4a:	dd02      	ble.n	25a52 <z_fatal_error+0x11e>
   25a4c:	4940      	ldr	r1, [pc, #256]	; (25b50 <z_fatal_error+0x21c>)
   25a4e:	f8cc 1014 	str.w	r1, [ip, #20]
   25a52:	2b08      	cmp	r3, #8
   25a54:	dd01      	ble.n	25a5a <z_fatal_error+0x126>
   25a56:	f8cc 5018 	str.w	r5, [ip, #24]
   25a5a:	2301      	movs	r3, #1
   25a5c:	703b      	strb	r3, [r7, #0]
   25a5e:	2303      	movs	r3, #3
   25a60:	707b      	strb	r3, [r7, #1]
   25a62:	b3ca      	cbz	r2, 25ad8 <z_fatal_error+0x1a4>
   25a64:	f1be 0f0c 	cmp.w	lr, #12
   25a68:	dd01      	ble.n	25a6e <z_fatal_error+0x13a>
   25a6a:	f8cc 001c 	str.w	r0, [ip, #28]
   25a6e:	f10c 0320 	add.w	r3, ip, #32
   25a72:	2100      	movs	r1, #0
   25a74:	e02e      	b.n	25ad4 <z_fatal_error+0x1a0>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25a76:	f06f 031b 	mvn.w	r3, #27
   25a7a:	e7ac      	b.n	259d6 <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   25a7c:	4b35      	ldr	r3, [pc, #212]	; (25b54 <z_fatal_error+0x220>)
   25a7e:	61fb      	str	r3, [r7, #28]
   25a80:	2302      	movs	r3, #2
   25a82:	713b      	strb	r3, [r7, #4]
   25a84:	2300      	movs	r3, #0
   25a86:	717b      	strb	r3, [r7, #5]
   25a88:	71bb      	strb	r3, [r7, #6]
   25a8a:	71fb      	strb	r3, [r7, #7]
   25a8c:	687a      	ldr	r2, [r7, #4]
   25a8e:	61ba      	str	r2, [r7, #24]
   25a90:	4619      	mov	r1, r3
   25a92:	f363 0100 	bfi	r1, r3, #0, #1
   25a96:	f363 0141 	bfi	r1, r3, #1, #1
   25a9a:	f363 0182 	bfi	r1, r3, #2, #1
   25a9e:	f363 01c5 	bfi	r1, r3, #3, #3
   25aa2:	2201      	movs	r2, #1
   25aa4:	f362 1188 	bfi	r1, r2, #6, #3
   25aa8:	2208      	movs	r2, #8
   25aaa:	f362 2153 	bfi	r1, r2, #9, #11
   25aae:	f363 511f 	bfi	r1, r3, #20, #12
   25ab2:	f107 0218 	add.w	r2, r7, #24
   25ab6:	4825      	ldr	r0, [pc, #148]	; (25b4c <z_fatal_error+0x218>)
   25ab8:	f7ee fb20 	bl	140fc <z_impl_z_log_msg_static_create>
   25abc:	e7b2      	b.n	25a24 <z_fatal_error+0xf0>
	LOG_ERR("Current thread: %p (%s)", thread,
   25abe:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   25ac2:	e7be      	b.n	25a42 <z_fatal_error+0x10e>
   25ac4:	f101 0020 	add.w	r0, r1, #32
   25ac8:	4438      	add	r0, r7
   25aca:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   25ace:	f803 0b01 	strb.w	r0, [r3], #1
   25ad2:	3101      	adds	r1, #1
   25ad4:	2901      	cmp	r1, #1
   25ad6:	d9f5      	bls.n	25ac4 <z_fatal_error+0x190>
   25ad8:	f1be 0f11 	cmp.w	lr, #17
   25adc:	dd31      	ble.n	25b42 <z_fatal_error+0x20e>
   25ade:	2312      	movs	r3, #18
   25ae0:	b14a      	cbz	r2, 25af6 <z_fatal_error+0x1c2>
   25ae2:	2104      	movs	r1, #4
   25ae4:	7139      	strb	r1, [r7, #4]
   25ae6:	2100      	movs	r1, #0
   25ae8:	7179      	strb	r1, [r7, #5]
   25aea:	71b9      	strb	r1, [r7, #6]
   25aec:	2101      	movs	r1, #1
   25aee:	71f9      	strb	r1, [r7, #7]
   25af0:	6878      	ldr	r0, [r7, #4]
   25af2:	f8cc 0010 	str.w	r0, [ip, #16]
   25af6:	2100      	movs	r1, #0
   25af8:	f36f 0100 	bfc	r1, #0, #1
   25afc:	f36f 0141 	bfc	r1, #1, #1
   25b00:	f36f 0182 	bfc	r1, #2, #1
   25b04:	f36f 01c5 	bfc	r1, #3, #3
   25b08:	2001      	movs	r0, #1
   25b0a:	f360 1188 	bfi	r1, r0, #6, #3
   25b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   25b12:	f363 2153 	bfi	r1, r3, #9, #11
   25b16:	f36f 511f 	bfc	r1, #20, #12
   25b1a:	2300      	movs	r3, #0
   25b1c:	480b      	ldr	r0, [pc, #44]	; (25b4c <z_fatal_error+0x218>)
   25b1e:	f7ee faed 	bl	140fc <z_impl_z_log_msg_static_create>
   25b22:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25b24:	4621      	mov	r1, r4
   25b26:	4630      	mov	r0, r6
   25b28:	f7fd fb9c 	bl	23264 <k_sys_fatal_error_handler>
	__asm__ volatile(
   25b2c:	f388 8811 	msr	BASEPRI, r8
   25b30:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25b34:	4628      	mov	r0, r5
   25b36:	f7f2 feb9 	bl	188ac <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25b3a:	3724      	adds	r7, #36	; 0x24
   25b3c:	46bd      	mov	sp, r7
   25b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   25b42:	f06f 031b 	mvn.w	r3, #27
   25b46:	e7cb      	b.n	25ae0 <z_fatal_error+0x1ac>
   25b48:	00035178 	.word	0x00035178
   25b4c:	00031d84 	.word	0x00031d84
   25b50:	000351c4 	.word	0x000351c4
   25b54:	000351a0 	.word	0x000351a0

00025b58 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   25b58:	b570      	push	{r4, r5, r6, lr}
   25b5a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25b5c:	4b12      	ldr	r3, [pc, #72]	; (25ba8 <z_sys_init_run_level+0x50>)
   25b5e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   25b62:	e009      	b.n	25b78 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   25b64:	4243      	negs	r3, r0
   25b66:	e017      	b.n	25b98 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   25b68:	68ea      	ldr	r2, [r5, #12]
   25b6a:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
   25b6c:	68ea      	ldr	r2, [r5, #12]
   25b6e:	7853      	ldrb	r3, [r2, #1]
   25b70:	f043 0301 	orr.w	r3, r3, #1
   25b74:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25b76:	3408      	adds	r4, #8
   25b78:	1c73      	adds	r3, r6, #1
   25b7a:	4a0b      	ldr	r2, [pc, #44]	; (25ba8 <z_sys_init_run_level+0x50>)
   25b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   25b80:	42a3      	cmp	r3, r4
   25b82:	d910      	bls.n	25ba6 <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
   25b84:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
   25b86:	b15d      	cbz	r5, 25ba0 <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
   25b88:	6823      	ldr	r3, [r4, #0]
   25b8a:	4628      	mov	r0, r5
   25b8c:	4798      	blx	r3
			if (rc != 0) {
   25b8e:	4603      	mov	r3, r0
   25b90:	2800      	cmp	r0, #0
   25b92:	d0eb      	beq.n	25b6c <z_sys_init_run_level+0x14>
				if (rc < 0) {
   25b94:	2800      	cmp	r0, #0
   25b96:	dbe5      	blt.n	25b64 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   25b98:	2bff      	cmp	r3, #255	; 0xff
   25b9a:	dde5      	ble.n	25b68 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   25b9c:	23ff      	movs	r3, #255	; 0xff
   25b9e:	e7e3      	b.n	25b68 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
   25ba0:	6823      	ldr	r3, [r4, #0]
   25ba2:	4798      	blx	r3
   25ba4:	e7e7      	b.n	25b76 <z_sys_init_run_level+0x1e>
		}
	}
}
   25ba6:	bd70      	pop	{r4, r5, r6, pc}
   25ba8:	000351ec 	.word	0x000351ec

00025bac <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   25bac:	b510      	push	{r4, lr}
   25bae:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   25bb0:	23b8      	movs	r3, #184	; 0xb8
   25bb2:	4c11      	ldr	r4, [pc, #68]	; (25bf8 <init_idle_thread+0x4c>)
   25bb4:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   25bb8:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25bbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   25bc0:	4b0e      	ldr	r3, [pc, #56]	; (25bfc <init_idle_thread+0x50>)
   25bc2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
   25bc6:	4a0e      	ldr	r2, [pc, #56]	; (25c00 <init_idle_thread+0x54>)
   25bc8:	9205      	str	r2, [sp, #20]
   25bca:	2201      	movs	r2, #1
   25bcc:	9204      	str	r2, [sp, #16]
   25bce:	220f      	movs	r2, #15
   25bd0:	9203      	str	r2, [sp, #12]
   25bd2:	2200      	movs	r2, #0
   25bd4:	9202      	str	r2, [sp, #8]
   25bd6:	9201      	str	r2, [sp, #4]
   25bd8:	9300      	str	r3, [sp, #0]
   25bda:	4b0a      	ldr	r3, [pc, #40]	; (25c04 <init_idle_thread+0x58>)
   25bdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   25be0:	4909      	ldr	r1, [pc, #36]	; (25c08 <init_idle_thread+0x5c>)
   25be2:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   25be6:	4620      	mov	r0, r4
   25be8:	f000 f974 	bl	25ed4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25bec:	7b63      	ldrb	r3, [r4, #13]
   25bee:	f023 0304 	bic.w	r3, r3, #4
   25bf2:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   25bf4:	b006      	add	sp, #24
   25bf6:	bd10      	pop	{r4, pc}
   25bf8:	20002df0 	.word	0x20002df0
   25bfc:	2000522c 	.word	0x2000522c
   25c00:	000351dc 	.word	0x000351dc
   25c04:	00026031 	.word	0x00026031
   25c08:	200089c0 	.word	0x200089c0

00025c0c <bg_thread_main>:
{
   25c0c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   25c0e:	4b0a      	ldr	r3, [pc, #40]	; (25c38 <bg_thread_main+0x2c>)
   25c10:	2201      	movs	r2, #1
   25c12:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   25c14:	2003      	movs	r0, #3
   25c16:	f7ff ff9f 	bl	25b58 <z_sys_init_run_level>
	boot_banner();
   25c1a:	f001 fbbd 	bl	27398 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   25c1e:	2004      	movs	r0, #4
   25c20:	f7ff ff9a 	bl	25b58 <z_sys_init_run_level>
	z_init_static_threads();
   25c24:	f000 f9ba 	bl	25f9c <z_init_static_threads>
	(void)main();
   25c28:	f7ea fde4 	bl	107f4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25c2c:	4a03      	ldr	r2, [pc, #12]	; (25c3c <bg_thread_main+0x30>)
   25c2e:	7b13      	ldrb	r3, [r2, #12]
   25c30:	f023 0301 	bic.w	r3, r3, #1
   25c34:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   25c36:	bd08      	pop	{r3, pc}
   25c38:	20005d4a 	.word	0x20005d4a
   25c3c:	20002ea8 	.word	0x20002ea8

00025c40 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   25c40:	b508      	push	{r3, lr}
   25c42:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25c44:	4a01      	ldr	r2, [pc, #4]	; (25c4c <switch_to_main_thread+0xc>)
   25c46:	4802      	ldr	r0, [pc, #8]	; (25c50 <switch_to_main_thread+0x10>)
   25c48:	f7f1 feae 	bl	179a8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25c4c:	00025c0d 	.word	0x00025c0d
   25c50:	20002ea8 	.word	0x20002ea8

00025c54 <z_bss_zero>:
{
   25c54:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   25c56:	4803      	ldr	r0, [pc, #12]	; (25c64 <z_bss_zero+0x10>)
   25c58:	4a03      	ldr	r2, [pc, #12]	; (25c68 <z_bss_zero+0x14>)
   25c5a:	1a12      	subs	r2, r2, r0
   25c5c:	2100      	movs	r1, #0
   25c5e:	f00a fe9f 	bl	309a0 <z_early_memset>
}
   25c62:	bd08      	pop	{r3, pc}
   25c64:	20000d58 	.word	0x20000d58
   25c68:	20005d4c 	.word	0x20005d4c

00025c6c <z_init_cpu>:
{
   25c6c:	b510      	push	{r4, lr}
   25c6e:	4604      	mov	r4, r0
	init_idle_thread(id);
   25c70:	f7ff ff9c 	bl	25bac <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   25c74:	23b8      	movs	r3, #184	; 0xb8
   25c76:	490b      	ldr	r1, [pc, #44]	; (25ca4 <z_init_cpu+0x38>)
   25c78:	fb03 1104 	mla	r1, r3, r4, r1
   25c7c:	4a0a      	ldr	r2, [pc, #40]	; (25ca8 <z_init_cpu+0x3c>)
   25c7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   25c82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   25c86:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   25c88:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25c8a:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   25c8e:	4b07      	ldr	r3, [pc, #28]	; (25cac <z_init_cpu+0x40>)
   25c90:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   25c94:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   25c98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   25c9c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   25ca0:	6053      	str	r3, [r2, #4]
}
   25ca2:	bd10      	pop	{r4, pc}
   25ca4:	20002df0 	.word	0x20002df0
   25ca8:	2000522c 	.word	0x2000522c
   25cac:	20008180 	.word	0x20008180

00025cb0 <prepare_multithreading>:
{
   25cb0:	b570      	push	{r4, r5, r6, lr}
   25cb2:	b086      	sub	sp, #24
	z_sched_init();
   25cb4:	f000 ff98 	bl	26be8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   25cb8:	4d10      	ldr	r5, [pc, #64]	; (25cfc <prepare_multithreading+0x4c>)
   25cba:	4b11      	ldr	r3, [pc, #68]	; (25d00 <prepare_multithreading+0x50>)
   25cbc:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25cbe:	4b11      	ldr	r3, [pc, #68]	; (25d04 <prepare_multithreading+0x54>)
   25cc0:	9305      	str	r3, [sp, #20]
   25cc2:	2301      	movs	r3, #1
   25cc4:	9304      	str	r3, [sp, #16]
   25cc6:	2400      	movs	r4, #0
   25cc8:	9403      	str	r4, [sp, #12]
   25cca:	9402      	str	r4, [sp, #8]
   25ccc:	9401      	str	r4, [sp, #4]
   25cce:	9400      	str	r4, [sp, #0]
   25cd0:	4b0d      	ldr	r3, [pc, #52]	; (25d08 <prepare_multithreading+0x58>)
   25cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25cd6:	490d      	ldr	r1, [pc, #52]	; (25d0c <prepare_multithreading+0x5c>)
   25cd8:	4628      	mov	r0, r5
   25cda:	f000 f8fb 	bl	25ed4 <z_setup_new_thread>
   25cde:	4606      	mov	r6, r0
   25ce0:	7b6b      	ldrb	r3, [r5, #13]
   25ce2:	f023 0304 	bic.w	r3, r3, #4
   25ce6:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   25ce8:	4628      	mov	r0, r5
   25cea:	f00b fa7b 	bl	311e4 <z_ready_thread>
	z_init_cpu(0);
   25cee:	4620      	mov	r0, r4
   25cf0:	f7ff ffbc 	bl	25c6c <z_init_cpu>
}
   25cf4:	4630      	mov	r0, r6
   25cf6:	b006      	add	sp, #24
   25cf8:	bd70      	pop	{r4, r5, r6, pc}
   25cfa:	bf00      	nop
   25cfc:	20002ea8 	.word	0x20002ea8
   25d00:	2000522c 	.word	0x2000522c
   25d04:	000351e4 	.word	0x000351e4
   25d08:	00025c0d 	.word	0x00025c0d
   25d0c:	20008b40 	.word	0x20008b40

00025d10 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   25d10:	b500      	push	{lr}
   25d12:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   25d14:	2000      	movs	r0, #0
   25d16:	f7ff ff1f 	bl	25b58 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   25d1a:	4b1f      	ldr	r3, [pc, #124]	; (25d98 <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   25d1c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   25d20:	4c1e      	ldr	r4, [pc, #120]	; (25d9c <z_cstart+0x8c>)
   25d22:	6963      	ldr	r3, [r4, #20]
   25d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   25d28:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25d2a:	23e0      	movs	r3, #224	; 0xe0
   25d2c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   25d30:	2320      	movs	r3, #32
   25d32:	77e3      	strb	r3, [r4, #31]
   25d34:	2500      	movs	r5, #0
   25d36:	7625      	strb	r5, [r4, #24]
   25d38:	7665      	strb	r5, [r4, #25]
   25d3a:	76a5      	strb	r5, [r4, #26]
   25d3c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   25d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25d42:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   25d46:	6263      	str	r3, [r4, #36]	; 0x24
   25d48:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   25d4c:	f7f2 fd14 	bl	18778 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   25d50:	f7f1 fbdc 	bl	1750c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25d58:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   25d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   25d5c:	f7f2 fee4 	bl	18b28 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   25d60:	f7f2 fdbe 	bl	188e0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   25d64:	f7ee f83a 	bl	13ddc <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   25d68:	2401      	movs	r4, #1
   25d6a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   25d6e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   25d72:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   25d74:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   25d76:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   25d78:	4b09      	ldr	r3, [pc, #36]	; (25da0 <z_cstart+0x90>)
   25d7a:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25d7e:	f7ff fd8d 	bl	2589c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   25d82:	4620      	mov	r0, r4
   25d84:	f7ff fee8 	bl	25b58 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   25d88:	2002      	movs	r0, #2
   25d8a:	f7ff fee5 	bl	25b58 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   25d8e:	f7ff ff8f 	bl	25cb0 <prepare_multithreading>
   25d92:	f7ff ff55 	bl	25c40 <switch_to_main_thread>
   25d96:	bf00      	nop
   25d98:	200089c0 	.word	0x200089c0
   25d9c:	e000ed00 	.word	0xe000ed00
   25da0:	2000522c 	.word	0x2000522c

00025da4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   25da4:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25da6:	4c06      	ldr	r4, [pc, #24]	; (25dc0 <statics_init+0x1c>)
   25da8:	e005      	b.n	25db6 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25daa:	68a2      	ldr	r2, [r4, #8]
   25dac:	6861      	ldr	r1, [r4, #4]
   25dae:	4620      	mov	r0, r4
   25db0:	f00a fdfe 	bl	309b0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25db4:	3414      	adds	r4, #20
   25db6:	4b03      	ldr	r3, [pc, #12]	; (25dc4 <statics_init+0x20>)
   25db8:	429c      	cmp	r4, r3
   25dba:	d3f6      	bcc.n	25daa <statics_init+0x6>
		}
	}
	return 0;
}
   25dbc:	2000      	movs	r0, #0
   25dbe:	bd10      	pop	{r4, pc}
   25dc0:	200009cc 	.word	0x200009cc
   25dc4:	200009cc 	.word	0x200009cc

00025dc8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   25dc8:	b510      	push	{r4, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25dca:	4c06      	ldr	r4, [pc, #24]	; (25de4 <init_mem_slab_module+0x1c>)
	int rc = 0;
   25dcc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25dce:	e000      	b.n	25dd2 <init_mem_slab_module+0xa>
   25dd0:	341c      	adds	r4, #28
   25dd2:	4b05      	ldr	r3, [pc, #20]	; (25de8 <init_mem_slab_module+0x20>)
   25dd4:	429c      	cmp	r4, r3
   25dd6:	d204      	bcs.n	25de2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   25dd8:	4620      	mov	r0, r4
   25dda:	f00a fe64 	bl	30aa6 <create_free_list>
		if (rc < 0) {
   25dde:	2800      	cmp	r0, #0
   25de0:	daf6      	bge.n	25dd0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   25de2:	bd10      	pop	{r4, pc}
   25de4:	2000095c 	.word	0x2000095c
   25de8:	200009cc 	.word	0x200009cc

00025dec <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   25dec:	b530      	push	{r4, r5, lr}
   25dee:	b083      	sub	sp, #12
   25df0:	460d      	mov	r5, r1
	__asm__ volatile(
   25df2:	f04f 0140 	mov.w	r1, #64	; 0x40
   25df6:	f3ef 8c11 	mrs	ip, BASEPRI
   25dfa:	f381 8812 	msr	BASEPRI_MAX, r1
   25dfe:	f3bf 8f6f 	isb	sy
   25e02:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   25e04:	6944      	ldr	r4, [r0, #20]
   25e06:	b164      	cbz	r4, 25e22 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   25e08:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   25e0a:	6823      	ldr	r3, [r4, #0]
   25e0c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   25e0e:	6983      	ldr	r3, [r0, #24]
   25e10:	3301      	adds	r3, #1
   25e12:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   25e14:	2000      	movs	r0, #0
	__asm__ volatile(
   25e16:	f381 8811 	msr	BASEPRI, r1
   25e1a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   25e1e:	b003      	add	sp, #12
   25e20:	bd30      	pop	{r4, r5, pc}
   25e22:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   25e26:	ea53 0402 	orrs.w	r4, r3, r2
   25e2a:	d104      	bne.n	25e36 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   25e2c:	2300      	movs	r3, #0
   25e2e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   25e30:	f06f 000b 	mvn.w	r0, #11
   25e34:	e7ef      	b.n	25e16 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   25e36:	9200      	str	r2, [sp, #0]
   25e38:	9301      	str	r3, [sp, #4]
   25e3a:	4602      	mov	r2, r0
   25e3c:	4670      	mov	r0, lr
   25e3e:	f000 fdcd 	bl	269dc <z_pend_curr>
		if (result == 0) {
   25e42:	2800      	cmp	r0, #0
   25e44:	d1eb      	bne.n	25e1e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   25e46:	4b02      	ldr	r3, [pc, #8]	; (25e50 <k_mem_slab_alloc+0x64>)
   25e48:	689b      	ldr	r3, [r3, #8]
   25e4a:	695b      	ldr	r3, [r3, #20]
   25e4c:	602b      	str	r3, [r5, #0]
		return result;
   25e4e:	e7e6      	b.n	25e1e <k_mem_slab_alloc+0x32>
   25e50:	2000522c 	.word	0x2000522c

00025e54 <z_thread_monitor_exit>:
	__asm__ volatile(
   25e54:	f04f 0340 	mov.w	r3, #64	; 0x40
   25e58:	f3ef 8111 	mrs	r1, BASEPRI
   25e5c:	f383 8812 	msr	BASEPRI_MAX, r3
   25e60:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   25e64:	4b0a      	ldr	r3, [pc, #40]	; (25e90 <z_thread_monitor_exit+0x3c>)
   25e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25e68:	4283      	cmp	r3, r0
   25e6a:	d104      	bne.n	25e76 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   25e6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   25e6e:	4b08      	ldr	r3, [pc, #32]	; (25e90 <z_thread_monitor_exit+0x3c>)
   25e70:	625a      	str	r2, [r3, #36]	; 0x24
   25e72:	e007      	b.n	25e84 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   25e74:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   25e76:	b113      	cbz	r3, 25e7e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   25e78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   25e7a:	4282      	cmp	r2, r0
   25e7c:	d1fa      	bne.n	25e74 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   25e7e:	b10b      	cbz	r3, 25e84 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   25e80:	6f42      	ldr	r2, [r0, #116]	; 0x74
   25e82:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   25e84:	f381 8811 	msr	BASEPRI, r1
   25e88:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   25e8c:	4770      	bx	lr
   25e8e:	bf00      	nop
   25e90:	2000522c 	.word	0x2000522c

00025e94 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   25e94:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   25e96:	4604      	mov	r4, r0
   25e98:	b140      	cbz	r0, 25eac <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   25e9a:	221f      	movs	r2, #31
   25e9c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   25ea0:	f006 fc52 	bl	2c748 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   25ea4:	2000      	movs	r0, #0
   25ea6:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   25eaa:	bd10      	pop	{r4, pc}
		thread = _current;
   25eac:	4b01      	ldr	r3, [pc, #4]	; (25eb4 <z_impl_k_thread_name_set+0x20>)
   25eae:	689c      	ldr	r4, [r3, #8]
   25eb0:	e7f3      	b.n	25e9a <z_impl_k_thread_name_set+0x6>
   25eb2:	bf00      	nop
   25eb4:	2000522c 	.word	0x2000522c

00025eb8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   25eb8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25eba:	ea53 0102 	orrs.w	r1, r3, r2
   25ebe:	d102      	bne.n	25ec6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   25ec0:	f00a fe60 	bl	30b84 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   25ec4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25ec6:	4902      	ldr	r1, [pc, #8]	; (25ed0 <schedule_new_thread+0x18>)
   25ec8:	3018      	adds	r0, #24
   25eca:	f001 f815 	bl	26ef8 <z_add_timeout>
   25ece:	e7f9      	b.n	25ec4 <schedule_new_thread+0xc>
   25ed0:	00031271 	.word	0x00031271

00025ed4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ed8:	b085      	sub	sp, #20
   25eda:	4604      	mov	r4, r0
   25edc:	460f      	mov	r7, r1
   25ede:	4615      	mov	r5, r2
   25ee0:	461e      	mov	r6, r3
   25ee2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   25ee6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   25eea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   25eee:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25ef2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   25ef6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   25ef8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   25efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25efc:	2204      	movs	r2, #4
   25efe:	9911      	ldr	r1, [sp, #68]	; 0x44
   25f00:	f00a fe44 	bl	30b8c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   25f04:	462a      	mov	r2, r5
   25f06:	4639      	mov	r1, r7
   25f08:	4620      	mov	r0, r4
   25f0a:	f00a fe20 	bl	30b4e <setup_thread_stack>
   25f0e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25f10:	f8cd 8008 	str.w	r8, [sp, #8]
   25f14:	f8cd 9004 	str.w	r9, [sp, #4]
   25f18:	f8cd a000 	str.w	sl, [sp]
   25f1c:	4633      	mov	r3, r6
   25f1e:	4602      	mov	r2, r0
   25f20:	4639      	mov	r1, r7
   25f22:	4620      	mov	r0, r4
   25f24:	f7f1 fcfa 	bl	1791c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   25f28:	2300      	movs	r3, #0
   25f2a:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   25f2c:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   25f2e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   25f32:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   25f36:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   25f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25f3e:	f3ef 8211 	mrs	r2, BASEPRI
   25f42:	f383 8812 	msr	BASEPRI_MAX, r3
   25f46:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   25f4a:	4b13      	ldr	r3, [pc, #76]	; (25f98 <z_setup_new_thread+0xc4>)
   25f4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   25f4e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   25f50:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
   25f52:	f382 8811 	msr	BASEPRI, r2
   25f56:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   25f5a:	f1bb 0f00 	cmp.w	fp, #0
   25f5e:	d013      	beq.n	25f88 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   25f60:	221f      	movs	r2, #31
   25f62:	4659      	mov	r1, fp
   25f64:	f104 0078 	add.w	r0, r4, #120	; 0x78
   25f68:	f006 fbee 	bl	2c748 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   25f6c:	2300      	movs	r3, #0
   25f6e:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   25f72:	4b09      	ldr	r3, [pc, #36]	; (25f98 <z_setup_new_thread+0xc4>)
   25f74:	689b      	ldr	r3, [r3, #8]
   25f76:	b15b      	cbz	r3, 25f90 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   25f78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   25f7c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   25f80:	4628      	mov	r0, r5
   25f82:	b005      	add	sp, #20
   25f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   25f88:	2300      	movs	r3, #0
   25f8a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   25f8e:	e7f0      	b.n	25f72 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   25f90:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   25f94:	e7f4      	b.n	25f80 <z_setup_new_thread+0xac>
   25f96:	bf00      	nop
   25f98:	2000522c 	.word	0x2000522c

00025f9c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   25f9c:	b530      	push	{r4, r5, lr}
   25f9e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   25fa0:	4c21      	ldr	r4, [pc, #132]	; (26028 <z_init_static_threads+0x8c>)
   25fa2:	e014      	b.n	25fce <z_init_static_threads+0x32>
		z_setup_new_thread(
   25fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25fa6:	9305      	str	r3, [sp, #20]
   25fa8:	6a23      	ldr	r3, [r4, #32]
   25faa:	9304      	str	r3, [sp, #16]
   25fac:	69e3      	ldr	r3, [r4, #28]
   25fae:	9303      	str	r3, [sp, #12]
   25fb0:	69a3      	ldr	r3, [r4, #24]
   25fb2:	9302      	str	r3, [sp, #8]
   25fb4:	6963      	ldr	r3, [r4, #20]
   25fb6:	9301      	str	r3, [sp, #4]
   25fb8:	6923      	ldr	r3, [r4, #16]
   25fba:	9300      	str	r3, [sp, #0]
   25fbc:	68e3      	ldr	r3, [r4, #12]
   25fbe:	68a2      	ldr	r2, [r4, #8]
   25fc0:	6861      	ldr	r1, [r4, #4]
   25fc2:	6820      	ldr	r0, [r4, #0]
   25fc4:	f7ff ff86 	bl	25ed4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   25fc8:	6823      	ldr	r3, [r4, #0]
   25fca:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   25fcc:	342c      	adds	r4, #44	; 0x2c
   25fce:	4b17      	ldr	r3, [pc, #92]	; (2602c <z_init_static_threads+0x90>)
   25fd0:	429c      	cmp	r4, r3
   25fd2:	d3e7      	bcc.n	25fa4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   25fd4:	f000 fbca 	bl	2676c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   25fd8:	4c13      	ldr	r4, [pc, #76]	; (26028 <z_init_static_threads+0x8c>)
   25fda:	e000      	b.n	25fde <z_init_static_threads+0x42>
   25fdc:	342c      	adds	r4, #44	; 0x2c
   25fde:	4b13      	ldr	r3, [pc, #76]	; (2602c <z_init_static_threads+0x90>)
   25fe0:	429c      	cmp	r4, r3
   25fe2:	d21c      	bcs.n	2601e <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25fe4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   25fe6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   25fea:	d0f7      	beq.n	25fdc <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   25fec:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   25fee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   25ff2:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
   25ff4:	03c9      	lsls	r1, r1, #15
   25ff6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   25ffa:	03c0      	lsls	r0, r0, #15
   25ffc:	f240 33e7 	movw	r3, #999	; 0x3e7
   26000:	18c0      	adds	r0, r0, r3
   26002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26006:	f04f 0300 	mov.w	r3, #0
   2600a:	f141 0100 	adc.w	r1, r1, #0
   2600e:	f7da f877 	bl	100 <__aeabi_uldivmod>
   26012:	4602      	mov	r2, r0
   26014:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   26016:	4628      	mov	r0, r5
   26018:	f7ff ff4e 	bl	25eb8 <schedule_new_thread>
   2601c:	e7de      	b.n	25fdc <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   2601e:	f000 fd91 	bl	26b44 <k_sched_unlock>
}
   26022:	b007      	add	sp, #28
   26024:	bd30      	pop	{r4, r5, pc}
   26026:	bf00      	nop
   26028:	00031c5c 	.word	0x00031c5c
   2602c:	00031c5c 	.word	0x00031c5c

00026030 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   26030:	b508      	push	{r3, lr}
   26032:	e001      	b.n	26038 <idle+0x8>
	arch_cpu_idle();
   26034:	f7f1 fa70 	bl	17518 <arch_cpu_idle>
	__asm__ volatile(
   26038:	f04f 0240 	mov.w	r2, #64	; 0x40
   2603c:	f3ef 8311 	mrs	r3, BASEPRI
   26040:	f382 8812 	msr	BASEPRI_MAX, r2
   26044:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   26048:	f00b fa38 	bl	314bc <z_get_next_timeout_expiry>
   2604c:	4b05      	ldr	r3, [pc, #20]	; (26064 <idle+0x34>)
   2604e:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
   26050:	4b05      	ldr	r3, [pc, #20]	; (26068 <idle+0x38>)
   26052:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   26054:	2b00      	cmp	r3, #0
   26056:	d0ed      	beq.n	26034 <idle+0x4>
   26058:	f7ee fcdc 	bl	14a14 <pm_system_suspend>
   2605c:	2800      	cmp	r0, #0
   2605e:	d1eb      	bne.n	26038 <idle+0x8>
   26060:	e7e8      	b.n	26034 <idle+0x4>
   26062:	bf00      	nop
   26064:	2000522c 	.word	0x2000522c
   26068:	20005d4a 	.word	0x20005d4a

0002606c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26070:	b082      	sub	sp, #8
   26072:	4604      	mov	r4, r0
   26074:	461e      	mov	r6, r3
   26076:	f04f 0340 	mov.w	r3, #64	; 0x40
   2607a:	f3ef 8511 	mrs	r5, BASEPRI
   2607e:	f383 8812 	msr	BASEPRI_MAX, r3
   26082:	f3bf 8f6f 	isb	sy
   26086:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   26088:	68c1      	ldr	r1, [r0, #12]
   2608a:	b999      	cbnz	r1, 260b4 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   2608c:	2900      	cmp	r1, #0
   2608e:	d151      	bne.n	26134 <z_impl_k_mutex_lock+0xc8>
   26090:	4a36      	ldr	r2, [pc, #216]	; (2616c <z_impl_k_mutex_lock+0x100>)
   26092:	6892      	ldr	r2, [r2, #8]
   26094:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   26098:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   2609a:	3101      	adds	r1, #1
   2609c:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   2609e:	4a33      	ldr	r2, [pc, #204]	; (2616c <z_impl_k_mutex_lock+0x100>)
   260a0:	6892      	ldr	r2, [r2, #8]
   260a2:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   260a4:	f383 8811 	msr	BASEPRI, r3
   260a8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   260ac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   260ae:	b002      	add	sp, #8
   260b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   260b4:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   260b6:	6880      	ldr	r0, [r0, #8]
   260b8:	4a2c      	ldr	r2, [pc, #176]	; (2616c <z_impl_k_mutex_lock+0x100>)
   260ba:	6892      	ldr	r2, [r2, #8]
   260bc:	4290      	cmp	r0, r2
   260be:	d0e5      	beq.n	2608c <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   260c0:	ea56 0107 	orrs.w	r1, r6, r7
   260c4:	d038      	beq.n	26138 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   260c6:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   260ca:	4641      	mov	r1, r8
   260cc:	f992 000e 	ldrsb.w	r0, [r2, #14]
   260d0:	f00a fd8f 	bl	30bf2 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   260d4:	4580      	cmp	r8, r0
   260d6:	dc36      	bgt.n	26146 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   260d8:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   260dc:	9700      	str	r7, [sp, #0]
   260de:	9601      	str	r6, [sp, #4]
   260e0:	4622      	mov	r2, r4
   260e2:	4629      	mov	r1, r5
   260e4:	4822      	ldr	r0, [pc, #136]	; (26170 <z_impl_k_mutex_lock+0x104>)
   260e6:	f000 fc79 	bl	269dc <z_pend_curr>
	if (got_mutex == 0) {
   260ea:	2800      	cmp	r0, #0
   260ec:	d0df      	beq.n	260ae <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   260ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   260f2:	f3ef 8511 	mrs	r5, BASEPRI
   260f6:	f383 8812 	msr	BASEPRI_MAX, r3
   260fa:	f3bf 8f6f 	isb	sy
   260fe:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   26100:	68a3      	ldr	r3, [r4, #8]
   26102:	b343      	cbz	r3, 26156 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   26104:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26106:	429c      	cmp	r4, r3
   26108:	d023      	beq.n	26152 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2610a:	b313      	cbz	r3, 26152 <z_impl_k_mutex_lock+0xe6>
   2610c:	6921      	ldr	r1, [r4, #16]
   2610e:	f993 000e 	ldrsb.w	r0, [r3, #14]
   26112:	f00a fd6e 	bl	30bf2 <new_prio_for_inheritance>
   26116:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   26118:	4620      	mov	r0, r4
   2611a:	f00a fd75 	bl	30c08 <adjust_owner_prio>
   2611e:	b9e8      	cbnz	r0, 2615c <z_impl_k_mutex_lock+0xf0>
   26120:	f1b8 0f00 	cmp.w	r8, #0
   26124:	d11a      	bne.n	2615c <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   26126:	f386 8811 	msr	BASEPRI, r6
   2612a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   2612e:	f06f 000a 	mvn.w	r0, #10
   26132:	e7bc      	b.n	260ae <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   26134:	6922      	ldr	r2, [r4, #16]
   26136:	e7af      	b.n	26098 <z_impl_k_mutex_lock+0x2c>
   26138:	f385 8811 	msr	BASEPRI, r5
   2613c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   26140:	f06f 000f 	mvn.w	r0, #15
   26144:	e7b3      	b.n	260ae <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   26146:	4601      	mov	r1, r0
   26148:	4620      	mov	r0, r4
   2614a:	f00a fd5d 	bl	30c08 <adjust_owner_prio>
   2614e:	4680      	mov	r8, r0
   26150:	e7c4      	b.n	260dc <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   26152:	6921      	ldr	r1, [r4, #16]
   26154:	e7e0      	b.n	26118 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   26156:	f1b8 0f00 	cmp.w	r8, #0
   2615a:	d0e4      	beq.n	26126 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   2615c:	4629      	mov	r1, r5
   2615e:	4804      	ldr	r0, [pc, #16]	; (26170 <z_impl_k_mutex_lock+0x104>)
   26160:	f000 faee 	bl	26740 <z_reschedule>
	return -EAGAIN;
   26164:	f06f 000a 	mvn.w	r0, #10
   26168:	e7a1      	b.n	260ae <z_impl_k_mutex_lock+0x42>
   2616a:	bf00      	nop
   2616c:	2000522c 	.word	0x2000522c
   26170:	20005254 	.word	0x20005254

00026174 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   26174:	6883      	ldr	r3, [r0, #8]
   26176:	b38b      	cbz	r3, 261dc <z_impl_k_mutex_unlock+0x68>
{
   26178:	b570      	push	{r4, r5, r6, lr}
   2617a:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2617c:	4a1a      	ldr	r2, [pc, #104]	; (261e8 <z_impl_k_mutex_unlock+0x74>)
   2617e:	6892      	ldr	r2, [r2, #8]
   26180:	4293      	cmp	r3, r2
   26182:	d12e      	bne.n	261e2 <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   26184:	68c3      	ldr	r3, [r0, #12]
   26186:	2b01      	cmp	r3, #1
   26188:	d903      	bls.n	26192 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2618a:	3b01      	subs	r3, #1
   2618c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2618e:	2000      	movs	r0, #0
}
   26190:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   26192:	f04f 0340 	mov.w	r3, #64	; 0x40
   26196:	f3ef 8511 	mrs	r5, BASEPRI
   2619a:	f383 8812 	msr	BASEPRI_MAX, r3
   2619e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   261a2:	6901      	ldr	r1, [r0, #16]
   261a4:	f00a fd30 	bl	30c08 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   261a8:	4620      	mov	r0, r4
   261aa:	f00b f8d1 	bl	31350 <z_unpend_first_thread>
	mutex->owner = new_owner;
   261ae:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   261b0:	b168      	cbz	r0, 261ce <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   261b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   261b6:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   261b8:	2400      	movs	r4, #0
   261ba:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   261be:	f00b f811 	bl	311e4 <z_ready_thread>
		z_reschedule(&lock, key);
   261c2:	4629      	mov	r1, r5
   261c4:	4809      	ldr	r0, [pc, #36]	; (261ec <z_impl_k_mutex_unlock+0x78>)
   261c6:	f000 fabb 	bl	26740 <z_reschedule>
	return 0;
   261ca:	4620      	mov	r0, r4
   261cc:	e7e0      	b.n	26190 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   261ce:	2000      	movs	r0, #0
   261d0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   261d2:	f385 8811 	msr	BASEPRI, r5
   261d6:	f3bf 8f6f 	isb	sy
   261da:	e7d9      	b.n	26190 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   261dc:	f06f 0015 	mvn.w	r0, #21
}
   261e0:	4770      	bx	lr
		return -EPERM;
   261e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   261e6:	e7d3      	b.n	26190 <z_impl_k_mutex_unlock+0x1c>
   261e8:	2000522c 	.word	0x2000522c
   261ec:	20005254 	.word	0x20005254

000261f0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   261f0:	b510      	push	{r4, lr}
   261f2:	b082      	sub	sp, #8
   261f4:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   261f6:	4686      	mov	lr, r0
	__asm__ volatile(
   261f8:	f04f 0040 	mov.w	r0, #64	; 0x40
   261fc:	f3ef 8111 	mrs	r1, BASEPRI
   26200:	f380 8812 	msr	BASEPRI_MAX, r0
   26204:	f3bf 8f6f 	isb	sy
   26208:	460c      	mov	r4, r1
   2620a:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2620e:	b1a0      	cbz	r0, 2623a <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26210:	6803      	ldr	r3, [r0, #0]
   26212:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   26216:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2621a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2621e:	4290      	cmp	r0, r2
   26220:	d008      	beq.n	26234 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   26222:	2101      	movs	r1, #1
   26224:	f00a fd86 	bl	30d34 <z_queue_node_peek>
	__asm__ volatile(
   26228:	f384 8811 	msr	BASEPRI, r4
   2622c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   26230:	b002      	add	sp, #8
   26232:	bd10      	pop	{r4, pc}
	list->tail = node;
   26234:	f8cc 3004 	str.w	r3, [ip, #4]
}
   26238:	e7f3      	b.n	26222 <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2623a:	ea53 0002 	orrs.w	r0, r3, r2
   2623e:	d00a      	beq.n	26256 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   26240:	9200      	str	r2, [sp, #0]
   26242:	9301      	str	r3, [sp, #4]
   26244:	4672      	mov	r2, lr
   26246:	4670      	mov	r0, lr
   26248:	f000 fbc8 	bl	269dc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2624c:	b948      	cbnz	r0, 26262 <z_impl_k_queue_get+0x72>
   2624e:	4b06      	ldr	r3, [pc, #24]	; (26268 <z_impl_k_queue_get+0x78>)
   26250:	689b      	ldr	r3, [r3, #8]
   26252:	6958      	ldr	r0, [r3, #20]
   26254:	e7ec      	b.n	26230 <z_impl_k_queue_get+0x40>
   26256:	f381 8811 	msr	BASEPRI, r1
   2625a:	f3bf 8f6f 	isb	sy
		return NULL;
   2625e:	2000      	movs	r0, #0
   26260:	e7e6      	b.n	26230 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   26262:	2000      	movs	r0, #0
   26264:	e7e4      	b.n	26230 <z_impl_k_queue_get+0x40>
   26266:	bf00      	nop
   26268:	2000522c 	.word	0x2000522c

0002626c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2626c:	b538      	push	{r3, r4, r5, lr}
   2626e:	4604      	mov	r4, r0
	__asm__ volatile(
   26270:	f04f 0340 	mov.w	r3, #64	; 0x40
   26274:	f3ef 8511 	mrs	r5, BASEPRI
   26278:	f383 8812 	msr	BASEPRI_MAX, r3
   2627c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   26280:	f00b f866 	bl	31350 <z_unpend_first_thread>

	if (thread != NULL) {
   26284:	b148      	cbz	r0, 2629a <z_impl_k_sem_give+0x2e>
   26286:	2200      	movs	r2, #0
   26288:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2628c:	f00a ffaa 	bl	311e4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   26290:	4629      	mov	r1, r5
   26292:	4809      	ldr	r0, [pc, #36]	; (262b8 <z_impl_k_sem_give+0x4c>)
   26294:	f000 fa54 	bl	26740 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   26298:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2629a:	68a3      	ldr	r3, [r4, #8]
   2629c:	68e2      	ldr	r2, [r4, #12]
   2629e:	4293      	cmp	r3, r2
   262a0:	d008      	beq.n	262b4 <z_impl_k_sem_give+0x48>
   262a2:	2201      	movs	r2, #1
   262a4:	4413      	add	r3, r2
   262a6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   262a8:	2102      	movs	r1, #2
   262aa:	f104 0010 	add.w	r0, r4, #16
   262ae:	f00b fb1e 	bl	318ee <z_handle_obj_poll_events>
}
   262b2:	e7ed      	b.n	26290 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   262b4:	2200      	movs	r2, #0
   262b6:	e7f5      	b.n	262a4 <z_impl_k_sem_give+0x38>
   262b8:	20005254 	.word	0x20005254

000262bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   262bc:	b510      	push	{r4, lr}
   262be:	b082      	sub	sp, #8
   262c0:	f04f 0440 	mov.w	r4, #64	; 0x40
   262c4:	f3ef 8111 	mrs	r1, BASEPRI
   262c8:	f384 8812 	msr	BASEPRI_MAX, r4
   262cc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   262d0:	6884      	ldr	r4, [r0, #8]
   262d2:	b144      	cbz	r4, 262e6 <z_impl_k_sem_take+0x2a>
		sem->count--;
   262d4:	3c01      	subs	r4, #1
   262d6:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   262d8:	f381 8811 	msr	BASEPRI, r1
   262dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   262e0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   262e2:	b002      	add	sp, #8
   262e4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   262e6:	ea53 0402 	orrs.w	r4, r3, r2
   262ea:	d006      	beq.n	262fa <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   262ec:	9200      	str	r2, [sp, #0]
   262ee:	9301      	str	r3, [sp, #4]
   262f0:	4602      	mov	r2, r0
   262f2:	4805      	ldr	r0, [pc, #20]	; (26308 <z_impl_k_sem_take+0x4c>)
   262f4:	f000 fb72 	bl	269dc <z_pend_curr>
	return ret;
   262f8:	e7f3      	b.n	262e2 <z_impl_k_sem_take+0x26>
   262fa:	f381 8811 	msr	BASEPRI, r1
   262fe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   26302:	f06f 000f 	mvn.w	r0, #15
   26306:	e7ec      	b.n	262e2 <z_impl_k_sem_take+0x26>
   26308:	20005254 	.word	0x20005254

0002630c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   2630c:	b538      	push	{r3, r4, r5, lr}
   2630e:	4604      	mov	r4, r0
	__asm__ volatile(
   26310:	f04f 0340 	mov.w	r3, #64	; 0x40
   26314:	f3ef 8511 	mrs	r5, BASEPRI
   26318:	f383 8812 	msr	BASEPRI_MAX, r3
   2631c:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   26320:	e005      	b.n	2632e <z_impl_k_sem_reset+0x22>
   26322:	f06f 020a 	mvn.w	r2, #10
   26326:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   2632a:	f00a ff5b 	bl	311e4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   2632e:	4620      	mov	r0, r4
   26330:	f00b f80e 	bl	31350 <z_unpend_first_thread>
		if (thread == NULL) {
   26334:	2800      	cmp	r0, #0
   26336:	d1f4      	bne.n	26322 <z_impl_k_sem_reset+0x16>
	}
	sem->count = 0;
   26338:	2300      	movs	r3, #0
   2633a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2633c:	2102      	movs	r1, #2
   2633e:	f104 0010 	add.w	r0, r4, #16
   26342:	f00b fad4 	bl	318ee <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   26346:	4629      	mov	r1, r5
   26348:	4801      	ldr	r0, [pc, #4]	; (26350 <z_impl_k_sem_reset+0x44>)
   2634a:	f000 f9f9 	bl	26740 <z_reschedule>
}
   2634e:	bd38      	pop	{r3, r4, r5, pc}
   26350:	20005254 	.word	0x20005254

00026354 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   26354:	b510      	push	{r4, lr}
   26356:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
   26358:	4b08      	ldr	r3, [pc, #32]	; (2637c <k_sys_work_q_init+0x28>)
   2635a:	9302      	str	r3, [sp, #8]
   2635c:	2400      	movs	r4, #0
   2635e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   26362:	ab02      	add	r3, sp, #8
   26364:	9300      	str	r3, [sp, #0]
   26366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2636a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2636e:	4904      	ldr	r1, [pc, #16]	; (26380 <k_sys_work_q_init+0x2c>)
   26370:	4804      	ldr	r0, [pc, #16]	; (26384 <k_sys_work_q_init+0x30>)
   26372:	f000 f929 	bl	265c8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   26376:	4620      	mov	r0, r4
   26378:	b004      	add	sp, #16
   2637a:	bd10      	pop	{r4, pc}
   2637c:	00035204 	.word	0x00035204
   26380:	20009380 	.word	0x20009380
   26384:	20002f60 	.word	0x20002f60

00026388 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   26388:	b370      	cbz	r0, 263e8 <queue_submit_locked+0x60>
{
   2638a:	b538      	push	{r3, r4, r5, lr}
   2638c:	460d      	mov	r5, r1
   2638e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26390:	4b1b      	ldr	r3, [pc, #108]	; (26400 <queue_submit_locked+0x78>)
   26392:	689b      	ldr	r3, [r3, #8]
   26394:	4283      	cmp	r3, r0
   26396:	d01b      	beq.n	263d0 <queue_submit_locked+0x48>
   26398:	2300      	movs	r3, #0
   2639a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   2639c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   263a0:	f3c3 0180 	ubfx	r1, r3, #2, #1
   263a4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   263a8:	f013 0f01 	tst.w	r3, #1
   263ac:	d01f      	beq.n	263ee <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   263ae:	b101      	cbz	r1, 263b2 <queue_submit_locked+0x2a>
   263b0:	b302      	cbz	r2, 263f4 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   263b2:	b100      	cbz	r0, 263b6 <queue_submit_locked+0x2e>
   263b4:	b309      	cbz	r1, 263fa <queue_submit_locked+0x72>
	parent->next = child;
   263b6:	2300      	movs	r3, #0
   263b8:	602b      	str	r3, [r5, #0]
	return list->tail;
   263ba:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   263be:	b173      	cbz	r3, 263de <queue_submit_locked+0x56>
	parent->next = child;
   263c0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   263c2:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   263c6:	4620      	mov	r0, r4
   263c8:	f00a fd44 	bl	30e54 <notify_queue_locked>
		ret = 1;
   263cc:	2001      	movs	r0, #1
	}

	return ret;
}
   263ce:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   263d0:	f00a fbd0 	bl	30b74 <k_is_in_isr>
   263d4:	b908      	cbnz	r0, 263da <queue_submit_locked+0x52>
   263d6:	2301      	movs	r3, #1
   263d8:	e7df      	b.n	2639a <queue_submit_locked+0x12>
   263da:	2300      	movs	r3, #0
   263dc:	e7dd      	b.n	2639a <queue_submit_locked+0x12>
   263de:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   263e2:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   263e6:	e7ee      	b.n	263c6 <queue_submit_locked+0x3e>
		return -EINVAL;
   263e8:	f06f 0015 	mvn.w	r0, #21
}
   263ec:	4770      	bx	lr
		ret = -ENODEV;
   263ee:	f06f 0012 	mvn.w	r0, #18
   263f2:	e7ec      	b.n	263ce <queue_submit_locked+0x46>
		ret = -EBUSY;
   263f4:	f06f 000f 	mvn.w	r0, #15
   263f8:	e7e9      	b.n	263ce <queue_submit_locked+0x46>
		ret = -EBUSY;
   263fa:	f06f 000f 	mvn.w	r0, #15
   263fe:	e7e6      	b.n	263ce <queue_submit_locked+0x46>
   26400:	2000522c 	.word	0x2000522c

00026404 <finalize_cancel_locked>:
{
   26404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26406:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   26408:	68c3      	ldr	r3, [r0, #12]
   2640a:	f023 0302 	bic.w	r3, r3, #2
   2640e:	60c3      	str	r3, [r0, #12]
	return list->head;
   26410:	4b13      	ldr	r3, [pc, #76]	; (26460 <finalize_cancel_locked+0x5c>)
   26412:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26414:	b185      	cbz	r5, 26438 <finalize_cancel_locked+0x34>
	return node->next;
   26416:	682c      	ldr	r4, [r5, #0]
   26418:	b104      	cbz	r4, 2641c <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2641a:	b10d      	cbz	r5, 26420 <finalize_cancel_locked+0x1c>
   2641c:	2700      	movs	r7, #0
   2641e:	e010      	b.n	26442 <finalize_cancel_locked+0x3e>
   26420:	462c      	mov	r4, r5
   26422:	e7fb      	b.n	2641c <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   26424:	462a      	mov	r2, r5
   26426:	4639      	mov	r1, r7
   26428:	480d      	ldr	r0, [pc, #52]	; (26460 <finalize_cancel_locked+0x5c>)
   2642a:	f00a fcce 	bl	30dca <sys_slist_remove>
			k_sem_give(&wc->sem);
   2642e:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   26432:	f7ff ff1b 	bl	2626c <z_impl_k_sem_give>
}
   26436:	e009      	b.n	2644c <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26438:	462c      	mov	r4, r5
   2643a:	e7ef      	b.n	2641c <finalize_cancel_locked+0x18>
   2643c:	4623      	mov	r3, r4
   2643e:	4625      	mov	r5, r4
   26440:	461c      	mov	r4, r3
   26442:	b165      	cbz	r5, 2645e <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   26444:	686b      	ldr	r3, [r5, #4]
   26446:	42b3      	cmp	r3, r6
   26448:	d0ec      	beq.n	26424 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   2644a:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2644c:	2c00      	cmp	r4, #0
   2644e:	d0f5      	beq.n	2643c <finalize_cancel_locked+0x38>
	return node->next;
   26450:	6823      	ldr	r3, [r4, #0]
   26452:	2b00      	cmp	r3, #0
   26454:	d0f3      	beq.n	2643e <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   26456:	2c00      	cmp	r4, #0
   26458:	d1f1      	bne.n	2643e <finalize_cancel_locked+0x3a>
   2645a:	4623      	mov	r3, r4
   2645c:	e7ef      	b.n	2643e <finalize_cancel_locked+0x3a>
}
   2645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26460:	20005254 	.word	0x20005254

00026464 <init_work_cancel>:
{
   26464:	b538      	push	{r3, r4, r5, lr}
   26466:	4604      	mov	r4, r0
   26468:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   2646a:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   2646c:	2201      	movs	r2, #1
   2646e:	2100      	movs	r1, #0
   26470:	f00a fc98 	bl	30da4 <z_impl_k_sem_init>
	canceler->work = work;
   26474:	6065      	str	r5, [r4, #4]
	parent->next = child;
   26476:	2300      	movs	r3, #0
   26478:	6023      	str	r3, [r4, #0]
	return list->tail;
   2647a:	4b05      	ldr	r3, [pc, #20]	; (26490 <init_work_cancel+0x2c>)
   2647c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2647e:	b11b      	cbz	r3, 26488 <init_work_cancel+0x24>
	parent->next = child;
   26480:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26482:	4b03      	ldr	r3, [pc, #12]	; (26490 <init_work_cancel+0x2c>)
   26484:	605c      	str	r4, [r3, #4]
}
   26486:	bd38      	pop	{r3, r4, r5, pc}
   26488:	4b01      	ldr	r3, [pc, #4]	; (26490 <init_work_cancel+0x2c>)
   2648a:	605c      	str	r4, [r3, #4]
	list->head = node;
   2648c:	601c      	str	r4, [r3, #0]
}
   2648e:	e7fa      	b.n	26486 <init_work_cancel+0x22>
   26490:	20005254 	.word	0x20005254

00026494 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   26494:	b570      	push	{r4, r5, r6, lr}
   26496:	b084      	sub	sp, #16
   26498:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   2649a:	e016      	b.n	264ca <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   2649c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   264a0:	f023 0204 	bic.w	r2, r3, #4
   264a4:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   264a8:	f013 0f04 	tst.w	r3, #4
   264ac:	d15a      	bne.n	26564 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   264ae:	2300      	movs	r3, #0
   264b0:	9302      	str	r3, [sp, #8]
   264b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   264b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   264ba:	e9cd 2300 	strd	r2, r3, [sp]
   264be:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   264c2:	4631      	mov	r1, r6
   264c4:	482e      	ldr	r0, [pc, #184]	; (26580 <work_queue_main+0xec>)
   264c6:	f000 fcc7 	bl	26e58 <z_sched_wait>
   264ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   264ce:	f3ef 8611 	mrs	r6, BASEPRI
   264d2:	f383 8812 	msr	BASEPRI_MAX, r3
   264d6:	f3bf 8f6f 	isb	sy
   264da:	4632      	mov	r2, r6
	return list->head;
   264dc:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   264e0:	2c00      	cmp	r4, #0
   264e2:	d0db      	beq.n	2649c <work_queue_main+0x8>
	return node->next;
   264e4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   264e6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   264ea:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   264ee:	428c      	cmp	r4, r1
   264f0:	d035      	beq.n	2655e <work_queue_main+0xca>
	*flagp |= BIT(bit);
   264f2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   264f6:	f043 0302 	orr.w	r3, r3, #2
   264fa:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   264fe:	68e3      	ldr	r3, [r4, #12]
   26500:	f043 0101 	orr.w	r1, r3, #1
   26504:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   26506:	f023 0304 	bic.w	r3, r3, #4
   2650a:	f043 0301 	orr.w	r3, r3, #1
   2650e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   26510:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   26512:	f382 8811 	msr	BASEPRI, r2
   26516:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2651a:	4620      	mov	r0, r4
   2651c:	4798      	blx	r3
	__asm__ volatile(
   2651e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26522:	f3ef 8611 	mrs	r6, BASEPRI
   26526:	f383 8812 	msr	BASEPRI_MAX, r3
   2652a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2652e:	68e3      	ldr	r3, [r4, #12]
   26530:	f023 0301 	bic.w	r3, r3, #1
   26534:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26536:	f013 0f02 	tst.w	r3, #2
   2653a:	d11d      	bne.n	26578 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   2653c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   26540:	f023 0302 	bic.w	r3, r3, #2
   26544:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   26548:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   2654c:	f386 8811 	msr	BASEPRI, r6
   26550:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   26554:	2b00      	cmp	r3, #0
   26556:	d1b8      	bne.n	264ca <work_queue_main+0x36>
	z_impl_k_yield();
   26558:	f000 fb4e 	bl	26bf8 <z_impl_k_yield>
}
   2655c:	e7b5      	b.n	264ca <work_queue_main+0x36>
	list->tail = node;
   2655e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   26562:	e7c6      	b.n	264f2 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   26564:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   26568:	2200      	movs	r2, #0
   2656a:	2101      	movs	r1, #1
   2656c:	4620      	mov	r0, r4
   2656e:	f00a ff25 	bl	313bc <z_sched_wake>
   26572:	2800      	cmp	r0, #0
   26574:	d1f8      	bne.n	26568 <work_queue_main+0xd4>
   26576:	e79a      	b.n	264ae <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   26578:	4620      	mov	r0, r4
   2657a:	f7ff ff43 	bl	26404 <finalize_cancel_locked>
   2657e:	e7dd      	b.n	2653c <work_queue_main+0xa8>
   26580:	2000525c 	.word	0x2000525c

00026584 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26584:	b508      	push	{r3, lr}
   26586:	4684      	mov	ip, r0
   26588:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2658a:	ea53 0102 	orrs.w	r1, r3, r2
   2658e:	d00c      	beq.n	265aa <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   26590:	68c1      	ldr	r1, [r0, #12]
   26592:	f041 0108 	orr.w	r1, r1, #8
   26596:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   26598:	f8dc 1000 	ldr.w	r1, [ip]
   2659c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2659e:	4905      	ldr	r1, [pc, #20]	; (265b4 <schedule_for_queue_locked+0x30>)
   265a0:	3010      	adds	r0, #16
   265a2:	f000 fca9 	bl	26ef8 <z_add_timeout>

	return ret;
   265a6:	2001      	movs	r0, #1
}
   265a8:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   265aa:	4661      	mov	r1, ip
   265ac:	f00a fc5c 	bl	30e68 <submit_to_queue_locked>
   265b0:	e7fa      	b.n	265a8 <schedule_for_queue_locked+0x24>
   265b2:	bf00      	nop
   265b4:	00030ec9 	.word	0x00030ec9

000265b8 <k_work_submit>:
{
   265b8:	b508      	push	{r3, lr}
   265ba:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   265bc:	4801      	ldr	r0, [pc, #4]	; (265c4 <k_work_submit+0xc>)
   265be:	f00a fcf6 	bl	30fae <k_work_submit_to_queue>
}
   265c2:	bd08      	pop	{r3, pc}
   265c4:	20002f60 	.word	0x20002f60

000265c8 <k_work_queue_start>:
{
   265c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   265ca:	b089      	sub	sp, #36	; 0x24
   265cc:	4604      	mov	r4, r0
   265ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   265d0:	2000      	movs	r0, #0
   265d2:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   265d6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   265da:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   265de:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   265e2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   265e6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   265ea:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   265ee:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   265f2:	b1fd      	cbz	r5, 26634 <k_work_queue_start+0x6c>
   265f4:	7928      	ldrb	r0, [r5, #4]
   265f6:	b9f8      	cbnz	r0, 26638 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   265f8:	2001      	movs	r0, #1
	*flagp = flags;
   265fa:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   265fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   26602:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26606:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2660a:	2000      	movs	r0, #0
   2660c:	9004      	str	r0, [sp, #16]
   2660e:	9303      	str	r3, [sp, #12]
   26610:	9002      	str	r0, [sp, #8]
   26612:	9001      	str	r0, [sp, #4]
   26614:	9400      	str	r4, [sp, #0]
   26616:	4b0a      	ldr	r3, [pc, #40]	; (26640 <k_work_queue_start+0x78>)
   26618:	4620      	mov	r0, r4
   2661a:	f00a fac2 	bl	30ba2 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2661e:	b125      	cbz	r5, 2662a <k_work_queue_start+0x62>
   26620:	6829      	ldr	r1, [r5, #0]
   26622:	b111      	cbz	r1, 2662a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   26624:	4620      	mov	r0, r4
   26626:	f7ff fc35 	bl	25e94 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2662a:	4620      	mov	r0, r4
   2662c:	f00a faaa 	bl	30b84 <z_impl_k_thread_start>
}
   26630:	b009      	add	sp, #36	; 0x24
   26632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26634:	2001      	movs	r0, #1
   26636:	e7e0      	b.n	265fa <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   26638:	f240 1001 	movw	r0, #257	; 0x101
   2663c:	e7dd      	b.n	265fa <k_work_queue_start+0x32>
   2663e:	bf00      	nop
   26640:	00026495 	.word	0x00026495

00026644 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26644:	b508      	push	{r3, lr}
   26646:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26648:	4801      	ldr	r0, [pc, #4]	; (26650 <k_work_schedule+0xc>)
   2664a:	f00a fcdc 	bl	31006 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   2664e:	bd08      	pop	{r3, pc}
   26650:	20002f60 	.word	0x20002f60

00026654 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26654:	b508      	push	{r3, lr}
   26656:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   26658:	4801      	ldr	r0, [pc, #4]	; (26660 <k_work_reschedule+0xc>)
   2665a:	f00a fcee 	bl	3103a <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   2665e:	bd08      	pop	{r3, pc}
   26660:	20002f60 	.word	0x20002f60

00026664 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   26664:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   26666:	2b7f      	cmp	r3, #127	; 0x7f
   26668:	d811      	bhi.n	2668e <sliceable+0x2a>
	int ret = slice_ticks;
   2666a:	4b0e      	ldr	r3, [pc, #56]	; (266a4 <sliceable+0x40>)
   2666c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   2666e:	b17b      	cbz	r3, 26690 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26670:	f990 200e 	ldrsb.w	r2, [r0, #14]
   26674:	4b0c      	ldr	r3, [pc, #48]	; (266a8 <sliceable+0x44>)
   26676:	681b      	ldr	r3, [r3, #0]
   26678:	429a      	cmp	r2, r3
   2667a:	db0c      	blt.n	26696 <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
   2667c:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   2667e:	f013 0f1f 	tst.w	r3, #31
   26682:	d10a      	bne.n	2669a <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
   26684:	4b09      	ldr	r3, [pc, #36]	; (266ac <sliceable+0x48>)
   26686:	4298      	cmp	r0, r3
   26688:	d009      	beq.n	2669e <sliceable+0x3a>
   2668a:	2301      	movs	r3, #1
   2668c:	e000      	b.n	26690 <sliceable+0x2c>
   2668e:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   26690:	f003 0001 	and.w	r0, r3, #1
   26694:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   26696:	2300      	movs	r3, #0
   26698:	e7fa      	b.n	26690 <sliceable+0x2c>
   2669a:	2300      	movs	r3, #0
   2669c:	e7f8      	b.n	26690 <sliceable+0x2c>
   2669e:	2300      	movs	r3, #0
   266a0:	e7f6      	b.n	26690 <sliceable+0x2c>
   266a2:	bf00      	nop
   266a4:	20005268 	.word	0x20005268
   266a8:	20005264 	.word	0x20005264
   266ac:	20002df0 	.word	0x20002df0

000266b0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   266b0:	4b04      	ldr	r3, [pc, #16]	; (266c4 <slice_timeout+0x14>)
   266b2:	1ac0      	subs	r0, r0, r3
   266b4:	10c0      	asrs	r0, r0, #3
   266b6:	4b04      	ldr	r3, [pc, #16]	; (266c8 <slice_timeout+0x18>)
   266b8:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
   266bc:	4b03      	ldr	r3, [pc, #12]	; (266cc <slice_timeout+0x1c>)
   266be:	2201      	movs	r2, #1
   266c0:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   266c2:	4770      	bx	lr
   266c4:	20003038 	.word	0x20003038
   266c8:	aaaaaaab 	.word	0xaaaaaaab
   266cc:	20005260 	.word	0x20005260

000266d0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   266d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   266d4:	bf08      	it	eq
   266d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   266da:	d100      	bne.n	266de <add_thread_timeout+0xe>
   266dc:	4770      	bx	lr
{
   266de:	b508      	push	{r3, lr}
   266e0:	4902      	ldr	r1, [pc, #8]	; (266ec <add_thread_timeout+0x1c>)
   266e2:	3018      	adds	r0, #24
   266e4:	f000 fc08 	bl	26ef8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   266e8:	bd08      	pop	{r3, pc}
   266ea:	bf00      	nop
   266ec:	00031271 	.word	0x00031271

000266f0 <z_reset_time_slice>:
{
   266f0:	b570      	push	{r4, r5, r6, lr}
   266f2:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
   266f4:	4b0d      	ldr	r3, [pc, #52]	; (2672c <z_reset_time_slice+0x3c>)
   266f6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   266f8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   266fc:	4c0c      	ldr	r4, [pc, #48]	; (26730 <z_reset_time_slice+0x40>)
   266fe:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   26702:	4620      	mov	r0, r4
   26704:	f00a febc 	bl	31480 <z_abort_timeout>
	slice_expired[cpu] = false;
   26708:	4b0a      	ldr	r3, [pc, #40]	; (26734 <z_reset_time_slice+0x44>)
   2670a:	2200      	movs	r2, #0
   2670c:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   2670e:	4628      	mov	r0, r5
   26710:	f7ff ffa8 	bl	26664 <sliceable>
   26714:	b900      	cbnz	r0, 26718 <z_reset_time_slice+0x28>
}
   26716:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
   26718:	4b07      	ldr	r3, [pc, #28]	; (26738 <z_reset_time_slice+0x48>)
   2671a:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
   2671c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2671e:	17d3      	asrs	r3, r2, #31
   26720:	4906      	ldr	r1, [pc, #24]	; (2673c <z_reset_time_slice+0x4c>)
   26722:	4620      	mov	r0, r4
   26724:	f000 fbe8 	bl	26ef8 <z_add_timeout>
}
   26728:	e7f5      	b.n	26716 <z_reset_time_slice+0x26>
   2672a:	bf00      	nop
   2672c:	2000522c 	.word	0x2000522c
   26730:	20003038 	.word	0x20003038
   26734:	20005260 	.word	0x20005260
   26738:	20005268 	.word	0x20005268
   2673c:	000266b1 	.word	0x000266b1

00026740 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   26740:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   26742:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26744:	b959      	cbnz	r1, 2675e <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26746:	f3ef 8205 	mrs	r2, IPSR
   2674a:	b942      	cbnz	r2, 2675e <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   2674c:	4a06      	ldr	r2, [pc, #24]	; (26768 <z_reschedule+0x28>)
   2674e:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
   26750:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   26752:	4290      	cmp	r0, r2
   26754:	d003      	beq.n	2675e <z_reschedule+0x1e>
	ret = arch_swap(key);
   26756:	4608      	mov	r0, r1
   26758:	f7f1 f888 	bl	1786c <arch_swap>
		z_swap(lock, key);
   2675c:	e003      	b.n	26766 <z_reschedule+0x26>
   2675e:	f383 8811 	msr	BASEPRI, r3
   26762:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   26766:	bd08      	pop	{r3, pc}
   26768:	2000522c 	.word	0x2000522c

0002676c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   2676c:	2300      	movs	r3, #0
	__asm__ volatile(
   2676e:	f04f 0240 	mov.w	r2, #64	; 0x40
   26772:	f3ef 8111 	mrs	r1, BASEPRI
   26776:	f382 8812 	msr	BASEPRI_MAX, r2
   2677a:	f3bf 8f6f 	isb	sy
   2677e:	e009      	b.n	26794 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   26780:	4b06      	ldr	r3, [pc, #24]	; (2679c <k_sched_lock+0x30>)
   26782:	689a      	ldr	r2, [r3, #8]
   26784:	7bd3      	ldrb	r3, [r2, #15]
   26786:	3b01      	subs	r3, #1
   26788:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2678a:	f381 8811 	msr	BASEPRI, r1
   2678e:	f3bf 8f6f 	isb	sy
   26792:	2301      	movs	r3, #1
   26794:	2b00      	cmp	r3, #0
   26796:	d0f3      	beq.n	26780 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26798:	4770      	bx	lr
   2679a:	bf00      	nop
   2679c:	2000522c 	.word	0x2000522c

000267a0 <update_cache>:
{
   267a0:	b538      	push	{r3, r4, r5, lr}
   267a2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   267a4:	4810      	ldr	r0, [pc, #64]	; (267e8 <update_cache+0x48>)
   267a6:	f00a fd16 	bl	311d6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   267aa:	4605      	mov	r5, r0
   267ac:	b170      	cbz	r0, 267cc <update_cache+0x2c>
	if (preempt_ok != 0) {
   267ae:	b984      	cbnz	r4, 267d2 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   267b0:	4b0e      	ldr	r3, [pc, #56]	; (267ec <update_cache+0x4c>)
   267b2:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   267b4:	7b5a      	ldrb	r2, [r3, #13]
   267b6:	f012 0f1f 	tst.w	r2, #31
   267ba:	d10a      	bne.n	267d2 <update_cache+0x32>
	return node->next != NULL;
   267bc:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   267be:	b942      	cbnz	r2, 267d2 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   267c0:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   267c2:	2a7f      	cmp	r2, #127	; 0x7f
   267c4:	d905      	bls.n	267d2 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   267c6:	4a09      	ldr	r2, [pc, #36]	; (267ec <update_cache+0x4c>)
   267c8:	6193      	str	r3, [r2, #24]
   267ca:	e00b      	b.n	267e4 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   267cc:	4b07      	ldr	r3, [pc, #28]	; (267ec <update_cache+0x4c>)
   267ce:	68dd      	ldr	r5, [r3, #12]
   267d0:	e7ed      	b.n	267ae <update_cache+0xe>
		if (thread != _current) {
   267d2:	4b06      	ldr	r3, [pc, #24]	; (267ec <update_cache+0x4c>)
   267d4:	689b      	ldr	r3, [r3, #8]
   267d6:	42ab      	cmp	r3, r5
   267d8:	d002      	beq.n	267e0 <update_cache+0x40>
			z_reset_time_slice(thread);
   267da:	4628      	mov	r0, r5
   267dc:	f7ff ff88 	bl	266f0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   267e0:	4b02      	ldr	r3, [pc, #8]	; (267ec <update_cache+0x4c>)
   267e2:	619d      	str	r5, [r3, #24]
}
   267e4:	bd38      	pop	{r3, r4, r5, pc}
   267e6:	bf00      	nop
   267e8:	20005248 	.word	0x20005248
   267ec:	2000522c 	.word	0x2000522c

000267f0 <move_thread_to_end_of_prio_q>:
{
   267f0:	b538      	push	{r3, r4, r5, lr}
   267f2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   267f4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   267f6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   267fa:	2b00      	cmp	r3, #0
   267fc:	db0a      	blt.n	26814 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   267fe:	7b6b      	ldrb	r3, [r5, #13]
   26800:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26804:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   26806:	4b1b      	ldr	r3, [pc, #108]	; (26874 <move_thread_to_end_of_prio_q+0x84>)
   26808:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2680c:	429c      	cmp	r4, r3
   2680e:	d110      	bne.n	26832 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26810:	2400      	movs	r4, #0
   26812:	e00e      	b.n	26832 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26814:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   26818:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2681a:	4601      	mov	r1, r0
   2681c:	4816      	ldr	r0, [pc, #88]	; (26878 <move_thread_to_end_of_prio_q+0x88>)
   2681e:	f00a fca6 	bl	3116e <z_priq_dumb_remove>
}
   26822:	e7ec      	b.n	267fe <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   26824:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   26826:	606b      	str	r3, [r5, #4]
	node->next = successor;
   26828:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2682a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2682c:	6065      	str	r5, [r4, #4]
}
   2682e:	e017      	b.n	26860 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26830:	2400      	movs	r4, #0
   26832:	b16c      	cbz	r4, 26850 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26834:	4621      	mov	r1, r4
   26836:	4628      	mov	r0, r5
   26838:	f00a fc5b 	bl	310f2 <z_sched_prio_cmp>
   2683c:	2800      	cmp	r0, #0
   2683e:	dcf1      	bgt.n	26824 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26840:	2c00      	cmp	r4, #0
   26842:	d0f6      	beq.n	26832 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   26844:	4b0b      	ldr	r3, [pc, #44]	; (26874 <move_thread_to_end_of_prio_q+0x84>)
   26846:	6a1b      	ldr	r3, [r3, #32]
   26848:	429c      	cmp	r4, r3
   2684a:	d0f1      	beq.n	26830 <move_thread_to_end_of_prio_q+0x40>
   2684c:	6824      	ldr	r4, [r4, #0]
   2684e:	e7f0      	b.n	26832 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   26850:	4b08      	ldr	r3, [pc, #32]	; (26874 <move_thread_to_end_of_prio_q+0x84>)
   26852:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   26854:	f103 011c 	add.w	r1, r3, #28
   26858:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   2685a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2685c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2685e:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
   26860:	4b04      	ldr	r3, [pc, #16]	; (26874 <move_thread_to_end_of_prio_q+0x84>)
   26862:	6898      	ldr	r0, [r3, #8]
   26864:	42a8      	cmp	r0, r5
   26866:	bf14      	ite	ne
   26868:	2000      	movne	r0, #0
   2686a:	2001      	moveq	r0, #1
   2686c:	f7ff ff98 	bl	267a0 <update_cache>
}
   26870:	bd38      	pop	{r3, r4, r5, pc}
   26872:	bf00      	nop
   26874:	2000522c 	.word	0x2000522c
   26878:	20005248 	.word	0x20005248

0002687c <z_time_slice>:
{
   2687c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2687e:	f04f 0240 	mov.w	r2, #64	; 0x40
   26882:	f3ef 8311 	mrs	r3, BASEPRI
   26886:	f382 8812 	msr	BASEPRI_MAX, r2
   2688a:	f3bf 8f6f 	isb	sy
   2688e:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
   26890:	4b14      	ldr	r3, [pc, #80]	; (268e4 <z_time_slice+0x68>)
   26892:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   26894:	4b14      	ldr	r3, [pc, #80]	; (268e8 <z_time_slice+0x6c>)
   26896:	681b      	ldr	r3, [r3, #0]
   26898:	42a3      	cmp	r3, r4
   2689a:	d017      	beq.n	268cc <z_time_slice+0x50>
	pending_current = NULL;
   2689c:	4b12      	ldr	r3, [pc, #72]	; (268e8 <z_time_slice+0x6c>)
   2689e:	2200      	movs	r2, #0
   268a0:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   268a2:	4b10      	ldr	r3, [pc, #64]	; (268e4 <z_time_slice+0x68>)
   268a4:	7c1b      	ldrb	r3, [r3, #16]
   268a6:	4a11      	ldr	r2, [pc, #68]	; (268ec <z_time_slice+0x70>)
   268a8:	5cd3      	ldrb	r3, [r2, r3]
   268aa:	b153      	cbz	r3, 268c2 <z_time_slice+0x46>
   268ac:	4620      	mov	r0, r4
   268ae:	f7ff fed9 	bl	26664 <sliceable>
   268b2:	b130      	cbz	r0, 268c2 <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
   268b4:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
   268b6:	f013 0f1f 	tst.w	r3, #31
   268ba:	d00f      	beq.n	268dc <z_time_slice+0x60>
		z_reset_time_slice(curr);
   268bc:	4620      	mov	r0, r4
   268be:	f7ff ff17 	bl	266f0 <z_reset_time_slice>
	__asm__ volatile(
   268c2:	f385 8811 	msr	BASEPRI, r5
   268c6:	f3bf 8f6f 	isb	sy
}
   268ca:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
   268cc:	4620      	mov	r0, r4
   268ce:	f7ff ff0f 	bl	266f0 <z_reset_time_slice>
   268d2:	f385 8811 	msr	BASEPRI, r5
   268d6:	f3bf 8f6f 	isb	sy
		return;
   268da:	e7f6      	b.n	268ca <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
   268dc:	4620      	mov	r0, r4
   268de:	f7ff ff87 	bl	267f0 <move_thread_to_end_of_prio_q>
   268e2:	e7eb      	b.n	268bc <z_time_slice+0x40>
   268e4:	2000522c 	.word	0x2000522c
   268e8:	2000525c 	.word	0x2000525c
   268ec:	20005260 	.word	0x20005260

000268f0 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   268f0:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   268f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   268f6:	2b00      	cmp	r3, #0
   268f8:	db33      	blt.n	26962 <ready_thread+0x72>
{
   268fa:	b570      	push	{r4, r5, r6, lr}
   268fc:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   268fe:	f012 0f1f 	tst.w	r2, #31
   26902:	d101      	bne.n	26908 <ready_thread+0x18>
	return node->next != NULL;
   26904:	6986      	ldr	r6, [r0, #24]
   26906:	b106      	cbz	r6, 2690a <ready_thread+0x1a>
}
   26908:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   2690a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2690e:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   26910:	4b14      	ldr	r3, [pc, #80]	; (26964 <ready_thread+0x74>)
   26912:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26916:	429d      	cmp	r5, r3
   26918:	d108      	bne.n	2692c <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2691a:	4635      	mov	r5, r6
   2691c:	e006      	b.n	2692c <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2691e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   26920:	6063      	str	r3, [r4, #4]
	node->next = successor;
   26922:	6025      	str	r5, [r4, #0]
	prev->next = node;
   26924:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26926:	606c      	str	r4, [r5, #4]
}
   26928:	e017      	b.n	2695a <ready_thread+0x6a>
   2692a:	4635      	mov	r5, r6
   2692c:	b16d      	cbz	r5, 2694a <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2692e:	4629      	mov	r1, r5
   26930:	4620      	mov	r0, r4
   26932:	f00a fbde 	bl	310f2 <z_sched_prio_cmp>
   26936:	2800      	cmp	r0, #0
   26938:	dcf1      	bgt.n	2691e <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2693a:	2d00      	cmp	r5, #0
   2693c:	d0f6      	beq.n	2692c <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2693e:	4b09      	ldr	r3, [pc, #36]	; (26964 <ready_thread+0x74>)
   26940:	6a1b      	ldr	r3, [r3, #32]
   26942:	429d      	cmp	r5, r3
   26944:	d0f1      	beq.n	2692a <ready_thread+0x3a>
   26946:	682d      	ldr	r5, [r5, #0]
   26948:	e7f0      	b.n	2692c <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   2694a:	4b06      	ldr	r3, [pc, #24]	; (26964 <ready_thread+0x74>)
   2694c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   2694e:	f103 011c 	add.w	r1, r3, #28
   26952:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   26954:	6062      	str	r2, [r4, #4]
	tail->next = node;
   26956:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26958:	621c      	str	r4, [r3, #32]
		update_cache(0);
   2695a:	2000      	movs	r0, #0
   2695c:	f7ff ff20 	bl	267a0 <update_cache>
}
   26960:	e7d2      	b.n	26908 <ready_thread+0x18>
   26962:	4770      	bx	lr
   26964:	2000522c 	.word	0x2000522c

00026968 <z_sched_start>:
{
   26968:	b510      	push	{r4, lr}
	__asm__ volatile(
   2696a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2696e:	f3ef 8411 	mrs	r4, BASEPRI
   26972:	f383 8812 	msr	BASEPRI_MAX, r3
   26976:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2697a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   2697c:	f013 0f04 	tst.w	r3, #4
   26980:	d104      	bne.n	2698c <z_sched_start+0x24>
	__asm__ volatile(
   26982:	f384 8811 	msr	BASEPRI, r4
   26986:	f3bf 8f6f 	isb	sy
}
   2698a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2698c:	f023 0304 	bic.w	r3, r3, #4
   26990:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   26992:	f7ff ffad 	bl	268f0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   26996:	4621      	mov	r1, r4
   26998:	4801      	ldr	r0, [pc, #4]	; (269a0 <z_sched_start+0x38>)
   2699a:	f7ff fed1 	bl	26740 <z_reschedule>
   2699e:	e7f4      	b.n	2698a <z_sched_start+0x22>
   269a0:	2000526c 	.word	0x2000526c

000269a4 <unready_thread>:
{
   269a4:	b510      	push	{r4, lr}
   269a6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   269a8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   269aa:	f990 300d 	ldrsb.w	r3, [r0, #13]
   269ae:	2b00      	cmp	r3, #0
   269b0:	db08      	blt.n	269c4 <unready_thread+0x20>
	update_cache(thread == _current);
   269b2:	4b08      	ldr	r3, [pc, #32]	; (269d4 <unready_thread+0x30>)
   269b4:	6898      	ldr	r0, [r3, #8]
   269b6:	42a0      	cmp	r0, r4
   269b8:	bf14      	ite	ne
   269ba:	2000      	movne	r0, #0
   269bc:	2001      	moveq	r0, #1
   269be:	f7ff feef 	bl	267a0 <update_cache>
}
   269c2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   269c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   269c8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   269ca:	4601      	mov	r1, r0
   269cc:	4802      	ldr	r0, [pc, #8]	; (269d8 <unready_thread+0x34>)
   269ce:	f00a fbce 	bl	3116e <z_priq_dumb_remove>
}
   269d2:	e7ee      	b.n	269b2 <unready_thread+0xe>
   269d4:	2000522c 	.word	0x2000522c
   269d8:	20005248 	.word	0x20005248

000269dc <z_pend_curr>:
{
   269dc:	b510      	push	{r4, lr}
   269de:	460c      	mov	r4, r1
   269e0:	4611      	mov	r1, r2
	pending_current = _current;
   269e2:	480a      	ldr	r0, [pc, #40]	; (26a0c <z_pend_curr+0x30>)
   269e4:	6882      	ldr	r2, [r0, #8]
   269e6:	4b0a      	ldr	r3, [pc, #40]	; (26a10 <z_pend_curr+0x34>)
   269e8:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   269ea:	f04f 0240 	mov.w	r2, #64	; 0x40
   269ee:	f3ef 8311 	mrs	r3, BASEPRI
   269f2:	f382 8812 	msr	BASEPRI_MAX, r2
   269f6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   269fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   269fe:	6880      	ldr	r0, [r0, #8]
   26a00:	f00a fc7c 	bl	312fc <pend_locked>
   26a04:	4620      	mov	r0, r4
   26a06:	f7f0 ff31 	bl	1786c <arch_swap>
}
   26a0a:	bd10      	pop	{r4, pc}
   26a0c:	2000522c 	.word	0x2000522c
   26a10:	2000525c 	.word	0x2000525c

00026a14 <z_set_prio>:
{
   26a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26a18:	4605      	mov	r5, r0
   26a1a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   26a1c:	2300      	movs	r3, #0
   26a1e:	f04f 0240 	mov.w	r2, #64	; 0x40
   26a22:	f3ef 8611 	mrs	r6, BASEPRI
   26a26:	f382 8812 	msr	BASEPRI_MAX, r2
   26a2a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   26a2e:	4618      	mov	r0, r3
   26a30:	e029      	b.n	26a86 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   26a32:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   26a34:	606b      	str	r3, [r5, #4]
	node->next = successor;
   26a36:	602c      	str	r4, [r5, #0]
	prev->next = node;
   26a38:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26a3a:	6065      	str	r5, [r4, #4]
}
   26a3c:	e017      	b.n	26a6e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26a3e:	4644      	mov	r4, r8
   26a40:	b16c      	cbz	r4, 26a5e <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26a42:	4621      	mov	r1, r4
   26a44:	4628      	mov	r0, r5
   26a46:	f00a fb54 	bl	310f2 <z_sched_prio_cmp>
   26a4a:	2800      	cmp	r0, #0
   26a4c:	dcf1      	bgt.n	26a32 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26a4e:	2c00      	cmp	r4, #0
   26a50:	d0f6      	beq.n	26a40 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   26a52:	4b1d      	ldr	r3, [pc, #116]	; (26ac8 <z_set_prio+0xb4>)
   26a54:	6a1b      	ldr	r3, [r3, #32]
   26a56:	429c      	cmp	r4, r3
   26a58:	d0f1      	beq.n	26a3e <z_set_prio+0x2a>
   26a5a:	6824      	ldr	r4, [r4, #0]
   26a5c:	e7f0      	b.n	26a40 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   26a5e:	4b1a      	ldr	r3, [pc, #104]	; (26ac8 <z_set_prio+0xb4>)
   26a60:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   26a62:	f103 011c 	add.w	r1, r3, #28
   26a66:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   26a68:	606a      	str	r2, [r5, #4]
	tail->next = node;
   26a6a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   26a6c:	621d      	str	r5, [r3, #32]
			update_cache(1);
   26a6e:	2001      	movs	r0, #1
   26a70:	f7ff fe96 	bl	267a0 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26a74:	2001      	movs	r0, #1
   26a76:	e001      	b.n	26a7c <z_set_prio+0x68>
			thread->base.prio = prio;
   26a78:	73af      	strb	r7, [r5, #14]
   26a7a:	2000      	movs	r0, #0
	__asm__ volatile(
   26a7c:	f386 8811 	msr	BASEPRI, r6
   26a80:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26a84:	2301      	movs	r3, #1
   26a86:	b9e3      	cbnz	r3, 26ac2 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   26a88:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26a8a:	f013 0f1f 	tst.w	r3, #31
   26a8e:	d1f3      	bne.n	26a78 <z_set_prio+0x64>
	return node->next != NULL;
   26a90:	f8d5 8018 	ldr.w	r8, [r5, #24]
   26a94:	f1b8 0f00 	cmp.w	r8, #0
   26a98:	d1ee      	bne.n	26a78 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26a9e:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26aa0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 26acc <z_set_prio+0xb8>
   26aa4:	4629      	mov	r1, r5
   26aa6:	4648      	mov	r0, r9
   26aa8:	f00a fb61 	bl	3116e <z_priq_dumb_remove>
				thread->base.prio = prio;
   26aac:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26aae:	7b6b      	ldrb	r3, [r5, #13]
   26ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26ab4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   26ab6:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26aba:	454c      	cmp	r4, r9
   26abc:	d1c0      	bne.n	26a40 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26abe:	4644      	mov	r4, r8
   26ac0:	e7be      	b.n	26a40 <z_set_prio+0x2c>
}
   26ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26ac6:	bf00      	nop
   26ac8:	2000522c 	.word	0x2000522c
   26acc:	20005248 	.word	0x20005248

00026ad0 <z_impl_k_thread_suspend>:
{
   26ad0:	b538      	push	{r3, r4, r5, lr}
   26ad2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26ad4:	3018      	adds	r0, #24
   26ad6:	f00a fcd3 	bl	31480 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   26ada:	2300      	movs	r3, #0
	__asm__ volatile(
   26adc:	f04f 0240 	mov.w	r2, #64	; 0x40
   26ae0:	f3ef 8511 	mrs	r5, BASEPRI
   26ae4:	f382 8812 	msr	BASEPRI_MAX, r2
   26ae8:	f3bf 8f6f 	isb	sy
   26aec:	e010      	b.n	26b10 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26aee:	7b63      	ldrb	r3, [r4, #13]
   26af0:	f043 0310 	orr.w	r3, r3, #16
   26af4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   26af6:	4b11      	ldr	r3, [pc, #68]	; (26b3c <z_impl_k_thread_suspend+0x6c>)
   26af8:	6898      	ldr	r0, [r3, #8]
   26afa:	42a0      	cmp	r0, r4
   26afc:	bf14      	ite	ne
   26afe:	2000      	movne	r0, #0
   26b00:	2001      	moveq	r0, #1
   26b02:	f7ff fe4d 	bl	267a0 <update_cache>
	__asm__ volatile(
   26b06:	f385 8811 	msr	BASEPRI, r5
   26b0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26b0e:	2301      	movs	r3, #1
   26b10:	b963      	cbnz	r3, 26b2c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   26b12:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   26b14:	f994 300d 	ldrsb.w	r3, [r4, #13]
   26b18:	2b00      	cmp	r3, #0
   26b1a:	dae8      	bge.n	26aee <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26b1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   26b20:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26b22:	4621      	mov	r1, r4
   26b24:	4806      	ldr	r0, [pc, #24]	; (26b40 <z_impl_k_thread_suspend+0x70>)
   26b26:	f00a fb22 	bl	3116e <z_priq_dumb_remove>
}
   26b2a:	e7e0      	b.n	26aee <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   26b2c:	4b03      	ldr	r3, [pc, #12]	; (26b3c <z_impl_k_thread_suspend+0x6c>)
   26b2e:	689b      	ldr	r3, [r3, #8]
   26b30:	42a3      	cmp	r3, r4
   26b32:	d000      	beq.n	26b36 <z_impl_k_thread_suspend+0x66>
}
   26b34:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   26b36:	f00a fb0e 	bl	31156 <z_reschedule_unlocked>
}
   26b3a:	e7fb      	b.n	26b34 <z_impl_k_thread_suspend+0x64>
   26b3c:	2000522c 	.word	0x2000522c
   26b40:	20005248 	.word	0x20005248

00026b44 <k_sched_unlock>:

void k_sched_unlock(void)
{
   26b44:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   26b46:	2300      	movs	r3, #0
	__asm__ volatile(
   26b48:	f04f 0240 	mov.w	r2, #64	; 0x40
   26b4c:	f3ef 8411 	mrs	r4, BASEPRI
   26b50:	f382 8812 	msr	BASEPRI_MAX, r2
   26b54:	f3bf 8f6f 	isb	sy
   26b58:	e00c      	b.n	26b74 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   26b5a:	4b09      	ldr	r3, [pc, #36]	; (26b80 <k_sched_unlock+0x3c>)
   26b5c:	689a      	ldr	r2, [r3, #8]
   26b5e:	7bd3      	ldrb	r3, [r2, #15]
   26b60:	3301      	adds	r3, #1
   26b62:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26b64:	2000      	movs	r0, #0
   26b66:	f7ff fe1b 	bl	267a0 <update_cache>
	__asm__ volatile(
   26b6a:	f384 8811 	msr	BASEPRI, r4
   26b6e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26b72:	2301      	movs	r3, #1
   26b74:	2b00      	cmp	r3, #0
   26b76:	d0f0      	beq.n	26b5a <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   26b78:	f00a faed 	bl	31156 <z_reschedule_unlocked>
}
   26b7c:	bd10      	pop	{r4, pc}
   26b7e:	bf00      	nop
   26b80:	2000522c 	.word	0x2000522c

00026b84 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   26b84:	7b43      	ldrb	r3, [r0, #13]
   26b86:	f013 0f08 	tst.w	r3, #8
   26b8a:	d12a      	bne.n	26be2 <end_thread+0x5e>
{
   26b8c:	b510      	push	{r4, lr}
   26b8e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   26b90:	f043 0208 	orr.w	r2, r3, #8
   26b94:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26b96:	f023 0220 	bic.w	r2, r3, #32
   26b9a:	f042 0208 	orr.w	r2, r2, #8
   26b9e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   26ba0:	f012 0f80 	tst.w	r2, #128	; 0x80
   26ba4:	d113      	bne.n	26bce <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   26ba6:	68a3      	ldr	r3, [r4, #8]
   26ba8:	b113      	cbz	r3, 26bb0 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   26baa:	4620      	mov	r0, r4
   26bac:	f00a fae7 	bl	3117e <unpend_thread_no_timeout>
   26bb0:	f104 0018 	add.w	r0, r4, #24
   26bb4:	f00a fc64 	bl	31480 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   26bb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   26bbc:	f00a fb5e 	bl	3127c <unpend_all>
		update_cache(1);
   26bc0:	2001      	movs	r0, #1
   26bc2:	f7ff fded 	bl	267a0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   26bc6:	4620      	mov	r0, r4
   26bc8:	f7ff f944 	bl	25e54 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   26bcc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26bce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   26bd2:	f043 0308 	orr.w	r3, r3, #8
   26bd6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26bd8:	4601      	mov	r1, r0
   26bda:	4802      	ldr	r0, [pc, #8]	; (26be4 <end_thread+0x60>)
   26bdc:	f00a fac7 	bl	3116e <z_priq_dumb_remove>
}
   26be0:	e7e1      	b.n	26ba6 <end_thread+0x22>
   26be2:	4770      	bx	lr
   26be4:	20005248 	.word	0x20005248

00026be8 <z_sched_init>:
{
   26be8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   26bea:	4802      	ldr	r0, [pc, #8]	; (26bf4 <z_sched_init+0xc>)
   26bec:	f00a fbe2 	bl	313b4 <init_ready_q>
}
   26bf0:	bd08      	pop	{r3, pc}
   26bf2:	bf00      	nop
   26bf4:	20005244 	.word	0x20005244

00026bf8 <z_impl_k_yield>:
{
   26bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   26bfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   26bfe:	f3ef 8611 	mrs	r6, BASEPRI
   26c02:	f383 8812 	msr	BASEPRI_MAX, r3
   26c06:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   26c0a:	4c1d      	ldr	r4, [pc, #116]	; (26c80 <z_impl_k_yield+0x88>)
   26c0c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26c0e:	7b4b      	ldrb	r3, [r1, #13]
   26c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26c14:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26c16:	f104 071c 	add.w	r7, r4, #28
   26c1a:	4638      	mov	r0, r7
   26c1c:	f00a faa7 	bl	3116e <z_priq_dumb_remove>
	queue_thread(_current);
   26c20:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   26c22:	7b6b      	ldrb	r3, [r5, #13]
   26c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26c28:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   26c2a:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26c2c:	42bc      	cmp	r4, r7
   26c2e:	d108      	bne.n	26c42 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26c30:	2400      	movs	r4, #0
   26c32:	e006      	b.n	26c42 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   26c34:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   26c36:	606b      	str	r3, [r5, #4]
	node->next = successor;
   26c38:	602c      	str	r4, [r5, #0]
	prev->next = node;
   26c3a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26c3c:	6065      	str	r5, [r4, #4]
}
   26c3e:	e017      	b.n	26c70 <z_impl_k_yield+0x78>
   26c40:	2400      	movs	r4, #0
   26c42:	b16c      	cbz	r4, 26c60 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26c44:	4621      	mov	r1, r4
   26c46:	4628      	mov	r0, r5
   26c48:	f00a fa53 	bl	310f2 <z_sched_prio_cmp>
   26c4c:	2800      	cmp	r0, #0
   26c4e:	dcf1      	bgt.n	26c34 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26c50:	2c00      	cmp	r4, #0
   26c52:	d0f6      	beq.n	26c42 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   26c54:	4b0a      	ldr	r3, [pc, #40]	; (26c80 <z_impl_k_yield+0x88>)
   26c56:	6a1b      	ldr	r3, [r3, #32]
   26c58:	429c      	cmp	r4, r3
   26c5a:	d0f1      	beq.n	26c40 <z_impl_k_yield+0x48>
   26c5c:	6824      	ldr	r4, [r4, #0]
   26c5e:	e7f0      	b.n	26c42 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   26c60:	4b07      	ldr	r3, [pc, #28]	; (26c80 <z_impl_k_yield+0x88>)
   26c62:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
   26c64:	f103 011c 	add.w	r1, r3, #28
   26c68:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   26c6a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   26c6c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   26c6e:	621d      	str	r5, [r3, #32]
	update_cache(1);
   26c70:	2001      	movs	r0, #1
   26c72:	f7ff fd95 	bl	267a0 <update_cache>
   26c76:	4630      	mov	r0, r6
   26c78:	f7f0 fdf8 	bl	1786c <arch_swap>
}
   26c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c7e:	bf00      	nop
   26c80:	2000522c 	.word	0x2000522c

00026c84 <z_tick_sleep>:
{
   26c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   26c88:	ea50 0301 	orrs.w	r3, r0, r1
   26c8c:	d038      	beq.n	26d00 <z_tick_sleep+0x7c>
   26c8e:	4604      	mov	r4, r0
   26c90:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   26c92:	f06f 0301 	mvn.w	r3, #1
   26c96:	1a1b      	subs	r3, r3, r0
   26c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c9c:	eb62 0201 	sbc.w	r2, r2, r1
   26ca0:	2b01      	cmp	r3, #1
   26ca2:	f172 0200 	sbcs.w	r2, r2, #0
   26ca6:	db2f      	blt.n	26d08 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26ca8:	f06f 0501 	mvn.w	r5, #1
   26cac:	1a2d      	subs	r5, r5, r0
   26cae:	f04f 0340 	mov.w	r3, #64	; 0x40
   26cb2:	f3ef 8811 	mrs	r8, BASEPRI
   26cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   26cba:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   26cbe:	4f14      	ldr	r7, [pc, #80]	; (26d10 <z_tick_sleep+0x8c>)
   26cc0:	68b8      	ldr	r0, [r7, #8]
   26cc2:	4b14      	ldr	r3, [pc, #80]	; (26d14 <z_tick_sleep+0x90>)
   26cc4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   26cc6:	f7ff fe6d 	bl	269a4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   26cca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   26ccc:	4622      	mov	r2, r4
   26cce:	4633      	mov	r3, r6
   26cd0:	4911      	ldr	r1, [pc, #68]	; (26d18 <z_tick_sleep+0x94>)
   26cd2:	3018      	adds	r0, #24
   26cd4:	f000 f910 	bl	26ef8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   26cd8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26cda:	7b53      	ldrb	r3, [r2, #13]
   26cdc:	f043 0310 	orr.w	r3, r3, #16
   26ce0:	7353      	strb	r3, [r2, #13]
   26ce2:	4640      	mov	r0, r8
   26ce4:	f7f0 fdc2 	bl	1786c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   26ce8:	f00a fbff 	bl	314ea <sys_clock_tick_get_32>
   26cec:	1a28      	subs	r0, r5, r0
   26cee:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   26cf2:	2801      	cmp	r0, #1
   26cf4:	f173 0300 	sbcs.w	r3, r3, #0
   26cf8:	da00      	bge.n	26cfc <z_tick_sleep+0x78>
	return 0;
   26cfa:	2000      	movs	r0, #0
}
   26cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   26d00:	f7ff ff7a 	bl	26bf8 <z_impl_k_yield>
		return 0;
   26d04:	2000      	movs	r0, #0
   26d06:	e7f9      	b.n	26cfc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   26d08:	f00a fbef 	bl	314ea <sys_clock_tick_get_32>
   26d0c:	1905      	adds	r5, r0, r4
   26d0e:	e7ce      	b.n	26cae <z_tick_sleep+0x2a>
   26d10:	2000522c 	.word	0x2000522c
   26d14:	2000525c 	.word	0x2000525c
   26d18:	00031271 	.word	0x00031271

00026d1c <z_impl_k_sleep>:
{
   26d1c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26d1e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   26d22:	bf08      	it	eq
   26d24:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   26d28:	d018      	beq.n	26d5c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   26d2a:	f7ff ffab 	bl	26c84 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   26d2e:	17c2      	asrs	r2, r0, #31
   26d30:	0151      	lsls	r1, r2, #5
   26d32:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   26d36:	0143      	lsls	r3, r0, #5
   26d38:	1a1b      	subs	r3, r3, r0
   26d3a:	eb61 0102 	sbc.w	r1, r1, r2
   26d3e:	0089      	lsls	r1, r1, #2
   26d40:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   26d44:	009b      	lsls	r3, r3, #2
   26d46:	181b      	adds	r3, r3, r0
   26d48:	eb42 0201 	adc.w	r2, r2, r1
   26d4c:	00d2      	lsls	r2, r2, #3
   26d4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   26d52:	f3c3 3310 	ubfx	r3, r3, #12, #17
   26d56:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   26d5a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   26d5c:	4b03      	ldr	r3, [pc, #12]	; (26d6c <z_impl_k_sleep+0x50>)
   26d5e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   26d60:	f7ff feb6 	bl	26ad0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   26d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d68:	e7f7      	b.n	26d5a <z_impl_k_sleep+0x3e>
   26d6a:	bf00      	nop
   26d6c:	2000522c 	.word	0x2000522c

00026d70 <z_impl_k_usleep>:
{
   26d70:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   26d72:	17c1      	asrs	r1, r0, #31
   26d74:	03c9      	lsls	r1, r1, #15
   26d76:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   26d7a:	03c0      	lsls	r0, r0, #15
   26d7c:	4b15      	ldr	r3, [pc, #84]	; (26dd4 <z_impl_k_usleep+0x64>)
   26d7e:	18c0      	adds	r0, r0, r3
   26d80:	4a15      	ldr	r2, [pc, #84]	; (26dd8 <z_impl_k_usleep+0x68>)
   26d82:	f04f 0300 	mov.w	r3, #0
   26d86:	f141 0100 	adc.w	r1, r1, #0
   26d8a:	f7d9 f9b9 	bl	100 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   26d8e:	17c1      	asrs	r1, r0, #31
   26d90:	f7ff ff78 	bl	26c84 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   26d94:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   26d98:	ea4f 124c 	mov.w	r2, ip, lsl #5
   26d9c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   26da0:	0143      	lsls	r3, r0, #5
   26da2:	1a1b      	subs	r3, r3, r0
   26da4:	eb62 020c 	sbc.w	r2, r2, ip
   26da8:	0252      	lsls	r2, r2, #9
   26daa:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   26dae:	025b      	lsls	r3, r3, #9
   26db0:	181b      	adds	r3, r3, r0
   26db2:	eb4c 0202 	adc.w	r2, ip, r2
   26db6:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   26dba:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   26dbe:	0199      	lsls	r1, r3, #6
   26dc0:	1acb      	subs	r3, r1, r3
   26dc2:	eb6e 0e02 	sbc.w	lr, lr, r2
   26dc6:	181b      	adds	r3, r3, r0
   26dc8:	eb4c 000e 	adc.w	r0, ip, lr
   26dcc:	0bdb      	lsrs	r3, r3, #15
}
   26dce:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   26dd2:	bd08      	pop	{r3, pc}
   26dd4:	000f423f 	.word	0x000f423f
   26dd8:	000f4240 	.word	0x000f4240

00026ddc <z_impl_z_current_get>:
}
   26ddc:	4b01      	ldr	r3, [pc, #4]	; (26de4 <z_impl_z_current_get+0x8>)
   26dde:	6898      	ldr	r0, [r3, #8]
   26de0:	4770      	bx	lr
   26de2:	bf00      	nop
   26de4:	2000522c 	.word	0x2000522c

00026de8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   26de8:	b570      	push	{r4, r5, r6, lr}
   26dea:	f04f 0340 	mov.w	r3, #64	; 0x40
   26dee:	f3ef 8511 	mrs	r5, BASEPRI
   26df2:	f383 8812 	msr	BASEPRI_MAX, r3
   26df6:	f3bf 8f6f 	isb	sy
   26dfa:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   26dfc:	7b03      	ldrb	r3, [r0, #12]
   26dfe:	f013 0f01 	tst.w	r3, #1
   26e02:	d109      	bne.n	26e18 <z_thread_abort+0x30>
   26e04:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   26e06:	7b43      	ldrb	r3, [r0, #13]
   26e08:	f013 0f08 	tst.w	r3, #8
   26e0c:	d00f      	beq.n	26e2e <z_thread_abort+0x46>
	__asm__ volatile(
   26e0e:	f385 8811 	msr	BASEPRI, r5
   26e12:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   26e16:	e009      	b.n	26e2c <z_thread_abort+0x44>
   26e18:	f385 8811 	msr	BASEPRI, r5
   26e1c:	f3bf 8f6f 	isb	sy
		k_panic();
   26e20:	4040      	eors	r0, r0
   26e22:	f380 8811 	msr	BASEPRI, r0
   26e26:	f04f 0004 	mov.w	r0, #4
   26e2a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   26e2c:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   26e2e:	f7ff fea9 	bl	26b84 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   26e32:	4b08      	ldr	r3, [pc, #32]	; (26e54 <z_thread_abort+0x6c>)
   26e34:	689b      	ldr	r3, [r3, #8]
   26e36:	42a3      	cmp	r3, r4
   26e38:	d004      	beq.n	26e44 <z_thread_abort+0x5c>
   26e3a:	f386 8811 	msr	BASEPRI, r6
   26e3e:	f3bf 8f6f 	isb	sy
   26e42:	e7f3      	b.n	26e2c <z_thread_abort+0x44>
   26e44:	f3ef 8305 	mrs	r3, IPSR
   26e48:	2b00      	cmp	r3, #0
   26e4a:	d1f6      	bne.n	26e3a <z_thread_abort+0x52>
   26e4c:	4628      	mov	r0, r5
   26e4e:	f7f0 fd0d 	bl	1786c <arch_swap>
	return ret;
   26e52:	e7f2      	b.n	26e3a <z_thread_abort+0x52>
   26e54:	2000522c 	.word	0x2000522c

00026e58 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   26e58:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   26e5c:	b083      	sub	sp, #12
   26e5e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26e60:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   26e64:	e9cd bc00 	strd	fp, ip, [sp]
   26e68:	f7ff fdb8 	bl	269dc <z_pend_curr>

	if (data != NULL) {
   26e6c:	b11c      	cbz	r4, 26e76 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   26e6e:	4b03      	ldr	r3, [pc, #12]	; (26e7c <z_sched_wait+0x24>)
   26e70:	689b      	ldr	r3, [r3, #8]
   26e72:	695b      	ldr	r3, [r3, #20]
   26e74:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26e76:	b003      	add	sp, #12
   26e78:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   26e7c:	2000522c 	.word	0x2000522c

00026e80 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   26e80:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   26e82:	4806      	ldr	r0, [pc, #24]	; (26e9c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   26e84:	4a06      	ldr	r2, [pc, #24]	; (26ea0 <z_data_copy+0x20>)
   26e86:	1a12      	subs	r2, r2, r0
   26e88:	4906      	ldr	r1, [pc, #24]	; (26ea4 <z_data_copy+0x24>)
   26e8a:	f009 fd8d 	bl	309a8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   26e8e:	4a06      	ldr	r2, [pc, #24]	; (26ea8 <z_data_copy+0x28>)
   26e90:	4906      	ldr	r1, [pc, #24]	; (26eac <z_data_copy+0x2c>)
   26e92:	4807      	ldr	r0, [pc, #28]	; (26eb0 <z_data_copy+0x30>)
   26e94:	f009 fd88 	bl	309a8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   26e98:	bd08      	pop	{r3, pc}
   26e9a:	bf00      	nop
   26e9c:	20000000 	.word	0x20000000
   26ea0:	20000d54 	.word	0x20000d54
   26ea4:	000354c8 	.word	0x000354c8
   26ea8:	00000000 	.word	0x00000000
   26eac:	000354c8 	.word	0x000354c8
   26eb0:	20000000 	.word	0x20000000

00026eb4 <first>:
	return list->head == list;
   26eb4:	4b03      	ldr	r3, [pc, #12]	; (26ec4 <first+0x10>)
   26eb6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26eb8:	4298      	cmp	r0, r3
   26eba:	d000      	beq.n	26ebe <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   26ebc:	4770      	bx	lr
   26ebe:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   26ec0:	e7fc      	b.n	26ebc <first+0x8>
   26ec2:	bf00      	nop
   26ec4:	20000884 	.word	0x20000884

00026ec8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26ec8:	b130      	cbz	r0, 26ed8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   26eca:	4a04      	ldr	r2, [pc, #16]	; (26edc <next+0x14>)
   26ecc:	6852      	ldr	r2, [r2, #4]
   26ece:	4290      	cmp	r0, r2
   26ed0:	d001      	beq.n	26ed6 <next+0xe>
   26ed2:	6800      	ldr	r0, [r0, #0]
   26ed4:	4770      	bx	lr
   26ed6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   26ed8:	4770      	bx	lr
   26eda:	bf00      	nop
   26edc:	20000884 	.word	0x20000884

00026ee0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   26ee0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26ee2:	4b04      	ldr	r3, [pc, #16]	; (26ef4 <elapsed+0x14>)
   26ee4:	681b      	ldr	r3, [r3, #0]
   26ee6:	b10b      	cbz	r3, 26eec <elapsed+0xc>
   26ee8:	2000      	movs	r0, #0
}
   26eea:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26eec:	f7fc f98a 	bl	23204 <sys_clock_elapsed>
   26ef0:	e7fb      	b.n	26eea <elapsed+0xa>
   26ef2:	bf00      	nop
   26ef4:	2000526c 	.word	0x2000526c

00026ef8 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26efc:	bf08      	it	eq
   26efe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   26f02:	d074      	beq.n	26fee <z_add_timeout+0xf6>
{
   26f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26f08:	4604      	mov	r4, r0
   26f0a:	4692      	mov	sl, r2
   26f0c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   26f0e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   26f10:	2300      	movs	r3, #0
	__asm__ volatile(
   26f12:	f04f 0240 	mov.w	r2, #64	; 0x40
   26f16:	f3ef 8711 	mrs	r7, BASEPRI
   26f1a:	f382 8812 	msr	BASEPRI_MAX, r2
   26f1e:	f3bf 8f6f 	isb	sy
   26f22:	e026      	b.n	26f72 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   26f24:	f11a 0801 	adds.w	r8, sl, #1
   26f28:	f145 0900 	adc.w	r9, r5, #0
   26f2c:	f7ff ffd8 	bl	26ee0 <elapsed>
   26f30:	eb18 0300 	adds.w	r3, r8, r0
   26f34:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   26f38:	6123      	str	r3, [r4, #16]
   26f3a:	6160      	str	r0, [r4, #20]
   26f3c:	e03b      	b.n	26fb6 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   26f3e:	1a52      	subs	r2, r2, r1
   26f40:	eb66 0303 	sbc.w	r3, r6, r3
   26f44:	6102      	str	r2, [r0, #16]
   26f46:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   26f48:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   26f4a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   26f4c:	6020      	str	r0, [r4, #0]
	prev->next = node;
   26f4e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26f50:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   26f52:	e005      	b.n	26f60 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   26f54:	4b26      	ldr	r3, [pc, #152]	; (26ff0 <z_add_timeout+0xf8>)
   26f56:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   26f58:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   26f5a:	6062      	str	r2, [r4, #4]
	tail->next = node;
   26f5c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26f5e:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   26f60:	f7ff ffa8 	bl	26eb4 <first>
   26f64:	4284      	cmp	r4, r0
   26f66:	d03a      	beq.n	26fde <z_add_timeout+0xe6>
	__asm__ volatile(
   26f68:	f387 8811 	msr	BASEPRI, r7
   26f6c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   26f70:	2301      	movs	r3, #1
   26f72:	2b00      	cmp	r3, #0
   26f74:	d139      	bne.n	26fea <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   26f76:	4653      	mov	r3, sl
   26f78:	f06f 0101 	mvn.w	r1, #1
   26f7c:	ebb1 010a 	subs.w	r1, r1, sl
   26f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26f84:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26f88:	2a00      	cmp	r2, #0
   26f8a:	dbcb      	blt.n	26f24 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   26f8c:	4a19      	ldr	r2, [pc, #100]	; (26ff4 <z_add_timeout+0xfc>)
   26f8e:	6811      	ldr	r1, [r2, #0]
   26f90:	6852      	ldr	r2, [r2, #4]
   26f92:	185b      	adds	r3, r3, r1
   26f94:	eb42 0205 	adc.w	r2, r2, r5
   26f98:	f06f 0101 	mvn.w	r1, #1
   26f9c:	1ac9      	subs	r1, r1, r3
   26f9e:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   26fa2:	4608      	mov	r0, r1
   26fa4:	461a      	mov	r2, r3
   26fa6:	2901      	cmp	r1, #1
   26fa8:	f173 0300 	sbcs.w	r3, r3, #0
   26fac:	da01      	bge.n	26fb2 <z_add_timeout+0xba>
   26fae:	2001      	movs	r0, #1
   26fb0:	2200      	movs	r2, #0
   26fb2:	6120      	str	r0, [r4, #16]
   26fb4:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   26fb6:	f7ff ff7d 	bl	26eb4 <first>
   26fba:	2800      	cmp	r0, #0
   26fbc:	d0ca      	beq.n	26f54 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   26fbe:	6902      	ldr	r2, [r0, #16]
   26fc0:	6946      	ldr	r6, [r0, #20]
   26fc2:	6921      	ldr	r1, [r4, #16]
   26fc4:	6963      	ldr	r3, [r4, #20]
   26fc6:	4291      	cmp	r1, r2
   26fc8:	eb73 0e06 	sbcs.w	lr, r3, r6
   26fcc:	dbb7      	blt.n	26f3e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   26fce:	1a89      	subs	r1, r1, r2
   26fd0:	eb63 0306 	sbc.w	r3, r3, r6
   26fd4:	6121      	str	r1, [r4, #16]
   26fd6:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   26fd8:	f7ff ff76 	bl	26ec8 <next>
   26fdc:	e7ed      	b.n	26fba <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
   26fde:	f00a fa32 	bl	31446 <next_timeout>
   26fe2:	2100      	movs	r1, #0
   26fe4:	f7fc f8d2 	bl	2318c <sys_clock_set_timeout>
   26fe8:	e7be      	b.n	26f68 <z_add_timeout+0x70>
		}
	}
}
   26fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26fee:	4770      	bx	lr
   26ff0:	20000884 	.word	0x20000884
   26ff4:	20003050 	.word	0x20003050

00026ff8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   26ff8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   26ffa:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ffe:	f3ef 8611 	mrs	r6, BASEPRI
   27002:	f383 8812 	msr	BASEPRI_MAX, r3
   27006:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2700a:	4b2b      	ldr	r3, [pc, #172]	; (270b8 <sys_clock_announce+0xc0>)
   2700c:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
   2700e:	f7ff ff51 	bl	26eb4 <first>
   27012:	4604      	mov	r4, r0

	for (t = first();
   27014:	e024      	b.n	27060 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   27016:	4a29      	ldr	r2, [pc, #164]	; (270bc <sys_clock_announce+0xc4>)
   27018:	6813      	ldr	r3, [r2, #0]
   2701a:	6851      	ldr	r1, [r2, #4]
   2701c:	195b      	adds	r3, r3, r5
   2701e:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   27022:	6013      	str	r3, [r2, #0]
   27024:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   27026:	2200      	movs	r2, #0
   27028:	2300      	movs	r3, #0
   2702a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2702e:	4620      	mov	r0, r4
   27030:	f00a f9f2 	bl	31418 <remove_timeout>
	__asm__ volatile(
   27034:	f386 8811 	msr	BASEPRI, r6
   27038:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   2703c:	68a3      	ldr	r3, [r4, #8]
   2703e:	4620      	mov	r0, r4
   27040:	4798      	blx	r3
	__asm__ volatile(
   27042:	f04f 0340 	mov.w	r3, #64	; 0x40
   27046:	f3ef 8611 	mrs	r6, BASEPRI
   2704a:	f383 8812 	msr	BASEPRI_MAX, r3
   2704e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   27052:	4a19      	ldr	r2, [pc, #100]	; (270b8 <sys_clock_announce+0xc0>)
   27054:	6813      	ldr	r3, [r2, #0]
   27056:	1b5b      	subs	r3, r3, r5
   27058:	6013      	str	r3, [r2, #0]
	     t = first()) {
   2705a:	f7ff ff2b 	bl	26eb4 <first>
   2705e:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
   27060:	b13c      	cbz	r4, 27072 <sys_clock_announce+0x7a>
   27062:	6925      	ldr	r5, [r4, #16]
   27064:	6961      	ldr	r1, [r4, #20]
   27066:	4b14      	ldr	r3, [pc, #80]	; (270b8 <sys_clock_announce+0xc0>)
   27068:	681a      	ldr	r2, [r3, #0]
   2706a:	17d3      	asrs	r3, r2, #31
   2706c:	42aa      	cmp	r2, r5
   2706e:	418b      	sbcs	r3, r1
   27070:	dad1      	bge.n	27016 <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
   27072:	b144      	cbz	r4, 27086 <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
   27074:	6923      	ldr	r3, [r4, #16]
   27076:	6962      	ldr	r2, [r4, #20]
   27078:	490f      	ldr	r1, [pc, #60]	; (270b8 <sys_clock_announce+0xc0>)
   2707a:	6809      	ldr	r1, [r1, #0]
   2707c:	1a5b      	subs	r3, r3, r1
   2707e:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   27082:	6123      	str	r3, [r4, #16]
   27084:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   27086:	4a0d      	ldr	r2, [pc, #52]	; (270bc <sys_clock_announce+0xc4>)
   27088:	4d0b      	ldr	r5, [pc, #44]	; (270b8 <sys_clock_announce+0xc0>)
   2708a:	6828      	ldr	r0, [r5, #0]
   2708c:	6813      	ldr	r3, [r2, #0]
   2708e:	6851      	ldr	r1, [r2, #4]
   27090:	181b      	adds	r3, r3, r0
   27092:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   27096:	6013      	str	r3, [r2, #0]
   27098:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   2709a:	2400      	movs	r4, #0
   2709c:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2709e:	f00a f9d2 	bl	31446 <next_timeout>
   270a2:	4621      	mov	r1, r4
   270a4:	f7fc f872 	bl	2318c <sys_clock_set_timeout>
	__asm__ volatile(
   270a8:	f386 8811 	msr	BASEPRI, r6
   270ac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   270b0:	f7ff fbe4 	bl	2687c <z_time_slice>
#endif
}
   270b4:	bd70      	pop	{r4, r5, r6, pc}
   270b6:	bf00      	nop
   270b8:	2000526c 	.word	0x2000526c
   270bc:	20003050 	.word	0x20003050

000270c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   270c0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   270c2:	2200      	movs	r2, #0
	__asm__ volatile(
   270c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   270c8:	f3ef 8411 	mrs	r4, BASEPRI
   270cc:	f383 8812 	msr	BASEPRI_MAX, r3
   270d0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   270d4:	4613      	mov	r3, r2
   270d6:	4611      	mov	r1, r2
   270d8:	e00c      	b.n	270f4 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   270da:	f7ff ff01 	bl	26ee0 <elapsed>
   270de:	4a07      	ldr	r2, [pc, #28]	; (270fc <sys_clock_tick_get+0x3c>)
   270e0:	6813      	ldr	r3, [r2, #0]
   270e2:	6851      	ldr	r1, [r2, #4]
   270e4:	18c3      	adds	r3, r0, r3
   270e6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   270ea:	f384 8811 	msr	BASEPRI, r4
   270ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   270f2:	2201      	movs	r2, #1
   270f4:	2a00      	cmp	r2, #0
   270f6:	d0f0      	beq.n	270da <sys_clock_tick_get+0x1a>
	}
	return t;
}
   270f8:	4618      	mov	r0, r3
   270fa:	bd10      	pop	{r4, pc}
   270fc:	20003050 	.word	0x20003050

00027100 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   27100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   27102:	f04f 0240 	mov.w	r2, #64	; 0x40
   27106:	f3ef 8311 	mrs	r3, BASEPRI
   2710a:	f382 8812 	msr	BASEPRI_MAX, r2
   2710e:	f3bf 8f6f 	isb	sy
   27112:	461a      	mov	r2, r3
   27114:	461d      	mov	r5, r3
	return node->next != NULL;
   27116:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   27118:	b123      	cbz	r3, 27124 <z_timer_expiration_handler+0x24>
	__asm__ volatile(
   2711a:	f382 8811 	msr	BASEPRI, r2
   2711e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   27122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27124:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27126:	6a82      	ldr	r2, [r0, #40]	; 0x28
   27128:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2712a:	ea52 0103 	orrs.w	r1, r2, r3
   2712e:	d005      	beq.n	2713c <z_timer_expiration_handler+0x3c>
   27130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27134:	bf08      	it	eq
   27136:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2713a:	d129      	bne.n	27190 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
   2713c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2713e:	3301      	adds	r3, #1
   27140:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   27142:	6a23      	ldr	r3, [r4, #32]
   27144:	b17b      	cbz	r3, 27166 <z_timer_expiration_handler+0x66>
   27146:	f385 8811 	msr	BASEPRI, r5
   2714a:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   2714e:	6a23      	ldr	r3, [r4, #32]
   27150:	4620      	mov	r0, r4
   27152:	4798      	blx	r3
	__asm__ volatile(
   27154:	f04f 0240 	mov.w	r2, #64	; 0x40
   27158:	f3ef 8311 	mrs	r3, BASEPRI
   2715c:	f382 8812 	msr	BASEPRI_MAX, r2
   27160:	f3bf 8f6f 	isb	sy
   27164:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   27166:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   2716a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2716c:	42a3      	cmp	r3, r4
   2716e:	d03f      	beq.n	271f0 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
   27170:	2c00      	cmp	r4, #0
   27172:	d03d      	beq.n	271f0 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
   27174:	4620      	mov	r0, r4
   27176:	f009 ffc6 	bl	31106 <z_unpend_thread_no_timeout>
   2717a:	2300      	movs	r3, #0
   2717c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   27180:	f385 8811 	msr	BASEPRI, r5
   27184:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   27188:	4620      	mov	r0, r4
   2718a:	f00a f82b 	bl	311e4 <z_ready_thread>
   2718e:	e7c8      	b.n	27122 <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
   27190:	4616      	mov	r6, r2
   27192:	461f      	mov	r7, r3
   27194:	2a01      	cmp	r2, #1
   27196:	f173 0300 	sbcs.w	r3, r3, #0
   2719a:	da01      	bge.n	271a0 <z_timer_expiration_handler+0xa0>
   2719c:	2601      	movs	r6, #1
   2719e:	2700      	movs	r7, #0
   271a0:	3e01      	subs	r6, #1
   271a2:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   271a6:	f00a f9a4 	bl	314f2 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   271aa:	3001      	adds	r0, #1
   271ac:	f141 0100 	adc.w	r1, r1, #0
   271b0:	1980      	adds	r0, r0, r6
   271b2:	eb47 0101 	adc.w	r1, r7, r1
   271b6:	2801      	cmp	r0, #1
   271b8:	f171 0100 	sbcs.w	r1, r1, #0
   271bc:	da08      	bge.n	271d0 <z_timer_expiration_handler+0xd0>
   271be:	f06f 0201 	mvn.w	r2, #1
   271c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   271c6:	490d      	ldr	r1, [pc, #52]	; (271fc <z_timer_expiration_handler+0xfc>)
   271c8:	4620      	mov	r0, r4
   271ca:	f7ff fe95 	bl	26ef8 <z_add_timeout>
   271ce:	e7b5      	b.n	2713c <z_timer_expiration_handler+0x3c>
   271d0:	f00a f98f 	bl	314f2 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   271d4:	3001      	adds	r0, #1
   271d6:	f141 0100 	adc.w	r1, r1, #0
   271da:	1980      	adds	r0, r0, r6
   271dc:	eb47 0301 	adc.w	r3, r7, r1
   271e0:	f06f 0201 	mvn.w	r2, #1
   271e4:	1a12      	subs	r2, r2, r0
   271e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   271ea:	eb61 0303 	sbc.w	r3, r1, r3
   271ee:	e7ea      	b.n	271c6 <z_timer_expiration_handler+0xc6>
   271f0:	f385 8811 	msr	BASEPRI, r5
   271f4:	f3bf 8f6f 	isb	sy
		return;
   271f8:	e793      	b.n	27122 <z_timer_expiration_handler+0x22>
   271fa:	bf00      	nop
   271fc:	00027101 	.word	0x00027101

00027200 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   27200:	b570      	push	{r4, r5, r6, lr}
   27202:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27208:	bf08      	it	eq
   2720a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2720e:	d01a      	beq.n	27246 <z_impl_k_timer_start+0x46>
   27210:	4606      	mov	r6, r0
   27212:	4614      	mov	r4, r2
   27214:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   27216:	f06f 0201 	mvn.w	r2, #1
   2721a:	1b12      	subs	r2, r2, r4
   2721c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27220:	eb62 0203 	sbc.w	r2, r2, r3
   27224:	2a00      	cmp	r2, #0
   27226:	db0f      	blt.n	27248 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   27228:	4630      	mov	r0, r6
   2722a:	f00a f929 	bl	31480 <z_abort_timeout>
	timer->period = period;
   2722e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   27232:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
   27236:	2300      	movs	r3, #0
   27238:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2723a:	4622      	mov	r2, r4
   2723c:	462b      	mov	r3, r5
   2723e:	4907      	ldr	r1, [pc, #28]	; (2725c <z_impl_k_timer_start+0x5c>)
   27240:	4630      	mov	r0, r6
   27242:	f7ff fe59 	bl	26ef8 <z_add_timeout>
		     duration);
}
   27246:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
   27248:	2c01      	cmp	r4, #1
   2724a:	f171 0100 	sbcs.w	r1, r1, #0
   2724e:	da01      	bge.n	27254 <z_impl_k_timer_start+0x54>
   27250:	2401      	movs	r4, #1
   27252:	2500      	movs	r5, #0
   27254:	3c01      	subs	r4, #1
   27256:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   2725a:	e7e5      	b.n	27228 <z_impl_k_timer_start+0x28>
   2725c:	00027101 	.word	0x00027101

00027260 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   27260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27264:	b083      	sub	sp, #12
   27266:	4607      	mov	r7, r0
   27268:	4616      	mov	r6, r2
   2726a:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2726c:	4b28      	ldr	r3, [pc, #160]	; (27310 <z_impl_k_poll+0xb0>)
   2726e:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   27270:	2301      	movs	r3, #1
   27272:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   27276:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2727a:	ea55 0302 	orrs.w	r3, r5, r2
   2727e:	bf0c      	ite	eq
   27280:	2301      	moveq	r3, #1
   27282:	2300      	movne	r3, #0
   27284:	f104 0260 	add.w	r2, r4, #96	; 0x60
   27288:	f00a fa6d 	bl	31766 <register_events>
   2728c:	4680      	mov	r8, r0
	__asm__ volatile(
   2728e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27292:	f3ef 8111 	mrs	r1, BASEPRI
   27296:	f383 8812 	msr	BASEPRI_MAX, r3
   2729a:	f3bf 8f6f 	isb	sy
   2729e:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   272a0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   272a4:	b30b      	cbz	r3, 272ea <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   272a6:	2300      	movs	r3, #0
   272a8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   272ac:	ea55 0306 	orrs.w	r3, r5, r6
   272b0:	d026      	beq.n	27300 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   272b2:	9600      	str	r6, [sp, #0]
   272b4:	9501      	str	r5, [sp, #4]
   272b6:	4a17      	ldr	r2, [pc, #92]	; (27314 <z_impl_k_poll+0xb4>)
   272b8:	4817      	ldr	r0, [pc, #92]	; (27318 <z_impl_k_poll+0xb8>)
   272ba:	f7ff fb8f 	bl	269dc <z_pend_curr>
   272be:	4604      	mov	r4, r0
   272c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   272c4:	f3ef 8211 	mrs	r2, BASEPRI
   272c8:	f383 8812 	msr	BASEPRI_MAX, r3
   272cc:	f3bf 8f6f 	isb	sy
   272d0:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   272d2:	4641      	mov	r1, r8
   272d4:	4638      	mov	r0, r7
   272d6:	f00a f9ba 	bl	3164e <clear_event_registrations>
	__asm__ volatile(
   272da:	f385 8811 	msr	BASEPRI, r5
   272de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   272e2:	4620      	mov	r0, r4
   272e4:	b003      	add	sp, #12
   272e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   272ea:	460a      	mov	r2, r1
   272ec:	4601      	mov	r1, r0
   272ee:	4638      	mov	r0, r7
   272f0:	f00a f9ad 	bl	3164e <clear_event_registrations>
   272f4:	f389 8811 	msr	BASEPRI, r9
   272f8:	f3bf 8f6f 	isb	sy
		return 0;
   272fc:	2400      	movs	r4, #0
   272fe:	e7f0      	b.n	272e2 <z_impl_k_poll+0x82>
   27300:	f381 8811 	msr	BASEPRI, r1
   27304:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   27308:	f06f 040a 	mvn.w	r4, #10
   2730c:	e7e9      	b.n	272e2 <z_impl_k_poll+0x82>
   2730e:	bf00      	nop
   27310:	2000522c 	.word	0x2000522c
   27314:	2000088c 	.word	0x2000088c
   27318:	20005270 	.word	0x20005270

0002731c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2731c:	b538      	push	{r3, r4, r5, lr}
   2731e:	4603      	mov	r3, r0
	__asm__ volatile(
   27320:	f04f 0240 	mov.w	r2, #64	; 0x40
   27324:	f3ef 8511 	mrs	r5, BASEPRI
   27328:	f382 8812 	msr	BASEPRI_MAX, r2
   2732c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   27330:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   27332:	2201      	movs	r2, #1
   27334:	6082      	str	r2, [r0, #8]
	return list->head == list;
   27336:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   27338:	4283      	cmp	r3, r0
   2733a:	d010      	beq.n	2735e <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   2733c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2733e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   27340:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27342:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27344:	2300      	movs	r3, #0
   27346:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   27348:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2734a:	2101      	movs	r1, #1
   2734c:	f00a fa95 	bl	3187a <signal_poll_event>
   27350:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   27352:	4629      	mov	r1, r5
   27354:	4805      	ldr	r0, [pc, #20]	; (2736c <z_impl_k_poll_signal_raise+0x50>)
   27356:	f7ff f9f3 	bl	26740 <z_reschedule>
	return rc;
}
   2735a:	4620      	mov	r0, r4
   2735c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2735e:	f385 8811 	msr	BASEPRI, r5
   27362:	f3bf 8f6f 	isb	sy
		return 0;
   27366:	2400      	movs	r4, #0
   27368:	e7f7      	b.n	2735a <z_impl_k_poll_signal_raise+0x3e>
   2736a:	bf00      	nop
   2736c:	20005270 	.word	0x20005270

00027370 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   27370:	b538      	push	{r3, r4, r5, lr}
   27372:	4604      	mov	r4, r0
   27374:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   27376:	f009 fbfd 	bl	30b74 <k_is_in_isr>
   2737a:	b948      	cbnz	r0, 27390 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2737c:	4b05      	ldr	r3, [pc, #20]	; (27394 <z_thread_aligned_alloc+0x24>)
   2737e:	689b      	ldr	r3, [r3, #8]
   27380:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   27384:	b118      	cbz	r0, 2738e <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   27386:	462a      	mov	r2, r5
   27388:	4621      	mov	r1, r4
   2738a:	f00a fac7 	bl	3191c <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2738e:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   27390:	2000      	movs	r0, #0
	return ret;
   27392:	e7fc      	b.n	2738e <z_thread_aligned_alloc+0x1e>
   27394:	2000522c 	.word	0x2000522c

00027398 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   27398:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2739a:	4802      	ldr	r0, [pc, #8]	; (273a4 <boot_banner+0xc>)
   2739c:	f003 f86d 	bl	2a47a <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   273a0:	bd08      	pop	{r3, pc}
   273a2:	bf00      	nop
   273a4:	00035210 	.word	0x00035210

000273a8 <ocrypto_ecdh_p256_public_key>:
   273a8:	b530      	push	{r4, r5, lr}
   273aa:	b099      	sub	sp, #100	; 0x64
   273ac:	4605      	mov	r5, r0
   273ae:	4668      	mov	r0, sp
   273b0:	f000 f828 	bl	27404 <ocrypto_sc_p256_from32bytes>
   273b4:	4669      	mov	r1, sp
   273b6:	4604      	mov	r4, r0
   273b8:	a808      	add	r0, sp, #32
   273ba:	f000 fa53 	bl	27864 <ocrypto_curve_p256_scalarmult_base>
   273be:	a908      	add	r1, sp, #32
   273c0:	4304      	orrs	r4, r0
   273c2:	4628      	mov	r0, r5
   273c4:	f000 f98a 	bl	276dc <ocrypto_curve_p256_to64bytes>
   273c8:	4620      	mov	r0, r4
   273ca:	b019      	add	sp, #100	; 0x64
   273cc:	bd30      	pop	{r4, r5, pc}
   273ce:	bf00      	nop

000273d0 <ocrypto_ecdh_p256_common_secret>:
   273d0:	b570      	push	{r4, r5, r6, lr}
   273d2:	b098      	sub	sp, #96	; 0x60
   273d4:	4605      	mov	r5, r0
   273d6:	4668      	mov	r0, sp
   273d8:	4616      	mov	r6, r2
   273da:	f000 f813 	bl	27404 <ocrypto_sc_p256_from32bytes>
   273de:	4631      	mov	r1, r6
   273e0:	4604      	mov	r4, r0
   273e2:	a808      	add	r0, sp, #32
   273e4:	f000 f946 	bl	27674 <ocrypto_curve_p256_from64bytes>
   273e8:	a908      	add	r1, sp, #32
   273ea:	466a      	mov	r2, sp
   273ec:	4304      	orrs	r4, r0
   273ee:	4608      	mov	r0, r1
   273f0:	f000 f982 	bl	276f8 <ocrypto_curve_p256_scalarmult>
   273f4:	a908      	add	r1, sp, #32
   273f6:	4304      	orrs	r4, r0
   273f8:	4628      	mov	r0, r5
   273fa:	f000 f96d 	bl	276d8 <ocrypto_curve_p256_to32bytes>
   273fe:	4620      	mov	r0, r4
   27400:	b018      	add	sp, #96	; 0x60
   27402:	bd70      	pop	{r4, r5, r6, pc}

00027404 <ocrypto_sc_p256_from32bytes>:
   27404:	b570      	push	{r4, r5, r6, lr}
   27406:	680b      	ldr	r3, [r1, #0]
   27408:	4e12      	ldr	r6, [pc, #72]	; (27454 <ocrypto_sc_p256_from32bytes+0x50>)
   2740a:	ba1b      	rev	r3, r3
   2740c:	61c3      	str	r3, [r0, #28]
   2740e:	684b      	ldr	r3, [r1, #4]
   27410:	ba1b      	rev	r3, r3
   27412:	6183      	str	r3, [r0, #24]
   27414:	688b      	ldr	r3, [r1, #8]
   27416:	ba1b      	rev	r3, r3
   27418:	6143      	str	r3, [r0, #20]
   2741a:	68cb      	ldr	r3, [r1, #12]
   2741c:	ba1b      	rev	r3, r3
   2741e:	6103      	str	r3, [r0, #16]
   27420:	690b      	ldr	r3, [r1, #16]
   27422:	ba1b      	rev	r3, r3
   27424:	60c3      	str	r3, [r0, #12]
   27426:	694b      	ldr	r3, [r1, #20]
   27428:	ba1b      	rev	r3, r3
   2742a:	6083      	str	r3, [r0, #8]
   2742c:	698b      	ldr	r3, [r1, #24]
   2742e:	ba1b      	rev	r3, r3
   27430:	6043      	str	r3, [r0, #4]
   27432:	69cb      	ldr	r3, [r1, #28]
   27434:	ba1b      	rev	r3, r3
   27436:	4632      	mov	r2, r6
   27438:	6003      	str	r3, [r0, #0]
   2743a:	4601      	mov	r1, r0
   2743c:	4604      	mov	r4, r0
   2743e:	f7d8 fe99 	bl	174 <ocrypto_bigint_sub256>
   27442:	4631      	mov	r1, r6
   27444:	4605      	mov	r5, r0
   27446:	4602      	mov	r2, r0
   27448:	4620      	mov	r0, r4
   2744a:	f7d8 feb3 	bl	1b4 <ocrypto_bigint_cadd256>
   2744e:	1e68      	subs	r0, r5, #1
   27450:	bd70      	pop	{r4, r5, r6, pc}
   27452:	bf00      	nop
   27454:	00035240 	.word	0x00035240

00027458 <p256_zdblu>:
   27458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2745c:	b088      	sub	sp, #32
   2745e:	460c      	mov	r4, r1
   27460:	4606      	mov	r6, r0
   27462:	f102 0120 	add.w	r1, r2, #32
   27466:	4668      	mov	r0, sp
   27468:	f106 0720 	add.w	r7, r6, #32
   2746c:	4690      	mov	r8, r2
   2746e:	f7d9 f97b 	bl	768 <ocrypto_mod_p256_sqr>
   27472:	466a      	mov	r2, sp
   27474:	4669      	mov	r1, sp
   27476:	4668      	mov	r0, sp
   27478:	f7d9 f898 	bl	5ac <ocrypto_mod_p256_add>
   2747c:	4669      	mov	r1, sp
   2747e:	4638      	mov	r0, r7
   27480:	f7d9 f972 	bl	768 <ocrypto_mod_p256_sqr>
   27484:	463a      	mov	r2, r7
   27486:	4639      	mov	r1, r7
   27488:	4638      	mov	r0, r7
   2748a:	f104 0520 	add.w	r5, r4, #32
   2748e:	f7d9 f88d 	bl	5ac <ocrypto_mod_p256_add>
   27492:	466a      	mov	r2, sp
   27494:	4669      	mov	r1, sp
   27496:	4668      	mov	r0, sp
   27498:	f7d9 f888 	bl	5ac <ocrypto_mod_p256_add>
   2749c:	4641      	mov	r1, r8
   2749e:	4628      	mov	r0, r5
   274a0:	f7d9 f962 	bl	768 <ocrypto_mod_p256_sqr>
   274a4:	466a      	mov	r2, sp
   274a6:	4641      	mov	r1, r8
   274a8:	4630      	mov	r0, r6
   274aa:	f7d9 f945 	bl	738 <ocrypto_mod_p256_mul>
   274ae:	462a      	mov	r2, r5
   274b0:	4629      	mov	r1, r5
   274b2:	4668      	mov	r0, sp
   274b4:	f7d9 f87a 	bl	5ac <ocrypto_mod_p256_add>
   274b8:	462a      	mov	r2, r5
   274ba:	4669      	mov	r1, sp
   274bc:	4668      	mov	r0, sp
   274be:	f7d9 f875 	bl	5ac <ocrypto_mod_p256_add>
   274c2:	4a12      	ldr	r2, [pc, #72]	; (2750c <p256_zdblu+0xb4>)
   274c4:	4669      	mov	r1, sp
   274c6:	4668      	mov	r0, sp
   274c8:	f7d9 f870 	bl	5ac <ocrypto_mod_p256_add>
   274cc:	4669      	mov	r1, sp
   274ce:	4620      	mov	r0, r4
   274d0:	f7d9 f94a 	bl	768 <ocrypto_mod_p256_sqr>
   274d4:	4632      	mov	r2, r6
   274d6:	4621      	mov	r1, r4
   274d8:	4620      	mov	r0, r4
   274da:	f7d9 f8a5 	bl	628 <ocrypto_mod_p256_sub>
   274de:	4632      	mov	r2, r6
   274e0:	4621      	mov	r1, r4
   274e2:	4620      	mov	r0, r4
   274e4:	f7d9 f8a0 	bl	628 <ocrypto_mod_p256_sub>
   274e8:	4622      	mov	r2, r4
   274ea:	4631      	mov	r1, r6
   274ec:	4628      	mov	r0, r5
   274ee:	f7d9 f89b 	bl	628 <ocrypto_mod_p256_sub>
   274f2:	466a      	mov	r2, sp
   274f4:	4629      	mov	r1, r5
   274f6:	4628      	mov	r0, r5
   274f8:	f7d9 f91e 	bl	738 <ocrypto_mod_p256_mul>
   274fc:	463a      	mov	r2, r7
   274fe:	4629      	mov	r1, r5
   27500:	4628      	mov	r0, r5
   27502:	f7d9 f891 	bl	628 <ocrypto_mod_p256_sub>
   27506:	b008      	add	sp, #32
   27508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2750c:	00035320 	.word	0x00035320

00027510 <p256_zaddc>:
   27510:	b5f0      	push	{r4, r5, r6, r7, lr}
   27512:	b099      	sub	sp, #100	; 0x64
   27514:	4604      	mov	r4, r0
   27516:	460d      	mov	r5, r1
   27518:	460a      	mov	r2, r1
   2751a:	4601      	mov	r1, r0
   2751c:	4668      	mov	r0, sp
   2751e:	f7d9 f883 	bl	628 <ocrypto_mod_p256_sub>
   27522:	4669      	mov	r1, sp
   27524:	4668      	mov	r0, sp
   27526:	f7d9 f91f 	bl	768 <ocrypto_mod_p256_sqr>
   2752a:	466a      	mov	r2, sp
   2752c:	4621      	mov	r1, r4
   2752e:	a808      	add	r0, sp, #32
   27530:	f105 0620 	add.w	r6, r5, #32
   27534:	f104 0720 	add.w	r7, r4, #32
   27538:	f7d9 f8fe 	bl	738 <ocrypto_mod_p256_mul>
   2753c:	466a      	mov	r2, sp
   2753e:	4629      	mov	r1, r5
   27540:	4668      	mov	r0, sp
   27542:	f7d9 f8f9 	bl	738 <ocrypto_mod_p256_mul>
   27546:	4632      	mov	r2, r6
   27548:	4639      	mov	r1, r7
   2754a:	a810      	add	r0, sp, #64	; 0x40
   2754c:	f7d9 f82e 	bl	5ac <ocrypto_mod_p256_add>
   27550:	4632      	mov	r2, r6
   27552:	4639      	mov	r1, r7
   27554:	4630      	mov	r0, r6
   27556:	f7d9 f867 	bl	628 <ocrypto_mod_p256_sub>
   2755a:	4631      	mov	r1, r6
   2755c:	4628      	mov	r0, r5
   2755e:	f7d9 f903 	bl	768 <ocrypto_mod_p256_sqr>
   27562:	466a      	mov	r2, sp
   27564:	a908      	add	r1, sp, #32
   27566:	4620      	mov	r0, r4
   27568:	f7d9 f820 	bl	5ac <ocrypto_mod_p256_add>
   2756c:	4622      	mov	r2, r4
   2756e:	4629      	mov	r1, r5
   27570:	4628      	mov	r0, r5
   27572:	f7d9 f859 	bl	628 <ocrypto_mod_p256_sub>
   27576:	466a      	mov	r2, sp
   27578:	a908      	add	r1, sp, #32
   2757a:	4668      	mov	r0, sp
   2757c:	f7d9 f854 	bl	628 <ocrypto_mod_p256_sub>
   27580:	466a      	mov	r2, sp
   27582:	4639      	mov	r1, r7
   27584:	4638      	mov	r0, r7
   27586:	f7d9 f8d7 	bl	738 <ocrypto_mod_p256_mul>
   2758a:	462a      	mov	r2, r5
   2758c:	a908      	add	r1, sp, #32
   2758e:	4668      	mov	r0, sp
   27590:	f7d9 f84a 	bl	628 <ocrypto_mod_p256_sub>
   27594:	466a      	mov	r2, sp
   27596:	4631      	mov	r1, r6
   27598:	4630      	mov	r0, r6
   2759a:	f7d9 f8cd 	bl	738 <ocrypto_mod_p256_mul>
   2759e:	463a      	mov	r2, r7
   275a0:	4631      	mov	r1, r6
   275a2:	4630      	mov	r0, r6
   275a4:	f7d9 f840 	bl	628 <ocrypto_mod_p256_sub>
   275a8:	a910      	add	r1, sp, #64	; 0x40
   275aa:	4668      	mov	r0, sp
   275ac:	f7d9 f8dc 	bl	768 <ocrypto_mod_p256_sqr>
   275b0:	4622      	mov	r2, r4
   275b2:	4669      	mov	r1, sp
   275b4:	4620      	mov	r0, r4
   275b6:	f7d9 f837 	bl	628 <ocrypto_mod_p256_sub>
   275ba:	a908      	add	r1, sp, #32
   275bc:	4622      	mov	r2, r4
   275be:	4608      	mov	r0, r1
   275c0:	f7d9 f832 	bl	628 <ocrypto_mod_p256_sub>
   275c4:	a910      	add	r1, sp, #64	; 0x40
   275c6:	aa08      	add	r2, sp, #32
   275c8:	4608      	mov	r0, r1
   275ca:	f7d9 f8b5 	bl	738 <ocrypto_mod_p256_mul>
   275ce:	463a      	mov	r2, r7
   275d0:	a910      	add	r1, sp, #64	; 0x40
   275d2:	4638      	mov	r0, r7
   275d4:	f7d9 f828 	bl	628 <ocrypto_mod_p256_sub>
   275d8:	b019      	add	sp, #100	; 0x64
   275da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000275dc <p256_zaddu>:
   275dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275e0:	b088      	sub	sp, #32
   275e2:	460c      	mov	r4, r1
   275e4:	4605      	mov	r5, r0
   275e6:	4690      	mov	r8, r2
   275e8:	460a      	mov	r2, r1
   275ea:	4601      	mov	r1, r0
   275ec:	4668      	mov	r0, sp
   275ee:	f7d9 f81b 	bl	628 <ocrypto_mod_p256_sub>
   275f2:	4669      	mov	r1, sp
   275f4:	4668      	mov	r0, sp
   275f6:	f7d9 f8b7 	bl	768 <ocrypto_mod_p256_sqr>
   275fa:	466a      	mov	r2, sp
   275fc:	4629      	mov	r1, r5
   275fe:	4628      	mov	r0, r5
   27600:	f104 0620 	add.w	r6, r4, #32
   27604:	f7d9 f898 	bl	738 <ocrypto_mod_p256_mul>
   27608:	f105 0720 	add.w	r7, r5, #32
   2760c:	466a      	mov	r2, sp
   2760e:	4621      	mov	r1, r4
   27610:	4668      	mov	r0, sp
   27612:	f7d9 f891 	bl	738 <ocrypto_mod_p256_mul>
   27616:	4632      	mov	r2, r6
   27618:	4639      	mov	r1, r7
   2761a:	4630      	mov	r0, r6
   2761c:	f7d9 f804 	bl	628 <ocrypto_mod_p256_sub>
   27620:	4631      	mov	r1, r6
   27622:	4620      	mov	r0, r4
   27624:	f7d9 f8a0 	bl	768 <ocrypto_mod_p256_sqr>
   27628:	462a      	mov	r2, r5
   2762a:	4621      	mov	r1, r4
   2762c:	4620      	mov	r0, r4
   2762e:	f7d8 fffb 	bl	628 <ocrypto_mod_p256_sub>
   27632:	466a      	mov	r2, sp
   27634:	4621      	mov	r1, r4
   27636:	4620      	mov	r0, r4
   27638:	f7d8 fff6 	bl	628 <ocrypto_mod_p256_sub>
   2763c:	466a      	mov	r2, sp
   2763e:	4629      	mov	r1, r5
   27640:	4640      	mov	r0, r8
   27642:	f7d8 fff1 	bl	628 <ocrypto_mod_p256_sub>
   27646:	4642      	mov	r2, r8
   27648:	4639      	mov	r1, r7
   2764a:	4638      	mov	r0, r7
   2764c:	f7d9 f874 	bl	738 <ocrypto_mod_p256_mul>
   27650:	4622      	mov	r2, r4
   27652:	4629      	mov	r1, r5
   27654:	4668      	mov	r0, sp
   27656:	f7d8 ffe7 	bl	628 <ocrypto_mod_p256_sub>
   2765a:	466a      	mov	r2, sp
   2765c:	4631      	mov	r1, r6
   2765e:	4630      	mov	r0, r6
   27660:	f7d9 f86a 	bl	738 <ocrypto_mod_p256_mul>
   27664:	463a      	mov	r2, r7
   27666:	4631      	mov	r1, r6
   27668:	4630      	mov	r0, r6
   2766a:	f7d8 ffdd 	bl	628 <ocrypto_mod_p256_sub>
   2766e:	b008      	add	sp, #32
   27670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027674 <ocrypto_curve_p256_from64bytes>:
   27674:	b570      	push	{r4, r5, r6, lr}
   27676:	f100 0620 	add.w	r6, r0, #32
   2767a:	b090      	sub	sp, #64	; 0x40
   2767c:	460d      	mov	r5, r1
   2767e:	4604      	mov	r4, r0
   27680:	f000 f914 	bl	278ac <ocrypto_mod_p256_from_bytes>
   27684:	f105 0120 	add.w	r1, r5, #32
   27688:	4630      	mov	r0, r6
   2768a:	f000 f90f 	bl	278ac <ocrypto_mod_p256_from_bytes>
   2768e:	4621      	mov	r1, r4
   27690:	a808      	add	r0, sp, #32
   27692:	f7d9 f869 	bl	768 <ocrypto_mod_p256_sqr>
   27696:	a908      	add	r1, sp, #32
   27698:	4608      	mov	r0, r1
   2769a:	4a0d      	ldr	r2, [pc, #52]	; (276d0 <ocrypto_curve_p256_from64bytes+0x5c>)
   2769c:	f7d8 ff86 	bl	5ac <ocrypto_mod_p256_add>
   276a0:	a908      	add	r1, sp, #32
   276a2:	4622      	mov	r2, r4
   276a4:	4608      	mov	r0, r1
   276a6:	f7d9 f847 	bl	738 <ocrypto_mod_p256_mul>
   276aa:	a908      	add	r1, sp, #32
   276ac:	4a09      	ldr	r2, [pc, #36]	; (276d4 <ocrypto_curve_p256_from64bytes+0x60>)
   276ae:	4608      	mov	r0, r1
   276b0:	f7d8 ff7c 	bl	5ac <ocrypto_mod_p256_add>
   276b4:	4631      	mov	r1, r6
   276b6:	4668      	mov	r0, sp
   276b8:	f7d9 f856 	bl	768 <ocrypto_mod_p256_sqr>
   276bc:	2220      	movs	r2, #32
   276be:	4669      	mov	r1, sp
   276c0:	eb0d 0002 	add.w	r0, sp, r2
   276c4:	f7d8 ff44 	bl	550 <ocrypto_constant_time_equal>
   276c8:	3801      	subs	r0, #1
   276ca:	b010      	add	sp, #64	; 0x40
   276cc:	bd70      	pop	{r4, r5, r6, pc}
   276ce:	bf00      	nop
   276d0:	00035320 	.word	0x00035320
   276d4:	00035300 	.word	0x00035300

000276d8 <ocrypto_curve_p256_to32bytes>:
   276d8:	f000 b902 	b.w	278e0 <ocrypto_mod_p256_to_bytes>

000276dc <ocrypto_curve_p256_to64bytes>:
   276dc:	b538      	push	{r3, r4, r5, lr}
   276de:	4604      	mov	r4, r0
   276e0:	460d      	mov	r5, r1
   276e2:	f000 f8fd 	bl	278e0 <ocrypto_mod_p256_to_bytes>
   276e6:	f105 0120 	add.w	r1, r5, #32
   276ea:	f104 0020 	add.w	r0, r4, #32
   276ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   276f2:	f000 b8f5 	b.w	278e0 <ocrypto_mod_p256_to_bytes>
   276f6:	bf00      	nop

000276f8 <ocrypto_curve_p256_scalarmult>:
   276f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   276fc:	4613      	mov	r3, r2
   276fe:	b0b8      	sub	sp, #224	; 0xe0
   27700:	4a54      	ldr	r2, [pc, #336]	; (27854 <ocrypto_curve_p256_scalarmult+0x15c>)
   27702:	4689      	mov	r9, r1
   27704:	4680      	mov	r8, r0
   27706:	4619      	mov	r1, r3
   27708:	a810      	add	r0, sp, #64	; 0x40
   2770a:	f7d8 fd33 	bl	174 <ocrypto_bigint_sub256>
   2770e:	4952      	ldr	r1, [pc, #328]	; (27858 <ocrypto_curve_p256_scalarmult+0x160>)
   27710:	4602      	mov	r2, r0
   27712:	a810      	add	r0, sp, #64	; 0x40
   27714:	f7d8 fd4e 	bl	1b4 <ocrypto_bigint_cadd256>
   27718:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2771a:	494e      	ldr	r1, [pc, #312]	; (27854 <ocrypto_curve_p256_scalarmult+0x15c>)
   2771c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   27720:	4607      	mov	r7, r0
   27722:	f1c6 0201 	rsb	r2, r6, #1
   27726:	a810      	add	r0, sp, #64	; 0x40
   27728:	f7d8 fd44 	bl	1b4 <ocrypto_bigint_cadd256>
   2772c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2772e:	464a      	mov	r2, r9
   27730:	ea6f 0a03 	mvn.w	sl, r3
   27734:	a928      	add	r1, sp, #160	; 0xa0
   27736:	a818      	add	r0, sp, #96	; 0x60
   27738:	f7ff fe8e 	bl	27458 <p256_zdblu>
   2773c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   27740:	a920      	add	r1, sp, #128	; 0x80
   27742:	f1ca 0201 	rsb	r2, sl, #1
   27746:	4608      	mov	r0, r1
   27748:	f000 f892 	bl	27870 <ocrypto_mod_p256_cneg>
   2774c:	f1c7 0701 	rsb	r7, r7, #1
   27750:	24fe      	movs	r4, #254	; 0xfe
   27752:	466a      	mov	r2, sp
   27754:	a918      	add	r1, sp, #96	; 0x60
   27756:	a828      	add	r0, sp, #160	; 0xa0
   27758:	f7ff ff40 	bl	275dc <p256_zaddu>
   2775c:	1163      	asrs	r3, r4, #5
   2775e:	aa38      	add	r2, sp, #224	; 0xe0
   27760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   27764:	f004 021f 	and.w	r2, r4, #31
   27768:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   2776c:	40d3      	lsrs	r3, r2
   2776e:	4655      	mov	r5, sl
   27770:	f003 0a01 	and.w	sl, r3, #1
   27774:	ea8a 0505 	eor.w	r5, sl, r5
   27778:	462a      	mov	r2, r5
   2777a:	a928      	add	r1, sp, #160	; 0xa0
   2777c:	a818      	add	r0, sp, #96	; 0x60
   2777e:	f7d8 fd75 	bl	26c <ocrypto_bigint_cswap256>
   27782:	462a      	mov	r2, r5
   27784:	a930      	add	r1, sp, #192	; 0xc0
   27786:	a820      	add	r0, sp, #128	; 0x80
   27788:	f7d8 fd70 	bl	26c <ocrypto_bigint_cswap256>
   2778c:	3c01      	subs	r4, #1
   2778e:	a928      	add	r1, sp, #160	; 0xa0
   27790:	a818      	add	r0, sp, #96	; 0x60
   27792:	f7ff febd 	bl	27510 <p256_zaddc>
   27796:	1c63      	adds	r3, r4, #1
   27798:	d1db      	bne.n	27752 <ocrypto_curve_p256_scalarmult+0x5a>
   2779a:	f1ca 0201 	rsb	r2, sl, #1
   2779e:	a920      	add	r1, sp, #128	; 0x80
   277a0:	a808      	add	r0, sp, #32
   277a2:	f000 f865 	bl	27870 <ocrypto_mod_p256_cneg>
   277a6:	ea86 060a 	eor.w	r6, r6, sl
   277aa:	466a      	mov	r2, sp
   277ac:	a918      	add	r1, sp, #96	; 0x60
   277ae:	a828      	add	r0, sp, #160	; 0xa0
   277b0:	f7ff ff14 	bl	275dc <p256_zaddu>
   277b4:	a928      	add	r1, sp, #160	; 0xa0
   277b6:	4632      	mov	r2, r6
   277b8:	a818      	add	r0, sp, #96	; 0x60
   277ba:	f7d8 fd57 	bl	26c <ocrypto_bigint_cswap256>
   277be:	4632      	mov	r2, r6
   277c0:	a930      	add	r1, sp, #192	; 0xc0
   277c2:	a820      	add	r0, sp, #128	; 0x80
   277c4:	f7d8 fd52 	bl	26c <ocrypto_bigint_cswap256>
   277c8:	a908      	add	r1, sp, #32
   277ca:	466a      	mov	r2, sp
   277cc:	4608      	mov	r0, r1
   277ce:	f7d8 ffb3 	bl	738 <ocrypto_mod_p256_mul>
   277d2:	a908      	add	r1, sp, #32
   277d4:	4608      	mov	r0, r1
   277d6:	f000 f89d 	bl	27914 <ocrypto_mod_p256_inv>
   277da:	a908      	add	r1, sp, #32
   277dc:	f108 0420 	add.w	r4, r8, #32
   277e0:	f109 0220 	add.w	r2, r9, #32
   277e4:	4608      	mov	r0, r1
   277e6:	f7d8 ffa7 	bl	738 <ocrypto_mod_p256_mul>
   277ea:	a920      	add	r1, sp, #128	; 0x80
   277ec:	aa08      	add	r2, sp, #32
   277ee:	4620      	mov	r0, r4
   277f0:	f7d8 ffa2 	bl	738 <ocrypto_mod_p256_mul>
   277f4:	aa08      	add	r2, sp, #32
   277f6:	a918      	add	r1, sp, #96	; 0x60
   277f8:	4668      	mov	r0, sp
   277fa:	f7d8 ff9d 	bl	738 <ocrypto_mod_p256_mul>
   277fe:	4669      	mov	r1, sp
   27800:	4668      	mov	r0, sp
   27802:	f7d8 ffb1 	bl	768 <ocrypto_mod_p256_sqr>
   27806:	aa18      	add	r2, sp, #96	; 0x60
   27808:	4669      	mov	r1, sp
   2780a:	a808      	add	r0, sp, #32
   2780c:	f7d8 ff94 	bl	738 <ocrypto_mod_p256_mul>
   27810:	4621      	mov	r1, r4
   27812:	4668      	mov	r0, sp
   27814:	f7d8 ffa8 	bl	768 <ocrypto_mod_p256_sqr>
   27818:	aa08      	add	r2, sp, #32
   2781a:	4669      	mov	r1, sp
   2781c:	4610      	mov	r0, r2
   2781e:	f7d8 ff03 	bl	628 <ocrypto_mod_p256_sub>
   27822:	4a0e      	ldr	r2, [pc, #56]	; (2785c <ocrypto_curve_p256_scalarmult+0x164>)
   27824:	a908      	add	r1, sp, #32
   27826:	4668      	mov	r0, sp
   27828:	f7d8 fefe 	bl	628 <ocrypto_mod_p256_sub>
   2782c:	4620      	mov	r0, r4
   2782e:	2120      	movs	r1, #32
   27830:	f7d8 fea2 	bl	578 <ocrypto_constant_time_is_zero>
   27834:	a908      	add	r1, sp, #32
   27836:	4602      	mov	r2, r0
   27838:	4244      	negs	r4, r0
   2783a:	4668      	mov	r0, sp
   2783c:	f7d8 fd16 	bl	26c <ocrypto_bigint_cswap256>
   27840:	4640      	mov	r0, r8
   27842:	4a07      	ldr	r2, [pc, #28]	; (27860 <ocrypto_curve_p256_scalarmult+0x168>)
   27844:	4669      	mov	r1, sp
   27846:	f7d8 ff77 	bl	738 <ocrypto_mod_p256_mul>
   2784a:	433c      	orrs	r4, r7
   2784c:	4620      	mov	r0, r4
   2784e:	b038      	add	sp, #224	; 0xe0
   27850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27854:	00035280 	.word	0x00035280
   27858:	000352a0 	.word	0x000352a0
   2785c:	00035300 	.word	0x00035300
   27860:	00035260 	.word	0x00035260

00027864 <ocrypto_curve_p256_scalarmult_base>:
   27864:	460a      	mov	r2, r1
   27866:	4901      	ldr	r1, [pc, #4]	; (2786c <ocrypto_curve_p256_scalarmult_base+0x8>)
   27868:	f7ff bf46 	b.w	276f8 <ocrypto_curve_p256_scalarmult>
   2786c:	000352c0 	.word	0x000352c0

00027870 <ocrypto_mod_p256_cneg>:
   27870:	b570      	push	{r4, r5, r6, lr}
   27872:	b088      	sub	sp, #32
   27874:	4604      	mov	r4, r0
   27876:	460d      	mov	r5, r1
   27878:	4616      	mov	r6, r2
   2787a:	2100      	movs	r1, #0
   2787c:	2220      	movs	r2, #32
   2787e:	4668      	mov	r0, sp
   27880:	f004 ffe3 	bl	2c84a <memset>
   27884:	2300      	movs	r3, #0
   27886:	4629      	mov	r1, r5
   27888:	2220      	movs	r2, #32
   2788a:	4620      	mov	r0, r4
   2788c:	9300      	str	r3, [sp, #0]
   2788e:	f004 ffad 	bl	2c7ec <memcpy>
   27892:	462a      	mov	r2, r5
   27894:	4669      	mov	r1, sp
   27896:	4668      	mov	r0, sp
   27898:	f7d8 fec6 	bl	628 <ocrypto_mod_p256_sub>
   2789c:	4632      	mov	r2, r6
   2789e:	4669      	mov	r1, sp
   278a0:	4620      	mov	r0, r4
   278a2:	f7d8 fce3 	bl	26c <ocrypto_bigint_cswap256>
   278a6:	b008      	add	sp, #32
   278a8:	bd70      	pop	{r4, r5, r6, pc}
   278aa:	bf00      	nop

000278ac <ocrypto_mod_p256_from_bytes>:
   278ac:	680b      	ldr	r3, [r1, #0]
   278ae:	ba1b      	rev	r3, r3
   278b0:	61c3      	str	r3, [r0, #28]
   278b2:	684b      	ldr	r3, [r1, #4]
   278b4:	ba1b      	rev	r3, r3
   278b6:	6183      	str	r3, [r0, #24]
   278b8:	688b      	ldr	r3, [r1, #8]
   278ba:	ba1b      	rev	r3, r3
   278bc:	6143      	str	r3, [r0, #20]
   278be:	68cb      	ldr	r3, [r1, #12]
   278c0:	ba1b      	rev	r3, r3
   278c2:	6103      	str	r3, [r0, #16]
   278c4:	690b      	ldr	r3, [r1, #16]
   278c6:	ba1b      	rev	r3, r3
   278c8:	60c3      	str	r3, [r0, #12]
   278ca:	694b      	ldr	r3, [r1, #20]
   278cc:	ba1b      	rev	r3, r3
   278ce:	6083      	str	r3, [r0, #8]
   278d0:	698b      	ldr	r3, [r1, #24]
   278d2:	ba1b      	rev	r3, r3
   278d4:	6043      	str	r3, [r0, #4]
   278d6:	69cb      	ldr	r3, [r1, #28]
   278d8:	ba1b      	rev	r3, r3
   278da:	6003      	str	r3, [r0, #0]
   278dc:	4770      	bx	lr
   278de:	bf00      	nop

000278e0 <ocrypto_mod_p256_to_bytes>:
   278e0:	69cb      	ldr	r3, [r1, #28]
   278e2:	ba1b      	rev	r3, r3
   278e4:	6003      	str	r3, [r0, #0]
   278e6:	698b      	ldr	r3, [r1, #24]
   278e8:	ba1b      	rev	r3, r3
   278ea:	6043      	str	r3, [r0, #4]
   278ec:	694b      	ldr	r3, [r1, #20]
   278ee:	ba1b      	rev	r3, r3
   278f0:	6083      	str	r3, [r0, #8]
   278f2:	690b      	ldr	r3, [r1, #16]
   278f4:	ba1b      	rev	r3, r3
   278f6:	60c3      	str	r3, [r0, #12]
   278f8:	68cb      	ldr	r3, [r1, #12]
   278fa:	ba1b      	rev	r3, r3
   278fc:	6103      	str	r3, [r0, #16]
   278fe:	688b      	ldr	r3, [r1, #8]
   27900:	ba1b      	rev	r3, r3
   27902:	6143      	str	r3, [r0, #20]
   27904:	684b      	ldr	r3, [r1, #4]
   27906:	ba1b      	rev	r3, r3
   27908:	6183      	str	r3, [r0, #24]
   2790a:	680b      	ldr	r3, [r1, #0]
   2790c:	ba1b      	rev	r3, r3
   2790e:	61c3      	str	r3, [r0, #28]
   27910:	4770      	bx	lr
   27912:	bf00      	nop

00027914 <ocrypto_mod_p256_inv>:
   27914:	b570      	push	{r4, r5, r6, lr}
   27916:	b098      	sub	sp, #96	; 0x60
   27918:	460d      	mov	r5, r1
   2791a:	4606      	mov	r6, r0
   2791c:	a810      	add	r0, sp, #64	; 0x40
   2791e:	f7d8 ff23 	bl	768 <ocrypto_mod_p256_sqr>
   27922:	462a      	mov	r2, r5
   27924:	a910      	add	r1, sp, #64	; 0x40
   27926:	4668      	mov	r0, sp
   27928:	f7d8 ff06 	bl	738 <ocrypto_mod_p256_mul>
   2792c:	4669      	mov	r1, sp
   2792e:	a810      	add	r0, sp, #64	; 0x40
   27930:	f7d8 ff1a 	bl	768 <ocrypto_mod_p256_sqr>
   27934:	a910      	add	r1, sp, #64	; 0x40
   27936:	4608      	mov	r0, r1
   27938:	f7d8 ff16 	bl	768 <ocrypto_mod_p256_sqr>
   2793c:	466a      	mov	r2, sp
   2793e:	a910      	add	r1, sp, #64	; 0x40
   27940:	a808      	add	r0, sp, #32
   27942:	f7d8 fef9 	bl	738 <ocrypto_mod_p256_mul>
   27946:	a908      	add	r1, sp, #32
   27948:	a810      	add	r0, sp, #64	; 0x40
   2794a:	f7d8 ff0d 	bl	768 <ocrypto_mod_p256_sqr>
   2794e:	a910      	add	r1, sp, #64	; 0x40
   27950:	4608      	mov	r0, r1
   27952:	f7d8 ff09 	bl	768 <ocrypto_mod_p256_sqr>
   27956:	a910      	add	r1, sp, #64	; 0x40
   27958:	4608      	mov	r0, r1
   2795a:	f7d8 ff05 	bl	768 <ocrypto_mod_p256_sqr>
   2795e:	a910      	add	r1, sp, #64	; 0x40
   27960:	4608      	mov	r0, r1
   27962:	f7d8 ff01 	bl	768 <ocrypto_mod_p256_sqr>
   27966:	a910      	add	r1, sp, #64	; 0x40
   27968:	aa08      	add	r2, sp, #32
   2796a:	4608      	mov	r0, r1
   2796c:	f7d8 fee4 	bl	738 <ocrypto_mod_p256_mul>
   27970:	a910      	add	r1, sp, #64	; 0x40
   27972:	4608      	mov	r0, r1
   27974:	f7d8 fef8 	bl	768 <ocrypto_mod_p256_sqr>
   27978:	a910      	add	r1, sp, #64	; 0x40
   2797a:	4608      	mov	r0, r1
   2797c:	f7d8 fef4 	bl	768 <ocrypto_mod_p256_sqr>
   27980:	a910      	add	r1, sp, #64	; 0x40
   27982:	466a      	mov	r2, sp
   27984:	a808      	add	r0, sp, #32
   27986:	f7d8 fed7 	bl	738 <ocrypto_mod_p256_mul>
   2798a:	2405      	movs	r4, #5
   2798c:	a908      	add	r1, sp, #32
   2798e:	a810      	add	r0, sp, #64	; 0x40
   27990:	f7d8 feea 	bl	768 <ocrypto_mod_p256_sqr>
   27994:	a910      	add	r1, sp, #64	; 0x40
   27996:	4608      	mov	r0, r1
   27998:	f7d8 fee6 	bl	768 <ocrypto_mod_p256_sqr>
   2799c:	3c01      	subs	r4, #1
   2799e:	a910      	add	r1, sp, #64	; 0x40
   279a0:	d1f5      	bne.n	2798e <ocrypto_mod_p256_inv+0x7a>
   279a2:	aa08      	add	r2, sp, #32
   279a4:	4608      	mov	r0, r1
   279a6:	f7d8 fec7 	bl	738 <ocrypto_mod_p256_mul>
   279aa:	2405      	movs	r4, #5
   279ac:	a910      	add	r1, sp, #64	; 0x40
   279ae:	4608      	mov	r0, r1
   279b0:	f7d8 feda 	bl	768 <ocrypto_mod_p256_sqr>
   279b4:	a910      	add	r1, sp, #64	; 0x40
   279b6:	4608      	mov	r0, r1
   279b8:	f7d8 fed6 	bl	768 <ocrypto_mod_p256_sqr>
   279bc:	3c01      	subs	r4, #1
   279be:	d1f5      	bne.n	279ac <ocrypto_mod_p256_inv+0x98>
   279c0:	a910      	add	r1, sp, #64	; 0x40
   279c2:	aa08      	add	r2, sp, #32
   279c4:	4608      	mov	r0, r1
   279c6:	f7d8 feb7 	bl	738 <ocrypto_mod_p256_mul>
   279ca:	a910      	add	r1, sp, #64	; 0x40
   279cc:	a808      	add	r0, sp, #32
   279ce:	f7d8 fecb 	bl	768 <ocrypto_mod_p256_sqr>
   279d2:	a908      	add	r1, sp, #32
   279d4:	4608      	mov	r0, r1
   279d6:	f7d8 fec7 	bl	768 <ocrypto_mod_p256_sqr>
   279da:	a908      	add	r1, sp, #32
   279dc:	466a      	mov	r2, sp
   279de:	4668      	mov	r0, sp
   279e0:	f7d8 feaa 	bl	738 <ocrypto_mod_p256_mul>
   279e4:	2410      	movs	r4, #16
   279e6:	4669      	mov	r1, sp
   279e8:	a810      	add	r0, sp, #64	; 0x40
   279ea:	f7d8 febd 	bl	768 <ocrypto_mod_p256_sqr>
   279ee:	a910      	add	r1, sp, #64	; 0x40
   279f0:	4608      	mov	r0, r1
   279f2:	f7d8 feb9 	bl	768 <ocrypto_mod_p256_sqr>
   279f6:	3c01      	subs	r4, #1
   279f8:	a910      	add	r1, sp, #64	; 0x40
   279fa:	d1f5      	bne.n	279e8 <ocrypto_mod_p256_inv+0xd4>
   279fc:	462a      	mov	r2, r5
   279fe:	4608      	mov	r0, r1
   27a00:	f7d8 fe9a 	bl	738 <ocrypto_mod_p256_mul>
   27a04:	2440      	movs	r4, #64	; 0x40
   27a06:	a910      	add	r1, sp, #64	; 0x40
   27a08:	4608      	mov	r0, r1
   27a0a:	f7d8 fead 	bl	768 <ocrypto_mod_p256_sqr>
   27a0e:	a910      	add	r1, sp, #64	; 0x40
   27a10:	4608      	mov	r0, r1
   27a12:	f7d8 fea9 	bl	768 <ocrypto_mod_p256_sqr>
   27a16:	3c01      	subs	r4, #1
   27a18:	d1f5      	bne.n	27a06 <ocrypto_mod_p256_inv+0xf2>
   27a1a:	a910      	add	r1, sp, #64	; 0x40
   27a1c:	466a      	mov	r2, sp
   27a1e:	4608      	mov	r0, r1
   27a20:	f7d8 fe8a 	bl	738 <ocrypto_mod_p256_mul>
   27a24:	2410      	movs	r4, #16
   27a26:	a910      	add	r1, sp, #64	; 0x40
   27a28:	4608      	mov	r0, r1
   27a2a:	f7d8 fe9d 	bl	768 <ocrypto_mod_p256_sqr>
   27a2e:	a910      	add	r1, sp, #64	; 0x40
   27a30:	4608      	mov	r0, r1
   27a32:	f7d8 fe99 	bl	768 <ocrypto_mod_p256_sqr>
   27a36:	3c01      	subs	r4, #1
   27a38:	d1f5      	bne.n	27a26 <ocrypto_mod_p256_inv+0x112>
   27a3a:	a910      	add	r1, sp, #64	; 0x40
   27a3c:	466a      	mov	r2, sp
   27a3e:	4608      	mov	r0, r1
   27a40:	f7d8 fe7a 	bl	738 <ocrypto_mod_p256_mul>
   27a44:	2410      	movs	r4, #16
   27a46:	a910      	add	r1, sp, #64	; 0x40
   27a48:	4608      	mov	r0, r1
   27a4a:	f7d8 fe8d 	bl	768 <ocrypto_mod_p256_sqr>
   27a4e:	a910      	add	r1, sp, #64	; 0x40
   27a50:	4608      	mov	r0, r1
   27a52:	f7d8 fe89 	bl	768 <ocrypto_mod_p256_sqr>
   27a56:	3c01      	subs	r4, #1
   27a58:	d1f5      	bne.n	27a46 <ocrypto_mod_p256_inv+0x132>
   27a5a:	a910      	add	r1, sp, #64	; 0x40
   27a5c:	aa08      	add	r2, sp, #32
   27a5e:	4608      	mov	r0, r1
   27a60:	f7d8 fe6a 	bl	738 <ocrypto_mod_p256_mul>
   27a64:	462a      	mov	r2, r5
   27a66:	a910      	add	r1, sp, #64	; 0x40
   27a68:	4630      	mov	r0, r6
   27a6a:	f7d8 fe65 	bl	738 <ocrypto_mod_p256_mul>
   27a6e:	b018      	add	sp, #96	; 0x60
   27a70:	bd70      	pop	{r4, r5, r6, pc}
   27a72:	bf00      	nop

00027a74 <nrf_cc3xx_platform_init>:
   27a74:	b510      	push	{r4, lr}
   27a76:	4c0c      	ldr	r4, [pc, #48]	; (27aa8 <nrf_cc3xx_platform_init+0x34>)
   27a78:	6823      	ldr	r3, [r4, #0]
   27a7a:	b113      	cbz	r3, 27a82 <nrf_cc3xx_platform_init+0xe>
   27a7c:	4b0b      	ldr	r3, [pc, #44]	; (27aac <nrf_cc3xx_platform_init+0x38>)
   27a7e:	681b      	ldr	r3, [r3, #0]
   27a80:	b92b      	cbnz	r3, 27a8e <nrf_cc3xx_platform_init+0x1a>
   27a82:	f000 fe29 	bl	286d8 <CC_LibInit>
   27a86:	b930      	cbnz	r0, 27a96 <nrf_cc3xx_platform_init+0x22>
   27a88:	4b08      	ldr	r3, [pc, #32]	; (27aac <nrf_cc3xx_platform_init+0x38>)
   27a8a:	2201      	movs	r2, #1
   27a8c:	601a      	str	r2, [r3, #0]
   27a8e:	2301      	movs	r3, #1
   27a90:	6023      	str	r3, [r4, #0]
   27a92:	2000      	movs	r0, #0
   27a94:	bd10      	pop	{r4, pc}
   27a96:	3801      	subs	r0, #1
   27a98:	2806      	cmp	r0, #6
   27a9a:	d901      	bls.n	27aa0 <nrf_cc3xx_platform_init+0x2c>
   27a9c:	4804      	ldr	r0, [pc, #16]	; (27ab0 <nrf_cc3xx_platform_init+0x3c>)
   27a9e:	bd10      	pop	{r4, pc}
   27aa0:	4b04      	ldr	r3, [pc, #16]	; (27ab4 <nrf_cc3xx_platform_init+0x40>)
   27aa2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   27aa6:	bd10      	pop	{r4, pc}
   27aa8:	20005274 	.word	0x20005274
   27aac:	20005270 	.word	0x20005270
   27ab0:	ffff8ffe 	.word	0xffff8ffe
   27ab4:	00035340 	.word	0x00035340

00027ab8 <nrf_cc3xx_platform_abort>:
   27ab8:	f3bf 8f4f 	dsb	sy
   27abc:	4905      	ldr	r1, [pc, #20]	; (27ad4 <nrf_cc3xx_platform_abort+0x1c>)
   27abe:	4b06      	ldr	r3, [pc, #24]	; (27ad8 <nrf_cc3xx_platform_abort+0x20>)
   27ac0:	68ca      	ldr	r2, [r1, #12]
   27ac2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   27ac6:	4313      	orrs	r3, r2
   27ac8:	60cb      	str	r3, [r1, #12]
   27aca:	f3bf 8f4f 	dsb	sy
   27ace:	bf00      	nop
   27ad0:	e7fd      	b.n	27ace <nrf_cc3xx_platform_abort+0x16>
   27ad2:	bf00      	nop
   27ad4:	e000ed00 	.word	0xe000ed00
   27ad8:	05fa0004 	.word	0x05fa0004

00027adc <CC_PalAbort>:
   27adc:	b410      	push	{r4}
   27ade:	4b09      	ldr	r3, [pc, #36]	; (27b04 <CC_PalAbort+0x28>)
   27ae0:	4909      	ldr	r1, [pc, #36]	; (27b08 <CC_PalAbort+0x2c>)
   27ae2:	4c0a      	ldr	r4, [pc, #40]	; (27b0c <CC_PalAbort+0x30>)
   27ae4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   27ae8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27aec:	6849      	ldr	r1, [r1, #4]
   27aee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   27af2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27af6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27afa:	2300      	movs	r3, #0
   27afc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   27b00:	bc10      	pop	{r4}
   27b02:	4708      	bx	r1
   27b04:	5002b000 	.word	0x5002b000
   27b08:	20000894 	.word	0x20000894
   27b0c:	5002a000 	.word	0x5002a000

00027b10 <nrf_cc3xx_platform_set_abort>:
   27b10:	e9d0 1200 	ldrd	r1, r2, [r0]
   27b14:	4b01      	ldr	r3, [pc, #4]	; (27b1c <nrf_cc3xx_platform_set_abort+0xc>)
   27b16:	e9c3 1200 	strd	r1, r2, [r3]
   27b1a:	4770      	bx	lr
   27b1c:	20000894 	.word	0x20000894

00027b20 <nrf_cc3xx_platform_ctr_drbg_init>:
   27b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b24:	4b13      	ldr	r3, [pc, #76]	; (27b74 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   27b26:	4e14      	ldr	r6, [pc, #80]	; (27b78 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   27b28:	2800      	cmp	r0, #0
   27b2a:	bf14      	ite	ne
   27b2c:	4604      	movne	r4, r0
   27b2e:	461c      	moveq	r4, r3
   27b30:	b083      	sub	sp, #12
   27b32:	6823      	ldr	r3, [r4, #0]
   27b34:	42b3      	cmp	r3, r6
   27b36:	d019      	beq.n	27b6c <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   27b38:	460d      	mov	r5, r1
   27b3a:	4620      	mov	r0, r4
   27b3c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   27b40:	f104 0904 	add.w	r9, r4, #4
   27b44:	4617      	mov	r7, r2
   27b46:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   27b4a:	f000 f8e9 	bl	27d20 <mbedtls_platform_zeroize>
   27b4e:	4648      	mov	r0, r9
   27b50:	f000 fcac 	bl	284ac <cc_mbedtls_entropy_init>
   27b54:	4640      	mov	r0, r8
   27b56:	f000 fadb 	bl	28110 <cc_mbedtls_ctr_drbg_init>
   27b5a:	4908      	ldr	r1, [pc, #32]	; (27b7c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   27b5c:	9700      	str	r7, [sp, #0]
   27b5e:	462b      	mov	r3, r5
   27b60:	464a      	mov	r2, r9
   27b62:	4640      	mov	r0, r8
   27b64:	f000 faea 	bl	2813c <cc_mbedtls_ctr_drbg_seed>
   27b68:	b908      	cbnz	r0, 27b6e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   27b6a:	6026      	str	r6, [r4, #0]
   27b6c:	2000      	movs	r0, #0
   27b6e:	b003      	add	sp, #12
   27b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27b74:	20005278 	.word	0x20005278
   27b78:	5ac9bca5 	.word	0x5ac9bca5
   27b7c:	00028535 	.word	0x00028535

00027b80 <nrf_cc3xx_platform_ctr_drbg_get>:
   27b80:	b570      	push	{r4, r5, r6, lr}
   27b82:	461d      	mov	r5, r3
   27b84:	4b0c      	ldr	r3, [pc, #48]	; (27bb8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   27b86:	2800      	cmp	r0, #0
   27b88:	bf18      	it	ne
   27b8a:	4603      	movne	r3, r0
   27b8c:	480b      	ldr	r0, [pc, #44]	; (27bbc <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   27b8e:	681e      	ldr	r6, [r3, #0]
   27b90:	4286      	cmp	r6, r0
   27b92:	b082      	sub	sp, #8
   27b94:	d10d      	bne.n	27bb2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   27b96:	2600      	movs	r6, #0
   27b98:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   27b9c:	9600      	str	r6, [sp, #0]
   27b9e:	4633      	mov	r3, r6
   27ba0:	4614      	mov	r4, r2
   27ba2:	f000 fb17 	bl	281d4 <cc_mbedtls_ctr_drbg_random_with_add>
   27ba6:	2800      	cmp	r0, #0
   27ba8:	bf18      	it	ne
   27baa:	4634      	movne	r4, r6
   27bac:	602c      	str	r4, [r5, #0]
   27bae:	b002      	add	sp, #8
   27bb0:	bd70      	pop	{r4, r5, r6, pc}
   27bb2:	4803      	ldr	r0, [pc, #12]	; (27bc0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   27bb4:	e7fb      	b.n	27bae <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   27bb6:	bf00      	nop
   27bb8:	20005278 	.word	0x20005278
   27bbc:	5ac9bca5 	.word	0x5ac9bca5
   27bc0:	ffff8fe8 	.word	0xffff8fe8

00027bc4 <mutex_free>:
   27bc4:	b510      	push	{r4, lr}
   27bc6:	4604      	mov	r4, r0
   27bc8:	b150      	cbz	r0, 27be0 <mutex_free+0x1c>
   27bca:	6863      	ldr	r3, [r4, #4]
   27bcc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27bd0:	d005      	beq.n	27bde <mutex_free+0x1a>
   27bd2:	4a06      	ldr	r2, [pc, #24]	; (27bec <mutex_free+0x28>)
   27bd4:	4293      	cmp	r3, r2
   27bd6:	d002      	beq.n	27bde <mutex_free+0x1a>
   27bd8:	2300      	movs	r3, #0
   27bda:	6023      	str	r3, [r4, #0]
   27bdc:	6062      	str	r2, [r4, #4]
   27bde:	bd10      	pop	{r4, pc}
   27be0:	4b03      	ldr	r3, [pc, #12]	; (27bf0 <mutex_free+0x2c>)
   27be2:	4804      	ldr	r0, [pc, #16]	; (27bf4 <mutex_free+0x30>)
   27be4:	685b      	ldr	r3, [r3, #4]
   27be6:	4798      	blx	r3
   27be8:	e7ef      	b.n	27bca <mutex_free+0x6>
   27bea:	bf00      	nop
   27bec:	a95c5f2c 	.word	0xa95c5f2c
   27bf0:	20000894 	.word	0x20000894
   27bf4:	0003535c 	.word	0x0003535c

00027bf8 <mutex_lock>:
   27bf8:	b1c8      	cbz	r0, 27c2e <mutex_lock+0x36>
   27bfa:	6843      	ldr	r3, [r0, #4]
   27bfc:	4a0d      	ldr	r2, [pc, #52]	; (27c34 <mutex_lock+0x3c>)
   27bfe:	4293      	cmp	r3, r2
   27c00:	d013      	beq.n	27c2a <mutex_lock+0x32>
   27c02:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27c06:	d00e      	beq.n	27c26 <mutex_lock+0x2e>
   27c08:	2301      	movs	r3, #1
   27c0a:	e850 2f00 	ldrex	r2, [r0]
   27c0e:	4619      	mov	r1, r3
   27c10:	e840 1c00 	strex	ip, r1, [r0]
   27c14:	f09c 0f00 	teq	ip, #0
   27c18:	d1f7      	bne.n	27c0a <mutex_lock+0x12>
   27c1a:	2a01      	cmp	r2, #1
   27c1c:	d0f5      	beq.n	27c0a <mutex_lock+0x12>
   27c1e:	f3bf 8f5f 	dmb	sy
   27c22:	2000      	movs	r0, #0
   27c24:	4770      	bx	lr
   27c26:	4804      	ldr	r0, [pc, #16]	; (27c38 <mutex_lock+0x40>)
   27c28:	4770      	bx	lr
   27c2a:	4804      	ldr	r0, [pc, #16]	; (27c3c <mutex_lock+0x44>)
   27c2c:	4770      	bx	lr
   27c2e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   27c32:	4770      	bx	lr
   27c34:	a95c5f2c 	.word	0xa95c5f2c
   27c38:	ffff8fe9 	.word	0xffff8fe9
   27c3c:	ffff8fea 	.word	0xffff8fea

00027c40 <mutex_unlock>:
   27c40:	b180      	cbz	r0, 27c64 <mutex_unlock+0x24>
   27c42:	6843      	ldr	r3, [r0, #4]
   27c44:	4a09      	ldr	r2, [pc, #36]	; (27c6c <mutex_unlock+0x2c>)
   27c46:	4293      	cmp	r3, r2
   27c48:	d00a      	beq.n	27c60 <mutex_unlock+0x20>
   27c4a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27c4e:	d005      	beq.n	27c5c <mutex_unlock+0x1c>
   27c50:	f3bf 8f5f 	dmb	sy
   27c54:	2300      	movs	r3, #0
   27c56:	6003      	str	r3, [r0, #0]
   27c58:	4618      	mov	r0, r3
   27c5a:	4770      	bx	lr
   27c5c:	4804      	ldr	r0, [pc, #16]	; (27c70 <mutex_unlock+0x30>)
   27c5e:	4770      	bx	lr
   27c60:	4804      	ldr	r0, [pc, #16]	; (27c74 <mutex_unlock+0x34>)
   27c62:	4770      	bx	lr
   27c64:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   27c68:	4770      	bx	lr
   27c6a:	bf00      	nop
   27c6c:	a95c5f2c 	.word	0xa95c5f2c
   27c70:	ffff8fe9 	.word	0xffff8fe9
   27c74:	ffff8fea 	.word	0xffff8fea

00027c78 <mutex_init>:
   27c78:	b510      	push	{r4, lr}
   27c7a:	4604      	mov	r4, r0
   27c7c:	b120      	cbz	r0, 27c88 <mutex_init+0x10>
   27c7e:	4b04      	ldr	r3, [pc, #16]	; (27c90 <mutex_init+0x18>)
   27c80:	6063      	str	r3, [r4, #4]
   27c82:	2200      	movs	r2, #0
   27c84:	6022      	str	r2, [r4, #0]
   27c86:	bd10      	pop	{r4, pc}
   27c88:	4802      	ldr	r0, [pc, #8]	; (27c94 <mutex_init+0x1c>)
   27c8a:	f7ff ff27 	bl	27adc <CC_PalAbort>
   27c8e:	e7f6      	b.n	27c7e <mutex_init+0x6>
   27c90:	3a00003a 	.word	0x3a00003a
   27c94:	00035384 	.word	0x00035384

00027c98 <nrf_cc3xx_platform_set_mutexes>:
   27c98:	b570      	push	{r4, r5, r6, lr}
   27c9a:	e9d0 2300 	ldrd	r2, r3, [r0]
   27c9e:	4c17      	ldr	r4, [pc, #92]	; (27cfc <nrf_cc3xx_platform_set_mutexes+0x64>)
   27ca0:	4d17      	ldr	r5, [pc, #92]	; (27d00 <nrf_cc3xx_platform_set_mutexes+0x68>)
   27ca2:	6063      	str	r3, [r4, #4]
   27ca4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   27ca8:	e9c4 3002 	strd	r3, r0, [r4, #8]
   27cac:	6022      	str	r2, [r4, #0]
   27cae:	6848      	ldr	r0, [r1, #4]
   27cb0:	f8d1 c000 	ldr.w	ip, [r1]
   27cb4:	4b13      	ldr	r3, [pc, #76]	; (27d04 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   27cb6:	e9c3 c000 	strd	ip, r0, [r3]
   27cba:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   27cbe:	f8d1 c008 	ldr.w	ip, [r1, #8]
   27cc2:	f8c3 c008 	str.w	ip, [r3, #8]
   27cc6:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   27cca:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   27cce:	6909      	ldr	r1, [r1, #16]
   27cd0:	f8c3 c00c 	str.w	ip, [r3, #12]
   27cd4:	6119      	str	r1, [r3, #16]
   27cd6:	d010      	beq.n	27cfa <nrf_cc3xx_platform_set_mutexes+0x62>
   27cd8:	490b      	ldr	r1, [pc, #44]	; (27d08 <nrf_cc3xx_platform_set_mutexes+0x70>)
   27cda:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   27cde:	2300      	movs	r3, #0
   27ce0:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   27ce4:	f505 708a 	add.w	r0, r5, #276	; 0x114
   27ce8:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   27cec:	4790      	blx	r2
   27cee:	6823      	ldr	r3, [r4, #0]
   27cf0:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   27cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27cf8:	4718      	bx	r3
   27cfa:	bd70      	pop	{r4, r5, r6, pc}
   27cfc:	200008b0 	.word	0x200008b0
   27d00:	20005278 	.word	0x20005278
   27d04:	2000089c 	.word	0x2000089c
   27d08:	a95c5f2c 	.word	0xa95c5f2c

00027d0c <mbedtls_zeroize_internal>:
   27d0c:	b138      	cbz	r0, 27d1e <mbedtls_zeroize_internal+0x12>
   27d0e:	b131      	cbz	r1, 27d1e <mbedtls_zeroize_internal+0x12>
   27d10:	4401      	add	r1, r0
   27d12:	2200      	movs	r2, #0
   27d14:	4603      	mov	r3, r0
   27d16:	3001      	adds	r0, #1
   27d18:	4281      	cmp	r1, r0
   27d1a:	701a      	strb	r2, [r3, #0]
   27d1c:	d1fa      	bne.n	27d14 <mbedtls_zeroize_internal+0x8>
   27d1e:	4770      	bx	lr

00027d20 <mbedtls_platform_zeroize>:
   27d20:	b138      	cbz	r0, 27d32 <mbedtls_platform_zeroize+0x12>
   27d22:	b131      	cbz	r1, 27d32 <mbedtls_platform_zeroize+0x12>
   27d24:	4401      	add	r1, r0
   27d26:	2200      	movs	r2, #0
   27d28:	4603      	mov	r3, r0
   27d2a:	3001      	adds	r0, #1
   27d2c:	4288      	cmp	r0, r1
   27d2e:	701a      	strb	r2, [r3, #0]
   27d30:	d1fa      	bne.n	27d28 <mbedtls_platform_zeroize+0x8>
   27d32:	4770      	bx	lr

00027d34 <block_cipher_df>:
   27d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d38:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   27d3c:	b0b5      	sub	sp, #212	; 0xd4
   27d3e:	f200 80d7 	bhi.w	27ef0 <block_cipher_df+0x1bc>
   27d42:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 27ef8 <block_cipher_df+0x1c4>
   27d46:	4614      	mov	r4, r2
   27d48:	460d      	mov	r5, r1
   27d4a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   27d4e:	2100      	movs	r1, #0
   27d50:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   27d54:	4607      	mov	r7, r0
   27d56:	4648      	mov	r0, r9
   27d58:	f004 fd77 	bl	2c84a <memset>
   27d5c:	4640      	mov	r0, r8
   27d5e:	f001 f951 	bl	29004 <cc_mbedtls_aes_init>
   27d62:	2300      	movs	r3, #0
   27d64:	f8a9 3010 	strh.w	r3, [r9, #16]
   27d68:	ba63      	rev16	r3, r4
   27d6a:	f109 0618 	add.w	r6, r9, #24
   27d6e:	f8a9 3012 	strh.w	r3, [r9, #18]
   27d72:	2320      	movs	r3, #32
   27d74:	4629      	mov	r1, r5
   27d76:	4622      	mov	r2, r4
   27d78:	f889 3017 	strb.w	r3, [r9, #23]
   27d7c:	4630      	mov	r0, r6
   27d7e:	f004 fd35 	bl	2c7ec <memcpy>
   27d82:	4b5e      	ldr	r3, [pc, #376]	; (27efc <block_cipher_df+0x1c8>)
   27d84:	9307      	str	r3, [sp, #28]
   27d86:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27d8a:	2280      	movs	r2, #128	; 0x80
   27d8c:	9308      	str	r3, [sp, #32]
   27d8e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27d92:	9309      	str	r3, [sp, #36]	; 0x24
   27d94:	5532      	strb	r2, [r6, r4]
   27d96:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27d9a:	a907      	add	r1, sp, #28
   27d9c:	4640      	mov	r0, r8
   27d9e:	930a      	str	r3, [sp, #40]	; 0x28
   27da0:	f001 f946 	bl	29030 <cc_mbedtls_aes_setkey_enc>
   27da4:	4682      	mov	sl, r0
   27da6:	2800      	cmp	r0, #0
   27da8:	d17f      	bne.n	27eaa <block_cipher_df+0x176>
   27daa:	f104 0319 	add.w	r3, r4, #25
   27dae:	ae0b      	add	r6, sp, #44	; 0x2c
   27db0:	ac0f      	add	r4, sp, #60	; 0x3c
   27db2:	9302      	str	r3, [sp, #8]
   27db4:	9703      	str	r7, [sp, #12]
   27db6:	9601      	str	r6, [sp, #4]
   27db8:	9404      	str	r4, [sp, #16]
   27dba:	9801      	ldr	r0, [sp, #4]
   27dbc:	f8df b140 	ldr.w	fp, [pc, #320]	; 27f00 <block_cipher_df+0x1cc>
   27dc0:	2210      	movs	r2, #16
   27dc2:	2100      	movs	r1, #0
   27dc4:	f004 fd41 	bl	2c84a <memset>
   27dc8:	f8dd a008 	ldr.w	sl, [sp, #8]
   27dcc:	9405      	str	r4, [sp, #20]
   27dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27dd0:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   27dd4:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   27dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27dda:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   27dde:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   27de2:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   27de6:	405c      	eors	r4, r3
   27de8:	9b01      	ldr	r3, [sp, #4]
   27dea:	407e      	eors	r6, r7
   27dec:	4055      	eors	r5, r2
   27dee:	ea81 0700 	eor.w	r7, r1, r0
   27df2:	461a      	mov	r2, r3
   27df4:	2101      	movs	r1, #1
   27df6:	4640      	mov	r0, r8
   27df8:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   27dfc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   27e00:	f001 f930 	bl	29064 <cc_mbedtls_aes_crypt_ecb>
   27e04:	f1ba 0f10 	cmp.w	sl, #16
   27e08:	bf94      	ite	ls
   27e0a:	ebaa 0a0a 	subls.w	sl, sl, sl
   27e0e:	f1aa 0a10 	subhi.w	sl, sl, #16
   27e12:	f10b 0b10 	add.w	fp, fp, #16
   27e16:	2800      	cmp	r0, #0
   27e18:	d165      	bne.n	27ee6 <block_cipher_df+0x1b2>
   27e1a:	f1ba 0f00 	cmp.w	sl, #0
   27e1e:	d1d6      	bne.n	27dce <block_cipher_df+0x9a>
   27e20:	9c05      	ldr	r4, [sp, #20]
   27e22:	9901      	ldr	r1, [sp, #4]
   27e24:	4620      	mov	r0, r4
   27e26:	2210      	movs	r2, #16
   27e28:	f004 fce0 	bl	2c7ec <memcpy>
   27e2c:	f899 3003 	ldrb.w	r3, [r9, #3]
   27e30:	3410      	adds	r4, #16
   27e32:	3301      	adds	r3, #1
   27e34:	45a0      	cmp	r8, r4
   27e36:	f889 3003 	strb.w	r3, [r9, #3]
   27e3a:	d1be      	bne.n	27dba <block_cipher_df+0x86>
   27e3c:	9c04      	ldr	r4, [sp, #16]
   27e3e:	9f03      	ldr	r7, [sp, #12]
   27e40:	9e01      	ldr	r6, [sp, #4]
   27e42:	2280      	movs	r2, #128	; 0x80
   27e44:	4621      	mov	r1, r4
   27e46:	4640      	mov	r0, r8
   27e48:	f001 f8f2 	bl	29030 <cc_mbedtls_aes_setkey_enc>
   27e4c:	4682      	mov	sl, r0
   27e4e:	bb70      	cbnz	r0, 27eae <block_cipher_df+0x17a>
   27e50:	f107 0920 	add.w	r9, r7, #32
   27e54:	463d      	mov	r5, r7
   27e56:	ab13      	add	r3, sp, #76	; 0x4c
   27e58:	461a      	mov	r2, r3
   27e5a:	2101      	movs	r1, #1
   27e5c:	4640      	mov	r0, r8
   27e5e:	f001 f901 	bl	29064 <cc_mbedtls_aes_crypt_ecb>
   27e62:	2210      	movs	r2, #16
   27e64:	4682      	mov	sl, r0
   27e66:	a913      	add	r1, sp, #76	; 0x4c
   27e68:	4628      	mov	r0, r5
   27e6a:	4415      	add	r5, r2
   27e6c:	f1ba 0f00 	cmp.w	sl, #0
   27e70:	d11d      	bne.n	27eae <block_cipher_df+0x17a>
   27e72:	f004 fcbb 	bl	2c7ec <memcpy>
   27e76:	454d      	cmp	r5, r9
   27e78:	d1ed      	bne.n	27e56 <block_cipher_df+0x122>
   27e7a:	4640      	mov	r0, r8
   27e7c:	f001 f8d2 	bl	29024 <cc_mbedtls_aes_free>
   27e80:	481d      	ldr	r0, [pc, #116]	; (27ef8 <block_cipher_df+0x1c4>)
   27e82:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   27e86:	f7ff ff4b 	bl	27d20 <mbedtls_platform_zeroize>
   27e8a:	4620      	mov	r0, r4
   27e8c:	2120      	movs	r1, #32
   27e8e:	f7ff ff47 	bl	27d20 <mbedtls_platform_zeroize>
   27e92:	a807      	add	r0, sp, #28
   27e94:	2110      	movs	r1, #16
   27e96:	f7ff ff43 	bl	27d20 <mbedtls_platform_zeroize>
   27e9a:	4630      	mov	r0, r6
   27e9c:	2110      	movs	r1, #16
   27e9e:	f7ff ff3f 	bl	27d20 <mbedtls_platform_zeroize>
   27ea2:	4650      	mov	r0, sl
   27ea4:	b035      	add	sp, #212	; 0xd4
   27ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27eaa:	ac0f      	add	r4, sp, #60	; 0x3c
   27eac:	ae0b      	add	r6, sp, #44	; 0x2c
   27eae:	4640      	mov	r0, r8
   27eb0:	f001 f8b8 	bl	29024 <cc_mbedtls_aes_free>
   27eb4:	4810      	ldr	r0, [pc, #64]	; (27ef8 <block_cipher_df+0x1c4>)
   27eb6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   27eba:	f7ff ff31 	bl	27d20 <mbedtls_platform_zeroize>
   27ebe:	4620      	mov	r0, r4
   27ec0:	2120      	movs	r1, #32
   27ec2:	f7ff ff2d 	bl	27d20 <mbedtls_platform_zeroize>
   27ec6:	a807      	add	r0, sp, #28
   27ec8:	2110      	movs	r1, #16
   27eca:	f7ff ff29 	bl	27d20 <mbedtls_platform_zeroize>
   27ece:	2110      	movs	r1, #16
   27ed0:	4630      	mov	r0, r6
   27ed2:	f7ff ff25 	bl	27d20 <mbedtls_platform_zeroize>
   27ed6:	2120      	movs	r1, #32
   27ed8:	4638      	mov	r0, r7
   27eda:	f7ff ff21 	bl	27d20 <mbedtls_platform_zeroize>
   27ede:	4650      	mov	r0, sl
   27ee0:	b035      	add	sp, #212	; 0xd4
   27ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ee6:	9f03      	ldr	r7, [sp, #12]
   27ee8:	9e01      	ldr	r6, [sp, #4]
   27eea:	9c04      	ldr	r4, [sp, #16]
   27eec:	4682      	mov	sl, r0
   27eee:	e7de      	b.n	27eae <block_cipher_df+0x17a>
   27ef0:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   27ef4:	e7f3      	b.n	27ede <block_cipher_df+0x1aa>
   27ef6:	bf00      	nop
   27ef8:	20005448 	.word	0x20005448
   27efc:	03020100 	.word	0x03020100
   27f00:	20005458 	.word	0x20005458

00027f04 <ctr_drbg_update_internal>:
   27f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f08:	b088      	sub	sp, #32
   27f0a:	4604      	mov	r4, r0
   27f0c:	460d      	mov	r5, r1
   27f0e:	2220      	movs	r2, #32
   27f10:	2100      	movs	r1, #0
   27f12:	4668      	mov	r0, sp
   27f14:	f004 fc99 	bl	2c84a <memset>
   27f18:	f104 0620 	add.w	r6, r4, #32
   27f1c:	466f      	mov	r7, sp
   27f1e:	7be2      	ldrb	r2, [r4, #15]
   27f20:	3201      	adds	r2, #1
   27f22:	b2d2      	uxtb	r2, r2
   27f24:	73e2      	strb	r2, [r4, #15]
   27f26:	2a00      	cmp	r2, #0
   27f28:	d14d      	bne.n	27fc6 <ctr_drbg_update_internal+0xc2>
   27f2a:	7ba2      	ldrb	r2, [r4, #14]
   27f2c:	3201      	adds	r2, #1
   27f2e:	b2d2      	uxtb	r2, r2
   27f30:	73a2      	strb	r2, [r4, #14]
   27f32:	2a00      	cmp	r2, #0
   27f34:	d147      	bne.n	27fc6 <ctr_drbg_update_internal+0xc2>
   27f36:	7b63      	ldrb	r3, [r4, #13]
   27f38:	3301      	adds	r3, #1
   27f3a:	b2db      	uxtb	r3, r3
   27f3c:	7363      	strb	r3, [r4, #13]
   27f3e:	2b00      	cmp	r3, #0
   27f40:	d141      	bne.n	27fc6 <ctr_drbg_update_internal+0xc2>
   27f42:	7b23      	ldrb	r3, [r4, #12]
   27f44:	3301      	adds	r3, #1
   27f46:	b2db      	uxtb	r3, r3
   27f48:	7323      	strb	r3, [r4, #12]
   27f4a:	2b00      	cmp	r3, #0
   27f4c:	d13b      	bne.n	27fc6 <ctr_drbg_update_internal+0xc2>
   27f4e:	7ae3      	ldrb	r3, [r4, #11]
   27f50:	3301      	adds	r3, #1
   27f52:	b2db      	uxtb	r3, r3
   27f54:	72e3      	strb	r3, [r4, #11]
   27f56:	2b00      	cmp	r3, #0
   27f58:	d135      	bne.n	27fc6 <ctr_drbg_update_internal+0xc2>
   27f5a:	7aa3      	ldrb	r3, [r4, #10]
   27f5c:	3301      	adds	r3, #1
   27f5e:	b2db      	uxtb	r3, r3
   27f60:	72a3      	strb	r3, [r4, #10]
   27f62:	2b00      	cmp	r3, #0
   27f64:	d12f      	bne.n	27fc6 <ctr_drbg_update_internal+0xc2>
   27f66:	7a63      	ldrb	r3, [r4, #9]
   27f68:	3301      	adds	r3, #1
   27f6a:	b2db      	uxtb	r3, r3
   27f6c:	7263      	strb	r3, [r4, #9]
   27f6e:	bb53      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27f70:	7a23      	ldrb	r3, [r4, #8]
   27f72:	3301      	adds	r3, #1
   27f74:	b2db      	uxtb	r3, r3
   27f76:	7223      	strb	r3, [r4, #8]
   27f78:	bb2b      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27f7a:	79e3      	ldrb	r3, [r4, #7]
   27f7c:	3301      	adds	r3, #1
   27f7e:	b2db      	uxtb	r3, r3
   27f80:	71e3      	strb	r3, [r4, #7]
   27f82:	bb03      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27f84:	79a3      	ldrb	r3, [r4, #6]
   27f86:	3301      	adds	r3, #1
   27f88:	b2db      	uxtb	r3, r3
   27f8a:	71a3      	strb	r3, [r4, #6]
   27f8c:	b9db      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27f8e:	7963      	ldrb	r3, [r4, #5]
   27f90:	3301      	adds	r3, #1
   27f92:	b2db      	uxtb	r3, r3
   27f94:	7163      	strb	r3, [r4, #5]
   27f96:	b9b3      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27f98:	7923      	ldrb	r3, [r4, #4]
   27f9a:	3301      	adds	r3, #1
   27f9c:	b2db      	uxtb	r3, r3
   27f9e:	7123      	strb	r3, [r4, #4]
   27fa0:	b98b      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27fa2:	78e3      	ldrb	r3, [r4, #3]
   27fa4:	3301      	adds	r3, #1
   27fa6:	b2db      	uxtb	r3, r3
   27fa8:	70e3      	strb	r3, [r4, #3]
   27faa:	b963      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27fac:	78a3      	ldrb	r3, [r4, #2]
   27fae:	3301      	adds	r3, #1
   27fb0:	b2db      	uxtb	r3, r3
   27fb2:	70a3      	strb	r3, [r4, #2]
   27fb4:	b93b      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27fb6:	7863      	ldrb	r3, [r4, #1]
   27fb8:	3301      	adds	r3, #1
   27fba:	b2db      	uxtb	r3, r3
   27fbc:	7063      	strb	r3, [r4, #1]
   27fbe:	b913      	cbnz	r3, 27fc6 <ctr_drbg_update_internal+0xc2>
   27fc0:	7823      	ldrb	r3, [r4, #0]
   27fc2:	3301      	adds	r3, #1
   27fc4:	7023      	strb	r3, [r4, #0]
   27fc6:	463b      	mov	r3, r7
   27fc8:	4622      	mov	r2, r4
   27fca:	2101      	movs	r1, #1
   27fcc:	4630      	mov	r0, r6
   27fce:	f001 f849 	bl	29064 <cc_mbedtls_aes_crypt_ecb>
   27fd2:	4680      	mov	r8, r0
   27fd4:	bb50      	cbnz	r0, 2802c <ctr_drbg_update_internal+0x128>
   27fd6:	3710      	adds	r7, #16
   27fd8:	ab08      	add	r3, sp, #32
   27fda:	429f      	cmp	r7, r3
   27fdc:	d19f      	bne.n	27f1e <ctr_drbg_update_internal+0x1a>
   27fde:	9a02      	ldr	r2, [sp, #8]
   27fe0:	68ab      	ldr	r3, [r5, #8]
   27fe2:	9f03      	ldr	r7, [sp, #12]
   27fe4:	9907      	ldr	r1, [sp, #28]
   27fe6:	4053      	eors	r3, r2
   27fe8:	9302      	str	r3, [sp, #8]
   27fea:	4630      	mov	r0, r6
   27fec:	68ee      	ldr	r6, [r5, #12]
   27fee:	9b00      	ldr	r3, [sp, #0]
   27ff0:	407e      	eors	r6, r7
   27ff2:	9603      	str	r6, [sp, #12]
   27ff4:	9f04      	ldr	r7, [sp, #16]
   27ff6:	692e      	ldr	r6, [r5, #16]
   27ff8:	407e      	eors	r6, r7
   27ffa:	9604      	str	r6, [sp, #16]
   27ffc:	696e      	ldr	r6, [r5, #20]
   27ffe:	9f05      	ldr	r7, [sp, #20]
   28000:	407e      	eors	r6, r7
   28002:	9605      	str	r6, [sp, #20]
   28004:	9f06      	ldr	r7, [sp, #24]
   28006:	69ae      	ldr	r6, [r5, #24]
   28008:	407e      	eors	r6, r7
   2800a:	9606      	str	r6, [sp, #24]
   2800c:	69ee      	ldr	r6, [r5, #28]
   2800e:	4071      	eors	r1, r6
   28010:	9107      	str	r1, [sp, #28]
   28012:	6829      	ldr	r1, [r5, #0]
   28014:	404b      	eors	r3, r1
   28016:	9300      	str	r3, [sp, #0]
   28018:	9901      	ldr	r1, [sp, #4]
   2801a:	686b      	ldr	r3, [r5, #4]
   2801c:	2280      	movs	r2, #128	; 0x80
   2801e:	404b      	eors	r3, r1
   28020:	4669      	mov	r1, sp
   28022:	9301      	str	r3, [sp, #4]
   28024:	f001 f804 	bl	29030 <cc_mbedtls_aes_setkey_enc>
   28028:	4680      	mov	r8, r0
   2802a:	b138      	cbz	r0, 2803c <ctr_drbg_update_internal+0x138>
   2802c:	4668      	mov	r0, sp
   2802e:	2120      	movs	r1, #32
   28030:	f7ff fe76 	bl	27d20 <mbedtls_platform_zeroize>
   28034:	4640      	mov	r0, r8
   28036:	b008      	add	sp, #32
   28038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2803c:	2210      	movs	r2, #16
   2803e:	eb0d 0102 	add.w	r1, sp, r2
   28042:	4620      	mov	r0, r4
   28044:	f004 fbd2 	bl	2c7ec <memcpy>
   28048:	e7f0      	b.n	2802c <ctr_drbg_update_internal+0x128>
   2804a:	bf00      	nop

0002804c <mbedtls_ctr_drbg_reseed_internal>:
   2804c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28050:	4604      	mov	r4, r0
   28052:	6980      	ldr	r0, [r0, #24]
   28054:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   28058:	d852      	bhi.n	28100 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2805a:	461d      	mov	r5, r3
   2805c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   28060:	42ab      	cmp	r3, r5
   28062:	d34d      	bcc.n	28100 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   28064:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   28068:	1a1b      	subs	r3, r3, r0
   2806a:	4293      	cmp	r3, r2
   2806c:	4616      	mov	r6, r2
   2806e:	d347      	bcc.n	28100 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   28070:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2810c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   28074:	f44f 72c0 	mov.w	r2, #384	; 0x180
   28078:	460f      	mov	r7, r1
   2807a:	4648      	mov	r0, r9
   2807c:	2100      	movs	r1, #0
   2807e:	f004 fbe4 	bl	2c84a <memset>
   28082:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   28086:	69a2      	ldr	r2, [r4, #24]
   28088:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2808c:	4649      	mov	r1, r9
   2808e:	4798      	blx	r3
   28090:	2800      	cmp	r0, #0
   28092:	d138      	bne.n	28106 <mbedtls_ctr_drbg_reseed_internal+0xba>
   28094:	f8d4 8018 	ldr.w	r8, [r4, #24]
   28098:	b13d      	cbz	r5, 280aa <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2809a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   2809e:	462a      	mov	r2, r5
   280a0:	eb09 0108 	add.w	r1, r9, r8
   280a4:	4798      	blx	r3
   280a6:	bb70      	cbnz	r0, 28106 <mbedtls_ctr_drbg_reseed_internal+0xba>
   280a8:	44a8      	add	r8, r5
   280aa:	b107      	cbz	r7, 280ae <mbedtls_ctr_drbg_reseed_internal+0x62>
   280ac:	b9c6      	cbnz	r6, 280e0 <mbedtls_ctr_drbg_reseed_internal+0x94>
   280ae:	4917      	ldr	r1, [pc, #92]	; (2810c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   280b0:	4642      	mov	r2, r8
   280b2:	4608      	mov	r0, r1
   280b4:	f7ff fe3e 	bl	27d34 <block_cipher_df>
   280b8:	4605      	mov	r5, r0
   280ba:	b138      	cbz	r0, 280cc <mbedtls_ctr_drbg_reseed_internal+0x80>
   280bc:	4813      	ldr	r0, [pc, #76]	; (2810c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   280be:	f44f 71c0 	mov.w	r1, #384	; 0x180
   280c2:	f7ff fe2d 	bl	27d20 <mbedtls_platform_zeroize>
   280c6:	4628      	mov	r0, r5
   280c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   280cc:	490f      	ldr	r1, [pc, #60]	; (2810c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   280ce:	4620      	mov	r0, r4
   280d0:	f7ff ff18 	bl	27f04 <ctr_drbg_update_internal>
   280d4:	4605      	mov	r5, r0
   280d6:	2800      	cmp	r0, #0
   280d8:	d1f0      	bne.n	280bc <mbedtls_ctr_drbg_reseed_internal+0x70>
   280da:	2301      	movs	r3, #1
   280dc:	6123      	str	r3, [r4, #16]
   280de:	e7ed      	b.n	280bc <mbedtls_ctr_drbg_reseed_internal+0x70>
   280e0:	eb09 0008 	add.w	r0, r9, r8
   280e4:	4639      	mov	r1, r7
   280e6:	4632      	mov	r2, r6
   280e8:	f004 fb80 	bl	2c7ec <memcpy>
   280ec:	4907      	ldr	r1, [pc, #28]	; (2810c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   280ee:	44b0      	add	r8, r6
   280f0:	4642      	mov	r2, r8
   280f2:	4608      	mov	r0, r1
   280f4:	f7ff fe1e 	bl	27d34 <block_cipher_df>
   280f8:	4605      	mov	r5, r0
   280fa:	2800      	cmp	r0, #0
   280fc:	d1de      	bne.n	280bc <mbedtls_ctr_drbg_reseed_internal+0x70>
   280fe:	e7e5      	b.n	280cc <mbedtls_ctr_drbg_reseed_internal+0x80>
   28100:	f06f 0537 	mvn.w	r5, #55	; 0x37
   28104:	e7df      	b.n	280c6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   28106:	f06f 0533 	mvn.w	r5, #51	; 0x33
   2810a:	e7dc      	b.n	280c6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2810c:	200055e8 	.word	0x200055e8

00028110 <cc_mbedtls_ctr_drbg_init>:
   28110:	b510      	push	{r4, lr}
   28112:	22a4      	movs	r2, #164	; 0xa4
   28114:	4604      	mov	r4, r0
   28116:	2100      	movs	r1, #0
   28118:	f004 fb97 	bl	2c84a <memset>
   2811c:	4b06      	ldr	r3, [pc, #24]	; (28138 <cc_mbedtls_ctr_drbg_init+0x28>)
   2811e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28122:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   28126:	6121      	str	r1, [r4, #16]
   28128:	61e2      	str	r2, [r4, #28]
   2812a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2812e:	681b      	ldr	r3, [r3, #0]
   28130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28134:	4718      	bx	r3
   28136:	bf00      	nop
   28138:	20000900 	.word	0x20000900

0002813c <cc_mbedtls_ctr_drbg_seed>:
   2813c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28140:	b085      	sub	sp, #20
   28142:	4605      	mov	r5, r0
   28144:	460f      	mov	r7, r1
   28146:	4616      	mov	r6, r2
   28148:	2100      	movs	r1, #0
   2814a:	2210      	movs	r2, #16
   2814c:	4668      	mov	r0, sp
   2814e:	4699      	mov	r9, r3
   28150:	f004 fb7b 	bl	2c84a <memset>
   28154:	4b1d      	ldr	r3, [pc, #116]	; (281cc <cc_mbedtls_ctr_drbg_seed+0x90>)
   28156:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2815a:	681b      	ldr	r3, [r3, #0]
   2815c:	4640      	mov	r0, r8
   2815e:	4798      	blx	r3
   28160:	b120      	cbz	r0, 2816c <cc_mbedtls_ctr_drbg_seed+0x30>
   28162:	4604      	mov	r4, r0
   28164:	4620      	mov	r0, r4
   28166:	b005      	add	sp, #20
   28168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2816c:	f105 0420 	add.w	r4, r5, #32
   28170:	4620      	mov	r0, r4
   28172:	f000 ff47 	bl	29004 <cc_mbedtls_aes_init>
   28176:	69aa      	ldr	r2, [r5, #24]
   28178:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   2817c:	692e      	ldr	r6, [r5, #16]
   2817e:	b9e2      	cbnz	r2, 281ba <cc_mbedtls_ctr_drbg_seed+0x7e>
   28180:	2220      	movs	r2, #32
   28182:	2e00      	cmp	r6, #0
   28184:	61aa      	str	r2, [r5, #24]
   28186:	db1f      	blt.n	281c8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   28188:	4620      	mov	r0, r4
   2818a:	4669      	mov	r1, sp
   2818c:	2280      	movs	r2, #128	; 0x80
   2818e:	f000 ff4f 	bl	29030 <cc_mbedtls_aes_setkey_enc>
   28192:	4604      	mov	r4, r0
   28194:	b930      	cbnz	r0, 281a4 <cc_mbedtls_ctr_drbg_seed+0x68>
   28196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   28198:	4633      	mov	r3, r6
   2819a:	4649      	mov	r1, r9
   2819c:	4628      	mov	r0, r5
   2819e:	f7ff ff55 	bl	2804c <mbedtls_ctr_drbg_reseed_internal>
   281a2:	4604      	mov	r4, r0
   281a4:	4b0a      	ldr	r3, [pc, #40]	; (281d0 <cc_mbedtls_ctr_drbg_seed+0x94>)
   281a6:	4640      	mov	r0, r8
   281a8:	681b      	ldr	r3, [r3, #0]
   281aa:	4798      	blx	r3
   281ac:	2800      	cmp	r0, #0
   281ae:	bf18      	it	ne
   281b0:	4604      	movne	r4, r0
   281b2:	4620      	mov	r0, r4
   281b4:	b005      	add	sp, #20
   281b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   281ba:	2e00      	cmp	r6, #0
   281bc:	dae4      	bge.n	28188 <cc_mbedtls_ctr_drbg_seed+0x4c>
   281be:	2a17      	cmp	r2, #23
   281c0:	d802      	bhi.n	281c8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   281c2:	3201      	adds	r2, #1
   281c4:	0856      	lsrs	r6, r2, #1
   281c6:	e7df      	b.n	28188 <cc_mbedtls_ctr_drbg_seed+0x4c>
   281c8:	2600      	movs	r6, #0
   281ca:	e7dd      	b.n	28188 <cc_mbedtls_ctr_drbg_seed+0x4c>
   281cc:	200008fc 	.word	0x200008fc
   281d0:	200008f8 	.word	0x200008f8

000281d4 <cc_mbedtls_ctr_drbg_random_with_add>:
   281d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281d8:	b08d      	sub	sp, #52	; 0x34
   281da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   281de:	9f16      	ldr	r7, [sp, #88]	; 0x58
   281e0:	f200 80e3 	bhi.w	283aa <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   281e4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   281e8:	f200 80dc 	bhi.w	283a4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   281ec:	4604      	mov	r4, r0
   281ee:	4615      	mov	r5, r2
   281f0:	460e      	mov	r6, r1
   281f2:	2220      	movs	r2, #32
   281f4:	2100      	movs	r1, #0
   281f6:	a804      	add	r0, sp, #16
   281f8:	4698      	mov	r8, r3
   281fa:	f004 fb26 	bl	2c84a <memset>
   281fe:	4b6c      	ldr	r3, [pc, #432]	; (283b0 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   28200:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   28204:	681b      	ldr	r3, [r3, #0]
   28206:	4648      	mov	r0, r9
   28208:	4798      	blx	r3
   2820a:	4683      	mov	fp, r0
   2820c:	2800      	cmp	r0, #0
   2820e:	f040 8092 	bne.w	28336 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   28212:	6922      	ldr	r2, [r4, #16]
   28214:	69e3      	ldr	r3, [r4, #28]
   28216:	429a      	cmp	r2, r3
   28218:	f300 8091 	bgt.w	2833e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   2821c:	6963      	ldr	r3, [r4, #20]
   2821e:	2b00      	cmp	r3, #0
   28220:	f040 808d 	bne.w	2833e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   28224:	2f00      	cmp	r7, #0
   28226:	f040 80a9 	bne.w	2837c <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   2822a:	f8df a188 	ldr.w	sl, [pc, #392]	; 283b4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2822e:	466f      	mov	r7, sp
   28230:	2d00      	cmp	r5, #0
   28232:	f000 8098 	beq.w	28366 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   28236:	f104 0820 	add.w	r8, r4, #32
   2823a:	466f      	mov	r7, sp
   2823c:	e00e      	b.n	2825c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2823e:	2d10      	cmp	r5, #16
   28240:	46ab      	mov	fp, r5
   28242:	bf28      	it	cs
   28244:	f04f 0b10 	movcs.w	fp, #16
   28248:	4630      	mov	r0, r6
   2824a:	465a      	mov	r2, fp
   2824c:	4639      	mov	r1, r7
   2824e:	f004 facd 	bl	2c7ec <memcpy>
   28252:	ebb5 050b 	subs.w	r5, r5, fp
   28256:	445e      	add	r6, fp
   28258:	f000 8085 	beq.w	28366 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2825c:	7be3      	ldrb	r3, [r4, #15]
   2825e:	3301      	adds	r3, #1
   28260:	b2db      	uxtb	r3, r3
   28262:	73e3      	strb	r3, [r4, #15]
   28264:	2b00      	cmp	r3, #0
   28266:	d14d      	bne.n	28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28268:	7ba3      	ldrb	r3, [r4, #14]
   2826a:	3301      	adds	r3, #1
   2826c:	b2db      	uxtb	r3, r3
   2826e:	73a3      	strb	r3, [r4, #14]
   28270:	2b00      	cmp	r3, #0
   28272:	d147      	bne.n	28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28274:	7b63      	ldrb	r3, [r4, #13]
   28276:	3301      	adds	r3, #1
   28278:	b2db      	uxtb	r3, r3
   2827a:	7363      	strb	r3, [r4, #13]
   2827c:	2b00      	cmp	r3, #0
   2827e:	d141      	bne.n	28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28280:	7b23      	ldrb	r3, [r4, #12]
   28282:	3301      	adds	r3, #1
   28284:	b2db      	uxtb	r3, r3
   28286:	7323      	strb	r3, [r4, #12]
   28288:	2b00      	cmp	r3, #0
   2828a:	d13b      	bne.n	28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2828c:	7ae3      	ldrb	r3, [r4, #11]
   2828e:	3301      	adds	r3, #1
   28290:	b2db      	uxtb	r3, r3
   28292:	72e3      	strb	r3, [r4, #11]
   28294:	2b00      	cmp	r3, #0
   28296:	d135      	bne.n	28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28298:	7aa3      	ldrb	r3, [r4, #10]
   2829a:	3301      	adds	r3, #1
   2829c:	b2db      	uxtb	r3, r3
   2829e:	72a3      	strb	r3, [r4, #10]
   282a0:	2b00      	cmp	r3, #0
   282a2:	d12f      	bne.n	28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282a4:	7a63      	ldrb	r3, [r4, #9]
   282a6:	3301      	adds	r3, #1
   282a8:	b2db      	uxtb	r3, r3
   282aa:	7263      	strb	r3, [r4, #9]
   282ac:	bb53      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282ae:	7a23      	ldrb	r3, [r4, #8]
   282b0:	3301      	adds	r3, #1
   282b2:	b2db      	uxtb	r3, r3
   282b4:	7223      	strb	r3, [r4, #8]
   282b6:	bb2b      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282b8:	79e3      	ldrb	r3, [r4, #7]
   282ba:	3301      	adds	r3, #1
   282bc:	b2db      	uxtb	r3, r3
   282be:	71e3      	strb	r3, [r4, #7]
   282c0:	bb03      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282c2:	79a3      	ldrb	r3, [r4, #6]
   282c4:	3301      	adds	r3, #1
   282c6:	b2db      	uxtb	r3, r3
   282c8:	71a3      	strb	r3, [r4, #6]
   282ca:	b9db      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282cc:	7963      	ldrb	r3, [r4, #5]
   282ce:	3301      	adds	r3, #1
   282d0:	b2db      	uxtb	r3, r3
   282d2:	7163      	strb	r3, [r4, #5]
   282d4:	b9b3      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282d6:	7923      	ldrb	r3, [r4, #4]
   282d8:	3301      	adds	r3, #1
   282da:	b2db      	uxtb	r3, r3
   282dc:	7123      	strb	r3, [r4, #4]
   282de:	b98b      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282e0:	78e3      	ldrb	r3, [r4, #3]
   282e2:	3301      	adds	r3, #1
   282e4:	b2db      	uxtb	r3, r3
   282e6:	70e3      	strb	r3, [r4, #3]
   282e8:	b963      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282ea:	78a3      	ldrb	r3, [r4, #2]
   282ec:	3301      	adds	r3, #1
   282ee:	b2db      	uxtb	r3, r3
   282f0:	70a3      	strb	r3, [r4, #2]
   282f2:	b93b      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282f4:	7863      	ldrb	r3, [r4, #1]
   282f6:	3301      	adds	r3, #1
   282f8:	b2db      	uxtb	r3, r3
   282fa:	7063      	strb	r3, [r4, #1]
   282fc:	b913      	cbnz	r3, 28304 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   282fe:	7823      	ldrb	r3, [r4, #0]
   28300:	3301      	adds	r3, #1
   28302:	7023      	strb	r3, [r4, #0]
   28304:	463b      	mov	r3, r7
   28306:	4622      	mov	r2, r4
   28308:	2101      	movs	r1, #1
   2830a:	4640      	mov	r0, r8
   2830c:	f000 feaa 	bl	29064 <cc_mbedtls_aes_crypt_ecb>
   28310:	4683      	mov	fp, r0
   28312:	2800      	cmp	r0, #0
   28314:	d093      	beq.n	2823e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   28316:	f8da 3000 	ldr.w	r3, [sl]
   2831a:	4648      	mov	r0, r9
   2831c:	4798      	blx	r3
   2831e:	2120      	movs	r1, #32
   28320:	4603      	mov	r3, r0
   28322:	a804      	add	r0, sp, #16
   28324:	2b00      	cmp	r3, #0
   28326:	bf18      	it	ne
   28328:	469b      	movne	fp, r3
   2832a:	f7ff fcf9 	bl	27d20 <mbedtls_platform_zeroize>
   2832e:	2110      	movs	r1, #16
   28330:	4638      	mov	r0, r7
   28332:	f7ff fcf5 	bl	27d20 <mbedtls_platform_zeroize>
   28336:	4658      	mov	r0, fp
   28338:	b00d      	add	sp, #52	; 0x34
   2833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2833e:	463a      	mov	r2, r7
   28340:	4641      	mov	r1, r8
   28342:	2300      	movs	r3, #0
   28344:	4620      	mov	r0, r4
   28346:	f7ff fe81 	bl	2804c <mbedtls_ctr_drbg_reseed_internal>
   2834a:	f8df a068 	ldr.w	sl, [pc, #104]	; 283b4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2834e:	2800      	cmp	r0, #0
   28350:	f43f af6d 	beq.w	2822e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   28354:	f8da 3000 	ldr.w	r3, [sl]
   28358:	4648      	mov	r0, r9
   2835a:	4798      	blx	r3
   2835c:	4683      	mov	fp, r0
   2835e:	2800      	cmp	r0, #0
   28360:	f43f af65 	beq.w	2822e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   28364:	e7e7      	b.n	28336 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   28366:	a904      	add	r1, sp, #16
   28368:	4620      	mov	r0, r4
   2836a:	f7ff fdcb 	bl	27f04 <ctr_drbg_update_internal>
   2836e:	4683      	mov	fp, r0
   28370:	2800      	cmp	r0, #0
   28372:	d1d0      	bne.n	28316 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   28374:	6923      	ldr	r3, [r4, #16]
   28376:	3301      	adds	r3, #1
   28378:	6123      	str	r3, [r4, #16]
   2837a:	e7cc      	b.n	28316 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2837c:	463a      	mov	r2, r7
   2837e:	4641      	mov	r1, r8
   28380:	a804      	add	r0, sp, #16
   28382:	f7ff fcd7 	bl	27d34 <block_cipher_df>
   28386:	4683      	mov	fp, r0
   28388:	b118      	cbz	r0, 28392 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   2838a:	f8df a028 	ldr.w	sl, [pc, #40]	; 283b4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2838e:	466f      	mov	r7, sp
   28390:	e7c1      	b.n	28316 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   28392:	a904      	add	r1, sp, #16
   28394:	4620      	mov	r0, r4
   28396:	f7ff fdb5 	bl	27f04 <ctr_drbg_update_internal>
   2839a:	4683      	mov	fp, r0
   2839c:	2800      	cmp	r0, #0
   2839e:	f43f af44 	beq.w	2822a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   283a2:	e7f2      	b.n	2838a <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   283a4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   283a8:	e7c5      	b.n	28336 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   283aa:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   283ae:	e7c2      	b.n	28336 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   283b0:	200008fc 	.word	0x200008fc
   283b4:	200008f8 	.word	0x200008f8

000283b8 <entropy_update>:
   283b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   283bc:	2b20      	cmp	r3, #32
   283be:	b08b      	sub	sp, #44	; 0x2c
   283c0:	461d      	mov	r5, r3
   283c2:	4606      	mov	r6, r0
   283c4:	4688      	mov	r8, r1
   283c6:	4691      	mov	r9, r2
   283c8:	d826      	bhi.n	28418 <entropy_update+0x60>
   283ca:	b2db      	uxtb	r3, r3
   283cc:	af02      	add	r7, sp, #8
   283ce:	f88d 8004 	strb.w	r8, [sp, #4]
   283d2:	46b0      	mov	r8, r6
   283d4:	f88d 3005 	strb.w	r3, [sp, #5]
   283d8:	f858 1b04 	ldr.w	r1, [r8], #4
   283dc:	b921      	cbnz	r1, 283e8 <entropy_update+0x30>
   283de:	4640      	mov	r0, r8
   283e0:	f000 fe84 	bl	290ec <cc_mbedtls_sha256_starts>
   283e4:	4604      	mov	r4, r0
   283e6:	b940      	cbnz	r0, 283fa <entropy_update+0x42>
   283e8:	2301      	movs	r3, #1
   283ea:	6033      	str	r3, [r6, #0]
   283ec:	2202      	movs	r2, #2
   283ee:	a901      	add	r1, sp, #4
   283f0:	4640      	mov	r0, r8
   283f2:	f000 fe8f 	bl	29114 <cc_mbedtls_sha256_update>
   283f6:	4604      	mov	r4, r0
   283f8:	b138      	cbz	r0, 2840a <entropy_update+0x52>
   283fa:	4638      	mov	r0, r7
   283fc:	2120      	movs	r1, #32
   283fe:	f7ff fc8f 	bl	27d20 <mbedtls_platform_zeroize>
   28402:	4620      	mov	r0, r4
   28404:	b00b      	add	sp, #44	; 0x2c
   28406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2840a:	462a      	mov	r2, r5
   2840c:	4649      	mov	r1, r9
   2840e:	4640      	mov	r0, r8
   28410:	f000 fe80 	bl	29114 <cc_mbedtls_sha256_update>
   28414:	4604      	mov	r4, r0
   28416:	e7f0      	b.n	283fa <entropy_update+0x42>
   28418:	af02      	add	r7, sp, #8
   2841a:	4619      	mov	r1, r3
   2841c:	4610      	mov	r0, r2
   2841e:	2300      	movs	r3, #0
   28420:	463a      	mov	r2, r7
   28422:	f000 fffd 	bl	29420 <cc_mbedtls_sha256>
   28426:	4604      	mov	r4, r0
   28428:	2800      	cmp	r0, #0
   2842a:	d1e6      	bne.n	283fa <entropy_update+0x42>
   2842c:	2320      	movs	r3, #32
   2842e:	46b9      	mov	r9, r7
   28430:	461d      	mov	r5, r3
   28432:	e7cc      	b.n	283ce <entropy_update+0x16>

00028434 <entropy_gather_internal.part.0>:
   28434:	b5f0      	push	{r4, r5, r6, r7, lr}
   28436:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   2843a:	b0a7      	sub	sp, #156	; 0x9c
   2843c:	2b00      	cmp	r3, #0
   2843e:	bfd8      	it	le
   28440:	ae02      	addle	r6, sp, #8
   28442:	dd2c      	ble.n	2849e <entropy_gather_internal.part.0+0x6a>
   28444:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   28448:	4605      	mov	r5, r0
   2844a:	2300      	movs	r3, #0
   2844c:	ae02      	add	r6, sp, #8
   2844e:	9301      	str	r3, [sp, #4]
   28450:	f1a4 0701 	sub.w	r7, r4, #1
   28454:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   28458:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   2845c:	ab01      	add	r3, sp, #4
   2845e:	2290      	movs	r2, #144	; 0x90
   28460:	4631      	mov	r1, r6
   28462:	47a0      	blx	r4
   28464:	fab7 f787 	clz	r7, r7
   28468:	097f      	lsrs	r7, r7, #5
   2846a:	4604      	mov	r4, r0
   2846c:	b910      	cbnz	r0, 28474 <entropy_gather_internal.part.0+0x40>
   2846e:	9b01      	ldr	r3, [sp, #4]
   28470:	b93b      	cbnz	r3, 28482 <entropy_gather_internal.part.0+0x4e>
   28472:	b1a7      	cbz	r7, 2849e <entropy_gather_internal.part.0+0x6a>
   28474:	4630      	mov	r0, r6
   28476:	2190      	movs	r1, #144	; 0x90
   28478:	f7ff fc52 	bl	27d20 <mbedtls_platform_zeroize>
   2847c:	4620      	mov	r0, r4
   2847e:	b027      	add	sp, #156	; 0x9c
   28480:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28482:	4601      	mov	r1, r0
   28484:	4632      	mov	r2, r6
   28486:	4628      	mov	r0, r5
   28488:	f7ff ff96 	bl	283b8 <entropy_update>
   2848c:	b950      	cbnz	r0, 284a4 <entropy_gather_internal.part.0+0x70>
   2848e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   28492:	9a01      	ldr	r2, [sp, #4]
   28494:	4413      	add	r3, r2
   28496:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   2849a:	2f00      	cmp	r7, #0
   2849c:	d1ea      	bne.n	28474 <entropy_gather_internal.part.0+0x40>
   2849e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   284a2:	e7e7      	b.n	28474 <entropy_gather_internal.part.0+0x40>
   284a4:	4604      	mov	r4, r0
   284a6:	4620      	mov	r0, r4
   284a8:	b027      	add	sp, #156	; 0x9c
   284aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000284ac <cc_mbedtls_entropy_init>:
   284ac:	b570      	push	{r4, r5, r6, lr}
   284ae:	2500      	movs	r5, #0
   284b0:	4604      	mov	r4, r0
   284b2:	f504 7688 	add.w	r6, r4, #272	; 0x110
   284b6:	2214      	movs	r2, #20
   284b8:	4629      	mov	r1, r5
   284ba:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   284be:	30fc      	adds	r0, #252	; 0xfc
   284c0:	f004 f9c3 	bl	2c84a <memset>
   284c4:	2208      	movs	r2, #8
   284c6:	4629      	mov	r1, r5
   284c8:	4630      	mov	r0, r6
   284ca:	f004 f9be 	bl	2c84a <memset>
   284ce:	4b15      	ldr	r3, [pc, #84]	; (28524 <cc_mbedtls_entropy_init+0x78>)
   284d0:	4630      	mov	r0, r6
   284d2:	681b      	ldr	r3, [r3, #0]
   284d4:	4798      	blx	r3
   284d6:	4620      	mov	r0, r4
   284d8:	f840 5b04 	str.w	r5, [r0], #4
   284dc:	f000 fdec 	bl	290b8 <cc_mbedtls_sha256_init>
   284e0:	4b11      	ldr	r3, [pc, #68]	; (28528 <cc_mbedtls_entropy_init+0x7c>)
   284e2:	4630      	mov	r0, r6
   284e4:	681b      	ldr	r3, [r3, #0]
   284e6:	4798      	blx	r3
   284e8:	b9d8      	cbnz	r0, 28522 <cc_mbedtls_entropy_init+0x76>
   284ea:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   284ee:	42ab      	cmp	r3, r5
   284f0:	dc11      	bgt.n	28516 <cc_mbedtls_entropy_init+0x6a>
   284f2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   284f6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   284fa:	2120      	movs	r1, #32
   284fc:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   28500:	2101      	movs	r1, #1
   28502:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   28506:	3301      	adds	r3, #1
   28508:	4908      	ldr	r1, [pc, #32]	; (2852c <cc_mbedtls_entropy_init+0x80>)
   2850a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   2850e:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   28512:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   28516:	4b06      	ldr	r3, [pc, #24]	; (28530 <cc_mbedtls_entropy_init+0x84>)
   28518:	4630      	mov	r0, r6
   2851a:	681b      	ldr	r3, [r3, #0]
   2851c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28520:	4718      	bx	r3
   28522:	bd70      	pop	{r4, r5, r6, pc}
   28524:	20000900 	.word	0x20000900
   28528:	200008fc 	.word	0x200008fc
   2852c:	00028f09 	.word	0x00028f09
   28530:	200008f8 	.word	0x200008f8

00028534 <cc_mbedtls_entropy_func>:
   28534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28538:	2a20      	cmp	r2, #32
   2853a:	b088      	sub	sp, #32
   2853c:	d879      	bhi.n	28632 <cc_mbedtls_entropy_func+0xfe>
   2853e:	4b3e      	ldr	r3, [pc, #248]	; (28638 <cc_mbedtls_entropy_func+0x104>)
   28540:	f500 7988 	add.w	r9, r0, #272	; 0x110
   28544:	681b      	ldr	r3, [r3, #0]
   28546:	4604      	mov	r4, r0
   28548:	4648      	mov	r0, r9
   2854a:	4617      	mov	r7, r2
   2854c:	4688      	mov	r8, r1
   2854e:	4798      	blx	r3
   28550:	4605      	mov	r5, r0
   28552:	b9f8      	cbnz	r0, 28594 <cc_mbedtls_entropy_func+0x60>
   28554:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   28558:	f240 1601 	movw	r6, #257	; 0x101
   2855c:	2b00      	cmp	r3, #0
   2855e:	d064      	beq.n	2862a <cc_mbedtls_entropy_func+0xf6>
   28560:	4620      	mov	r0, r4
   28562:	f7ff ff67 	bl	28434 <entropy_gather_internal.part.0>
   28566:	4605      	mov	r5, r0
   28568:	b938      	cbnz	r0, 2857a <cc_mbedtls_entropy_func+0x46>
   2856a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2856e:	2b00      	cmp	r3, #0
   28570:	dc14      	bgt.n	2859c <cc_mbedtls_entropy_func+0x68>
   28572:	3e01      	subs	r6, #1
   28574:	d1f2      	bne.n	2855c <cc_mbedtls_entropy_func+0x28>
   28576:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   2857a:	466e      	mov	r6, sp
   2857c:	2120      	movs	r1, #32
   2857e:	4630      	mov	r0, r6
   28580:	f7ff fbce 	bl	27d20 <mbedtls_platform_zeroize>
   28584:	4b2d      	ldr	r3, [pc, #180]	; (2863c <cc_mbedtls_entropy_func+0x108>)
   28586:	4648      	mov	r0, r9
   28588:	681b      	ldr	r3, [r3, #0]
   2858a:	4798      	blx	r3
   2858c:	2800      	cmp	r0, #0
   2858e:	bf18      	it	ne
   28590:	f06f 051d 	mvnne.w	r5, #29
   28594:	4628      	mov	r0, r5
   28596:	b008      	add	sp, #32
   28598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2859c:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   285a0:	4293      	cmp	r3, r2
   285a2:	d303      	bcc.n	285ac <cc_mbedtls_entropy_func+0x78>
   285a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   285a8:	2a01      	cmp	r2, #1
   285aa:	d002      	beq.n	285b2 <cc_mbedtls_entropy_func+0x7e>
   285ac:	3e01      	subs	r6, #1
   285ae:	d1d7      	bne.n	28560 <cc_mbedtls_entropy_func+0x2c>
   285b0:	e7e1      	b.n	28576 <cc_mbedtls_entropy_func+0x42>
   285b2:	2b1f      	cmp	r3, #31
   285b4:	d9fa      	bls.n	285ac <cc_mbedtls_entropy_func+0x78>
   285b6:	466e      	mov	r6, sp
   285b8:	4601      	mov	r1, r0
   285ba:	2220      	movs	r2, #32
   285bc:	4630      	mov	r0, r6
   285be:	f104 0a04 	add.w	sl, r4, #4
   285c2:	f004 f942 	bl	2c84a <memset>
   285c6:	4631      	mov	r1, r6
   285c8:	4650      	mov	r0, sl
   285ca:	f000 fdcd 	bl	29168 <cc_mbedtls_sha256_finish>
   285ce:	4605      	mov	r5, r0
   285d0:	2800      	cmp	r0, #0
   285d2:	d1d3      	bne.n	2857c <cc_mbedtls_entropy_func+0x48>
   285d4:	4650      	mov	r0, sl
   285d6:	f000 fd83 	bl	290e0 <cc_mbedtls_sha256_free>
   285da:	4650      	mov	r0, sl
   285dc:	f000 fd6c 	bl	290b8 <cc_mbedtls_sha256_init>
   285e0:	4629      	mov	r1, r5
   285e2:	4650      	mov	r0, sl
   285e4:	f000 fd82 	bl	290ec <cc_mbedtls_sha256_starts>
   285e8:	4605      	mov	r5, r0
   285ea:	2800      	cmp	r0, #0
   285ec:	d1c6      	bne.n	2857c <cc_mbedtls_entropy_func+0x48>
   285ee:	4650      	mov	r0, sl
   285f0:	2220      	movs	r2, #32
   285f2:	4631      	mov	r1, r6
   285f4:	f000 fd8e 	bl	29114 <cc_mbedtls_sha256_update>
   285f8:	4605      	mov	r5, r0
   285fa:	2800      	cmp	r0, #0
   285fc:	d1be      	bne.n	2857c <cc_mbedtls_entropy_func+0x48>
   285fe:	4603      	mov	r3, r0
   28600:	4632      	mov	r2, r6
   28602:	2120      	movs	r1, #32
   28604:	4630      	mov	r0, r6
   28606:	f000 ff0b 	bl	29420 <cc_mbedtls_sha256>
   2860a:	4605      	mov	r5, r0
   2860c:	2800      	cmp	r0, #0
   2860e:	d1b5      	bne.n	2857c <cc_mbedtls_entropy_func+0x48>
   28610:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   28614:	2b00      	cmp	r3, #0
   28616:	bfc4      	itt	gt
   28618:	2300      	movgt	r3, #0
   2861a:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   2861e:	463a      	mov	r2, r7
   28620:	4640      	mov	r0, r8
   28622:	4631      	mov	r1, r6
   28624:	f004 f8e2 	bl	2c7ec <memcpy>
   28628:	e7a8      	b.n	2857c <cc_mbedtls_entropy_func+0x48>
   2862a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   2862e:	466e      	mov	r6, sp
   28630:	e7a4      	b.n	2857c <cc_mbedtls_entropy_func+0x48>
   28632:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   28636:	e7ad      	b.n	28594 <cc_mbedtls_entropy_func+0x60>
   28638:	200008fc 	.word	0x200008fc
   2863c:	200008f8 	.word	0x200008f8

00028640 <RndStartupTest.constprop.0>:
   28640:	b530      	push	{r4, r5, lr}
   28642:	b08d      	sub	sp, #52	; 0x34
   28644:	2100      	movs	r1, #0
   28646:	2228      	movs	r2, #40	; 0x28
   28648:	a802      	add	r0, sp, #8
   2864a:	9101      	str	r1, [sp, #4]
   2864c:	f004 f8fd 	bl	2c84a <memset>
   28650:	a802      	add	r0, sp, #8
   28652:	f000 ff0d 	bl	29470 <RNG_PLAT_SetUserRngParameters>
   28656:	4604      	mov	r4, r0
   28658:	b110      	cbz	r0, 28660 <RndStartupTest.constprop.0+0x20>
   2865a:	4620      	mov	r0, r4
   2865c:	b00d      	add	sp, #52	; 0x34
   2865e:	bd30      	pop	{r4, r5, pc}
   28660:	4d17      	ldr	r5, [pc, #92]	; (286c0 <RndStartupTest.constprop.0+0x80>)
   28662:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28666:	6828      	ldr	r0, [r5, #0]
   28668:	f000 f944 	bl	288f4 <CC_PalMutexLock>
   2866c:	4604      	mov	r4, r0
   2866e:	b120      	cbz	r0, 2867a <RndStartupTest.constprop.0+0x3a>
   28670:	4814      	ldr	r0, [pc, #80]	; (286c4 <RndStartupTest.constprop.0+0x84>)
   28672:	f7ff fa33 	bl	27adc <CC_PalAbort>
   28676:	2c01      	cmp	r4, #1
   28678:	d018      	beq.n	286ac <RndStartupTest.constprop.0+0x6c>
   2867a:	2000      	movs	r0, #0
   2867c:	f000 f96a 	bl	28954 <CC_PalPowerSaveModeSelect>
   28680:	b9d0      	cbnz	r0, 286b8 <RndStartupTest.constprop.0+0x78>
   28682:	4a11      	ldr	r2, [pc, #68]	; (286c8 <RndStartupTest.constprop.0+0x88>)
   28684:	a902      	add	r1, sp, #8
   28686:	a801      	add	r0, sp, #4
   28688:	f000 fc30 	bl	28eec <LLF_RND_RunTrngStartupTest>
   2868c:	4604      	mov	r4, r0
   2868e:	2001      	movs	r0, #1
   28690:	f000 f960 	bl	28954 <CC_PalPowerSaveModeSelect>
   28694:	b960      	cbnz	r0, 286b0 <RndStartupTest.constprop.0+0x70>
   28696:	6828      	ldr	r0, [r5, #0]
   28698:	f000 f934 	bl	28904 <CC_PalMutexUnlock>
   2869c:	2800      	cmp	r0, #0
   2869e:	d0dc      	beq.n	2865a <RndStartupTest.constprop.0+0x1a>
   286a0:	480a      	ldr	r0, [pc, #40]	; (286cc <RndStartupTest.constprop.0+0x8c>)
   286a2:	f7ff fa1b 	bl	27adc <CC_PalAbort>
   286a6:	4620      	mov	r0, r4
   286a8:	b00d      	add	sp, #52	; 0x34
   286aa:	bd30      	pop	{r4, r5, pc}
   286ac:	2405      	movs	r4, #5
   286ae:	e7f2      	b.n	28696 <RndStartupTest.constprop.0+0x56>
   286b0:	4807      	ldr	r0, [pc, #28]	; (286d0 <RndStartupTest.constprop.0+0x90>)
   286b2:	f7ff fa13 	bl	27adc <CC_PalAbort>
   286b6:	e7ee      	b.n	28696 <RndStartupTest.constprop.0+0x56>
   286b8:	4806      	ldr	r0, [pc, #24]	; (286d4 <RndStartupTest.constprop.0+0x94>)
   286ba:	f7ff fa0f 	bl	27adc <CC_PalAbort>
   286be:	e7e0      	b.n	28682 <RndStartupTest.constprop.0+0x42>
   286c0:	200008e4 	.word	0x200008e4
   286c4:	000353a8 	.word	0x000353a8
   286c8:	20005768 	.word	0x20005768
   286cc:	00035400 	.word	0x00035400
   286d0:	000353e0 	.word	0x000353e0
   286d4:	000353c0 	.word	0x000353c0

000286d8 <CC_LibInit>:
   286d8:	b530      	push	{r4, r5, lr}
   286da:	b083      	sub	sp, #12
   286dc:	f000 f85c 	bl	28798 <CC_HalInit>
   286e0:	b128      	cbz	r0, 286ee <CC_LibInit+0x16>
   286e2:	f000 f8ab 	bl	2883c <CC_PalTerminate>
   286e6:	2403      	movs	r4, #3
   286e8:	4620      	mov	r0, r4
   286ea:	b003      	add	sp, #12
   286ec:	bd30      	pop	{r4, r5, pc}
   286ee:	f000 f877 	bl	287e0 <CC_PalInit>
   286f2:	b9d8      	cbnz	r0, 2872c <CC_LibInit+0x54>
   286f4:	f000 f92e 	bl	28954 <CC_PalPowerSaveModeSelect>
   286f8:	b9e0      	cbnz	r0, 28734 <CC_LibInit+0x5c>
   286fa:	4c22      	ldr	r4, [pc, #136]	; (28784 <CC_LibInit+0xac>)
   286fc:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   28700:	0e1b      	lsrs	r3, r3, #24
   28702:	2bf0      	cmp	r3, #240	; 0xf0
   28704:	d10a      	bne.n	2871c <CC_LibInit+0x44>
   28706:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   2870a:	4b1f      	ldr	r3, [pc, #124]	; (28788 <CC_LibInit+0xb0>)
   2870c:	429a      	cmp	r2, r3
   2870e:	d031      	beq.n	28774 <CC_LibInit+0x9c>
   28710:	f000 f844 	bl	2879c <CC_HalTerminate>
   28714:	2407      	movs	r4, #7
   28716:	f000 f891 	bl	2883c <CC_PalTerminate>
   2871a:	e7e5      	b.n	286e8 <CC_LibInit+0x10>
   2871c:	f000 f83e 	bl	2879c <CC_HalTerminate>
   28720:	f000 f88c 	bl	2883c <CC_PalTerminate>
   28724:	2406      	movs	r4, #6
   28726:	4620      	mov	r0, r4
   28728:	b003      	add	sp, #12
   2872a:	bd30      	pop	{r4, r5, pc}
   2872c:	2404      	movs	r4, #4
   2872e:	4620      	mov	r0, r4
   28730:	b003      	add	sp, #12
   28732:	bd30      	pop	{r4, r5, pc}
   28734:	f000 f832 	bl	2879c <CC_HalTerminate>
   28738:	f000 f880 	bl	2883c <CC_PalTerminate>
   2873c:	f7ff ff80 	bl	28640 <RndStartupTest.constprop.0>
   28740:	4604      	mov	r4, r0
   28742:	b998      	cbnz	r0, 2876c <CC_LibInit+0x94>
   28744:	4d11      	ldr	r5, [pc, #68]	; (2878c <CC_LibInit+0xb4>)
   28746:	682b      	ldr	r3, [r5, #0]
   28748:	2b00      	cmp	r3, #0
   2874a:	d1cd      	bne.n	286e8 <CC_LibInit+0x10>
   2874c:	4602      	mov	r2, r0
   2874e:	4601      	mov	r1, r0
   28750:	f7ff f9e6 	bl	27b20 <nrf_cc3xx_platform_ctr_drbg_init>
   28754:	b950      	cbnz	r0, 2876c <CC_LibInit+0x94>
   28756:	490e      	ldr	r1, [pc, #56]	; (28790 <CC_LibInit+0xb8>)
   28758:	ab01      	add	r3, sp, #4
   2875a:	2268      	movs	r2, #104	; 0x68
   2875c:	f7ff fa10 	bl	27b80 <nrf_cc3xx_platform_ctr_drbg_get>
   28760:	b920      	cbnz	r0, 2876c <CC_LibInit+0x94>
   28762:	4b0c      	ldr	r3, [pc, #48]	; (28794 <CC_LibInit+0xbc>)
   28764:	602b      	str	r3, [r5, #0]
   28766:	4620      	mov	r0, r4
   28768:	b003      	add	sp, #12
   2876a:	bd30      	pop	{r4, r5, pc}
   2876c:	2405      	movs	r4, #5
   2876e:	4620      	mov	r0, r4
   28770:	b003      	add	sp, #12
   28772:	bd30      	pop	{r4, r5, pc}
   28774:	2001      	movs	r0, #1
   28776:	f000 f8ed 	bl	28954 <CC_PalPowerSaveModeSelect>
   2877a:	2800      	cmp	r0, #0
   2877c:	d1da      	bne.n	28734 <CC_LibInit+0x5c>
   2877e:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   28782:	e7db      	b.n	2873c <CC_LibInit+0x64>
   28784:	5002b000 	.word	0x5002b000
   28788:	20e00000 	.word	0x20e00000
   2878c:	20005988 	.word	0x20005988
   28790:	2000598c 	.word	0x2000598c
   28794:	5a5aea5a 	.word	0x5a5aea5a

00028798 <CC_HalInit>:
   28798:	2000      	movs	r0, #0
   2879a:	4770      	bx	lr

0002879c <CC_HalTerminate>:
   2879c:	2000      	movs	r0, #0
   2879e:	4770      	bx	lr

000287a0 <CC_HalClearInterruptBit>:
   287a0:	0543      	lsls	r3, r0, #21
   287a2:	d504      	bpl.n	287ae <CC_HalClearInterruptBit+0xe>
   287a4:	4b04      	ldr	r3, [pc, #16]	; (287b8 <CC_HalClearInterruptBit+0x18>)
   287a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   287aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   287ae:	4b02      	ldr	r3, [pc, #8]	; (287b8 <CC_HalClearInterruptBit+0x18>)
   287b0:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   287b4:	4770      	bx	lr
   287b6:	bf00      	nop
   287b8:	5002b000 	.word	0x5002b000

000287bc <CC_HalMaskInterrupt>:
   287bc:	4b01      	ldr	r3, [pc, #4]	; (287c4 <CC_HalMaskInterrupt+0x8>)
   287be:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   287c2:	4770      	bx	lr
   287c4:	5002b000 	.word	0x5002b000

000287c8 <CC_HalWaitInterrupt>:
   287c8:	b108      	cbz	r0, 287ce <CC_HalWaitInterrupt+0x6>
   287ca:	f000 b86b 	b.w	288a4 <CC_PalWaitInterrupt>
   287ce:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   287d2:	4770      	bx	lr

000287d4 <CC_HalWaitInterruptRND>:
   287d4:	b108      	cbz	r0, 287da <CC_HalWaitInterruptRND+0x6>
   287d6:	f000 b84f 	b.w	28878 <CC_PalWaitInterruptRND>
   287da:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   287de:	4770      	bx	lr

000287e0 <CC_PalInit>:
   287e0:	b510      	push	{r4, lr}
   287e2:	4811      	ldr	r0, [pc, #68]	; (28828 <CC_PalInit+0x48>)
   287e4:	f000 f872 	bl	288cc <CC_PalMutexCreate>
   287e8:	b100      	cbz	r0, 287ec <CC_PalInit+0xc>
   287ea:	bd10      	pop	{r4, pc}
   287ec:	480f      	ldr	r0, [pc, #60]	; (2882c <CC_PalInit+0x4c>)
   287ee:	f000 f86d 	bl	288cc <CC_PalMutexCreate>
   287f2:	2800      	cmp	r0, #0
   287f4:	d1f9      	bne.n	287ea <CC_PalInit+0xa>
   287f6:	4c0e      	ldr	r4, [pc, #56]	; (28830 <CC_PalInit+0x50>)
   287f8:	4620      	mov	r0, r4
   287fa:	f000 f867 	bl	288cc <CC_PalMutexCreate>
   287fe:	2800      	cmp	r0, #0
   28800:	d1f3      	bne.n	287ea <CC_PalInit+0xa>
   28802:	4b0c      	ldr	r3, [pc, #48]	; (28834 <CC_PalInit+0x54>)
   28804:	480c      	ldr	r0, [pc, #48]	; (28838 <CC_PalInit+0x58>)
   28806:	601c      	str	r4, [r3, #0]
   28808:	f000 f860 	bl	288cc <CC_PalMutexCreate>
   2880c:	4601      	mov	r1, r0
   2880e:	2800      	cmp	r0, #0
   28810:	d1eb      	bne.n	287ea <CC_PalInit+0xa>
   28812:	f000 f82d 	bl	28870 <CC_PalDmaInit>
   28816:	4604      	mov	r4, r0
   28818:	b108      	cbz	r0, 2881e <CC_PalInit+0x3e>
   2881a:	4620      	mov	r0, r4
   2881c:	bd10      	pop	{r4, pc}
   2881e:	f000 f87b 	bl	28918 <CC_PalPowerSaveModeInit>
   28822:	4620      	mov	r0, r4
   28824:	e7fa      	b.n	2881c <CC_PalInit+0x3c>
   28826:	bf00      	nop
   28828:	200008f4 	.word	0x200008f4
   2882c:	200008f0 	.word	0x200008f0
   28830:	200008ec 	.word	0x200008ec
   28834:	200008e4 	.word	0x200008e4
   28838:	200008e8 	.word	0x200008e8

0002883c <CC_PalTerminate>:
   2883c:	b508      	push	{r3, lr}
   2883e:	4808      	ldr	r0, [pc, #32]	; (28860 <CC_PalTerminate+0x24>)
   28840:	f000 f84e 	bl	288e0 <CC_PalMutexDestroy>
   28844:	4807      	ldr	r0, [pc, #28]	; (28864 <CC_PalTerminate+0x28>)
   28846:	f000 f84b 	bl	288e0 <CC_PalMutexDestroy>
   2884a:	4807      	ldr	r0, [pc, #28]	; (28868 <CC_PalTerminate+0x2c>)
   2884c:	f000 f848 	bl	288e0 <CC_PalMutexDestroy>
   28850:	4806      	ldr	r0, [pc, #24]	; (2886c <CC_PalTerminate+0x30>)
   28852:	f000 f845 	bl	288e0 <CC_PalMutexDestroy>
   28856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2885a:	f000 b80b 	b.w	28874 <CC_PalDmaTerminate>
   2885e:	bf00      	nop
   28860:	200008f4 	.word	0x200008f4
   28864:	200008f0 	.word	0x200008f0
   28868:	200008ec 	.word	0x200008ec
   2886c:	200008e8 	.word	0x200008e8

00028870 <CC_PalDmaInit>:
   28870:	2000      	movs	r0, #0
   28872:	4770      	bx	lr

00028874 <CC_PalDmaTerminate>:
   28874:	4770      	bx	lr
   28876:	bf00      	nop

00028878 <CC_PalWaitInterruptRND>:
   28878:	b410      	push	{r4}
   2887a:	4c09      	ldr	r4, [pc, #36]	; (288a0 <CC_PalWaitInterruptRND+0x28>)
   2887c:	4602      	mov	r2, r0
   2887e:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   28882:	4213      	tst	r3, r2
   28884:	d0fb      	beq.n	2887e <CC_PalWaitInterruptRND+0x6>
   28886:	b121      	cbz	r1, 28892 <CC_PalWaitInterruptRND+0x1a>
   28888:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2888c:	600b      	str	r3, [r1, #0]
   2888e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   28892:	4b03      	ldr	r3, [pc, #12]	; (288a0 <CC_PalWaitInterruptRND+0x28>)
   28894:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   28898:	2000      	movs	r0, #0
   2889a:	bc10      	pop	{r4}
   2889c:	4770      	bx	lr
   2889e:	bf00      	nop
   288a0:	5002b000 	.word	0x5002b000

000288a4 <CC_PalWaitInterrupt>:
   288a4:	4a04      	ldr	r2, [pc, #16]	; (288b8 <CC_PalWaitInterrupt+0x14>)
   288a6:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   288aa:	4218      	tst	r0, r3
   288ac:	d0fb      	beq.n	288a6 <CC_PalWaitInterrupt+0x2>
   288ae:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   288b2:	2000      	movs	r0, #0
   288b4:	4770      	bx	lr
   288b6:	bf00      	nop
   288b8:	5002b000 	.word	0x5002b000

000288bc <CC_PalMemCopyPlat>:
   288bc:	f003 bf83 	b.w	2c7c6 <memmove>

000288c0 <CC_PalMemSetPlat>:
   288c0:	f003 bfc3 	b.w	2c84a <memset>

000288c4 <CC_PalMemSetZeroPlat>:
   288c4:	460a      	mov	r2, r1
   288c6:	2100      	movs	r1, #0
   288c8:	f003 bfbf 	b.w	2c84a <memset>

000288cc <CC_PalMutexCreate>:
   288cc:	b508      	push	{r3, lr}
   288ce:	4b03      	ldr	r3, [pc, #12]	; (288dc <CC_PalMutexCreate+0x10>)
   288d0:	6802      	ldr	r2, [r0, #0]
   288d2:	681b      	ldr	r3, [r3, #0]
   288d4:	6810      	ldr	r0, [r2, #0]
   288d6:	4798      	blx	r3
   288d8:	2000      	movs	r0, #0
   288da:	bd08      	pop	{r3, pc}
   288dc:	200008b0 	.word	0x200008b0

000288e0 <CC_PalMutexDestroy>:
   288e0:	b508      	push	{r3, lr}
   288e2:	4b03      	ldr	r3, [pc, #12]	; (288f0 <CC_PalMutexDestroy+0x10>)
   288e4:	6802      	ldr	r2, [r0, #0]
   288e6:	685b      	ldr	r3, [r3, #4]
   288e8:	6810      	ldr	r0, [r2, #0]
   288ea:	4798      	blx	r3
   288ec:	2000      	movs	r0, #0
   288ee:	bd08      	pop	{r3, pc}
   288f0:	200008b0 	.word	0x200008b0

000288f4 <CC_PalMutexLock>:
   288f4:	4b02      	ldr	r3, [pc, #8]	; (28900 <CC_PalMutexLock+0xc>)
   288f6:	6802      	ldr	r2, [r0, #0]
   288f8:	689b      	ldr	r3, [r3, #8]
   288fa:	6810      	ldr	r0, [r2, #0]
   288fc:	4718      	bx	r3
   288fe:	bf00      	nop
   28900:	200008b0 	.word	0x200008b0

00028904 <CC_PalMutexUnlock>:
   28904:	b508      	push	{r3, lr}
   28906:	4b03      	ldr	r3, [pc, #12]	; (28914 <CC_PalMutexUnlock+0x10>)
   28908:	6802      	ldr	r2, [r0, #0]
   2890a:	68db      	ldr	r3, [r3, #12]
   2890c:	6810      	ldr	r0, [r2, #0]
   2890e:	4798      	blx	r3
   28910:	2000      	movs	r0, #0
   28912:	bd08      	pop	{r3, pc}
   28914:	200008b0 	.word	0x200008b0

00028918 <CC_PalPowerSaveModeInit>:
   28918:	b570      	push	{r4, r5, r6, lr}
   2891a:	4c09      	ldr	r4, [pc, #36]	; (28940 <CC_PalPowerSaveModeInit+0x28>)
   2891c:	4d09      	ldr	r5, [pc, #36]	; (28944 <CC_PalPowerSaveModeInit+0x2c>)
   2891e:	6920      	ldr	r0, [r4, #16]
   28920:	68ab      	ldr	r3, [r5, #8]
   28922:	4798      	blx	r3
   28924:	b118      	cbz	r0, 2892e <CC_PalPowerSaveModeInit+0x16>
   28926:	4b08      	ldr	r3, [pc, #32]	; (28948 <CC_PalPowerSaveModeInit+0x30>)
   28928:	4808      	ldr	r0, [pc, #32]	; (2894c <CC_PalPowerSaveModeInit+0x34>)
   2892a:	685b      	ldr	r3, [r3, #4]
   2892c:	4798      	blx	r3
   2892e:	4a08      	ldr	r2, [pc, #32]	; (28950 <CC_PalPowerSaveModeInit+0x38>)
   28930:	68eb      	ldr	r3, [r5, #12]
   28932:	6920      	ldr	r0, [r4, #16]
   28934:	2100      	movs	r1, #0
   28936:	6011      	str	r1, [r2, #0]
   28938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2893c:	4718      	bx	r3
   2893e:	bf00      	nop
   28940:	2000089c 	.word	0x2000089c
   28944:	200008b0 	.word	0x200008b0
   28948:	20000894 	.word	0x20000894
   2894c:	00035418 	.word	0x00035418
   28950:	200059f4 	.word	0x200059f4

00028954 <CC_PalPowerSaveModeSelect>:
   28954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28956:	4d1a      	ldr	r5, [pc, #104]	; (289c0 <CC_PalPowerSaveModeSelect+0x6c>)
   28958:	4e1a      	ldr	r6, [pc, #104]	; (289c4 <CC_PalPowerSaveModeSelect+0x70>)
   2895a:	4604      	mov	r4, r0
   2895c:	68b2      	ldr	r2, [r6, #8]
   2895e:	6928      	ldr	r0, [r5, #16]
   28960:	4790      	blx	r2
   28962:	b9e8      	cbnz	r0, 289a0 <CC_PalPowerSaveModeSelect+0x4c>
   28964:	4f18      	ldr	r7, [pc, #96]	; (289c8 <CC_PalPowerSaveModeSelect+0x74>)
   28966:	683b      	ldr	r3, [r7, #0]
   28968:	b14c      	cbz	r4, 2897e <CC_PalPowerSaveModeSelect+0x2a>
   2896a:	b1a3      	cbz	r3, 28996 <CC_PalPowerSaveModeSelect+0x42>
   2896c:	2b01      	cmp	r3, #1
   2896e:	d019      	beq.n	289a4 <CC_PalPowerSaveModeSelect+0x50>
   28970:	3b01      	subs	r3, #1
   28972:	603b      	str	r3, [r7, #0]
   28974:	6928      	ldr	r0, [r5, #16]
   28976:	68f3      	ldr	r3, [r6, #12]
   28978:	4798      	blx	r3
   2897a:	2000      	movs	r0, #0
   2897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2897e:	b943      	cbnz	r3, 28992 <CC_PalPowerSaveModeSelect+0x3e>
   28980:	4a12      	ldr	r2, [pc, #72]	; (289cc <CC_PalPowerSaveModeSelect+0x78>)
   28982:	2101      	movs	r1, #1
   28984:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   28988:	4911      	ldr	r1, [pc, #68]	; (289d0 <CC_PalPowerSaveModeSelect+0x7c>)
   2898a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   2898e:	2a00      	cmp	r2, #0
   28990:	d1fb      	bne.n	2898a <CC_PalPowerSaveModeSelect+0x36>
   28992:	3301      	adds	r3, #1
   28994:	603b      	str	r3, [r7, #0]
   28996:	68f3      	ldr	r3, [r6, #12]
   28998:	6928      	ldr	r0, [r5, #16]
   2899a:	4798      	blx	r3
   2899c:	2000      	movs	r0, #0
   2899e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   289a0:	480c      	ldr	r0, [pc, #48]	; (289d4 <CC_PalPowerSaveModeSelect+0x80>)
   289a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   289a4:	4a0a      	ldr	r2, [pc, #40]	; (289d0 <CC_PalPowerSaveModeSelect+0x7c>)
   289a6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   289aa:	2b00      	cmp	r3, #0
   289ac:	d1fb      	bne.n	289a6 <CC_PalPowerSaveModeSelect+0x52>
   289ae:	4a07      	ldr	r2, [pc, #28]	; (289cc <CC_PalPowerSaveModeSelect+0x78>)
   289b0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   289b4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   289b8:	f7ff ff00 	bl	287bc <CC_HalMaskInterrupt>
   289bc:	683b      	ldr	r3, [r7, #0]
   289be:	e7d7      	b.n	28970 <CC_PalPowerSaveModeSelect+0x1c>
   289c0:	2000089c 	.word	0x2000089c
   289c4:	200008b0 	.word	0x200008b0
   289c8:	200059f4 	.word	0x200059f4
   289cc:	5002a000 	.word	0x5002a000
   289d0:	5002b000 	.word	0x5002b000
   289d4:	ffff8fe9 	.word	0xffff8fe9

000289d8 <mutex_init>:
   289d8:	4b01      	ldr	r3, [pc, #4]	; (289e0 <mutex_init+0x8>)
   289da:	681b      	ldr	r3, [r3, #0]
   289dc:	4718      	bx	r3
   289de:	bf00      	nop
   289e0:	200008b0 	.word	0x200008b0

000289e4 <mutex_lock>:
   289e4:	4b01      	ldr	r3, [pc, #4]	; (289ec <mutex_lock+0x8>)
   289e6:	689b      	ldr	r3, [r3, #8]
   289e8:	4718      	bx	r3
   289ea:	bf00      	nop
   289ec:	200008b0 	.word	0x200008b0

000289f0 <mutex_unlock>:
   289f0:	4b01      	ldr	r3, [pc, #4]	; (289f8 <mutex_unlock+0x8>)
   289f2:	68db      	ldr	r3, [r3, #12]
   289f4:	4718      	bx	r3
   289f6:	bf00      	nop
   289f8:	200008b0 	.word	0x200008b0

000289fc <startTrngHW>:
   289fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28a00:	2800      	cmp	r0, #0
   28a02:	d078      	beq.n	28af6 <startTrngHW+0xfa>
   28a04:	460c      	mov	r4, r1
   28a06:	2900      	cmp	r1, #0
   28a08:	d075      	beq.n	28af6 <startTrngHW+0xfa>
   28a0a:	461d      	mov	r5, r3
   28a0c:	2b00      	cmp	r3, #0
   28a0e:	d072      	beq.n	28af6 <startTrngHW+0xfa>
   28a10:	4607      	mov	r7, r0
   28a12:	b11a      	cbz	r2, 28a1c <startTrngHW+0x20>
   28a14:	2201      	movs	r2, #1
   28a16:	2300      	movs	r3, #0
   28a18:	602a      	str	r2, [r5, #0]
   28a1a:	6003      	str	r3, [r0, #0]
   28a1c:	682b      	ldr	r3, [r5, #0]
   28a1e:	2b00      	cmp	r3, #0
   28a20:	d064      	beq.n	28aec <startTrngHW+0xf0>
   28a22:	4629      	mov	r1, r5
   28a24:	4620      	mov	r0, r4
   28a26:	f000 fddb 	bl	295e0 <LLF_RND_GetFastestRosc>
   28a2a:	4680      	mov	r8, r0
   28a2c:	2800      	cmp	r0, #0
   28a2e:	d15f      	bne.n	28af0 <startTrngHW+0xf4>
   28a30:	6828      	ldr	r0, [r5, #0]
   28a32:	4621      	mov	r1, r4
   28a34:	f000 fdba 	bl	295ac <LLF_RND_GetRoscSampleCnt>
   28a38:	4680      	mov	r8, r0
   28a3a:	2800      	cmp	r0, #0
   28a3c:	d158      	bne.n	28af0 <startTrngHW+0xf4>
   28a3e:	682b      	ldr	r3, [r5, #0]
   28a40:	2b08      	cmp	r3, #8
   28a42:	d06c      	beq.n	28b1e <startTrngHW+0x122>
   28a44:	2b04      	cmp	r3, #4
   28a46:	d06d      	beq.n	28b24 <startTrngHW+0x128>
   28a48:	f1a3 0902 	sub.w	r9, r3, #2
   28a4c:	fab9 f989 	clz	r9, r9
   28a50:	ea4f 1959 	mov.w	r9, r9, lsr #5
   28a54:	4e35      	ldr	r6, [pc, #212]	; (28b2c <startTrngHW+0x130>)
   28a56:	2101      	movs	r1, #1
   28a58:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   28a5c:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   28a60:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   28a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28a66:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   28a6a:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   28a6e:	4293      	cmp	r3, r2
   28a70:	d1f6      	bne.n	28a60 <startTrngHW+0x64>
   28a72:	f04f 0a00 	mov.w	sl, #0
   28a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28a7a:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   28a7e:	f7ff fe8f 	bl	287a0 <CC_HalClearInterruptBit>
   28a82:	f06f 031b 	mvn.w	r3, #27
   28a86:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   28a8a:	4650      	mov	r0, sl
   28a8c:	f7ff fe96 	bl	287bc <CC_HalMaskInterrupt>
   28a90:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   28a94:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   28a98:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   28a9c:	f7ff fe8e 	bl	287bc <CC_HalMaskInterrupt>
   28aa0:	230a      	movs	r3, #10
   28aa2:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   28aa6:	9b08      	ldr	r3, [sp, #32]
   28aa8:	2b01      	cmp	r3, #1
   28aaa:	d029      	beq.n	28b00 <startTrngHW+0x104>
   28aac:	6923      	ldr	r3, [r4, #16]
   28aae:	4a20      	ldr	r2, [pc, #128]	; (28b30 <startTrngHW+0x134>)
   28ab0:	fba2 2303 	umull	r2, r3, r2, r3
   28ab4:	091b      	lsrs	r3, r3, #4
   28ab6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   28ab8:	fb02 f303 	mul.w	r3, r2, r3
   28abc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28ac0:	4a1a      	ldr	r2, [pc, #104]	; (28b2c <startTrngHW+0x130>)
   28ac2:	03db      	lsls	r3, r3, #15
   28ac4:	099b      	lsrs	r3, r3, #6
   28ac6:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   28aca:	2301      	movs	r3, #1
   28acc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   28ad0:	683b      	ldr	r3, [r7, #0]
   28ad2:	682a      	ldr	r2, [r5, #0]
   28ad4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   28ad8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   28adc:	603b      	str	r3, [r7, #0]
   28ade:	682a      	ldr	r2, [r5, #0]
   28ae0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28ae4:	603b      	str	r3, [r7, #0]
   28ae6:	4640      	mov	r0, r8
   28ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28aec:	f8df 8044 	ldr.w	r8, [pc, #68]	; 28b34 <startTrngHW+0x138>
   28af0:	4640      	mov	r0, r8
   28af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28af6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 28b38 <startTrngHW+0x13c>
   28afa:	4640      	mov	r0, r8
   28afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28b00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28b04:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   28b08:	3201      	adds	r2, #1
   28b0a:	d006      	beq.n	28b1a <startTrngHW+0x11e>
   28b0c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   28b10:	4a07      	ldr	r2, [pc, #28]	; (28b30 <startTrngHW+0x134>)
   28b12:	fba2 2303 	umull	r2, r3, r2, r3
   28b16:	091b      	lsrs	r3, r3, #4
   28b18:	e7cd      	b.n	28ab6 <startTrngHW+0xba>
   28b1a:	2316      	movs	r3, #22
   28b1c:	e7cb      	b.n	28ab6 <startTrngHW+0xba>
   28b1e:	f04f 0903 	mov.w	r9, #3
   28b22:	e797      	b.n	28a54 <startTrngHW+0x58>
   28b24:	f04f 0902 	mov.w	r9, #2
   28b28:	e794      	b.n	28a54 <startTrngHW+0x58>
   28b2a:	bf00      	nop
   28b2c:	5002b000 	.word	0x5002b000
   28b30:	aaaaaaab 	.word	0xaaaaaaab
   28b34:	00f10c31 	.word	0x00f10c31
   28b38:	00f10c35 	.word	0x00f10c35

00028b3c <LLF_RND_RepetitionCounterTest>:
   28b3c:	b350      	cbz	r0, 28b94 <LLF_RND_RepetitionCounterTest+0x58>
   28b3e:	1e4b      	subs	r3, r1, #1
   28b40:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   28b44:	d226      	bcs.n	28b94 <LLF_RND_RepetitionCounterTest+0x58>
   28b46:	f04f 0c00 	mov.w	ip, #0
   28b4a:	b530      	push	{r4, r5, lr}
   28b4c:	00cd      	lsls	r5, r1, #3
   28b4e:	46e6      	mov	lr, ip
   28b50:	4664      	mov	r4, ip
   28b52:	0963      	lsrs	r3, r4, #5
   28b54:	f004 011f 	and.w	r1, r4, #31
   28b58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   28b5c:	291f      	cmp	r1, #31
   28b5e:	fa23 f301 	lsr.w	r3, r3, r1
   28b62:	d006      	beq.n	28b72 <LLF_RND_RepetitionCounterTest+0x36>
   28b64:	f003 0301 	and.w	r3, r3, #1
   28b68:	b91c      	cbnz	r4, 28b72 <LLF_RND_RepetitionCounterTest+0x36>
   28b6a:	2401      	movs	r4, #1
   28b6c:	469e      	mov	lr, r3
   28b6e:	46a4      	mov	ip, r4
   28b70:	e7ef      	b.n	28b52 <LLF_RND_RepetitionCounterTest+0x16>
   28b72:	459e      	cmp	lr, r3
   28b74:	f104 0401 	add.w	r4, r4, #1
   28b78:	d006      	beq.n	28b88 <LLF_RND_RepetitionCounterTest+0x4c>
   28b7a:	469e      	mov	lr, r3
   28b7c:	f04f 0c01 	mov.w	ip, #1
   28b80:	42ac      	cmp	r4, r5
   28b82:	d1e6      	bne.n	28b52 <LLF_RND_RepetitionCounterTest+0x16>
   28b84:	2000      	movs	r0, #0
   28b86:	bd30      	pop	{r4, r5, pc}
   28b88:	f10c 0c01 	add.w	ip, ip, #1
   28b8c:	4594      	cmp	ip, r2
   28b8e:	d1f7      	bne.n	28b80 <LLF_RND_RepetitionCounterTest+0x44>
   28b90:	4801      	ldr	r0, [pc, #4]	; (28b98 <LLF_RND_RepetitionCounterTest+0x5c>)
   28b92:	bd30      	pop	{r4, r5, pc}
   28b94:	4800      	ldr	r0, [pc, #0]	; (28b98 <LLF_RND_RepetitionCounterTest+0x5c>)
   28b96:	4770      	bx	lr
   28b98:	00f10c36 	.word	0x00f10c36

00028b9c <LLF_RND_AdaptiveProportionTest>:
   28b9c:	b3c8      	cbz	r0, 28c12 <LLF_RND_AdaptiveProportionTest+0x76>
   28b9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28ba2:	1e4c      	subs	r4, r1, #1
   28ba4:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   28ba8:	d21c      	bcs.n	28be4 <LLF_RND_AdaptiveProportionTest+0x48>
   28baa:	b1db      	cbz	r3, 28be4 <LLF_RND_AdaptiveProportionTest+0x48>
   28bac:	b1d2      	cbz	r2, 28be4 <LLF_RND_AdaptiveProportionTest+0x48>
   28bae:	f04f 0e00 	mov.w	lr, #0
   28bb2:	00cf      	lsls	r7, r1, #3
   28bb4:	4676      	mov	r6, lr
   28bb6:	46f0      	mov	r8, lr
   28bb8:	4675      	mov	r5, lr
   28bba:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   28bbe:	096c      	lsrs	r4, r5, #5
   28bc0:	f005 011f 	and.w	r1, r5, #31
   28bc4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   28bc8:	291f      	cmp	r1, #31
   28bca:	fa24 fc01 	lsr.w	ip, r4, r1
   28bce:	d00c      	beq.n	28bea <LLF_RND_AdaptiveProportionTest+0x4e>
   28bd0:	f00c 0c01 	and.w	ip, ip, #1
   28bd4:	b94d      	cbnz	r5, 28bea <LLF_RND_AdaptiveProportionTest+0x4e>
   28bd6:	2601      	movs	r6, #1
   28bd8:	46e0      	mov	r8, ip
   28bda:	4635      	mov	r5, r6
   28bdc:	46b6      	mov	lr, r6
   28bde:	e7ee      	b.n	28bbe <LLF_RND_AdaptiveProportionTest+0x22>
   28be0:	4296      	cmp	r6, r2
   28be2:	d918      	bls.n	28c16 <LLF_RND_AdaptiveProportionTest+0x7a>
   28be4:	480d      	ldr	r0, [pc, #52]	; (28c1c <LLF_RND_AdaptiveProportionTest+0x80>)
   28be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28bea:	4573      	cmp	r3, lr
   28bec:	d00c      	beq.n	28c08 <LLF_RND_AdaptiveProportionTest+0x6c>
   28bee:	45c4      	cmp	ip, r8
   28bf0:	bf08      	it	eq
   28bf2:	3601      	addeq	r6, #1
   28bf4:	45f1      	cmp	r9, lr
   28bf6:	d0f3      	beq.n	28be0 <LLF_RND_AdaptiveProportionTest+0x44>
   28bf8:	f10e 0e01 	add.w	lr, lr, #1
   28bfc:	3501      	adds	r5, #1
   28bfe:	42bd      	cmp	r5, r7
   28c00:	d1dd      	bne.n	28bbe <LLF_RND_AdaptiveProportionTest+0x22>
   28c02:	2000      	movs	r0, #0
   28c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28c08:	f04f 0e01 	mov.w	lr, #1
   28c0c:	46e0      	mov	r8, ip
   28c0e:	4676      	mov	r6, lr
   28c10:	e7f4      	b.n	28bfc <LLF_RND_AdaptiveProportionTest+0x60>
   28c12:	4802      	ldr	r0, [pc, #8]	; (28c1c <LLF_RND_AdaptiveProportionTest+0x80>)
   28c14:	4770      	bx	lr
   28c16:	469e      	mov	lr, r3
   28c18:	e7f0      	b.n	28bfc <LLF_RND_AdaptiveProportionTest+0x60>
   28c1a:	bf00      	nop
   28c1c:	00f10c37 	.word	0x00f10c37

00028c20 <getTrngSource>:
   28c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c24:	b091      	sub	sp, #68	; 0x44
   28c26:	460d      	mov	r5, r1
   28c28:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   28c2c:	4682      	mov	sl, r0
   28c2e:	2900      	cmp	r1, #0
   28c30:	d16e      	bne.n	28d10 <getTrngSource+0xf0>
   28c32:	6928      	ldr	r0, [r5, #16]
   28c34:	9006      	str	r0, [sp, #24]
   28c36:	981a      	ldr	r0, [sp, #104]	; 0x68
   28c38:	601c      	str	r4, [r3, #0]
   28c3a:	2300      	movs	r3, #0
   28c3c:	6003      	str	r3, [r0, #0]
   28c3e:	2a00      	cmp	r2, #0
   28c40:	f000 812e 	beq.w	28ea0 <getTrngSource+0x280>
   28c44:	4b9c      	ldr	r3, [pc, #624]	; (28eb8 <getTrngSource+0x298>)
   28c46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   28c48:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   28c4c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   28c50:	429a      	cmp	r2, r3
   28c52:	d169      	bne.n	28d28 <getTrngSource+0x108>
   28c54:	290a      	cmp	r1, #10
   28c56:	d167      	bne.n	28d28 <getTrngSource+0x108>
   28c58:	f89a 3003 	ldrb.w	r3, [sl, #3]
   28c5c:	9308      	str	r3, [sp, #32]
   28c5e:	f104 0308 	add.w	r3, r4, #8
   28c62:	9906      	ldr	r1, [sp, #24]
   28c64:	9307      	str	r3, [sp, #28]
   28c66:	4b95      	ldr	r3, [pc, #596]	; (28ebc <getTrngSource+0x29c>)
   28c68:	4c93      	ldr	r4, [pc, #588]	; (28eb8 <getTrngSource+0x298>)
   28c6a:	fba3 2301 	umull	r2, r3, r3, r1
   28c6e:	089b      	lsrs	r3, r3, #2
   28c70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28c74:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   28c78:	9303      	str	r3, [sp, #12]
   28c7a:	2304      	movs	r3, #4
   28c7c:	9305      	str	r3, [sp, #20]
   28c7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   28c80:	9e06      	ldr	r6, [sp, #24]
   28c82:	601e      	str	r6, [r3, #0]
   28c84:	2e00      	cmp	r6, #0
   28c86:	f000 80e9 	beq.w	28e5c <getTrngSource+0x23c>
   28c8a:	2700      	movs	r7, #0
   28c8c:	f000 fcb8 	bl	29600 <LLF_RND_TurnOffTrng>
   28c90:	9709      	str	r7, [sp, #36]	; 0x24
   28c92:	f1ba 0f00 	cmp.w	sl, #0
   28c96:	f000 80d5 	beq.w	28e44 <getTrngSource+0x224>
   28c9a:	f8dd 801c 	ldr.w	r8, [sp, #28]
   28c9e:	f04f 0901 	mov.w	r9, #1
   28ca2:	2d00      	cmp	r5, #0
   28ca4:	f000 80ce 	beq.w	28e44 <getTrngSource+0x224>
   28ca8:	9b08      	ldr	r3, [sp, #32]
   28caa:	2b00      	cmp	r3, #0
   28cac:	d03e      	beq.n	28d2c <getTrngSource+0x10c>
   28cae:	a908      	add	r1, sp, #32
   28cb0:	4628      	mov	r0, r5
   28cb2:	f000 fc95 	bl	295e0 <LLF_RND_GetFastestRosc>
   28cb6:	2800      	cmp	r0, #0
   28cb8:	d03a      	beq.n	28d30 <getTrngSource+0x110>
   28cba:	4b81      	ldr	r3, [pc, #516]	; (28ec0 <getTrngSource+0x2a0>)
   28cbc:	4298      	cmp	r0, r3
   28cbe:	d020      	beq.n	28d02 <getTrngSource+0xe2>
   28cc0:	9b08      	ldr	r3, [sp, #32]
   28cc2:	2b08      	cmp	r3, #8
   28cc4:	f000 80e4 	beq.w	28e90 <getTrngSource+0x270>
   28cc8:	005b      	lsls	r3, r3, #1
   28cca:	2200      	movs	r2, #0
   28ccc:	9308      	str	r3, [sp, #32]
   28cce:	9200      	str	r2, [sp, #0]
   28cd0:	ab08      	add	r3, sp, #32
   28cd2:	4629      	mov	r1, r5
   28cd4:	4650      	mov	r0, sl
   28cd6:	f7ff fe91 	bl	289fc <startTrngHW>
   28cda:	4b7a      	ldr	r3, [pc, #488]	; (28ec4 <getTrngSource+0x2a4>)
   28cdc:	4298      	cmp	r0, r3
   28cde:	f000 80d3 	beq.w	28e88 <getTrngSource+0x268>
   28ce2:	b970      	cbnz	r0, 28d02 <getTrngSource+0xe2>
   28ce4:	f8da 2000 	ldr.w	r2, [sl]
   28ce8:	0a13      	lsrs	r3, r2, #8
   28cea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   28cee:	4313      	orrs	r3, r2
   28cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   28cf4:	f8ca 3000 	str.w	r3, [sl]
   28cf8:	9b05      	ldr	r3, [sp, #20]
   28cfa:	3b01      	subs	r3, #1
   28cfc:	9305      	str	r3, [sp, #20]
   28cfe:	d1be      	bne.n	28c7e <getTrngSource+0x5e>
   28d00:	2000      	movs	r0, #0
   28d02:	9003      	str	r0, [sp, #12]
   28d04:	f000 fc7c 	bl	29600 <LLF_RND_TurnOffTrng>
   28d08:	9803      	ldr	r0, [sp, #12]
   28d0a:	b011      	add	sp, #68	; 0x44
   28d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d10:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   28d14:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   28d18:	3601      	adds	r6, #1
   28d1a:	bf14      	ite	ne
   28d1c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   28d20:	f44f 7004 	moveq.w	r0, #528	; 0x210
   28d24:	9006      	str	r0, [sp, #24]
   28d26:	e786      	b.n	28c36 <getTrngSource+0x16>
   28d28:	4867      	ldr	r0, [pc, #412]	; (28ec8 <getTrngSource+0x2a8>)
   28d2a:	e7ea      	b.n	28d02 <getTrngSource+0xe2>
   28d2c:	4865      	ldr	r0, [pc, #404]	; (28ec4 <getTrngSource+0x2a4>)
   28d2e:	e7c4      	b.n	28cba <getTrngSource+0x9a>
   28d30:	9808      	ldr	r0, [sp, #32]
   28d32:	4629      	mov	r1, r5
   28d34:	f000 fc3a 	bl	295ac <LLF_RND_GetRoscSampleCnt>
   28d38:	2800      	cmp	r0, #0
   28d3a:	d1be      	bne.n	28cba <getTrngSource+0x9a>
   28d3c:	9b08      	ldr	r3, [sp, #32]
   28d3e:	2b08      	cmp	r3, #8
   28d40:	f000 80a8 	beq.w	28e94 <getTrngSource+0x274>
   28d44:	2b04      	cmp	r3, #4
   28d46:	f000 80a8 	beq.w	28e9a <getTrngSource+0x27a>
   28d4a:	f1a3 0302 	sub.w	r3, r3, #2
   28d4e:	fab3 f383 	clz	r3, r3
   28d52:	095b      	lsrs	r3, r3, #5
   28d54:	9304      	str	r3, [sp, #16]
   28d56:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   28d5a:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   28d5e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   28d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   28d64:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   28d68:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   28d6c:	4293      	cmp	r3, r2
   28d6e:	d1f6      	bne.n	28d5e <getTrngSource+0x13e>
   28d70:	f04f 0b00 	mov.w	fp, #0
   28d74:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   28d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28d7c:	f7ff fd10 	bl	287a0 <CC_HalClearInterruptBit>
   28d80:	f06f 031b 	mvn.w	r3, #27
   28d84:	4658      	mov	r0, fp
   28d86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   28d8a:	f7ff fd17 	bl	287bc <CC_HalMaskInterrupt>
   28d8e:	9b04      	ldr	r3, [sp, #16]
   28d90:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   28d94:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   28d98:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   28d9c:	f7ff fd0e 	bl	287bc <CC_HalMaskInterrupt>
   28da0:	230a      	movs	r3, #10
   28da2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   28da6:	692b      	ldr	r3, [r5, #16]
   28da8:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   28dac:	fbab 2303 	umull	r2, r3, fp, r3
   28db0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   28db2:	091b      	lsrs	r3, r3, #4
   28db4:	fb02 f303 	mul.w	r3, r2, r3
   28db8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28dbc:	03db      	lsls	r3, r3, #15
   28dbe:	099b      	lsrs	r3, r3, #6
   28dc0:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   28dc4:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   28dc8:	f8da 3000 	ldr.w	r3, [sl]
   28dcc:	9908      	ldr	r1, [sp, #32]
   28dce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   28dd2:	020b      	lsls	r3, r1, #8
   28dd4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   28dd8:	4313      	orrs	r3, r2
   28dda:	f8ca 3000 	str.w	r3, [sl]
   28dde:	a809      	add	r0, sp, #36	; 0x24
   28de0:	f000 fbd4 	bl	2958c <LLF_RND_WaitRngInterrupt>
   28de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28de6:	f003 031a 	and.w	r3, r3, #26
   28dea:	4303      	orrs	r3, r0
   28dec:	f47f af68 	bne.w	28cc0 <getTrngSource+0xa0>
   28df0:	fbab 3b06 	umull	r3, fp, fp, r6
   28df4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   28df8:	930a      	str	r3, [sp, #40]	; 0x28
   28dfa:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   28dfe:	930b      	str	r3, [sp, #44]	; 0x2c
   28e00:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   28e04:	930c      	str	r3, [sp, #48]	; 0x30
   28e06:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   28e0a:	930d      	str	r3, [sp, #52]	; 0x34
   28e0c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   28e10:	930e      	str	r3, [sp, #56]	; 0x38
   28e12:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   28e16:	930f      	str	r3, [sp, #60]	; 0x3c
   28e18:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   28e1c:	d101      	bne.n	28e22 <getTrngSource+0x202>
   28e1e:	9b03      	ldr	r3, [sp, #12]
   28e20:	b993      	cbnz	r3, 28e48 <getTrngSource+0x228>
   28e22:	4640      	mov	r0, r8
   28e24:	2218      	movs	r2, #24
   28e26:	a90a      	add	r1, sp, #40	; 0x28
   28e28:	3e18      	subs	r6, #24
   28e2a:	f7ff fd47 	bl	288bc <CC_PalMemCopyPlat>
   28e2e:	f108 0818 	add.w	r8, r8, #24
   28e32:	3701      	adds	r7, #1
   28e34:	b196      	cbz	r6, 28e5c <getTrngSource+0x23c>
   28e36:	f000 fbe3 	bl	29600 <LLF_RND_TurnOffTrng>
   28e3a:	2300      	movs	r3, #0
   28e3c:	9309      	str	r3, [sp, #36]	; 0x24
   28e3e:	2d00      	cmp	r5, #0
   28e40:	f47f af32 	bne.w	28ca8 <getTrngSource+0x88>
   28e44:	4821      	ldr	r0, [pc, #132]	; (28ecc <getTrngSource+0x2ac>)
   28e46:	e738      	b.n	28cba <getTrngSource+0x9a>
   28e48:	4640      	mov	r0, r8
   28e4a:	1af6      	subs	r6, r6, r3
   28e4c:	461a      	mov	r2, r3
   28e4e:	a90a      	add	r1, sp, #40	; 0x28
   28e50:	4498      	add	r8, r3
   28e52:	3701      	adds	r7, #1
   28e54:	f7ff fd32 	bl	288bc <CC_PalMemCopyPlat>
   28e58:	2e00      	cmp	r6, #0
   28e5a:	d1ec      	bne.n	28e36 <getTrngSource+0x216>
   28e5c:	9f06      	ldr	r7, [sp, #24]
   28e5e:	9e07      	ldr	r6, [sp, #28]
   28e60:	696a      	ldr	r2, [r5, #20]
   28e62:	4639      	mov	r1, r7
   28e64:	4630      	mov	r0, r6
   28e66:	f7ff fe69 	bl	28b3c <LLF_RND_RepetitionCounterTest>
   28e6a:	69aa      	ldr	r2, [r5, #24]
   28e6c:	b940      	cbnz	r0, 28e80 <getTrngSource+0x260>
   28e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28e72:	4639      	mov	r1, r7
   28e74:	4630      	mov	r0, r6
   28e76:	f7ff fe91 	bl	28b9c <LLF_RND_AdaptiveProportionTest>
   28e7a:	2800      	cmp	r0, #0
   28e7c:	f43f af40 	beq.w	28d00 <getTrngSource+0xe0>
   28e80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   28e82:	2300      	movs	r3, #0
   28e84:	6013      	str	r3, [r2, #0]
   28e86:	e718      	b.n	28cba <getTrngSource+0x9a>
   28e88:	6a2b      	ldr	r3, [r5, #32]
   28e8a:	2b00      	cmp	r3, #0
   28e8c:	f43f af39 	beq.w	28d02 <getTrngSource+0xe2>
   28e90:	480f      	ldr	r0, [pc, #60]	; (28ed0 <getTrngSource+0x2b0>)
   28e92:	e736      	b.n	28d02 <getTrngSource+0xe2>
   28e94:	2303      	movs	r3, #3
   28e96:	9304      	str	r3, [sp, #16]
   28e98:	e75d      	b.n	28d56 <getTrngSource+0x136>
   28e9a:	2302      	movs	r3, #2
   28e9c:	9304      	str	r3, [sp, #16]
   28e9e:	e75a      	b.n	28d56 <getTrngSource+0x136>
   28ea0:	9100      	str	r1, [sp, #0]
   28ea2:	ab08      	add	r3, sp, #32
   28ea4:	2201      	movs	r2, #1
   28ea6:	4629      	mov	r1, r5
   28ea8:	4650      	mov	r0, sl
   28eaa:	f7ff fda7 	bl	289fc <startTrngHW>
   28eae:	2800      	cmp	r0, #0
   28eb0:	f43f aed5 	beq.w	28c5e <getTrngSource+0x3e>
   28eb4:	e725      	b.n	28d02 <getTrngSource+0xe2>
   28eb6:	bf00      	nop
   28eb8:	5002b000 	.word	0x5002b000
   28ebc:	aaaaaaab 	.word	0xaaaaaaab
   28ec0:	00f10c02 	.word	0x00f10c02
   28ec4:	00f10c31 	.word	0x00f10c31
   28ec8:	00f10c30 	.word	0x00f10c30
   28ecc:	00f10c35 	.word	0x00f10c35
   28ed0:	00f10c32 	.word	0x00f10c32

00028ed4 <LLF_RND_GetTrngSource>:
   28ed4:	b410      	push	{r4}
   28ed6:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   28eda:	9401      	str	r4, [sp, #4]
   28edc:	9c03      	ldr	r4, [sp, #12]
   28ede:	9402      	str	r4, [sp, #8]
   28ee0:	2400      	movs	r4, #0
   28ee2:	9403      	str	r4, [sp, #12]
   28ee4:	bc10      	pop	{r4}
   28ee6:	f7ff be9b 	b.w	28c20 <getTrngSource>
   28eea:	bf00      	nop

00028eec <LLF_RND_RunTrngStartupTest>:
   28eec:	b510      	push	{r4, lr}
   28eee:	b086      	sub	sp, #24
   28ef0:	ab05      	add	r3, sp, #20
   28ef2:	2401      	movs	r4, #1
   28ef4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   28ef8:	9300      	str	r3, [sp, #0]
   28efa:	2200      	movs	r2, #0
   28efc:	ab04      	add	r3, sp, #16
   28efe:	f7ff fe8f 	bl	28c20 <getTrngSource>
   28f02:	b006      	add	sp, #24
   28f04:	bd10      	pop	{r4, pc}
   28f06:	bf00      	nop

00028f08 <mbedtls_hardware_poll>:
   28f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f0a:	b087      	sub	sp, #28
   28f0c:	2900      	cmp	r1, #0
   28f0e:	d066      	beq.n	28fde <mbedtls_hardware_poll+0xd6>
   28f10:	461e      	mov	r6, r3
   28f12:	2b00      	cmp	r3, #0
   28f14:	d063      	beq.n	28fde <mbedtls_hardware_poll+0xd6>
   28f16:	4614      	mov	r4, r2
   28f18:	2a00      	cmp	r2, #0
   28f1a:	d060      	beq.n	28fde <mbedtls_hardware_poll+0xd6>
   28f1c:	4f31      	ldr	r7, [pc, #196]	; (28fe4 <mbedtls_hardware_poll+0xdc>)
   28f1e:	460d      	mov	r5, r1
   28f20:	6838      	ldr	r0, [r7, #0]
   28f22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28f26:	f7ff fce5 	bl	288f4 <CC_PalMutexLock>
   28f2a:	2800      	cmp	r0, #0
   28f2c:	d14d      	bne.n	28fca <mbedtls_hardware_poll+0xc2>
   28f2e:	2000      	movs	r0, #0
   28f30:	f7ff fd10 	bl	28954 <CC_PalPowerSaveModeSelect>
   28f34:	2800      	cmp	r0, #0
   28f36:	d144      	bne.n	28fc2 <mbedtls_hardware_poll+0xba>
   28f38:	482b      	ldr	r0, [pc, #172]	; (28fe8 <mbedtls_hardware_poll+0xe0>)
   28f3a:	f000 fa99 	bl	29470 <RNG_PLAT_SetUserRngParameters>
   28f3e:	4603      	mov	r3, r0
   28f40:	b1d8      	cbz	r0, 28f7a <mbedtls_hardware_poll+0x72>
   28f42:	2001      	movs	r0, #1
   28f44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28f48:	f7ff fd04 	bl	28954 <CC_PalPowerSaveModeSelect>
   28f4c:	2800      	cmp	r0, #0
   28f4e:	d134      	bne.n	28fba <mbedtls_hardware_poll+0xb2>
   28f50:	4826      	ldr	r0, [pc, #152]	; (28fec <mbedtls_hardware_poll+0xe4>)
   28f52:	f44f 7108 	mov.w	r1, #544	; 0x220
   28f56:	f7fe fed9 	bl	27d0c <mbedtls_zeroize_internal>
   28f5a:	4825      	ldr	r0, [pc, #148]	; (28ff0 <mbedtls_hardware_poll+0xe8>)
   28f5c:	2104      	movs	r1, #4
   28f5e:	f7fe fed5 	bl	27d0c <mbedtls_zeroize_internal>
   28f62:	4821      	ldr	r0, [pc, #132]	; (28fe8 <mbedtls_hardware_poll+0xe0>)
   28f64:	2128      	movs	r1, #40	; 0x28
   28f66:	f7fe fed1 	bl	27d0c <mbedtls_zeroize_internal>
   28f6a:	6838      	ldr	r0, [r7, #0]
   28f6c:	f7ff fcca 	bl	28904 <CC_PalMutexUnlock>
   28f70:	2800      	cmp	r0, #0
   28f72:	d12e      	bne.n	28fd2 <mbedtls_hardware_poll+0xca>
   28f74:	4628      	mov	r0, r5
   28f76:	b007      	add	sp, #28
   28f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28f7a:	4a1c      	ldr	r2, [pc, #112]	; (28fec <mbedtls_hardware_poll+0xe4>)
   28f7c:	9202      	str	r2, [sp, #8]
   28f7e:	aa05      	add	r2, sp, #20
   28f80:	9201      	str	r2, [sp, #4]
   28f82:	aa04      	add	r2, sp, #16
   28f84:	9003      	str	r0, [sp, #12]
   28f86:	9200      	str	r2, [sp, #0]
   28f88:	4917      	ldr	r1, [pc, #92]	; (28fe8 <mbedtls_hardware_poll+0xe0>)
   28f8a:	4819      	ldr	r0, [pc, #100]	; (28ff0 <mbedtls_hardware_poll+0xe8>)
   28f8c:	461a      	mov	r2, r3
   28f8e:	f7ff ffa1 	bl	28ed4 <LLF_RND_GetTrngSource>
   28f92:	4603      	mov	r3, r0
   28f94:	2800      	cmp	r0, #0
   28f96:	d1d4      	bne.n	28f42 <mbedtls_hardware_poll+0x3a>
   28f98:	4628      	mov	r0, r5
   28f9a:	461d      	mov	r5, r3
   28f9c:	9b05      	ldr	r3, [sp, #20]
   28f9e:	9904      	ldr	r1, [sp, #16]
   28fa0:	429c      	cmp	r4, r3
   28fa2:	4622      	mov	r2, r4
   28fa4:	bf28      	it	cs
   28fa6:	461a      	movcs	r2, r3
   28fa8:	6032      	str	r2, [r6, #0]
   28faa:	3108      	adds	r1, #8
   28fac:	f7ff fc86 	bl	288bc <CC_PalMemCopyPlat>
   28fb0:	2001      	movs	r0, #1
   28fb2:	f7ff fccf 	bl	28954 <CC_PalPowerSaveModeSelect>
   28fb6:	2800      	cmp	r0, #0
   28fb8:	d0ca      	beq.n	28f50 <mbedtls_hardware_poll+0x48>
   28fba:	480e      	ldr	r0, [pc, #56]	; (28ff4 <mbedtls_hardware_poll+0xec>)
   28fbc:	f7fe fd8e 	bl	27adc <CC_PalAbort>
   28fc0:	e7c6      	b.n	28f50 <mbedtls_hardware_poll+0x48>
   28fc2:	480d      	ldr	r0, [pc, #52]	; (28ff8 <mbedtls_hardware_poll+0xf0>)
   28fc4:	f7fe fd8a 	bl	27adc <CC_PalAbort>
   28fc8:	e7b6      	b.n	28f38 <mbedtls_hardware_poll+0x30>
   28fca:	480c      	ldr	r0, [pc, #48]	; (28ffc <mbedtls_hardware_poll+0xf4>)
   28fcc:	f7fe fd86 	bl	27adc <CC_PalAbort>
   28fd0:	e7ad      	b.n	28f2e <mbedtls_hardware_poll+0x26>
   28fd2:	480b      	ldr	r0, [pc, #44]	; (29000 <mbedtls_hardware_poll+0xf8>)
   28fd4:	f7fe fd82 	bl	27adc <CC_PalAbort>
   28fd8:	4628      	mov	r0, r5
   28fda:	b007      	add	sp, #28
   28fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28fde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28fe2:	e7c7      	b.n	28f74 <mbedtls_hardware_poll+0x6c>
   28fe4:	200008e4 	.word	0x200008e4
   28fe8:	200059fc 	.word	0x200059fc
   28fec:	20005a24 	.word	0x20005a24
   28ff0:	200059f8 	.word	0x200059f8
   28ff4:	000353e0 	.word	0x000353e0
   28ff8:	000353c0 	.word	0x000353c0
   28ffc:	000353a8 	.word	0x000353a8
   29000:	00035438 	.word	0x00035438

00029004 <cc_mbedtls_aes_init>:
   29004:	b510      	push	{r4, lr}
   29006:	4604      	mov	r4, r0
   29008:	b130      	cbz	r0, 29018 <cc_mbedtls_aes_init+0x14>
   2900a:	2200      	movs	r2, #0
   2900c:	2301      	movs	r3, #1
   2900e:	6562      	str	r2, [r4, #84]	; 0x54
   29010:	65a2      	str	r2, [r4, #88]	; 0x58
   29012:	65e3      	str	r3, [r4, #92]	; 0x5c
   29014:	6623      	str	r3, [r4, #96]	; 0x60
   29016:	bd10      	pop	{r4, pc}
   29018:	4801      	ldr	r0, [pc, #4]	; (29020 <cc_mbedtls_aes_init+0x1c>)
   2901a:	f7fe fd5f 	bl	27adc <CC_PalAbort>
   2901e:	e7f4      	b.n	2900a <cc_mbedtls_aes_init+0x6>
   29020:	00035450 	.word	0x00035450

00029024 <cc_mbedtls_aes_free>:
   29024:	b118      	cbz	r0, 2902e <cc_mbedtls_aes_free+0xa>
   29026:	2274      	movs	r2, #116	; 0x74
   29028:	2100      	movs	r1, #0
   2902a:	f7ff bc49 	b.w	288c0 <CC_PalMemSetPlat>
   2902e:	4770      	bx	lr

00029030 <cc_mbedtls_aes_setkey_enc>:
   29030:	b190      	cbz	r0, 29058 <cc_mbedtls_aes_setkey_enc+0x28>
   29032:	b1a1      	cbz	r1, 2905e <cc_mbedtls_aes_setkey_enc+0x2e>
   29034:	b510      	push	{r4, lr}
   29036:	2a80      	cmp	r2, #128	; 0x80
   29038:	f04f 0400 	mov.w	r4, #0
   2903c:	6384      	str	r4, [r0, #56]	; 0x38
   2903e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   29042:	d106      	bne.n	29052 <cc_mbedtls_aes_setkey_enc+0x22>
   29044:	2210      	movs	r2, #16
   29046:	6304      	str	r4, [r0, #48]	; 0x30
   29048:	4410      	add	r0, r2
   2904a:	f7ff fc37 	bl	288bc <CC_PalMemCopyPlat>
   2904e:	4620      	mov	r0, r4
   29050:	bd10      	pop	{r4, pc}
   29052:	f06f 001f 	mvn.w	r0, #31
   29056:	bd10      	pop	{r4, pc}
   29058:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2905c:	4770      	bx	lr
   2905e:	f06f 001f 	mvn.w	r0, #31
   29062:	4770      	bx	lr

00029064 <cc_mbedtls_aes_crypt_ecb>:
   29064:	b328      	cbz	r0, 290b2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   29066:	b322      	cbz	r2, 290b2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   29068:	b31b      	cbz	r3, 290b2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2906a:	2901      	cmp	r1, #1
   2906c:	d821      	bhi.n	290b2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2906e:	b570      	push	{r4, r5, r6, lr}
   29070:	4604      	mov	r4, r0
   29072:	6b81      	ldr	r1, [r0, #56]	; 0x38
   29074:	b086      	sub	sp, #24
   29076:	d017      	beq.n	290a8 <cc_mbedtls_aes_crypt_ecb+0x44>
   29078:	2901      	cmp	r1, #1
   2907a:	d117      	bne.n	290ac <cc_mbedtls_aes_crypt_ecb+0x48>
   2907c:	2510      	movs	r5, #16
   2907e:	2100      	movs	r1, #0
   29080:	eb0d 0605 	add.w	r6, sp, r5
   29084:	6361      	str	r1, [r4, #52]	; 0x34
   29086:	4610      	mov	r0, r2
   29088:	9500      	str	r5, [sp, #0]
   2908a:	9601      	str	r6, [sp, #4]
   2908c:	aa02      	add	r2, sp, #8
   2908e:	4629      	mov	r1, r5
   29090:	f000 fac2 	bl	29618 <SetDataBuffersInfo>
   29094:	b950      	cbnz	r0, 290ac <cc_mbedtls_aes_crypt_ecb+0x48>
   29096:	462b      	mov	r3, r5
   29098:	4632      	mov	r2, r6
   2909a:	a902      	add	r1, sp, #8
   2909c:	4620      	mov	r0, r4
   2909e:	f000 fd43 	bl	29b28 <ProcessAesDrv>
   290a2:	b918      	cbnz	r0, 290ac <cc_mbedtls_aes_crypt_ecb+0x48>
   290a4:	b006      	add	sp, #24
   290a6:	bd70      	pop	{r4, r5, r6, pc}
   290a8:	2900      	cmp	r1, #0
   290aa:	d0e7      	beq.n	2907c <cc_mbedtls_aes_crypt_ecb+0x18>
   290ac:	f06f 0021 	mvn.w	r0, #33	; 0x21
   290b0:	e7f8      	b.n	290a4 <cc_mbedtls_aes_crypt_ecb+0x40>
   290b2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   290b6:	4770      	bx	lr

000290b8 <cc_mbedtls_sha256_init>:
   290b8:	b510      	push	{r4, lr}
   290ba:	4604      	mov	r4, r0
   290bc:	b128      	cbz	r0, 290ca <cc_mbedtls_sha256_init+0x12>
   290be:	4620      	mov	r0, r4
   290c0:	21f4      	movs	r1, #244	; 0xf4
   290c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   290c6:	f7ff bbfd 	b.w	288c4 <CC_PalMemSetZeroPlat>
   290ca:	4804      	ldr	r0, [pc, #16]	; (290dc <cc_mbedtls_sha256_init+0x24>)
   290cc:	f7fe fd06 	bl	27adc <CC_PalAbort>
   290d0:	4620      	mov	r0, r4
   290d2:	21f4      	movs	r1, #244	; 0xf4
   290d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   290d8:	f7ff bbf4 	b.w	288c4 <CC_PalMemSetZeroPlat>
   290dc:	00035464 	.word	0x00035464

000290e0 <cc_mbedtls_sha256_free>:
   290e0:	b110      	cbz	r0, 290e8 <cc_mbedtls_sha256_free+0x8>
   290e2:	21f4      	movs	r1, #244	; 0xf4
   290e4:	f7fe be12 	b.w	27d0c <mbedtls_zeroize_internal>
   290e8:	4770      	bx	lr
   290ea:	bf00      	nop

000290ec <cc_mbedtls_sha256_starts>:
   290ec:	b508      	push	{r3, lr}
   290ee:	b121      	cbz	r1, 290fa <cc_mbedtls_sha256_starts+0xe>
   290f0:	2901      	cmp	r1, #1
   290f2:	d008      	beq.n	29106 <cc_mbedtls_sha256_starts+0x1a>
   290f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   290f8:	bd08      	pop	{r3, pc}
   290fa:	2101      	movs	r1, #1
   290fc:	f000 f858 	bl	291b0 <mbedtls_sha_starts_internal>
   29100:	2800      	cmp	r0, #0
   29102:	d1f7      	bne.n	290f4 <cc_mbedtls_sha256_starts+0x8>
   29104:	bd08      	pop	{r3, pc}
   29106:	2102      	movs	r1, #2
   29108:	f000 f852 	bl	291b0 <mbedtls_sha_starts_internal>
   2910c:	2800      	cmp	r0, #0
   2910e:	d0f9      	beq.n	29104 <cc_mbedtls_sha256_starts+0x18>
   29110:	e7f0      	b.n	290f4 <cc_mbedtls_sha256_starts+0x8>
   29112:	bf00      	nop

00029114 <cc_mbedtls_sha256_update>:
   29114:	b530      	push	{r4, r5, lr}
   29116:	4605      	mov	r5, r0
   29118:	1888      	adds	r0, r1, r2
   2911a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   2911e:	b0a1      	sub	sp, #132	; 0x84
   29120:	460b      	mov	r3, r1
   29122:	4614      	mov	r4, r2
   29124:	d801      	bhi.n	2912a <cc_mbedtls_sha256_update+0x16>
   29126:	2a80      	cmp	r2, #128	; 0x80
   29128:	d90c      	bls.n	29144 <cc_mbedtls_sha256_update+0x30>
   2912a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2912e:	d917      	bls.n	29160 <cc_mbedtls_sha256_update+0x4c>
   29130:	4622      	mov	r2, r4
   29132:	4619      	mov	r1, r3
   29134:	4628      	mov	r0, r5
   29136:	f000 f87d 	bl	29234 <mbedtls_sha_update_internal>
   2913a:	4604      	mov	r4, r0
   2913c:	b984      	cbnz	r4, 29160 <cc_mbedtls_sha256_update+0x4c>
   2913e:	4620      	mov	r0, r4
   29140:	b021      	add	sp, #132	; 0x84
   29142:	bd30      	pop	{r4, r5, pc}
   29144:	4668      	mov	r0, sp
   29146:	f7ff fbb9 	bl	288bc <CC_PalMemCopyPlat>
   2914a:	4622      	mov	r2, r4
   2914c:	4669      	mov	r1, sp
   2914e:	4628      	mov	r0, r5
   29150:	f000 f870 	bl	29234 <mbedtls_sha_update_internal>
   29154:	2180      	movs	r1, #128	; 0x80
   29156:	4604      	mov	r4, r0
   29158:	4668      	mov	r0, sp
   2915a:	f7ff fbb3 	bl	288c4 <CC_PalMemSetZeroPlat>
   2915e:	e7ed      	b.n	2913c <cc_mbedtls_sha256_update+0x28>
   29160:	f06f 0436 	mvn.w	r4, #54	; 0x36
   29164:	e7eb      	b.n	2913e <cc_mbedtls_sha256_update+0x2a>
   29166:	bf00      	nop

00029168 <cc_mbedtls_sha256_finish>:
   29168:	b570      	push	{r4, r5, r6, lr}
   2916a:	b1e8      	cbz	r0, 291a8 <cc_mbedtls_sha256_finish+0x40>
   2916c:	460e      	mov	r6, r1
   2916e:	b1d9      	cbz	r1, 291a8 <cc_mbedtls_sha256_finish+0x40>
   29170:	4604      	mov	r4, r0
   29172:	f000 f831 	bl	291d8 <mbedtls_sha_finish_internal>
   29176:	4605      	mov	r5, r0
   29178:	b9b0      	cbnz	r0, 291a8 <cc_mbedtls_sha256_finish+0x40>
   2917a:	6823      	ldr	r3, [r4, #0]
   2917c:	2b01      	cmp	r3, #1
   2917e:	d00b      	beq.n	29198 <cc_mbedtls_sha256_finish+0x30>
   29180:	2b02      	cmp	r3, #2
   29182:	d001      	beq.n	29188 <cc_mbedtls_sha256_finish+0x20>
   29184:	4628      	mov	r0, r5
   29186:	bd70      	pop	{r4, r5, r6, pc}
   29188:	221c      	movs	r2, #28
   2918a:	f104 0108 	add.w	r1, r4, #8
   2918e:	4630      	mov	r0, r6
   29190:	f7ff fb94 	bl	288bc <CC_PalMemCopyPlat>
   29194:	4628      	mov	r0, r5
   29196:	bd70      	pop	{r4, r5, r6, pc}
   29198:	2220      	movs	r2, #32
   2919a:	f104 0108 	add.w	r1, r4, #8
   2919e:	4630      	mov	r0, r6
   291a0:	f7ff fb8c 	bl	288bc <CC_PalMemCopyPlat>
   291a4:	4628      	mov	r0, r5
   291a6:	bd70      	pop	{r4, r5, r6, pc}
   291a8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   291ac:	e7ea      	b.n	29184 <cc_mbedtls_sha256_finish+0x1c>
   291ae:	bf00      	nop

000291b0 <mbedtls_sha_starts_internal>:
   291b0:	b178      	cbz	r0, 291d2 <mbedtls_sha_starts_internal+0x22>
   291b2:	b538      	push	{r3, r4, r5, lr}
   291b4:	4604      	mov	r4, r0
   291b6:	460d      	mov	r5, r1
   291b8:	21f0      	movs	r1, #240	; 0xf0
   291ba:	f7ff fb83 	bl	288c4 <CC_PalMemSetZeroPlat>
   291be:	2340      	movs	r3, #64	; 0x40
   291c0:	6025      	str	r5, [r4, #0]
   291c2:	65e3      	str	r3, [r4, #92]	; 0x5c
   291c4:	4620      	mov	r0, r4
   291c6:	f000 fa5b 	bl	29680 <InitHashDrv>
   291ca:	3800      	subs	r0, #0
   291cc:	bf18      	it	ne
   291ce:	2001      	movne	r0, #1
   291d0:	bd38      	pop	{r3, r4, r5, pc}
   291d2:	2001      	movs	r0, #1
   291d4:	4770      	bx	lr
   291d6:	bf00      	nop

000291d8 <mbedtls_sha_finish_internal>:
   291d8:	b570      	push	{r4, r5, r6, lr}
   291da:	6e05      	ldr	r5, [r0, #96]	; 0x60
   291dc:	b0a4      	sub	sp, #144	; 0x90
   291de:	4604      	mov	r4, r0
   291e0:	ae04      	add	r6, sp, #16
   291e2:	b9e5      	cbnz	r5, 2921e <mbedtls_sha_finish_internal+0x46>
   291e4:	2201      	movs	r2, #1
   291e6:	2300      	movs	r3, #0
   291e8:	6062      	str	r2, [r4, #4]
   291ea:	4630      	mov	r0, r6
   291ec:	e9cd 3300 	strd	r3, r3, [sp]
   291f0:	aa02      	add	r2, sp, #8
   291f2:	4629      	mov	r1, r5
   291f4:	f000 fa10 	bl	29618 <SetDataBuffersInfo>
   291f8:	b110      	cbz	r0, 29200 <mbedtls_sha_finish_internal+0x28>
   291fa:	2001      	movs	r0, #1
   291fc:	b024      	add	sp, #144	; 0x90
   291fe:	bd70      	pop	{r4, r5, r6, pc}
   29200:	462a      	mov	r2, r5
   29202:	a902      	add	r1, sp, #8
   29204:	4620      	mov	r0, r4
   29206:	f000 fa63 	bl	296d0 <ProcessHashDrv>
   2920a:	2800      	cmp	r0, #0
   2920c:	d1f5      	bne.n	291fa <mbedtls_sha_finish_internal+0x22>
   2920e:	4620      	mov	r0, r4
   29210:	f000 fb74 	bl	298fc <FinishHashDrv>
   29214:	2800      	cmp	r0, #0
   29216:	d1f0      	bne.n	291fa <mbedtls_sha_finish_internal+0x22>
   29218:	6620      	str	r0, [r4, #96]	; 0x60
   2921a:	b024      	add	sp, #144	; 0x90
   2921c:	bd70      	pop	{r4, r5, r6, pc}
   2921e:	2d80      	cmp	r5, #128	; 0x80
   29220:	462a      	mov	r2, r5
   29222:	f100 0164 	add.w	r1, r0, #100	; 0x64
   29226:	bf28      	it	cs
   29228:	2280      	movcs	r2, #128	; 0x80
   2922a:	4630      	mov	r0, r6
   2922c:	f7ff fb46 	bl	288bc <CC_PalMemCopyPlat>
   29230:	6e25      	ldr	r5, [r4, #96]	; 0x60
   29232:	e7d7      	b.n	291e4 <mbedtls_sha_finish_internal+0xc>

00029234 <mbedtls_sha_update_internal>:
   29234:	2800      	cmp	r0, #0
   29236:	f000 80ae 	beq.w	29396 <mbedtls_sha_update_internal+0x162>
   2923a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2923e:	4614      	mov	r4, r2
   29240:	b0a5      	sub	sp, #148	; 0x94
   29242:	2a00      	cmp	r2, #0
   29244:	d03d      	beq.n	292c2 <mbedtls_sha_update_internal+0x8e>
   29246:	460f      	mov	r7, r1
   29248:	2900      	cmp	r1, #0
   2924a:	d049      	beq.n	292e0 <mbedtls_sha_update_internal+0xac>
   2924c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   29250:	4605      	mov	r5, r0
   29252:	6e00      	ldr	r0, [r0, #96]	; 0x60
   29254:	d320      	bcc.n	29298 <mbedtls_sha_update_internal+0x64>
   29256:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2925a:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   2925e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29260:	1a1a      	subs	r2, r3, r0
   29262:	fbb2 f1f3 	udiv	r1, r2, r3
   29266:	fb03 2211 	mls	r2, r3, r1, r2
   2926a:	2a00      	cmp	r2, #0
   2926c:	d165      	bne.n	2933a <mbedtls_sha_update_internal+0x106>
   2926e:	4283      	cmp	r3, r0
   29270:	46b9      	mov	r9, r7
   29272:	f64f 76ff 	movw	r6, #65535	; 0xffff
   29276:	d072      	beq.n	2935e <mbedtls_sha_update_internal+0x12a>
   29278:	fbb6 fbf3 	udiv	fp, r6, r3
   2927c:	fb03 fb0b 	mul.w	fp, r3, fp
   29280:	f1bb 0f00 	cmp.w	fp, #0
   29284:	d130      	bne.n	292e8 <mbedtls_sha_update_internal+0xb4>
   29286:	2e00      	cmp	r6, #0
   29288:	d145      	bne.n	29316 <mbedtls_sha_update_internal+0xe2>
   2928a:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   2928e:	3cff      	subs	r4, #255	; 0xff
   29290:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   29294:	4447      	add	r7, r8
   29296:	d2e2      	bcs.n	2925e <mbedtls_sha_update_internal+0x2a>
   29298:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2929a:	1a16      	subs	r6, r2, r0
   2929c:	fbb6 f3f2 	udiv	r3, r6, r2
   292a0:	fb02 6613 	mls	r6, r2, r3, r6
   292a4:	42a6      	cmp	r6, r4
   292a6:	bf28      	it	cs
   292a8:	4626      	movcs	r6, r4
   292aa:	2e00      	cmp	r6, #0
   292ac:	d175      	bne.n	2939a <mbedtls_sha_update_internal+0x166>
   292ae:	4282      	cmp	r2, r0
   292b0:	f000 808d 	beq.w	293ce <mbedtls_sha_update_internal+0x19a>
   292b4:	fbb4 f6f2 	udiv	r6, r4, r2
   292b8:	fb02 f606 	mul.w	r6, r2, r6
   292bc:	b92e      	cbnz	r6, 292ca <mbedtls_sha_update_internal+0x96>
   292be:	2c00      	cmp	r4, #0
   292c0:	d179      	bne.n	293b6 <mbedtls_sha_update_internal+0x182>
   292c2:	2000      	movs	r0, #0
   292c4:	b025      	add	sp, #148	; 0x94
   292c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292ca:	2300      	movs	r3, #0
   292cc:	e9cd 3300 	strd	r3, r3, [sp]
   292d0:	aa02      	add	r2, sp, #8
   292d2:	4631      	mov	r1, r6
   292d4:	4638      	mov	r0, r7
   292d6:	f000 f99f 	bl	29618 <SetDataBuffersInfo>
   292da:	2800      	cmp	r0, #0
   292dc:	f000 8095 	beq.w	2940a <mbedtls_sha_update_internal+0x1d6>
   292e0:	2001      	movs	r0, #1
   292e2:	b025      	add	sp, #148	; 0x94
   292e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292e8:	2300      	movs	r3, #0
   292ea:	e9cd 3300 	strd	r3, r3, [sp]
   292ee:	aa02      	add	r2, sp, #8
   292f0:	4659      	mov	r1, fp
   292f2:	4648      	mov	r0, r9
   292f4:	f000 f990 	bl	29618 <SetDataBuffersInfo>
   292f8:	2800      	cmp	r0, #0
   292fa:	d1f1      	bne.n	292e0 <mbedtls_sha_update_internal+0xac>
   292fc:	a902      	add	r1, sp, #8
   292fe:	465a      	mov	r2, fp
   29300:	4628      	mov	r0, r5
   29302:	f000 f9e5 	bl	296d0 <ProcessHashDrv>
   29306:	2800      	cmp	r0, #0
   29308:	d1ea      	bne.n	292e0 <mbedtls_sha_update_internal+0xac>
   2930a:	eba6 060b 	sub.w	r6, r6, fp
   2930e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   29310:	44d9      	add	r9, fp
   29312:	2e00      	cmp	r6, #0
   29314:	d0b9      	beq.n	2928a <mbedtls_sha_update_internal+0x56>
   29316:	3019      	adds	r0, #25
   29318:	4649      	mov	r1, r9
   2931a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   2931e:	4632      	mov	r2, r6
   29320:	f7ff facc 	bl	288bc <CC_PalMemCopyPlat>
   29324:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   29328:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2932a:	3cff      	subs	r4, #255	; 0xff
   2932c:	4430      	add	r0, r6
   2932e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   29332:	4447      	add	r7, r8
   29334:	6628      	str	r0, [r5, #96]	; 0x60
   29336:	d292      	bcs.n	2925e <mbedtls_sha_update_internal+0x2a>
   29338:	e7ae      	b.n	29298 <mbedtls_sha_update_internal+0x64>
   2933a:	4542      	cmp	r2, r8
   2933c:	bf28      	it	cs
   2933e:	4642      	movcs	r2, r8
   29340:	4450      	add	r0, sl
   29342:	4639      	mov	r1, r7
   29344:	4616      	mov	r6, r2
   29346:	f7ff fab9 	bl	288bc <CC_PalMemCopyPlat>
   2934a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2934c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2934e:	4430      	add	r0, r6
   29350:	4283      	cmp	r3, r0
   29352:	eb07 0906 	add.w	r9, r7, r6
   29356:	6628      	str	r0, [r5, #96]	; 0x60
   29358:	eba8 0606 	sub.w	r6, r8, r6
   2935c:	d18c      	bne.n	29278 <mbedtls_sha_update_internal+0x44>
   2935e:	2b80      	cmp	r3, #128	; 0x80
   29360:	bf28      	it	cs
   29362:	2380      	movcs	r3, #128	; 0x80
   29364:	461a      	mov	r2, r3
   29366:	4651      	mov	r1, sl
   29368:	a804      	add	r0, sp, #16
   2936a:	f7ff faa7 	bl	288bc <CC_PalMemCopyPlat>
   2936e:	2300      	movs	r3, #0
   29370:	e9cd 3300 	strd	r3, r3, [sp]
   29374:	aa02      	add	r2, sp, #8
   29376:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   29378:	a804      	add	r0, sp, #16
   2937a:	f000 f94d 	bl	29618 <SetDataBuffersInfo>
   2937e:	2800      	cmp	r0, #0
   29380:	d1ae      	bne.n	292e0 <mbedtls_sha_update_internal+0xac>
   29382:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29384:	a902      	add	r1, sp, #8
   29386:	4628      	mov	r0, r5
   29388:	f000 f9a2 	bl	296d0 <ProcessHashDrv>
   2938c:	2800      	cmp	r0, #0
   2938e:	d1a7      	bne.n	292e0 <mbedtls_sha_update_internal+0xac>
   29390:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29392:	6628      	str	r0, [r5, #96]	; 0x60
   29394:	e770      	b.n	29278 <mbedtls_sha_update_internal+0x44>
   29396:	2001      	movs	r0, #1
   29398:	4770      	bx	lr
   2939a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   2939e:	4639      	mov	r1, r7
   293a0:	4632      	mov	r2, r6
   293a2:	4418      	add	r0, r3
   293a4:	f7ff fa8a 	bl	288bc <CC_PalMemCopyPlat>
   293a8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   293aa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   293ac:	4430      	add	r0, r6
   293ae:	1ba4      	subs	r4, r4, r6
   293b0:	4437      	add	r7, r6
   293b2:	6628      	str	r0, [r5, #96]	; 0x60
   293b4:	e77b      	b.n	292ae <mbedtls_sha_update_internal+0x7a>
   293b6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   293b8:	3319      	adds	r3, #25
   293ba:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   293be:	4622      	mov	r2, r4
   293c0:	4639      	mov	r1, r7
   293c2:	f7ff fa7b 	bl	288bc <CC_PalMemCopyPlat>
   293c6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   293c8:	4423      	add	r3, r4
   293ca:	662b      	str	r3, [r5, #96]	; 0x60
   293cc:	e779      	b.n	292c2 <mbedtls_sha_update_internal+0x8e>
   293ce:	2a80      	cmp	r2, #128	; 0x80
   293d0:	bf28      	it	cs
   293d2:	2280      	movcs	r2, #128	; 0x80
   293d4:	f105 0164 	add.w	r1, r5, #100	; 0x64
   293d8:	a804      	add	r0, sp, #16
   293da:	f7ff fa6f 	bl	288bc <CC_PalMemCopyPlat>
   293de:	2300      	movs	r3, #0
   293e0:	e9cd 3300 	strd	r3, r3, [sp]
   293e4:	a804      	add	r0, sp, #16
   293e6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   293e8:	aa02      	add	r2, sp, #8
   293ea:	f000 f915 	bl	29618 <SetDataBuffersInfo>
   293ee:	2800      	cmp	r0, #0
   293f0:	f47f af76 	bne.w	292e0 <mbedtls_sha_update_internal+0xac>
   293f4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   293f6:	a902      	add	r1, sp, #8
   293f8:	4628      	mov	r0, r5
   293fa:	f000 f969 	bl	296d0 <ProcessHashDrv>
   293fe:	2800      	cmp	r0, #0
   29400:	f47f af6e 	bne.w	292e0 <mbedtls_sha_update_internal+0xac>
   29404:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29406:	6628      	str	r0, [r5, #96]	; 0x60
   29408:	e754      	b.n	292b4 <mbedtls_sha_update_internal+0x80>
   2940a:	a902      	add	r1, sp, #8
   2940c:	4632      	mov	r2, r6
   2940e:	4628      	mov	r0, r5
   29410:	f000 f95e 	bl	296d0 <ProcessHashDrv>
   29414:	2800      	cmp	r0, #0
   29416:	f47f af63 	bne.w	292e0 <mbedtls_sha_update_internal+0xac>
   2941a:	4437      	add	r7, r6
   2941c:	1ba4      	subs	r4, r4, r6
   2941e:	e74e      	b.n	292be <mbedtls_sha_update_internal+0x8a>

00029420 <cc_mbedtls_sha256>:
   29420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29422:	461c      	mov	r4, r3
   29424:	4605      	mov	r5, r0
   29426:	4811      	ldr	r0, [pc, #68]	; (2946c <cc_mbedtls_sha256+0x4c>)
   29428:	460e      	mov	r6, r1
   2942a:	4617      	mov	r7, r2
   2942c:	f7ff fe44 	bl	290b8 <cc_mbedtls_sha256_init>
   29430:	4621      	mov	r1, r4
   29432:	480e      	ldr	r0, [pc, #56]	; (2946c <cc_mbedtls_sha256+0x4c>)
   29434:	f7ff fe5a 	bl	290ec <cc_mbedtls_sha256_starts>
   29438:	4604      	mov	r4, r0
   2943a:	b120      	cbz	r0, 29446 <cc_mbedtls_sha256+0x26>
   2943c:	480b      	ldr	r0, [pc, #44]	; (2946c <cc_mbedtls_sha256+0x4c>)
   2943e:	f7ff fe4f 	bl	290e0 <cc_mbedtls_sha256_free>
   29442:	4620      	mov	r0, r4
   29444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29446:	4809      	ldr	r0, [pc, #36]	; (2946c <cc_mbedtls_sha256+0x4c>)
   29448:	4632      	mov	r2, r6
   2944a:	4629      	mov	r1, r5
   2944c:	f7ff fe62 	bl	29114 <cc_mbedtls_sha256_update>
   29450:	4604      	mov	r4, r0
   29452:	2800      	cmp	r0, #0
   29454:	d1f2      	bne.n	2943c <cc_mbedtls_sha256+0x1c>
   29456:	4639      	mov	r1, r7
   29458:	4804      	ldr	r0, [pc, #16]	; (2946c <cc_mbedtls_sha256+0x4c>)
   2945a:	f7ff fe85 	bl	29168 <cc_mbedtls_sha256_finish>
   2945e:	4604      	mov	r4, r0
   29460:	4802      	ldr	r0, [pc, #8]	; (2946c <cc_mbedtls_sha256+0x4c>)
   29462:	f7ff fe3d 	bl	290e0 <cc_mbedtls_sha256_free>
   29466:	4620      	mov	r0, r4
   29468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2946a:	bf00      	nop
   2946c:	20005c44 	.word	0x20005c44

00029470 <RNG_PLAT_SetUserRngParameters>:
   29470:	b530      	push	{r4, r5, lr}
   29472:	b083      	sub	sp, #12
   29474:	231c      	movs	r3, #28
   29476:	a901      	add	r1, sp, #4
   29478:	4605      	mov	r5, r0
   2947a:	9301      	str	r3, [sp, #4]
   2947c:	f000 f832 	bl	294e4 <CC_PalTrngParamGet>
   29480:	4604      	mov	r4, r0
   29482:	b938      	cbnz	r0, 29494 <RNG_PLAT_SetUserRngParameters+0x24>
   29484:	9b01      	ldr	r3, [sp, #4]
   29486:	2b1c      	cmp	r3, #28
   29488:	d007      	beq.n	2949a <RNG_PLAT_SetUserRngParameters+0x2a>
   2948a:	4c14      	ldr	r4, [pc, #80]	; (294dc <RNG_PLAT_SetUserRngParameters+0x6c>)
   2948c:	211c      	movs	r1, #28
   2948e:	4628      	mov	r0, r5
   29490:	f7ff fa18 	bl	288c4 <CC_PalMemSetZeroPlat>
   29494:	4620      	mov	r0, r4
   29496:	b003      	add	sp, #12
   29498:	bd30      	pop	{r4, r5, pc}
   2949a:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   2949e:	1e13      	subs	r3, r2, #0
   294a0:	bf18      	it	ne
   294a2:	2301      	movne	r3, #1
   294a4:	3900      	subs	r1, #0
   294a6:	682a      	ldr	r2, [r5, #0]
   294a8:	bf18      	it	ne
   294aa:	2101      	movne	r1, #1
   294ac:	009b      	lsls	r3, r3, #2
   294ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   294b2:	2a00      	cmp	r2, #0
   294b4:	bf18      	it	ne
   294b6:	f043 0301 	orrne.w	r3, r3, #1
   294ba:	68ea      	ldr	r2, [r5, #12]
   294bc:	2001      	movs	r0, #1
   294be:	61e8      	str	r0, [r5, #28]
   294c0:	b92a      	cbnz	r2, 294ce <RNG_PLAT_SetUserRngParameters+0x5e>
   294c2:	e9c5 3408 	strd	r3, r4, [r5, #32]
   294c6:	2b00      	cmp	r3, #0
   294c8:	d1e4      	bne.n	29494 <RNG_PLAT_SetUserRngParameters+0x24>
   294ca:	4c05      	ldr	r4, [pc, #20]	; (294e0 <RNG_PLAT_SetUserRngParameters+0x70>)
   294cc:	e7de      	b.n	2948c <RNG_PLAT_SetUserRngParameters+0x1c>
   294ce:	f043 0308 	orr.w	r3, r3, #8
   294d2:	4620      	mov	r0, r4
   294d4:	e9c5 3408 	strd	r3, r4, [r5, #32]
   294d8:	b003      	add	sp, #12
   294da:	bd30      	pop	{r4, r5, pc}
   294dc:	00f00c37 	.word	0x00f00c37
   294e0:	00f00c0e 	.word	0x00f00c0e

000294e4 <CC_PalTrngParamGet>:
   294e4:	b118      	cbz	r0, 294ee <CC_PalTrngParamGet+0xa>
   294e6:	b111      	cbz	r1, 294ee <CC_PalTrngParamGet+0xa>
   294e8:	680b      	ldr	r3, [r1, #0]
   294ea:	2b1c      	cmp	r3, #28
   294ec:	d001      	beq.n	294f2 <CC_PalTrngParamGet+0xe>
   294ee:	2001      	movs	r0, #1
   294f0:	4770      	bx	lr
   294f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   294f6:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   294fa:	3201      	adds	r2, #1
   294fc:	bf14      	ite	ne
   294fe:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   29502:	f241 225c 	movweq	r2, #4700	; 0x125c
   29506:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2950a:	6002      	str	r2, [r0, #0]
   2950c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   29510:	3201      	adds	r2, #1
   29512:	bf14      	ite	ne
   29514:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   29518:	f641 1264 	movweq	r2, #6500	; 0x1964
   2951c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29520:	6042      	str	r2, [r0, #4]
   29522:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   29526:	3201      	adds	r2, #1
   29528:	bf14      	ite	ne
   2952a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2952e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   29532:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29536:	6082      	str	r2, [r0, #8]
   29538:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   2953c:	3201      	adds	r2, #1
   2953e:	bf14      	ite	ne
   29540:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   29544:	f241 3288 	movweq	r2, #5000	; 0x1388
   29548:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2954c:	60c2      	str	r2, [r0, #12]
   2954e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   29552:	3201      	adds	r2, #1
   29554:	bf14      	ite	ne
   29556:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2955a:	2290      	moveq	r2, #144	; 0x90
   2955c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29560:	6102      	str	r2, [r0, #16]
   29562:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   29566:	3201      	adds	r2, #1
   29568:	bf14      	ite	ne
   2956a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2956e:	2251      	moveq	r2, #81	; 0x51
   29570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29574:	6142      	str	r2, [r0, #20]
   29576:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2957a:	3201      	adds	r2, #1
   2957c:	bf14      	ite	ne
   2957e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   29582:	f240 3337 	movweq	r3, #823	; 0x337
   29586:	6183      	str	r3, [r0, #24]
   29588:	2000      	movs	r0, #0
   2958a:	4770      	bx	lr

0002958c <LLF_RND_WaitRngInterrupt>:
   2958c:	b508      	push	{r3, lr}
   2958e:	4601      	mov	r1, r0
   29590:	f44f 6080 	mov.w	r0, #1024	; 0x400
   29594:	f7ff f91e 	bl	287d4 <CC_HalWaitInterruptRND>
   29598:	4b03      	ldr	r3, [pc, #12]	; (295a8 <LLF_RND_WaitRngInterrupt+0x1c>)
   2959a:	2200      	movs	r2, #0
   2959c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   295a0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   295a4:	bd08      	pop	{r3, pc}
   295a6:	bf00      	nop
   295a8:	5002b000 	.word	0x5002b000

000295ac <LLF_RND_GetRoscSampleCnt>:
   295ac:	3801      	subs	r0, #1
   295ae:	2807      	cmp	r0, #7
   295b0:	d805      	bhi.n	295be <LLF_RND_GetRoscSampleCnt+0x12>
   295b2:	e8df f000 	tbb	[pc, r0]
   295b6:	0e10      	.short	0x0e10
   295b8:	04040a04 	.word	0x04040a04
   295bc:	0604      	.short	0x0604
   295be:	4807      	ldr	r0, [pc, #28]	; (295dc <LLF_RND_GetRoscSampleCnt+0x30>)
   295c0:	4770      	bx	lr
   295c2:	68cb      	ldr	r3, [r1, #12]
   295c4:	624b      	str	r3, [r1, #36]	; 0x24
   295c6:	2000      	movs	r0, #0
   295c8:	4770      	bx	lr
   295ca:	688b      	ldr	r3, [r1, #8]
   295cc:	624b      	str	r3, [r1, #36]	; 0x24
   295ce:	2000      	movs	r0, #0
   295d0:	4770      	bx	lr
   295d2:	684b      	ldr	r3, [r1, #4]
   295d4:	e7f6      	b.n	295c4 <LLF_RND_GetRoscSampleCnt+0x18>
   295d6:	680b      	ldr	r3, [r1, #0]
   295d8:	e7f4      	b.n	295c4 <LLF_RND_GetRoscSampleCnt+0x18>
   295da:	bf00      	nop
   295dc:	00f10c31 	.word	0x00f10c31

000295e0 <LLF_RND_GetFastestRosc>:
   295e0:	680b      	ldr	r3, [r1, #0]
   295e2:	e002      	b.n	295ea <LLF_RND_GetFastestRosc+0xa>
   295e4:	2b08      	cmp	r3, #8
   295e6:	600b      	str	r3, [r1, #0]
   295e8:	d806      	bhi.n	295f8 <LLF_RND_GetFastestRosc+0x18>
   295ea:	6a02      	ldr	r2, [r0, #32]
   295ec:	4213      	tst	r3, r2
   295ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
   295f2:	d0f7      	beq.n	295e4 <LLF_RND_GetFastestRosc+0x4>
   295f4:	2000      	movs	r0, #0
   295f6:	4770      	bx	lr
   295f8:	4800      	ldr	r0, [pc, #0]	; (295fc <LLF_RND_GetFastestRosc+0x1c>)
   295fa:	4770      	bx	lr
   295fc:	00f10c31 	.word	0x00f10c31

00029600 <LLF_RND_TurnOffTrng>:
   29600:	4b04      	ldr	r3, [pc, #16]	; (29614 <LLF_RND_TurnOffTrng+0x14>)
   29602:	2200      	movs	r2, #0
   29604:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   29608:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2960c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   29610:	f7ff b8c6 	b.w	287a0 <CC_HalClearInterruptBit>
   29614:	5002b000 	.word	0x5002b000

00029618 <SetDataBuffersInfo>:
   29618:	b5f0      	push	{r4, r5, r6, r7, lr}
   2961a:	b083      	sub	sp, #12
   2961c:	461d      	mov	r5, r3
   2961e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   29622:	f04f 0300 	mov.w	r3, #0
   29626:	f88d 3007 	strb.w	r3, [sp, #7]
   2962a:	d324      	bcc.n	29676 <SetDataBuffersInfo+0x5e>
   2962c:	468c      	mov	ip, r1
   2962e:	4484      	add	ip, r0
   29630:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   29634:	4604      	mov	r4, r0
   29636:	d81e      	bhi.n	29676 <SetDataBuffersInfo+0x5e>
   29638:	4617      	mov	r7, r2
   2963a:	f10d 0307 	add.w	r3, sp, #7
   2963e:	2201      	movs	r2, #1
   29640:	f000 fe64 	bl	2a30c <CC_PalDataBufferAttrGet>
   29644:	4606      	mov	r6, r0
   29646:	b9b0      	cbnz	r0, 29676 <SetDataBuffersInfo+0x5e>
   29648:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2964a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2964e:	603c      	str	r4, [r7, #0]
   29650:	713b      	strb	r3, [r7, #4]
   29652:	b192      	cbz	r2, 2967a <SetDataBuffersInfo+0x62>
   29654:	b14d      	cbz	r5, 2966a <SetDataBuffersInfo+0x52>
   29656:	4602      	mov	r2, r0
   29658:	9908      	ldr	r1, [sp, #32]
   2965a:	f10d 0307 	add.w	r3, sp, #7
   2965e:	4628      	mov	r0, r5
   29660:	f000 fe54 	bl	2a30c <CC_PalDataBufferAttrGet>
   29664:	b938      	cbnz	r0, 29676 <SetDataBuffersInfo+0x5e>
   29666:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2966a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2966c:	4630      	mov	r0, r6
   2966e:	6015      	str	r5, [r2, #0]
   29670:	7113      	strb	r3, [r2, #4]
   29672:	b003      	add	sp, #12
   29674:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29676:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   2967a:	4630      	mov	r0, r6
   2967c:	b003      	add	sp, #12
   2967e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029680 <InitHashDrv>:
   29680:	b1d8      	cbz	r0, 296ba <InitHashDrv+0x3a>
   29682:	b508      	push	{r3, lr}
   29684:	6803      	ldr	r3, [r0, #0]
   29686:	2b01      	cmp	r3, #1
   29688:	d004      	beq.n	29694 <InitHashDrv+0x14>
   2968a:	2b02      	cmp	r3, #2
   2968c:	d00f      	beq.n	296ae <InitHashDrv+0x2e>
   2968e:	b143      	cbz	r3, 296a2 <InitHashDrv+0x22>
   29690:	480b      	ldr	r0, [pc, #44]	; (296c0 <InitHashDrv+0x40>)
   29692:	bd08      	pop	{r3, pc}
   29694:	490b      	ldr	r1, [pc, #44]	; (296c4 <InitHashDrv+0x44>)
   29696:	2220      	movs	r2, #32
   29698:	3008      	adds	r0, #8
   2969a:	f7ff f90f 	bl	288bc <CC_PalMemCopyPlat>
   2969e:	2000      	movs	r0, #0
   296a0:	bd08      	pop	{r3, pc}
   296a2:	4909      	ldr	r1, [pc, #36]	; (296c8 <InitHashDrv+0x48>)
   296a4:	2214      	movs	r2, #20
   296a6:	3008      	adds	r0, #8
   296a8:	f7ff f908 	bl	288bc <CC_PalMemCopyPlat>
   296ac:	e7f7      	b.n	2969e <InitHashDrv+0x1e>
   296ae:	4907      	ldr	r1, [pc, #28]	; (296cc <InitHashDrv+0x4c>)
   296b0:	2220      	movs	r2, #32
   296b2:	3008      	adds	r0, #8
   296b4:	f7ff f902 	bl	288bc <CC_PalMemCopyPlat>
   296b8:	e7f1      	b.n	2969e <InitHashDrv+0x1e>
   296ba:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   296be:	4770      	bx	lr
   296c0:	00f30001 	.word	0x00f30001
   296c4:	00035474 	.word	0x00035474
   296c8:	000354b4 	.word	0x000354b4
   296cc:	00035494 	.word	0x00035494

000296d0 <ProcessHashDrv>:
   296d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   296d4:	2900      	cmp	r1, #0
   296d6:	f000 80f9 	beq.w	298cc <ProcessHashDrv+0x1fc>
   296da:	4604      	mov	r4, r0
   296dc:	2800      	cmp	r0, #0
   296de:	f000 80f9 	beq.w	298d4 <ProcessHashDrv+0x204>
   296e2:	6803      	ldr	r3, [r0, #0]
   296e4:	4690      	mov	r8, r2
   296e6:	460f      	mov	r7, r1
   296e8:	2b00      	cmp	r3, #0
   296ea:	f000 80c3 	beq.w	29874 <ProcessHashDrv+0x1a4>
   296ee:	3b01      	subs	r3, #1
   296f0:	2b01      	cmp	r3, #1
   296f2:	f200 80d7 	bhi.w	298a4 <ProcessHashDrv+0x1d4>
   296f6:	4879      	ldr	r0, [pc, #484]	; (298dc <ProcessHashDrv+0x20c>)
   296f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   296fc:	f04f 0902 	mov.w	r9, #2
   29700:	f7ff f8f8 	bl	288f4 <CC_PalMutexLock>
   29704:	2800      	cmp	r0, #0
   29706:	f040 80bf 	bne.w	29888 <ProcessHashDrv+0x1b8>
   2970a:	2000      	movs	r0, #0
   2970c:	f7ff f922 	bl	28954 <CC_PalPowerSaveModeSelect>
   29710:	4606      	mov	r6, r0
   29712:	2800      	cmp	r0, #0
   29714:	f040 80c2 	bne.w	2989c <ProcessHashDrv+0x1cc>
   29718:	4a71      	ldr	r2, [pc, #452]	; (298e0 <ProcessHashDrv+0x210>)
   2971a:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   2971e:	2b00      	cmp	r3, #0
   29720:	d1fb      	bne.n	2971a <ProcessHashDrv+0x4a>
   29722:	4d6f      	ldr	r5, [pc, #444]	; (298e0 <ProcessHashDrv+0x210>)
   29724:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   29728:	2b00      	cmp	r3, #0
   2972a:	d1fb      	bne.n	29724 <ProcessHashDrv+0x54>
   2972c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29730:	f7ff f836 	bl	287a0 <CC_HalClearInterruptBit>
   29734:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   29738:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2973c:	f7ff f83e 	bl	287bc <CC_HalMaskInterrupt>
   29740:	2301      	movs	r3, #1
   29742:	2207      	movs	r2, #7
   29744:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   29748:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   2974c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   29750:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   29752:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   29756:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   29758:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   2975c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   29760:	6823      	ldr	r3, [r4, #0]
   29762:	b15b      	cbz	r3, 2977c <ProcessHashDrv+0xac>
   29764:	3b01      	subs	r3, #1
   29766:	2b01      	cmp	r3, #1
   29768:	d818      	bhi.n	2979c <ProcessHashDrv+0xcc>
   2976a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2976c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   29770:	6a23      	ldr	r3, [r4, #32]
   29772:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   29776:	69e3      	ldr	r3, [r4, #28]
   29778:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   2977c:	4b58      	ldr	r3, [pc, #352]	; (298e0 <ProcessHashDrv+0x210>)
   2977e:	69a2      	ldr	r2, [r4, #24]
   29780:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   29784:	6962      	ldr	r2, [r4, #20]
   29786:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   2978a:	6922      	ldr	r2, [r4, #16]
   2978c:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   29790:	68e2      	ldr	r2, [r4, #12]
   29792:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   29796:	68a2      	ldr	r2, [r4, #8]
   29798:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   2979c:	4a50      	ldr	r2, [pc, #320]	; (298e0 <ProcessHashDrv+0x210>)
   2979e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   297a2:	2b00      	cmp	r3, #0
   297a4:	d1fb      	bne.n	2979e <ProcessHashDrv+0xce>
   297a6:	f1b8 0f00 	cmp.w	r8, #0
   297aa:	d05f      	beq.n	2986c <ProcessHashDrv+0x19c>
   297ac:	6863      	ldr	r3, [r4, #4]
   297ae:	2b01      	cmp	r3, #1
   297b0:	bf08      	it	eq
   297b2:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   297b6:	4b4a      	ldr	r3, [pc, #296]	; (298e0 <ProcessHashDrv+0x210>)
   297b8:	683a      	ldr	r2, [r7, #0]
   297ba:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   297be:	2040      	movs	r0, #64	; 0x40
   297c0:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   297c4:	f7ff f800 	bl	287c8 <CC_HalWaitInterrupt>
   297c8:	4606      	mov	r6, r0
   297ca:	4a45      	ldr	r2, [pc, #276]	; (298e0 <ProcessHashDrv+0x210>)
   297cc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   297d0:	2b00      	cmp	r3, #0
   297d2:	d1fb      	bne.n	297cc <ProcessHashDrv+0xfc>
   297d4:	4a42      	ldr	r2, [pc, #264]	; (298e0 <ProcessHashDrv+0x210>)
   297d6:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   297da:	2b00      	cmp	r3, #0
   297dc:	d1fb      	bne.n	297d6 <ProcessHashDrv+0x106>
   297de:	6823      	ldr	r3, [r4, #0]
   297e0:	b15b      	cbz	r3, 297fa <ProcessHashDrv+0x12a>
   297e2:	3b01      	subs	r3, #1
   297e4:	2b01      	cmp	r3, #1
   297e6:	d818      	bhi.n	2981a <ProcessHashDrv+0x14a>
   297e8:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   297ec:	6263      	str	r3, [r4, #36]	; 0x24
   297ee:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   297f2:	6223      	str	r3, [r4, #32]
   297f4:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   297f8:	61e3      	str	r3, [r4, #28]
   297fa:	4b39      	ldr	r3, [pc, #228]	; (298e0 <ProcessHashDrv+0x210>)
   297fc:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   29800:	61a2      	str	r2, [r4, #24]
   29802:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   29806:	6162      	str	r2, [r4, #20]
   29808:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   2980c:	6122      	str	r2, [r4, #16]
   2980e:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   29812:	60e2      	str	r2, [r4, #12]
   29814:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   29818:	60a3      	str	r3, [r4, #8]
   2981a:	4a31      	ldr	r2, [pc, #196]	; (298e0 <ProcessHashDrv+0x210>)
   2981c:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   29820:	64a1      	str	r1, [r4, #72]	; 0x48
   29822:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   29826:	64e1      	str	r1, [r4, #76]	; 0x4c
   29828:	2300      	movs	r3, #0
   2982a:	2101      	movs	r1, #1
   2982c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   29830:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   29834:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   29838:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2983c:	2b00      	cmp	r3, #0
   2983e:	d1fb      	bne.n	29838 <ProcessHashDrv+0x168>
   29840:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   29844:	2e00      	cmp	r6, #0
   29846:	d13b      	bne.n	298c0 <ProcessHashDrv+0x1f0>
   29848:	4b25      	ldr	r3, [pc, #148]	; (298e0 <ProcessHashDrv+0x210>)
   2984a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2984e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   29852:	f7fe ffb3 	bl	287bc <CC_HalMaskInterrupt>
   29856:	2001      	movs	r0, #1
   29858:	f7ff f87c 	bl	28954 <CC_PalPowerSaveModeSelect>
   2985c:	bb60      	cbnz	r0, 298b8 <ProcessHashDrv+0x1e8>
   2985e:	481f      	ldr	r0, [pc, #124]	; (298dc <ProcessHashDrv+0x20c>)
   29860:	f7ff f850 	bl	28904 <CC_PalMutexUnlock>
   29864:	bb10      	cbnz	r0, 298ac <ProcessHashDrv+0x1dc>
   29866:	4630      	mov	r0, r6
   29868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2986c:	2304      	movs	r3, #4
   2986e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   29872:	e7aa      	b.n	297ca <ProcessHashDrv+0xfa>
   29874:	4819      	ldr	r0, [pc, #100]	; (298dc <ProcessHashDrv+0x20c>)
   29876:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2987a:	f04f 0901 	mov.w	r9, #1
   2987e:	f7ff f839 	bl	288f4 <CC_PalMutexLock>
   29882:	2800      	cmp	r0, #0
   29884:	f43f af41 	beq.w	2970a <ProcessHashDrv+0x3a>
   29888:	4816      	ldr	r0, [pc, #88]	; (298e4 <ProcessHashDrv+0x214>)
   2988a:	f7fe f927 	bl	27adc <CC_PalAbort>
   2988e:	2000      	movs	r0, #0
   29890:	f7ff f860 	bl	28954 <CC_PalPowerSaveModeSelect>
   29894:	4606      	mov	r6, r0
   29896:	2800      	cmp	r0, #0
   29898:	f43f af3e 	beq.w	29718 <ProcessHashDrv+0x48>
   2989c:	4812      	ldr	r0, [pc, #72]	; (298e8 <ProcessHashDrv+0x218>)
   2989e:	f7fe f91d 	bl	27adc <CC_PalAbort>
   298a2:	e739      	b.n	29718 <ProcessHashDrv+0x48>
   298a4:	4e11      	ldr	r6, [pc, #68]	; (298ec <ProcessHashDrv+0x21c>)
   298a6:	4630      	mov	r0, r6
   298a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   298ac:	4810      	ldr	r0, [pc, #64]	; (298f0 <ProcessHashDrv+0x220>)
   298ae:	f7fe f915 	bl	27adc <CC_PalAbort>
   298b2:	4630      	mov	r0, r6
   298b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   298b8:	480e      	ldr	r0, [pc, #56]	; (298f4 <ProcessHashDrv+0x224>)
   298ba:	f7fe f90f 	bl	27adc <CC_PalAbort>
   298be:	e7ce      	b.n	2985e <ProcessHashDrv+0x18e>
   298c0:	2110      	movs	r1, #16
   298c2:	f104 0008 	add.w	r0, r4, #8
   298c6:	f7fe fffd 	bl	288c4 <CC_PalMemSetZeroPlat>
   298ca:	e7bd      	b.n	29848 <ProcessHashDrv+0x178>
   298cc:	4e0a      	ldr	r6, [pc, #40]	; (298f8 <ProcessHashDrv+0x228>)
   298ce:	4630      	mov	r0, r6
   298d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   298d4:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   298d8:	e7c5      	b.n	29866 <ProcessHashDrv+0x196>
   298da:	bf00      	nop
   298dc:	200008f4 	.word	0x200008f4
   298e0:	5002b000 	.word	0x5002b000
   298e4:	000353a8 	.word	0x000353a8
   298e8:	000353c0 	.word	0x000353c0
   298ec:	00f30001 	.word	0x00f30001
   298f0:	00035400 	.word	0x00035400
   298f4:	000353e0 	.word	0x000353e0
   298f8:	00f30003 	.word	0x00f30003

000298fc <FinishHashDrv>:
   298fc:	b398      	cbz	r0, 29966 <FinishHashDrv+0x6a>
   298fe:	b470      	push	{r4, r5, r6}
   29900:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   29904:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   29908:	ba26      	rev	r6, r4
   2990a:	ba0d      	rev	r5, r1
   2990c:	ba14      	rev	r4, r2
   2990e:	ba19      	rev	r1, r3
   29910:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   29914:	ba12      	rev	r2, r2
   29916:	e9c0 4104 	strd	r4, r1, [r0, #16]
   2991a:	6182      	str	r2, [r0, #24]
   2991c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   29920:	e9c0 6502 	strd	r6, r5, [r0, #8]
   29924:	ba1b      	rev	r3, r3
   29926:	ba25      	rev	r5, r4
   29928:	e9c0 3507 	strd	r3, r5, [r0, #28]
   2992c:	ba14      	rev	r4, r2
   2992e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   29932:	6a81      	ldr	r1, [r0, #40]	; 0x28
   29934:	ba12      	rev	r2, r2
   29936:	ba09      	rev	r1, r1
   29938:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   2993c:	62c2      	str	r2, [r0, #44]	; 0x2c
   2993e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   29942:	ba1b      	rev	r3, r3
   29944:	ba25      	rev	r5, r4
   29946:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   2994a:	ba14      	rev	r4, r2
   2994c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   29950:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   29952:	ba12      	rev	r2, r2
   29954:	ba09      	rev	r1, r1
   29956:	ba1b      	rev	r3, r3
   29958:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2995c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   29960:	2000      	movs	r0, #0
   29962:	bc70      	pop	{r4, r5, r6}
   29964:	4770      	bx	lr
   29966:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2996a:	4770      	bx	lr

0002996c <LoadAesKey>:
   2996c:	2800      	cmp	r0, #0
   2996e:	d047      	beq.n	29a00 <LoadAesKey+0x94>
   29970:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   29974:	2b00      	cmp	r3, #0
   29976:	d034      	beq.n	299e2 <LoadAesKey+0x76>
   29978:	2b03      	cmp	r3, #3
   2997a:	b510      	push	{r4, lr}
   2997c:	d013      	beq.n	299a6 <LoadAesKey+0x3a>
   2997e:	4822      	ldr	r0, [pc, #136]	; (29a08 <LoadAesKey+0x9c>)
   29980:	4c22      	ldr	r4, [pc, #136]	; (29a0c <LoadAesKey+0xa0>)
   29982:	6822      	ldr	r2, [r4, #0]
   29984:	4b22      	ldr	r3, [pc, #136]	; (29a10 <LoadAesKey+0xa4>)
   29986:	6812      	ldr	r2, [r2, #0]
   29988:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2998c:	6822      	ldr	r2, [r4, #0]
   2998e:	6852      	ldr	r2, [r2, #4]
   29990:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   29994:	6822      	ldr	r2, [r4, #0]
   29996:	6892      	ldr	r2, [r2, #8]
   29998:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2999c:	6822      	ldr	r2, [r4, #0]
   2999e:	68d2      	ldr	r2, [r2, #12]
   299a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   299a4:	bd10      	pop	{r4, pc}
   299a6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   299a8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   299aa:	4c18      	ldr	r4, [pc, #96]	; (29a0c <LoadAesKey+0xa0>)
   299ac:	f000 fba8 	bl	2a100 <kmu_validate_kdr_slot_and_size>
   299b0:	2800      	cmp	r0, #0
   299b2:	d1e6      	bne.n	29982 <LoadAesKey+0x16>
   299b4:	6822      	ldr	r2, [r4, #0]
   299b6:	4b16      	ldr	r3, [pc, #88]	; (29a10 <LoadAesKey+0xa4>)
   299b8:	6812      	ldr	r2, [r2, #0]
   299ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   299be:	6822      	ldr	r2, [r4, #0]
   299c0:	6852      	ldr	r2, [r2, #4]
   299c2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   299c6:	6822      	ldr	r2, [r4, #0]
   299c8:	6892      	ldr	r2, [r2, #8]
   299ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   299ce:	6822      	ldr	r2, [r4, #0]
   299d0:	68d2      	ldr	r2, [r2, #12]
   299d2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   299d6:	f000 fba1 	bl	2a11c <kmu_use_kdr_key>
   299da:	2800      	cmp	r0, #0
   299dc:	d1d1      	bne.n	29982 <LoadAesKey+0x16>
   299de:	2000      	movs	r0, #0
   299e0:	bd10      	pop	{r4, pc}
   299e2:	4b0b      	ldr	r3, [pc, #44]	; (29a10 <LoadAesKey+0xa4>)
   299e4:	6902      	ldr	r2, [r0, #16]
   299e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   299ea:	6942      	ldr	r2, [r0, #20]
   299ec:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   299f0:	6982      	ldr	r2, [r0, #24]
   299f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   299f6:	69c2      	ldr	r2, [r0, #28]
   299f8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   299fc:	2000      	movs	r0, #0
   299fe:	4770      	bx	lr
   29a00:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   29a04:	4770      	bx	lr
   29a06:	bf00      	nop
   29a08:	00f10009 	.word	0x00f10009
   29a0c:	200008e0 	.word	0x200008e0
   29a10:	5002b000 	.word	0x5002b000

00029a14 <InitAes.part.0>:
   29a14:	4a37      	ldr	r2, [pc, #220]	; (29af4 <InitAes.part.0+0xe0>)
   29a16:	b538      	push	{r3, r4, r5, lr}
   29a18:	4604      	mov	r4, r0
   29a1a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29a1e:	2b00      	cmp	r3, #0
   29a20:	d1fb      	bne.n	29a1a <InitAes.part.0+0x6>
   29a22:	4a34      	ldr	r2, [pc, #208]	; (29af4 <InitAes.part.0+0xe0>)
   29a24:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29a28:	2b00      	cmp	r3, #0
   29a2a:	d1fb      	bne.n	29a24 <InitAes.part.0+0x10>
   29a2c:	4a31      	ldr	r2, [pc, #196]	; (29af4 <InitAes.part.0+0xe0>)
   29a2e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   29a32:	2b00      	cmp	r3, #0
   29a34:	d1fb      	bne.n	29a2e <InitAes.part.0+0x1a>
   29a36:	4a2f      	ldr	r2, [pc, #188]	; (29af4 <InitAes.part.0+0xe0>)
   29a38:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   29a3c:	2b00      	cmp	r3, #0
   29a3e:	d1fb      	bne.n	29a38 <InitAes.part.0+0x24>
   29a40:	4a2c      	ldr	r2, [pc, #176]	; (29af4 <InitAes.part.0+0xe0>)
   29a42:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   29a46:	2b00      	cmp	r3, #0
   29a48:	d1fb      	bne.n	29a42 <InitAes.part.0+0x2e>
   29a4a:	4d2a      	ldr	r5, [pc, #168]	; (29af4 <InitAes.part.0+0xe0>)
   29a4c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   29a50:	2b00      	cmp	r3, #0
   29a52:	d1fb      	bne.n	29a4c <InitAes.part.0+0x38>
   29a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29a58:	f7fe fea2 	bl	287a0 <CC_HalClearInterruptBit>
   29a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29a5e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   29a62:	f023 0304 	bic.w	r3, r3, #4
   29a66:	2b03      	cmp	r3, #3
   29a68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   29a6a:	d039      	beq.n	29ae0 <InitAes.part.0+0xcc>
   29a6c:	2b01      	cmp	r3, #1
   29a6e:	bf0c      	ite	eq
   29a70:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   29a74:	f020 0020 	bicne.w	r0, r0, #32
   29a78:	f7fe fea0 	bl	287bc <CC_HalMaskInterrupt>
   29a7c:	4a1d      	ldr	r2, [pc, #116]	; (29af4 <InitAes.part.0+0xe0>)
   29a7e:	2301      	movs	r3, #1
   29a80:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   29a84:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29a88:	2b00      	cmp	r3, #0
   29a8a:	d1fb      	bne.n	29a84 <InitAes.part.0+0x70>
   29a8c:	4a19      	ldr	r2, [pc, #100]	; (29af4 <InitAes.part.0+0xe0>)
   29a8e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29a92:	2b00      	cmp	r3, #0
   29a94:	d1fb      	bne.n	29a8e <InitAes.part.0+0x7a>
   29a96:	4917      	ldr	r1, [pc, #92]	; (29af4 <InitAes.part.0+0xe0>)
   29a98:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   29a9c:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   29aa0:	2b00      	cmp	r3, #0
   29aa2:	d1fb      	bne.n	29a9c <InitAes.part.0+0x88>
   29aa4:	4a13      	ldr	r2, [pc, #76]	; (29af4 <InitAes.part.0+0xe0>)
   29aa6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29aaa:	2b00      	cmp	r3, #0
   29aac:	d1fb      	bne.n	29aa6 <InitAes.part.0+0x92>
   29aae:	6b62      	ldr	r2, [r4, #52]	; 0x34
   29ab0:	f022 0104 	bic.w	r1, r2, #4
   29ab4:	2903      	cmp	r1, #3
   29ab6:	bf18      	it	ne
   29ab8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   29aba:	490e      	ldr	r1, [pc, #56]	; (29af4 <InitAes.part.0+0xe0>)
   29abc:	ea4f 0282 	mov.w	r2, r2, lsl #2
   29ac0:	bf18      	it	ne
   29ac2:	f003 0301 	andne.w	r3, r3, #1
   29ac6:	f002 021c 	and.w	r2, r2, #28
   29aca:	431a      	orrs	r2, r3
   29acc:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   29ad0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29ad2:	2b07      	cmp	r3, #7
   29ad4:	bf04      	itt	eq
   29ad6:	2301      	moveq	r3, #1
   29ad8:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   29adc:	2000      	movs	r0, #0
   29ade:	bd38      	pop	{r3, r4, r5, pc}
   29ae0:	2b01      	cmp	r3, #1
   29ae2:	bf0c      	ite	eq
   29ae4:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   29ae8:	f020 0010 	bicne.w	r0, r0, #16
   29aec:	f7fe fe66 	bl	287bc <CC_HalMaskInterrupt>
   29af0:	e7c4      	b.n	29a7c <InitAes.part.0+0x68>
   29af2:	bf00      	nop
   29af4:	5002b000 	.word	0x5002b000

00029af8 <write_invalid_key>:
   29af8:	4a09      	ldr	r2, [pc, #36]	; (29b20 <write_invalid_key+0x28>)
   29afa:	4b0a      	ldr	r3, [pc, #40]	; (29b24 <write_invalid_key+0x2c>)
   29afc:	6811      	ldr	r1, [r2, #0]
   29afe:	6809      	ldr	r1, [r1, #0]
   29b00:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   29b04:	6811      	ldr	r1, [r2, #0]
   29b06:	6849      	ldr	r1, [r1, #4]
   29b08:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   29b0c:	6811      	ldr	r1, [r2, #0]
   29b0e:	6889      	ldr	r1, [r1, #8]
   29b10:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   29b14:	6812      	ldr	r2, [r2, #0]
   29b16:	68d2      	ldr	r2, [r2, #12]
   29b18:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29b1c:	4770      	bx	lr
   29b1e:	bf00      	nop
   29b20:	200008e0 	.word	0x200008e0
   29b24:	5002b000 	.word	0x5002b000

00029b28 <ProcessAesDrv>:
   29b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b2c:	b085      	sub	sp, #20
   29b2e:	2900      	cmp	r1, #0
   29b30:	f000 80ec 	beq.w	29d0c <ProcessAesDrv+0x1e4>
   29b34:	4690      	mov	r8, r2
   29b36:	2a00      	cmp	r2, #0
   29b38:	f000 80e8 	beq.w	29d0c <ProcessAesDrv+0x1e4>
   29b3c:	4605      	mov	r5, r0
   29b3e:	2800      	cmp	r0, #0
   29b40:	f000 8129 	beq.w	29d96 <ProcessAesDrv+0x26e>
   29b44:	4699      	mov	r9, r3
   29b46:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   29b48:	460e      	mov	r6, r1
   29b4a:	2b00      	cmp	r3, #0
   29b4c:	d152      	bne.n	29bf4 <ProcessAesDrv+0xcc>
   29b4e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   29b52:	d254      	bcs.n	29bfe <ProcessAesDrv+0xd6>
   29b54:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   29b58:	2b04      	cmp	r3, #4
   29b5a:	f000 80ff 	beq.w	29d5c <ProcessAesDrv+0x234>
   29b5e:	2700      	movs	r7, #0
   29b60:	48ad      	ldr	r0, [pc, #692]	; (29e18 <ProcessAesDrv+0x2f0>)
   29b62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29b66:	f7fe fec5 	bl	288f4 <CC_PalMutexLock>
   29b6a:	2800      	cmp	r0, #0
   29b6c:	f040 80d5 	bne.w	29d1a <ProcessAesDrv+0x1f2>
   29b70:	2000      	movs	r0, #0
   29b72:	f7fe feef 	bl	28954 <CC_PalPowerSaveModeSelect>
   29b76:	2800      	cmp	r0, #0
   29b78:	f040 80d8 	bne.w	29d2c <ProcessAesDrv+0x204>
   29b7c:	48a7      	ldr	r0, [pc, #668]	; (29e1c <ProcessAesDrv+0x2f4>)
   29b7e:	2301      	movs	r3, #1
   29b80:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   29b84:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   29b88:	2c00      	cmp	r4, #0
   29b8a:	d1fb      	bne.n	29b84 <ProcessAesDrv+0x5c>
   29b8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29b8e:	2b03      	cmp	r3, #3
   29b90:	dc3a      	bgt.n	29c08 <ProcessAesDrv+0xe0>
   29b92:	2b00      	cmp	r3, #0
   29b94:	da3b      	bge.n	29c0e <ProcessAesDrv+0xe6>
   29b96:	4ca2      	ldr	r4, [pc, #648]	; (29e20 <ProcessAesDrv+0x2f8>)
   29b98:	4aa0      	ldr	r2, [pc, #640]	; (29e1c <ProcessAesDrv+0x2f4>)
   29b9a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29b9e:	2b00      	cmp	r3, #0
   29ba0:	d1fb      	bne.n	29b9a <ProcessAesDrv+0x72>
   29ba2:	2f00      	cmp	r7, #0
   29ba4:	f040 80d1 	bne.w	29d4a <ProcessAesDrv+0x222>
   29ba8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29baa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29bac:	f023 0304 	bic.w	r3, r3, #4
   29bb0:	2b03      	cmp	r3, #3
   29bb2:	4b9a      	ldr	r3, [pc, #616]	; (29e1c <ProcessAesDrv+0x2f4>)
   29bb4:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   29bb8:	f000 809f 	beq.w	29cfa <ProcessAesDrv+0x1d2>
   29bbc:	2a01      	cmp	r2, #1
   29bbe:	bf0c      	ite	eq
   29bc0:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   29bc4:	f040 0020 	orrne.w	r0, r0, #32
   29bc8:	f7fe fdf8 	bl	287bc <CC_HalMaskInterrupt>
   29bcc:	4b93      	ldr	r3, [pc, #588]	; (29e1c <ProcessAesDrv+0x2f4>)
   29bce:	2200      	movs	r2, #0
   29bd0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   29bd4:	2001      	movs	r0, #1
   29bd6:	f7fe febd 	bl	28954 <CC_PalPowerSaveModeSelect>
   29bda:	2800      	cmp	r0, #0
   29bdc:	f040 80b1 	bne.w	29d42 <ProcessAesDrv+0x21a>
   29be0:	488d      	ldr	r0, [pc, #564]	; (29e18 <ProcessAesDrv+0x2f0>)
   29be2:	f7fe fe8f 	bl	28904 <CC_PalMutexUnlock>
   29be6:	2800      	cmp	r0, #0
   29be8:	f040 80a4 	bne.w	29d34 <ProcessAesDrv+0x20c>
   29bec:	4620      	mov	r0, r4
   29bee:	b005      	add	sp, #20
   29bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bf4:	2b01      	cmp	r3, #1
   29bf6:	d1ad      	bne.n	29b54 <ProcessAesDrv+0x2c>
   29bf8:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   29bfc:	d3aa      	bcc.n	29b54 <ProcessAesDrv+0x2c>
   29bfe:	4c89      	ldr	r4, [pc, #548]	; (29e24 <ProcessAesDrv+0x2fc>)
   29c00:	4620      	mov	r0, r4
   29c02:	b005      	add	sp, #20
   29c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c08:	3b06      	subs	r3, #6
   29c0a:	2b01      	cmp	r3, #1
   29c0c:	d8c3      	bhi.n	29b96 <ProcessAesDrv+0x6e>
   29c0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   29c10:	2b01      	cmp	r3, #1
   29c12:	f200 80be 	bhi.w	29d92 <ProcessAesDrv+0x26a>
   29c16:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29c18:	2b01      	cmp	r3, #1
   29c1a:	d87c      	bhi.n	29d16 <ProcessAesDrv+0x1ee>
   29c1c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29c1e:	2b01      	cmp	r3, #1
   29c20:	f200 80e8 	bhi.w	29df4 <ProcessAesDrv+0x2cc>
   29c24:	4628      	mov	r0, r5
   29c26:	f7ff fef5 	bl	29a14 <InitAes.part.0>
   29c2a:	4604      	mov	r4, r0
   29c2c:	2800      	cmp	r0, #0
   29c2e:	d1b3      	bne.n	29b98 <ProcessAesDrv+0x70>
   29c30:	4628      	mov	r0, r5
   29c32:	f7ff fe9b 	bl	2996c <LoadAesKey>
   29c36:	4604      	mov	r4, r0
   29c38:	2800      	cmp	r0, #0
   29c3a:	d1ad      	bne.n	29b98 <ProcessAesDrv+0x70>
   29c3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29c3e:	2b07      	cmp	r3, #7
   29c40:	d8a9      	bhi.n	29b96 <ProcessAesDrv+0x6e>
   29c42:	2201      	movs	r2, #1
   29c44:	409a      	lsls	r2, r3
   29c46:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   29c4a:	f040 80d5 	bne.w	29df8 <ProcessAesDrv+0x2d0>
   29c4e:	f012 0f44 	tst.w	r2, #68	; 0x44
   29c52:	f040 80ba 	bne.w	29dca <ProcessAesDrv+0x2a2>
   29c56:	07d2      	lsls	r2, r2, #31
   29c58:	d59d      	bpl.n	29b96 <ProcessAesDrv+0x6e>
   29c5a:	f023 0304 	bic.w	r3, r3, #4
   29c5e:	2b03      	cmp	r3, #3
   29c60:	6832      	ldr	r2, [r6, #0]
   29c62:	d00d      	beq.n	29c80 <ProcessAesDrv+0x158>
   29c64:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29c66:	f8d8 1000 	ldr.w	r1, [r8]
   29c6a:	2b01      	cmp	r3, #1
   29c6c:	4b6b      	ldr	r3, [pc, #428]	; (29e1c <ProcessAesDrv+0x2f4>)
   29c6e:	bf0b      	itete	eq
   29c70:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   29c74:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   29c78:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   29c7c:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   29c80:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29c82:	2b01      	cmp	r3, #1
   29c84:	4b65      	ldr	r3, [pc, #404]	; (29e1c <ProcessAesDrv+0x2f4>)
   29c86:	bf0b      	itete	eq
   29c88:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   29c8c:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   29c90:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   29c94:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   29c98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29c9a:	f023 0304 	bic.w	r3, r3, #4
   29c9e:	2b03      	cmp	r3, #3
   29ca0:	f000 80a2 	beq.w	29de8 <ProcessAesDrv+0x2c0>
   29ca4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29ca6:	2b01      	cmp	r3, #1
   29ca8:	bf14      	ite	ne
   29caa:	2020      	movne	r0, #32
   29cac:	2080      	moveq	r0, #128	; 0x80
   29cae:	f7fe fd8b 	bl	287c8 <CC_HalWaitInterrupt>
   29cb2:	4604      	mov	r4, r0
   29cb4:	2800      	cmp	r0, #0
   29cb6:	f47f af6f 	bne.w	29b98 <ProcessAesDrv+0x70>
   29cba:	4b58      	ldr	r3, [pc, #352]	; (29e1c <ProcessAesDrv+0x2f4>)
   29cbc:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   29cc0:	2c00      	cmp	r4, #0
   29cc2:	d1fb      	bne.n	29cbc <ProcessAesDrv+0x194>
   29cc4:	6b69      	ldr	r1, [r5, #52]	; 0x34
   29cc6:	2907      	cmp	r1, #7
   29cc8:	d814      	bhi.n	29cf4 <ProcessAesDrv+0x1cc>
   29cca:	2201      	movs	r2, #1
   29ccc:	408a      	lsls	r2, r1
   29cce:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   29cd2:	f040 80bb 	bne.w	29e4c <ProcessAesDrv+0x324>
   29cd6:	f012 0f44 	tst.w	r2, #68	; 0x44
   29cda:	d00b      	beq.n	29cf4 <ProcessAesDrv+0x1cc>
   29cdc:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   29ce0:	602a      	str	r2, [r5, #0]
   29ce2:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   29ce6:	606a      	str	r2, [r5, #4]
   29ce8:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   29cec:	60aa      	str	r2, [r5, #8]
   29cee:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   29cf2:	60eb      	str	r3, [r5, #12]
   29cf4:	2301      	movs	r3, #1
   29cf6:	65ab      	str	r3, [r5, #88]	; 0x58
   29cf8:	e74e      	b.n	29b98 <ProcessAesDrv+0x70>
   29cfa:	2a01      	cmp	r2, #1
   29cfc:	bf0c      	ite	eq
   29cfe:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   29d02:	f040 0010 	orrne.w	r0, r0, #16
   29d06:	f7fe fd59 	bl	287bc <CC_HalMaskInterrupt>
   29d0a:	e75f      	b.n	29bcc <ProcessAesDrv+0xa4>
   29d0c:	4c46      	ldr	r4, [pc, #280]	; (29e28 <ProcessAesDrv+0x300>)
   29d0e:	4620      	mov	r0, r4
   29d10:	b005      	add	sp, #20
   29d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d16:	4c45      	ldr	r4, [pc, #276]	; (29e2c <ProcessAesDrv+0x304>)
   29d18:	e73e      	b.n	29b98 <ProcessAesDrv+0x70>
   29d1a:	4845      	ldr	r0, [pc, #276]	; (29e30 <ProcessAesDrv+0x308>)
   29d1c:	f7fd fede 	bl	27adc <CC_PalAbort>
   29d20:	2000      	movs	r0, #0
   29d22:	f7fe fe17 	bl	28954 <CC_PalPowerSaveModeSelect>
   29d26:	2800      	cmp	r0, #0
   29d28:	f43f af28 	beq.w	29b7c <ProcessAesDrv+0x54>
   29d2c:	4841      	ldr	r0, [pc, #260]	; (29e34 <ProcessAesDrv+0x30c>)
   29d2e:	f7fd fed5 	bl	27adc <CC_PalAbort>
   29d32:	e723      	b.n	29b7c <ProcessAesDrv+0x54>
   29d34:	4840      	ldr	r0, [pc, #256]	; (29e38 <ProcessAesDrv+0x310>)
   29d36:	f7fd fed1 	bl	27adc <CC_PalAbort>
   29d3a:	4620      	mov	r0, r4
   29d3c:	b005      	add	sp, #20
   29d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d42:	483e      	ldr	r0, [pc, #248]	; (29e3c <ProcessAesDrv+0x314>)
   29d44:	f7fd feca 	bl	27adc <CC_PalAbort>
   29d48:	e74a      	b.n	29be0 <ProcessAesDrv+0xb8>
   29d4a:	2304      	movs	r3, #4
   29d4c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   29d50:	2120      	movs	r1, #32
   29d52:	f105 0010 	add.w	r0, r5, #16
   29d56:	f7fe fdb5 	bl	288c4 <CC_PalMemSetZeroPlat>
   29d5a:	e725      	b.n	29ba8 <ProcessAesDrv+0x80>
   29d5c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   29d5e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   29d60:	f000 f9c0 	bl	2a0e4 <kmu_validate_slot_and_size>
   29d64:	b998      	cbnz	r0, 29d8e <ProcessAesDrv+0x266>
   29d66:	4f36      	ldr	r7, [pc, #216]	; (29e40 <ProcessAesDrv+0x318>)
   29d68:	4c2c      	ldr	r4, [pc, #176]	; (29e1c <ProcessAesDrv+0x2f4>)
   29d6a:	683b      	ldr	r3, [r7, #0]
   29d6c:	681b      	ldr	r3, [r3, #0]
   29d6e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   29d72:	683b      	ldr	r3, [r7, #0]
   29d74:	685b      	ldr	r3, [r3, #4]
   29d76:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   29d7a:	683b      	ldr	r3, [r7, #0]
   29d7c:	689b      	ldr	r3, [r3, #8]
   29d7e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   29d82:	683b      	ldr	r3, [r7, #0]
   29d84:	68db      	ldr	r3, [r3, #12]
   29d86:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   29d8a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   29d8c:	b131      	cbz	r1, 29d9c <ProcessAesDrv+0x274>
   29d8e:	2701      	movs	r7, #1
   29d90:	e6e6      	b.n	29b60 <ProcessAesDrv+0x38>
   29d92:	4c2c      	ldr	r4, [pc, #176]	; (29e44 <ProcessAesDrv+0x31c>)
   29d94:	e700      	b.n	29b98 <ProcessAesDrv+0x70>
   29d96:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   29d9a:	e727      	b.n	29bec <ProcessAesDrv+0xc4>
   29d9c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   29d9e:	9301      	str	r3, [sp, #4]
   29da0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   29da2:	9300      	str	r3, [sp, #0]
   29da4:	f105 0a10 	add.w	sl, r5, #16
   29da8:	f04f 0b10 	mov.w	fp, #16
   29dac:	f8cd a008 	str.w	sl, [sp, #8]
   29db0:	f8cd b00c 	str.w	fp, [sp, #12]
   29db4:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   29db8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   29dba:	f000 f9b9 	bl	2a130 <kmu_derive_cmac>
   29dbe:	2800      	cmp	r0, #0
   29dc0:	d151      	bne.n	29e66 <ProcessAesDrv+0x33e>
   29dc2:	2300      	movs	r3, #0
   29dc4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   29dc8:	e7e1      	b.n	29d8e <ProcessAesDrv+0x266>
   29dca:	4b14      	ldr	r3, [pc, #80]	; (29e1c <ProcessAesDrv+0x2f4>)
   29dcc:	682a      	ldr	r2, [r5, #0]
   29dce:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   29dd2:	686a      	ldr	r2, [r5, #4]
   29dd4:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   29dd8:	68aa      	ldr	r2, [r5, #8]
   29dda:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   29dde:	68ea      	ldr	r2, [r5, #12]
   29de0:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   29de4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29de6:	e738      	b.n	29c5a <ProcessAesDrv+0x132>
   29de8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29dea:	2b01      	cmp	r3, #1
   29dec:	bf14      	ite	ne
   29dee:	2010      	movne	r0, #16
   29df0:	2040      	moveq	r0, #64	; 0x40
   29df2:	e75c      	b.n	29cae <ProcessAesDrv+0x186>
   29df4:	4c14      	ldr	r4, [pc, #80]	; (29e48 <ProcessAesDrv+0x320>)
   29df6:	e6cf      	b.n	29b98 <ProcessAesDrv+0x70>
   29df8:	4b08      	ldr	r3, [pc, #32]	; (29e1c <ProcessAesDrv+0x2f4>)
   29dfa:	682a      	ldr	r2, [r5, #0]
   29dfc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   29e00:	686a      	ldr	r2, [r5, #4]
   29e02:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   29e06:	68aa      	ldr	r2, [r5, #8]
   29e08:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   29e0c:	68ea      	ldr	r2, [r5, #12]
   29e0e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   29e12:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29e14:	e721      	b.n	29c5a <ProcessAesDrv+0x132>
   29e16:	bf00      	nop
   29e18:	200008f4 	.word	0x200008f4
   29e1c:	5002b000 	.word	0x5002b000
   29e20:	00f10001 	.word	0x00f10001
   29e24:	00f10005 	.word	0x00f10005
   29e28:	00f1000b 	.word	0x00f1000b
   29e2c:	00f10003 	.word	0x00f10003
   29e30:	000353a8 	.word	0x000353a8
   29e34:	000353c0 	.word	0x000353c0
   29e38:	00035400 	.word	0x00035400
   29e3c:	000353e0 	.word	0x000353e0
   29e40:	200008e0 	.word	0x200008e0
   29e44:	00f10002 	.word	0x00f10002
   29e48:	00f10004 	.word	0x00f10004
   29e4c:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   29e50:	602a      	str	r2, [r5, #0]
   29e52:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   29e56:	606a      	str	r2, [r5, #4]
   29e58:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   29e5c:	60aa      	str	r2, [r5, #8]
   29e5e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   29e62:	60eb      	str	r3, [r5, #12]
   29e64:	e746      	b.n	29cf4 <ProcessAesDrv+0x1cc>
   29e66:	683b      	ldr	r3, [r7, #0]
   29e68:	681b      	ldr	r3, [r3, #0]
   29e6a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   29e6e:	683b      	ldr	r3, [r7, #0]
   29e70:	685b      	ldr	r3, [r3, #4]
   29e72:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   29e76:	683b      	ldr	r3, [r7, #0]
   29e78:	689b      	ldr	r3, [r3, #8]
   29e7a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   29e7e:	683b      	ldr	r3, [r7, #0]
   29e80:	68db      	ldr	r3, [r3, #12]
   29e82:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   29e86:	4659      	mov	r1, fp
   29e88:	4650      	mov	r0, sl
   29e8a:	f7fe fd1b 	bl	288c4 <CC_PalMemSetZeroPlat>
   29e8e:	e798      	b.n	29dc2 <ProcessAesDrv+0x29a>

00029e90 <FinishAesDrv>:
   29e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e94:	b309      	cbz	r1, 29eda <FinishAesDrv+0x4a>
   29e96:	b302      	cbz	r2, 29eda <FinishAesDrv+0x4a>
   29e98:	4604      	mov	r4, r0
   29e9a:	2800      	cmp	r0, #0
   29e9c:	f000 80af 	beq.w	29ffe <FinishAesDrv+0x16e>
   29ea0:	461d      	mov	r5, r3
   29ea2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   29ea4:	2b07      	cmp	r3, #7
   29ea6:	460e      	mov	r6, r1
   29ea8:	d01b      	beq.n	29ee2 <FinishAesDrv+0x52>
   29eaa:	b95d      	cbnz	r5, 29ec4 <FinishAesDrv+0x34>
   29eac:	2b03      	cmp	r3, #3
   29eae:	d110      	bne.n	29ed2 <FinishAesDrv+0x42>
   29eb0:	6d83      	ldr	r3, [r0, #88]	; 0x58
   29eb2:	b973      	cbnz	r3, 29ed2 <FinishAesDrv+0x42>
   29eb4:	f100 0364 	add.w	r3, r0, #100	; 0x64
   29eb8:	6645      	str	r5, [r0, #100]	; 0x64
   29eba:	6685      	str	r5, [r0, #104]	; 0x68
   29ebc:	66c5      	str	r5, [r0, #108]	; 0x6c
   29ebe:	6705      	str	r5, [r0, #112]	; 0x70
   29ec0:	600b      	str	r3, [r1, #0]
   29ec2:	2510      	movs	r5, #16
   29ec4:	462b      	mov	r3, r5
   29ec6:	4631      	mov	r1, r6
   29ec8:	4620      	mov	r0, r4
   29eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29ece:	f7ff be2b 	b.w	29b28 <ProcessAesDrv>
   29ed2:	462f      	mov	r7, r5
   29ed4:	4638      	mov	r0, r7
   29ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29eda:	4f76      	ldr	r7, [pc, #472]	; (2a0b4 <FinishAesDrv+0x224>)
   29edc:	4638      	mov	r0, r7
   29ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29ee2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   29ee4:	2b00      	cmp	r3, #0
   29ee6:	f040 808d 	bne.w	2a004 <FinishAesDrv+0x174>
   29eea:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   29eee:	f080 8090 	bcs.w	2a012 <FinishAesDrv+0x182>
   29ef2:	b91d      	cbnz	r5, 29efc <FinishAesDrv+0x6c>
   29ef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   29ef6:	2b00      	cmp	r3, #0
   29ef8:	f040 808b 	bne.w	2a012 <FinishAesDrv+0x182>
   29efc:	486e      	ldr	r0, [pc, #440]	; (2a0b8 <FinishAesDrv+0x228>)
   29efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29f02:	f7fe fcf7 	bl	288f4 <CC_PalMutexLock>
   29f06:	2800      	cmp	r0, #0
   29f08:	f040 808f 	bne.w	2a02a <FinishAesDrv+0x19a>
   29f0c:	2000      	movs	r0, #0
   29f0e:	f7fe fd21 	bl	28954 <CC_PalPowerSaveModeSelect>
   29f12:	2800      	cmp	r0, #0
   29f14:	f040 8085 	bne.w	2a022 <FinishAesDrv+0x192>
   29f18:	4a68      	ldr	r2, [pc, #416]	; (2a0bc <FinishAesDrv+0x22c>)
   29f1a:	2301      	movs	r3, #1
   29f1c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   29f20:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29f24:	2b00      	cmp	r3, #0
   29f26:	d1fb      	bne.n	29f20 <FinishAesDrv+0x90>
   29f28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29f2a:	2b03      	cmp	r3, #3
   29f2c:	dd4f      	ble.n	29fce <FinishAesDrv+0x13e>
   29f2e:	3b06      	subs	r3, #6
   29f30:	2b01      	cmp	r3, #1
   29f32:	d84e      	bhi.n	29fd2 <FinishAesDrv+0x142>
   29f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29f36:	2b01      	cmp	r3, #1
   29f38:	d86d      	bhi.n	2a016 <FinishAesDrv+0x186>
   29f3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   29f3c:	2b01      	cmp	r3, #1
   29f3e:	d878      	bhi.n	2a032 <FinishAesDrv+0x1a2>
   29f40:	6e23      	ldr	r3, [r4, #96]	; 0x60
   29f42:	2b01      	cmp	r3, #1
   29f44:	d877      	bhi.n	2a036 <FinishAesDrv+0x1a6>
   29f46:	4620      	mov	r0, r4
   29f48:	f7ff fd64 	bl	29a14 <InitAes.part.0>
   29f4c:	4607      	mov	r7, r0
   29f4e:	2800      	cmp	r0, #0
   29f50:	d140      	bne.n	29fd4 <FinishAesDrv+0x144>
   29f52:	4620      	mov	r0, r4
   29f54:	f7ff fd0a 	bl	2996c <LoadAesKey>
   29f58:	4607      	mov	r7, r0
   29f5a:	2800      	cmp	r0, #0
   29f5c:	d13a      	bne.n	29fd4 <FinishAesDrv+0x144>
   29f5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   29f60:	2a07      	cmp	r2, #7
   29f62:	d836      	bhi.n	29fd2 <FinishAesDrv+0x142>
   29f64:	2301      	movs	r3, #1
   29f66:	4093      	lsls	r3, r2
   29f68:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   29f6c:	f040 8081 	bne.w	2a072 <FinishAesDrv+0x1e2>
   29f70:	f013 0f44 	tst.w	r3, #68	; 0x44
   29f74:	d16f      	bne.n	2a056 <FinishAesDrv+0x1c6>
   29f76:	07db      	lsls	r3, r3, #31
   29f78:	d52b      	bpl.n	29fd2 <FinishAesDrv+0x142>
   29f7a:	4b50      	ldr	r3, [pc, #320]	; (2a0bc <FinishAesDrv+0x22c>)
   29f7c:	2201      	movs	r2, #1
   29f7e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   29f82:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   29f86:	6831      	ldr	r1, [r6, #0]
   29f88:	2d00      	cmp	r5, #0
   29f8a:	d156      	bne.n	2a03a <FinishAesDrv+0x1aa>
   29f8c:	6da1      	ldr	r1, [r4, #88]	; 0x58
   29f8e:	b909      	cbnz	r1, 29f94 <FinishAesDrv+0x104>
   29f90:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   29f94:	4b49      	ldr	r3, [pc, #292]	; (2a0bc <FinishAesDrv+0x22c>)
   29f96:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   29f9a:	2f00      	cmp	r7, #0
   29f9c:	d1fb      	bne.n	29f96 <FinishAesDrv+0x106>
   29f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29fa0:	2907      	cmp	r1, #7
   29fa2:	d817      	bhi.n	29fd4 <FinishAesDrv+0x144>
   29fa4:	2201      	movs	r2, #1
   29fa6:	408a      	lsls	r2, r1
   29fa8:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   29fac:	d16f      	bne.n	2a08e <FinishAesDrv+0x1fe>
   29fae:	f012 0f44 	tst.w	r2, #68	; 0x44
   29fb2:	d00f      	beq.n	29fd4 <FinishAesDrv+0x144>
   29fb4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   29fb8:	6022      	str	r2, [r4, #0]
   29fba:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   29fbe:	6062      	str	r2, [r4, #4]
   29fc0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   29fc4:	60a2      	str	r2, [r4, #8]
   29fc6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   29fca:	60e3      	str	r3, [r4, #12]
   29fcc:	e002      	b.n	29fd4 <FinishAesDrv+0x144>
   29fce:	2b00      	cmp	r3, #0
   29fd0:	dab0      	bge.n	29f34 <FinishAesDrv+0xa4>
   29fd2:	4f3b      	ldr	r7, [pc, #236]	; (2a0c0 <FinishAesDrv+0x230>)
   29fd4:	4a39      	ldr	r2, [pc, #228]	; (2a0bc <FinishAesDrv+0x22c>)
   29fd6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29fda:	2b00      	cmp	r3, #0
   29fdc:	d1fb      	bne.n	29fd6 <FinishAesDrv+0x146>
   29fde:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   29fe2:	2001      	movs	r0, #1
   29fe4:	f7fe fcb6 	bl	28954 <CC_PalPowerSaveModeSelect>
   29fe8:	b9b8      	cbnz	r0, 2a01a <FinishAesDrv+0x18a>
   29fea:	4833      	ldr	r0, [pc, #204]	; (2a0b8 <FinishAesDrv+0x228>)
   29fec:	f7fe fc8a 	bl	28904 <CC_PalMutexUnlock>
   29ff0:	2800      	cmp	r0, #0
   29ff2:	f43f af6f 	beq.w	29ed4 <FinishAesDrv+0x44>
   29ff6:	4833      	ldr	r0, [pc, #204]	; (2a0c4 <FinishAesDrv+0x234>)
   29ff8:	f7fd fd70 	bl	27adc <CC_PalAbort>
   29ffc:	e76a      	b.n	29ed4 <FinishAesDrv+0x44>
   29ffe:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2a002:	e767      	b.n	29ed4 <FinishAesDrv+0x44>
   2a004:	2b01      	cmp	r3, #1
   2a006:	f47f af74 	bne.w	29ef2 <FinishAesDrv+0x62>
   2a00a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2a00e:	f4ff af70 	bcc.w	29ef2 <FinishAesDrv+0x62>
   2a012:	4f2d      	ldr	r7, [pc, #180]	; (2a0c8 <FinishAesDrv+0x238>)
   2a014:	e75e      	b.n	29ed4 <FinishAesDrv+0x44>
   2a016:	4f2d      	ldr	r7, [pc, #180]	; (2a0cc <FinishAesDrv+0x23c>)
   2a018:	e7dc      	b.n	29fd4 <FinishAesDrv+0x144>
   2a01a:	482d      	ldr	r0, [pc, #180]	; (2a0d0 <FinishAesDrv+0x240>)
   2a01c:	f7fd fd5e 	bl	27adc <CC_PalAbort>
   2a020:	e7e3      	b.n	29fea <FinishAesDrv+0x15a>
   2a022:	482c      	ldr	r0, [pc, #176]	; (2a0d4 <FinishAesDrv+0x244>)
   2a024:	f7fd fd5a 	bl	27adc <CC_PalAbort>
   2a028:	e776      	b.n	29f18 <FinishAesDrv+0x88>
   2a02a:	482b      	ldr	r0, [pc, #172]	; (2a0d8 <FinishAesDrv+0x248>)
   2a02c:	f7fd fd56 	bl	27adc <CC_PalAbort>
   2a030:	e76c      	b.n	29f0c <FinishAesDrv+0x7c>
   2a032:	4f2a      	ldr	r7, [pc, #168]	; (2a0dc <FinishAesDrv+0x24c>)
   2a034:	e7ce      	b.n	29fd4 <FinishAesDrv+0x144>
   2a036:	4f2a      	ldr	r7, [pc, #168]	; (2a0e0 <FinishAesDrv+0x250>)
   2a038:	e7cc      	b.n	29fd4 <FinishAesDrv+0x144>
   2a03a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2a03c:	2a01      	cmp	r2, #1
   2a03e:	d033      	beq.n	2a0a8 <FinishAesDrv+0x218>
   2a040:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   2a044:	2010      	movs	r0, #16
   2a046:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2a04a:	f7fe fbbd 	bl	287c8 <CC_HalWaitInterrupt>
   2a04e:	4607      	mov	r7, r0
   2a050:	2800      	cmp	r0, #0
   2a052:	d09f      	beq.n	29f94 <FinishAesDrv+0x104>
   2a054:	e7be      	b.n	29fd4 <FinishAesDrv+0x144>
   2a056:	4b19      	ldr	r3, [pc, #100]	; (2a0bc <FinishAesDrv+0x22c>)
   2a058:	6822      	ldr	r2, [r4, #0]
   2a05a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2a05e:	6862      	ldr	r2, [r4, #4]
   2a060:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2a064:	68a2      	ldr	r2, [r4, #8]
   2a066:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2a06a:	68e2      	ldr	r2, [r4, #12]
   2a06c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2a070:	e783      	b.n	29f7a <FinishAesDrv+0xea>
   2a072:	4b12      	ldr	r3, [pc, #72]	; (2a0bc <FinishAesDrv+0x22c>)
   2a074:	6822      	ldr	r2, [r4, #0]
   2a076:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2a07a:	6862      	ldr	r2, [r4, #4]
   2a07c:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2a080:	68a2      	ldr	r2, [r4, #8]
   2a082:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   2a086:	68e2      	ldr	r2, [r4, #12]
   2a088:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2a08c:	e775      	b.n	29f7a <FinishAesDrv+0xea>
   2a08e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2a092:	6022      	str	r2, [r4, #0]
   2a094:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2a098:	6062      	str	r2, [r4, #4]
   2a09a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   2a09e:	60a2      	str	r2, [r4, #8]
   2a0a0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   2a0a4:	60e3      	str	r3, [r4, #12]
   2a0a6:	e795      	b.n	29fd4 <FinishAesDrv+0x144>
   2a0a8:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   2a0ac:	2040      	movs	r0, #64	; 0x40
   2a0ae:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   2a0b2:	e7ca      	b.n	2a04a <FinishAesDrv+0x1ba>
   2a0b4:	00f1000b 	.word	0x00f1000b
   2a0b8:	200008f4 	.word	0x200008f4
   2a0bc:	5002b000 	.word	0x5002b000
   2a0c0:	00f10001 	.word	0x00f10001
   2a0c4:	00035400 	.word	0x00035400
   2a0c8:	00f10005 	.word	0x00f10005
   2a0cc:	00f10002 	.word	0x00f10002
   2a0d0:	000353e0 	.word	0x000353e0
   2a0d4:	000353c0 	.word	0x000353c0
   2a0d8:	000353a8 	.word	0x000353a8
   2a0dc:	00f10003 	.word	0x00f10003
   2a0e0:	00f10004 	.word	0x00f10004

0002a0e4 <kmu_validate_slot_and_size>:
   2a0e4:	b929      	cbnz	r1, 2a0f2 <kmu_validate_slot_and_size+0xe>
   2a0e6:	4b04      	ldr	r3, [pc, #16]	; (2a0f8 <kmu_validate_slot_and_size+0x14>)
   2a0e8:	2800      	cmp	r0, #0
   2a0ea:	bf14      	ite	ne
   2a0ec:	4618      	movne	r0, r3
   2a0ee:	2000      	moveq	r0, #0
   2a0f0:	4770      	bx	lr
   2a0f2:	4802      	ldr	r0, [pc, #8]	; (2a0fc <kmu_validate_slot_and_size+0x18>)
   2a0f4:	4770      	bx	lr
   2a0f6:	bf00      	nop
   2a0f8:	00f70001 	.word	0x00f70001
   2a0fc:	00f70003 	.word	0x00f70003

0002a100 <kmu_validate_kdr_slot_and_size>:
   2a100:	b929      	cbnz	r1, 2a10e <kmu_validate_kdr_slot_and_size+0xe>
   2a102:	4b04      	ldr	r3, [pc, #16]	; (2a114 <kmu_validate_kdr_slot_and_size+0x14>)
   2a104:	2800      	cmp	r0, #0
   2a106:	bf14      	ite	ne
   2a108:	4618      	movne	r0, r3
   2a10a:	2000      	moveq	r0, #0
   2a10c:	4770      	bx	lr
   2a10e:	4802      	ldr	r0, [pc, #8]	; (2a118 <kmu_validate_kdr_slot_and_size+0x18>)
   2a110:	4770      	bx	lr
   2a112:	bf00      	nop
   2a114:	00f70001 	.word	0x00f70001
   2a118:	00f70003 	.word	0x00f70003

0002a11c <kmu_use_kdr_key>:
   2a11c:	4b03      	ldr	r3, [pc, #12]	; (2a12c <kmu_use_kdr_key+0x10>)
   2a11e:	2000      	movs	r0, #0
   2a120:	2201      	movs	r2, #1
   2a122:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   2a126:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   2a12a:	4770      	bx	lr
   2a12c:	5002b000 	.word	0x5002b000

0002a130 <kmu_derive_cmac>:
   2a130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a134:	b0cc      	sub	sp, #304	; 0x130
   2a136:	2400      	movs	r4, #0
   2a138:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   2a13a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2a13e:	4682      	mov	sl, r0
   2a140:	4689      	mov	r9, r1
   2a142:	4616      	mov	r6, r2
   2a144:	4621      	mov	r1, r4
   2a146:	2274      	movs	r2, #116	; 0x74
   2a148:	a80e      	add	r0, sp, #56	; 0x38
   2a14a:	461f      	mov	r7, r3
   2a14c:	f002 fb7d 	bl	2c84a <memset>
   2a150:	2280      	movs	r2, #128	; 0x80
   2a152:	4621      	mov	r1, r4
   2a154:	a82c      	add	r0, sp, #176	; 0xb0
   2a156:	942b      	str	r4, [sp, #172]	; 0xac
   2a158:	f002 fb77 	bl	2c84a <memset>
   2a15c:	2384      	movs	r3, #132	; 0x84
   2a15e:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2a162:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2a166:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2a16a:	9305      	str	r3, [sp, #20]
   2a16c:	d863      	bhi.n	2a236 <kmu_derive_cmac+0x106>
   2a16e:	f7ff fcc3 	bl	29af8 <write_invalid_key>
   2a172:	ab05      	add	r3, sp, #20
   2a174:	4630      	mov	r0, r6
   2a176:	ae2b      	add	r6, sp, #172	; 0xac
   2a178:	9301      	str	r3, [sp, #4]
   2a17a:	9502      	str	r5, [sp, #8]
   2a17c:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   2a180:	4639      	mov	r1, r7
   2a182:	9600      	str	r6, [sp, #0]
   2a184:	f000 f862 	bl	2a24c <UtilCmacBuildDataForDerivation>
   2a188:	2800      	cmp	r0, #0
   2a18a:	d14f      	bne.n	2a22c <kmu_derive_cmac+0xfc>
   2a18c:	2303      	movs	r3, #3
   2a18e:	f88d 3013 	strb.w	r3, [sp, #19]
   2a192:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2a196:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2a19a:	2307      	movs	r3, #7
   2a19c:	2200      	movs	r2, #0
   2a19e:	901c      	str	r0, [sp, #112]	; 0x70
   2a1a0:	2110      	movs	r1, #16
   2a1a2:	a80e      	add	r0, sp, #56	; 0x38
   2a1a4:	931b      	str	r3, [sp, #108]	; 0x6c
   2a1a6:	2401      	movs	r4, #1
   2a1a8:	2301      	movs	r3, #1
   2a1aa:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2a1ae:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   2a1b2:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   2a1b6:	9426      	str	r4, [sp, #152]	; 0x98
   2a1b8:	f10d 0920 	add.w	r9, sp, #32
   2a1bc:	f7fe fb82 	bl	288c4 <CC_PalMemSetZeroPlat>
   2a1c0:	2210      	movs	r2, #16
   2a1c2:	9200      	str	r2, [sp, #0]
   2a1c4:	9905      	ldr	r1, [sp, #20]
   2a1c6:	f8cd 9004 	str.w	r9, [sp, #4]
   2a1ca:	ab0a      	add	r3, sp, #40	; 0x28
   2a1cc:	4630      	mov	r0, r6
   2a1ce:	aa06      	add	r2, sp, #24
   2a1d0:	f7ff fa22 	bl	29618 <SetDataBuffersInfo>
   2a1d4:	4607      	mov	r7, r0
   2a1d6:	b170      	cbz	r0, 2a1f6 <kmu_derive_cmac+0xc6>
   2a1d8:	e01d      	b.n	2a216 <kmu_derive_cmac+0xe6>
   2a1da:	a90e      	add	r1, sp, #56	; 0x38
   2a1dc:	eb08 0007 	add.w	r0, r8, r7
   2a1e0:	f7fe fb6c 	bl	288bc <CC_PalMemCopyPlat>
   2a1e4:	2110      	movs	r1, #16
   2a1e6:	a80e      	add	r0, sp, #56	; 0x38
   2a1e8:	f7fe fb6c 	bl	288c4 <CC_PalMemSetZeroPlat>
   2a1ec:	3401      	adds	r4, #1
   2a1ee:	1bad      	subs	r5, r5, r6
   2a1f0:	4437      	add	r7, r6
   2a1f2:	b2e4      	uxtb	r4, r4
   2a1f4:	d024      	beq.n	2a240 <kmu_derive_cmac+0x110>
   2a1f6:	2d10      	cmp	r5, #16
   2a1f8:	464a      	mov	r2, r9
   2a1fa:	9b05      	ldr	r3, [sp, #20]
   2a1fc:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2a200:	a906      	add	r1, sp, #24
   2a202:	a80e      	add	r0, sp, #56	; 0x38
   2a204:	462e      	mov	r6, r5
   2a206:	bf28      	it	cs
   2a208:	2610      	movcs	r6, #16
   2a20a:	f7ff fe41 	bl	29e90 <FinishAesDrv>
   2a20e:	4632      	mov	r2, r6
   2a210:	2800      	cmp	r0, #0
   2a212:	d0e2      	beq.n	2a1da <kmu_derive_cmac+0xaa>
   2a214:	4607      	mov	r7, r0
   2a216:	a80e      	add	r0, sp, #56	; 0x38
   2a218:	2274      	movs	r2, #116	; 0x74
   2a21a:	2100      	movs	r1, #0
   2a21c:	f7fe fb50 	bl	288c0 <CC_PalMemSetPlat>
   2a220:	f7ff fc6a 	bl	29af8 <write_invalid_key>
   2a224:	4638      	mov	r0, r7
   2a226:	b04c      	add	sp, #304	; 0x130
   2a228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a22c:	4f05      	ldr	r7, [pc, #20]	; (2a244 <kmu_derive_cmac+0x114>)
   2a22e:	4638      	mov	r0, r7
   2a230:	b04c      	add	sp, #304	; 0x130
   2a232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a236:	4f04      	ldr	r7, [pc, #16]	; (2a248 <kmu_derive_cmac+0x118>)
   2a238:	4638      	mov	r0, r7
   2a23a:	b04c      	add	sp, #304	; 0x130
   2a23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a240:	462f      	mov	r7, r5
   2a242:	e7e8      	b.n	2a216 <kmu_derive_cmac+0xe6>
   2a244:	00f1000e 	.word	0x00f1000e
   2a248:	00f1000f 	.word	0x00f1000f

0002a24c <UtilCmacBuildDataForDerivation>:
   2a24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a250:	b082      	sub	sp, #8
   2a252:	461e      	mov	r6, r3
   2a254:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2a256:	2300      	movs	r3, #0
   2a258:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2a25c:	9301      	str	r3, [sp, #4]
   2a25e:	d83e      	bhi.n	2a2de <UtilCmacBuildDataForDerivation+0x92>
   2a260:	00ed      	lsls	r5, r5, #3
   2a262:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   2a266:	4617      	mov	r7, r2
   2a268:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   2a26c:	bf34      	ite	cc
   2a26e:	2303      	movcc	r3, #3
   2a270:	2304      	movcs	r3, #4
   2a272:	2a3f      	cmp	r2, #63	; 0x3f
   2a274:	460c      	mov	r4, r1
   2a276:	9300      	str	r3, [sp, #0]
   2a278:	d831      	bhi.n	2a2de <UtilCmacBuildDataForDerivation+0x92>
   2a27a:	b380      	cbz	r0, 2a2de <UtilCmacBuildDataForDerivation+0x92>
   2a27c:	bb66      	cbnz	r6, 2a2d8 <UtilCmacBuildDataForDerivation+0x8c>
   2a27e:	9a08      	ldr	r2, [sp, #32]
   2a280:	b36a      	cbz	r2, 2a2de <UtilCmacBuildDataForDerivation+0x92>
   2a282:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a284:	6811      	ldr	r1, [r2, #0]
   2a286:	b351      	cbz	r1, 2a2de <UtilCmacBuildDataForDerivation+0x92>
   2a288:	19a2      	adds	r2, r4, r6
   2a28a:	4413      	add	r3, r2
   2a28c:	4299      	cmp	r1, r3
   2a28e:	d326      	bcc.n	2a2de <UtilCmacBuildDataForDerivation+0x92>
   2a290:	9b08      	ldr	r3, [sp, #32]
   2a292:	4601      	mov	r1, r0
   2a294:	4622      	mov	r2, r4
   2a296:	1c58      	adds	r0, r3, #1
   2a298:	f7fe fb10 	bl	288bc <CC_PalMemCopyPlat>
   2a29c:	9b08      	ldr	r3, [sp, #32]
   2a29e:	f104 0802 	add.w	r8, r4, #2
   2a2a2:	441c      	add	r4, r3
   2a2a4:	2300      	movs	r3, #0
   2a2a6:	7063      	strb	r3, [r4, #1]
   2a2a8:	bb26      	cbnz	r6, 2a2f4 <UtilCmacBuildDataForDerivation+0xa8>
   2a2aa:	9b08      	ldr	r3, [sp, #32]
   2a2ac:	9500      	str	r5, [sp, #0]
   2a2ae:	2dff      	cmp	r5, #255	; 0xff
   2a2b0:	eb03 0008 	add.w	r0, r3, r8
   2a2b4:	d917      	bls.n	2a2e6 <UtilCmacBuildDataForDerivation+0x9a>
   2a2b6:	022b      	lsls	r3, r5, #8
   2a2b8:	b29b      	uxth	r3, r3
   2a2ba:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   2a2be:	2202      	movs	r2, #2
   2a2c0:	a901      	add	r1, sp, #4
   2a2c2:	9301      	str	r3, [sp, #4]
   2a2c4:	f7fe fafa 	bl	288bc <CC_PalMemCopyPlat>
   2a2c8:	f108 0302 	add.w	r3, r8, #2
   2a2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a2ce:	2000      	movs	r0, #0
   2a2d0:	6013      	str	r3, [r2, #0]
   2a2d2:	b002      	add	sp, #8
   2a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a2d8:	b10f      	cbz	r7, 2a2de <UtilCmacBuildDataForDerivation+0x92>
   2a2da:	2e40      	cmp	r6, #64	; 0x40
   2a2dc:	d9cf      	bls.n	2a27e <UtilCmacBuildDataForDerivation+0x32>
   2a2de:	480a      	ldr	r0, [pc, #40]	; (2a308 <UtilCmacBuildDataForDerivation+0xbc>)
   2a2e0:	b002      	add	sp, #8
   2a2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a2e6:	2201      	movs	r2, #1
   2a2e8:	4669      	mov	r1, sp
   2a2ea:	f7fe fae7 	bl	288bc <CC_PalMemCopyPlat>
   2a2ee:	f108 0301 	add.w	r3, r8, #1
   2a2f2:	e7eb      	b.n	2a2cc <UtilCmacBuildDataForDerivation+0x80>
   2a2f4:	9b08      	ldr	r3, [sp, #32]
   2a2f6:	4632      	mov	r2, r6
   2a2f8:	eb03 0008 	add.w	r0, r3, r8
   2a2fc:	4639      	mov	r1, r7
   2a2fe:	f7fe fadd 	bl	288bc <CC_PalMemCopyPlat>
   2a302:	44b0      	add	r8, r6
   2a304:	e7d1      	b.n	2a2aa <UtilCmacBuildDataForDerivation+0x5e>
   2a306:	bf00      	nop
   2a308:	80000006 	.word	0x80000006

0002a30c <CC_PalDataBufferAttrGet>:
   2a30c:	2000      	movs	r0, #0
   2a30e:	7018      	strb	r0, [r3, #0]
   2a310:	4770      	bx	lr
   2a312:	bf00      	nop

0002a314 <le_param_req>:
}
   2a314:	2001      	movs	r0, #1
   2a316:	4770      	bx	lr

0002a318 <le_param_updated>:
}
   2a318:	4770      	bx	lr

0002a31a <nus_send_enabled>:
}
   2a31a:	4770      	bx	lr

0002a31c <cbprintf_via_va_list>:
{
   2a31c:	b510      	push	{r4, lr}
   2a31e:	460c      	mov	r4, r1
   2a320:	4611      	mov	r1, r2
   2a322:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   2a324:	9b02      	ldr	r3, [sp, #8]
   2a326:	47a0      	blx	r4
}
   2a328:	bd10      	pop	{r4, pc}

0002a32a <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   2a32a:	3840      	subs	r0, #64	; 0x40
   2a32c:	b2c0      	uxtb	r0, r0
}
   2a32e:	283a      	cmp	r0, #58	; 0x3a
   2a330:	bf8c      	ite	hi
   2a332:	2000      	movhi	r0, #0
   2a334:	2001      	movls	r0, #1
   2a336:	4770      	bx	lr

0002a338 <get_package_len>:
{
   2a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a33a:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   2a33c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   2a33e:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   2a340:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   2a342:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   2a346:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
   2a348:	2700      	movs	r7, #0
   2a34a:	e006      	b.n	2a35a <get_package_len+0x22>
		buf++;
   2a34c:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   2a34e:	4620      	mov	r0, r4
   2a350:	f002 fa14 	bl	2c77c <strlen>
   2a354:	3001      	adds	r0, #1
   2a356:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
   2a358:	3701      	adds	r7, #1
   2a35a:	42af      	cmp	r7, r5
   2a35c:	d3f6      	bcc.n	2a34c <get_package_len+0x14>
}
   2a35e:	1ba0      	subs	r0, r4, r6
   2a360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a362 <append_string>:
{
   2a362:	b570      	push	{r4, r5, r6, lr}
   2a364:	4614      	mov	r4, r2
	if (cb == NULL) {
   2a366:	b138      	cbz	r0, 2a378 <append_string+0x16>
   2a368:	460d      	mov	r5, r1
   2a36a:	4619      	mov	r1, r3
   2a36c:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   2a36e:	b143      	cbz	r3, 2a382 <append_string+0x20>
	return cb(str, strl, ctx);
   2a370:	462a      	mov	r2, r5
   2a372:	4620      	mov	r0, r4
   2a374:	47b0      	blx	r6
}
   2a376:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   2a378:	4610      	mov	r0, r2
   2a37a:	f002 f9ff 	bl	2c77c <strlen>
   2a37e:	3001      	adds	r0, #1
   2a380:	e7f9      	b.n	2a376 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   2a382:	4610      	mov	r0, r2
   2a384:	f002 f9fa 	bl	2c77c <strlen>
   2a388:	b283      	uxth	r3, r0
   2a38a:	3301      	adds	r3, #1
   2a38c:	b299      	uxth	r1, r3
   2a38e:	e7ef      	b.n	2a370 <append_string+0xe>

0002a390 <cbpprintf_external>:
	if (buf == NULL) {
   2a390:	b35b      	cbz	r3, 2a3ea <cbpprintf_external+0x5a>
{
   2a392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a396:	b082      	sub	sp, #8
   2a398:	4607      	mov	r7, r0
   2a39a:	4688      	mov	r8, r1
   2a39c:	4691      	mov	r9, r2
   2a39e:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a3a0:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a3a2:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a3a4:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   2a3a6:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a3a8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   2a3ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   2a3b0:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   2a3b2:	f04f 0a00 	mov.w	sl, #0
   2a3b6:	e00a      	b.n	2a3ce <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   2a3b8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   2a3bc:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   2a3c0:	4620      	mov	r0, r4
   2a3c2:	f002 f9db 	bl	2c77c <strlen>
   2a3c6:	3001      	adds	r0, #1
   2a3c8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a3ca:	f10a 0a01 	add.w	sl, sl, #1
   2a3ce:	45b2      	cmp	sl, r6
   2a3d0:	d3f2      	bcc.n	2a3b8 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   2a3d2:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   2a3d6:	9300      	str	r3, [sp, #0]
   2a3d8:	686b      	ldr	r3, [r5, #4]
   2a3da:	464a      	mov	r2, r9
   2a3dc:	4641      	mov	r1, r8
   2a3de:	4638      	mov	r0, r7
   2a3e0:	f7ff ff9c 	bl	2a31c <cbprintf_via_va_list>
}
   2a3e4:	b002      	add	sp, #8
   2a3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   2a3ea:	f06f 0015 	mvn.w	r0, #21
}
   2a3ee:	4770      	bx	lr

0002a3f0 <is_ptr>:
{
   2a3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a3f4:	4604      	mov	r4, r0
   2a3f6:	4688      	mov	r8, r1
	int cnt = 0;
   2a3f8:	2700      	movs	r7, #0
	bool mod = false;
   2a3fa:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   2a3fc:	e007      	b.n	2a40e <is_ptr+0x1e>
				if (c == 'p') {
   2a3fe:	2d70      	cmp	r5, #112	; 0x70
   2a400:	d018      	beq.n	2a434 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   2a402:	4628      	mov	r0, r5
   2a404:	f7ff ff91 	bl	2a32a <is_fmt_spec>
   2a408:	b9b8      	cbnz	r0, 2a43a <is_ptr+0x4a>
		if (c == '%') {
   2a40a:	2d25      	cmp	r5, #37	; 0x25
   2a40c:	d00e      	beq.n	2a42c <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   2a40e:	f814 5b01 	ldrb.w	r5, [r4], #1
   2a412:	b175      	cbz	r5, 2a432 <is_ptr+0x42>
		if (mod) {
   2a414:	2e00      	cmp	r6, #0
   2a416:	d0f8      	beq.n	2a40a <is_ptr+0x1a>
			if (cnt == n) {
   2a418:	4547      	cmp	r7, r8
   2a41a:	d0f0      	beq.n	2a3fe <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   2a41c:	4628      	mov	r0, r5
   2a41e:	f7ff ff84 	bl	2a32a <is_fmt_spec>
   2a422:	2800      	cmp	r0, #0
   2a424:	d0f1      	beq.n	2a40a <is_ptr+0x1a>
				cnt++;
   2a426:	3701      	adds	r7, #1
				mod = false;
   2a428:	2600      	movs	r6, #0
   2a42a:	e7ee      	b.n	2a40a <is_ptr+0x1a>
			mod = !mod;
   2a42c:	f086 0601 	eor.w	r6, r6, #1
   2a430:	e7ed      	b.n	2a40e <is_ptr+0x1e>
	return false;
   2a432:	2600      	movs	r6, #0
}
   2a434:	4630      	mov	r0, r6
   2a436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   2a43a:	2600      	movs	r6, #0
   2a43c:	e7fa      	b.n	2a434 <is_ptr+0x44>

0002a43e <arch_printk_char_out>:
}
   2a43e:	2000      	movs	r0, #0
   2a440:	4770      	bx	lr

0002a442 <str_out>:
{
   2a442:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a444:	680c      	ldr	r4, [r1, #0]
   2a446:	b154      	cbz	r4, 2a45e <str_out+0x1c>
   2a448:	688a      	ldr	r2, [r1, #8]
   2a44a:	684b      	ldr	r3, [r1, #4]
   2a44c:	429a      	cmp	r2, r3
   2a44e:	da06      	bge.n	2a45e <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   2a450:	3b01      	subs	r3, #1
   2a452:	429a      	cmp	r2, r3
   2a454:	d008      	beq.n	2a468 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   2a456:	1c53      	adds	r3, r2, #1
   2a458:	608b      	str	r3, [r1, #8]
   2a45a:	54a0      	strb	r0, [r4, r2]
   2a45c:	e002      	b.n	2a464 <str_out+0x22>
		ctx->count++;
   2a45e:	688b      	ldr	r3, [r1, #8]
   2a460:	3301      	adds	r3, #1
   2a462:	608b      	str	r3, [r1, #8]
}
   2a464:	bc10      	pop	{r4}
   2a466:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   2a468:	1c53      	adds	r3, r2, #1
   2a46a:	608b      	str	r3, [r1, #8]
   2a46c:	2300      	movs	r3, #0
   2a46e:	54a3      	strb	r3, [r4, r2]
   2a470:	e7f8      	b.n	2a464 <str_out+0x22>

0002a472 <vprintk>:
{
   2a472:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   2a474:	f001 fa56 	bl	2b924 <z_log_vprintk>
}
   2a478:	bd08      	pop	{r3, pc}

0002a47a <printk>:
{
   2a47a:	b40f      	push	{r0, r1, r2, r3}
   2a47c:	b500      	push	{lr}
   2a47e:	b083      	sub	sp, #12
   2a480:	a904      	add	r1, sp, #16
   2a482:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a486:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a488:	f7ff fff3 	bl	2a472 <vprintk>
}
   2a48c:	b003      	add	sp, #12
   2a48e:	f85d eb04 	ldr.w	lr, [sp], #4
   2a492:	b004      	add	sp, #16
   2a494:	4770      	bx	lr

0002a496 <snprintk>:
{
   2a496:	b40c      	push	{r2, r3}
   2a498:	b500      	push	{lr}
   2a49a:	b083      	sub	sp, #12
   2a49c:	ab04      	add	r3, sp, #16
   2a49e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a4a2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a4a4:	f7e8 fef8 	bl	13298 <vsnprintk>
}
   2a4a8:	b003      	add	sp, #12
   2a4aa:	f85d eb04 	ldr.w	lr, [sp], #4
   2a4ae:	b002      	add	sp, #8
   2a4b0:	4770      	bx	lr

0002a4b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a4b2:	b508      	push	{r3, lr}
   2a4b4:	4604      	mov	r4, r0
   2a4b6:	4608      	mov	r0, r1
   2a4b8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a4ba:	461a      	mov	r2, r3
   2a4bc:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a4be:	f7fc fc8d 	bl	26ddc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a4c2:	f7ee f9f3 	bl	188ac <z_impl_k_thread_abort>

0002a4c6 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a4c6:	00c9      	lsls	r1, r1, #3
   2a4c8:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   2a4ca:	4408      	add	r0, r1
   2a4cc:	4770      	bx	lr

0002a4ce <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   2a4ce:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2a4d2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2a4d6:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   2a4d8:	4299      	cmp	r1, r3
   2a4da:	d00c      	beq.n	2a4f6 <free_list_remove_bidx+0x28>
   2a4dc:	4484      	add	ip, r0
   2a4de:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   2a4e2:	3204      	adds	r2, #4
   2a4e4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   2a4e8:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   2a4ea:	3206      	adds	r2, #6
   2a4ec:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   2a4ee:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2a4f0:	3304      	adds	r3, #4
   2a4f2:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   2a4f4:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   2a4f6:	68c3      	ldr	r3, [r0, #12]
   2a4f8:	2101      	movs	r1, #1
   2a4fa:	4091      	lsls	r1, r2
   2a4fc:	ea23 0301 	bic.w	r3, r3, r1
   2a500:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a502:	3204      	adds	r2, #4
   2a504:	2300      	movs	r3, #0
   2a506:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   2a50a:	4770      	bx	lr

0002a50c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   2a50c:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   2a50e:	1d13      	adds	r3, r2, #4
   2a510:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2a514:	b974      	cbnz	r4, 2a534 <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   2a516:	68c3      	ldr	r3, [r0, #12]
   2a518:	2401      	movs	r4, #1
   2a51a:	4094      	lsls	r4, r2
   2a51c:	4323      	orrs	r3, r4
   2a51e:	60c3      	str	r3, [r0, #12]
		b->next = c;
   2a520:	3204      	adds	r2, #4
   2a522:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   2a526:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   2a528:	1d1a      	adds	r2, r3, #4
   2a52a:	b289      	uxth	r1, r1
   2a52c:	5281      	strh	r1, [r0, r2]
   2a52e:	3306      	adds	r3, #6
   2a530:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   2a532:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   2a534:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   2a536:	3204      	adds	r2, #4
   2a538:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   2a53a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   2a53e:	f10c 0e04 	add.w	lr, ip, #4
   2a542:	f820 300e 	strh.w	r3, [r0, lr]
   2a546:	f10c 0c06 	add.w	ip, ip, #6
   2a54a:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   2a54e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2a550:	3306      	adds	r3, #6
   2a552:	b289      	uxth	r1, r1
   2a554:	52c1      	strh	r1, [r0, r3]
   2a556:	5281      	strh	r1, [r0, r2]
   2a558:	e7eb      	b.n	2a532 <free_list_add_bidx+0x26>

0002a55a <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2a55a:	b500      	push	{lr}
	void *cmem = &buf[c];
   2a55c:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   2a55e:	3302      	adds	r3, #2
   2a560:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   2a564:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2a568:	1a89      	subs	r1, r1, r2
   2a56a:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a56e:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   2a572:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a576:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   2a57a:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   2a57c:	3302      	adds	r3, #2
   2a57e:	f820 e003 	strh.w	lr, [r0, r3]
   2a582:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   2a586:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   2a588:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   2a58c:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   2a590:	f85d fb04 	ldr.w	pc, [sp], #4

0002a594 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2a594:	b500      	push	{lr}
	void *cmem = &buf[c];
   2a596:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   2a598:	3102      	adds	r1, #2
   2a59a:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   2a59e:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   2a5a2:	f10c 0c02 	add.w	ip, ip, #2
   2a5a6:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2a5aa:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a5ac:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a5b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   2a5b4:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   2a5b8:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   2a5bc:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   2a5c0:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   2a5c4:	f85d fb04 	ldr.w	pc, [sp], #4

0002a5c8 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a5c8:	3904      	subs	r1, #4
   2a5ca:	1a08      	subs	r0, r1, r0
}
   2a5cc:	08c0      	lsrs	r0, r0, #3
   2a5ce:	4770      	bx	lr

0002a5d0 <free_list_remove>:
{
   2a5d0:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2a5d2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2a5d6:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2a5d8:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2a5da:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   2a5de:	f1c2 021f 	rsb	r2, r2, #31
   2a5e2:	f7ff ff74 	bl	2a4ce <free_list_remove_bidx>
}
   2a5e6:	bd08      	pop	{r3, pc}

0002a5e8 <free_list_add>:
{
   2a5e8:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2a5ea:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2a5ee:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2a5f0:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   2a5f2:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   2a5f6:	f1c2 021f 	rsb	r2, r2, #31
   2a5fa:	f7ff ff87 	bl	2a50c <free_list_add_bidx>
}
   2a5fe:	bd08      	pop	{r3, pc}

0002a600 <free_chunk>:
{
   2a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a602:	4604      	mov	r4, r0
   2a604:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   2a606:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   2a608:	1cb7      	adds	r7, r6, #2
   2a60a:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   2a60c:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   2a610:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2a614:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a616:	f013 0f01 	tst.w	r3, #1
   2a61a:	d00c      	beq.n	2a636 <free_chunk+0x36>
   2a61c:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a61e:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   2a620:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   2a624:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a626:	f013 0f01 	tst.w	r3, #1
   2a62a:	d00e      	beq.n	2a64a <free_chunk+0x4a>
	free_list_add(h, c);
   2a62c:	4629      	mov	r1, r5
   2a62e:	4620      	mov	r0, r4
   2a630:	f7ff ffda 	bl	2a5e8 <free_list_add>
}
   2a634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   2a636:	f7ff ffcb 	bl	2a5d0 <free_list_remove>
   2a63a:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   2a63c:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   2a640:	4629      	mov	r1, r5
   2a642:	4620      	mov	r0, r4
   2a644:	f7ff ffa6 	bl	2a594 <merge_chunks>
   2a648:	e7e8      	b.n	2a61c <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   2a64a:	4620      	mov	r0, r4
   2a64c:	f7ff ffc0 	bl	2a5d0 <free_list_remove>
   2a650:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   2a652:	462a      	mov	r2, r5
   2a654:	1a69      	subs	r1, r5, r1
   2a656:	4620      	mov	r0, r4
   2a658:	f7ff ff9c 	bl	2a594 <merge_chunks>
   2a65c:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a65e:	1aed      	subs	r5, r5, r3
   2a660:	e7e4      	b.n	2a62c <free_chunk+0x2c>

0002a662 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2a662:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   2a664:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2a668:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2a66c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   2a670:	b1cd      	cbz	r5, 2a6a6 <alloc_chunk+0x44>
   2a672:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   2a676:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   2a67a:	1d14      	adds	r4, r2, #4
   2a67c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   2a680:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   2a684:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   2a688:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   2a68a:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   2a68e:	d914      	bls.n	2a6ba <alloc_chunk+0x58>
   2a690:	4484      	add	ip, r0
   2a692:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   2a696:	1d16      	adds	r6, r2, #4
   2a698:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   2a69c:	f1be 0e01 	subs.w	lr, lr, #1
   2a6a0:	d001      	beq.n	2a6a6 <alloc_chunk+0x44>
   2a6a2:	42a5      	cmp	r5, r4
   2a6a4:	d1e9      	bne.n	2a67a <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a6a6:	68c4      	ldr	r4, [r0, #12]
   2a6a8:	f1c3 0220 	rsb	r2, r3, #32
   2a6ac:	2301      	movs	r3, #1
   2a6ae:	4093      	lsls	r3, r2
   2a6b0:	425b      	negs	r3, r3

	if (bmask != 0U) {
   2a6b2:	401c      	ands	r4, r3
   2a6b4:	d105      	bne.n	2a6c2 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2a6b6:	4620      	mov	r0, r4
   2a6b8:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   2a6ba:	4621      	mov	r1, r4
   2a6bc:	f7ff ff07 	bl	2a4ce <free_list_remove_bidx>
				return c;
   2a6c0:	e7f9      	b.n	2a6b6 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   2a6c2:	fa94 f2a4 	rbit	r2, r4
   2a6c6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a6ca:	1d13      	adds	r3, r2, #4
   2a6cc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a6d0:	4621      	mov	r1, r4
   2a6d2:	f7ff fefc 	bl	2a4ce <free_list_remove_bidx>
		return c;
   2a6d6:	e7ee      	b.n	2a6b6 <alloc_chunk+0x54>

0002a6d8 <sys_heap_free>:
	if (mem == NULL) {
   2a6d8:	b179      	cbz	r1, 2a6fa <sys_heap_free+0x22>
{
   2a6da:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   2a6dc:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   2a6de:	4620      	mov	r0, r4
   2a6e0:	f7ff ff72 	bl	2a5c8 <mem_to_chunkid>
   2a6e4:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   2a6e6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2a6ea:	8853      	ldrh	r3, [r2, #2]
   2a6ec:	f023 0301 	bic.w	r3, r3, #1
   2a6f0:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   2a6f2:	4620      	mov	r0, r4
   2a6f4:	f7ff ff84 	bl	2a600 <free_chunk>
}
   2a6f8:	bd10      	pop	{r4, pc}
   2a6fa:	4770      	bx	lr

0002a6fc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   2a6fe:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2a700:	b341      	cbz	r1, 2a754 <sys_heap_alloc+0x58>
   2a702:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2a704:	68aa      	ldr	r2, [r5, #8]
   2a706:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   2a70a:	d925      	bls.n	2a758 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a70c:	330b      	adds	r3, #11
   2a70e:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a710:	4621      	mov	r1, r4
   2a712:	4628      	mov	r0, r5
   2a714:	f7ff ffa5 	bl	2a662 <alloc_chunk>
	if (c == 0U) {
   2a718:	4607      	mov	r7, r0
   2a71a:	b1f8      	cbz	r0, 2a75c <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   2a71c:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   2a71e:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   2a722:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   2a724:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2a728:	d309      	bcc.n	2a73e <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   2a72a:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a72c:	885a      	ldrh	r2, [r3, #2]
   2a72e:	f042 0201 	orr.w	r2, r2, #1
   2a732:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   2a734:	4639      	mov	r1, r7
   2a736:	4628      	mov	r0, r5
   2a738:	f7ff fec5 	bl	2a4c6 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   2a73e:	4404      	add	r4, r0
   2a740:	4622      	mov	r2, r4
   2a742:	4601      	mov	r1, r0
   2a744:	4628      	mov	r0, r5
   2a746:	f7ff ff08 	bl	2a55a <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a74a:	4621      	mov	r1, r4
   2a74c:	4628      	mov	r0, r5
   2a74e:	f7ff ff4b 	bl	2a5e8 <free_list_add>
   2a752:	e7ea      	b.n	2a72a <sys_heap_alloc+0x2e>
		return NULL;
   2a754:	2000      	movs	r0, #0
   2a756:	e7f1      	b.n	2a73c <sys_heap_alloc+0x40>
   2a758:	2000      	movs	r0, #0
   2a75a:	e7ef      	b.n	2a73c <sys_heap_alloc+0x40>
		return NULL;
   2a75c:	2000      	movs	r0, #0
   2a75e:	e7ed      	b.n	2a73c <sys_heap_alloc+0x40>

0002a760 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2a760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a764:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   2a766:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   2a768:	424b      	negs	r3, r1
   2a76a:	400b      	ands	r3, r1
	if (align != rew) {
   2a76c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   2a770:	ea19 0901 	ands.w	r9, r9, r1
   2a774:	d004      	beq.n	2a780 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2a776:	2b03      	cmp	r3, #3
   2a778:	d847      	bhi.n	2a80a <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   2a77a:	464c      	mov	r4, r9
	rew = align & -align;
   2a77c:	4699      	mov	r9, r3
   2a77e:	e003      	b.n	2a788 <sys_heap_aligned_alloc+0x28>
   2a780:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   2a782:	2904      	cmp	r1, #4
   2a784:	d93c      	bls.n	2a800 <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   2a786:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2a788:	2d00      	cmp	r5, #0
   2a78a:	d056      	beq.n	2a83a <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2a78c:	68b2      	ldr	r2, [r6, #8]
   2a78e:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   2a792:	d955      	bls.n	2a840 <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   2a794:	1961      	adds	r1, r4, r5
   2a796:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a798:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2a79a:	08c9      	lsrs	r1, r1, #3
   2a79c:	4630      	mov	r0, r6
   2a79e:	f7ff ff60 	bl	2a662 <alloc_chunk>

	if (c0 == 0) {
   2a7a2:	4607      	mov	r7, r0
   2a7a4:	2800      	cmp	r0, #0
   2a7a6:	d04e      	beq.n	2a846 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   2a7a8:	4601      	mov	r1, r0
   2a7aa:	4630      	mov	r0, r6
   2a7ac:	f7ff fe8b 	bl	2a4c6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2a7b0:	eb00 0809 	add.w	r8, r0, r9
   2a7b4:	44a0      	add	r8, r4
   2a7b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2a7ba:	4264      	negs	r4, r4
   2a7bc:	ea08 0804 	and.w	r8, r8, r4
   2a7c0:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a7c4:	eb08 0405 	add.w	r4, r8, r5
   2a7c8:	3407      	adds	r4, #7
   2a7ca:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   2a7ce:	4641      	mov	r1, r8
   2a7d0:	4630      	mov	r0, r6
   2a7d2:	f7ff fef9 	bl	2a5c8 <mem_to_chunkid>
   2a7d6:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   2a7d8:	1ba4      	subs	r4, r4, r6
   2a7da:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   2a7dc:	4287      	cmp	r7, r0
   2a7de:	d318      	bcc.n	2a812 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   2a7e0:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   2a7e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   2a7e6:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   2a7e8:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   2a7ec:	429c      	cmp	r4, r3
   2a7ee:	d31a      	bcc.n	2a826 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   2a7f0:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a7f2:	8873      	ldrh	r3, [r6, #2]
   2a7f4:	f043 0301 	orr.w	r3, r3, #1
   2a7f8:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a7fa:	4640      	mov	r0, r8
   2a7fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   2a800:	4611      	mov	r1, r2
   2a802:	f7ff ff7b 	bl	2a6fc <sys_heap_alloc>
   2a806:	4680      	mov	r8, r0
   2a808:	e7f7      	b.n	2a7fa <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   2a80a:	464c      	mov	r4, r9
	rew = align & -align;
   2a80c:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   2a80e:	2304      	movs	r3, #4
   2a810:	e7ba      	b.n	2a788 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   2a812:	4602      	mov	r2, r0
   2a814:	4639      	mov	r1, r7
   2a816:	4630      	mov	r0, r6
   2a818:	f7ff fe9f 	bl	2a55a <split_chunks>
		free_list_add(h, c0);
   2a81c:	4639      	mov	r1, r7
   2a81e:	4630      	mov	r0, r6
   2a820:	f7ff fee2 	bl	2a5e8 <free_list_add>
   2a824:	e7dc      	b.n	2a7e0 <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   2a826:	4622      	mov	r2, r4
   2a828:	4629      	mov	r1, r5
   2a82a:	4630      	mov	r0, r6
   2a82c:	f7ff fe95 	bl	2a55a <split_chunks>
		free_list_add(h, c_end);
   2a830:	4621      	mov	r1, r4
   2a832:	4630      	mov	r0, r6
   2a834:	f7ff fed8 	bl	2a5e8 <free_list_add>
   2a838:	e7da      	b.n	2a7f0 <sys_heap_aligned_alloc+0x90>
		return NULL;
   2a83a:	f04f 0800 	mov.w	r8, #0
   2a83e:	e7dc      	b.n	2a7fa <sys_heap_aligned_alloc+0x9a>
   2a840:	f04f 0800 	mov.w	r8, #0
   2a844:	e7d9      	b.n	2a7fa <sys_heap_aligned_alloc+0x9a>
		return NULL;
   2a846:	f04f 0800 	mov.w	r8, #0
   2a84a:	e7d6      	b.n	2a7fa <sys_heap_aligned_alloc+0x9a>

0002a84c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2a84c:	b570      	push	{r4, r5, r6, lr}
   2a84e:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2a850:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a852:	1dc8      	adds	r0, r1, #7
   2a854:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a858:	440a      	add	r2, r1
   2a85a:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2a85e:	1a12      	subs	r2, r2, r0
   2a860:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2a862:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   2a864:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   2a866:	2300      	movs	r3, #0
   2a868:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   2a86a:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2a86e:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2a872:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   2a876:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a878:	1dce      	adds	r6, r1, #7
   2a87a:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2a87c:	e005      	b.n	2a88a <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   2a87e:	f103 0c04 	add.w	ip, r3, #4
   2a882:	2400      	movs	r4, #0
   2a884:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   2a888:	3301      	adds	r3, #1
   2a88a:	4573      	cmp	r3, lr
   2a88c:	dbf7      	blt.n	2a87e <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a88e:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a890:	b2a4      	uxth	r4, r4
   2a892:	8044      	strh	r4, [r0, #2]
   2a894:	f04f 0c00 	mov.w	ip, #0
   2a898:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a89c:	f044 0401 	orr.w	r4, r4, #1
   2a8a0:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2a8a2:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a8a4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   2a8a8:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   2a8ac:	1ca5      	adds	r5, r4, #2
   2a8ae:	f820 e005 	strh.w	lr, [r0, r5]
   2a8b2:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   2a8b4:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   2a8b8:	1c95      	adds	r5, r2, #2
   2a8ba:	f820 c005 	strh.w	ip, [r0, r5]
   2a8be:	4402      	add	r2, r0
   2a8c0:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a8c2:	8853      	ldrh	r3, [r2, #2]
   2a8c4:	f043 0301 	orr.w	r3, r3, #1
   2a8c8:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   2a8ca:	f7ff fe8d 	bl	2a5e8 <free_list_add>
}
   2a8ce:	bd70      	pop	{r4, r5, r6, pc}

0002a8d0 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2a8d0:	460b      	mov	r3, r1
   2a8d2:	b139      	cbz	r1, 2a8e4 <sys_slist_remove+0x14>
	return node->next;
   2a8d4:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2a8d6:	6019      	str	r1, [r3, #0]
	return list->tail;
   2a8d8:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a8da:	428a      	cmp	r2, r1
   2a8dc:	d009      	beq.n	2a8f2 <sys_slist_remove+0x22>
	parent->next = child;
   2a8de:	2300      	movs	r3, #0
   2a8e0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a8e2:	4770      	bx	lr
	return node->next;
   2a8e4:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2a8e6:	6003      	str	r3, [r0, #0]
	return list->tail;
   2a8e8:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a8ea:	428a      	cmp	r2, r1
   2a8ec:	d1f7      	bne.n	2a8de <sys_slist_remove+0xe>
	list->tail = node;
   2a8ee:	6043      	str	r3, [r0, #4]
}
   2a8f0:	e7f5      	b.n	2a8de <sys_slist_remove+0xe>
	list->tail = node;
   2a8f2:	6043      	str	r3, [r0, #4]
}
   2a8f4:	e7f3      	b.n	2a8de <sys_slist_remove+0xe>

0002a8f6 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a8f6:	b508      	push	{r3, lr}
   2a8f8:	460a      	mov	r2, r1
	return list->head;
   2a8fa:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a8fc:	2100      	movs	r1, #0
   2a8fe:	e001      	b.n	2a904 <sys_slist_find_and_remove+0xe>
   2a900:	4619      	mov	r1, r3
   2a902:	681b      	ldr	r3, [r3, #0]
   2a904:	b12b      	cbz	r3, 2a912 <sys_slist_find_and_remove+0x1c>
   2a906:	4293      	cmp	r3, r2
   2a908:	d1fa      	bne.n	2a900 <sys_slist_find_and_remove+0xa>
   2a90a:	f7ff ffe1 	bl	2a8d0 <sys_slist_remove>
   2a90e:	2001      	movs	r0, #1
   2a910:	e000      	b.n	2a914 <sys_slist_find_and_remove+0x1e>
   2a912:	2000      	movs	r0, #0
   2a914:	bd08      	pop	{r3, pc}

0002a916 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a916:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a91a:	8b03      	ldrh	r3, [r0, #24]
   2a91c:	f023 0307 	bic.w	r3, r3, #7
   2a920:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a922:	8303      	strh	r3, [r0, #24]
}
   2a924:	4770      	bx	lr

0002a926 <notify_monitors>:
{
   2a926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a92a:	4606      	mov	r6, r0
   2a92c:	460f      	mov	r7, r1
   2a92e:	4690      	mov	r8, r2
	return list->head;
   2a930:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2a932:	b121      	cbz	r1, 2a93e <notify_monitors+0x18>
	return node->next;
   2a934:	680c      	ldr	r4, [r1, #0]
   2a936:	b13c      	cbz	r4, 2a948 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a938:	b931      	cbnz	r1, 2a948 <notify_monitors+0x22>
   2a93a:	460c      	mov	r4, r1
   2a93c:	e004      	b.n	2a948 <notify_monitors+0x22>
   2a93e:	460c      	mov	r4, r1
   2a940:	e002      	b.n	2a948 <notify_monitors+0x22>
   2a942:	4623      	mov	r3, r4
   2a944:	4621      	mov	r1, r4
   2a946:	461c      	mov	r4, r3
   2a948:	b169      	cbz	r1, 2a966 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   2a94a:	684d      	ldr	r5, [r1, #4]
   2a94c:	4643      	mov	r3, r8
   2a94e:	463a      	mov	r2, r7
   2a950:	4630      	mov	r0, r6
   2a952:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2a954:	2c00      	cmp	r4, #0
   2a956:	d0f4      	beq.n	2a942 <notify_monitors+0x1c>
	return node->next;
   2a958:	6823      	ldr	r3, [r4, #0]
   2a95a:	2b00      	cmp	r3, #0
   2a95c:	d0f2      	beq.n	2a944 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a95e:	2c00      	cmp	r4, #0
   2a960:	d1f0      	bne.n	2a944 <notify_monitors+0x1e>
   2a962:	4623      	mov	r3, r4
   2a964:	e7ee      	b.n	2a944 <notify_monitors+0x1e>
}
   2a966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a96a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a96a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2a96c:	f013 0307 	ands.w	r3, r3, #7
   2a970:	d103      	bne.n	2a97a <process_recheck+0x10>
	return list->head;
   2a972:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a974:	b10a      	cbz	r2, 2a97a <process_recheck+0x10>
		evt = EVT_START;
   2a976:	2003      	movs	r0, #3
   2a978:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a97a:	2b02      	cmp	r3, #2
   2a97c:	d003      	beq.n	2a986 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   2a97e:	2b01      	cmp	r3, #1
   2a980:	d006      	beq.n	2a990 <process_recheck+0x26>
	int evt = EVT_NOP;
   2a982:	2000      	movs	r0, #0
   2a984:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2a986:	8b42      	ldrh	r2, [r0, #26]
   2a988:	2a00      	cmp	r2, #0
   2a98a:	d1f8      	bne.n	2a97e <process_recheck+0x14>
		evt = EVT_STOP;
   2a98c:	2004      	movs	r0, #4
   2a98e:	4770      	bx	lr
   2a990:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a992:	b10b      	cbz	r3, 2a998 <process_recheck+0x2e>
		evt = EVT_RESET;
   2a994:	2005      	movs	r0, #5
}
   2a996:	4770      	bx	lr
	int evt = EVT_NOP;
   2a998:	2000      	movs	r0, #0
   2a99a:	4770      	bx	lr

0002a99c <process_complete>:
{
   2a99c:	b510      	push	{r4, lr}
   2a99e:	4604      	mov	r4, r0
   2a9a0:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a9a2:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   2a9a4:	2a00      	cmp	r2, #0
   2a9a6:	db07      	blt.n	2a9b8 <process_complete+0x1c>
   2a9a8:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2a9ac:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2a9ae:	2a01      	cmp	r2, #1
   2a9b0:	d90e      	bls.n	2a9d0 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2a9b2:	2b04      	cmp	r3, #4
   2a9b4:	d036      	beq.n	2aa24 <process_complete+0x88>
}
   2a9b6:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   2a9b8:	e9d0 0100 	ldrd	r0, r1, [r0]
   2a9bc:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   2a9c0:	2300      	movs	r3, #0
   2a9c2:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   2a9c4:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   2a9c6:	2101      	movs	r1, #1
   2a9c8:	4620      	mov	r0, r4
   2a9ca:	f7ff ffa4 	bl	2a916 <set_state>
   2a9ce:	e7f2      	b.n	2a9b6 <process_complete+0x1a>
		*clients = mgr->clients;
   2a9d0:	e9d0 0100 	ldrd	r0, r1, [r0]
   2a9d4:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   2a9d8:	2200      	movs	r2, #0
   2a9da:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   2a9dc:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   2a9de:	2b06      	cmp	r3, #6
   2a9e0:	d11b      	bne.n	2aa1a <process_complete+0x7e>
	return list->head;
   2a9e2:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2a9e6:	b153      	cbz	r3, 2a9fe <process_complete+0x62>
				mgr->refs += 1U;
   2a9e8:	8b62      	ldrh	r2, [r4, #26]
   2a9ea:	3201      	adds	r2, #1
   2a9ec:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2a9ee:	461a      	mov	r2, r3
	return node->next;
   2a9f0:	681b      	ldr	r3, [r3, #0]
   2a9f2:	2b00      	cmp	r3, #0
   2a9f4:	d0f7      	beq.n	2a9e6 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a9f6:	2a00      	cmp	r2, #0
   2a9f8:	d1f5      	bne.n	2a9e6 <process_complete+0x4a>
   2a9fa:	4613      	mov	r3, r2
   2a9fc:	e7f3      	b.n	2a9e6 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   2a9fe:	2102      	movs	r1, #2
   2aa00:	4620      	mov	r0, r4
   2aa02:	f7ff ff88 	bl	2a916 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   2aa06:	4620      	mov	r0, r4
   2aa08:	f7ff ffaf 	bl	2a96a <process_recheck>
   2aa0c:	2800      	cmp	r0, #0
   2aa0e:	d0d2      	beq.n	2a9b6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2aa10:	8b23      	ldrh	r3, [r4, #24]
   2aa12:	f043 0320 	orr.w	r3, r3, #32
   2aa16:	8323      	strh	r3, [r4, #24]
   2aa18:	e7cd      	b.n	2a9b6 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   2aa1a:	2100      	movs	r1, #0
   2aa1c:	4620      	mov	r0, r4
   2aa1e:	f7ff ff7a 	bl	2a916 <set_state>
   2aa22:	e7f0      	b.n	2aa06 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   2aa24:	2100      	movs	r1, #0
   2aa26:	f7ff ff76 	bl	2a916 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   2aa2a:	4620      	mov	r0, r4
   2aa2c:	f7ff ff9d 	bl	2a96a <process_recheck>
   2aa30:	2800      	cmp	r0, #0
   2aa32:	d0c0      	beq.n	2a9b6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2aa34:	8b23      	ldrh	r3, [r4, #24]
   2aa36:	f043 0320 	orr.w	r3, r3, #32
   2aa3a:	8323      	strh	r3, [r4, #24]
}
   2aa3c:	e7bb      	b.n	2a9b6 <process_complete+0x1a>

0002aa3e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   2aa3e:	b150      	cbz	r0, 2aa56 <validate_args+0x18>
{
   2aa40:	b510      	push	{r4, lr}
   2aa42:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2aa44:	b151      	cbz	r1, 2aa5c <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   2aa46:	1d08      	adds	r0, r1, #4
   2aa48:	f000 f90b 	bl	2ac62 <sys_notify_validate>
	if ((rv == 0)
   2aa4c:	b910      	cbnz	r0, 2aa54 <validate_args+0x16>
	    && ((cli->notify.flags
   2aa4e:	68a3      	ldr	r3, [r4, #8]
   2aa50:	2b03      	cmp	r3, #3
   2aa52:	d806      	bhi.n	2aa62 <validate_args+0x24>
}
   2aa54:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2aa56:	f06f 0015 	mvn.w	r0, #21
}
   2aa5a:	4770      	bx	lr
		return -EINVAL;
   2aa5c:	f06f 0015 	mvn.w	r0, #21
   2aa60:	e7f8      	b.n	2aa54 <validate_args+0x16>
		rv = -EINVAL;
   2aa62:	f06f 0015 	mvn.w	r0, #21
   2aa66:	e7f5      	b.n	2aa54 <validate_args+0x16>

0002aa68 <notify_one>:
{
   2aa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa6c:	4607      	mov	r7, r0
   2aa6e:	460c      	mov	r4, r1
   2aa70:	4616      	mov	r6, r2
   2aa72:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2aa74:	4619      	mov	r1, r3
   2aa76:	1d20      	adds	r0, r4, #4
   2aa78:	f000 f912 	bl	2aca0 <sys_notify_finalize>
	if (cb) {
   2aa7c:	b128      	cbz	r0, 2aa8a <notify_one+0x22>
   2aa7e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   2aa80:	462b      	mov	r3, r5
   2aa82:	4632      	mov	r2, r6
   2aa84:	4621      	mov	r1, r4
   2aa86:	4638      	mov	r0, r7
   2aa88:	47c0      	blx	r8
}
   2aa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aa8e <notify_all>:
{
   2aa8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa92:	4680      	mov	r8, r0
   2aa94:	460c      	mov	r4, r1
   2aa96:	4617      	mov	r7, r2
   2aa98:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   2aa9a:	e004      	b.n	2aaa6 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   2aa9c:	4633      	mov	r3, r6
   2aa9e:	463a      	mov	r2, r7
   2aaa0:	4640      	mov	r0, r8
   2aaa2:	f7ff ffe1 	bl	2aa68 <notify_one>
	return list->head;
   2aaa6:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2aaa8:	b131      	cbz	r1, 2aab8 <notify_all+0x2a>
	return node->next;
   2aaaa:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   2aaac:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2aaae:	6863      	ldr	r3, [r4, #4]
   2aab0:	428b      	cmp	r3, r1
   2aab2:	d1f3      	bne.n	2aa9c <notify_all+0xe>
	list->tail = node;
   2aab4:	6065      	str	r5, [r4, #4]
}
   2aab6:	e7f1      	b.n	2aa9c <notify_all+0xe>
}
   2aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aabc <transition_complete>:
{
   2aabc:	b508      	push	{r3, lr}
	__asm__ volatile(
   2aabe:	f04f 0c40 	mov.w	ip, #64	; 0x40
   2aac2:	f3ef 8211 	mrs	r2, BASEPRI
   2aac6:	f38c 8812 	msr	BASEPRI_MAX, ip
   2aaca:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2aace:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   2aad0:	2101      	movs	r1, #1
   2aad2:	f7e8 fbf9 	bl	132c8 <process_event>
}
   2aad6:	bd08      	pop	{r3, pc}

0002aad8 <onoff_manager_init>:
	if ((mgr == NULL)
   2aad8:	4603      	mov	r3, r0
   2aada:	b170      	cbz	r0, 2aafa <onoff_manager_init+0x22>
	    || (transitions == NULL)
   2aadc:	b181      	cbz	r1, 2ab00 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   2aade:	680a      	ldr	r2, [r1, #0]
   2aae0:	b18a      	cbz	r2, 2ab06 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   2aae2:	684a      	ldr	r2, [r1, #4]
   2aae4:	b192      	cbz	r2, 2ab0c <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2aae6:	2000      	movs	r0, #0
   2aae8:	6018      	str	r0, [r3, #0]
   2aaea:	6058      	str	r0, [r3, #4]
   2aaec:	6098      	str	r0, [r3, #8]
   2aaee:	60d8      	str	r0, [r3, #12]
   2aaf0:	6118      	str	r0, [r3, #16]
   2aaf2:	6158      	str	r0, [r3, #20]
   2aaf4:	6198      	str	r0, [r3, #24]
   2aaf6:	6119      	str	r1, [r3, #16]
	return 0;
   2aaf8:	4770      	bx	lr
		return -EINVAL;
   2aafa:	f06f 0015 	mvn.w	r0, #21
   2aafe:	4770      	bx	lr
   2ab00:	f06f 0015 	mvn.w	r0, #21
   2ab04:	4770      	bx	lr
   2ab06:	f06f 0015 	mvn.w	r0, #21
   2ab0a:	4770      	bx	lr
   2ab0c:	f06f 0015 	mvn.w	r0, #21
}
   2ab10:	4770      	bx	lr

0002ab12 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2ab12:	b570      	push	{r4, r5, r6, lr}
   2ab14:	4605      	mov	r5, r0
   2ab16:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2ab18:	f7ff ff91 	bl	2aa3e <validate_args>

	if (rv < 0) {
   2ab1c:	1e04      	subs	r4, r0, #0
   2ab1e:	db30      	blt.n	2ab82 <onoff_request+0x70>
   2ab20:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ab24:	f3ef 8211 	mrs	r2, BASEPRI
   2ab28:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab2c:	f3bf 8f6f 	isb	sy
   2ab30:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2ab32:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   2ab36:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2ab3a:	8b6b      	ldrh	r3, [r5, #26]
   2ab3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2ab40:	428b      	cmp	r3, r1
   2ab42:	d02c      	beq.n	2ab9e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   2ab44:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   2ab46:	f1bc 0f02 	cmp.w	ip, #2
   2ab4a:	d008      	beq.n	2ab5e <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   2ab4c:	f1bc 0f06 	cmp.w	ip, #6
   2ab50:	d819      	bhi.n	2ab86 <onoff_request+0x74>
   2ab52:	e8df f00c 	tbb	[pc, ip]
   2ab56:	181e      	.short	0x181e
   2ab58:	2a1e1818 	.word	0x2a1e1818
   2ab5c:	1e          	.byte	0x1e
   2ab5d:	00          	.byte	0x00
		mgr->refs += 1U;
   2ab5e:	3301      	adds	r3, #1
   2ab60:	836b      	strh	r3, [r5, #26]
		notify = true;
   2ab62:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   2ab64:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   2ab66:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   2ab68:	b128      	cbz	r0, 2ab76 <onoff_request+0x64>
	parent->next = child;
   2ab6a:	2000      	movs	r0, #0
   2ab6c:	6030      	str	r0, [r6, #0]
	return list->tail;
   2ab6e:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2ab70:	b308      	cbz	r0, 2abb6 <onoff_request+0xa4>
	parent->next = child;
   2ab72:	6006      	str	r6, [r0, #0]
	list->tail = node;
   2ab74:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   2ab76:	bb09      	cbnz	r1, 2abbc <onoff_request+0xaa>
	__asm__ volatile(
   2ab78:	f38e 8811 	msr	BASEPRI, lr
   2ab7c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2ab80:	bb0b      	cbnz	r3, 2abc6 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2ab82:	4620      	mov	r0, r4
   2ab84:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2ab86:	f06f 0404 	mvn.w	r4, #4
   2ab8a:	2300      	movs	r3, #0
   2ab8c:	4619      	mov	r1, r3
   2ab8e:	4618      	mov	r0, r3
   2ab90:	e7ea      	b.n	2ab68 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   2ab92:	fabc f18c 	clz	r1, ip
   2ab96:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   2ab98:	2300      	movs	r3, #0
		add_client = true;
   2ab9a:	2001      	movs	r0, #1
   2ab9c:	e7e4      	b.n	2ab68 <onoff_request+0x56>
		rv = -EAGAIN;
   2ab9e:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   2aba2:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   2aba4:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   2aba6:	4618      	mov	r0, r3
   2aba8:	e7de      	b.n	2ab68 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   2abaa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2abae:	2300      	movs	r3, #0
   2abb0:	4619      	mov	r1, r3
   2abb2:	4618      	mov	r0, r3
   2abb4:	e7d8      	b.n	2ab68 <onoff_request+0x56>
   2abb6:	606e      	str	r6, [r5, #4]
	list->head = node;
   2abb8:	602e      	str	r6, [r5, #0]
}
   2abba:	e7dc      	b.n	2ab76 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   2abbc:	2102      	movs	r1, #2
   2abbe:	4628      	mov	r0, r5
   2abc0:	f7e8 fb82 	bl	132c8 <process_event>
   2abc4:	e7dd      	b.n	2ab82 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   2abc6:	2300      	movs	r3, #0
   2abc8:	4662      	mov	r2, ip
   2abca:	4631      	mov	r1, r6
   2abcc:	4628      	mov	r0, r5
   2abce:	f7ff ff4b 	bl	2aa68 <notify_one>
   2abd2:	e7d6      	b.n	2ab82 <onoff_request+0x70>

0002abd4 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2abd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2abd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2abda:	f3ef 8211 	mrs	r2, BASEPRI
   2abde:	f383 8812 	msr	BASEPRI_MAX, r3
   2abe2:	f3bf 8f6f 	isb	sy
   2abe6:	4611      	mov	r1, r2
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2abe8:	8b03      	ldrh	r3, [r0, #24]
   2abea:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2abee:	2b02      	cmp	r3, #2
   2abf0:	d007      	beq.n	2ac02 <onoff_release+0x2e>
		if (state == ONOFF_STATE_ERROR) {
   2abf2:	2b01      	cmp	r3, #1
   2abf4:	d002      	beq.n	2abfc <onoff_release+0x28>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2abf6:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
   2abfa:	e008      	b.n	2ac0e <onoff_release+0x3a>
			rv = -EIO;
   2abfc:	f06f 0404 	mvn.w	r4, #4
   2ac00:	e005      	b.n	2ac0e <onoff_release+0x3a>
   2ac02:	461c      	mov	r4, r3
	mgr->refs -= 1U;
   2ac04:	8b43      	ldrh	r3, [r0, #26]
   2ac06:	3b01      	subs	r3, #1
   2ac08:	b29b      	uxth	r3, r3
   2ac0a:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2ac0c:	b12b      	cbz	r3, 2ac1a <onoff_release+0x46>
	__asm__ volatile(
   2ac0e:	f381 8811 	msr	BASEPRI, r1
   2ac12:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   2ac16:	4620      	mov	r0, r4
   2ac18:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
   2ac1a:	2102      	movs	r1, #2
   2ac1c:	f7e8 fb54 	bl	132c8 <process_event>
   2ac20:	e7f9      	b.n	2ac16 <onoff_release+0x42>

0002ac22 <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
   2ac22:	b1c0      	cbz	r0, 2ac56 <onoff_cancel+0x34>
   2ac24:	b1d1      	cbz	r1, 2ac5c <onoff_cancel+0x3a>
{
   2ac26:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ac28:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ac2c:	f3ef 8511 	mrs	r5, BASEPRI
   2ac30:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac34:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2ac38:	8b03      	ldrh	r3, [r0, #24]
   2ac3a:	f003 0407 	and.w	r4, r3, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   2ac3e:	f7ff fe5a 	bl	2a8f6 <sys_slist_find_and_remove>
   2ac42:	b108      	cbz	r0, 2ac48 <onoff_cancel+0x26>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2ac44:	4620      	mov	r0, r4
   2ac46:	e001      	b.n	2ac4c <onoff_cancel+0x2a>
	int rv = -EALREADY;
   2ac48:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
   2ac4c:	f385 8811 	msr	BASEPRI, r5
   2ac50:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   2ac54:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2ac56:	f06f 0015 	mvn.w	r0, #21
   2ac5a:	4770      	bx	lr
   2ac5c:	f06f 0015 	mvn.w	r0, #21
}
   2ac60:	4770      	bx	lr

0002ac62 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2ac62:	4602      	mov	r2, r0
   2ac64:	b1b0      	cbz	r0, 2ac94 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2ac66:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2ac68:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2ac6c:	2b02      	cmp	r3, #2
   2ac6e:	d00b      	beq.n	2ac88 <sys_notify_validate+0x26>
   2ac70:	2b03      	cmp	r3, #3
   2ac72:	d004      	beq.n	2ac7e <sys_notify_validate+0x1c>
   2ac74:	2b01      	cmp	r3, #1
   2ac76:	d004      	beq.n	2ac82 <sys_notify_validate+0x20>
   2ac78:	f06f 0015 	mvn.w	r0, #21
   2ac7c:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   2ac7e:	6803      	ldr	r3, [r0, #0]
   2ac80:	b15b      	cbz	r3, 2ac9a <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   2ac82:	2000      	movs	r0, #0
   2ac84:	6090      	str	r0, [r2, #8]
   2ac86:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2ac88:	6803      	ldr	r3, [r0, #0]
   2ac8a:	2b00      	cmp	r3, #0
   2ac8c:	d1f9      	bne.n	2ac82 <sys_notify_validate+0x20>
			rv = -EINVAL;
   2ac8e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   2ac92:	4770      	bx	lr
		return -EINVAL;
   2ac94:	f06f 0015 	mvn.w	r0, #21
   2ac98:	4770      	bx	lr
			rv = -EINVAL;
   2ac9a:	f06f 0015 	mvn.w	r0, #21
   2ac9e:	4770      	bx	lr

0002aca0 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2aca0:	b510      	push	{r4, lr}
   2aca2:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2aca4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2aca6:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   2acaa:	6081      	str	r1, [r0, #8]
	switch (method) {
   2acac:	2a02      	cmp	r2, #2
   2acae:	d004      	beq.n	2acba <sys_notify_finalize+0x1a>
   2acb0:	2a03      	cmp	r2, #3
   2acb2:	d105      	bne.n	2acc0 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2acb4:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2acb6:	2000      	movs	r0, #0
		break;
   2acb8:	e004      	b.n	2acc4 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   2acba:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2acbc:	2400      	movs	r4, #0
		break;
   2acbe:	e001      	b.n	2acc4 <sys_notify_finalize+0x24>
	switch (method) {
   2acc0:	2400      	movs	r4, #0
   2acc2:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2acc4:	2200      	movs	r2, #0
   2acc6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2acc8:	b108      	cbz	r0, 2acce <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   2acca:	f7fc fb27 	bl	2731c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2acce:	4620      	mov	r0, r4
   2acd0:	bd10      	pop	{r4, pc}

0002acd2 <extract_decimal>:
{
   2acd2:	4684      	mov	ip, r0
	const char *sp = *str;
   2acd4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   2acd6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
   2acd8:	e006      	b.n	2ace8 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   2acda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2acde:	3201      	adds	r2, #1
   2ace0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   2ace4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   2ace8:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2acea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   2acee:	2909      	cmp	r1, #9
   2acf0:	d9f3      	bls.n	2acda <extract_decimal+0x8>
	*str = sp;
   2acf2:	f8cc 2000 	str.w	r2, [ip]
}
   2acf6:	4770      	bx	lr

0002acf8 <extract_width>:
{
   2acf8:	b530      	push	{r4, r5, lr}
   2acfa:	b083      	sub	sp, #12
   2acfc:	4604      	mov	r4, r0
   2acfe:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   2ad00:	7803      	ldrb	r3, [r0, #0]
   2ad02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ad06:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   2ad08:	460d      	mov	r5, r1
   2ad0a:	780b      	ldrb	r3, [r1, #0]
   2ad0c:	2b2a      	cmp	r3, #42	; 0x2a
   2ad0e:	d018      	beq.n	2ad42 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   2ad10:	a801      	add	r0, sp, #4
   2ad12:	f7ff ffde 	bl	2acd2 <extract_decimal>
	if (sp != wp) {
   2ad16:	9b01      	ldr	r3, [sp, #4]
   2ad18:	429d      	cmp	r5, r3
   2ad1a:	d00f      	beq.n	2ad3c <extract_width+0x44>
		conv->width_present = true;
   2ad1c:	7823      	ldrb	r3, [r4, #0]
   2ad1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ad22:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   2ad24:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   2ad26:	b2db      	uxtb	r3, r3
   2ad28:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   2ad2c:	2800      	cmp	r0, #0
   2ad2e:	db10      	blt.n	2ad52 <extract_width+0x5a>
   2ad30:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   2ad32:	4313      	orrs	r3, r2
   2ad34:	7822      	ldrb	r2, [r4, #0]
   2ad36:	f363 0241 	bfi	r2, r3, #1, #1
   2ad3a:	7022      	strb	r2, [r4, #0]
	return sp;
   2ad3c:	9801      	ldr	r0, [sp, #4]
}
   2ad3e:	b003      	add	sp, #12
   2ad40:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   2ad42:	7843      	ldrb	r3, [r0, #1]
   2ad44:	f043 0301 	orr.w	r3, r3, #1
   2ad48:	7043      	strb	r3, [r0, #1]
		return ++sp;
   2ad4a:	4608      	mov	r0, r1
   2ad4c:	3001      	adds	r0, #1
   2ad4e:	9001      	str	r0, [sp, #4]
   2ad50:	e7f5      	b.n	2ad3e <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   2ad52:	2201      	movs	r2, #1
   2ad54:	e7ed      	b.n	2ad32 <extract_width+0x3a>

0002ad56 <extract_prec>:
{
   2ad56:	b510      	push	{r4, lr}
   2ad58:	b082      	sub	sp, #8
   2ad5a:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   2ad5c:	780b      	ldrb	r3, [r1, #0]
   2ad5e:	2b2e      	cmp	r3, #46	; 0x2e
   2ad60:	bf14      	ite	ne
   2ad62:	2300      	movne	r3, #0
   2ad64:	2301      	moveq	r3, #1
   2ad66:	7842      	ldrb	r2, [r0, #1]
   2ad68:	f363 0241 	bfi	r2, r3, #1, #1
   2ad6c:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   2ad6e:	b1c3      	cbz	r3, 2ada2 <extract_prec+0x4c>
   2ad70:	4604      	mov	r4, r0
	++sp;
   2ad72:	9b01      	ldr	r3, [sp, #4]
   2ad74:	1c5a      	adds	r2, r3, #1
   2ad76:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   2ad78:	785b      	ldrb	r3, [r3, #1]
   2ad7a:	2b2a      	cmp	r3, #42	; 0x2a
   2ad7c:	d013      	beq.n	2ada6 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   2ad7e:	a801      	add	r0, sp, #4
   2ad80:	f7ff ffa7 	bl	2acd2 <extract_decimal>
	conv->prec_value = prec;
   2ad84:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   2ad86:	7823      	ldrb	r3, [r4, #0]
   2ad88:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   2ad8c:	2800      	cmp	r0, #0
   2ad8e:	db12      	blt.n	2adb6 <extract_prec+0x60>
   2ad90:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   2ad92:	4313      	orrs	r3, r2
   2ad94:	7822      	ldrb	r2, [r4, #0]
   2ad96:	f363 0241 	bfi	r2, r3, #1, #1
   2ad9a:	7022      	strb	r2, [r4, #0]
	return sp;
   2ad9c:	9801      	ldr	r0, [sp, #4]
}
   2ad9e:	b002      	add	sp, #8
   2ada0:	bd10      	pop	{r4, pc}
		return sp;
   2ada2:	4608      	mov	r0, r1
   2ada4:	e7fb      	b.n	2ad9e <extract_prec+0x48>
		conv->prec_star = true;
   2ada6:	7843      	ldrb	r3, [r0, #1]
   2ada8:	f043 0304 	orr.w	r3, r3, #4
   2adac:	7043      	strb	r3, [r0, #1]
		return ++sp;
   2adae:	4610      	mov	r0, r2
   2adb0:	3001      	adds	r0, #1
   2adb2:	9001      	str	r0, [sp, #4]
   2adb4:	e7f3      	b.n	2ad9e <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   2adb6:	2201      	movs	r2, #1
   2adb8:	e7eb      	b.n	2ad92 <extract_prec+0x3c>

0002adba <extract_length>:
{
   2adba:	4602      	mov	r2, r0
	switch (*sp) {
   2adbc:	780b      	ldrb	r3, [r1, #0]
   2adbe:	3b4c      	subs	r3, #76	; 0x4c
   2adc0:	2b2e      	cmp	r3, #46	; 0x2e
   2adc2:	d85b      	bhi.n	2ae7c <extract_length+0xc2>
   2adc4:	e8df f003 	tbb	[pc, r3]
   2adc8:	5a5a5a4f 	.word	0x5a5a5a4f
   2adcc:	5a5a5a5a 	.word	0x5a5a5a5a
   2add0:	5a5a5a5a 	.word	0x5a5a5a5a
   2add4:	5a5a5a5a 	.word	0x5a5a5a5a
   2add8:	5a5a5a5a 	.word	0x5a5a5a5a
   2addc:	5a5a5a5a 	.word	0x5a5a5a5a
   2ade0:	5a5a5a5a 	.word	0x5a5a5a5a
   2ade4:	5a3a5a18 	.word	0x5a3a5a18
   2ade8:	5a5a5a29 	.word	0x5a5a5a29
   2adec:	5a5a5a5a 	.word	0x5a5a5a5a
   2adf0:	5a5a5a48 	.word	0x5a5a5a48
   2adf4:	5a5a      	.short	0x5a5a
   2adf6:	41          	.byte	0x41
   2adf7:	00          	.byte	0x00
		if (*++sp == 'h') {
   2adf8:	1c48      	adds	r0, r1, #1
   2adfa:	784b      	ldrb	r3, [r1, #1]
   2adfc:	2b68      	cmp	r3, #104	; 0x68
   2adfe:	d005      	beq.n	2ae0c <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   2ae00:	7853      	ldrb	r3, [r2, #1]
   2ae02:	2102      	movs	r1, #2
   2ae04:	f361 03c6 	bfi	r3, r1, #3, #4
   2ae08:	7053      	strb	r3, [r2, #1]
   2ae0a:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   2ae0c:	7853      	ldrb	r3, [r2, #1]
   2ae0e:	2001      	movs	r0, #1
   2ae10:	f360 03c6 	bfi	r3, r0, #3, #4
   2ae14:	7053      	strb	r3, [r2, #1]
			++sp;
   2ae16:	1c88      	adds	r0, r1, #2
   2ae18:	4770      	bx	lr
		if (*++sp == 'l') {
   2ae1a:	1c48      	adds	r0, r1, #1
   2ae1c:	784b      	ldrb	r3, [r1, #1]
   2ae1e:	2b6c      	cmp	r3, #108	; 0x6c
   2ae20:	d005      	beq.n	2ae2e <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   2ae22:	7853      	ldrb	r3, [r2, #1]
   2ae24:	2103      	movs	r1, #3
   2ae26:	f361 03c6 	bfi	r3, r1, #3, #4
   2ae2a:	7053      	strb	r3, [r2, #1]
   2ae2c:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   2ae2e:	7853      	ldrb	r3, [r2, #1]
   2ae30:	2004      	movs	r0, #4
   2ae32:	f360 03c6 	bfi	r3, r0, #3, #4
   2ae36:	7053      	strb	r3, [r2, #1]
			++sp;
   2ae38:	1c88      	adds	r0, r1, #2
   2ae3a:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   2ae3c:	7853      	ldrb	r3, [r2, #1]
   2ae3e:	2005      	movs	r0, #5
   2ae40:	f360 03c6 	bfi	r3, r0, #3, #4
   2ae44:	7053      	strb	r3, [r2, #1]
		++sp;
   2ae46:	1c48      	adds	r0, r1, #1
		break;
   2ae48:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   2ae4a:	7853      	ldrb	r3, [r2, #1]
   2ae4c:	2006      	movs	r0, #6
   2ae4e:	f360 03c6 	bfi	r3, r0, #3, #4
   2ae52:	7053      	strb	r3, [r2, #1]
		++sp;
   2ae54:	1c48      	adds	r0, r1, #1
		break;
   2ae56:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   2ae58:	7853      	ldrb	r3, [r2, #1]
   2ae5a:	2007      	movs	r0, #7
   2ae5c:	f360 03c6 	bfi	r3, r0, #3, #4
   2ae60:	7053      	strb	r3, [r2, #1]
		++sp;
   2ae62:	1c48      	adds	r0, r1, #1
		break;
   2ae64:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   2ae66:	7853      	ldrb	r3, [r2, #1]
   2ae68:	2008      	movs	r0, #8
   2ae6a:	f360 03c6 	bfi	r3, r0, #3, #4
   2ae6e:	7053      	strb	r3, [r2, #1]
		++sp;
   2ae70:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   2ae72:	7813      	ldrb	r3, [r2, #0]
   2ae74:	f043 0302 	orr.w	r3, r3, #2
   2ae78:	7013      	strb	r3, [r2, #0]
		break;
   2ae7a:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   2ae7c:	7853      	ldrb	r3, [r2, #1]
   2ae7e:	f36f 03c6 	bfc	r3, #3, #4
   2ae82:	7053      	strb	r3, [r2, #1]
		break;
   2ae84:	4608      	mov	r0, r1
}
   2ae86:	4770      	bx	lr

0002ae88 <extract_specifier>:
{
   2ae88:	b500      	push	{lr}
   2ae8a:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   2ae8c:	4608      	mov	r0, r1
   2ae8e:	f810 3b01 	ldrb.w	r3, [r0], #1
   2ae92:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   2ae94:	2b78      	cmp	r3, #120	; 0x78
   2ae96:	d817      	bhi.n	2aec8 <extract_specifier+0x40>
   2ae98:	2b6e      	cmp	r3, #110	; 0x6e
   2ae9a:	d229      	bcs.n	2aef0 <extract_specifier+0x68>
   2ae9c:	2b69      	cmp	r3, #105	; 0x69
   2ae9e:	d813      	bhi.n	2aec8 <extract_specifier+0x40>
   2aea0:	2b58      	cmp	r3, #88	; 0x58
   2aea2:	d317      	bcc.n	2aed4 <extract_specifier+0x4c>
   2aea4:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   2aea8:	fa5f fc8c 	uxtb.w	ip, ip
   2aeac:	2101      	movs	r1, #1
   2aeae:	fa01 f10c 	lsl.w	r1, r1, ip
   2aeb2:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   2aeb6:	d114      	bne.n	2aee2 <extract_specifier+0x5a>
   2aeb8:	f640 0c01 	movw	ip, #2049	; 0x801
   2aebc:	ea11 0f0c 	tst.w	r1, ip
   2aec0:	d155      	bne.n	2af6e <extract_specifier+0xe6>
   2aec2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   2aec6:	d13a      	bne.n	2af3e <extract_specifier+0xb6>
		conv->invalid = true;
   2aec8:	7813      	ldrb	r3, [r2, #0]
   2aeca:	f043 0301 	orr.w	r3, r3, #1
   2aece:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   2aed0:	2100      	movs	r1, #0
		break;
   2aed2:	e042      	b.n	2af5a <extract_specifier+0xd2>
	switch (conv->specifier) {
   2aed4:	2b41      	cmp	r3, #65	; 0x41
   2aed6:	d004      	beq.n	2aee2 <extract_specifier+0x5a>
   2aed8:	d3f6      	bcc.n	2aec8 <extract_specifier+0x40>
   2aeda:	3b45      	subs	r3, #69	; 0x45
   2aedc:	b2db      	uxtb	r3, r3
   2aede:	2b02      	cmp	r3, #2
   2aee0:	d8f2      	bhi.n	2aec8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   2aee2:	7893      	ldrb	r3, [r2, #2]
   2aee4:	2104      	movs	r1, #4
   2aee6:	f361 0302 	bfi	r3, r1, #0, #3
   2aeea:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   2aeec:	2101      	movs	r1, #1
			break;
   2aeee:	e034      	b.n	2af5a <extract_specifier+0xd2>
	switch (conv->specifier) {
   2aef0:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   2aef4:	b2c9      	uxtb	r1, r1
   2aef6:	f04f 0c01 	mov.w	ip, #1
   2aefa:	fa0c fc01 	lsl.w	ip, ip, r1
   2aefe:	f240 4182 	movw	r1, #1154	; 0x482
   2af02:	ea1c 0f01 	tst.w	ip, r1
   2af06:	bf14      	ite	ne
   2af08:	f04f 0e01 	movne.w	lr, #1
   2af0c:	f04f 0e00 	moveq.w	lr, #0
   2af10:	d12d      	bne.n	2af6e <extract_specifier+0xe6>
   2af12:	f01c 0f24 	tst.w	ip, #36	; 0x24
   2af16:	bf14      	ite	ne
   2af18:	2101      	movne	r1, #1
   2af1a:	2100      	moveq	r1, #0
   2af1c:	d139      	bne.n	2af92 <extract_specifier+0x10a>
   2af1e:	f01c 0c01 	ands.w	ip, ip, #1
   2af22:	d0d1      	beq.n	2aec8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   2af24:	7893      	ldrb	r3, [r2, #2]
   2af26:	f04f 0e03 	mov.w	lr, #3
   2af2a:	f36e 0302 	bfi	r3, lr, #0, #3
   2af2e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   2af30:	7853      	ldrb	r3, [r2, #1]
   2af32:	f003 0378 	and.w	r3, r3, #120	; 0x78
   2af36:	2b40      	cmp	r3, #64	; 0x40
   2af38:	d10f      	bne.n	2af5a <extract_specifier+0xd2>
			unsupported = true;
   2af3a:	4661      	mov	r1, ip
   2af3c:	e00d      	b.n	2af5a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   2af3e:	7891      	ldrb	r1, [r2, #2]
   2af40:	f04f 0c01 	mov.w	ip, #1
   2af44:	f36c 0102 	bfi	r1, ip, #0, #3
   2af48:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   2af4a:	7851      	ldrb	r1, [r2, #1]
   2af4c:	f001 0178 	and.w	r1, r1, #120	; 0x78
   2af50:	2940      	cmp	r1, #64	; 0x40
   2af52:	d013      	beq.n	2af7c <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   2af54:	2b63      	cmp	r3, #99	; 0x63
   2af56:	d018      	beq.n	2af8a <extract_specifier+0x102>
	bool unsupported = false;
   2af58:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   2af5a:	7813      	ldrb	r3, [r2, #0]
   2af5c:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   2af60:	ea41 010c 	orr.w	r1, r1, ip
   2af64:	f361 0341 	bfi	r3, r1, #1, #1
   2af68:	7013      	strb	r3, [r2, #0]
}
   2af6a:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   2af6e:	7891      	ldrb	r1, [r2, #2]
   2af70:	f04f 0c02 	mov.w	ip, #2
   2af74:	f36c 0102 	bfi	r1, ip, #0, #3
   2af78:	7091      	strb	r1, [r2, #2]
   2af7a:	e7e6      	b.n	2af4a <extract_specifier+0xc2>
			conv->invalid = true;
   2af7c:	f892 c000 	ldrb.w	ip, [r2]
   2af80:	f04c 0c01 	orr.w	ip, ip, #1
   2af84:	f882 c000 	strb.w	ip, [r2]
   2af88:	e7e4      	b.n	2af54 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   2af8a:	3900      	subs	r1, #0
   2af8c:	bf18      	it	ne
   2af8e:	2101      	movne	r1, #1
   2af90:	e7e3      	b.n	2af5a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   2af92:	7893      	ldrb	r3, [r2, #2]
   2af94:	f04f 0c03 	mov.w	ip, #3
   2af98:	f36c 0302 	bfi	r3, ip, #0, #3
   2af9c:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   2af9e:	7853      	ldrb	r3, [r2, #1]
   2afa0:	f013 0f78 	tst.w	r3, #120	; 0x78
   2afa4:	d1d9      	bne.n	2af5a <extract_specifier+0xd2>
	bool unsupported = false;
   2afa6:	4671      	mov	r1, lr
   2afa8:	e7d7      	b.n	2af5a <extract_specifier+0xd2>

0002afaa <extract_conversion>:
{
   2afaa:	b510      	push	{r4, lr}
   2afac:	4604      	mov	r4, r0
   2afae:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   2afb0:	2300      	movs	r3, #0
   2afb2:	6023      	str	r3, [r4, #0]
   2afb4:	6063      	str	r3, [r4, #4]
   2afb6:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   2afb8:	784b      	ldrb	r3, [r1, #1]
   2afba:	2b25      	cmp	r3, #37	; 0x25
   2afbc:	d014      	beq.n	2afe8 <extract_conversion+0x3e>
   2afbe:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   2afc0:	4620      	mov	r0, r4
   2afc2:	f7e8 fa37 	bl	13434 <extract_flags>
   2afc6:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   2afc8:	4620      	mov	r0, r4
   2afca:	f7ff fe95 	bl	2acf8 <extract_width>
   2afce:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   2afd0:	4620      	mov	r0, r4
   2afd2:	f7ff fec0 	bl	2ad56 <extract_prec>
   2afd6:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   2afd8:	4620      	mov	r0, r4
   2afda:	f7ff feee 	bl	2adba <extract_length>
   2afde:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   2afe0:	4620      	mov	r0, r4
   2afe2:	f7ff ff51 	bl	2ae88 <extract_specifier>
}
   2afe6:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   2afe8:	3002      	adds	r0, #2
   2afea:	70e3      	strb	r3, [r4, #3]
		return sp;
   2afec:	e7fb      	b.n	2afe6 <extract_conversion+0x3c>

0002afee <conversion_radix>:
	switch (specifier) {
   2afee:	286f      	cmp	r0, #111	; 0x6f
   2aff0:	d00c      	beq.n	2b00c <conversion_radix+0x1e>
   2aff2:	d905      	bls.n	2b000 <conversion_radix+0x12>
   2aff4:	2870      	cmp	r0, #112	; 0x70
   2aff6:	d00b      	beq.n	2b010 <conversion_radix+0x22>
   2aff8:	2878      	cmp	r0, #120	; 0x78
   2affa:	d10b      	bne.n	2b014 <conversion_radix+0x26>
		return 16;
   2affc:	2010      	movs	r0, #16
   2affe:	4770      	bx	lr
	switch (specifier) {
   2b000:	2858      	cmp	r0, #88	; 0x58
   2b002:	d001      	beq.n	2b008 <conversion_radix+0x1a>
   2b004:	200a      	movs	r0, #10
   2b006:	4770      	bx	lr
		return 16;
   2b008:	2010      	movs	r0, #16
   2b00a:	4770      	bx	lr
		return 8;
   2b00c:	2008      	movs	r0, #8
   2b00e:	4770      	bx	lr
		return 16;
   2b010:	2010      	movs	r0, #16
   2b012:	4770      	bx	lr
	switch (specifier) {
   2b014:	200a      	movs	r0, #10
}
   2b016:	4770      	bx	lr

0002b018 <encode_uint>:
{
   2b018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b01c:	4605      	mov	r5, r0
   2b01e:	460c      	mov	r4, r1
   2b020:	4693      	mov	fp, r2
   2b022:	4699      	mov	r9, r3
   2b024:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
   2b026:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2b028:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   2b02c:	f7ff ffdf 	bl	2afee <conversion_radix>
   2b030:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   2b032:	e015      	b.n	2b060 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2b034:	f1ba 0f19 	cmp.w	sl, #25
   2b038:	d820      	bhi.n	2b07c <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   2b03a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2b03c:	3237      	adds	r2, #55	; 0x37
   2b03e:	b2d2      	uxtb	r2, r2
   2b040:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   2b044:	4632      	mov	r2, r6
   2b046:	4643      	mov	r3, r8
   2b048:	4628      	mov	r0, r5
   2b04a:	4621      	mov	r1, r4
   2b04c:	f7d5 f858 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   2b050:	42b5      	cmp	r5, r6
   2b052:	f174 0400 	sbcs.w	r4, r4, #0
   2b056:	d315      	bcc.n	2b084 <encode_uint+0x6c>
   2b058:	454f      	cmp	r7, r9
   2b05a:	d913      	bls.n	2b084 <encode_uint+0x6c>
		value /= radix;
   2b05c:	4605      	mov	r5, r0
   2b05e:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   2b060:	f04f 0800 	mov.w	r8, #0
   2b064:	4632      	mov	r2, r6
   2b066:	4643      	mov	r3, r8
   2b068:	4628      	mov	r0, r5
   2b06a:	4621      	mov	r1, r4
   2b06c:	f7d5 f848 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2b070:	2a09      	cmp	r2, #9
   2b072:	d8df      	bhi.n	2b034 <encode_uint+0x1c>
   2b074:	b2d2      	uxtb	r2, r2
   2b076:	3230      	adds	r2, #48	; 0x30
   2b078:	b2d2      	uxtb	r2, r2
   2b07a:	e7e1      	b.n	2b040 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   2b07c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2b07e:	3257      	adds	r2, #87	; 0x57
   2b080:	b2d2      	uxtb	r2, r2
   2b082:	e7dd      	b.n	2b040 <encode_uint+0x28>
	if (conv->flag_hash) {
   2b084:	f89b 3000 	ldrb.w	r3, [fp]
   2b088:	f013 0f20 	tst.w	r3, #32
   2b08c:	d003      	beq.n	2b096 <encode_uint+0x7e>
		if (radix == 8) {
   2b08e:	2e08      	cmp	r6, #8
   2b090:	d004      	beq.n	2b09c <encode_uint+0x84>
		} else if (radix == 16) {
   2b092:	2e10      	cmp	r6, #16
   2b094:	d009      	beq.n	2b0aa <encode_uint+0x92>
}
   2b096:	4638      	mov	r0, r7
   2b098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   2b09c:	f89b 3002 	ldrb.w	r3, [fp, #2]
   2b0a0:	f043 0308 	orr.w	r3, r3, #8
   2b0a4:	f88b 3002 	strb.w	r3, [fp, #2]
   2b0a8:	e7f5      	b.n	2b096 <encode_uint+0x7e>
			conv->altform_0c = true;
   2b0aa:	f89b 3002 	ldrb.w	r3, [fp, #2]
   2b0ae:	f043 0310 	orr.w	r3, r3, #16
   2b0b2:	f88b 3002 	strb.w	r3, [fp, #2]
   2b0b6:	e7ee      	b.n	2b096 <encode_uint+0x7e>

0002b0b8 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   2b0b8:	7843      	ldrb	r3, [r0, #1]
   2b0ba:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2b0be:	2b07      	cmp	r3, #7
   2b0c0:	d818      	bhi.n	2b0f4 <store_count+0x3c>
   2b0c2:	e8df f003 	tbb	[pc, r3]
   2b0c6:	0604      	.short	0x0604
   2b0c8:	100c0a08 	.word	0x100c0a08
   2b0cc:	1614      	.short	0x1614
		*(int *)dp = count;
   2b0ce:	600a      	str	r2, [r1, #0]
		break;
   2b0d0:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   2b0d2:	700a      	strb	r2, [r1, #0]
		break;
   2b0d4:	4770      	bx	lr
		*(short *)dp = (short)count;
   2b0d6:	800a      	strh	r2, [r1, #0]
		break;
   2b0d8:	4770      	bx	lr
		*(long *)dp = (long)count;
   2b0da:	600a      	str	r2, [r1, #0]
		break;
   2b0dc:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   2b0de:	17d3      	asrs	r3, r2, #31
   2b0e0:	600a      	str	r2, [r1, #0]
   2b0e2:	604b      	str	r3, [r1, #4]
		break;
   2b0e4:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   2b0e6:	17d3      	asrs	r3, r2, #31
   2b0e8:	600a      	str	r2, [r1, #0]
   2b0ea:	604b      	str	r3, [r1, #4]
		break;
   2b0ec:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   2b0ee:	600a      	str	r2, [r1, #0]
		break;
   2b0f0:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   2b0f2:	600a      	str	r2, [r1, #0]
}
   2b0f4:	4770      	bx	lr

0002b0f6 <outs>:
{
   2b0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0fa:	4607      	mov	r7, r0
   2b0fc:	460e      	mov	r6, r1
   2b0fe:	4614      	mov	r4, r2
   2b100:	4698      	mov	r8, r3
	size_t count = 0;
   2b102:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2b104:	e006      	b.n	2b114 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   2b106:	4631      	mov	r1, r6
   2b108:	f814 0b01 	ldrb.w	r0, [r4], #1
   2b10c:	47b8      	blx	r7
		if (rc < 0) {
   2b10e:	2800      	cmp	r0, #0
   2b110:	db09      	blt.n	2b126 <outs+0x30>
		++count;
   2b112:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2b114:	4544      	cmp	r4, r8
   2b116:	d3f6      	bcc.n	2b106 <outs+0x10>
   2b118:	f1b8 0f00 	cmp.w	r8, #0
   2b11c:	d102      	bne.n	2b124 <outs+0x2e>
   2b11e:	7823      	ldrb	r3, [r4, #0]
   2b120:	2b00      	cmp	r3, #0
   2b122:	d1f0      	bne.n	2b106 <outs+0x10>
	return (int)count;
   2b124:	4628      	mov	r0, r5
}
   2b126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b12a <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2b12a:	b470      	push	{r4, r5, r6}
   2b12c:	4603      	mov	r3, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   2b12e:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   2b130:	6845      	ldr	r5, [r0, #4]
   2b132:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   2b134:	69dc      	ldr	r4, [r3, #28]
   2b136:	4284      	cmp	r4, r0
   2b138:	d915      	bls.n	2b166 <ring_buf_put_claim+0x3c>
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
   2b13a:	1a20      	subs	r0, r4, r0
	return buf->size - (buf->put_head - buf->get_tail);
   2b13c:	f8d3 c014 	ldr.w	ip, [r3, #20]
   2b140:	eba5 0c0c 	sub.w	ip, r5, ip
   2b144:	eba4 040c 	sub.w	r4, r4, ip

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
   2b148:	42a2      	cmp	r2, r4
   2b14a:	bf28      	it	cs
   2b14c:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
   2b14e:	4290      	cmp	r0, r2
   2b150:	bf28      	it	cs
   2b152:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
   2b154:	681a      	ldr	r2, [r3, #0]
   2b156:	1bad      	subs	r5, r5, r6
   2b158:	442a      	add	r2, r5
   2b15a:	600a      	str	r2, [r1, #0]
	buf->put_head += size;
   2b15c:	685a      	ldr	r2, [r3, #4]
   2b15e:	4402      	add	r2, r0
   2b160:	605a      	str	r2, [r3, #4]

	return size;
}
   2b162:	bc70      	pop	{r4, r5, r6}
   2b164:	4770      	bx	lr
		wrap_size -= buf->size;
   2b166:	1b00      	subs	r0, r0, r4
		base += buf->size;
   2b168:	4426      	add	r6, r4
   2b16a:	e7e6      	b.n	2b13a <ring_buf_put_claim+0x10>

0002b16c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   2b16c:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   2b16e:	6844      	ldr	r4, [r0, #4]
   2b170:	6883      	ldr	r3, [r0, #8]
   2b172:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
   2b174:	428c      	cmp	r4, r1
   2b176:	bf2c      	ite	cs
   2b178:	2400      	movcs	r4, #0
   2b17a:	2401      	movcc	r4, #1
   2b17c:	b98c      	cbnz	r4, 2b1a2 <ring_buf_put_finish+0x36>
   2b17e:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->put_tail += size;
   2b180:	4419      	add	r1, r3
   2b182:	6081      	str	r1, [r0, #8]
	buf->put_head = buf->put_tail;
   2b184:	6041      	str	r1, [r0, #4]

	wrap_size = buf->put_tail - buf->put_base;
   2b186:	68c5      	ldr	r5, [r0, #12]
   2b188:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
   2b18a:	69c3      	ldr	r3, [r0, #28]
   2b18c:	428b      	cmp	r3, r1
   2b18e:	bf8c      	ite	hi
   2b190:	2000      	movhi	r0, #0
   2b192:	2001      	movls	r0, #1
   2b194:	b908      	cbnz	r0, 2b19a <ring_buf_put_finish+0x2e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
}
   2b196:	bc30      	pop	{r4, r5}
   2b198:	4770      	bx	lr
		buf->put_base += buf->size;
   2b19a:	442b      	add	r3, r5
   2b19c:	60d3      	str	r3, [r2, #12]
	return 0;
   2b19e:	4620      	mov	r0, r4
   2b1a0:	e7f9      	b.n	2b196 <ring_buf_put_finish+0x2a>
		return -EINVAL;
   2b1a2:	f06f 0015 	mvn.w	r0, #21
   2b1a6:	e7f6      	b.n	2b196 <ring_buf_put_finish+0x2a>

0002b1a8 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   2b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b1ac:	b082      	sub	sp, #8
   2b1ae:	4680      	mov	r8, r0
   2b1b0:	460e      	mov	r6, r1
   2b1b2:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2b1b4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2b1b6:	462a      	mov	r2, r5
   2b1b8:	a901      	add	r1, sp, #4
   2b1ba:	4640      	mov	r0, r8
   2b1bc:	f7ff ffb5 	bl	2b12a <ring_buf_put_claim>
   2b1c0:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   2b1c2:	4602      	mov	r2, r0
   2b1c4:	4631      	mov	r1, r6
   2b1c6:	9801      	ldr	r0, [sp, #4]
   2b1c8:	f001 fb10 	bl	2c7ec <memcpy>
		total_size += partial_size;
   2b1cc:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   2b1ce:	4426      	add	r6, r4
	} while (size && partial_size);
   2b1d0:	1b2d      	subs	r5, r5, r4
   2b1d2:	d001      	beq.n	2b1d8 <ring_buf_put+0x30>
   2b1d4:	2c00      	cmp	r4, #0
   2b1d6:	d1ee      	bne.n	2b1b6 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   2b1d8:	4639      	mov	r1, r7
   2b1da:	4640      	mov	r0, r8
   2b1dc:	f7ff ffc6 	bl	2b16c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2b1e0:	4638      	mov	r0, r7
   2b1e2:	b002      	add	sp, #8
   2b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b1e8 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2b1e8:	b470      	push	{r4, r5, r6}
   2b1ea:	4603      	mov	r3, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   2b1ec:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   2b1ee:	6905      	ldr	r5, [r0, #16]
   2b1f0:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   2b1f2:	69dc      	ldr	r4, [r3, #28]
   2b1f4:	4284      	cmp	r4, r0
   2b1f6:	d911      	bls.n	2b21c <ring_buf_get_claim+0x34>
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
   2b1f8:	1a20      	subs	r0, r4, r0
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   2b1fa:	689c      	ldr	r4, [r3, #8]
   2b1fc:	1b64      	subs	r4, r4, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
   2b1fe:	42a2      	cmp	r2, r4
   2b200:	bf28      	it	cs
   2b202:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
   2b204:	4290      	cmp	r0, r2
   2b206:	bf28      	it	cs
   2b208:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
   2b20a:	681a      	ldr	r2, [r3, #0]
   2b20c:	1bad      	subs	r5, r5, r6
   2b20e:	442a      	add	r2, r5
   2b210:	600a      	str	r2, [r1, #0]
	buf->get_head += size;
   2b212:	691a      	ldr	r2, [r3, #16]
   2b214:	4402      	add	r2, r0
   2b216:	611a      	str	r2, [r3, #16]

	return size;
}
   2b218:	bc70      	pop	{r4, r5, r6}
   2b21a:	4770      	bx	lr
		wrap_size -= buf->size;
   2b21c:	1b00      	subs	r0, r0, r4
		base += buf->size;
   2b21e:	4426      	add	r6, r4
   2b220:	e7ea      	b.n	2b1f8 <ring_buf_get_claim+0x10>

0002b222 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   2b222:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   2b224:	6904      	ldr	r4, [r0, #16]
   2b226:	6943      	ldr	r3, [r0, #20]
   2b228:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
   2b22a:	428c      	cmp	r4, r1
   2b22c:	bf2c      	ite	cs
   2b22e:	2400      	movcs	r4, #0
   2b230:	2401      	movcc	r4, #1
   2b232:	b98c      	cbnz	r4, 2b258 <ring_buf_get_finish+0x36>
   2b234:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->get_tail += size;
   2b236:	4419      	add	r1, r3
   2b238:	6141      	str	r1, [r0, #20]
	buf->get_head = buf->get_tail;
   2b23a:	6101      	str	r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
   2b23c:	6985      	ldr	r5, [r0, #24]
   2b23e:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
   2b240:	69c3      	ldr	r3, [r0, #28]
   2b242:	428b      	cmp	r3, r1
   2b244:	bf8c      	ite	hi
   2b246:	2000      	movhi	r0, #0
   2b248:	2001      	movls	r0, #1
   2b24a:	b908      	cbnz	r0, 2b250 <ring_buf_get_finish+0x2e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
}
   2b24c:	bc30      	pop	{r4, r5}
   2b24e:	4770      	bx	lr
		buf->get_base += buf->size;
   2b250:	442b      	add	r3, r5
   2b252:	6193      	str	r3, [r2, #24]
	return 0;
   2b254:	4620      	mov	r0, r4
   2b256:	e7f9      	b.n	2b24c <ring_buf_get_finish+0x2a>
		return -EINVAL;
   2b258:	f06f 0015 	mvn.w	r0, #21
   2b25c:	e7f6      	b.n	2b24c <ring_buf_get_finish+0x2a>

0002b25e <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   2b25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b262:	b082      	sub	sp, #8
   2b264:	4680      	mov	r8, r0
   2b266:	460e      	mov	r6, r1
   2b268:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2b26a:	2700      	movs	r7, #0
   2b26c:	e009      	b.n	2b282 <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
   2b26e:	4602      	mov	r2, r0
   2b270:	9901      	ldr	r1, [sp, #4]
   2b272:	4630      	mov	r0, r6
   2b274:	f001 faba 	bl	2c7ec <memcpy>
			data += partial_size;
   2b278:	4426      	add	r6, r4
		}
		total_size += partial_size;
   2b27a:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   2b27c:	1b2d      	subs	r5, r5, r4
   2b27e:	d009      	beq.n	2b294 <ring_buf_get+0x36>
   2b280:	b144      	cbz	r4, 2b294 <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   2b282:	462a      	mov	r2, r5
   2b284:	a901      	add	r1, sp, #4
   2b286:	4640      	mov	r0, r8
   2b288:	f7ff ffae 	bl	2b1e8 <ring_buf_get_claim>
   2b28c:	4604      	mov	r4, r0
		if (data) {
   2b28e:	2e00      	cmp	r6, #0
   2b290:	d1ed      	bne.n	2b26e <ring_buf_get+0x10>
   2b292:	e7f2      	b.n	2b27a <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   2b294:	4639      	mov	r1, r7
   2b296:	4640      	mov	r0, r8
   2b298:	f7ff ffc3 	bl	2b222 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2b29c:	4638      	mov	r0, r7
   2b29e:	b002      	add	sp, #8
   2b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b2a4 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2b2a4:	b40f      	push	{r0, r1, r2, r3}
   2b2a6:	b500      	push	{lr}
   2b2a8:	b083      	sub	sp, #12
   2b2aa:	a904      	add	r1, sp, #16
   2b2ac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2b2b0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2b2b2:	f7ff f8de 	bl	2a472 <vprintk>

	va_end(ap);
}
   2b2b6:	b003      	add	sp, #12
   2b2b8:	f85d eb04 	ldr.w	lr, [sp], #4
   2b2bc:	b004      	add	sp, #16
   2b2be:	4770      	bx	lr

0002b2c0 <free_space>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL) {
   2b2c0:	6903      	ldr	r3, [r0, #16]
   2b2c2:	f013 0f08 	tst.w	r3, #8
   2b2c6:	d108      	bne.n	2b2da <free_space+0x1a>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2b2c8:	68c3      	ldr	r3, [r0, #12]
   2b2ca:	6802      	ldr	r2, [r0, #0]
   2b2cc:	4293      	cmp	r3, r2
   2b2ce:	d807      	bhi.n	2b2e0 <free_space+0x20>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   2b2d0:	6a03      	ldr	r3, [r0, #32]
   2b2d2:	1a9b      	subs	r3, r3, r2
   2b2d4:	600b      	str	r3, [r1, #0]

	return true;
   2b2d6:	2001      	movs	r0, #1
}
   2b2d8:	4770      	bx	lr
		*res = 0;
   2b2da:	2000      	movs	r0, #0
   2b2dc:	6008      	str	r0, [r1, #0]
		return false;
   2b2de:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2b2e0:	1a9b      	subs	r3, r3, r2
   2b2e2:	600b      	str	r3, [r1, #0]
		return false;
   2b2e4:	2000      	movs	r0, #0
   2b2e6:	4770      	bx	lr

0002b2e8 <available>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool available(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2b2e8:	6903      	ldr	r3, [r0, #16]
   2b2ea:	f013 0f08 	tst.w	r3, #8
   2b2ee:	d107      	bne.n	2b300 <available+0x18>
   2b2f0:	6882      	ldr	r2, [r0, #8]
   2b2f2:	6843      	ldr	r3, [r0, #4]
   2b2f4:	429a      	cmp	r2, r3
   2b2f6:	d803      	bhi.n	2b300 <available+0x18>
		*res = buffer->size - buffer->tmp_rd_idx;
		return true;
	}

	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2b2f8:	1a9b      	subs	r3, r3, r2
   2b2fa:	600b      	str	r3, [r1, #0]

	return false;
   2b2fc:	2000      	movs	r0, #0
}
   2b2fe:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_rd_idx;
   2b300:	6a03      	ldr	r3, [r0, #32]
   2b302:	6882      	ldr	r2, [r0, #8]
   2b304:	1a9b      	subs	r3, r3, r2
   2b306:	600b      	str	r3, [r1, #0]
		return true;
   2b308:	2001      	movs	r0, #1
   2b30a:	4770      	bx	lr

0002b30c <get_usage>:

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   2b30c:	b510      	push	{r4, lr}
   2b30e:	b082      	sub	sp, #8
   2b310:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   2b312:	a901      	add	r1, sp, #4
   2b314:	f7ff ffd4 	bl	2b2c0 <free_space>
   2b318:	b120      	cbz	r0, 2b324 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   2b31a:	68e3      	ldr	r3, [r4, #12]
   2b31c:	9a01      	ldr	r2, [sp, #4]
   2b31e:	4413      	add	r3, r2
   2b320:	3b01      	subs	r3, #1
   2b322:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   2b324:	6a20      	ldr	r0, [r4, #32]
   2b326:	9b01      	ldr	r3, [sp, #4]
   2b328:	1ac0      	subs	r0, r0, r3
}
   2b32a:	3801      	subs	r0, #1
   2b32c:	b002      	add	sp, #8
   2b32e:	bd10      	pop	{r4, pc}

0002b330 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   2b330:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2b332:	6903      	ldr	r3, [r0, #16]
   2b334:	f013 0f04 	tst.w	r3, #4
   2b338:	d100      	bne.n	2b33c <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   2b33a:	bd38      	pop	{r3, r4, r5, pc}
   2b33c:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2b33e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2b340:	f7ff ffe4 	bl	2b30c <get_usage>
   2b344:	4285      	cmp	r5, r0
   2b346:	d902      	bls.n	2b34e <max_utilization_update+0x1e>
   2b348:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2b34a:	6260      	str	r0, [r4, #36]	; 0x24
   2b34c:	e7f5      	b.n	2b33a <max_utilization_update+0xa>
   2b34e:	4620      	mov	r0, r4
   2b350:	f7ff ffdc 	bl	2b30c <get_usage>
   2b354:	e7f9      	b.n	2b34a <max_utilization_update+0x1a>

0002b356 <rd_idx_inc>:
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2b356:	68c3      	ldr	r3, [r0, #12]
	uint32_t i = idx + val;
   2b358:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b35a:	6903      	ldr	r3, [r0, #16]
   2b35c:	f013 0f01 	tst.w	r3, #1
   2b360:	d104      	bne.n	2b36c <rd_idx_inc+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b362:	6a02      	ldr	r2, [r0, #32]
   2b364:	4291      	cmp	r1, r2
   2b366:	d304      	bcc.n	2b372 <rd_idx_inc+0x1c>
   2b368:	1a89      	subs	r1, r1, r2
   2b36a:	e002      	b.n	2b372 <rd_idx_inc+0x1c>
		return i & (buffer->size - 1);
   2b36c:	6a02      	ldr	r2, [r0, #32]
   2b36e:	3a01      	subs	r2, #1
   2b370:	4011      	ands	r1, r2
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2b372:	60c1      	str	r1, [r0, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2b374:	f023 0308 	bic.w	r3, r3, #8
   2b378:	6103      	str	r3, [r0, #16]
}
   2b37a:	4770      	bx	lr

0002b37c <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2b37c:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   2b37e:	2300      	movs	r3, #0
   2b380:	f36f 0300 	bfc	r3, #0, #1
   2b384:	f043 0302 	orr.w	r3, r3, #2
   2b388:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2b38c:	69c2      	ldr	r2, [r0, #28]
   2b38e:	6804      	ldr	r4, [r0, #0]
   2b390:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2b394:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   2b396:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b398:	6902      	ldr	r2, [r0, #16]
   2b39a:	f012 0f01 	tst.w	r2, #1
   2b39e:	d104      	bne.n	2b3aa <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b3a0:	6a04      	ldr	r4, [r0, #32]
   2b3a2:	42a3      	cmp	r3, r4
   2b3a4:	d304      	bcc.n	2b3b0 <add_skip_item+0x34>
   2b3a6:	1b1b      	subs	r3, r3, r4
   2b3a8:	e002      	b.n	2b3b0 <add_skip_item+0x34>
		return i & (buffer->size - 1);
   2b3aa:	6a04      	ldr	r4, [r0, #32]
   2b3ac:	3c01      	subs	r4, #1
   2b3ae:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2b3b0:	6003      	str	r3, [r0, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2b3b2:	68c4      	ldr	r4, [r0, #12]
   2b3b4:	429c      	cmp	r4, r3
   2b3b6:	d00a      	beq.n	2b3ce <add_skip_item+0x52>
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2b3b8:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   2b3ba:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b3bc:	6903      	ldr	r3, [r0, #16]
   2b3be:	f013 0f01 	tst.w	r3, #1
   2b3c2:	d108      	bne.n	2b3d6 <add_skip_item+0x5a>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b3c4:	6a03      	ldr	r3, [r0, #32]
   2b3c6:	4299      	cmp	r1, r3
   2b3c8:	d308      	bcc.n	2b3dc <add_skip_item+0x60>
   2b3ca:	1ac9      	subs	r1, r1, r3
   2b3cc:	e006      	b.n	2b3dc <add_skip_item+0x60>
		buffer->flags |= MPSC_PBUF_FULL;
   2b3ce:	f042 0208 	orr.w	r2, r2, #8
   2b3d2:	6102      	str	r2, [r0, #16]
   2b3d4:	e7f0      	b.n	2b3b8 <add_skip_item+0x3c>
		return i & (buffer->size - 1);
   2b3d6:	6a03      	ldr	r3, [r0, #32]
   2b3d8:	3b01      	subs	r3, #1
   2b3da:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2b3dc:	6041      	str	r1, [r0, #4]
}
   2b3de:	bc10      	pop	{r4}
   2b3e0:	4770      	bx	lr

0002b3e2 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   2b3e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3e6:	b083      	sub	sp, #12
   2b3e8:	4604      	mov	r4, r0
   2b3ea:	9101      	str	r1, [sp, #4]
   2b3ec:	4617      	mov	r7, r2
   2b3ee:	4698      	mov	r8, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2b3f0:	69c5      	ldr	r5, [r0, #28]
   2b3f2:	68c6      	ldr	r6, [r0, #12]
   2b3f4:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2b3f8:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   2b3fc:	f003 0303 	and.w	r3, r3, #3
   2b400:	2b02      	cmp	r3, #2
   2b402:	d024      	beq.n	2b44e <drop_item_locked+0x6c>
	return 0;
   2b404:	2100      	movs	r1, #0
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   2b406:	2300      	movs	r3, #0
   2b408:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
   2b40a:	f8c8 3000 	str.w	r3, [r8]

	if (skip_wlen) {
   2b40e:	bb19      	cbnz	r1, 2b458 <drop_item_locked+0x76>
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2b410:	6923      	ldr	r3, [r4, #16]
   2b412:	f013 0f02 	tst.w	r3, #2
   2b416:	d073      	beq.n	2b500 <drop_item_locked+0x11e>
		return false;
	}

	uint32_t rd_wlen = buffer->get_wlen(item);
   2b418:	69a3      	ldr	r3, [r4, #24]
   2b41a:	4658      	mov	r0, fp
   2b41c:	4798      	blx	r3
   2b41e:	4682      	mov	sl, r0
	return item->hdr.valid;
   2b420:	f815 9026 	ldrb.w	r9, [r5, r6, lsl #2]

	/* If packet is busy need to be ommited. */
	if (!is_valid(item)) {
   2b424:	f019 0901 	ands.w	r9, r9, #1
   2b428:	d06c      	beq.n	2b504 <drop_item_locked+0x122>
		return false;
	} else if (item->hdr.busy) {
   2b42a:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   2b42e:	f013 0f02 	tst.w	r3, #2
   2b432:	d039      	beq.n	2b4a8 <drop_item_locked+0xc6>
		MPSC_PBUF_DBG(buffer, "no space: Found busy packet %p (len:%d)", item, rd_wlen);
		/* Add skip packet before claimed packet. */
		if (free_wlen) {
   2b434:	9b01      	ldr	r3, [sp, #4]
   2b436:	b9bb      	cbnz	r3, 2b468 <drop_item_locked+0x86>
			add_skip_item(buffer, free_wlen);
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
		}
		/* Move all indexes forward, after claimed packet. */
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2b438:	6862      	ldr	r2, [r4, #4]
	uint32_t i = idx + val;
   2b43a:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b43c:	6923      	ldr	r3, [r4, #16]
   2b43e:	f013 0001 	ands.w	r0, r3, #1
   2b442:	d116      	bne.n	2b472 <drop_item_locked+0x90>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b444:	6a21      	ldr	r1, [r4, #32]
   2b446:	428a      	cmp	r2, r1
   2b448:	d316      	bcc.n	2b478 <drop_item_locked+0x96>
   2b44a:	1a52      	subs	r2, r2, r1
   2b44c:	e014      	b.n	2b478 <drop_item_locked+0x96>
		return item->skip.len;
   2b44e:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   2b452:	f3c1 019d 	ubfx	r1, r1, #2, #30
   2b456:	e7d6      	b.n	2b406 <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
   2b458:	4620      	mov	r0, r4
   2b45a:	f7ff ff7c 	bl	2b356 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2b45e:	68e3      	ldr	r3, [r4, #12]
   2b460:	60a3      	str	r3, [r4, #8]
		return true;
   2b462:	f04f 0901 	mov.w	r9, #1
   2b466:	e04d      	b.n	2b504 <drop_item_locked+0x122>
			add_skip_item(buffer, free_wlen);
   2b468:	4619      	mov	r1, r3
   2b46a:	4620      	mov	r0, r4
   2b46c:	f7ff ff86 	bl	2b37c <add_skip_item>
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
   2b470:	e7e2      	b.n	2b438 <drop_item_locked+0x56>
		return i & (buffer->size - 1);
   2b472:	6a21      	ldr	r1, [r4, #32]
   2b474:	3901      	subs	r1, #1
   2b476:	400a      	ands	r2, r1
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2b478:	6062      	str	r2, [r4, #4]

		/* If allocation wrapped around the buffer and found busy packet
		 * that was already ommited, skip it again.
		 */
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2b47a:	68e1      	ldr	r1, [r4, #12]
   2b47c:	68a2      	ldr	r2, [r4, #8]
   2b47e:	4291      	cmp	r1, r2
   2b480:	d006      	beq.n	2b490 <drop_item_locked+0xae>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
		}

		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   2b482:	68a2      	ldr	r2, [r4, #8]
   2b484:	6022      	str	r2, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   2b486:	60e2      	str	r2, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   2b488:	f043 0308 	orr.w	r3, r3, #8
   2b48c:	6123      	str	r3, [r4, #16]
   2b48e:	e039      	b.n	2b504 <drop_item_locked+0x122>
	uint32_t i = idx + val;
   2b490:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b492:	b920      	cbnz	r0, 2b49e <drop_item_locked+0xbc>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b494:	6a21      	ldr	r1, [r4, #32]
   2b496:	428a      	cmp	r2, r1
   2b498:	d304      	bcc.n	2b4a4 <drop_item_locked+0xc2>
   2b49a:	1a52      	subs	r2, r2, r1
   2b49c:	e002      	b.n	2b4a4 <drop_item_locked+0xc2>
		return i & (buffer->size - 1);
   2b49e:	6a21      	ldr	r1, [r4, #32]
   2b4a0:	3901      	subs	r1, #1
   2b4a2:	400a      	ands	r2, r1
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   2b4a4:	60a2      	str	r2, [r4, #8]
   2b4a6:	e7ec      	b.n	2b482 <drop_item_locked+0xa0>
	} else {
		/* Prepare packet dropping. */
		rd_idx_inc(buffer, rd_wlen);
   2b4a8:	4601      	mov	r1, r0
   2b4aa:	4620      	mov	r0, r4
   2b4ac:	f7ff ff53 	bl	2b356 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2b4b0:	68e3      	ldr	r3, [r4, #12]
   2b4b2:	60a3      	str	r3, [r4, #8]
		/* Temporary move tmp_wr idx forward to ensure that packet
		 * will not be dropped twice and content will not be
		 * overwritten.
		 */
		if (free_wlen) {
   2b4b4:	9b01      	ldr	r3, [sp, #4]
   2b4b6:	b123      	cbz	r3, 2b4c2 <drop_item_locked+0xe0>
					.valid = 0,
					.busy = 0
				}
			};

			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   2b4b8:	69e3      	ldr	r3, [r4, #28]
   2b4ba:	6822      	ldr	r2, [r4, #0]
   2b4bc:	2100      	movs	r1, #0
   2b4be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2b4c2:	9b01      	ldr	r3, [sp, #4]
   2b4c4:	4453      	add	r3, sl
   2b4c6:	f8c8 3000 	str.w	r3, [r8]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2b4ca:	6822      	ldr	r2, [r4, #0]
	uint32_t i = idx + val;
   2b4cc:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b4ce:	6922      	ldr	r2, [r4, #16]
   2b4d0:	f012 0f01 	tst.w	r2, #1
   2b4d4:	d104      	bne.n	2b4e0 <drop_item_locked+0xfe>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b4d6:	6a21      	ldr	r1, [r4, #32]
   2b4d8:	428b      	cmp	r3, r1
   2b4da:	d304      	bcc.n	2b4e6 <drop_item_locked+0x104>
   2b4dc:	1a5b      	subs	r3, r3, r1
   2b4de:	e002      	b.n	2b4e6 <drop_item_locked+0x104>
		return i & (buffer->size - 1);
   2b4e0:	6a21      	ldr	r1, [r4, #32]
   2b4e2:	3901      	subs	r1, #1
   2b4e4:	400b      	ands	r3, r1
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2b4e6:	6023      	str	r3, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2b4e8:	f042 0208 	orr.w	r2, r2, #8
   2b4ec:	6122      	str	r2, [r4, #16]
		item->hdr.valid = 0;
   2b4ee:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
   2b4f2:	f36f 0300 	bfc	r3, #0, #1
   2b4f6:	f805 3026 	strb.w	r3, [r5, r6, lsl #2]
		*item_to_drop = item;
   2b4fa:	f8c7 b000 	str.w	fp, [r7]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   2b4fe:	e001      	b.n	2b504 <drop_item_locked+0x122>
		return false;
   2b500:	f04f 0900 	mov.w	r9, #0
			       item, rd_wlen);
	}

	return true;
}
   2b504:	4648      	mov	r0, r9
   2b506:	b003      	add	sp, #12
   2b508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b50c <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   2b50c:	b430      	push	{r4, r5}
	uint32_t i = idx + val;
   2b50e:	1853      	adds	r3, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b510:	6904      	ldr	r4, [r0, #16]
   2b512:	f014 0f01 	tst.w	r4, #1
   2b516:	d104      	bne.n	2b522 <post_drop_action+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b518:	6a05      	ldr	r5, [r0, #32]
   2b51a:	42ab      	cmp	r3, r5
   2b51c:	d304      	bcc.n	2b528 <post_drop_action+0x1c>
   2b51e:	1b5b      	subs	r3, r3, r5
   2b520:	e002      	b.n	2b528 <post_drop_action+0x1c>
		return i & (buffer->size - 1);
   2b522:	6a05      	ldr	r5, [r0, #32]
   2b524:	3d01      	subs	r5, #1
   2b526:	402b      	ands	r3, r5
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   2b528:	6805      	ldr	r5, [r0, #0]
   2b52a:	429d      	cmp	r5, r3
   2b52c:	d014      	beq.n	2b558 <post_drop_action+0x4c>
		buffer->flags &= ~MPSC_PBUF_FULL;
		return;
	}

	/* Operation interrupted, mark area as to be skipped. */
	union mpsc_pbuf_generic skip = {
   2b52e:	2300      	movs	r3, #0
   2b530:	f36f 0300 	bfc	r3, #0, #1
   2b534:	f043 0302 	orr.w	r3, r3, #2
   2b538:	f362 039f 	bfi	r3, r2, #2, #30
			.busy = 1,
			.len = tmp_wr_idx_shift
		}
	};

	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2b53c:	69c4      	ldr	r4, [r0, #28]
   2b53e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   2b542:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   2b544:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b546:	6902      	ldr	r2, [r0, #16]
   2b548:	f012 0f01 	tst.w	r2, #1
   2b54c:	d109      	bne.n	2b562 <post_drop_action+0x56>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b54e:	6a02      	ldr	r2, [r0, #32]
   2b550:	4293      	cmp	r3, r2
   2b552:	d309      	bcc.n	2b568 <post_drop_action+0x5c>
   2b554:	1a9b      	subs	r3, r3, r2
   2b556:	e007      	b.n	2b568 <post_drop_action+0x5c>
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   2b558:	6001      	str	r1, [r0, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   2b55a:	f024 0408 	bic.w	r4, r4, #8
   2b55e:	6104      	str	r4, [r0, #16]
		return;
   2b560:	e003      	b.n	2b56a <post_drop_action+0x5e>
		return i & (buffer->size - 1);
   2b562:	6a02      	ldr	r2, [r0, #32]
   2b564:	3a01      	subs	r2, #1
   2b566:	4013      	ands	r3, r2
	buffer->wr_idx = idx_inc(buffer,
   2b568:	6043      	str	r3, [r0, #4]
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   2b56a:	bc30      	pop	{r4, r5}
   2b56c:	4770      	bx	lr

0002b56e <mpsc_pbuf_init>:
{
   2b56e:	b538      	push	{r3, r4, r5, lr}
   2b570:	4604      	mov	r4, r0
   2b572:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   2b574:	221c      	movs	r2, #28
   2b576:	2100      	movs	r1, #0
   2b578:	f001 f967 	bl	2c84a <memset>
	buffer->get_wlen = cfg->get_wlen;
   2b57c:	68eb      	ldr	r3, [r5, #12]
   2b57e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2b580:	68ab      	ldr	r3, [r5, #8]
   2b582:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2b584:	682b      	ldr	r3, [r5, #0]
   2b586:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   2b588:	686b      	ldr	r3, [r5, #4]
   2b58a:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   2b58c:	2200      	movs	r2, #0
   2b58e:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   2b590:	692a      	ldr	r2, [r5, #16]
   2b592:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   2b594:	b12b      	cbz	r3, 2b5a2 <mpsc_pbuf_init+0x34>
   2b596:	1e59      	subs	r1, r3, #1
   2b598:	420b      	tst	r3, r1
   2b59a:	d102      	bne.n	2b5a2 <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2b59c:	f042 0201 	orr.w	r2, r2, #1
   2b5a0:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   2b5a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b5a6:	2201      	movs	r2, #1
   2b5a8:	2100      	movs	r1, #0
   2b5aa:	f005 fbfb 	bl	30da4 <z_impl_k_sem_init>
}
   2b5ae:	bd38      	pop	{r3, r4, r5, pc}

0002b5b0 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   2b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b5b4:	b087      	sub	sp, #28
   2b5b6:	469a      	mov	sl, r3
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   2b5b8:	2300      	movs	r3, #0
   2b5ba:	9305      	str	r3, [sp, #20]
	bool cont = true;
	uint32_t free_wlen;
	uint32_t tmp_wr_idx_shift = 0;
   2b5bc:	9303      	str	r3, [sp, #12]
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   2b5be:	6a03      	ldr	r3, [r0, #32]
   2b5c0:	428b      	cmp	r3, r1
   2b5c2:	f0c0 8089 	bcc.w	2b6d8 <mpsc_pbuf_alloc+0x128>
   2b5c6:	4604      	mov	r4, r0
   2b5c8:	4688      	mov	r8, r1
   2b5ca:	4691      	mov	r9, r2
	uint32_t tmp_wr_idx_val = 0;
   2b5cc:	2300      	movs	r3, #0
   2b5ce:	9301      	str	r3, [sp, #4]
	bool cont = true;
   2b5d0:	2701      	movs	r7, #1
	union mpsc_pbuf_generic *item = NULL;
   2b5d2:	469b      	mov	fp, r3
   2b5d4:	e040      	b.n	2b658 <mpsc_pbuf_alloc+0xa8>
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   2b5d6:	9901      	ldr	r1, [sp, #4]
   2b5d8:	4620      	mov	r0, r4
   2b5da:	f7ff ff97 	bl	2b50c <post_drop_action>
			tmp_wr_idx_shift = 0;
   2b5de:	2300      	movs	r3, #0
   2b5e0:	9303      	str	r3, [sp, #12]
   2b5e2:	e045      	b.n	2b670 <mpsc_pbuf_alloc+0xc0>

		wrap = free_space(buffer, &free_wlen);

		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2b5e4:	69e3      	ldr	r3, [r4, #28]
   2b5e6:	6822      	ldr	r2, [r4, #0]
			item =
   2b5e8:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   2b5ec:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   2b5f0:	f36f 0100 	bfc	r1, #0, #1
   2b5f4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   2b5f8:	b2c9      	uxtb	r1, r1
   2b5fa:	f36f 0141 	bfc	r1, #1, #1
   2b5fe:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2b602:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   2b604:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b606:	6922      	ldr	r2, [r4, #16]
   2b608:	f012 0f01 	tst.w	r2, #1
   2b60c:	d104      	bne.n	2b618 <mpsc_pbuf_alloc+0x68>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b60e:	6a21      	ldr	r1, [r4, #32]
   2b610:	428b      	cmp	r3, r1
   2b612:	d304      	bcc.n	2b61e <mpsc_pbuf_alloc+0x6e>
   2b614:	1a5b      	subs	r3, r3, r1
   2b616:	e002      	b.n	2b61e <mpsc_pbuf_alloc+0x6e>
		return i & (buffer->size - 1);
   2b618:	6a21      	ldr	r1, [r4, #32]
   2b61a:	3901      	subs	r1, #1
   2b61c:	400b      	ands	r3, r1
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2b61e:	6023      	str	r3, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2b620:	68e1      	ldr	r1, [r4, #12]
   2b622:	4299      	cmp	r1, r3
   2b624:	d001      	beq.n	2b62a <mpsc_pbuf_alloc+0x7a>
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   2b626:	2700      	movs	r7, #0
   2b628:	e008      	b.n	2b63c <mpsc_pbuf_alloc+0x8c>
		buffer->flags |= MPSC_PBUF_FULL;
   2b62a:	f042 0208 	orr.w	r2, r2, #8
   2b62e:	6122      	str	r2, [r4, #16]
			cont = false;
   2b630:	2700      	movs	r7, #0
   2b632:	e003      	b.n	2b63c <mpsc_pbuf_alloc+0x8c>
		} else if (wrap) {
			add_skip_item(buffer, free_wlen);
   2b634:	4620      	mov	r0, r4
   2b636:	f7ff fea1 	bl	2b37c <add_skip_item>
			cont = true;
   2b63a:	4637      	mov	r7, r6
   2b63c:	f385 8811 	msr	BASEPRI, r5
   2b640:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   2b644:	9905      	ldr	r1, [sp, #20]
   2b646:	b129      	cbz	r1, 2b654 <mpsc_pbuf_alloc+0xa4>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   2b648:	6963      	ldr	r3, [r4, #20]
   2b64a:	b10b      	cbz	r3, 2b650 <mpsc_pbuf_alloc+0xa0>
				buffer->notify_drop(buffer, dropped_item);
   2b64c:	4620      	mov	r0, r4
   2b64e:	4798      	blx	r3
			}
			dropped_item = NULL;
   2b650:	2300      	movs	r3, #0
   2b652:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
   2b654:	2f00      	cmp	r7, #0
   2b656:	d041      	beq.n	2b6dc <mpsc_pbuf_alloc+0x12c>
	__asm__ volatile(
   2b658:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b65c:	f3ef 8511 	mrs	r5, BASEPRI
   2b660:	f383 8812 	msr	BASEPRI_MAX, r3
   2b664:	f3bf 8f6f 	isb	sy
   2b668:	9500      	str	r5, [sp, #0]
		if (tmp_wr_idx_shift) {
   2b66a:	9a03      	ldr	r2, [sp, #12]
   2b66c:	2a00      	cmp	r2, #0
   2b66e:	d1b2      	bne.n	2b5d6 <mpsc_pbuf_alloc+0x26>
		wrap = free_space(buffer, &free_wlen);
   2b670:	a904      	add	r1, sp, #16
   2b672:	4620      	mov	r0, r4
   2b674:	f7ff fe24 	bl	2b2c0 <free_space>
   2b678:	4606      	mov	r6, r0
		if (free_wlen >= wlen) {
   2b67a:	9904      	ldr	r1, [sp, #16]
   2b67c:	4541      	cmp	r1, r8
   2b67e:	d2b1      	bcs.n	2b5e4 <mpsc_pbuf_alloc+0x34>
		} else if (wrap) {
   2b680:	2800      	cmp	r0, #0
   2b682:	d1d7      	bne.n	2b634 <mpsc_pbuf_alloc+0x84>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2b684:	ea5a 0309 	orrs.w	r3, sl, r9
   2b688:	d10b      	bne.n	2b6a2 <mpsc_pbuf_alloc+0xf2>
		} else if (cont) {
   2b68a:	2f00      	cmp	r7, #0
   2b68c:	d0d6      	beq.n	2b63c <mpsc_pbuf_alloc+0x8c>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   2b68e:	6823      	ldr	r3, [r4, #0]
   2b690:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
   2b692:	ab03      	add	r3, sp, #12
   2b694:	aa05      	add	r2, sp, #20
   2b696:	9904      	ldr	r1, [sp, #16]
   2b698:	4620      	mov	r0, r4
   2b69a:	f7ff fea2 	bl	2b3e2 <drop_item_locked>
   2b69e:	4607      	mov	r7, r0
   2b6a0:	e7cc      	b.n	2b63c <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2b6a2:	f005 fa67 	bl	30b74 <k_is_in_isr>
   2b6a6:	2800      	cmp	r0, #0
   2b6a8:	d1ef      	bne.n	2b68a <mpsc_pbuf_alloc+0xda>
	__asm__ volatile(
   2b6aa:	9b00      	ldr	r3, [sp, #0]
   2b6ac:	f383 8811 	msr	BASEPRI, r3
   2b6b0:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   2b6b4:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   2b6b8:	464a      	mov	r2, r9
   2b6ba:	4653      	mov	r3, sl
   2b6bc:	f7fa fdfe 	bl	262bc <z_impl_k_sem_take>
	__asm__ volatile(
   2b6c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b6c4:	f3ef 8511 	mrs	r5, BASEPRI
   2b6c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2b6cc:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   2b6d0:	fab0 f780 	clz	r7, r0
   2b6d4:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2b6d6:	e7b1      	b.n	2b63c <mpsc_pbuf_alloc+0x8c>
		return NULL;
   2b6d8:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2b6dc:	4658      	mov	r0, fp
   2b6de:	b007      	add	sp, #28
   2b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b6e4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2b6e4:	b570      	push	{r4, r5, r6, lr}
   2b6e6:	4604      	mov	r4, r0
   2b6e8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2b6ea:	6983      	ldr	r3, [r0, #24]
   2b6ec:	4608      	mov	r0, r1
   2b6ee:	4798      	blx	r3
   2b6f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b6f4:	f3ef 8611 	mrs	r6, BASEPRI
   2b6f8:	f383 8812 	msr	BASEPRI_MAX, r3
   2b6fc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2b700:	782b      	ldrb	r3, [r5, #0]
   2b702:	f043 0301 	orr.w	r3, r3, #1
   2b706:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2b708:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   2b70a:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b70c:	6923      	ldr	r3, [r4, #16]
   2b70e:	f013 0f01 	tst.w	r3, #1
   2b712:	d104      	bne.n	2b71e <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b714:	6a23      	ldr	r3, [r4, #32]
   2b716:	4298      	cmp	r0, r3
   2b718:	d304      	bcc.n	2b724 <mpsc_pbuf_commit+0x40>
   2b71a:	1ac0      	subs	r0, r0, r3
   2b71c:	e002      	b.n	2b724 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   2b71e:	6a23      	ldr	r3, [r4, #32]
   2b720:	3b01      	subs	r3, #1
   2b722:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2b724:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   2b726:	4620      	mov	r0, r4
   2b728:	f7ff fe02 	bl	2b330 <max_utilization_update>
	__asm__ volatile(
   2b72c:	f386 8811 	msr	BASEPRI, r6
   2b730:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   2b734:	bd70      	pop	{r4, r5, r6, pc}

0002b736 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2b736:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b738:	b083      	sub	sp, #12
   2b73a:	4604      	mov	r4, r0
   2b73c:	e02e      	b.n	2b79c <mpsc_pbuf_claim+0x66>
		return item->skip.len;
   2b73e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   2b742:	0880      	lsrs	r0, r0, #2
   2b744:	d14e      	bne.n	2b7e4 <mpsc_pbuf_claim+0xae>
   2b746:	e044      	b.n	2b7d2 <mpsc_pbuf_claim+0x9c>
		return i & (buffer->size - 1);
   2b748:	6a22      	ldr	r2, [r4, #32]
   2b74a:	3a01      	subs	r2, #1
   2b74c:	4013      	ands	r3, r2
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   2b74e:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				rd_idx_inc(buffer, inc);
   2b750:	4620      	mov	r0, r4
   2b752:	f7ff fe00 	bl	2b356 <rd_idx_inc>
				cont = true;
   2b756:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   2b758:	e01b      	b.n	2b792 <mpsc_pbuf_claim+0x5c>
			} else {
				item->hdr.busy = 1;
   2b75a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   2b75e:	f041 0102 	orr.w	r1, r1, #2
   2b762:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   2b766:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   2b768:	69a3      	ldr	r3, [r4, #24]
   2b76a:	4630      	mov	r0, r6
   2b76c:	4798      	blx	r3
	uint32_t i = idx + val;
   2b76e:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b770:	6923      	ldr	r3, [r4, #16]
   2b772:	f013 0f01 	tst.w	r3, #1
   2b776:	d104      	bne.n	2b782 <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b778:	6a23      	ldr	r3, [r4, #32]
   2b77a:	4298      	cmp	r0, r3
   2b77c:	d304      	bcc.n	2b788 <mpsc_pbuf_claim+0x52>
   2b77e:	1ac0      	subs	r0, r0, r3
   2b780:	e002      	b.n	2b788 <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
   2b782:	6a23      	ldr	r3, [r4, #32]
   2b784:	3b01      	subs	r3, #1
   2b786:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   2b788:	60a0      	str	r0, [r4, #8]
		cont = false;
   2b78a:	2300      	movs	r3, #0
   2b78c:	e001      	b.n	2b792 <mpsc_pbuf_claim+0x5c>
   2b78e:	2300      	movs	r3, #0
			item = NULL;
   2b790:	461e      	mov	r6, r3
   2b792:	f385 8811 	msr	BASEPRI, r5
   2b796:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   2b79a:	b393      	cbz	r3, 2b802 <mpsc_pbuf_claim+0xcc>
	__asm__ volatile(
   2b79c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b7a0:	f3ef 8511 	mrs	r5, BASEPRI
   2b7a4:	f383 8812 	msr	BASEPRI_MAX, r3
   2b7a8:	f3bf 8f6f 	isb	sy
		(void)available(buffer, &a);
   2b7ac:	a901      	add	r1, sp, #4
   2b7ae:	4620      	mov	r0, r4
   2b7b0:	f7ff fd9a 	bl	2b2e8 <available>
			&buffer->buf[buffer->tmp_rd_idx];
   2b7b4:	69e3      	ldr	r3, [r4, #28]
   2b7b6:	68a2      	ldr	r2, [r4, #8]
		item = (union mpsc_pbuf_generic *)
   2b7b8:	eb03 0682 	add.w	r6, r3, r2, lsl #2
		if (!a || is_invalid(item)) {
   2b7bc:	9901      	ldr	r1, [sp, #4]
   2b7be:	2900      	cmp	r1, #0
   2b7c0:	d0e5      	beq.n	2b78e <mpsc_pbuf_claim+0x58>
	return !item->hdr.valid && !item->hdr.busy;
   2b7c2:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
		if (!a || is_invalid(item)) {
   2b7c6:	f011 0103 	ands.w	r1, r1, #3
   2b7ca:	d017      	beq.n	2b7fc <mpsc_pbuf_claim+0xc6>
	if (item->hdr.busy && !item->hdr.valid) {
   2b7cc:	2902      	cmp	r1, #2
   2b7ce:	d0b6      	beq.n	2b73e <mpsc_pbuf_claim+0x8>
	return 0;
   2b7d0:	2000      	movs	r0, #0
	return item->hdr.valid;
   2b7d2:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			if (skip || !is_valid(item)) {
   2b7d6:	f011 0f01 	tst.w	r1, #1
   2b7da:	d1be      	bne.n	2b75a <mpsc_pbuf_claim+0x24>
					skip ? skip : buffer->get_wlen(item);
   2b7dc:	b910      	cbnz	r0, 2b7e4 <mpsc_pbuf_claim+0xae>
   2b7de:	69a3      	ldr	r3, [r4, #24]
   2b7e0:	4630      	mov	r0, r6
   2b7e2:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   2b7e4:	68a3      	ldr	r3, [r4, #8]
   2b7e6:	4601      	mov	r1, r0
	uint32_t i = idx + val;
   2b7e8:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b7ea:	6922      	ldr	r2, [r4, #16]
   2b7ec:	f012 0f01 	tst.w	r2, #1
   2b7f0:	d1aa      	bne.n	2b748 <mpsc_pbuf_claim+0x12>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b7f2:	6a22      	ldr	r2, [r4, #32]
   2b7f4:	4293      	cmp	r3, r2
   2b7f6:	d3aa      	bcc.n	2b74e <mpsc_pbuf_claim+0x18>
   2b7f8:	1a9b      	subs	r3, r3, r2
   2b7fa:	e7a8      	b.n	2b74e <mpsc_pbuf_claim+0x18>
		cont = false;
   2b7fc:	2300      	movs	r3, #0
			item = NULL;
   2b7fe:	461e      	mov	r6, r3
   2b800:	e7c7      	b.n	2b792 <mpsc_pbuf_claim+0x5c>

	return item;
}
   2b802:	4630      	mov	r0, r6
   2b804:	b003      	add	sp, #12
   2b806:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b808 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2b808:	b570      	push	{r4, r5, r6, lr}
   2b80a:	4604      	mov	r4, r0
   2b80c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2b80e:	6983      	ldr	r3, [r0, #24]
   2b810:	4608      	mov	r0, r1
   2b812:	4798      	blx	r3
   2b814:	4601      	mov	r1, r0
   2b816:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b81a:	f3ef 8611 	mrs	r6, BASEPRI
   2b81e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b822:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2b826:	782b      	ldrb	r3, [r5, #0]
   2b828:	f36f 0300 	bfc	r3, #0, #1
   2b82c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2b82e:	6923      	ldr	r3, [r4, #16]
   2b830:	f013 0f02 	tst.w	r3, #2
   2b834:	d00a      	beq.n	2b84c <mpsc_pbuf_free+0x44>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2b836:	69e3      	ldr	r3, [r4, #28]
   2b838:	68e2      	ldr	r2, [r4, #12]
   2b83a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2b83e:	42ab      	cmp	r3, r5
   2b840:	d004      	beq.n	2b84c <mpsc_pbuf_free+0x44>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
		}
		rd_idx_inc(buffer, wlen);
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
   2b842:	682b      	ldr	r3, [r5, #0]
   2b844:	f360 039f 	bfi	r3, r0, #2, #30
   2b848:	602b      	str	r3, [r5, #0]
   2b84a:	e00a      	b.n	2b862 <mpsc_pbuf_free+0x5a>
		witem->hdr.busy = 0;
   2b84c:	782b      	ldrb	r3, [r5, #0]
   2b84e:	f36f 0341 	bfc	r3, #1, #1
   2b852:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2b854:	68e2      	ldr	r2, [r4, #12]
   2b856:	68a3      	ldr	r3, [r4, #8]
   2b858:	429a      	cmp	r2, r3
   2b85a:	d00b      	beq.n	2b874 <mpsc_pbuf_free+0x6c>
		rd_idx_inc(buffer, wlen);
   2b85c:	4620      	mov	r0, r4
   2b85e:	f7ff fd7a 	bl	2b356 <rd_idx_inc>
	__asm__ volatile(
   2b862:	f386 8811 	msr	BASEPRI, r6
   2b866:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   2b86a:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   2b86e:	f7fa fcfd 	bl	2626c <z_impl_k_sem_give>
}
   2b872:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i = idx + val;
   2b874:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2b876:	6922      	ldr	r2, [r4, #16]
   2b878:	f012 0f01 	tst.w	r2, #1
   2b87c:	d104      	bne.n	2b888 <mpsc_pbuf_free+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   2b87e:	6a22      	ldr	r2, [r4, #32]
   2b880:	4293      	cmp	r3, r2
   2b882:	d304      	bcc.n	2b88e <mpsc_pbuf_free+0x86>
   2b884:	1a9b      	subs	r3, r3, r2
   2b886:	e002      	b.n	2b88e <mpsc_pbuf_free+0x86>
		return i & (buffer->size - 1);
   2b888:	6a22      	ldr	r2, [r4, #32]
   2b88a:	3a01      	subs	r2, #1
   2b88c:	4013      	ands	r3, r2
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   2b88e:	60a3      	str	r3, [r4, #8]
   2b890:	e7e4      	b.n	2b85c <mpsc_pbuf_free+0x54>

0002b892 <mpsc_pbuf_is_pending>:

bool mpsc_pbuf_is_pending(struct mpsc_pbuf_buffer *buffer)
{
   2b892:	b500      	push	{lr}
   2b894:	b083      	sub	sp, #12
	uint32_t a;

	(void)available(buffer, &a);
   2b896:	a901      	add	r1, sp, #4
   2b898:	f7ff fd26 	bl	2b2e8 <available>

	return a ? true : false;
}
   2b89c:	9801      	ldr	r0, [sp, #4]
   2b89e:	3800      	subs	r0, #0
   2b8a0:	bf18      	it	ne
   2b8a2:	2001      	movne	r0, #1
   2b8a4:	b003      	add	sp, #12
   2b8a6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b8aa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2b8aa:	4770      	bx	lr

0002b8ac <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2b8ac:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2b8ae:	f013 0f04 	tst.w	r3, #4
   2b8b2:	d001      	beq.n	2b8b8 <log_msg_generic_get_wlen+0xc>
	return 0;
   2b8b4:	2000      	movs	r0, #0
}
   2b8b6:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   2b8b8:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2b8ba:	f3c3 204a 	ubfx	r0, r3, #9, #11
   2b8be:	eb00 5013 	add.w	r0, r0, r3, lsr #20
   2b8c2:	3017      	adds	r0, #23
   2b8c4:	f020 0007 	bic.w	r0, r0, #7
   2b8c8:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   2b8ca:	4770      	bx	lr

0002b8cc <dummy_timestamp>:
}
   2b8cc:	2000      	movs	r0, #0
   2b8ce:	4770      	bx	lr

0002b8d0 <msg_filter_check>:
}
   2b8d0:	2001      	movs	r0, #1
   2b8d2:	4770      	bx	lr

0002b8d4 <default_get_timestamp>:
{
   2b8d4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2b8d6:	f004 f9d8 	bl	2fc8a <sys_clock_cycle_get_32>
}
   2b8da:	bd08      	pop	{r3, pc}

0002b8dc <k_msleep>:
{
   2b8dc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2b8de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2b8e2:	17c1      	asrs	r1, r0, #31
   2b8e4:	03c9      	lsls	r1, r1, #15
   2b8e6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2b8ea:	03c0      	lsls	r0, r0, #15
   2b8ec:	f240 33e7 	movw	r3, #999	; 0x3e7
   2b8f0:	18c0      	adds	r0, r0, r3
   2b8f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b8f6:	f04f 0300 	mov.w	r3, #0
   2b8fa:	f141 0100 	adc.w	r1, r1, #0
   2b8fe:	f7d4 fbff 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2b902:	f7fb fa0b 	bl	26d1c <z_impl_k_sleep>
}
   2b906:	bd08      	pop	{r3, pc}

0002b908 <msg_alloc>:
{
   2b908:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   2b90a:	2200      	movs	r2, #0
   2b90c:	2300      	movs	r3, #0
   2b90e:	f7ff fe4f 	bl	2b5b0 <mpsc_pbuf_alloc>
}
   2b912:	bd08      	pop	{r3, pc}

0002b914 <msg_free>:
{
   2b914:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   2b916:	f7ff ff77 	bl	2b808 <mpsc_pbuf_free>
}
   2b91a:	bd08      	pop	{r3, pc}

0002b91c <msg_pending>:
{
   2b91c:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   2b91e:	f7ff ffb8 	bl	2b892 <mpsc_pbuf_is_pending>
}
   2b922:	bd08      	pop	{r3, pc}

0002b924 <z_log_vprintk>:
{
   2b924:	b500      	push	{lr}
   2b926:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2b928:	9103      	str	r1, [sp, #12]
   2b92a:	9002      	str	r0, [sp, #8]
   2b92c:	2000      	movs	r0, #0
   2b92e:	9001      	str	r0, [sp, #4]
   2b930:	9000      	str	r0, [sp, #0]
   2b932:	4603      	mov	r3, r0
   2b934:	4602      	mov	r2, r0
   2b936:	4601      	mov	r1, r0
   2b938:	f000 f845 	bl	2b9c6 <z_impl_z_log_msg_runtime_vcreate>
}
   2b93c:	b005      	add	sp, #20
   2b93e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b942 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   2b942:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2b944:	2001      	movs	r0, #1
   2b946:	f7e8 f9e3 	bl	13d10 <z_log_dropped>
}
   2b94a:	bd08      	pop	{r3, pc}

0002b94c <z_log_msg_claim>:
{
   2b94c:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   2b94e:	f7e8 fa65 	bl	13e1c <z_log_msg_local_claim>
}
   2b952:	bd08      	pop	{r3, pc}

0002b954 <msg_commit>:
{
   2b954:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   2b956:	f7ff fec5 	bl	2b6e4 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   2b95a:	f7e8 fafd 	bl	13f58 <z_log_msg_post_finalize>
}
   2b95e:	bd08      	pop	{r3, pc}

0002b960 <z_log_get_tag>:
}
   2b960:	2000      	movs	r0, #0
   2b962:	4770      	bx	lr

0002b964 <z_cbprintf_cpy>:
{
   2b964:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2b966:	6853      	ldr	r3, [r2, #4]
   2b968:	6896      	ldr	r6, [r2, #8]
   2b96a:	1b9b      	subs	r3, r3, r6
   2b96c:	428b      	cmp	r3, r1
   2b96e:	d30c      	bcc.n	2b98a <z_cbprintf_cpy+0x26>
   2b970:	460c      	mov	r4, r1
   2b972:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2b974:	6813      	ldr	r3, [r2, #0]
   2b976:	460a      	mov	r2, r1
   2b978:	4601      	mov	r1, r0
   2b97a:	1998      	adds	r0, r3, r6
   2b97c:	f000 ff36 	bl	2c7ec <memcpy>
	desc->off += len;
   2b980:	68ab      	ldr	r3, [r5, #8]
   2b982:	4423      	add	r3, r4
   2b984:	60ab      	str	r3, [r5, #8]
	return len;
   2b986:	4620      	mov	r0, r4
}
   2b988:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2b98a:	f06f 001b 	mvn.w	r0, #27
   2b98e:	e7fb      	b.n	2b988 <z_cbprintf_cpy+0x24>

0002b990 <z_log_msg_finalize>:
{
   2b990:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   2b992:	b188      	cbz	r0, 2b9b8 <z_log_msg_finalize+0x28>
   2b994:	460e      	mov	r6, r1
   2b996:	4614      	mov	r4, r2
   2b998:	4619      	mov	r1, r3
   2b99a:	4605      	mov	r5, r0
	if (data) {
   2b99c:	b133      	cbz	r3, 2b9ac <z_log_msg_finalize+0x1c>
		uint8_t *d = msg->data + desc.package_len;
   2b99e:	3010      	adds	r0, #16
   2b9a0:	f3c2 234a 	ubfx	r3, r2, #9, #11
		memcpy(d, data, desc.data_len);
   2b9a4:	0d12      	lsrs	r2, r2, #20
   2b9a6:	4418      	add	r0, r3
   2b9a8:	f000 ff20 	bl	2c7ec <memcpy>
	msg->hdr.desc = desc;
   2b9ac:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   2b9ae:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   2b9b0:	4628      	mov	r0, r5
   2b9b2:	f7e8 fb15 	bl	13fe0 <z_log_msg_commit>
}
   2b9b6:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   2b9b8:	f7e8 f9aa 	bl	13d10 <z_log_dropped>
		return;
   2b9bc:	e7fb      	b.n	2b9b6 <z_log_msg_finalize+0x26>

0002b9be <z_log_msg_static_create>:
{
   2b9be:	b508      	push	{r3, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2b9c0:	f7e8 fb9c 	bl	140fc <z_impl_z_log_msg_static_create>
}
   2b9c4:	bd08      	pop	{r3, pc}

0002b9c6 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   2b9c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9ca:	b085      	sub	sp, #20
   2b9cc:	4681      	mov	r9, r0
   2b9ce:	460d      	mov	r5, r1
   2b9d0:	4690      	mov	r8, r2
   2b9d2:	461e      	mov	r6, r3
   2b9d4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   2b9d8:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   2b9da:	b3a7      	cbz	r7, 2ba46 <z_impl_z_log_msg_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
   2b9dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b9de:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   2b9e0:	9300      	str	r3, [sp, #0]
   2b9e2:	463b      	mov	r3, r7
   2b9e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b9e6:	2110      	movs	r1, #16
   2b9e8:	2000      	movs	r0, #0
   2b9ea:	f7e6 ff95 	bl	12918 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   2b9ee:	4682      	mov	sl, r0
   2b9f0:	eb00 030b 	add.w	r3, r0, fp
   2b9f4:	3317      	adds	r3, #23
   2b9f6:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   2b9fa:	2400      	movs	r4, #0
   2b9fc:	f36f 0400 	bfc	r4, #0, #1
   2ba00:	f36f 0441 	bfc	r4, #1, #1
   2ba04:	f36f 0482 	bfc	r4, #2, #1
   2ba08:	f369 04c5 	bfi	r4, r9, #3, #3
   2ba0c:	f368 1488 	bfi	r4, r8, #6, #3
   2ba10:	f360 2453 	bfi	r4, r0, #9, #11
   2ba14:	f36b 541f 	bfi	r4, fp, #20, #12
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   2ba18:	0898      	lsrs	r0, r3, #2
   2ba1a:	f7e8 f9f7 	bl	13e0c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   2ba1e:	4680      	mov	r8, r0
   2ba20:	b140      	cbz	r0, 2ba34 <z_impl_z_log_msg_runtime_vcreate+0x6e>
   2ba22:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   2ba24:	b137      	cbz	r7, 2ba34 <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   2ba26:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2ba28:	9300      	str	r3, [sp, #0]
   2ba2a:	463b      	mov	r3, r7
   2ba2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ba2e:	4651      	mov	r1, sl
   2ba30:	f7e6 ff72 	bl	12918 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   2ba34:	4633      	mov	r3, r6
   2ba36:	4622      	mov	r2, r4
   2ba38:	4629      	mov	r1, r5
   2ba3a:	4640      	mov	r0, r8
   2ba3c:	f7ff ffa8 	bl	2b990 <z_log_msg_finalize>
	}
}
   2ba40:	b005      	add	sp, #20
   2ba42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   2ba46:	2000      	movs	r0, #0
   2ba48:	e7d1      	b.n	2b9ee <z_impl_z_log_msg_runtime_vcreate+0x28>

0002ba4a <buffer_write>:
{
   2ba4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba4c:	4607      	mov	r7, r0
   2ba4e:	460d      	mov	r5, r1
   2ba50:	4614      	mov	r4, r2
   2ba52:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   2ba54:	4632      	mov	r2, r6
   2ba56:	4621      	mov	r1, r4
   2ba58:	4628      	mov	r0, r5
   2ba5a:	47b8      	blx	r7
		buf += processed;
   2ba5c:	4405      	add	r5, r0
	} while (len != 0);
   2ba5e:	1a24      	subs	r4, r4, r0
   2ba60:	d1f8      	bne.n	2ba54 <buffer_write+0xa>
}
   2ba62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ba64 <cbvprintf>:
{
   2ba64:	b510      	push	{r4, lr}
   2ba66:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2ba68:	2400      	movs	r4, #0
   2ba6a:	9400      	str	r4, [sp, #0]
   2ba6c:	f7e7 fd44 	bl	134f8 <z_cbvprintf_impl>
}
   2ba70:	b002      	add	sp, #8
   2ba72:	bd10      	pop	{r4, pc}

0002ba74 <color_prefix>:
{
   2ba74:	b508      	push	{r3, lr}
   2ba76:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   2ba78:	2201      	movs	r2, #1
   2ba7a:	f7e8 fc45 	bl	14308 <color_print>
}
   2ba7e:	bd08      	pop	{r3, pc}

0002ba80 <color_postfix>:
{
   2ba80:	b508      	push	{r3, lr}
   2ba82:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   2ba84:	2200      	movs	r2, #0
   2ba86:	f7e8 fc3f 	bl	14308 <color_print>
}
   2ba8a:	bd08      	pop	{r3, pc}

0002ba8c <postfix_print>:
{
   2ba8c:	b538      	push	{r3, r4, r5, lr}
   2ba8e:	4605      	mov	r5, r0
   2ba90:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   2ba92:	f001 0101 	and.w	r1, r1, #1
   2ba96:	f7ff fff3 	bl	2ba80 <color_postfix>
	newline_print(output, flags);
   2ba9a:	4621      	mov	r1, r4
   2ba9c:	4628      	mov	r0, r5
   2ba9e:	f7e8 fcb9 	bl	14414 <newline_print>
}
   2baa2:	bd38      	pop	{r3, r4, r5, pc}

0002baa4 <log_msg_hexdump>:
{
   2baa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2baa8:	b083      	sub	sp, #12
   2baaa:	4680      	mov	r8, r0
   2baac:	460e      	mov	r6, r1
   2baae:	4615      	mov	r5, r2
   2bab0:	461f      	mov	r7, r3
   2bab2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   2bab6:	462c      	mov	r4, r5
   2bab8:	2d10      	cmp	r5, #16
   2baba:	bf28      	it	cs
   2babc:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   2babe:	f8cd 9000 	str.w	r9, [sp]
   2bac2:	463b      	mov	r3, r7
   2bac4:	4622      	mov	r2, r4
   2bac6:	4631      	mov	r1, r6
   2bac8:	4640      	mov	r0, r8
   2baca:	f7e8 fcb7 	bl	1443c <hexdump_line_print>
		data += length;
   2bace:	4426      	add	r6, r4
	} while (len);
   2bad0:	1b2d      	subs	r5, r5, r4
   2bad2:	d1f0      	bne.n	2bab6 <log_msg_hexdump+0x12>
}
   2bad4:	b003      	add	sp, #12
   2bad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002bada <log_output_flush>:
{
   2bada:	b510      	push	{r4, lr}
   2badc:	4604      	mov	r4, r0
		     output->control_block->offset,
   2bade:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2bae0:	6853      	ldr	r3, [r2, #4]
   2bae2:	6812      	ldr	r2, [r2, #0]
   2bae4:	6881      	ldr	r1, [r0, #8]
   2bae6:	6800      	ldr	r0, [r0, #0]
   2bae8:	f7ff ffaf 	bl	2ba4a <buffer_write>
	output->control_block->offset = 0;
   2baec:	6863      	ldr	r3, [r4, #4]
   2baee:	2200      	movs	r2, #0
   2baf0:	601a      	str	r2, [r3, #0]
}
   2baf2:	bd10      	pop	{r4, pc}

0002baf4 <out_func>:
{
   2baf4:	b538      	push	{r3, r4, r5, lr}
   2baf6:	4605      	mov	r5, r0
   2baf8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2bafa:	684b      	ldr	r3, [r1, #4]
   2bafc:	681a      	ldr	r2, [r3, #0]
   2bafe:	68cb      	ldr	r3, [r1, #12]
   2bb00:	429a      	cmp	r2, r3
   2bb02:	d00f      	beq.n	2bb24 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   2bb04:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2bb06:	f3bf 8f5b 	dmb	ish
   2bb0a:	e853 2f00 	ldrex	r2, [r3]
   2bb0e:	1c51      	adds	r1, r2, #1
   2bb10:	e843 1000 	strex	r0, r1, [r3]
   2bb14:	2800      	cmp	r0, #0
   2bb16:	d1f8      	bne.n	2bb0a <out_func+0x16>
   2bb18:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2bb1c:	68a3      	ldr	r3, [r4, #8]
   2bb1e:	549d      	strb	r5, [r3, r2]
}
   2bb20:	2000      	movs	r0, #0
   2bb22:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   2bb24:	4608      	mov	r0, r1
   2bb26:	f7ff ffd8 	bl	2bada <log_output_flush>
   2bb2a:	e7eb      	b.n	2bb04 <out_func+0x10>

0002bb2c <cr_out_func>:
{
   2bb2c:	b538      	push	{r3, r4, r5, lr}
   2bb2e:	4604      	mov	r4, r0
   2bb30:	460d      	mov	r5, r1
	if (c == '\n') {
   2bb32:	280a      	cmp	r0, #10
   2bb34:	d005      	beq.n	2bb42 <cr_out_func+0x16>
	out_func(c, ctx);
   2bb36:	4629      	mov	r1, r5
   2bb38:	4620      	mov	r0, r4
   2bb3a:	f7ff ffdb 	bl	2baf4 <out_func>
}
   2bb3e:	2000      	movs	r0, #0
   2bb40:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   2bb42:	200d      	movs	r0, #13
   2bb44:	f7ff ffd6 	bl	2baf4 <out_func>
   2bb48:	e7f5      	b.n	2bb36 <cr_out_func+0xa>

0002bb4a <k_msleep>:
{
   2bb4a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2bb4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2bb50:	17c1      	asrs	r1, r0, #31
   2bb52:	03c9      	lsls	r1, r1, #15
   2bb54:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2bb58:	03c0      	lsls	r0, r0, #15
   2bb5a:	f240 33e7 	movw	r3, #999	; 0x3e7
   2bb5e:	18c0      	adds	r0, r0, r3
   2bb60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bb64:	f04f 0300 	mov.w	r3, #0
   2bb68:	f141 0100 	adc.w	r1, r1, #0
   2bb6c:	f7d4 fac8 	bl	100 <__aeabi_uldivmod>
   2bb70:	f7fb f8d4 	bl	26d1c <z_impl_k_sleep>
}
   2bb74:	bd08      	pop	{r3, pc}

0002bb76 <atomic_test_and_clear_bit>:
{
   2bb76:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2bb78:	f001 021f 	and.w	r2, r1, #31
   2bb7c:	2301      	movs	r3, #1
   2bb7e:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2bb80:	0949      	lsrs	r1, r1, #5
   2bb82:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2bb86:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bb88:	f3bf 8f5b 	dmb	ish
   2bb8c:	e850 2f00 	ldrex	r2, [r0]
   2bb90:	ea02 0c01 	and.w	ip, r2, r1
   2bb94:	e840 ce00 	strex	lr, ip, [r0]
   2bb98:	f1be 0f00 	cmp.w	lr, #0
   2bb9c:	d1f6      	bne.n	2bb8c <atomic_test_and_clear_bit+0x16>
   2bb9e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2bba2:	4213      	tst	r3, r2
}
   2bba4:	bf14      	ite	ne
   2bba6:	2001      	movne	r0, #1
   2bba8:	2000      	moveq	r0, #0
   2bbaa:	f85d fb04 	ldr.w	pc, [sp], #4

0002bbae <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2bbae:	f001 021f 	and.w	r2, r1, #31
   2bbb2:	2301      	movs	r3, #1
   2bbb4:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2bbb6:	0949      	lsrs	r1, r1, #5
   2bbb8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bbbc:	f3bf 8f5b 	dmb	ish
   2bbc0:	e850 2f00 	ldrex	r2, [r0]
   2bbc4:	431a      	orrs	r2, r3
   2bbc6:	e840 2100 	strex	r1, r2, [r0]
   2bbca:	2900      	cmp	r1, #0
   2bbcc:	d1f8      	bne.n	2bbc0 <atomic_set_bit+0x12>
   2bbce:	f3bf 8f5b 	dmb	ish
}
   2bbd2:	4770      	bx	lr

0002bbd4 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   2bbd4:	2000      	movs	r0, #0
   2bbd6:	4770      	bx	lr

0002bbd8 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2bbd8:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bbda:	f3bf 8f5b 	dmb	ish
   2bbde:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2bbe2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2bbe6:	f001 011f 	and.w	r1, r1, #31
   2bbea:	4108      	asrs	r0, r1
}
   2bbec:	f000 0001 	and.w	r0, r0, #1
   2bbf0:	4770      	bx	lr

0002bbf2 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   2bbf2:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   2bbf4:	b11b      	cbz	r3, 2bbfe <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   2bbf6:	7a1b      	ldrb	r3, [r3, #8]
   2bbf8:	700b      	strb	r3, [r1, #0]

	return 0;
   2bbfa:	2000      	movs	r0, #0
   2bbfc:	4770      	bx	lr
		return -ENOSYS;
   2bbfe:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   2bc02:	4770      	bx	lr

0002bc04 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   2bc04:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   2bc06:	b128      	cbz	r0, 2bc14 <pm_device_is_busy+0x10>
{
   2bc08:	b508      	push	{r3, lr}
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
   2bc0a:	2100      	movs	r1, #0
   2bc0c:	3004      	adds	r0, #4
   2bc0e:	f7ff ffe3 	bl	2bbd8 <atomic_test_bit>
}
   2bc12:	bd08      	pop	{r3, pc}
		return false;
   2bc14:	2000      	movs	r0, #0
}
   2bc16:	4770      	bx	lr

0002bc18 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   2bc18:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   2bc1a:	b128      	cbz	r0, 2bc28 <pm_device_wakeup_is_enabled+0x10>
{
   2bc1c:	b508      	push	{r3, lr}
		return false;
	}

	return atomic_test_bit(&pm->flags,
   2bc1e:	2104      	movs	r1, #4
   2bc20:	4408      	add	r0, r1
   2bc22:	f7ff ffd9 	bl	2bbd8 <atomic_test_bit>
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   2bc26:	bd08      	pop	{r3, pc}
		return false;
   2bc28:	2000      	movs	r0, #0
}
   2bc2a:	4770      	bx	lr

0002bc2c <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   2bc2c:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   2bc2e:	b128      	cbz	r0, 2bc3c <pm_device_state_is_locked+0x10>
{
   2bc30:	b508      	push	{r3, lr}
		return false;
	}

	return atomic_test_bit(&pm->flags,
   2bc32:	2106      	movs	r1, #6
   2bc34:	3004      	adds	r0, #4
   2bc36:	f7ff ffcf 	bl	2bbd8 <atomic_test_bit>
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   2bc3a:	bd08      	pop	{r3, pc}
		return false;
   2bc3c:	2000      	movs	r0, #0
}
   2bc3e:	4770      	bx	lr

0002bc40 <usb_vbus_set>:
}
   2bc40:	2000      	movs	r0, #0
   2bc42:	4770      	bx	lr

0002bc44 <reset_endpoint>:
{
   2bc44:	b510      	push	{r4, lr}
   2bc46:	b082      	sub	sp, #8
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2bc48:	7884      	ldrb	r4, [r0, #2]
   2bc4a:	f88d 4000 	strb.w	r4, [sp]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2bc4e:	78c3      	ldrb	r3, [r0, #3]
   2bc50:	f003 0303 	and.w	r3, r3, #3
   2bc54:	f88d 3004 	strb.w	r3, [sp, #4]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2bc58:	4620      	mov	r0, r4
   2bc5a:	f7ea fcdb 	bl	16614 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   2bc5e:	4620      	mov	r0, r4
   2bc60:	f7e9 fa3e 	bl	150e0 <disable_endpoint>
}
   2bc64:	fab0 f080 	clz	r0, r0
   2bc68:	0940      	lsrs	r0, r0, #5
   2bc6a:	b002      	add	sp, #8
   2bc6c:	bd10      	pop	{r4, pc}

0002bc6e <usb_eps_reconfigure>:
{
   2bc6e:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   2bc70:	4291      	cmp	r1, r2
   2bc72:	d002      	beq.n	2bc7a <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   2bc74:	f7ff ffe6 	bl	2bc44 <reset_endpoint>
}
   2bc78:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   2bc7a:	f7e9 fb79 	bl	15370 <set_endpoint>
   2bc7e:	e7fb      	b.n	2bc78 <usb_eps_reconfigure+0xa>

0002bc80 <usb_handle_std_interface_req>:
{
   2bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc82:	4604      	mov	r4, r0
   2bc84:	460e      	mov	r6, r1
   2bc86:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   2bc88:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   2bc8a:	f7e9 f8e7 	bl	14e5c <is_device_configured>
   2bc8e:	b900      	cbnz	r0, 2bc92 <usb_handle_std_interface_req+0x12>
}
   2bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   2bc92:	7920      	ldrb	r0, [r4, #4]
   2bc94:	f7e9 f8ec 	bl	14e70 <is_interface_valid>
	if (!is_device_configured() ||
   2bc98:	2800      	cmp	r0, #0
   2bc9a:	d0f9      	beq.n	2bc90 <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   2bc9c:	f994 3000 	ldrsb.w	r3, [r4]
   2bca0:	2b00      	cmp	r3, #0
   2bca2:	db04      	blt.n	2bcae <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2bca4:	7863      	ldrb	r3, [r4, #1]
   2bca6:	2b0b      	cmp	r3, #11
   2bca8:	d013      	beq.n	2bcd2 <usb_handle_std_interface_req+0x52>
	return false;
   2bcaa:	2000      	movs	r0, #0
   2bcac:	e7f0      	b.n	2bc90 <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   2bcae:	7863      	ldrb	r3, [r4, #1]
   2bcb0:	b11b      	cbz	r3, 2bcba <usb_handle_std_interface_req+0x3a>
   2bcb2:	2b0a      	cmp	r3, #10
   2bcb4:	d007      	beq.n	2bcc6 <usb_handle_std_interface_req+0x46>
   2bcb6:	2000      	movs	r0, #0
   2bcb8:	e7ea      	b.n	2bc90 <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   2bcba:	2300      	movs	r3, #0
   2bcbc:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   2bcbe:	707b      	strb	r3, [r7, #1]
			*len = 2;
   2bcc0:	2302      	movs	r3, #2
   2bcc2:	6033      	str	r3, [r6, #0]
			return true;
   2bcc4:	e7e4      	b.n	2bc90 <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   2bcc6:	462a      	mov	r2, r5
   2bcc8:	4631      	mov	r1, r6
   2bcca:	4620      	mov	r0, r4
   2bccc:	f7e9 f8a6 	bl	14e1c <usb_get_interface>
   2bcd0:	e7de      	b.n	2bc90 <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   2bcd2:	4620      	mov	r0, r4
   2bcd4:	f7e9 fc88 	bl	155e8 <usb_set_interface>
   2bcd8:	e7da      	b.n	2bc90 <usb_handle_std_interface_req+0x10>

0002bcda <usb_get_status_endpoint>:
{
   2bcda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bcdc:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   2bcde:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   2bce0:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   2bce2:	4620      	mov	r0, r4
   2bce4:	f7e9 f8d6 	bl	14e94 <is_ep_valid>
   2bce8:	4605      	mov	r5, r0
   2bcea:	b130      	cbz	r0, 2bcfa <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2bcec:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   2bcf0:	d005      	beq.n	2bcfe <usb_get_status_endpoint+0x24>
   2bcf2:	f7e9 f8b3 	bl	14e5c <is_device_configured>
   2bcf6:	b910      	cbnz	r0, 2bcfe <usb_get_status_endpoint+0x24>
	return false;
   2bcf8:	4605      	mov	r5, r0
}
   2bcfa:	4628      	mov	r0, r5
   2bcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   2bcfe:	4639      	mov	r1, r7
   2bd00:	4620      	mov	r0, r4
   2bd02:	f7f6 f88f 	bl	21e24 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   2bd06:	2300      	movs	r3, #0
   2bd08:	707b      	strb	r3, [r7, #1]
		*len = 2;
   2bd0a:	2302      	movs	r3, #2
   2bd0c:	6033      	str	r3, [r6, #0]
		return true;
   2bd0e:	e7f4      	b.n	2bcfa <usb_get_status_endpoint+0x20>

0002bd10 <usb_handle_std_endpoint_req>:
{
   2bd10:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   2bd12:	f990 3000 	ldrsb.w	r3, [r0]
   2bd16:	2b00      	cmp	r3, #0
   2bd18:	db06      	blt.n	2bd28 <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   2bd1a:	7843      	ldrb	r3, [r0, #1]
   2bd1c:	2b01      	cmp	r3, #1
   2bd1e:	d00a      	beq.n	2bd36 <usb_handle_std_endpoint_req+0x26>
   2bd20:	2b03      	cmp	r3, #3
   2bd22:	d010      	beq.n	2bd46 <usb_handle_std_endpoint_req+0x36>
   2bd24:	2000      	movs	r0, #0
   2bd26:	e002      	b.n	2bd2e <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2bd28:	7843      	ldrb	r3, [r0, #1]
   2bd2a:	b10b      	cbz	r3, 2bd30 <usb_handle_std_endpoint_req+0x20>
	return false;
   2bd2c:	2000      	movs	r0, #0
}
   2bd2e:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   2bd30:	f7ff ffd3 	bl	2bcda <usb_get_status_endpoint>
   2bd34:	e7fb      	b.n	2bd2e <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2bd36:	8843      	ldrh	r3, [r0, #2]
   2bd38:	b10b      	cbz	r3, 2bd3e <usb_handle_std_endpoint_req+0x2e>
	return false;
   2bd3a:	2000      	movs	r0, #0
   2bd3c:	e7f7      	b.n	2bd2e <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   2bd3e:	2100      	movs	r1, #0
   2bd40:	f7e9 fa68 	bl	15214 <usb_halt_endpoint_req>
   2bd44:	e7f3      	b.n	2bd2e <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2bd46:	8843      	ldrh	r3, [r0, #2]
   2bd48:	b10b      	cbz	r3, 2bd4e <usb_handle_std_endpoint_req+0x3e>
	return false;
   2bd4a:	2000      	movs	r0, #0
   2bd4c:	e7ef      	b.n	2bd2e <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   2bd4e:	2101      	movs	r1, #1
   2bd50:	f7e9 fa60 	bl	15214 <usb_halt_endpoint_req>
   2bd54:	e7eb      	b.n	2bd2e <usb_handle_std_endpoint_req+0x1e>

0002bd56 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   2bd56:	f810 2b02 	ldrb.w	r2, [r0], #2
   2bd5a:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   2bd5c:	0852      	lsrs	r2, r2, #1
   2bd5e:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   2bd60:	e008      	b.n	2bd74 <ascii7_to_utf16le+0x1e>
		buf[i] = 0U;
   2bd62:	2100      	movs	r1, #0
   2bd64:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   2bd66:	1e59      	subs	r1, r3, #1
   2bd68:	f810 c002 	ldrb.w	ip, [r0, r2]
   2bd6c:	f800 c001 	strb.w	ip, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   2bd70:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   2bd72:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   2bd74:	2b00      	cmp	r3, #0
   2bd76:	daf4      	bge.n	2bd62 <ascii7_to_utf16le+0xc>
}
   2bd78:	4770      	bx	lr

0002bd7a <usb_validate_ep_cfg_data>:
{
   2bd7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bd7e:	b083      	sub	sp, #12
   2bd80:	4605      	mov	r5, r0
   2bd82:	4689      	mov	r9, r1
   2bd84:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2bd86:	2700      	movs	r7, #0
   2bd88:	e047      	b.n	2be1a <usb_validate_ep_cfg_data+0xa0>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   2bd8a:	f8d8 2000 	ldr.w	r2, [r8]
   2bd8e:	f104 0110 	add.w	r1, r4, #16
   2bd92:	2301      	movs	r3, #1
   2bd94:	408b      	lsls	r3, r1
   2bd96:	421a      	tst	r2, r3
   2bd98:	d108      	bne.n	2bdac <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   2bd9a:	f064 037f 	orn	r3, r4, #127	; 0x7f
   2bd9e:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2bda2:	4668      	mov	r0, sp
   2bda4:	f7f5 feda 	bl	21b5c <usb_dc_ep_check_cap>
   2bda8:	4603      	mov	r3, r0
   2bdaa:	b1d0      	cbz	r0, 2bde2 <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2bdac:	3401      	adds	r4, #1
   2bdae:	b2e4      	uxtb	r4, r4
   2bdb0:	2c0f      	cmp	r4, #15
   2bdb2:	d831      	bhi.n	2be18 <usb_validate_ep_cfg_data+0x9e>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2bdb4:	78eb      	ldrb	r3, [r5, #3]
   2bdb6:	f003 0303 	and.w	r3, r3, #3
   2bdba:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2bdbe:	88ab      	ldrh	r3, [r5, #4]
   2bdc0:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   2bdc4:	78ab      	ldrb	r3, [r5, #2]
   2bdc6:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bdca:	f013 0f80 	tst.w	r3, #128	; 0x80
   2bdce:	d1dc      	bne.n	2bd8a <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   2bdd0:	f8d8 2000 	ldr.w	r2, [r8]
   2bdd4:	2301      	movs	r3, #1
   2bdd6:	40a3      	lsls	r3, r4
   2bdd8:	421a      	tst	r2, r3
   2bdda:	d1e7      	bne.n	2bdac <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   2bddc:	f88d 4000 	strb.w	r4, [sp]
   2bde0:	e7df      	b.n	2bda2 <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2bde2:	f89d 2000 	ldrb.w	r2, [sp]
   2bde6:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2bde8:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bdea:	f012 0f80 	tst.w	r2, #128	; 0x80
   2bdee:	d10a      	bne.n	2be06 <usb_validate_ep_cfg_data+0x8c>
					*requested_ep |= (1U << idx);
   2bdf0:	f8d8 2000 	ldr.w	r2, [r8]
   2bdf4:	2101      	movs	r1, #1
   2bdf6:	40a1      	lsls	r1, r4
   2bdf8:	430a      	orrs	r2, r1
   2bdfa:	f8c8 2000 	str.w	r2, [r8]
}
   2bdfe:	4618      	mov	r0, r3
   2be00:	b003      	add	sp, #12
   2be02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   2be06:	f8d8 2000 	ldr.w	r2, [r8]
   2be0a:	3410      	adds	r4, #16
   2be0c:	2101      	movs	r1, #1
   2be0e:	40a1      	lsls	r1, r4
   2be10:	430a      	orrs	r2, r1
   2be12:	f8c8 2000 	str.w	r2, [r8]
   2be16:	e7f2      	b.n	2bdfe <usb_validate_ep_cfg_data+0x84>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2be18:	3701      	adds	r7, #1
   2be1a:	f899 301c 	ldrb.w	r3, [r9, #28]
   2be1e:	429f      	cmp	r7, r3
   2be20:	d209      	bcs.n	2be36 <usb_validate_ep_cfg_data+0xbc>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   2be22:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2be26:	78aa      	ldrb	r2, [r5, #2]
   2be28:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   2be2c:	7933      	ldrb	r3, [r6, #4]
   2be2e:	429a      	cmp	r2, r3
   2be30:	d1f2      	bne.n	2be18 <usb_validate_ep_cfg_data+0x9e>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2be32:	2401      	movs	r4, #1
   2be34:	e7bc      	b.n	2bdb0 <usb_validate_ep_cfg_data+0x36>
	return -1;
   2be36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2be3a:	e7e0      	b.n	2bdfe <usb_validate_ep_cfg_data+0x84>

0002be3c <usb_get_dev_data_by_cfg>:
	return list->head;
   2be3c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2be3e:	b110      	cbz	r0, 2be46 <usb_get_dev_data_by_cfg+0xa>
   2be40:	3804      	subs	r0, #4
   2be42:	e000      	b.n	2be46 <usb_get_dev_data_by_cfg+0xa>
   2be44:	4618      	mov	r0, r3
   2be46:	b150      	cbz	r0, 2be5e <usb_get_dev_data_by_cfg+0x22>
		const struct device *dev = dev_data->dev;
   2be48:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   2be4a:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   2be4c:	428b      	cmp	r3, r1
   2be4e:	d006      	beq.n	2be5e <usb_get_dev_data_by_cfg+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2be50:	1d03      	adds	r3, r0, #4
   2be52:	d0f7      	beq.n	2be44 <usb_get_dev_data_by_cfg+0x8>
	return node->next;
   2be54:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2be56:	2800      	cmp	r0, #0
   2be58:	d0f5      	beq.n	2be46 <usb_get_dev_data_by_cfg+0xa>
   2be5a:	3804      	subs	r0, #4
   2be5c:	e7f3      	b.n	2be46 <usb_get_dev_data_by_cfg+0xa>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   2be5e:	4770      	bx	lr

0002be60 <usb_get_dev_data_by_iface>:
	return list->head;
   2be60:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2be62:	b110      	cbz	r0, 2be6a <usb_get_dev_data_by_iface+0xa>
   2be64:	3804      	subs	r0, #4
   2be66:	e000      	b.n	2be6a <usb_get_dev_data_by_iface+0xa>
   2be68:	4618      	mov	r0, r3
   2be6a:	b160      	cbz	r0, 2be86 <usb_get_dev_data_by_iface+0x26>
		const struct device *dev = dev_data->dev;
   2be6c:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   2be6e:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   2be70:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   2be72:	789b      	ldrb	r3, [r3, #2]
   2be74:	428b      	cmp	r3, r1
   2be76:	d006      	beq.n	2be86 <usb_get_dev_data_by_iface+0x26>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2be78:	1d03      	adds	r3, r0, #4
   2be7a:	d0f5      	beq.n	2be68 <usb_get_dev_data_by_iface+0x8>
	return node->next;
   2be7c:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2be7e:	2800      	cmp	r0, #0
   2be80:	d0f3      	beq.n	2be6a <usb_get_dev_data_by_iface+0xa>
   2be82:	3804      	subs	r0, #4
   2be84:	e7f1      	b.n	2be6a <usb_get_dev_data_by_iface+0xa>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   2be86:	4770      	bx	lr

0002be88 <usb_get_dev_data_by_ep>:
	return list->head;
   2be88:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2be8a:	b100      	cbz	r0, 2be8e <usb_get_dev_data_by_ep+0x6>
   2be8c:	3804      	subs	r0, #4
   2be8e:	b1b0      	cbz	r0, 2bebe <usb_get_dev_data_by_ep+0x36>
{
   2be90:	b430      	push	{r4, r5}
   2be92:	e003      	b.n	2be9c <usb_get_dev_data_by_ep+0x14>
	return node->next;
   2be94:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2be96:	b100      	cbz	r0, 2be9a <usb_get_dev_data_by_ep+0x12>
   2be98:	3804      	subs	r0, #4
   2be9a:	b170      	cbz	r0, 2beba <usb_get_dev_data_by_ep+0x32>
		const struct device *dev = dev_data->dev;
   2be9c:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   2be9e:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   2bea0:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2bea2:	2300      	movs	r3, #0
   2bea4:	7f22      	ldrb	r2, [r4, #28]
   2bea6:	429a      	cmp	r2, r3
   2bea8:	d9f4      	bls.n	2be94 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   2beaa:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   2beae:	7912      	ldrb	r2, [r2, #4]
   2beb0:	428a      	cmp	r2, r1
   2beb2:	d002      	beq.n	2beba <usb_get_dev_data_by_ep+0x32>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2beb4:	3301      	adds	r3, #1
   2beb6:	b2db      	uxtb	r3, r3
   2beb8:	e7f4      	b.n	2bea4 <usb_get_dev_data_by_ep+0x1c>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   2beba:	bc30      	pop	{r4, r5}
   2bebc:	4770      	bx	lr
   2bebe:	4770      	bx	lr

0002bec0 <usb_transfer_is_busy>:
{
   2bec0:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   2bec2:	f7ea f939 	bl	16138 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   2bec6:	b128      	cbz	r0, 2bed4 <usb_transfer_is_busy+0x14>
   2bec8:	6843      	ldr	r3, [r0, #4]
   2beca:	f113 0f10 	cmn.w	r3, #16
   2bece:	d003      	beq.n	2bed8 <usb_transfer_is_busy+0x18>
	return false;
   2bed0:	2000      	movs	r0, #0
}
   2bed2:	bd08      	pop	{r3, pc}
	return false;
   2bed4:	2000      	movs	r0, #0
   2bed6:	e7fc      	b.n	2bed2 <usb_transfer_is_busy+0x12>
		return true;
   2bed8:	2001      	movs	r0, #1
   2beda:	e7fa      	b.n	2bed2 <usb_transfer_is_busy+0x12>

0002bedc <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   2bedc:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   2bede:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2bee0:	1c4b      	adds	r3, r1, #1
   2bee2:	b2db      	uxtb	r3, r3
   2bee4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   2bee8:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   2beea:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   2beee:	4770      	bx	lr

0002bef0 <cdc_acm_irq_callback_work_handler>:
{
   2bef0:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   2bef2:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2bef6:	f850 1c04 	ldr.w	r1, [r0, #-4]
   2befa:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   2befe:	4798      	blx	r3
}
   2bf00:	bd08      	pop	{r3, pc}

0002bf02 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf02:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   2bf04:	2200      	movs	r2, #0
   2bf06:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   2bf0a:	4770      	bx	lr

0002bf0c <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf0c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   2bf0e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   2bf12:	b122      	cbz	r2, 2bf1e <cdc_acm_irq_tx_ready+0x12>
   2bf14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   2bf18:	b91b      	cbnz	r3, 2bf22 <cdc_acm_irq_tx_ready+0x16>
	return 0;
   2bf1a:	2000      	movs	r0, #0
   2bf1c:	4770      	bx	lr
   2bf1e:	2000      	movs	r0, #0
   2bf20:	4770      	bx	lr
		return 1;
   2bf22:	2001      	movs	r0, #1
}
   2bf24:	4770      	bx	lr

0002bf26 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf26:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   2bf28:	2200      	movs	r2, #0
   2bf2a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
   2bf2e:	4770      	bx	lr

0002bf30 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf30:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   2bf32:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   2bf36:	b90b      	cbnz	r3, 2bf3c <cdc_acm_irq_rx_ready+0xc>
	return 0;
   2bf38:	2000      	movs	r0, #0
   2bf3a:	4770      	bx	lr
		return 1;
   2bf3c:	2001      	movs	r0, #1
}
   2bf3e:	4770      	bx	lr

0002bf40 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf40:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   2bf42:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2bf46:	b112      	cbz	r2, 2bf4e <cdc_acm_irq_is_pending+0xe>
   2bf48:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   2bf4c:	b93a      	cbnz	r2, 2bf5e <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   2bf4e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   2bf52:	b132      	cbz	r2, 2bf62 <cdc_acm_irq_is_pending+0x22>
   2bf54:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   2bf58:	b92b      	cbnz	r3, 2bf66 <cdc_acm_irq_is_pending+0x26>
		return 0;
   2bf5a:	2000      	movs	r0, #0
   2bf5c:	4770      	bx	lr
		return 1;
   2bf5e:	2001      	movs	r0, #1
   2bf60:	4770      	bx	lr
		return 0;
   2bf62:	2000      	movs	r0, #0
   2bf64:	4770      	bx	lr
		return 1;
   2bf66:	2001      	movs	r0, #1
}
   2bf68:	4770      	bx	lr

0002bf6a <cdc_acm_irq_update>:
}
   2bf6a:	2001      	movs	r0, #1
   2bf6c:	4770      	bx	lr

0002bf6e <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf6e:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   2bf70:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   2bf72:	605a      	str	r2, [r3, #4]
}
   2bf74:	4770      	bx	lr

0002bf76 <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf76:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   2bf78:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
   2bf7c:	4770      	bx	lr

0002bf7e <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bf7e:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   2bf80:	2902      	cmp	r1, #2
   2bf82:	d00b      	beq.n	2bf9c <cdc_acm_line_ctrl_get+0x1e>
   2bf84:	2904      	cmp	r1, #4
   2bf86:	d010      	beq.n	2bfaa <cdc_acm_line_ctrl_get+0x2c>
   2bf88:	2901      	cmp	r1, #1
   2bf8a:	d002      	beq.n	2bf92 <cdc_acm_line_ctrl_get+0x14>
   2bf8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2bf90:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   2bf92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   2bf96:	6013      	str	r3, [r2, #0]
		return 0;
   2bf98:	2000      	movs	r0, #0
   2bf9a:	4770      	bx	lr
		*val = (dev_data->line_state &
   2bf9c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   2bfa0:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   2bfa4:	6013      	str	r3, [r2, #0]
		return 0;
   2bfa6:	2000      	movs	r0, #0
   2bfa8:	4770      	bx	lr
		*val = (dev_data->line_state &
   2bfaa:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   2bfae:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   2bfb2:	6013      	str	r3, [r2, #0]
		return 0;
   2bfb4:	2000      	movs	r0, #0
   2bfb6:	4770      	bx	lr

0002bfb8 <cdc_acm_configure>:
}
   2bfb8:	2000      	movs	r0, #0
   2bfba:	4770      	bx	lr

0002bfbc <cdc_acm_config_get>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2bfbc:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   2bfbe:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   2bfc2:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
   2bfc4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   2bfc8:	b122      	cbz	r2, 2bfd4 <cdc_acm_config_get+0x18>
   2bfca:	2a01      	cmp	r2, #1
   2bfcc:	d00d      	beq.n	2bfea <cdc_acm_config_get+0x2e>
		cfg->stop_bits = UART_CFG_STOP_BITS_2;
   2bfce:	2203      	movs	r2, #3
   2bfd0:	714a      	strb	r2, [r1, #5]
		break;
   2bfd2:	e001      	b.n	2bfd8 <cdc_acm_config_get+0x1c>
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
   2bfd4:	2201      	movs	r2, #1
   2bfd6:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
   2bfd8:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
   2bfdc:	3a01      	subs	r2, #1
   2bfde:	2a03      	cmp	r2, #3
   2bfe0:	d806      	bhi.n	2bff0 <cdc_acm_config_get+0x34>
   2bfe2:	e8df f002 	tbb	[pc, r2]
   2bfe6:	1508      	.short	0x1508
   2bfe8:	1b18      	.short	0x1b18
		cfg->stop_bits = UART_CFG_STOP_BITS_1_5;
   2bfea:	2202      	movs	r2, #2
   2bfec:	714a      	strb	r2, [r1, #5]
		break;
   2bfee:	e7f3      	b.n	2bfd8 <cdc_acm_config_get+0x1c>
		cfg->parity = UART_CFG_PARITY_NONE;
   2bff0:	2200      	movs	r2, #0
   2bff2:	710a      	strb	r2, [r1, #4]
		break;
   2bff4:	e001      	b.n	2bffa <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_ODD;
   2bff6:	2201      	movs	r2, #1
   2bff8:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
   2bffa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2bffe:	2b06      	cmp	r3, #6
   2c000:	d014      	beq.n	2c02c <cdc_acm_config_get+0x70>
   2c002:	2b07      	cmp	r3, #7
   2c004:	d015      	beq.n	2c032 <cdc_acm_config_get+0x76>
   2c006:	2b05      	cmp	r3, #5
   2c008:	d00b      	beq.n	2c022 <cdc_acm_config_get+0x66>
		cfg->data_bits = UART_CFG_DATA_BITS_8;
   2c00a:	2303      	movs	r3, #3
   2c00c:	718b      	strb	r3, [r1, #6]
		break;
   2c00e:	e00a      	b.n	2c026 <cdc_acm_config_get+0x6a>
		cfg->parity = UART_CFG_PARITY_EVEN;
   2c010:	2202      	movs	r2, #2
   2c012:	710a      	strb	r2, [r1, #4]
		break;
   2c014:	e7f1      	b.n	2bffa <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_MARK;
   2c016:	2203      	movs	r2, #3
   2c018:	710a      	strb	r2, [r1, #4]
		break;
   2c01a:	e7ee      	b.n	2bffa <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_SPACE;
   2c01c:	2204      	movs	r2, #4
   2c01e:	710a      	strb	r2, [r1, #4]
		break;
   2c020:	e7eb      	b.n	2bffa <cdc_acm_config_get+0x3e>
		cfg->data_bits = UART_CFG_DATA_BITS_5;
   2c022:	2300      	movs	r3, #0
   2c024:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   2c026:	2000      	movs	r0, #0
   2c028:	71c8      	strb	r0, [r1, #7]
}
   2c02a:	4770      	bx	lr
		cfg->data_bits = UART_CFG_DATA_BITS_6;
   2c02c:	2301      	movs	r3, #1
   2c02e:	718b      	strb	r3, [r1, #6]
		break;
   2c030:	e7f9      	b.n	2c026 <cdc_acm_config_get+0x6a>
		cfg->data_bits = UART_CFG_DATA_BITS_7;
   2c032:	2302      	movs	r3, #2
   2c034:	718b      	strb	r3, [r1, #6]
		break;
   2c036:	e7f6      	b.n	2c026 <cdc_acm_config_get+0x6a>

0002c038 <cdc_acm_line_ctrl_set>:
{
   2c038:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2c03a:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
   2c03c:	2940      	cmp	r1, #64	; 0x40
   2c03e:	f000 8081 	beq.w	2c144 <cdc_acm_line_ctrl_set+0x10c>
   2c042:	d81b      	bhi.n	2c07c <cdc_acm_line_ctrl_set+0x44>
   2c044:	2920      	cmp	r1, #32
   2c046:	f200 809f 	bhi.w	2c188 <cdc_acm_line_ctrl_set+0x150>
   2c04a:	2900      	cmp	r1, #0
   2c04c:	f000 809f 	beq.w	2c18e <cdc_acm_line_ctrl_set+0x156>
   2c050:	1e4b      	subs	r3, r1, #1
   2c052:	2b1f      	cmp	r3, #31
   2c054:	f200 809e 	bhi.w	2c194 <cdc_acm_line_ctrl_set+0x15c>
   2c058:	e8df f003 	tbb	[pc, r3]
   2c05c:	9c9c9c3d 	.word	0x9c9c9c3d
   2c060:	429c9c9c 	.word	0x429c9c9c
   2c064:	9c9c9c9c 	.word	0x9c9c9c9c
   2c068:	529c9c9c 	.word	0x529c9c9c
   2c06c:	9c9c9c9c 	.word	0x9c9c9c9c
   2c070:	9c9c9c9c 	.word	0x9c9c9c9c
   2c074:	9c9c9c9c 	.word	0x9c9c9c9c
   2c078:	639c9c9c 	.word	0x639c9c9c
   2c07c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   2c080:	d071      	beq.n	2c166 <cdc_acm_line_ctrl_set+0x12e>
   2c082:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2c086:	d110      	bne.n	2c0aa <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   2c088:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   2c08c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   2c090:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
   2c094:	b11a      	cbz	r2, 2c09e <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   2c096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c09a:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2c09e:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
   2c0a2:	f7ea fe0d 	bl	16cc0 <cdc_acm_send_notification>
		return 0;
   2c0a6:	2000      	movs	r0, #0
   2c0a8:	e076      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
	switch (ctrl) {
   2c0aa:	2980      	cmp	r1, #128	; 0x80
   2c0ac:	d110      	bne.n	2c0d0 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   2c0ae:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   2c0b2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   2c0b6:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
   2c0ba:	b11a      	cbz	r2, 2c0c4 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   2c0bc:	f043 0310 	orr.w	r3, r3, #16
   2c0c0:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2c0c4:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
   2c0c8:	f7ea fdfa 	bl	16cc0 <cdc_acm_send_notification>
		return 0;
   2c0cc:	2000      	movs	r0, #0
   2c0ce:	e063      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
	switch (ctrl) {
   2c0d0:	f06f 0012 	mvn.w	r0, #18
   2c0d4:	e060      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
		cdc_acm_baudrate_set(dev, val);
   2c0d6:	4611      	mov	r1, r2
   2c0d8:	f7ff ff4d 	bl	2bf76 <cdc_acm_baudrate_set>
		return 0;
   2c0dc:	2000      	movs	r0, #0
   2c0de:	e05b      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   2c0e0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   2c0e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   2c0e8:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
   2c0ec:	b11a      	cbz	r2, 2c0f6 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   2c0ee:	f043 0301 	orr.w	r3, r3, #1
   2c0f2:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   2c0f6:	2101      	movs	r1, #1
   2c0f8:	f7ea fde2 	bl	16cc0 <cdc_acm_send_notification>
		return 0;
   2c0fc:	2000      	movs	r0, #0
   2c0fe:	e04b      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   2c100:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   2c104:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   2c108:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
   2c10c:	b11a      	cbz	r2, 2c116 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   2c10e:	f043 0302 	orr.w	r3, r3, #2
   2c112:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2c116:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
   2c11a:	f7ea fdd1 	bl	16cc0 <cdc_acm_send_notification>
		return 0;
   2c11e:	2000      	movs	r0, #0
   2c120:	e03a      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   2c122:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   2c126:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2c12a:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
   2c12e:	b11a      	cbz	r2, 2c138 <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   2c130:	f043 0304 	orr.w	r3, r3, #4
   2c134:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2c138:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
   2c13c:	f7ea fdc0 	bl	16cc0 <cdc_acm_send_notification>
		return 0;
   2c140:	2000      	movs	r0, #0
   2c142:	e029      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   2c144:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   2c148:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   2c14c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
   2c150:	b11a      	cbz	r2, 2c15a <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   2c152:	f043 0308 	orr.w	r3, r3, #8
   2c156:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2c15a:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
   2c15e:	f7ea fdaf 	bl	16cc0 <cdc_acm_send_notification>
		return 0;
   2c162:	2000      	movs	r0, #0
   2c164:	e018      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   2c166:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
   2c16a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2c16e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (val) {
   2c172:	b11a      	cbz	r2, 2c17c <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   2c174:	f043 0320 	orr.w	r3, r3, #32
   2c178:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2c17c:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
   2c180:	f7ea fd9e 	bl	16cc0 <cdc_acm_send_notification>
		return 0;
   2c184:	2000      	movs	r0, #0
   2c186:	e007      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
	switch (ctrl) {
   2c188:	f06f 0012 	mvn.w	r0, #18
   2c18c:	e004      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
   2c18e:	f06f 0012 	mvn.w	r0, #18
   2c192:	e001      	b.n	2c198 <cdc_acm_line_ctrl_set+0x160>
   2c194:	f06f 0012 	mvn.w	r0, #18
}
   2c198:	bd10      	pop	{r4, pc}

0002c19a <cdc_acm_fifo_read>:
{
   2c19a:	b570      	push	{r4, r5, r6, lr}
   2c19c:	4605      	mov	r5, r0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2c19e:	6904      	ldr	r4, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2c1a0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   2c1a4:	f7ff f85b 	bl	2b25e <ring_buf_get>
   2c1a8:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   2c1aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	return buf->get_head == buf->put_tail;
   2c1ae:	691a      	ldr	r2, [r3, #16]
   2c1b0:	6899      	ldr	r1, [r3, #8]
   2c1b2:	4291      	cmp	r1, r2
   2c1b4:	d012      	beq.n	2c1dc <cdc_acm_fifo_read+0x42>
	if (dev_data->rx_paused == true) {
   2c1b6:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   2c1ba:	b16a      	cbz	r2, 2c1d8 <cdc_acm_fifo_read+0x3e>
	return buf->size - (buf->put_head - buf->get_tail);
   2c1bc:	69da      	ldr	r2, [r3, #28]
   2c1be:	6859      	ldr	r1, [r3, #4]
   2c1c0:	695b      	ldr	r3, [r3, #20]
   2c1c2:	1acb      	subs	r3, r1, r3
   2c1c4:	1ad3      	subs	r3, r2, r3
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
   2c1c6:	2b3f      	cmp	r3, #63	; 0x3f
   2c1c8:	d906      	bls.n	2c1d8 <cdc_acm_fifo_read+0x3e>
			struct usb_cfg_data *cfg = (void *)dev->config;
   2c1ca:	686a      	ldr	r2, [r5, #4]
			if (dev_data->configured) {
   2c1cc:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   2c1d0:	b943      	cbnz	r3, 2c1e4 <cdc_acm_fifo_read+0x4a>
			dev_data->rx_paused = false;
   2c1d2:	2300      	movs	r3, #0
   2c1d4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   2c1d8:	4630      	mov	r0, r6
   2c1da:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->rx_ready = false;
   2c1dc:	2200      	movs	r2, #0
   2c1de:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
   2c1e2:	e7e8      	b.n	2c1b6 <cdc_acm_fifo_read+0x1c>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
   2c1e4:	6a13      	ldr	r3, [r2, #32]
   2c1e6:	4622      	mov	r2, r4
   2c1e8:	2100      	movs	r1, #0
   2c1ea:	7b18      	ldrb	r0, [r3, #12]
   2c1ec:	f7ea fb6e 	bl	168cc <cdc_acm_read_cb>
   2c1f0:	e7ef      	b.n	2c1d2 <cdc_acm_fifo_read+0x38>

0002c1f2 <cdc_acm_poll_in>:
{
   2c1f2:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   2c1f4:	2201      	movs	r2, #1
   2c1f6:	f7ff ffd0 	bl	2c19a <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   2c1fa:	2801      	cmp	r0, #1
   2c1fc:	d101      	bne.n	2c202 <cdc_acm_poll_in+0x10>
   2c1fe:	2000      	movs	r0, #0
}
   2c200:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   2c202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c206:	e7fb      	b.n	2c200 <cdc_acm_poll_in+0xe>

0002c208 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2c208:	428b      	cmp	r3, r1
   2c20a:	d901      	bls.n	2c210 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   2c20c:	2000      	movs	r0, #0
	}
}
   2c20e:	4770      	bx	lr
{
   2c210:	b510      	push	{r4, lr}
   2c212:	4694      	mov	ip, r2
   2c214:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   2c216:	461a      	mov	r2, r3
   2c218:	4661      	mov	r1, ip
   2c21a:	f000 fae7 	bl	2c7ec <memcpy>
		return from_len;
   2c21e:	4620      	mov	r0, r4
}
   2c220:	bd10      	pop	{r4, pc}

0002c222 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2c222:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   2c224:	f000 fb11 	bl	2c84a <memset>
}
   2c228:	bd08      	pop	{r3, pc}

0002c22a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2c22a:	09c3      	lsrs	r3, r0, #7
   2c22c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2c230:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2c234:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2c238:	b2c0      	uxtb	r0, r0
   2c23a:	4770      	bx	lr

0002c23c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2c23c:	7803      	ldrb	r3, [r0, #0]
   2c23e:	78ca      	ldrb	r2, [r1, #3]
   2c240:	4053      	eors	r3, r2
   2c242:	7003      	strb	r3, [r0, #0]
   2c244:	7843      	ldrb	r3, [r0, #1]
   2c246:	788a      	ldrb	r2, [r1, #2]
   2c248:	4053      	eors	r3, r2
   2c24a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2c24c:	7883      	ldrb	r3, [r0, #2]
   2c24e:	784a      	ldrb	r2, [r1, #1]
   2c250:	4053      	eors	r3, r2
   2c252:	7083      	strb	r3, [r0, #2]
   2c254:	78c3      	ldrb	r3, [r0, #3]
   2c256:	780a      	ldrb	r2, [r1, #0]
   2c258:	4053      	eors	r3, r2
   2c25a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2c25c:	7903      	ldrb	r3, [r0, #4]
   2c25e:	79ca      	ldrb	r2, [r1, #7]
   2c260:	4053      	eors	r3, r2
   2c262:	7103      	strb	r3, [r0, #4]
   2c264:	7943      	ldrb	r3, [r0, #5]
   2c266:	798a      	ldrb	r2, [r1, #6]
   2c268:	4053      	eors	r3, r2
   2c26a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2c26c:	7983      	ldrb	r3, [r0, #6]
   2c26e:	794a      	ldrb	r2, [r1, #5]
   2c270:	4053      	eors	r3, r2
   2c272:	7183      	strb	r3, [r0, #6]
   2c274:	79c3      	ldrb	r3, [r0, #7]
   2c276:	790a      	ldrb	r2, [r1, #4]
   2c278:	4053      	eors	r3, r2
   2c27a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2c27c:	7a03      	ldrb	r3, [r0, #8]
   2c27e:	7aca      	ldrb	r2, [r1, #11]
   2c280:	4053      	eors	r3, r2
   2c282:	7203      	strb	r3, [r0, #8]
   2c284:	7a43      	ldrb	r3, [r0, #9]
   2c286:	7a8a      	ldrb	r2, [r1, #10]
   2c288:	4053      	eors	r3, r2
   2c28a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2c28c:	7a83      	ldrb	r3, [r0, #10]
   2c28e:	7a4a      	ldrb	r2, [r1, #9]
   2c290:	4053      	eors	r3, r2
   2c292:	7283      	strb	r3, [r0, #10]
   2c294:	7ac3      	ldrb	r3, [r0, #11]
   2c296:	7a0a      	ldrb	r2, [r1, #8]
   2c298:	4053      	eors	r3, r2
   2c29a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2c29c:	7b03      	ldrb	r3, [r0, #12]
   2c29e:	7bca      	ldrb	r2, [r1, #15]
   2c2a0:	4053      	eors	r3, r2
   2c2a2:	7303      	strb	r3, [r0, #12]
   2c2a4:	7b43      	ldrb	r3, [r0, #13]
   2c2a6:	7b8a      	ldrb	r2, [r1, #14]
   2c2a8:	4053      	eors	r3, r2
   2c2aa:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2c2ac:	7b83      	ldrb	r3, [r0, #14]
   2c2ae:	7b4a      	ldrb	r2, [r1, #13]
   2c2b0:	4053      	eors	r3, r2
   2c2b2:	7383      	strb	r3, [r0, #14]
   2c2b4:	7bc3      	ldrb	r3, [r0, #15]
   2c2b6:	7b0a      	ldrb	r2, [r1, #12]
   2c2b8:	4053      	eors	r3, r2
   2c2ba:	73c3      	strb	r3, [r0, #15]
}
   2c2bc:	4770      	bx	lr

0002c2be <shift_rows>:
{
   2c2be:	b500      	push	{lr}
   2c2c0:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2c2c2:	7802      	ldrb	r2, [r0, #0]
   2c2c4:	f88d 2000 	strb.w	r2, [sp]
   2c2c8:	7942      	ldrb	r2, [r0, #5]
   2c2ca:	f88d 2001 	strb.w	r2, [sp, #1]
   2c2ce:	7a82      	ldrb	r2, [r0, #10]
   2c2d0:	f88d 2002 	strb.w	r2, [sp, #2]
   2c2d4:	7bc2      	ldrb	r2, [r0, #15]
   2c2d6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2c2da:	7902      	ldrb	r2, [r0, #4]
   2c2dc:	f88d 2004 	strb.w	r2, [sp, #4]
   2c2e0:	7a42      	ldrb	r2, [r0, #9]
   2c2e2:	f88d 2005 	strb.w	r2, [sp, #5]
   2c2e6:	7b82      	ldrb	r2, [r0, #14]
   2c2e8:	f88d 2006 	strb.w	r2, [sp, #6]
   2c2ec:	78c2      	ldrb	r2, [r0, #3]
   2c2ee:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2c2f2:	7a02      	ldrb	r2, [r0, #8]
   2c2f4:	f88d 2008 	strb.w	r2, [sp, #8]
   2c2f8:	7b42      	ldrb	r2, [r0, #13]
   2c2fa:	f88d 2009 	strb.w	r2, [sp, #9]
   2c2fe:	7882      	ldrb	r2, [r0, #2]
   2c300:	f88d 200a 	strb.w	r2, [sp, #10]
   2c304:	79c2      	ldrb	r2, [r0, #7]
   2c306:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2c30a:	7b02      	ldrb	r2, [r0, #12]
   2c30c:	f88d 200c 	strb.w	r2, [sp, #12]
   2c310:	7842      	ldrb	r2, [r0, #1]
   2c312:	f88d 200d 	strb.w	r2, [sp, #13]
   2c316:	7982      	ldrb	r2, [r0, #6]
   2c318:	f88d 200e 	strb.w	r2, [sp, #14]
   2c31c:	7ac3      	ldrb	r3, [r0, #11]
   2c31e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2c322:	2310      	movs	r3, #16
   2c324:	466a      	mov	r2, sp
   2c326:	4619      	mov	r1, r3
   2c328:	f7ff ff6e 	bl	2c208 <_copy>
}
   2c32c:	b005      	add	sp, #20
   2c32e:	f85d fb04 	ldr.w	pc, [sp], #4

0002c332 <mult_row_column>:
{
   2c332:	b570      	push	{r4, r5, r6, lr}
   2c334:	4606      	mov	r6, r0
   2c336:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2c338:	7808      	ldrb	r0, [r1, #0]
   2c33a:	f7ff ff76 	bl	2c22a <_double_byte>
   2c33e:	4605      	mov	r5, r0
   2c340:	7860      	ldrb	r0, [r4, #1]
   2c342:	f7ff ff72 	bl	2c22a <_double_byte>
   2c346:	7861      	ldrb	r1, [r4, #1]
   2c348:	78a2      	ldrb	r2, [r4, #2]
   2c34a:	78e3      	ldrb	r3, [r4, #3]
   2c34c:	4048      	eors	r0, r1
   2c34e:	4045      	eors	r5, r0
   2c350:	406a      	eors	r2, r5
   2c352:	4053      	eors	r3, r2
   2c354:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2c356:	7825      	ldrb	r5, [r4, #0]
   2c358:	7860      	ldrb	r0, [r4, #1]
   2c35a:	f7ff ff66 	bl	2c22a <_double_byte>
   2c35e:	4045      	eors	r5, r0
   2c360:	b2ed      	uxtb	r5, r5
   2c362:	78a0      	ldrb	r0, [r4, #2]
   2c364:	f7ff ff61 	bl	2c22a <_double_byte>
   2c368:	78a2      	ldrb	r2, [r4, #2]
   2c36a:	78e3      	ldrb	r3, [r4, #3]
   2c36c:	4050      	eors	r0, r2
   2c36e:	4045      	eors	r5, r0
   2c370:	406b      	eors	r3, r5
   2c372:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2c374:	7825      	ldrb	r5, [r4, #0]
   2c376:	7863      	ldrb	r3, [r4, #1]
   2c378:	405d      	eors	r5, r3
   2c37a:	78a0      	ldrb	r0, [r4, #2]
   2c37c:	f7ff ff55 	bl	2c22a <_double_byte>
   2c380:	4045      	eors	r5, r0
   2c382:	b2ed      	uxtb	r5, r5
   2c384:	78e0      	ldrb	r0, [r4, #3]
   2c386:	f7ff ff50 	bl	2c22a <_double_byte>
   2c38a:	78e3      	ldrb	r3, [r4, #3]
   2c38c:	4058      	eors	r0, r3
   2c38e:	4045      	eors	r5, r0
   2c390:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2c392:	7820      	ldrb	r0, [r4, #0]
   2c394:	f7ff ff49 	bl	2c22a <_double_byte>
   2c398:	7822      	ldrb	r2, [r4, #0]
   2c39a:	7863      	ldrb	r3, [r4, #1]
   2c39c:	78a5      	ldrb	r5, [r4, #2]
   2c39e:	4050      	eors	r0, r2
   2c3a0:	4043      	eors	r3, r0
   2c3a2:	405d      	eors	r5, r3
   2c3a4:	b2ed      	uxtb	r5, r5
   2c3a6:	78e0      	ldrb	r0, [r4, #3]
   2c3a8:	f7ff ff3f 	bl	2c22a <_double_byte>
   2c3ac:	4045      	eors	r5, r0
   2c3ae:	70f5      	strb	r5, [r6, #3]
}
   2c3b0:	bd70      	pop	{r4, r5, r6, pc}

0002c3b2 <mix_columns>:
{
   2c3b2:	b510      	push	{r4, lr}
   2c3b4:	b084      	sub	sp, #16
   2c3b6:	4604      	mov	r4, r0
	mult_row_column(t, s);
   2c3b8:	4601      	mov	r1, r0
   2c3ba:	4668      	mov	r0, sp
   2c3bc:	f7ff ffb9 	bl	2c332 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2c3c0:	1d21      	adds	r1, r4, #4
   2c3c2:	a801      	add	r0, sp, #4
   2c3c4:	f7ff ffb5 	bl	2c332 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2c3c8:	f104 0108 	add.w	r1, r4, #8
   2c3cc:	a802      	add	r0, sp, #8
   2c3ce:	f7ff ffb0 	bl	2c332 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2c3d2:	f104 010c 	add.w	r1, r4, #12
   2c3d6:	a803      	add	r0, sp, #12
   2c3d8:	f7ff ffab 	bl	2c332 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2c3dc:	2310      	movs	r3, #16
   2c3de:	466a      	mov	r2, sp
   2c3e0:	4619      	mov	r1, r3
   2c3e2:	4620      	mov	r0, r4
   2c3e4:	f7ff ff10 	bl	2c208 <_copy>
}
   2c3e8:	b004      	add	sp, #16
   2c3ea:	bd10      	pop	{r4, pc}

0002c3ec <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2c3ec:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2c3ee:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2c3f2:	2a00      	cmp	r2, #0
   2c3f4:	db04      	blt.n	2c400 <gf_double+0x14>
   2c3f6:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   2c3fa:	f100 020f 	add.w	r2, r0, #15
   2c3fe:	e006      	b.n	2c40e <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2c400:	f04f 0c87 	mov.w	ip, #135	; 0x87
   2c404:	e7f9      	b.n	2c3fa <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2c406:	f813 0901 	ldrb.w	r0, [r3], #-1
   2c40a:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   2c40e:	7818      	ldrb	r0, [r3, #0]
   2c410:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   2c414:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   2c418:	428b      	cmp	r3, r1
   2c41a:	d1f4      	bne.n	2c406 <gf_double+0x1a>
	}
}
   2c41c:	4770      	bx	lr

0002c41e <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2c41e:	b130      	cbz	r0, 2c42e <tc_cmac_erase+0x10>
{
   2c420:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2c422:	2258      	movs	r2, #88	; 0x58
   2c424:	2100      	movs	r1, #0
   2c426:	f7ff fefc 	bl	2c222 <_set>

	return TC_CRYPTO_SUCCESS;
   2c42a:	2001      	movs	r0, #1
}
   2c42c:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2c42e:	2000      	movs	r0, #0
}
   2c430:	4770      	bx	lr

0002c432 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2c432:	b1a0      	cbz	r0, 2c45e <tc_cmac_init+0x2c>
{
   2c434:	b510      	push	{r4, lr}
   2c436:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2c438:	2210      	movs	r2, #16
   2c43a:	2100      	movs	r1, #0
   2c43c:	f7ff fef1 	bl	2c222 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2c440:	2210      	movs	r2, #16
   2c442:	2100      	movs	r1, #0
   2c444:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2c448:	f7ff feeb 	bl	2c222 <_set>
	s->leftover_offset = 0;
   2c44c:	2300      	movs	r3, #0
   2c44e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2c450:	2200      	movs	r2, #0
   2c452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2c456:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   2c45a:	2001      	movs	r0, #1
}
   2c45c:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2c45e:	2000      	movs	r0, #0
}
   2c460:	4770      	bx	lr

0002c462 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2c462:	b338      	cbz	r0, 2c4b4 <tc_cmac_setup+0x52>
{
   2c464:	b570      	push	{r4, r5, r6, lr}
   2c466:	460d      	mov	r5, r1
   2c468:	4616      	mov	r6, r2
   2c46a:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2c46c:	b321      	cbz	r1, 2c4b8 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2c46e:	2258      	movs	r2, #88	; 0x58
   2c470:	2100      	movs	r1, #0
   2c472:	f7ff fed6 	bl	2c222 <_set>
	s->sched = sched;
   2c476:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2c478:	4629      	mov	r1, r5
   2c47a:	4630      	mov	r0, r6
   2c47c:	f7ea fe7a 	bl	17174 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2c480:	2210      	movs	r2, #16
   2c482:	2100      	movs	r1, #0
   2c484:	4620      	mov	r0, r4
   2c486:	f7ff fecc 	bl	2c222 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2c48a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2c48c:	4621      	mov	r1, r4
   2c48e:	4620      	mov	r0, r4
   2c490:	f7ea fed2 	bl	17238 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2c494:	f104 0510 	add.w	r5, r4, #16
   2c498:	4621      	mov	r1, r4
   2c49a:	4628      	mov	r0, r5
   2c49c:	f7ff ffa6 	bl	2c3ec <gf_double>
	gf_double (s->K2, s->K1);
   2c4a0:	4629      	mov	r1, r5
   2c4a2:	f104 0020 	add.w	r0, r4, #32
   2c4a6:	f7ff ffa1 	bl	2c3ec <gf_double>
	tc_cmac_init(s);
   2c4aa:	4620      	mov	r0, r4
   2c4ac:	f7ff ffc1 	bl	2c432 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2c4b0:	2001      	movs	r0, #1
}
   2c4b2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2c4b4:	2000      	movs	r0, #0
}
   2c4b6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2c4b8:	2000      	movs	r0, #0
   2c4ba:	e7fa      	b.n	2c4b2 <tc_cmac_setup+0x50>

0002c4bc <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2c4bc:	2800      	cmp	r0, #0
   2c4be:	d064      	beq.n	2c58a <tc_cmac_update+0xce>
{
   2c4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c4c4:	460d      	mov	r5, r1
   2c4c6:	4616      	mov	r6, r2
   2c4c8:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2c4ca:	2a00      	cmp	r2, #0
   2c4cc:	d05f      	beq.n	2c58e <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2c4ce:	2900      	cmp	r1, #0
   2c4d0:	d060      	beq.n	2c594 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2c4d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2c4d4:	6d42      	ldr	r2, [r0, #84]	; 0x54
   2c4d6:	ea53 0102 	orrs.w	r1, r3, r2
   2c4da:	d05d      	beq.n	2c598 <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2c4dc:	3b01      	subs	r3, #1
   2c4de:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   2c4e2:	6503      	str	r3, [r0, #80]	; 0x50
   2c4e4:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2c4e6:	6c47      	ldr	r7, [r0, #68]	; 0x44
   2c4e8:	2f00      	cmp	r7, #0
   2c4ea:	d03d      	beq.n	2c568 <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2c4ec:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   2c4f0:	4546      	cmp	r6, r8
   2c4f2:	d30d      	bcc.n	2c510 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2c4f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2c4f8:	4643      	mov	r3, r8
   2c4fa:	462a      	mov	r2, r5
   2c4fc:	4641      	mov	r1, r8
   2c4fe:	4420      	add	r0, r4
   2c500:	f7ff fe82 	bl	2c208 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2c504:	3f10      	subs	r7, #16
   2c506:	443e      	add	r6, r7
		data += remaining_space;
   2c508:	4445      	add	r5, r8
		s->leftover_offset = 0;
   2c50a:	2300      	movs	r3, #0
   2c50c:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c50e:	e013      	b.n	2c538 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2c510:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2c514:	4633      	mov	r3, r6
   2c516:	462a      	mov	r2, r5
   2c518:	4631      	mov	r1, r6
   2c51a:	4420      	add	r0, r4
   2c51c:	f7ff fe74 	bl	2c208 <_copy>
			s->leftover_offset += data_length;
   2c520:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2c522:	4433      	add	r3, r6
   2c524:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2c526:	2001      	movs	r0, #1
   2c528:	e032      	b.n	2c590 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   2c52a:	5ce2      	ldrb	r2, [r4, r3]
   2c52c:	18e1      	adds	r1, r4, r3
   2c52e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   2c532:	404a      	eors	r2, r1
   2c534:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c536:	3301      	adds	r3, #1
   2c538:	2b0f      	cmp	r3, #15
   2c53a:	d9f6      	bls.n	2c52a <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2c53c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2c53e:	4621      	mov	r1, r4
   2c540:	4620      	mov	r0, r4
   2c542:	f7ea fe79 	bl	17238 <tc_aes_encrypt>
   2c546:	e00f      	b.n	2c568 <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   2c548:	5ce0      	ldrb	r0, [r4, r3]
   2c54a:	f815 c003 	ldrb.w	ip, [r5, r3]
   2c54e:	ea80 000c 	eor.w	r0, r0, ip
   2c552:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c554:	3301      	adds	r3, #1
   2c556:	2b0f      	cmp	r3, #15
   2c558:	d9f6      	bls.n	2c548 <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2c55a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2c55c:	4621      	mov	r1, r4
   2c55e:	4620      	mov	r0, r4
   2c560:	f7ea fe6a 	bl	17238 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2c564:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2c566:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   2c568:	2e10      	cmp	r6, #16
   2c56a:	d901      	bls.n	2c570 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c56c:	2300      	movs	r3, #0
   2c56e:	e7f2      	b.n	2c556 <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   2c570:	b90e      	cbnz	r6, 2c576 <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2c572:	2001      	movs	r0, #1
   2c574:	e00c      	b.n	2c590 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   2c576:	4633      	mov	r3, r6
   2c578:	462a      	mov	r2, r5
   2c57a:	4631      	mov	r1, r6
   2c57c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2c580:	f7ff fe42 	bl	2c208 <_copy>
		s->leftover_offset = data_length;
   2c584:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2c586:	2001      	movs	r0, #1
   2c588:	e002      	b.n	2c590 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   2c58a:	2000      	movs	r0, #0
}
   2c58c:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   2c58e:	2001      	movs	r0, #1
}
   2c590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2c594:	2000      	movs	r0, #0
   2c596:	e7fb      	b.n	2c590 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   2c598:	2000      	movs	r0, #0
   2c59a:	e7f9      	b.n	2c590 <tc_cmac_update+0xd4>

0002c59c <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2c59c:	b380      	cbz	r0, 2c600 <tc_cmac_final+0x64>
{
   2c59e:	b538      	push	{r3, r4, r5, lr}
   2c5a0:	460c      	mov	r4, r1
   2c5a2:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2c5a4:	b371      	cbz	r1, 2c604 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2c5a6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2c5a8:	2a10      	cmp	r2, #16
   2c5aa:	d103      	bne.n	2c5b4 <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2c5ac:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c5b0:	2300      	movs	r3, #0
   2c5b2:	e019      	b.n	2c5e8 <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2c5b4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2c5b8:	f1c2 0210 	rsb	r2, r2, #16
   2c5bc:	2100      	movs	r1, #0
   2c5be:	4420      	add	r0, r4
   2c5c0:	f7ff fe2f 	bl	2c222 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2c5c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2c5c6:	4423      	add	r3, r4
   2c5c8:	2280      	movs	r2, #128	; 0x80
   2c5ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2c5ce:	f104 0c20 	add.w	ip, r4, #32
   2c5d2:	e7ed      	b.n	2c5b0 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2c5d4:	5ce2      	ldrb	r2, [r4, r3]
   2c5d6:	18e1      	adds	r1, r4, r3
   2c5d8:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   2c5dc:	f81c 1003 	ldrb.w	r1, [ip, r3]
   2c5e0:	4048      	eors	r0, r1
   2c5e2:	4042      	eors	r2, r0
   2c5e4:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2c5e6:	3301      	adds	r3, #1
   2c5e8:	2b0f      	cmp	r3, #15
   2c5ea:	d9f3      	bls.n	2c5d4 <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2c5ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2c5ee:	4621      	mov	r1, r4
   2c5f0:	4628      	mov	r0, r5
   2c5f2:	f7ea fe21 	bl	17238 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2c5f6:	4620      	mov	r0, r4
   2c5f8:	f7ff ff11 	bl	2c41e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2c5fc:	2001      	movs	r0, #1
}
   2c5fe:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2c600:	2000      	movs	r0, #0
}
   2c602:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2c604:	2000      	movs	r0, #0
   2c606:	e7fa      	b.n	2c5fe <tc_cmac_final+0x62>

0002c608 <abort_function>:
{
   2c608:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2c60a:	2000      	movs	r0, #0
   2c60c:	f7e7 fa40 	bl	13a90 <sys_reboot>

0002c610 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2c610:	b538      	push	{r3, r4, r5, lr}
   2c612:	4604      	mov	r4, r0

	if (esf != NULL) {
   2c614:	460d      	mov	r5, r1
   2c616:	b111      	cbz	r1, 2c61e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   2c618:	4608      	mov	r0, r1
   2c61a:	f7ea ff97 	bl	1754c <esf_dump>
	}
	z_fatal_error(reason, esf);
   2c61e:	4629      	mov	r1, r5
   2c620:	4620      	mov	r0, r4
   2c622:	f7f9 f987 	bl	25934 <z_fatal_error>
}
   2c626:	bd38      	pop	{r3, r4, r5, pc}

0002c628 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2c628:	b508      	push	{r3, lr}
   2c62a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2c62c:	6800      	ldr	r0, [r0, #0]
   2c62e:	f7ff ffef 	bl	2c610 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   2c632:	bd08      	pop	{r3, pc}

0002c634 <arch_irq_enable>:
{
   2c634:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   2c636:	b240      	sxtb	r0, r0
   2c638:	f7eb f8a6 	bl	17788 <__NVIC_EnableIRQ>
}
   2c63c:	bd08      	pop	{r3, pc}

0002c63e <arch_irq_disable>:
{
   2c63e:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   2c640:	b240      	sxtb	r0, r0
   2c642:	f7eb f8af 	bl	177a4 <__NVIC_DisableIRQ>
}
   2c646:	bd08      	pop	{r3, pc}

0002c648 <z_arm_irq_priority_set>:
{
   2c648:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   2c64a:	f012 0f01 	tst.w	r2, #1
   2c64e:	d104      	bne.n	2c65a <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   2c650:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2c652:	b240      	sxtb	r0, r0
   2c654:	f7eb f8b8 	bl	177c8 <__NVIC_SetPriority>
}
   2c658:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   2c65a:	2100      	movs	r1, #0
   2c65c:	e7f9      	b.n	2c652 <z_arm_irq_priority_set+0xa>

0002c65e <z_irq_spurious>:
{
   2c65e:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2c660:	2100      	movs	r1, #0
   2c662:	2001      	movs	r0, #1
   2c664:	f7ff ffd4 	bl	2c610 <z_arm_fatal_error>
}
   2c668:	bd08      	pop	{r3, pc}

0002c66a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2c66a:	b508      	push	{r3, lr}
	handler();
   2c66c:	f7eb f8de 	bl	1782c <z_SysNmiOnReset>
	z_arm_int_exit();
   2c670:	f7eb f9d0 	bl	17a14 <z_arm_exc_exit>
}
   2c674:	bd08      	pop	{r3, pc}

0002c676 <memory_fault_recoverable>:
}
   2c676:	2000      	movs	r0, #0
   2c678:	4770      	bx	lr

0002c67a <fault_handle>:
{
   2c67a:	b508      	push	{r3, lr}
	*recoverable = false;
   2c67c:	2300      	movs	r3, #0
   2c67e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2c680:	1ecb      	subs	r3, r1, #3
   2c682:	2b09      	cmp	r3, #9
   2c684:	d81a      	bhi.n	2c6bc <fault_handle+0x42>
   2c686:	e8df f003 	tbb	[pc, r3]
   2c68a:	0905      	.short	0x0905
   2c68c:	1919110d 	.word	0x1919110d
   2c690:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   2c694:	4611      	mov	r1, r2
   2c696:	f7eb ff21 	bl	184dc <hard_fault>
}
   2c69a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2c69c:	2100      	movs	r1, #0
   2c69e:	f7eb fd91 	bl	181c4 <mem_manage_fault>
		break;
   2c6a2:	e7fa      	b.n	2c69a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   2c6a4:	2100      	movs	r1, #0
   2c6a6:	f7eb fa23 	bl	17af0 <bus_fault>
		break;
   2c6aa:	e7f6      	b.n	2c69a <fault_handle+0x20>
		reason = usage_fault(esf);
   2c6ac:	f7eb fbae 	bl	17e0c <usage_fault>
		break;
   2c6b0:	e7f3      	b.n	2c69a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   2c6b2:	4611      	mov	r1, r2
   2c6b4:	f7eb fcec 	bl	18090 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2c6b8:	2000      	movs	r0, #0
		break;
   2c6ba:	e7ee      	b.n	2c69a <fault_handle+0x20>
		reserved_exception(esf, fault);
   2c6bc:	f7eb fd16 	bl	180ec <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2c6c0:	2000      	movs	r0, #0
	return reason;
   2c6c2:	e7ea      	b.n	2c69a <fault_handle+0x20>

0002c6c4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   2c6c4:	6843      	ldr	r3, [r0, #4]
   2c6c6:	1e5a      	subs	r2, r3, #1
		&&
   2c6c8:	4213      	tst	r3, r2
   2c6ca:	d106      	bne.n	2c6da <mpu_partition_is_valid+0x16>
		&&
   2c6cc:	2b1f      	cmp	r3, #31
   2c6ce:	d906      	bls.n	2c6de <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2c6d0:	6803      	ldr	r3, [r0, #0]
		&&
   2c6d2:	421a      	tst	r2, r3
   2c6d4:	d005      	beq.n	2c6e2 <mpu_partition_is_valid+0x1e>
   2c6d6:	2000      	movs	r0, #0
   2c6d8:	4770      	bx	lr
   2c6da:	2000      	movs	r0, #0
   2c6dc:	4770      	bx	lr
   2c6de:	2000      	movs	r0, #0
   2c6e0:	4770      	bx	lr
   2c6e2:	2001      	movs	r0, #1
}
   2c6e4:	4770      	bx	lr

0002c6e6 <mpu_configure_region>:
{
   2c6e6:	b500      	push	{lr}
   2c6e8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2c6ea:	680b      	ldr	r3, [r1, #0]
   2c6ec:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   2c6ee:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2c6f0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   2c6f2:	2b20      	cmp	r3, #32
   2c6f4:	d912      	bls.n	2c71c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   2c6f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2c6fa:	d811      	bhi.n	2c720 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2c6fc:	3b01      	subs	r3, #1
   2c6fe:	fab3 f383 	clz	r3, r3
   2c702:	f1c3 031f 	rsb	r3, r3, #31
   2c706:	005b      	lsls	r3, r3, #1
   2c708:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2c70c:	4313      	orrs	r3, r2
   2c70e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2c710:	a901      	add	r1, sp, #4
   2c712:	f7ec f919 	bl	18948 <region_allocate_and_init>
}
   2c716:	b005      	add	sp, #20
   2c718:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   2c71c:	2308      	movs	r3, #8
   2c71e:	e7f5      	b.n	2c70c <mpu_configure_region+0x26>
		return REGION_4G;
   2c720:	233e      	movs	r3, #62	; 0x3e
   2c722:	e7f3      	b.n	2c70c <mpu_configure_region+0x26>

0002c724 <arm_core_mpu_configure_static_mpu_regions>:
{
   2c724:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2c726:	f7ec f9c5 	bl	18ab4 <mpu_configure_static_mpu_regions>
}
   2c72a:	bd08      	pop	{r3, pc}

0002c72c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   2c72c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   2c72e:	f7ec f9cb 	bl	18ac8 <mpu_configure_dynamic_mpu_regions>
}
   2c732:	bd08      	pop	{r3, pc}

0002c734 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2c734:	4602      	mov	r2, r0
   2c736:	e002      	b.n	2c73e <strcpy+0xa>
		*d = *s;
   2c738:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   2c73c:	3101      	adds	r1, #1
	while (*s != '\0') {
   2c73e:	780b      	ldrb	r3, [r1, #0]
   2c740:	2b00      	cmp	r3, #0
   2c742:	d1f9      	bne.n	2c738 <strcpy+0x4>
	}

	*d = '\0';
   2c744:	7013      	strb	r3, [r2, #0]

	return dest;
}
   2c746:	4770      	bx	lr

0002c748 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2c748:	4603      	mov	r3, r0
   2c74a:	b1a2      	cbz	r2, 2c776 <strncpy+0x2e>
{
   2c74c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   2c74e:	780c      	ldrb	r4, [r1, #0]
   2c750:	b12c      	cbz	r4, 2c75e <strncpy+0x16>
		*d = *s;
   2c752:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   2c756:	3101      	adds	r1, #1
		d++;
		n--;
   2c758:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   2c75a:	2a00      	cmp	r2, #0
   2c75c:	d1f7      	bne.n	2c74e <strncpy+0x6>
	}

	while (n > 0) {
   2c75e:	b122      	cbz	r2, 2c76a <strncpy+0x22>
		*d = '\0';
   2c760:	2100      	movs	r1, #0
   2c762:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   2c766:	3a01      	subs	r2, #1
   2c768:	e7f9      	b.n	2c75e <strncpy+0x16>
	}

	return dest;
}
   2c76a:	bc10      	pop	{r4}
   2c76c:	4770      	bx	lr
		*d = '\0';
   2c76e:	2100      	movs	r1, #0
   2c770:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2c774:	3a01      	subs	r2, #1
	while (n > 0) {
   2c776:	2a00      	cmp	r2, #0
   2c778:	d1f9      	bne.n	2c76e <strncpy+0x26>
   2c77a:	4770      	bx	lr

0002c77c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2c77c:	4603      	mov	r3, r0
	size_t n = 0;
   2c77e:	2000      	movs	r0, #0

	while (*s != '\0') {
   2c780:	e001      	b.n	2c786 <strlen+0xa>
		s++;
   2c782:	3301      	adds	r3, #1
		n++;
   2c784:	3001      	adds	r0, #1
	while (*s != '\0') {
   2c786:	781a      	ldrb	r2, [r3, #0]
   2c788:	2a00      	cmp	r2, #0
   2c78a:	d1fa      	bne.n	2c782 <strlen+0x6>
	}

	return n;
}
   2c78c:	4770      	bx	lr

0002c78e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2c78e:	4603      	mov	r3, r0
	size_t n = 0;
   2c790:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2c792:	e001      	b.n	2c798 <strnlen+0xa>
		s++;
   2c794:	3301      	adds	r3, #1
		n++;
   2c796:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   2c798:	781a      	ldrb	r2, [r3, #0]
   2c79a:	b10a      	cbz	r2, 2c7a0 <strnlen+0x12>
   2c79c:	4288      	cmp	r0, r1
   2c79e:	d3f9      	bcc.n	2c794 <strnlen+0x6>
	}

	return n;
}
   2c7a0:	4770      	bx	lr

0002c7a2 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2c7a2:	4613      	mov	r3, r2
   2c7a4:	b16a      	cbz	r2, 2c7c2 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2c7a6:	3b01      	subs	r3, #1
   2c7a8:	d007      	beq.n	2c7ba <memcmp+0x18>
   2c7aa:	f890 c000 	ldrb.w	ip, [r0]
   2c7ae:	780a      	ldrb	r2, [r1, #0]
   2c7b0:	4594      	cmp	ip, r2
   2c7b2:	d102      	bne.n	2c7ba <memcmp+0x18>
		c1++;
   2c7b4:	3001      	adds	r0, #1
		c2++;
   2c7b6:	3101      	adds	r1, #1
   2c7b8:	e7f5      	b.n	2c7a6 <memcmp+0x4>
	}

	return *c1 - *c2;
   2c7ba:	7800      	ldrb	r0, [r0, #0]
   2c7bc:	780b      	ldrb	r3, [r1, #0]
   2c7be:	1ac0      	subs	r0, r0, r3
   2c7c0:	4770      	bx	lr
		return 0;
   2c7c2:	2000      	movs	r0, #0
}
   2c7c4:	4770      	bx	lr

0002c7c6 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2c7c6:	1a43      	subs	r3, r0, r1
   2c7c8:	4293      	cmp	r3, r2
   2c7ca:	d304      	bcc.n	2c7d6 <memmove+0x10>
	char *dest = d;
   2c7cc:	4603      	mov	r3, r0
   2c7ce:	e00a      	b.n	2c7e6 <memmove+0x20>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
   2c7d0:	3a01      	subs	r2, #1
			dest[n] = src[n];
   2c7d2:	5c8b      	ldrb	r3, [r1, r2]
   2c7d4:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
   2c7d6:	2a00      	cmp	r2, #0
   2c7d8:	d1fa      	bne.n	2c7d0 <memmove+0xa>
   2c7da:	4770      	bx	lr
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
   2c7dc:	f811 cb01 	ldrb.w	ip, [r1], #1
   2c7e0:	f803 cb01 	strb.w	ip, [r3], #1
			dest++;
			src++;
			n--;
   2c7e4:	3a01      	subs	r2, #1
		while (n > 0) {
   2c7e6:	2a00      	cmp	r2, #0
   2c7e8:	d1f8      	bne.n	2c7dc <memmove+0x16>
		}
	}

	return d;
}
   2c7ea:	4770      	bx	lr

0002c7ec <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   2c7ec:	ea80 0301 	eor.w	r3, r0, r1
   2c7f0:	f013 0f03 	tst.w	r3, #3
   2c7f4:	d001      	beq.n	2c7fa <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   2c7f6:	4603      	mov	r3, r0
   2c7f8:	e023      	b.n	2c842 <memcpy+0x56>
   2c7fa:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   2c7fc:	f013 0f03 	tst.w	r3, #3
   2c800:	d00f      	beq.n	2c822 <memcpy+0x36>
			if (n == 0) {
   2c802:	b30a      	cbz	r2, 2c848 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   2c804:	f811 cb01 	ldrb.w	ip, [r1], #1
   2c808:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   2c80c:	3a01      	subs	r2, #1
   2c80e:	e7f5      	b.n	2c7fc <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   2c810:	f811 cb01 	ldrb.w	ip, [r1], #1
   2c814:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2c818:	3a01      	subs	r2, #1
	while (n > 0) {
   2c81a:	2a00      	cmp	r2, #0
   2c81c:	d1f8      	bne.n	2c810 <memcpy+0x24>
	}

	return d;
}
   2c81e:	bc10      	pop	{r4}
   2c820:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   2c822:	2a03      	cmp	r2, #3
   2c824:	d90d      	bls.n	2c842 <memcpy+0x56>
{
   2c826:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   2c828:	f851 4b04 	ldr.w	r4, [r1], #4
   2c82c:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   2c830:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   2c832:	2a03      	cmp	r2, #3
   2c834:	d8f8      	bhi.n	2c828 <memcpy+0x3c>
   2c836:	e7f0      	b.n	2c81a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   2c838:	f811 cb01 	ldrb.w	ip, [r1], #1
   2c83c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2c840:	3a01      	subs	r2, #1
	while (n > 0) {
   2c842:	2a00      	cmp	r2, #0
   2c844:	d1f8      	bne.n	2c838 <memcpy+0x4c>
   2c846:	4770      	bx	lr
}
   2c848:	4770      	bx	lr

0002c84a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2c84a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   2c84e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2c850:	e002      	b.n	2c858 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   2c852:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2c856:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2c858:	f013 0f03 	tst.w	r3, #3
   2c85c:	d002      	beq.n	2c864 <memset+0x1a>
		if (n == 0) {
   2c85e:	2a00      	cmp	r2, #0
   2c860:	d1f7      	bne.n	2c852 <memset+0x8>
   2c862:	e00f      	b.n	2c884 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   2c864:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   2c866:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   2c86a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2c86e:	2a03      	cmp	r2, #3
   2c870:	d906      	bls.n	2c880 <memset+0x36>
		*(d_word++) = c_word;
   2c872:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   2c876:	3a04      	subs	r2, #4
   2c878:	e7f9      	b.n	2c86e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   2c87a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2c87e:	3a01      	subs	r2, #1
	while (n > 0) {
   2c880:	2a00      	cmp	r2, #0
   2c882:	d1fa      	bne.n	2c87a <memset+0x30>
	}

	return buf;
}
   2c884:	4770      	bx	lr

0002c886 <_stdout_hook_default>:
}
   2c886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c88a:	4770      	bx	lr

0002c88c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2c88c:	684b      	ldr	r3, [r1, #4]
   2c88e:	2b01      	cmp	r3, #1
   2c890:	dd07      	ble.n	2c8a2 <sprintf_out+0x16>
		*(p->ptr) = c;
   2c892:	680b      	ldr	r3, [r1, #0]
   2c894:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2c896:	680b      	ldr	r3, [r1, #0]
   2c898:	3301      	adds	r3, #1
   2c89a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2c89c:	684b      	ldr	r3, [r1, #4]
   2c89e:	3b01      	subs	r3, #1
   2c8a0:	604b      	str	r3, [r1, #4]
}
   2c8a2:	2000      	movs	r0, #0
   2c8a4:	4770      	bx	lr

0002c8a6 <sys_arch_reboot>:
{
   2c8a6:	b508      	push	{r3, lr}
    *p_gpregret = val;
   2c8a8:	b2c0      	uxtb	r0, r0
   2c8aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c8ae:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   2c8b2:	f7ec f975 	bl	18ba0 <__NVIC_SystemReset>

0002c8b6 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2c8b6:	2301      	movs	r3, #1
   2c8b8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2c8bc:	f3bf 8f4f 	dsb	sy
        __WFE();
   2c8c0:	bf20      	wfe
    while (true)
   2c8c2:	e7fd      	b.n	2c8c0 <nrf_power_system_off+0xa>

0002c8c4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2c8c4:	2806      	cmp	r0, #6
   2c8c6:	d000      	beq.n	2c8ca <pm_state_set+0x6>
   2c8c8:	4770      	bx	lr
{
   2c8ca:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   2c8cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   2c8d0:	f7ff fff1 	bl	2c8b6 <nrf_power_system_off>

0002c8d4 <pm_state_exit_post_ops>:
   2c8d4:	2300      	movs	r3, #0
   2c8d6:	f383 8811 	msr	BASEPRI, r3
   2c8da:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2c8de:	4770      	bx	lr

0002c8e0 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2c8e0:	b510      	push	{r4, lr}
   2c8e2:	b08a      	sub	sp, #40	; 0x28
   2c8e4:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   2c8e6:	a905      	add	r1, sp, #20
   2c8e8:	f7ec fa3c 	bl	18d64 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2c8ec:	4669      	mov	r1, sp
   2c8ee:	4620      	mov	r0, r4
   2c8f0:	f7ec fa38 	bl	18d64 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   2c8f4:	2210      	movs	r2, #16
   2c8f6:	f10d 0101 	add.w	r1, sp, #1
   2c8fa:	f10d 0015 	add.w	r0, sp, #21
   2c8fe:	f7ff ff50 	bl	2c7a2 <memcmp>
}
   2c902:	b00a      	add	sp, #40	; 0x28
   2c904:	bd10      	pop	{r4, pc}

0002c906 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2c906:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2c908:	7803      	ldrb	r3, [r0, #0]
   2c90a:	780a      	ldrb	r2, [r1, #0]
   2c90c:	4293      	cmp	r3, r2
   2c90e:	d107      	bne.n	2c920 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   2c910:	2b01      	cmp	r3, #1
   2c912:	d00c      	beq.n	2c92e <bt_uuid_cmp+0x28>
   2c914:	2b02      	cmp	r3, #2
   2c916:	d00e      	beq.n	2c936 <bt_uuid_cmp+0x30>
   2c918:	b12b      	cbz	r3, 2c926 <bt_uuid_cmp+0x20>
   2c91a:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2c91e:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2c920:	f7ff ffde 	bl	2c8e0 <uuid128_cmp>
   2c924:	e7fb      	b.n	2c91e <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2c926:	8840      	ldrh	r0, [r0, #2]
   2c928:	884b      	ldrh	r3, [r1, #2]
   2c92a:	1ac0      	subs	r0, r0, r3
   2c92c:	e7f7      	b.n	2c91e <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2c92e:	6840      	ldr	r0, [r0, #4]
   2c930:	684b      	ldr	r3, [r1, #4]
   2c932:	1ac0      	subs	r0, r0, r3
   2c934:	e7f3      	b.n	2c91e <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2c936:	2210      	movs	r2, #16
   2c938:	3101      	adds	r1, #1
   2c93a:	3001      	adds	r0, #1
   2c93c:	f7ff ff31 	bl	2c7a2 <memcmp>
   2c940:	e7ed      	b.n	2c91e <bt_uuid_cmp+0x18>

0002c942 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2c942:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2c944:	2a04      	cmp	r2, #4
   2c946:	d00e      	beq.n	2c966 <bt_uuid_create+0x24>
   2c948:	2a10      	cmp	r2, #16
   2c94a:	d01d      	beq.n	2c988 <bt_uuid_create+0x46>
   2c94c:	2a02      	cmp	r2, #2
   2c94e:	d001      	beq.n	2c954 <bt_uuid_create+0x12>
   2c950:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2c952:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   2c954:	2300      	movs	r3, #0
   2c956:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2c958:	784a      	ldrb	r2, [r1, #1]
   2c95a:	780b      	ldrb	r3, [r1, #0]
   2c95c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2c960:	8043      	strh	r3, [r0, #2]
	return true;
   2c962:	2001      	movs	r0, #1
		break;
   2c964:	e7f5      	b.n	2c952 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   2c966:	2301      	movs	r3, #1
   2c968:	7003      	strb	r3, [r0, #0]
   2c96a:	78ca      	ldrb	r2, [r1, #3]
   2c96c:	f891 c002 	ldrb.w	ip, [r1, #2]
   2c970:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2c974:	f891 e001 	ldrb.w	lr, [r1, #1]
   2c978:	780a      	ldrb	r2, [r1, #0]
   2c97a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2c97e:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2c982:	6042      	str	r2, [r0, #4]
	return true;
   2c984:	4618      	mov	r0, r3
		break;
   2c986:	e7e4      	b.n	2c952 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   2c988:	2302      	movs	r3, #2
   2c98a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2c98e:	2210      	movs	r2, #16
   2c990:	f7ff ff2c 	bl	2c7ec <memcpy>
	return true;
   2c994:	2001      	movs	r0, #1
		break;
   2c996:	e7dc      	b.n	2c952 <bt_uuid_create+0x10>

0002c998 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2c998:	b510      	push	{r4, lr}
   2c99a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2c99c:	2301      	movs	r3, #1
   2c99e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2c9a2:	2106      	movs	r1, #6
   2c9a4:	f7f7 f934 	bl	23c10 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2c9a8:	b918      	cbnz	r0, 2c9b2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2c9aa:	79a3      	ldrb	r3, [r4, #6]
   2c9ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2c9b0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2c9b2:	bd10      	pop	{r4, pc}

0002c9b4 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   2c9b4:	b510      	push	{r4, lr}
   2c9b6:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2c9b8:	2207      	movs	r2, #7
   2c9ba:	f7ff ff17 	bl	2c7ec <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   2c9be:	7823      	ldrb	r3, [r4, #0]
   2c9c0:	f023 0302 	bic.w	r3, r3, #2
   2c9c4:	7023      	strb	r3, [r4, #0]
}
   2c9c6:	bd10      	pop	{r4, pc}

0002c9c8 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   2c9c8:	7800      	ldrb	r0, [r0, #0]
}
   2c9ca:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2c9ce:	4770      	bx	lr

0002c9d0 <sys_put_le64>:
	dst[0] = val;
   2c9d0:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2c9d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2c9d6:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   2c9d8:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   2c9da:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   2c9dc:	0e00      	lsrs	r0, r0, #24
   2c9de:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2c9e0:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   2c9e2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2c9e6:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   2c9e8:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   2c9ea:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2c9ec:	0e09      	lsrs	r1, r1, #24
   2c9ee:	71d1      	strb	r1, [r2, #7]
}
   2c9f0:	4770      	bx	lr

0002c9f2 <sys_get_le64>:
{
   2c9f2:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2c9f4:	79c3      	ldrb	r3, [r0, #7]
   2c9f6:	7981      	ldrb	r1, [r0, #6]
   2c9f8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2c9fc:	7942      	ldrb	r2, [r0, #5]
   2c9fe:	7903      	ldrb	r3, [r0, #4]
   2ca00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ca04:	78c2      	ldrb	r2, [r0, #3]
   2ca06:	f890 c002 	ldrb.w	ip, [r0, #2]
   2ca0a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2ca0e:	f890 e001 	ldrb.w	lr, [r0, #1]
   2ca12:	7802      	ldrb	r2, [r0, #0]
   2ca14:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   2ca18:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   2ca1c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   2ca20:	f85d fb04 	ldr.w	pc, [sp], #4

0002ca24 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2ca24:	3805      	subs	r0, #5
   2ca26:	2815      	cmp	r0, #21
   2ca28:	d80e      	bhi.n	2ca48 <bt_hci_evt_get_flags+0x24>
   2ca2a:	e8df f000 	tbb	[pc, r0]
   2ca2e:	0d0b      	.short	0x0d0b
   2ca30:	0d0d0d0d 	.word	0x0d0d0d0d
   2ca34:	0f0d0d0d 	.word	0x0f0d0d0d
   2ca38:	0d0d0d0f 	.word	0x0d0d0d0f
   2ca3c:	0d0d0d0f 	.word	0x0d0d0d0f
   2ca40:	0f0d0d0d 	.word	0x0f0d0d0d
   2ca44:	2003      	movs	r0, #3
   2ca46:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2ca48:	2002      	movs	r0, #2
   2ca4a:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   2ca4c:	2001      	movs	r0, #1
	}
}
   2ca4e:	4770      	bx	lr

0002ca50 <skip_auto_phy_update_on_conn_establishment>:
}
   2ca50:	2000      	movs	r0, #0
   2ca52:	4770      	bx	lr

0002ca54 <hci_vendor_event>:
}
   2ca54:	4770      	bx	lr

0002ca56 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ca56:	094b      	lsrs	r3, r1, #5
   2ca58:	f3bf 8f5b 	dmb	ish
   2ca5c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2ca60:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ca64:	f001 011f 	and.w	r1, r1, #31
   2ca68:	4108      	asrs	r0, r1
}
   2ca6a:	f000 0001 	and.w	r0, r0, #1
   2ca6e:	4770      	bx	lr

0002ca70 <update_conn>:
{
   2ca70:	b538      	push	{r3, r4, r5, lr}
   2ca72:	4604      	mov	r4, r0
   2ca74:	4615      	mov	r5, r2
	conn->handle = sys_le16_to_cpu(evt->handle);
   2ca76:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   2ca7a:	f820 3b88 	strh.w	r3, [r0], #136
   2ca7e:	2207      	movs	r2, #7
   2ca80:	f7ff feb4 	bl	2c7ec <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2ca84:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   2ca88:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2ca8c:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   2ca90:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2ca94:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   2ca98:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2ca9c:	78eb      	ldrb	r3, [r5, #3]
   2ca9e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2caa0:	2300      	movs	r3, #0
   2caa2:	7263      	strb	r3, [r4, #9]
}
   2caa4:	bd38      	pop	{r3, r4, r5, pc}

0002caa6 <translate_addrs>:
{
   2caa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2caaa:	4604      	mov	r4, r0
   2caac:	460e      	mov	r6, r1
   2caae:	4615      	mov	r5, r2
   2cab0:	4698      	mov	r8, r3
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   2cab2:	1d17      	adds	r7, r2, #4
   2cab4:	4638      	mov	r0, r7
   2cab6:	f7ff ff87 	bl	2c9c8 <bt_addr_le_is_resolved>
   2caba:	b168      	cbz	r0, 2cad8 <translate_addrs+0x32>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   2cabc:	4639      	mov	r1, r7
   2cabe:	4630      	mov	r0, r6
   2cac0:	f7ff ff78 	bl	2c9b4 <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   2cac4:	2206      	movs	r2, #6
   2cac6:	f105 0111 	add.w	r1, r5, #17
   2caca:	1c60      	adds	r0, r4, #1
   2cacc:	f7ff fe8e 	bl	2c7ec <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   2cad0:	2301      	movs	r3, #1
   2cad2:	7023      	strb	r3, [r4, #0]
}
   2cad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   2cad8:	4639      	mov	r1, r7
   2cada:	4640      	mov	r0, r8
   2cadc:	f000 f93e 	bl	2cd5c <bt_lookup_id_addr>
   2cae0:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   2cae2:	2207      	movs	r2, #7
   2cae4:	4630      	mov	r0, r6
   2cae6:	f7ff fe81 	bl	2c7ec <memcpy>
   2caea:	2207      	movs	r2, #7
   2caec:	4639      	mov	r1, r7
   2caee:	4620      	mov	r0, r4
   2caf0:	f7ff fe7c 	bl	2c7ec <memcpy>
}
   2caf4:	e7ee      	b.n	2cad4 <translate_addrs+0x2e>

0002caf6 <hci_disconn_complete_prio>:
{
   2caf6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2caf8:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2cafa:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2cafe:	781b      	ldrb	r3, [r3, #0]
   2cb00:	b103      	cbz	r3, 2cb04 <hci_disconn_complete_prio+0xe>
}
   2cb02:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   2cb04:	4620      	mov	r0, r4
   2cb06:	f7f0 fc03 	bl	1d310 <bt_conn_lookup_handle>
	if (!conn) {
   2cb0a:	4605      	mov	r5, r0
   2cb0c:	b130      	cbz	r0, 2cb1c <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2cb0e:	2101      	movs	r1, #1
   2cb10:	f7f0 fc08 	bl	1d324 <bt_conn_set_state>
	bt_conn_unref(conn);
   2cb14:	4628      	mov	r0, r5
   2cb16:	f000 fc88 	bl	2d42a <bt_conn_unref>
   2cb1a:	e7f2      	b.n	2cb02 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2cb1c:	4620      	mov	r0, r4
   2cb1e:	f7ec f9c9 	bl	18eb4 <conn_handle_disconnected>
		return;
   2cb22:	e7ee      	b.n	2cb02 <hci_disconn_complete_prio+0xc>

0002cb24 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cb24:	f001 0c1f 	and.w	ip, r1, #31
   2cb28:	2301      	movs	r3, #1
   2cb2a:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   2cb2e:	b172      	cbz	r2, 2cb4e <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2cb30:	0949      	lsrs	r1, r1, #5
   2cb32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cb36:	f3bf 8f5b 	dmb	ish
   2cb3a:	e850 2f00 	ldrex	r2, [r0]
   2cb3e:	431a      	orrs	r2, r3
   2cb40:	e840 2100 	strex	r1, r2, [r0]
   2cb44:	2900      	cmp	r1, #0
   2cb46:	d1f8      	bne.n	2cb3a <atomic_set_bit_to+0x16>
   2cb48:	f3bf 8f5b 	dmb	ish
   2cb4c:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cb4e:	0949      	lsrs	r1, r1, #5
   2cb50:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2cb54:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cb56:	f3bf 8f5b 	dmb	ish
   2cb5a:	e850 2f00 	ldrex	r2, [r0]
   2cb5e:	401a      	ands	r2, r3
   2cb60:	e840 2100 	strex	r1, r2, [r0]
   2cb64:	2900      	cmp	r1, #0
   2cb66:	d1f8      	bne.n	2cb5a <atomic_set_bit_to+0x36>
   2cb68:	f3bf 8f5b 	dmb	ish
	}
}
   2cb6c:	4770      	bx	lr

0002cb6e <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cb6e:	f001 021f 	and.w	r2, r1, #31
   2cb72:	2301      	movs	r3, #1
   2cb74:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2cb76:	0949      	lsrs	r1, r1, #5
   2cb78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cb7c:	f3bf 8f5b 	dmb	ish
   2cb80:	e850 2f00 	ldrex	r2, [r0]
   2cb84:	ea42 0103 	orr.w	r1, r2, r3
   2cb88:	e840 1c00 	strex	ip, r1, [r0]
   2cb8c:	f1bc 0f00 	cmp.w	ip, #0
   2cb90:	d1f6      	bne.n	2cb80 <atomic_test_and_set_bit+0x12>
   2cb92:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2cb96:	4213      	tst	r3, r2
}
   2cb98:	bf14      	ite	ne
   2cb9a:	2001      	movne	r0, #1
   2cb9c:	2000      	moveq	r0, #0
   2cb9e:	4770      	bx	lr

0002cba0 <hci_le_read_remote_features>:
{
   2cba0:	b538      	push	{r3, r4, r5, lr}
   2cba2:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2cba4:	2102      	movs	r1, #2
   2cba6:	f242 0016 	movw	r0, #8214	; 0x2016
   2cbaa:	f7ed fc7f 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2cbae:	b168      	cbz	r0, 2cbcc <hci_le_read_remote_features+0x2c>
   2cbb0:	4605      	mov	r5, r0
   2cbb2:	2102      	movs	r1, #2
   2cbb4:	300c      	adds	r0, #12
   2cbb6:	f002 f9ee 	bl	2ef96 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2cbba:	8823      	ldrh	r3, [r4, #0]
   2cbbc:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   2cbbe:	2200      	movs	r2, #0
   2cbc0:	4629      	mov	r1, r5
   2cbc2:	f242 0016 	movw	r0, #8214	; 0x2016
   2cbc6:	f7ed fcaf 	bl	1a528 <bt_hci_cmd_send_sync>
}
   2cbca:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2cbcc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cbd0:	e7fb      	b.n	2cbca <hci_le_read_remote_features+0x2a>

0002cbd2 <bt_hci_disconnect>:
{
   2cbd2:	b570      	push	{r4, r5, r6, lr}
   2cbd4:	4605      	mov	r5, r0
   2cbd6:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2cbd8:	2103      	movs	r1, #3
   2cbda:	f240 4006 	movw	r0, #1030	; 0x406
   2cbde:	f7ed fc65 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2cbe2:	b168      	cbz	r0, 2cc00 <bt_hci_disconnect+0x2e>
   2cbe4:	4606      	mov	r6, r0
   2cbe6:	2103      	movs	r1, #3
   2cbe8:	300c      	adds	r0, #12
   2cbea:	f002 f9d4 	bl	2ef96 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2cbee:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2cbf0:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2cbf2:	2200      	movs	r2, #0
   2cbf4:	4631      	mov	r1, r6
   2cbf6:	f240 4006 	movw	r0, #1030	; 0x406
   2cbfa:	f7ed fc95 	bl	1a528 <bt_hci_cmd_send_sync>
}
   2cbfe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2cc00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cc04:	e7fb      	b.n	2cbfe <bt_hci_disconnect+0x2c>

0002cc06 <bt_le_set_data_len>:
{
   2cc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cc08:	4606      	mov	r6, r0
   2cc0a:	460f      	mov	r7, r1
   2cc0c:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2cc0e:	2106      	movs	r1, #6
   2cc10:	f242 0022 	movw	r0, #8226	; 0x2022
   2cc14:	f7ed fc4a 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2cc18:	b178      	cbz	r0, 2cc3a <bt_le_set_data_len+0x34>
   2cc1a:	4605      	mov	r5, r0
   2cc1c:	2106      	movs	r1, #6
   2cc1e:	300c      	adds	r0, #12
   2cc20:	f002 f9b9 	bl	2ef96 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2cc24:	8833      	ldrh	r3, [r6, #0]
   2cc26:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2cc28:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2cc2a:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2cc2c:	2200      	movs	r2, #0
   2cc2e:	4629      	mov	r1, r5
   2cc30:	f242 0022 	movw	r0, #8226	; 0x2022
   2cc34:	f7ed fc78 	bl	1a528 <bt_hci_cmd_send_sync>
}
   2cc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2cc3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cc3e:	e7fb      	b.n	2cc38 <bt_le_set_data_len+0x32>

0002cc40 <bt_le_set_phy>:
{
   2cc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cc44:	4607      	mov	r7, r0
   2cc46:	460e      	mov	r6, r1
   2cc48:	4615      	mov	r5, r2
   2cc4a:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2cc4c:	2107      	movs	r1, #7
   2cc4e:	f242 0032 	movw	r0, #8242	; 0x2032
   2cc52:	f7ed fc2b 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2cc56:	b1a8      	cbz	r0, 2cc84 <bt_le_set_phy+0x44>
   2cc58:	4680      	mov	r8, r0
   2cc5a:	2107      	movs	r1, #7
   2cc5c:	300c      	adds	r0, #12
   2cc5e:	f002 f99a 	bl	2ef96 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2cc62:	883b      	ldrh	r3, [r7, #0]
   2cc64:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2cc66:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2cc68:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2cc6a:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2cc6c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2cc70:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2cc74:	2200      	movs	r2, #0
   2cc76:	4641      	mov	r1, r8
   2cc78:	f242 0032 	movw	r0, #8242	; 0x2032
   2cc7c:	f7ed fc54 	bl	1a528 <bt_hci_cmd_send_sync>
}
   2cc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2cc84:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cc88:	e7fa      	b.n	2cc80 <bt_le_set_phy+0x40>

0002cc8a <enh_conn_complete>:
{
   2cc8a:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   2cc8c:	f7ee fa2c 	bl	1b0e8 <bt_hci_le_enh_conn_complete>
}
   2cc90:	bd08      	pop	{r3, pc}

0002cc92 <le_enh_conn_complete>:
{
   2cc92:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2cc94:	68c0      	ldr	r0, [r0, #12]
   2cc96:	f7ff fff8 	bl	2cc8a <enh_conn_complete>
}
   2cc9a:	bd08      	pop	{r3, pc}

0002cc9c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2cc9c:	8802      	ldrh	r2, [r0, #0]
   2cc9e:	8843      	ldrh	r3, [r0, #2]
   2cca0:	429a      	cmp	r2, r3
   2cca2:	d817      	bhi.n	2ccd4 <bt_le_conn_params_valid+0x38>
   2cca4:	2a05      	cmp	r2, #5
   2cca6:	d917      	bls.n	2ccd8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2cca8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2ccac:	d816      	bhi.n	2ccdc <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   2ccae:	8881      	ldrh	r1, [r0, #4]
   2ccb0:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2ccb4:	d214      	bcs.n	2cce0 <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2ccb6:	88c0      	ldrh	r0, [r0, #6]
   2ccb8:	f1a0 020a 	sub.w	r2, r0, #10
   2ccbc:	b292      	uxth	r2, r2
   2ccbe:	f640 4c76 	movw	ip, #3190	; 0xc76
   2ccc2:	4562      	cmp	r2, ip
   2ccc4:	d80e      	bhi.n	2cce4 <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   2ccc6:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2ccca:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2ccce:	d20b      	bcs.n	2cce8 <bt_le_conn_params_valid+0x4c>
	return true;
   2ccd0:	2001      	movs	r0, #1
   2ccd2:	4770      	bx	lr
		return false;
   2ccd4:	2000      	movs	r0, #0
   2ccd6:	4770      	bx	lr
   2ccd8:	2000      	movs	r0, #0
   2ccda:	4770      	bx	lr
   2ccdc:	2000      	movs	r0, #0
   2ccde:	4770      	bx	lr
		return false;
   2cce0:	2000      	movs	r0, #0
   2cce2:	4770      	bx	lr
		return false;
   2cce4:	2000      	movs	r0, #0
   2cce6:	4770      	bx	lr
   2cce8:	2000      	movs	r0, #0
}
   2ccea:	4770      	bx	lr

0002ccec <le_conn_param_req_reply>:
{
   2ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ccee:	4606      	mov	r6, r0
   2ccf0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2ccf2:	210e      	movs	r1, #14
   2ccf4:	f242 0020 	movw	r0, #8224	; 0x2020
   2ccf8:	f7ed fbd8 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2ccfc:	b1c0      	cbz	r0, 2cd30 <le_conn_param_req_reply+0x44>
   2ccfe:	4607      	mov	r7, r0
   2cd00:	210e      	movs	r1, #14
   2cd02:	300c      	adds	r0, #12
   2cd04:	f002 f947 	bl	2ef96 <net_buf_simple_add>
   2cd08:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2cd0a:	220e      	movs	r2, #14
   2cd0c:	2100      	movs	r1, #0
   2cd0e:	f7ff fd9c 	bl	2c84a <memset>
	cp->handle = sys_cpu_to_le16(handle);
   2cd12:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2cd14:	882b      	ldrh	r3, [r5, #0]
   2cd16:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2cd18:	886b      	ldrh	r3, [r5, #2]
   2cd1a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2cd1c:	88ab      	ldrh	r3, [r5, #4]
   2cd1e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2cd20:	88eb      	ldrh	r3, [r5, #6]
   2cd22:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2cd24:	4639      	mov	r1, r7
   2cd26:	f242 0020 	movw	r0, #8224	; 0x2020
   2cd2a:	f7ee fb39 	bl	1b3a0 <bt_hci_cmd_send>
}
   2cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2cd30:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cd34:	e7fb      	b.n	2cd2e <le_conn_param_req_reply+0x42>

0002cd36 <bt_init>:
{
   2cd36:	b510      	push	{r4, lr}
	err = hci_init();
   2cd38:	f7ee f84a 	bl	1add0 <hci_init>
	if (err) {
   2cd3c:	4604      	mov	r4, r0
   2cd3e:	b108      	cbz	r0, 2cd44 <bt_init+0xe>
}
   2cd40:	4620      	mov	r0, r4
   2cd42:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   2cd44:	f7f0 ffae 	bl	1dca4 <bt_conn_init>
		if (err) {
   2cd48:	4604      	mov	r4, r0
   2cd4a:	2800      	cmp	r0, #0
   2cd4c:	d1f8      	bne.n	2cd40 <bt_init+0xa>
	bt_finalize_init();
   2cd4e:	f7ee fe67 	bl	1ba20 <bt_finalize_init>
	return 0;
   2cd52:	e7f5      	b.n	2cd40 <bt_init+0xa>

0002cd54 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2cd54:	2000      	movs	r0, #0
   2cd56:	4770      	bx	lr

0002cd58 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2cd58:	2000      	movs	r0, #0
   2cd5a:	4770      	bx	lr

0002cd5c <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2cd5c:	b910      	cbnz	r0, 2cd64 <bt_lookup_id_addr+0x8>
   2cd5e:	b119      	cbz	r1, 2cd68 <bt_lookup_id_addr+0xc>
	return addr;
   2cd60:	4608      	mov	r0, r1
   2cd62:	4770      	bx	lr
		return NULL;
   2cd64:	2000      	movs	r0, #0
   2cd66:	4770      	bx	lr
   2cd68:	2000      	movs	r0, #0
}
   2cd6a:	4770      	bx	lr

0002cd6c <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2cd6c:	b128      	cbz	r0, 2cd7a <bt_id_set_adv_random_addr+0xe>
   2cd6e:	b139      	cbz	r1, 2cd80 <bt_id_set_adv_random_addr+0x14>
{
   2cd70:	b508      	push	{r3, lr}
		return set_random_address(addr);
   2cd72:	4608      	mov	r0, r1
   2cd74:	f7ee ff90 	bl	1bc98 <set_random_address>
}
   2cd78:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2cd7a:	f06f 0015 	mvn.w	r0, #21
   2cd7e:	4770      	bx	lr
   2cd80:	f06f 0015 	mvn.w	r0, #21
}
   2cd84:	4770      	bx	lr

0002cd86 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   2cd86:	b1a0      	cbz	r0, 2cdb2 <bt_id_set_adv_private_addr+0x2c>
{
   2cd88:	b510      	push	{r4, lr}
   2cd8a:	b082      	sub	sp, #8
   2cd8c:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2cd8e:	2106      	movs	r1, #6
   2cd90:	4668      	mov	r0, sp
   2cd92:	f7f6 ff3d 	bl	23c10 <bt_rand>
	if (err) {
   2cd96:	b108      	cbz	r0, 2cd9c <bt_id_set_adv_private_addr+0x16>
}
   2cd98:	b002      	add	sp, #8
   2cd9a:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   2cd9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2cda0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2cda4:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2cda8:	4669      	mov	r1, sp
   2cdaa:	4620      	mov	r0, r4
   2cdac:	f7ff ffde 	bl	2cd6c <bt_id_set_adv_random_addr>
	if (err) {
   2cdb0:	e7f2      	b.n	2cd98 <bt_id_set_adv_private_addr+0x12>
		return -EINVAL;
   2cdb2:	f06f 0015 	mvn.w	r0, #21
}
   2cdb6:	4770      	bx	lr

0002cdb8 <bt_id_adv_random_addr_check>:
	CHECKIF(param == NULL) {
   2cdb8:	b100      	cbz	r0, 2cdbc <bt_id_adv_random_addr_check+0x4>
		return true;
   2cdba:	2001      	movs	r0, #1
}
   2cdbc:	4770      	bx	lr

0002cdbe <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   2cdbe:	2300      	movs	r3, #0
   2cdc0:	428b      	cmp	r3, r1
   2cdc2:	d219      	bcs.n	2cdf8 <ad_is_limited+0x3a>
{
   2cdc4:	b500      	push	{lr}
   2cdc6:	e002      	b.n	2cdce <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   2cdc8:	3301      	adds	r3, #1
   2cdca:	428b      	cmp	r3, r1
   2cdcc:	d211      	bcs.n	2cdf2 <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   2cdce:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   2cdd2:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   2cdd6:	f240 1201 	movw	r2, #257	; 0x101
   2cdda:	4594      	cmp	ip, r2
   2cddc:	d1f4      	bne.n	2cdc8 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   2cdde:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2cde2:	2a00      	cmp	r2, #0
   2cde4:	d0f0      	beq.n	2cdc8 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2cde6:	7812      	ldrb	r2, [r2, #0]
   2cde8:	f012 0f01 	tst.w	r2, #1
   2cdec:	d0ec      	beq.n	2cdc8 <ad_is_limited+0xa>
				return true;
   2cdee:	2001      	movs	r0, #1
   2cdf0:	e000      	b.n	2cdf4 <ad_is_limited+0x36>
	return false;
   2cdf2:	2000      	movs	r0, #0
}
   2cdf4:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   2cdf8:	2000      	movs	r0, #0
}
   2cdfa:	4770      	bx	lr

0002cdfc <get_filter_policy>:
}
   2cdfc:	2000      	movs	r0, #0
   2cdfe:	4770      	bx	lr

0002ce00 <get_adv_channel_map>:
{
   2ce00:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   2ce02:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2ce06:	d10b      	bne.n	2ce20 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   2ce08:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2ce0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2ce0e:	d001      	beq.n	2ce14 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   2ce10:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2ce14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2ce18:	d001      	beq.n	2ce1e <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   2ce1a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   2ce1e:	4770      	bx	lr
		channel_map &= ~0x01;
   2ce20:	2006      	movs	r0, #6
   2ce22:	e7f2      	b.n	2ce0a <get_adv_channel_map+0xa>

0002ce24 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ce24:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ce26:	f3bf 8f5b 	dmb	ish
   2ce2a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2ce2e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ce32:	f001 011f 	and.w	r1, r1, #31
   2ce36:	4108      	asrs	r0, r1
}
   2ce38:	f000 0001 	and.w	r0, r0, #1
   2ce3c:	4770      	bx	lr

0002ce3e <adv_get_options>:
{
   2ce3e:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   2ce40:	f100 0410 	add.w	r4, r0, #16
   2ce44:	210e      	movs	r1, #14
   2ce46:	4620      	mov	r0, r4
   2ce48:	f7ff ffec 	bl	2ce24 <atomic_test_bit>
   2ce4c:	b180      	cbz	r0, 2ce70 <adv_get_options+0x32>
	uint32_t options = 0;
   2ce4e:	2500      	movs	r5, #0
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2ce50:	210a      	movs	r1, #10
   2ce52:	4620      	mov	r0, r4
   2ce54:	f7ff ffe6 	bl	2ce24 <atomic_test_bit>
   2ce58:	b108      	cbz	r0, 2ce5e <adv_get_options+0x20>
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   2ce5a:	f045 0501 	orr.w	r5, r5, #1
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   2ce5e:	210d      	movs	r1, #13
   2ce60:	4620      	mov	r0, r4
   2ce62:	f7ff ffdf 	bl	2ce24 <atomic_test_bit>
   2ce66:	b108      	cbz	r0, 2ce6c <adv_get_options+0x2e>
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   2ce68:	f045 0504 	orr.w	r5, r5, #4
}
   2ce6c:	4628      	mov	r0, r5
   2ce6e:	bd38      	pop	{r3, r4, r5, pc}
		options |= BT_LE_ADV_OPT_ONE_TIME;
   2ce70:	2502      	movs	r5, #2
   2ce72:	e7ed      	b.n	2ce50 <adv_get_options+0x12>

0002ce74 <hci_set_ad>:
{
   2ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ce78:	b082      	sub	sp, #8
   2ce7a:	4607      	mov	r7, r0
   2ce7c:	460d      	mov	r5, r1
   2ce7e:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2ce80:	2120      	movs	r1, #32
   2ce82:	f7ed fb13 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2ce86:	b300      	cbz	r0, 2ceca <hci_set_ad+0x56>
   2ce88:	4680      	mov	r8, r0
   2ce8a:	2120      	movs	r1, #32
   2ce8c:	300c      	adds	r0, #12
   2ce8e:	f002 f882 	bl	2ef96 <net_buf_simple_add>
   2ce92:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   2ce94:	2220      	movs	r2, #32
   2ce96:	2100      	movs	r1, #0
   2ce98:	f7ff fcd7 	bl	2c84a <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2ce9c:	9400      	str	r4, [sp, #0]
   2ce9e:	4633      	mov	r3, r6
   2cea0:	462a      	mov	r2, r5
   2cea2:	211f      	movs	r1, #31
   2cea4:	1c60      	adds	r0, r4, #1
   2cea6:	f7ef fa3f 	bl	1c328 <set_data_add_complete>
	if (err) {
   2ceaa:	4604      	mov	r4, r0
   2ceac:	b948      	cbnz	r0, 2cec2 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2ceae:	2200      	movs	r2, #0
   2ceb0:	4641      	mov	r1, r8
   2ceb2:	4638      	mov	r0, r7
   2ceb4:	f7ed fb38 	bl	1a528 <bt_hci_cmd_send_sync>
   2ceb8:	4604      	mov	r4, r0
}
   2ceba:	4620      	mov	r0, r4
   2cebc:	b002      	add	sp, #8
   2cebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2cec2:	4640      	mov	r0, r8
   2cec4:	f002 f81c 	bl	2ef00 <net_buf_unref>
		return err;
   2cec8:	e7f7      	b.n	2ceba <hci_set_ad+0x46>
		return -ENOBUFS;
   2ceca:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2cece:	e7f4      	b.n	2ceba <hci_set_ad+0x46>

0002ced0 <set_ad>:
{
   2ced0:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2ced2:	f242 0008 	movw	r0, #8200	; 0x2008
   2ced6:	f7ff ffcd 	bl	2ce74 <hci_set_ad>
}
   2ceda:	bd08      	pop	{r3, pc}

0002cedc <set_sd>:
{
   2cedc:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2cede:	f242 0009 	movw	r0, #8201	; 0x2009
   2cee2:	f7ff ffc7 	bl	2ce74 <hci_set_ad>
}
   2cee6:	bd08      	pop	{r3, pc}

0002cee8 <le_adv_update>:
{
   2cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ceec:	b089      	sub	sp, #36	; 0x24
   2ceee:	4604      	mov	r4, r0
   2cef0:	460e      	mov	r6, r1
   2cef2:	4617      	mov	r7, r2
   2cef4:	461d      	mov	r5, r3
   2cef6:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   2cefa:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   2cefe:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   2cf02:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   2cf06:	2300      	movs	r3, #0
   2cf08:	9304      	str	r3, [sp, #16]
   2cf0a:	9305      	str	r3, [sp, #20]
   2cf0c:	9306      	str	r3, [sp, #24]
   2cf0e:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   2cf10:	f1b9 0f00 	cmp.w	r9, #0
   2cf14:	d133      	bne.n	2cf7e <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   2cf16:	f1ba 0f00 	cmp.w	sl, #0
   2cf1a:	d002      	beq.n	2cf22 <le_adv_update+0x3a>
   2cf1c:	f1bb 0f00 	cmp.w	fp, #0
   2cf20:	d10e      	bne.n	2cf40 <le_adv_update+0x58>
		d[0].data = ad;
   2cf22:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   2cf24:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   2cf26:	f1b9 0f01 	cmp.w	r9, #1
   2cf2a:	d056      	beq.n	2cfda <le_adv_update+0xf2>
		d_len = 1;
   2cf2c:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   2cf2e:	a904      	add	r1, sp, #16
   2cf30:	4620      	mov	r0, r4
   2cf32:	f7ff ffcd 	bl	2ced0 <set_ad>
		if (err) {
   2cf36:	4603      	mov	r3, r0
   2cf38:	b9e8      	cbnz	r0, 2cf76 <le_adv_update+0x8e>
	if (scannable) {
   2cf3a:	f1bb 0f00 	cmp.w	fp, #0
   2cf3e:	d00c      	beq.n	2cf5a <le_adv_update+0x72>
		d[0].data = sd;
   2cf40:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   2cf42:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   2cf46:	f1b9 0f02 	cmp.w	r9, #2
   2cf4a:	d04c      	beq.n	2cfe6 <le_adv_update+0xfe>
		d_len = 1;
   2cf4c:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   2cf4e:	a904      	add	r1, sp, #16
   2cf50:	4620      	mov	r0, r4
   2cf52:	f7ff ffc3 	bl	2cedc <set_sd>
		if (err) {
   2cf56:	4603      	mov	r3, r0
   2cf58:	b968      	cbnz	r0, 2cf76 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   2cf5a:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cf5c:	f3bf 8f5b 	dmb	ish
   2cf60:	e854 3f00 	ldrex	r3, [r4]
   2cf64:	f043 0304 	orr.w	r3, r3, #4
   2cf68:	e844 3200 	strex	r2, r3, [r4]
   2cf6c:	2a00      	cmp	r2, #0
   2cf6e:	d1f7      	bne.n	2cf60 <le_adv_update+0x78>
   2cf70:	f3bf 8f5b 	dmb	ish
	return 0;
   2cf74:	2300      	movs	r3, #0
}
   2cf76:	4618      	mov	r0, r3
   2cf78:	b009      	add	sp, #36	; 0x24
   2cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2cf7e:	f7ee fe6b 	bl	1bc58 <bt_get_name>
   2cf82:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2cf84:	b166      	cbz	r6, 2cfa0 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   2cf86:	2200      	movs	r2, #0
   2cf88:	4297      	cmp	r7, r2
   2cf8a:	d907      	bls.n	2cf9c <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2cf8c:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   2cf90:	3b08      	subs	r3, #8
   2cf92:	b2db      	uxtb	r3, r3
   2cf94:	2b01      	cmp	r3, #1
   2cf96:	d90f      	bls.n	2cfb8 <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   2cf98:	3201      	adds	r2, #1
   2cf9a:	e7f5      	b.n	2cf88 <le_adv_update+0xa0>
	return false;
   2cf9c:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2cf9e:	bb43      	cbnz	r3, 2cff2 <le_adv_update+0x10a>
   2cfa0:	b175      	cbz	r5, 2cfc0 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   2cfa2:	2200      	movs	r2, #0
   2cfa4:	4590      	cmp	r8, r2
   2cfa6:	d909      	bls.n	2cfbc <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2cfa8:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   2cfac:	3b08      	subs	r3, #8
   2cfae:	b2db      	uxtb	r3, r3
   2cfb0:	2b01      	cmp	r3, #1
   2cfb2:	d910      	bls.n	2cfd6 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   2cfb4:	3201      	adds	r2, #1
   2cfb6:	e7f5      	b.n	2cfa4 <le_adv_update+0xbc>
			return true;
   2cfb8:	2301      	movs	r3, #1
   2cfba:	e7f0      	b.n	2cf9e <le_adv_update+0xb6>
	return false;
   2cfbc:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   2cfbe:	b9db      	cbnz	r3, 2cff8 <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   2cfc0:	9801      	ldr	r0, [sp, #4]
   2cfc2:	f7ff fbdb 	bl	2c77c <strlen>
   2cfc6:	2309      	movs	r3, #9
   2cfc8:	f88d 3008 	strb.w	r3, [sp, #8]
   2cfcc:	f88d 0009 	strb.w	r0, [sp, #9]
   2cfd0:	9b01      	ldr	r3, [sp, #4]
   2cfd2:	9303      	str	r3, [sp, #12]
   2cfd4:	e79f      	b.n	2cf16 <le_adv_update+0x2e>
			return true;
   2cfd6:	2301      	movs	r3, #1
   2cfd8:	e7f1      	b.n	2cfbe <le_adv_update+0xd6>
			d[1].data = &data;
   2cfda:	ab02      	add	r3, sp, #8
   2cfdc:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2cfde:	2301      	movs	r3, #1
   2cfe0:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2cfe2:	2202      	movs	r2, #2
   2cfe4:	e7a3      	b.n	2cf2e <le_adv_update+0x46>
			d[1].data = &data;
   2cfe6:	ab02      	add	r3, sp, #8
   2cfe8:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2cfea:	2301      	movs	r3, #1
   2cfec:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2cfee:	2202      	movs	r2, #2
   2cff0:	e7ad      	b.n	2cf4e <le_adv_update+0x66>
			return -EINVAL;
   2cff2:	f06f 0315 	mvn.w	r3, #21
   2cff6:	e7be      	b.n	2cf76 <le_adv_update+0x8e>
   2cff8:	f06f 0315 	mvn.w	r3, #21
   2cffc:	e7bb      	b.n	2cf76 <le_adv_update+0x8e>

0002cffe <valid_adv_param>:
{
   2cffe:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2d000:	6843      	ldr	r3, [r0, #4]
   2d002:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2d006:	d107      	bne.n	2d018 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2d008:	6902      	ldr	r2, [r0, #16]
   2d00a:	b112      	cbz	r2, 2d012 <valid_adv_param+0x14>
   2d00c:	f013 0f01 	tst.w	r3, #1
   2d010:	d004      	beq.n	2d01c <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   2d012:	f7ef fa01 	bl	1c418 <valid_adv_ext_param>
}
   2d016:	bd08      	pop	{r3, pc}
		return false;
   2d018:	2000      	movs	r0, #0
   2d01a:	e7fc      	b.n	2d016 <valid_adv_param+0x18>
		return false;
   2d01c:	2000      	movs	r0, #0
   2d01e:	e7fa      	b.n	2d016 <valid_adv_param+0x18>

0002d020 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d020:	f001 0c1f 	and.w	ip, r1, #31
   2d024:	2301      	movs	r3, #1
   2d026:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   2d02a:	b172      	cbz	r2, 2d04a <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d02c:	0949      	lsrs	r1, r1, #5
   2d02e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2d032:	f3bf 8f5b 	dmb	ish
   2d036:	e850 2f00 	ldrex	r2, [r0]
   2d03a:	431a      	orrs	r2, r3
   2d03c:	e840 2100 	strex	r1, r2, [r0]
   2d040:	2900      	cmp	r1, #0
   2d042:	d1f8      	bne.n	2d036 <atomic_set_bit_to+0x16>
   2d044:	f3bf 8f5b 	dmb	ish
   2d048:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d04a:	0949      	lsrs	r1, r1, #5
   2d04c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2d050:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d052:	f3bf 8f5b 	dmb	ish
   2d056:	e850 2f00 	ldrex	r2, [r0]
   2d05a:	401a      	ands	r2, r3
   2d05c:	e840 2100 	strex	r1, r2, [r0]
   2d060:	2900      	cmp	r1, #0
   2d062:	d1f8      	bne.n	2d056 <atomic_set_bit_to+0x36>
   2d064:	f3bf 8f5b 	dmb	ish
}
   2d068:	4770      	bx	lr

0002d06a <atomic_test_and_clear_bit>:
{
   2d06a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d06c:	f001 021f 	and.w	r2, r1, #31
   2d070:	2301      	movs	r3, #1
   2d072:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d074:	0949      	lsrs	r1, r1, #5
   2d076:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2d07a:	43d9      	mvns	r1, r3
   2d07c:	f3bf 8f5b 	dmb	ish
   2d080:	e850 2f00 	ldrex	r2, [r0]
   2d084:	ea02 0c01 	and.w	ip, r2, r1
   2d088:	e840 ce00 	strex	lr, ip, [r0]
   2d08c:	f1be 0f00 	cmp.w	lr, #0
   2d090:	d1f6      	bne.n	2d080 <atomic_test_and_clear_bit+0x16>
   2d092:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2d096:	4213      	tst	r3, r2
}
   2d098:	bf14      	ite	ne
   2d09a:	2001      	movne	r0, #1
   2d09c:	2000      	moveq	r0, #0
   2d09e:	f85d fb04 	ldr.w	pc, [sp], #4

0002d0a2 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2d0a2:	6843      	ldr	r3, [r0, #4]
   2d0a4:	f013 0f08 	tst.w	r3, #8
   2d0a8:	d00b      	beq.n	2d0c2 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2d0aa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2d0ae:	d10a      	bne.n	2d0c6 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2d0b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2d0b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2d0b8:	d001      	beq.n	2d0be <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   2d0ba:	2002      	movs	r0, #2
}
   2d0bc:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2d0be:	2001      	movs	r0, #1
   2d0c0:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   2d0c2:	2000      	movs	r0, #0
   2d0c4:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2d0c6:	2001      	movs	r0, #1
   2d0c8:	4770      	bx	lr

0002d0ca <bt_le_adv_set_enable_legacy>:
{
   2d0ca:	b570      	push	{r4, r5, r6, lr}
   2d0cc:	b086      	sub	sp, #24
   2d0ce:	4605      	mov	r5, r0
   2d0d0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2d0d2:	2101      	movs	r1, #1
   2d0d4:	f242 000a 	movw	r0, #8202	; 0x200a
   2d0d8:	f7ed f9e8 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2d0dc:	b1d0      	cbz	r0, 2d114 <bt_le_adv_set_enable_legacy+0x4a>
   2d0de:	4606      	mov	r6, r0
	if (enable) {
   2d0e0:	b19c      	cbz	r4, 2d10a <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2d0e2:	2101      	movs	r1, #1
   2d0e4:	300c      	adds	r0, #12
   2d0e6:	f001 ff67 	bl	2efb8 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2d0ea:	9400      	str	r4, [sp, #0]
   2d0ec:	2307      	movs	r3, #7
   2d0ee:	f105 0210 	add.w	r2, r5, #16
   2d0f2:	a903      	add	r1, sp, #12
   2d0f4:	4630      	mov	r0, r6
   2d0f6:	f7ed f9c7 	bl	1a488 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2d0fa:	2200      	movs	r2, #0
   2d0fc:	4631      	mov	r1, r6
   2d0fe:	f242 000a 	movw	r0, #8202	; 0x200a
   2d102:	f7ed fa11 	bl	1a528 <bt_hci_cmd_send_sync>
}
   2d106:	b006      	add	sp, #24
   2d108:	bd70      	pop	{r4, r5, r6, pc}
   2d10a:	2100      	movs	r1, #0
   2d10c:	300c      	adds	r0, #12
   2d10e:	f001 ff53 	bl	2efb8 <net_buf_simple_add_u8>
   2d112:	e7ea      	b.n	2d0ea <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   2d114:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d118:	e7f5      	b.n	2d106 <bt_le_adv_set_enable_legacy+0x3c>

0002d11a <bt_le_adv_set_enable>:
{
   2d11a:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   2d11c:	f7ff ffd5 	bl	2d0ca <bt_le_adv_set_enable_legacy>
}
   2d120:	bd08      	pop	{r3, pc}

0002d122 <bt_le_lim_adv_cancel_timeout>:
{
   2d122:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2d124:	3018      	adds	r0, #24
   2d126:	f003 ffa5 	bl	31074 <k_work_cancel_delayable>
}
   2d12a:	bd08      	pop	{r3, pc}

0002d12c <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2d12c:	460b      	mov	r3, r1
   2d12e:	b139      	cbz	r1, 2d140 <sys_slist_remove+0x14>
	return node->next;
   2d130:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2d132:	6019      	str	r1, [r3, #0]
	return list->tail;
   2d134:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d136:	428a      	cmp	r2, r1
   2d138:	d009      	beq.n	2d14e <sys_slist_remove+0x22>
	parent->next = child;
   2d13a:	2300      	movs	r3, #0
   2d13c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d13e:	4770      	bx	lr
	return node->next;
   2d140:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2d142:	6003      	str	r3, [r0, #0]
	return list->tail;
   2d144:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d146:	428a      	cmp	r2, r1
   2d148:	d1f7      	bne.n	2d13a <sys_slist_remove+0xe>
	list->tail = node;
   2d14a:	6043      	str	r3, [r0, #4]
}
   2d14c:	e7f5      	b.n	2d13a <sys_slist_remove+0xe>
	list->tail = node;
   2d14e:	6043      	str	r3, [r0, #4]
}
   2d150:	e7f3      	b.n	2d13a <sys_slist_remove+0xe>

0002d152 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d152:	b508      	push	{r3, lr}
   2d154:	460a      	mov	r2, r1
	return list->head;
   2d156:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d158:	2100      	movs	r1, #0
   2d15a:	e001      	b.n	2d160 <sys_slist_find_and_remove+0xe>
   2d15c:	4619      	mov	r1, r3
   2d15e:	681b      	ldr	r3, [r3, #0]
   2d160:	b12b      	cbz	r3, 2d16e <sys_slist_find_and_remove+0x1c>
   2d162:	4293      	cmp	r3, r2
   2d164:	d1fa      	bne.n	2d15c <sys_slist_find_and_remove+0xa>
   2d166:	f7ff ffe1 	bl	2d12c <sys_slist_remove>
   2d16a:	2001      	movs	r0, #1
   2d16c:	e000      	b.n	2d170 <sys_slist_find_and_remove+0x1e>
   2d16e:	2000      	movs	r0, #0
   2d170:	bd08      	pop	{r3, pc}

0002d172 <tx_notify>:
{
   2d172:	b570      	push	{r4, r5, r6, lr}
   2d174:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
   2d176:	e00c      	b.n	2d192 <tx_notify+0x20>
   2d178:	f383 8811 	msr	BASEPRI, r3
   2d17c:	f3bf 8f6f 	isb	sy
		if (!tx) {
   2d180:	b1c8      	cbz	r0, 2d1b6 <tx_notify+0x44>
		cb = tx->cb;
   2d182:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2d184:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2d186:	f7ef fd51 	bl	1cc2c <tx_free>
		cb(conn, user_data, 0);
   2d18a:	2200      	movs	r2, #0
   2d18c:	4631      	mov	r1, r6
   2d18e:	4620      	mov	r0, r4
   2d190:	47a8      	blx	r5
	__asm__ volatile(
   2d192:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d196:	f3ef 8311 	mrs	r3, BASEPRI
   2d19a:	f382 8812 	msr	BASEPRI_MAX, r2
   2d19e:	f3bf 8f6f 	isb	sy
	return list->head;
   2d1a2:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   2d1a4:	2800      	cmp	r0, #0
   2d1a6:	d0e7      	beq.n	2d178 <tx_notify+0x6>
	return node->next;
   2d1a8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2d1aa:	6222      	str	r2, [r4, #32]
	return list->tail;
   2d1ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d1ae:	4281      	cmp	r1, r0
   2d1b0:	d1e2      	bne.n	2d178 <tx_notify+0x6>
	list->tail = node;
   2d1b2:	6262      	str	r2, [r4, #36]	; 0x24
}
   2d1b4:	e7e0      	b.n	2d178 <tx_notify+0x6>
}
   2d1b6:	bd70      	pop	{r4, r5, r6, pc}

0002d1b8 <tx_complete_work>:
{
   2d1b8:	b508      	push	{r3, lr}
	tx_notify(conn);
   2d1ba:	3828      	subs	r0, #40	; 0x28
   2d1bc:	f7ff ffd9 	bl	2d172 <tx_notify>
}
   2d1c0:	bd08      	pop	{r3, pc}

0002d1c2 <conn_tx_destroy>:
{
   2d1c2:	b570      	push	{r4, r5, r6, lr}
   2d1c4:	4604      	mov	r4, r0
   2d1c6:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   2d1c8:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   2d1ca:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   2d1cc:	f7ef fd2e 	bl	1cc2c <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   2d1d0:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   2d1d4:	4631      	mov	r1, r6
   2d1d6:	4620      	mov	r0, r4
   2d1d8:	47a8      	blx	r5
}
   2d1da:	bd70      	pop	{r4, r5, r6, pc}

0002d1dc <atomic_test_and_clear_bit>:
{
   2d1dc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d1de:	f001 021f 	and.w	r2, r1, #31
   2d1e2:	2301      	movs	r3, #1
   2d1e4:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d1e6:	0949      	lsrs	r1, r1, #5
   2d1e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2d1ec:	43d9      	mvns	r1, r3
   2d1ee:	f3bf 8f5b 	dmb	ish
   2d1f2:	e850 2f00 	ldrex	r2, [r0]
   2d1f6:	ea02 0c01 	and.w	ip, r2, r1
   2d1fa:	e840 ce00 	strex	lr, ip, [r0]
   2d1fe:	f1be 0f00 	cmp.w	lr, #0
   2d202:	d1f6      	bne.n	2d1f2 <atomic_test_and_clear_bit+0x16>
   2d204:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2d208:	4213      	tst	r3, r2
}
   2d20a:	bf14      	ite	ne
   2d20c:	2001      	movne	r0, #1
   2d20e:	2000      	moveq	r0, #0
   2d210:	f85d fb04 	ldr.w	pc, [sp], #4

0002d214 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d214:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d216:	f3bf 8f5b 	dmb	ish
   2d21a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2d21e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d222:	f001 011f 	and.w	r1, r1, #31
   2d226:	4108      	asrs	r0, r1
}
   2d228:	f000 0001 	and.w	r0, r0, #1
   2d22c:	4770      	bx	lr

0002d22e <send_acl>:
{
   2d22e:	b570      	push	{r4, r5, r6, lr}
   2d230:	4605      	mov	r5, r0
   2d232:	460c      	mov	r4, r1
	switch (flags) {
   2d234:	2a03      	cmp	r2, #3
   2d236:	d818      	bhi.n	2d26a <send_acl+0x3c>
   2d238:	e8df f002 	tbb	[pc, r2]
   2d23c:	15021502 	.word	0x15021502
   2d240:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2d242:	2104      	movs	r1, #4
   2d244:	f104 000c 	add.w	r0, r4, #12
   2d248:	f001 febd 	bl	2efc6 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2d24c:	882b      	ldrh	r3, [r5, #0]
   2d24e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2d252:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2d254:	8a23      	ldrh	r3, [r4, #16]
   2d256:	3b04      	subs	r3, #4
   2d258:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2d25a:	2302      	movs	r3, #2
   2d25c:	7623      	strb	r3, [r4, #24]
	return bt_send(buf);
   2d25e:	4620      	mov	r0, r4
   2d260:	f7ee f894 	bl	1b38c <bt_send>
}
   2d264:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2d266:	2601      	movs	r6, #1
   2d268:	e7eb      	b.n	2d242 <send_acl+0x14>
	switch (flags) {
   2d26a:	f06f 0015 	mvn.w	r0, #21
   2d26e:	e7f9      	b.n	2d264 <send_acl+0x36>

0002d270 <process_unack_tx>:
{
   2d270:	b510      	push	{r4, lr}
   2d272:	4604      	mov	r4, r0
   2d274:	e028      	b.n	2d2c8 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2d276:	3a01      	subs	r2, #1
   2d278:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2d27a:	f383 8811 	msr	BASEPRI, r3
   2d27e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2d282:	4620      	mov	r0, r4
   2d284:	f7ef fcf6 	bl	1cc74 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2d288:	f7f8 fff0 	bl	2626c <z_impl_k_sem_give>
			continue;
   2d28c:	e01c      	b.n	2d2c8 <process_unack_tx+0x58>
   2d28e:	f383 8811 	msr	BASEPRI, r3
   2d292:	f3bf 8f6f 	isb	sy
		if (!node) {
   2d296:	b361      	cbz	r1, 2d2f2 <process_unack_tx+0x82>
	__asm__ volatile(
   2d298:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d29c:	f3ef 8311 	mrs	r3, BASEPRI
   2d2a0:	f382 8812 	msr	BASEPRI_MAX, r2
   2d2a4:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2d2a8:	68ca      	ldr	r2, [r1, #12]
   2d2aa:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2d2ac:	2200      	movs	r2, #0
   2d2ae:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   2d2b0:	f383 8811 	msr	BASEPRI, r3
   2d2b4:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2d2b8:	4620      	mov	r0, r4
   2d2ba:	f7ff ff82 	bl	2d1c2 <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   2d2be:	4620      	mov	r0, r4
   2d2c0:	f7ef fcd8 	bl	1cc74 <bt_conn_get_pkts>
   2d2c4:	f7f8 ffd2 	bl	2626c <z_impl_k_sem_give>
	__asm__ volatile(
   2d2c8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d2cc:	f3ef 8311 	mrs	r3, BASEPRI
   2d2d0:	f382 8812 	msr	BASEPRI_MAX, r2
   2d2d4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2d2d8:	69e2      	ldr	r2, [r4, #28]
   2d2da:	2a00      	cmp	r2, #0
   2d2dc:	d1cb      	bne.n	2d276 <process_unack_tx+0x6>
	return list->head;
   2d2de:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2d2e0:	2900      	cmp	r1, #0
   2d2e2:	d0d4      	beq.n	2d28e <process_unack_tx+0x1e>
	return node->next;
   2d2e4:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2d2e6:	6162      	str	r2, [r4, #20]
	return list->tail;
   2d2e8:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d2ea:	4281      	cmp	r1, r0
   2d2ec:	d1cf      	bne.n	2d28e <process_unack_tx+0x1e>
	list->tail = node;
   2d2ee:	61a2      	str	r2, [r4, #24]
}
   2d2f0:	e7cd      	b.n	2d28e <process_unack_tx+0x1e>
}
   2d2f2:	bd10      	pop	{r4, pc}

0002d2f4 <bt_conn_reset_rx_state>:
{
   2d2f4:	b510      	push	{r4, lr}
   2d2f6:	4604      	mov	r4, r0
	if (!conn->rx) {
   2d2f8:	6900      	ldr	r0, [r0, #16]
   2d2fa:	b118      	cbz	r0, 2d304 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2d2fc:	f001 fe00 	bl	2ef00 <net_buf_unref>
	conn->rx = NULL;
   2d300:	2300      	movs	r3, #0
   2d302:	6123      	str	r3, [r4, #16]
}
   2d304:	bd10      	pop	{r4, pc}

0002d306 <conn_cleanup>:
{
   2d306:	b538      	push	{r3, r4, r5, lr}
   2d308:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2d30a:	2200      	movs	r2, #0
   2d30c:	2300      	movs	r3, #0
   2d30e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2d312:	f001 fdbf 	bl	2ee94 <net_buf_get>
   2d316:	4603      	mov	r3, r0
   2d318:	b160      	cbz	r0, 2d334 <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2d31a:	699c      	ldr	r4, [r3, #24]
		tx_data(buf)->tx = NULL;
   2d31c:	2200      	movs	r2, #0
   2d31e:	619a      	str	r2, [r3, #24]
		net_buf_unref(buf);
   2d320:	4618      	mov	r0, r3
   2d322:	f001 fded 	bl	2ef00 <net_buf_unref>
		if (tx) {
   2d326:	2c00      	cmp	r4, #0
   2d328:	d0ef      	beq.n	2d30a <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   2d32a:	4621      	mov	r1, r4
   2d32c:	4628      	mov	r0, r5
   2d32e:	f7ff ff48 	bl	2d1c2 <conn_tx_destroy>
   2d332:	e7ea      	b.n	2d30a <conn_cleanup+0x4>
	bt_conn_reset_rx_state(conn);
   2d334:	4628      	mov	r0, r5
   2d336:	f7ff ffdd 	bl	2d2f4 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2d33a:	2200      	movs	r2, #0
   2d33c:	2300      	movs	r3, #0
   2d33e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   2d342:	f7f9 f987 	bl	26654 <k_work_reschedule>
}
   2d346:	bd38      	pop	{r3, r4, r5, pc}

0002d348 <conn_prepare_events>:
{
   2d348:	b538      	push	{r3, r4, r5, lr}
   2d34a:	f3bf 8f5b 	dmb	ish
   2d34e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2d352:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   2d356:	b363      	cbz	r3, 2d3b2 <conn_prepare_events+0x6a>
   2d358:	4604      	mov	r4, r0
   2d35a:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2d35c:	7a83      	ldrb	r3, [r0, #10]
   2d35e:	b1b3      	cbz	r3, 2d38e <conn_prepare_events+0x46>
	if (conn->state != BT_CONN_CONNECTED) {
   2d360:	7aa3      	ldrb	r3, [r4, #10]
   2d362:	2b07      	cmp	r3, #7
   2d364:	d128      	bne.n	2d3b8 <conn_prepare_events+0x70>
	struct k_sem *conn_pkts = bt_conn_get_pkts(conn);
   2d366:	4620      	mov	r0, r4
   2d368:	f7ef fc84 	bl	1cc74 <bt_conn_get_pkts>
	if (!conn_pkts) {
   2d36c:	4603      	mov	r3, r0
   2d36e:	b330      	cbz	r0, 2d3be <conn_prepare_events+0x76>
	return sem->count;
   2d370:	6881      	ldr	r1, [r0, #8]
	return list->head;
   2d372:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	if (packets_waiting && !buffers_available) {
   2d374:	b102      	cbz	r2, 2d378 <conn_prepare_events+0x30>
   2d376:	b1b1      	cbz	r1, 2d3a6 <conn_prepare_events+0x5e>
		k_poll_event_init(&events[0],
   2d378:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2d37c:	2200      	movs	r2, #0
   2d37e:	2104      	movs	r1, #4
   2d380:	4628      	mov	r0, r5
   2d382:	f004 fa9c 	bl	318be <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2d386:	2301      	movs	r3, #1
   2d388:	732b      	strb	r3, [r5, #12]
	return 0;
   2d38a:	2000      	movs	r0, #0
}
   2d38c:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2d38e:	2106      	movs	r1, #6
   2d390:	3004      	adds	r0, #4
   2d392:	f7ff ff23 	bl	2d1dc <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2d396:	2800      	cmp	r0, #0
   2d398:	d0e2      	beq.n	2d360 <conn_prepare_events+0x18>
		conn_cleanup(conn);
   2d39a:	4620      	mov	r0, r4
   2d39c:	f7ff ffb3 	bl	2d306 <conn_cleanup>
		return -ENOTCONN;
   2d3a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d3a4:	e7f2      	b.n	2d38c <conn_prepare_events+0x44>
		k_poll_event_init(&events[0],
   2d3a6:	2200      	movs	r2, #0
   2d3a8:	2102      	movs	r1, #2
   2d3aa:	4628      	mov	r0, r5
   2d3ac:	f004 fa87 	bl	318be <k_poll_event_init>
   2d3b0:	e7e9      	b.n	2d386 <conn_prepare_events+0x3e>
		return -ENOTCONN;
   2d3b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d3b6:	e7e9      	b.n	2d38c <conn_prepare_events+0x44>
		return -ENOTCONN;
   2d3b8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d3bc:	e7e6      	b.n	2d38c <conn_prepare_events+0x44>
		return -ENOTCONN;
   2d3be:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d3c2:	e7e3      	b.n	2d38c <conn_prepare_events+0x44>

0002d3c4 <bt_conn_recv>:
{
   2d3c4:	b570      	push	{r4, r5, r6, lr}
   2d3c6:	4604      	mov	r4, r0
   2d3c8:	460d      	mov	r5, r1
   2d3ca:	4616      	mov	r6, r2
	tx_notify(conn);
   2d3cc:	f7ff fed1 	bl	2d172 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2d3d0:	4632      	mov	r2, r6
   2d3d2:	4629      	mov	r1, r5
   2d3d4:	4620      	mov	r0, r4
   2d3d6:	f7ef fd7b 	bl	1ced0 <bt_acl_recv>
}
   2d3da:	bd70      	pop	{r4, r5, r6, pc}

0002d3dc <bt_conn_ref>:
   2d3dc:	f3bf 8f5b 	dmb	ish
   2d3e0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2d3e4:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2d3e8:	b1eb      	cbz	r3, 2d426 <bt_conn_ref+0x4a>
{
   2d3ea:	b500      	push	{lr}
   2d3ec:	e006      	b.n	2d3fc <bt_conn_ref+0x20>
   2d3ee:	f3bf 8f5b 	dmb	ish
   2d3f2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2d3f6:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2d3fa:	b193      	cbz	r3, 2d422 <bt_conn_ref+0x46>
   2d3fc:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2d400:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2d402:	f3bf 8f5b 	dmb	ish
   2d406:	e852 cf00 	ldrex	ip, [r2]
   2d40a:	459c      	cmp	ip, r3
   2d40c:	d104      	bne.n	2d418 <bt_conn_ref+0x3c>
   2d40e:	e842 1e00 	strex	lr, r1, [r2]
   2d412:	f1be 0f00 	cmp.w	lr, #0
   2d416:	d1f6      	bne.n	2d406 <bt_conn_ref+0x2a>
   2d418:	f3bf 8f5b 	dmb	ish
   2d41c:	d1e7      	bne.n	2d3ee <bt_conn_ref+0x12>
}
   2d41e:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   2d422:	2000      	movs	r0, #0
   2d424:	e7fb      	b.n	2d41e <bt_conn_ref+0x42>
   2d426:	2000      	movs	r0, #0
}
   2d428:	4770      	bx	lr

0002d42a <bt_conn_unref>:
{
   2d42a:	b508      	push	{r3, lr}
	old = atomic_dec(&conn->ref);
   2d42c:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2d430:	f3bf 8f5b 	dmb	ish
   2d434:	e853 1f00 	ldrex	r1, [r3]
   2d438:	3901      	subs	r1, #1
   2d43a:	e843 1200 	strex	r2, r1, [r3]
   2d43e:	2a00      	cmp	r2, #0
   2d440:	d1f8      	bne.n	2d434 <bt_conn_unref+0xa>
   2d442:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2d446:	8842      	ldrh	r2, [r0, #2]
   2d448:	f240 1301 	movw	r3, #257	; 0x101
   2d44c:	429a      	cmp	r2, r3
   2d44e:	d000      	beq.n	2d452 <bt_conn_unref+0x28>
}
   2d450:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d452:	f3bf 8f5b 	dmb	ish
   2d456:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2d45a:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2d45e:	2b00      	cmp	r3, #0
   2d460:	d1f6      	bne.n	2d450 <bt_conn_unref+0x26>
		bt_le_adv_resume();
   2d462:	f7ef facd 	bl	1ca00 <bt_le_adv_resume>
}
   2d466:	e7f3      	b.n	2d450 <bt_conn_unref+0x26>

0002d468 <conn_lookup_handle>:
{
   2d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d46a:	4606      	mov	r6, r0
   2d46c:	460d      	mov	r5, r1
   2d46e:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2d470:	2400      	movs	r4, #0
   2d472:	e003      	b.n	2d47c <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2d474:	4660      	mov	r0, ip
   2d476:	f7ff ffd8 	bl	2d42a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2d47a:	3401      	adds	r4, #1
   2d47c:	42ac      	cmp	r4, r5
   2d47e:	d21c      	bcs.n	2d4ba <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2d480:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2d484:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2d488:	f7ff ffa8 	bl	2d3dc <bt_conn_ref>
		if (!conn) {
   2d48c:	4684      	mov	ip, r0
   2d48e:	2800      	cmp	r0, #0
   2d490:	d0f3      	beq.n	2d47a <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2d492:	7a83      	ldrb	r3, [r0, #10]
   2d494:	2b01      	cmp	r3, #1
   2d496:	d006      	beq.n	2d4a6 <conn_lookup_handle+0x3e>
   2d498:	b25a      	sxtb	r2, r3
   2d49a:	2a00      	cmp	r2, #0
   2d49c:	d0ea      	beq.n	2d474 <conn_lookup_handle+0xc>
   2d49e:	3b07      	subs	r3, #7
   2d4a0:	b2db      	uxtb	r3, r3
   2d4a2:	2b01      	cmp	r3, #1
   2d4a4:	d8e6      	bhi.n	2d474 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   2d4a6:	f8bc 3000 	ldrh.w	r3, [ip]
   2d4aa:	42bb      	cmp	r3, r7
   2d4ac:	d101      	bne.n	2d4b2 <conn_lookup_handle+0x4a>
}
   2d4ae:	4660      	mov	r0, ip
   2d4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   2d4b2:	4660      	mov	r0, ip
   2d4b4:	f7ff ffb9 	bl	2d42a <bt_conn_unref>
			continue;
   2d4b8:	e7df      	b.n	2d47a <conn_lookup_handle+0x12>
	return NULL;
   2d4ba:	f04f 0c00 	mov.w	ip, #0
   2d4be:	e7f6      	b.n	2d4ae <conn_lookup_handle+0x46>

0002d4c0 <bt_conn_connected>:
{
   2d4c0:	b510      	push	{r4, lr}
   2d4c2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2d4c4:	f7f0 fcea 	bl	1de9c <bt_l2cap_connected>
	notify_connected(conn);
   2d4c8:	4620      	mov	r0, r4
   2d4ca:	f7ef fb6b 	bl	1cba4 <notify_connected>
}
   2d4ce:	bd10      	pop	{r4, pc}

0002d4d0 <bt_conn_add_le>:
{
   2d4d0:	b570      	push	{r4, r5, r6, lr}
   2d4d2:	4606      	mov	r6, r0
   2d4d4:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2d4d6:	f7ef fcf3 	bl	1cec0 <acl_conn_new>
	if (!conn) {
   2d4da:	4604      	mov	r4, r0
   2d4dc:	b168      	cbz	r0, 2d4fa <bt_conn_add_le+0x2a>
	conn->id = id;
   2d4de:	7206      	strb	r6, [r0, #8]
   2d4e0:	2207      	movs	r2, #7
   2d4e2:	4629      	mov	r1, r5
   2d4e4:	3088      	adds	r0, #136	; 0x88
   2d4e6:	f7ff f981 	bl	2c7ec <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   2d4ea:	2301      	movs	r3, #1
   2d4ec:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2d4ee:	2318      	movs	r3, #24
   2d4f0:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2d4f4:	2328      	movs	r3, #40	; 0x28
   2d4f6:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   2d4fa:	4620      	mov	r0, r4
   2d4fc:	bd70      	pop	{r4, r5, r6, pc}

0002d4fe <bt_conn_is_peer_addr_le>:
{
   2d4fe:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2d500:	7a03      	ldrb	r3, [r0, #8]
   2d502:	428b      	cmp	r3, r1
   2d504:	d001      	beq.n	2d50a <bt_conn_is_peer_addr_le+0xc>
		return false;
   2d506:	2000      	movs	r0, #0
}
   2d508:	bd38      	pop	{r3, r4, r5, pc}
   2d50a:	4604      	mov	r4, r0
   2d50c:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2d50e:	2207      	movs	r2, #7
   2d510:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2d514:	4628      	mov	r0, r5
   2d516:	f7ff f944 	bl	2c7a2 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2d51a:	b1a8      	cbz	r0, 2d548 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2d51c:	78e3      	ldrb	r3, [r4, #3]
   2d51e:	b14b      	cbz	r3, 2d534 <bt_conn_is_peer_addr_le+0x36>
   2d520:	2207      	movs	r2, #7
   2d522:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2d526:	4628      	mov	r0, r5
   2d528:	f7ff f93b 	bl	2c7a2 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2d52c:	fab0 f080 	clz	r0, r0
   2d530:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   2d532:	e7e9      	b.n	2d508 <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   2d534:	2207      	movs	r2, #7
   2d536:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2d53a:	4628      	mov	r0, r5
   2d53c:	f7ff f931 	bl	2c7a2 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2d540:	fab0 f080 	clz	r0, r0
   2d544:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   2d546:	e7df      	b.n	2d508 <bt_conn_is_peer_addr_le+0xa>
		return true;
   2d548:	2001      	movs	r0, #1
   2d54a:	e7dd      	b.n	2d508 <bt_conn_is_peer_addr_le+0xa>

0002d54c <bt_conn_le_conn_update>:
{
   2d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d54e:	4606      	mov	r6, r0
   2d550:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2d552:	210e      	movs	r1, #14
   2d554:	f242 0013 	movw	r0, #8211	; 0x2013
   2d558:	f7ec ffa8 	bl	1a4ac <bt_hci_cmd_create>
	if (!buf) {
   2d55c:	b1d0      	cbz	r0, 2d594 <bt_conn_le_conn_update+0x48>
   2d55e:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   2d560:	210e      	movs	r1, #14
   2d562:	300c      	adds	r0, #12
   2d564:	f001 fd17 	bl	2ef96 <net_buf_simple_add>
   2d568:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2d56a:	220e      	movs	r2, #14
   2d56c:	2100      	movs	r1, #0
   2d56e:	f7ff f96c 	bl	2c84a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2d572:	8833      	ldrh	r3, [r6, #0]
   2d574:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2d576:	882b      	ldrh	r3, [r5, #0]
   2d578:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2d57a:	886b      	ldrh	r3, [r5, #2]
   2d57c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2d57e:	88ab      	ldrh	r3, [r5, #4]
   2d580:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2d582:	88eb      	ldrh	r3, [r5, #6]
   2d584:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2d586:	2200      	movs	r2, #0
   2d588:	4639      	mov	r1, r7
   2d58a:	f242 0013 	movw	r0, #8211	; 0x2013
   2d58e:	f7ec ffcb 	bl	1a528 <bt_hci_cmd_send_sync>
}
   2d592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2d594:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d598:	e7fb      	b.n	2d592 <bt_conn_le_conn_update+0x46>

0002d59a <create_frag>:
{
   2d59a:	b510      	push	{r4, lr}
   2d59c:	4604      	mov	r4, r0
		frag = bt_conn_create_frag(0);
   2d59e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d5a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d5a6:	2000      	movs	r0, #0
   2d5a8:	f7f0 faec 	bl	1db84 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   2d5ac:	7aa3      	ldrb	r3, [r4, #10]
   2d5ae:	2b07      	cmp	r3, #7
   2d5b0:	d103      	bne.n	2d5ba <create_frag+0x20>
	tx_data(frag)->tx = NULL;
   2d5b2:	2300      	movs	r3, #0
   2d5b4:	6183      	str	r3, [r0, #24]
	tx_data(frag)->is_cont = false;
   2d5b6:	7703      	strb	r3, [r0, #28]
}
   2d5b8:	bd10      	pop	{r4, pc}
		net_buf_unref(frag);
   2d5ba:	f001 fca1 	bl	2ef00 <net_buf_unref>
		return NULL;
   2d5be:	2000      	movs	r0, #0
   2d5c0:	e7fa      	b.n	2d5b8 <create_frag+0x1e>

0002d5c2 <l2cap_connected>:
}
   2d5c2:	4770      	bx	lr

0002d5c4 <l2cap_disconnected>:
}
   2d5c4:	4770      	bx	lr

0002d5c6 <l2cap_chan_recv>:
{
   2d5c6:	b510      	push	{r4, lr}
   2d5c8:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2d5ca:	6843      	ldr	r3, [r0, #4]
   2d5cc:	695b      	ldr	r3, [r3, #20]
   2d5ce:	4798      	blx	r3
	net_buf_unref(buf);
   2d5d0:	4620      	mov	r0, r4
   2d5d2:	f001 fc95 	bl	2ef00 <net_buf_unref>
}
   2d5d6:	bd10      	pop	{r4, pc}

0002d5d8 <bt_l2cap_chan_del>:
{
   2d5d8:	b538      	push	{r3, r4, r5, lr}
   2d5da:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2d5dc:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2d5de:	6803      	ldr	r3, [r0, #0]
   2d5e0:	b123      	cbz	r3, 2d5ec <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2d5e2:	686b      	ldr	r3, [r5, #4]
   2d5e4:	b103      	cbz	r3, 2d5e8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2d5e6:	4798      	blx	r3
	chan->conn = NULL;
   2d5e8:	2300      	movs	r3, #0
   2d5ea:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2d5ec:	68e3      	ldr	r3, [r4, #12]
   2d5ee:	b10b      	cbz	r3, 2d5f4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2d5f0:	4620      	mov	r0, r4
   2d5f2:	4798      	blx	r3
	if (ops->released) {
   2d5f4:	6a2b      	ldr	r3, [r5, #32]
   2d5f6:	b10b      	cbz	r3, 2d5fc <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2d5f8:	4620      	mov	r0, r4
   2d5fa:	4798      	blx	r3
}
   2d5fc:	bd38      	pop	{r3, r4, r5, pc}

0002d5fe <bt_l2cap_chan_add>:
{
   2d5fe:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2d600:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2d604:	2400      	movs	r4, #0
   2d606:	608c      	str	r4, [r1, #8]
	return list->tail;
   2d608:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   2d60a:	b12c      	cbz	r4, 2d618 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2d60c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2d60e:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   2d610:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2d612:	60ca      	str	r2, [r1, #12]
}
   2d614:	bc10      	pop	{r4}
   2d616:	4770      	bx	lr
   2d618:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   2d61a:	6503      	str	r3, [r0, #80]	; 0x50
}
   2d61c:	e7f8      	b.n	2d610 <bt_l2cap_chan_add+0x12>

0002d61e <bt_l2cap_disconnected>:
{
   2d61e:	b510      	push	{r4, lr}
	return list->head;
   2d620:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2d622:	b138      	cbz	r0, 2d634 <bt_l2cap_disconnected+0x16>
   2d624:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d626:	f110 0408 	adds.w	r4, r0, #8
   2d62a:	d008      	beq.n	2d63e <bt_l2cap_disconnected+0x20>
	return node->next;
   2d62c:	6884      	ldr	r4, [r0, #8]
   2d62e:	b134      	cbz	r4, 2d63e <bt_l2cap_disconnected+0x20>
   2d630:	3c08      	subs	r4, #8
   2d632:	e004      	b.n	2d63e <bt_l2cap_disconnected+0x20>
   2d634:	4604      	mov	r4, r0
   2d636:	e002      	b.n	2d63e <bt_l2cap_disconnected+0x20>
   2d638:	4623      	mov	r3, r4
   2d63a:	4620      	mov	r0, r4
   2d63c:	461c      	mov	r4, r3
   2d63e:	b140      	cbz	r0, 2d652 <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   2d640:	f7ff ffca 	bl	2d5d8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2d644:	2c00      	cmp	r4, #0
   2d646:	d0f7      	beq.n	2d638 <bt_l2cap_disconnected+0x1a>
   2d648:	68a3      	ldr	r3, [r4, #8]
   2d64a:	2b00      	cmp	r3, #0
   2d64c:	d0f5      	beq.n	2d63a <bt_l2cap_disconnected+0x1c>
   2d64e:	3b08      	subs	r3, #8
   2d650:	e7f3      	b.n	2d63a <bt_l2cap_disconnected+0x1c>
}
   2d652:	bd10      	pop	{r4, pc}

0002d654 <bt_l2cap_create_pdu_timeout>:
{
   2d654:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2d656:	3104      	adds	r1, #4
   2d658:	f7ef ffde 	bl	1d618 <bt_conn_create_pdu_timeout>
}
   2d65c:	bd08      	pop	{r3, pc}

0002d65e <bt_l2cap_send_cb>:
{
   2d65e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d660:	4605      	mov	r5, r0
   2d662:	460f      	mov	r7, r1
   2d664:	4614      	mov	r4, r2
   2d666:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2d668:	2104      	movs	r1, #4
   2d66a:	f102 000c 	add.w	r0, r2, #12
   2d66e:	f001 fcaa 	bl	2efc6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2d672:	8a23      	ldrh	r3, [r4, #16]
   2d674:	3b04      	subs	r3, #4
   2d676:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2d678:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2d67a:	9b06      	ldr	r3, [sp, #24]
   2d67c:	4632      	mov	r2, r6
   2d67e:	4621      	mov	r1, r4
   2d680:	4628      	mov	r0, r5
   2d682:	f7ef fd75 	bl	1d170 <bt_conn_send_cb>
}
   2d686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d688 <l2cap_send>:
{
   2d688:	b510      	push	{r4, lr}
   2d68a:	b082      	sub	sp, #8
   2d68c:	4614      	mov	r4, r2
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2d68e:	2300      	movs	r3, #0
   2d690:	9300      	str	r3, [sp, #0]
   2d692:	f7ff ffe4 	bl	2d65e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2d696:	b908      	cbnz	r0, 2d69c <l2cap_send+0x14>
}
   2d698:	b002      	add	sp, #8
   2d69a:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   2d69c:	4620      	mov	r0, r4
   2d69e:	f001 fc2f 	bl	2ef00 <net_buf_unref>
}
   2d6a2:	e7f9      	b.n	2d698 <l2cap_send+0x10>

0002d6a4 <l2cap_send_reject>:
{
   2d6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d6a8:	4606      	mov	r6, r0
   2d6aa:	4690      	mov	r8, r2
   2d6ac:	461c      	mov	r4, r3
   2d6ae:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2d6b2:	1cbb      	adds	r3, r7, #2
   2d6b4:	460a      	mov	r2, r1
   2d6b6:	2101      	movs	r1, #1
   2d6b8:	2000      	movs	r0, #0
   2d6ba:	f7f0 fc29 	bl	1df10 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2d6be:	b198      	cbz	r0, 2d6e8 <l2cap_send_reject+0x44>
   2d6c0:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2d6c2:	f100 090c 	add.w	r9, r0, #12
   2d6c6:	2102      	movs	r1, #2
   2d6c8:	4648      	mov	r0, r9
   2d6ca:	f001 fc64 	bl	2ef96 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2d6ce:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2d6d2:	b124      	cbz	r4, 2d6de <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2d6d4:	463a      	mov	r2, r7
   2d6d6:	4621      	mov	r1, r4
   2d6d8:	4648      	mov	r0, r9
   2d6da:	f001 fc62 	bl	2efa2 <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   2d6de:	462a      	mov	r2, r5
   2d6e0:	2105      	movs	r1, #5
   2d6e2:	4630      	mov	r0, r6
   2d6e4:	f7ff ffd0 	bl	2d688 <l2cap_send>
}
   2d6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002d6ec <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2d6ec:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2d6ee:	b110      	cbz	r0, 2d6f6 <bt_l2cap_le_lookup_rx_cid+0xa>
   2d6f0:	3808      	subs	r0, #8
   2d6f2:	e000      	b.n	2d6f6 <bt_l2cap_le_lookup_rx_cid+0xa>
   2d6f4:	4618      	mov	r0, r3
   2d6f6:	b150      	cbz	r0, 2d70e <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2d6f8:	8a83      	ldrh	r3, [r0, #20]
   2d6fa:	428b      	cmp	r3, r1
   2d6fc:	d007      	beq.n	2d70e <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d6fe:	f110 0308 	adds.w	r3, r0, #8
   2d702:	d0f7      	beq.n	2d6f4 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   2d704:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2d706:	2800      	cmp	r0, #0
   2d708:	d0f5      	beq.n	2d6f6 <bt_l2cap_le_lookup_rx_cid+0xa>
   2d70a:	3808      	subs	r0, #8
   2d70c:	e7f3      	b.n	2d6f6 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2d70e:	4770      	bx	lr

0002d710 <bt_l2cap_update_conn_param>:
{
   2d710:	b570      	push	{r4, r5, r6, lr}
   2d712:	b082      	sub	sp, #8
   2d714:	4605      	mov	r5, r0
   2d716:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2d718:	f7f0 fae2 	bl	1dce0 <get_ident>
   2d71c:	4602      	mov	r2, r0
   2d71e:	2308      	movs	r3, #8
   2d720:	2112      	movs	r1, #18
   2d722:	2000      	movs	r0, #0
   2d724:	f7f0 fbf4 	bl	1df10 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2d728:	b1e0      	cbz	r0, 2d764 <bt_l2cap_update_conn_param+0x54>
   2d72a:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2d72c:	2108      	movs	r1, #8
   2d72e:	300c      	adds	r0, #12
   2d730:	f001 fc31 	bl	2ef96 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2d734:	8823      	ldrh	r3, [r4, #0]
   2d736:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2d738:	8863      	ldrh	r3, [r4, #2]
   2d73a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2d73c:	88a3      	ldrh	r3, [r4, #4]
   2d73e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2d740:	88e3      	ldrh	r3, [r4, #6]
   2d742:	80c3      	strh	r3, [r0, #6]
   2d744:	2300      	movs	r3, #0
   2d746:	9300      	str	r3, [sp, #0]
   2d748:	4632      	mov	r2, r6
   2d74a:	2105      	movs	r1, #5
   2d74c:	4628      	mov	r0, r5
   2d74e:	f7ff ff86 	bl	2d65e <bt_l2cap_send_cb>
	if (err) {
   2d752:	4604      	mov	r4, r0
   2d754:	b910      	cbnz	r0, 2d75c <bt_l2cap_update_conn_param+0x4c>
}
   2d756:	4620      	mov	r0, r4
   2d758:	b002      	add	sp, #8
   2d75a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2d75c:	4630      	mov	r0, r6
   2d75e:	f001 fbcf 	bl	2ef00 <net_buf_unref>
		return err;
   2d762:	e7f8      	b.n	2d756 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2d764:	f06f 040b 	mvn.w	r4, #11
   2d768:	e7f5      	b.n	2d756 <bt_l2cap_update_conn_param+0x46>

0002d76a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2d76a:	4770      	bx	lr

0002d76c <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2d76c:	460b      	mov	r3, r1
   2d76e:	b139      	cbz	r1, 2d780 <sys_slist_remove+0x14>
	return node->next;
   2d770:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2d772:	6019      	str	r1, [r3, #0]
	return list->tail;
   2d774:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d776:	428a      	cmp	r2, r1
   2d778:	d009      	beq.n	2d78e <sys_slist_remove+0x22>
	parent->next = child;
   2d77a:	2300      	movs	r3, #0
   2d77c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d77e:	4770      	bx	lr
	return node->next;
   2d780:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2d782:	6003      	str	r3, [r0, #0]
	return list->tail;
   2d784:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d786:	428a      	cmp	r2, r1
   2d788:	d1f7      	bne.n	2d77a <sys_slist_remove+0xe>
	list->tail = node;
   2d78a:	6043      	str	r3, [r0, #4]
}
   2d78c:	e7f5      	b.n	2d77a <sys_slist_remove+0xe>
	list->tail = node;
   2d78e:	6043      	str	r3, [r0, #4]
}
   2d790:	e7f3      	b.n	2d77a <sys_slist_remove+0xe>

0002d792 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d792:	b508      	push	{r3, lr}
   2d794:	460a      	mov	r2, r1
	return list->head;
   2d796:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d798:	2100      	movs	r1, #0
   2d79a:	e001      	b.n	2d7a0 <sys_slist_find_and_remove+0xe>
   2d79c:	4619      	mov	r1, r3
   2d79e:	681b      	ldr	r3, [r3, #0]
   2d7a0:	b12b      	cbz	r3, 2d7ae <sys_slist_find_and_remove+0x1c>
   2d7a2:	4293      	cmp	r3, r2
   2d7a4:	d1fa      	bne.n	2d79c <sys_slist_find_and_remove+0xa>
   2d7a6:	f7ff ffe1 	bl	2d76c <sys_slist_remove>
   2d7aa:	2001      	movs	r0, #1
   2d7ac:	e000      	b.n	2d7b0 <sys_slist_find_and_remove+0x1e>
   2d7ae:	2000      	movs	r0, #0
   2d7b0:	bd08      	pop	{r3, pc}

0002d7b2 <get_first_req_matching_chan>:
{
   2d7b2:	4603      	mov	r3, r0
	return list->head;
   2d7b4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2d7b6:	b120      	cbz	r0, 2d7c2 <get_first_req_matching_chan+0x10>
	return node->next;
   2d7b8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2d7ba:	601a      	str	r2, [r3, #0]
	return list->tail;
   2d7bc:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d7be:	4288      	cmp	r0, r1
   2d7c0:	d000      	beq.n	2d7c4 <get_first_req_matching_chan+0x12>
}
   2d7c2:	4770      	bx	lr
	list->tail = node;
   2d7c4:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   2d7c6:	e7fc      	b.n	2d7c2 <get_first_req_matching_chan+0x10>

0002d7c8 <range_is_valid>:
	if (!start || !end) {
   2d7c8:	b120      	cbz	r0, 2d7d4 <range_is_valid+0xc>
   2d7ca:	b119      	cbz	r1, 2d7d4 <range_is_valid+0xc>
	if (start > end) {
   2d7cc:	4288      	cmp	r0, r1
   2d7ce:	d806      	bhi.n	2d7de <range_is_valid+0x16>
	return true;
   2d7d0:	2001      	movs	r0, #1
}
   2d7d2:	4770      	bx	lr
		if (err) {
   2d7d4:	b10a      	cbz	r2, 2d7da <range_is_valid+0x12>
			*err = 0U;
   2d7d6:	2300      	movs	r3, #0
   2d7d8:	8013      	strh	r3, [r2, #0]
		return false;
   2d7da:	2000      	movs	r0, #0
   2d7dc:	4770      	bx	lr
		if (err) {
   2d7de:	b102      	cbz	r2, 2d7e2 <range_is_valid+0x1a>
			*err = start;
   2d7e0:	8010      	strh	r0, [r2, #0]
		return false;
   2d7e2:	2000      	movs	r0, #0
   2d7e4:	4770      	bx	lr

0002d7e6 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2d7e6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2d7ea:	d201      	bcs.n	2d7f0 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2d7ec:	200e      	movs	r0, #14
}
   2d7ee:	4770      	bx	lr
		return -err;
   2d7f0:	4240      	negs	r0, r0
   2d7f2:	b2c0      	uxtb	r0, r0
   2d7f4:	4770      	bx	lr

0002d7f6 <attr_read_type_cb>:
{
   2d7f6:	b410      	push	{r4}
	if (!data->rsp->len) {
   2d7f8:	68d4      	ldr	r4, [r2, #12]
   2d7fa:	7823      	ldrb	r3, [r4, #0]
   2d7fc:	b923      	cbnz	r3, 2d808 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2d7fe:	3102      	adds	r1, #2
   2d800:	7021      	strb	r1, [r4, #0]
	return true;
   2d802:	2001      	movs	r0, #1
}
   2d804:	bc10      	pop	{r4}
   2d806:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2d808:	3102      	adds	r1, #2
   2d80a:	428b      	cmp	r3, r1
   2d80c:	d005      	beq.n	2d81a <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2d80e:	8a03      	ldrh	r3, [r0, #16]
   2d810:	3b02      	subs	r3, #2
   2d812:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2d814:	2000      	movs	r0, #0
   2d816:	6110      	str	r0, [r2, #16]
		return false;
   2d818:	e7f4      	b.n	2d804 <attr_read_type_cb+0xe>
	return true;
   2d81a:	2001      	movs	r0, #1
   2d81c:	e7f2      	b.n	2d804 <attr_read_type_cb+0xe>

0002d81e <attr_read_group_cb>:
	if (!data->rsp->len) {
   2d81e:	68d0      	ldr	r0, [r2, #12]
   2d820:	7803      	ldrb	r3, [r0, #0]
   2d822:	b91b      	cbnz	r3, 2d82c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2d824:	3104      	adds	r1, #4
   2d826:	7001      	strb	r1, [r0, #0]
	return true;
   2d828:	2001      	movs	r0, #1
   2d82a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2d82c:	3104      	adds	r1, #4
   2d82e:	428b      	cmp	r3, r1
   2d830:	d006      	beq.n	2d840 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2d832:	6891      	ldr	r1, [r2, #8]
   2d834:	8a0b      	ldrh	r3, [r1, #16]
   2d836:	3b04      	subs	r3, #4
   2d838:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2d83a:	2000      	movs	r0, #0
   2d83c:	6110      	str	r0, [r2, #16]
		return false;
   2d83e:	4770      	bx	lr
	return true;
   2d840:	2001      	movs	r0, #1
}
   2d842:	4770      	bx	lr

0002d844 <att_prepare_write_req>:
}
   2d844:	2006      	movs	r0, #6
   2d846:	4770      	bx	lr

0002d848 <att_exec_write_req>:
}
   2d848:	2006      	movs	r0, #6
   2d84a:	4770      	bx	lr

0002d84c <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d84c:	094b      	lsrs	r3, r1, #5
   2d84e:	f3bf 8f5b 	dmb	ish
   2d852:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2d856:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d85a:	f001 011f 	and.w	r1, r1, #31
   2d85e:	4108      	asrs	r0, r1
}
   2d860:	f000 0001 	and.w	r0, r0, #1
   2d864:	4770      	bx	lr

0002d866 <att_chan_attach>:
{
   2d866:	b538      	push	{r3, r4, r5, lr}
   2d868:	4604      	mov	r4, r0
   2d86a:	460d      	mov	r5, r1
	return list->head;
   2d86c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   2d86e:	b143      	cbz	r3, 2d882 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2d870:	f105 0388 	add.w	r3, r5, #136	; 0x88
   2d874:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   2d876:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
	list->head = node;
   2d87a:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   2d87c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   2d87e:	b122      	cbz	r2, 2d88a <att_chan_attach+0x24>
}
   2d880:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2d882:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2d884:	f003 fa65 	bl	30d52 <z_impl_k_queue_init>
}
   2d888:	e7f2      	b.n	2d870 <att_chan_attach+0xa>
	list->tail = node;
   2d88a:	62a3      	str	r3, [r4, #40]	; 0x28
}
   2d88c:	e7f8      	b.n	2d880 <att_chan_attach+0x1a>

0002d88e <chan_unknown>:
{
   2d88e:	b508      	push	{r3, lr}
	tx_meta_data_free(user_data);
   2d890:	4608      	mov	r0, r1
   2d892:	f7f0 ff37 	bl	1e704 <tx_meta_data_free>
}
   2d896:	bd08      	pop	{r3, pc}

0002d898 <chan_tx_complete>:
{
   2d898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d89c:	4605      	mov	r5, r0
   2d89e:	4608      	mov	r0, r1
   2d8a0:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   2d8a2:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   2d8a4:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   2d8a6:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   2d8aa:	f7f0 ff2b 	bl	1e704 <tx_meta_data_free>
	if (!err && func) {
   2d8ae:	b94c      	cbnz	r4, 2d8c4 <chan_tx_complete+0x2c>
   2d8b0:	b146      	cbz	r6, 2d8c4 <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   2d8b2:	2400      	movs	r4, #0
   2d8b4:	e004      	b.n	2d8c0 <chan_tx_complete+0x28>
			func(conn, ud);
   2d8b6:	4641      	mov	r1, r8
   2d8b8:	4628      	mov	r0, r5
   2d8ba:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   2d8bc:	3401      	adds	r4, #1
   2d8be:	b2a4      	uxth	r4, r4
   2d8c0:	42a7      	cmp	r7, r4
   2d8c2:	d8f8      	bhi.n	2d8b6 <chan_tx_complete+0x1e>
}
   2d8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d8c8 <bt_att_chan_send>:
{
   2d8c8:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   2d8ca:	f7f0 ff29 	bl	1e720 <chan_send>
}
   2d8ce:	bd08      	pop	{r3, pc}

0002d8d0 <chan_req_send>:
{
   2d8d0:	b570      	push	{r4, r5, r6, lr}
   2d8d2:	4605      	mov	r5, r0
   2d8d4:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2d8d6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2d8d8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2d8da:	2200      	movs	r2, #0
	while (buf) {
   2d8dc:	e003      	b.n	2d8e6 <chan_req_send+0x16>
		bytes += buf->len;
   2d8de:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   2d8e2:	4462      	add	r2, ip
		buf = buf->frags;
   2d8e4:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2d8e6:	2b00      	cmp	r3, #0
   2d8e8:	d1f9      	bne.n	2d8de <chan_req_send+0xe>
   2d8ea:	4291      	cmp	r1, r2
   2d8ec:	d30b      	bcc.n	2d906 <chan_req_send+0x36>
	chan->req = req;
   2d8ee:	63ac      	str	r4, [r5, #56]	; 0x38
	buf = req->buf;
   2d8f0:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   2d8f2:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   2d8f4:	4631      	mov	r1, r6
   2d8f6:	4628      	mov	r0, r5
   2d8f8:	f7ff ffe6 	bl	2d8c8 <bt_att_chan_send>
	if (err) {
   2d8fc:	b110      	cbz	r0, 2d904 <chan_req_send+0x34>
		req->buf = buf;
   2d8fe:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   2d900:	2300      	movs	r3, #0
   2d902:	63ab      	str	r3, [r5, #56]	; 0x38
}
   2d904:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2d906:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2d90a:	e7fb      	b.n	2d904 <chan_req_send+0x34>

0002d90c <bt_att_chan_req_send>:
{
   2d90c:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   2d90e:	f7ff ffdf 	bl	2d8d0 <chan_req_send>
}
   2d912:	bd08      	pop	{r3, pc}

0002d914 <bt_att_status>:
{
   2d914:	b570      	push	{r4, r5, r6, lr}
   2d916:	4604      	mov	r4, r0
   2d918:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2d91a:	2100      	movs	r1, #0
   2d91c:	f7ff ff96 	bl	2d84c <atomic_test_bit>
   2d920:	b128      	cbz	r0, 2d92e <bt_att_status+0x1a>
   2d922:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   2d924:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2d928:	b10b      	cbz	r3, 2d92e <bt_att_status+0x1a>
	if (chan->req) {
   2d92a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2d92c:	b102      	cbz	r2, 2d930 <bt_att_status+0x1c>
}
   2d92e:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   2d930:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2d932:	2d00      	cmp	r5, #0
   2d934:	d0fb      	beq.n	2d92e <bt_att_status+0x1a>
	return node->next;
   2d936:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2d938:	605a      	str	r2, [r3, #4]
	return list->tail;
   2d93a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d93c:	42a9      	cmp	r1, r5
   2d93e:	d00f      	beq.n	2d960 <bt_att_status+0x4c>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2d940:	4629      	mov	r1, r5
   2d942:	4630      	mov	r0, r6
   2d944:	f7ff ffe2 	bl	2d90c <bt_att_chan_req_send>
   2d948:	2800      	cmp	r0, #0
   2d94a:	daf0      	bge.n	2d92e <bt_att_status+0x1a>
	sys_slist_prepend(&chan->att->reqs, node);
   2d94c:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   2d950:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2d952:	602a      	str	r2, [r5, #0]
	list->head = node;
   2d954:	605d      	str	r5, [r3, #4]
	return list->tail;
   2d956:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2d958:	2a00      	cmp	r2, #0
   2d95a:	d1e8      	bne.n	2d92e <bt_att_status+0x1a>
	list->tail = node;
   2d95c:	609d      	str	r5, [r3, #8]
}
   2d95e:	e7e6      	b.n	2d92e <bt_att_status+0x1a>
	list->tail = node;
   2d960:	609a      	str	r2, [r3, #8]
	if (!node) {
   2d962:	e7ed      	b.n	2d940 <bt_att_status+0x2c>

0002d964 <att_req_send_process>:
{
   2d964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d968:	4607      	mov	r7, r0
	return list->head;
   2d96a:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d96c:	b3ac      	cbz	r4, 2d9da <att_req_send_process+0x76>
   2d96e:	3c88      	subs	r4, #136	; 0x88
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d970:	f114 0588 	adds.w	r5, r4, #136	; 0x88
   2d974:	d003      	beq.n	2d97e <att_req_send_process+0x1a>
	return node->next;
   2d976:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   2d97a:	b105      	cbz	r5, 2d97e <att_req_send_process+0x1a>
   2d97c:	3d88      	subs	r5, #136	; 0x88
   2d97e:	f04f 0800 	mov.w	r8, #0
   2d982:	4646      	mov	r6, r8
   2d984:	e02e      	b.n	2d9e4 <att_req_send_process+0x80>
		if (!req && prev &&
   2d986:	b196      	cbz	r6, 2d9ae <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   2d988:	4621      	mov	r1, r4
   2d98a:	1d38      	adds	r0, r7, #4
   2d98c:	f7ff ff11 	bl	2d7b2 <get_first_req_matching_chan>
		if (!req) {
   2d990:	4606      	mov	r6, r0
   2d992:	b300      	cbz	r0, 2d9d6 <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2d994:	4601      	mov	r1, r0
   2d996:	4620      	mov	r0, r4
   2d998:	f7ff ffb8 	bl	2d90c <bt_att_chan_req_send>
   2d99c:	2800      	cmp	r0, #0
   2d99e:	da2d      	bge.n	2d9fc <att_req_send_process+0x98>
	return list->head;
   2d9a0:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2d9a2:	6033      	str	r3, [r6, #0]
	list->head = node;
   2d9a4:	607e      	str	r6, [r7, #4]
	return list->tail;
   2d9a6:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   2d9a8:	b193      	cbz	r3, 2d9d0 <att_req_send_process+0x6c>
		prev = chan;
   2d9aa:	46a0      	mov	r8, r4
   2d9ac:	e01e      	b.n	2d9ec <att_req_send_process+0x88>
		if (!req && prev &&
   2d9ae:	f1b8 0f00 	cmp.w	r8, #0
   2d9b2:	d0e9      	beq.n	2d988 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2d9b4:	2103      	movs	r1, #3
   2d9b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2d9ba:	f7ff ff47 	bl	2d84c <atomic_test_bit>
   2d9be:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2d9c0:	2103      	movs	r1, #3
   2d9c2:	f108 0034 	add.w	r0, r8, #52	; 0x34
   2d9c6:	f7ff ff41 	bl	2d84c <atomic_test_bit>
		if (!req && prev &&
   2d9ca:	4581      	cmp	r9, r0
   2d9cc:	d1dc      	bne.n	2d988 <att_req_send_process+0x24>
   2d9ce:	e00d      	b.n	2d9ec <att_req_send_process+0x88>
	list->tail = node;
   2d9d0:	60be      	str	r6, [r7, #8]
		prev = chan;
   2d9d2:	46a0      	mov	r8, r4
}
   2d9d4:	e00a      	b.n	2d9ec <att_req_send_process+0x88>
   2d9d6:	46a0      	mov	r8, r4
   2d9d8:	e008      	b.n	2d9ec <att_req_send_process+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d9da:	4625      	mov	r5, r4
   2d9dc:	e7cf      	b.n	2d97e <att_req_send_process+0x1a>
   2d9de:	462b      	mov	r3, r5
   2d9e0:	462c      	mov	r4, r5
   2d9e2:	461d      	mov	r5, r3
   2d9e4:	b154      	cbz	r4, 2d9fc <att_req_send_process+0x98>
		if (chan->req) {
   2d9e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2d9e8:	2b00      	cmp	r3, #0
   2d9ea:	d0cc      	beq.n	2d986 <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d9ec:	2d00      	cmp	r5, #0
   2d9ee:	d0f6      	beq.n	2d9de <att_req_send_process+0x7a>
	return node->next;
   2d9f0:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
   2d9f4:	2b00      	cmp	r3, #0
   2d9f6:	d0f3      	beq.n	2d9e0 <att_req_send_process+0x7c>
   2d9f8:	3b88      	subs	r3, #136	; 0x88
   2d9fa:	e7f1      	b.n	2d9e0 <att_req_send_process+0x7c>
}
   2d9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002da00 <chan_req_sent>:
{
   2da00:	b510      	push	{r4, lr}
   2da02:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   2da04:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   2da06:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2da08:	b12b      	cbz	r3, 2da16 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2da0a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2da0e:	2300      	movs	r3, #0
   2da10:	3058      	adds	r0, #88	; 0x58
   2da12:	f7f8 fe1f 	bl	26654 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2da16:	4620      	mov	r0, r4
   2da18:	f7f0 fe74 	bl	1e704 <tx_meta_data_free>
}
   2da1c:	bd10      	pop	{r4, pc}

0002da1e <chan_cfm_sent>:
{
   2da1e:	b508      	push	{r3, lr}
   2da20:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2da22:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2da24:	3334      	adds	r3, #52	; 0x34
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2da26:	f3bf 8f5b 	dmb	ish
   2da2a:	e853 1f00 	ldrex	r1, [r3]
   2da2e:	f021 0102 	bic.w	r1, r1, #2
   2da32:	e843 1200 	strex	r2, r1, [r3]
   2da36:	2a00      	cmp	r2, #0
   2da38:	d1f7      	bne.n	2da2a <chan_cfm_sent+0xc>
   2da3a:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2da3e:	f7f0 fe61 	bl	1e704 <tx_meta_data_free>
}
   2da42:	bd08      	pop	{r3, pc}

0002da44 <chan_rsp_sent>:
{
   2da44:	b508      	push	{r3, lr}
   2da46:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2da48:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2da4a:	3334      	adds	r3, #52	; 0x34
   2da4c:	f3bf 8f5b 	dmb	ish
   2da50:	e853 1f00 	ldrex	r1, [r3]
   2da54:	f021 0101 	bic.w	r1, r1, #1
   2da58:	e843 1200 	strex	r2, r1, [r3]
   2da5c:	2a00      	cmp	r2, #0
   2da5e:	d1f7      	bne.n	2da50 <chan_rsp_sent+0xc>
   2da60:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2da64:	f7f0 fe4e 	bl	1e704 <tx_meta_data_free>
}
   2da68:	bd08      	pop	{r3, pc}

0002da6a <get_first_buf_matching_chan>:
{
   2da6a:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2da6c:	2200      	movs	r2, #0
   2da6e:	2300      	movs	r3, #0
   2da70:	f001 fa10 	bl	2ee94 <net_buf_get>
}
   2da74:	bd08      	pop	{r3, pc}

0002da76 <process_queue>:
{
   2da76:	b570      	push	{r4, r5, r6, lr}
   2da78:	4604      	mov	r4, r0
   2da7a:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   2da7c:	4601      	mov	r1, r0
   2da7e:	4628      	mov	r0, r5
   2da80:	f7ff fff3 	bl	2da6a <get_first_buf_matching_chan>
	if (buf) {
   2da84:	b168      	cbz	r0, 2daa2 <process_queue+0x2c>
   2da86:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   2da88:	4601      	mov	r1, r0
   2da8a:	4620      	mov	r0, r4
   2da8c:	f7ff ff1c 	bl	2d8c8 <bt_att_chan_send>
		if (err) {
   2da90:	4604      	mov	r4, r0
   2da92:	b908      	cbnz	r0, 2da98 <process_queue+0x22>
}
   2da94:	4620      	mov	r0, r4
   2da96:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2da98:	4631      	mov	r1, r6
   2da9a:	4628      	mov	r0, r5
   2da9c:	f003 f971 	bl	30d82 <k_queue_prepend>
			return err;
   2daa0:	e7f8      	b.n	2da94 <process_queue+0x1e>
	return -ENOENT;
   2daa2:	f06f 0401 	mvn.w	r4, #1
   2daa6:	e7f5      	b.n	2da94 <process_queue+0x1e>

0002daa8 <bt_att_sent>:
{
   2daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2daaa:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2daac:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   2daae:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2dab2:	f100 0330 	add.w	r3, r0, #48	; 0x30
   2dab6:	f3bf 8f5b 	dmb	ish
   2daba:	e853 1f00 	ldrex	r1, [r3]
   2dabe:	f021 0110 	bic.w	r1, r1, #16
   2dac2:	e843 1200 	strex	r2, r1, [r3]
   2dac6:	2a00      	cmp	r2, #0
   2dac8:	d1f7      	bne.n	2daba <bt_att_sent+0x12>
   2daca:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2dace:	b13d      	cbz	r5, 2dae0 <bt_att_sent+0x38>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2dad0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2dad2:	b133      	cbz	r3, 2dae2 <bt_att_sent+0x3a>
	err = process_queue(chan, &chan->tx_queue);
   2dad4:	f104 0138 	add.w	r1, r4, #56	; 0x38
   2dad8:	4630      	mov	r0, r6
   2dada:	f7ff ffcc 	bl	2da76 <process_queue>
	if (!err) {
   2dade:	b9c0      	cbnz	r0, 2db12 <bt_att_sent+0x6a>
}
   2dae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2dae2:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2dae4:	2f00      	cmp	r7, #0
   2dae6:	d0f5      	beq.n	2dad4 <bt_att_sent+0x2c>
	return node->next;
   2dae8:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2daea:	606b      	str	r3, [r5, #4]
	return list->tail;
   2daec:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2daee:	42ba      	cmp	r2, r7
   2daf0:	d00d      	beq.n	2db0e <bt_att_sent+0x66>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2daf2:	4639      	mov	r1, r7
   2daf4:	4630      	mov	r0, r6
   2daf6:	f7ff feeb 	bl	2d8d0 <chan_req_send>
   2dafa:	2800      	cmp	r0, #0
   2dafc:	daf0      	bge.n	2dae0 <bt_att_sent+0x38>
	return list->head;
   2dafe:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2db00:	603b      	str	r3, [r7, #0]
	list->head = node;
   2db02:	606f      	str	r7, [r5, #4]
	return list->tail;
   2db04:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2db06:	2b00      	cmp	r3, #0
   2db08:	d1e4      	bne.n	2dad4 <bt_att_sent+0x2c>
	list->tail = node;
   2db0a:	60af      	str	r7, [r5, #8]
}
   2db0c:	e7e2      	b.n	2dad4 <bt_att_sent+0x2c>
	list->tail = node;
   2db0e:	60ab      	str	r3, [r5, #8]
}
   2db10:	e7ef      	b.n	2daf2 <bt_att_sent+0x4a>
	(void)process_queue(chan, &att->tx_queue);
   2db12:	f105 010c 	add.w	r1, r5, #12
   2db16:	4630      	mov	r0, r6
   2db18:	f7ff ffad 	bl	2da76 <process_queue>
   2db1c:	e7e0      	b.n	2dae0 <bt_att_sent+0x38>

0002db1e <att_send_process>:
{
   2db1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2db22:	4680      	mov	r8, r0
	return list->head;
   2db24:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2db26:	b374      	cbz	r4, 2db86 <att_send_process+0x68>
   2db28:	3c88      	subs	r4, #136	; 0x88
Z_GENLIST_PEEK_NEXT(slist, snode)
   2db2a:	f114 0588 	adds.w	r5, r4, #136	; 0x88
   2db2e:	d003      	beq.n	2db38 <att_send_process+0x1a>
	return node->next;
   2db30:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   2db34:	b105      	cbz	r5, 2db38 <att_send_process+0x1a>
   2db36:	3d88      	subs	r5, #136	; 0x88
   2db38:	2600      	movs	r6, #0
   2db3a:	4637      	mov	r7, r6
   2db3c:	e00e      	b.n	2db5c <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   2db3e:	f108 010c 	add.w	r1, r8, #12
   2db42:	4620      	mov	r0, r4
   2db44:	f7ff ff97 	bl	2da76 <process_queue>
		if (!err) {
   2db48:	4606      	mov	r6, r0
   2db4a:	b300      	cbz	r0, 2db8e <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2db4c:	b1ed      	cbz	r5, 2db8a <att_send_process+0x6c>
   2db4e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
   2db52:	b103      	cbz	r3, 2db56 <att_send_process+0x38>
   2db54:	3b88      	subs	r3, #136	; 0x88
   2db56:	4627      	mov	r7, r4
   2db58:	462c      	mov	r4, r5
   2db5a:	461d      	mov	r5, r3
   2db5c:	b1bc      	cbz	r4, 2db8e <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   2db5e:	f116 0f02 	cmn.w	r6, #2
   2db62:	d1ec      	bne.n	2db3e <att_send_process+0x20>
   2db64:	2f00      	cmp	r7, #0
   2db66:	d0ea      	beq.n	2db3e <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2db68:	2103      	movs	r1, #3
   2db6a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2db6e:	f7ff fe6d 	bl	2d84c <atomic_test_bit>
   2db72:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2db74:	2103      	movs	r1, #3
   2db76:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2db7a:	f7ff fe67 	bl	2d84c <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2db7e:	4581      	cmp	r9, r0
   2db80:	d1dd      	bne.n	2db3e <att_send_process+0x20>
   2db82:	463c      	mov	r4, r7
   2db84:	e7e2      	b.n	2db4c <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2db86:	4625      	mov	r5, r4
   2db88:	e7d6      	b.n	2db38 <att_send_process+0x1a>
   2db8a:	462b      	mov	r3, r5
   2db8c:	e7e3      	b.n	2db56 <att_send_process+0x38>
}
   2db8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002db92 <write_cb>:
{
   2db92:	b5f0      	push	{r4, r5, r6, r7, lr}
   2db94:	b083      	sub	sp, #12
   2db96:	4606      	mov	r6, r0
   2db98:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2db9a:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2db9e:	4601      	mov	r1, r0
   2dba0:	6820      	ldr	r0, [r4, #0]
   2dba2:	f000 ff5e 	bl	2ea62 <bt_gatt_check_perm>
   2dba6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2dba8:	bb08      	cbnz	r0, 2dbee <write_cb+0x5c>
   2dbaa:	4605      	mov	r5, r0
	if (!data->req) {
   2dbac:	7a23      	ldrb	r3, [r4, #8]
   2dbae:	b11b      	cbz	r3, 2dbb8 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2dbb0:	2b18      	cmp	r3, #24
   2dbb2:	d016      	beq.n	2dbe2 <write_cb+0x50>
	uint8_t flags = 0U;
   2dbb4:	4603      	mov	r3, r0
   2dbb6:	e000      	b.n	2dbba <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2dbb8:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2dbba:	68b7      	ldr	r7, [r6, #8]
   2dbbc:	9301      	str	r3, [sp, #4]
   2dbbe:	8a63      	ldrh	r3, [r4, #18]
   2dbc0:	9300      	str	r3, [sp, #0]
   2dbc2:	8a23      	ldrh	r3, [r4, #16]
   2dbc4:	68e2      	ldr	r2, [r4, #12]
   2dbc6:	4631      	mov	r1, r6
   2dbc8:	6820      	ldr	r0, [r4, #0]
   2dbca:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2dbcc:	2800      	cmp	r0, #0
   2dbce:	db02      	blt.n	2dbd6 <write_cb+0x44>
   2dbd0:	8a23      	ldrh	r3, [r4, #16]
   2dbd2:	4298      	cmp	r0, r3
   2dbd4:	d007      	beq.n	2dbe6 <write_cb+0x54>
		data->err = err_to_att(write);
   2dbd6:	f7ff fe06 	bl	2d7e6 <err_to_att>
   2dbda:	7520      	strb	r0, [r4, #20]
}
   2dbdc:	4628      	mov	r0, r5
   2dbde:	b003      	add	sp, #12
   2dbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2dbe2:	2304      	movs	r3, #4
   2dbe4:	e7e9      	b.n	2dbba <write_cb+0x28>
	data->err = 0U;
   2dbe6:	2300      	movs	r3, #0
   2dbe8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2dbea:	2501      	movs	r5, #1
   2dbec:	e7f6      	b.n	2dbdc <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   2dbee:	2500      	movs	r5, #0
   2dbf0:	e7f4      	b.n	2dbdc <write_cb+0x4a>

0002dbf2 <bt_att_chan_send_rsp>:
{
   2dbf2:	b538      	push	{r3, r4, r5, lr}
   2dbf4:	4604      	mov	r4, r0
   2dbf6:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2dbf8:	f7f0 fd92 	bl	1e720 <chan_send>
	if (err) {
   2dbfc:	b900      	cbnz	r0, 2dc00 <bt_att_chan_send_rsp+0xe>
}
   2dbfe:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2dc00:	4629      	mov	r1, r5
   2dc02:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   2dc06:	f001 f977 	bl	2eef8 <net_buf_put>
}
   2dc0a:	e7f8      	b.n	2dbfe <bt_att_chan_send_rsp+0xc>

0002dc0c <att_chan_read>:
{
   2dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dc10:	b085      	sub	sp, #20
   2dc12:	4680      	mov	r8, r0
   2dc14:	4689      	mov	r9, r1
   2dc16:	9202      	str	r2, [sp, #8]
   2dc18:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2dc1a:	6843      	ldr	r3, [r0, #4]
   2dc1c:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2dc1e:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   2dc20:	4613      	mov	r3, r2
	size_t bytes = 0;
   2dc22:	2200      	movs	r2, #0
	while (buf) {
   2dc24:	e002      	b.n	2dc2c <att_chan_read+0x20>
		bytes += buf->len;
   2dc26:	8a19      	ldrh	r1, [r3, #16]
   2dc28:	440a      	add	r2, r1
		buf = buf->frags;
   2dc2a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2dc2c:	2b00      	cmp	r3, #0
   2dc2e:	d1fa      	bne.n	2dc26 <att_chan_read+0x1a>
   2dc30:	4290      	cmp	r0, r2
   2dc32:	d804      	bhi.n	2dc3e <att_chan_read+0x32>
		return 0;
   2dc34:	2400      	movs	r4, #0
}
   2dc36:	4620      	mov	r0, r4
   2dc38:	b005      	add	sp, #20
   2dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2dc3e:	9802      	ldr	r0, [sp, #8]
   2dc40:	f001 f985 	bl	2ef4e <net_buf_frag_last>
   2dc44:	4607      	mov	r7, r0
	size_t len, total = 0;
   2dc46:	f04f 0a00 	mov.w	sl, #0
   2dc4a:	e082      	b.n	2dd52 <att_chan_read+0x146>
		bytes += buf->len;
   2dc4c:	8a19      	ldrh	r1, [r3, #16]
   2dc4e:	440a      	add	r2, r1
		buf = buf->frags;
   2dc50:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2dc52:	2b00      	cmp	r3, #0
   2dc54:	d1fa      	bne.n	2dc4c <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dc56:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2dc58:	f107 060c 	add.w	r6, r7, #12
   2dc5c:	4630      	mov	r0, r6
   2dc5e:	f001 f9d6 	bl	2f00e <net_buf_simple_tailroom>
   2dc62:	4284      	cmp	r4, r0
   2dc64:	d326      	bcc.n	2dcb4 <att_chan_read+0xa8>
   2dc66:	4630      	mov	r0, r6
   2dc68:	f001 f9d1 	bl	2f00e <net_buf_simple_tailroom>
   2dc6c:	4606      	mov	r6, r0
		if (!len) {
   2dc6e:	b36e      	cbz	r6, 2dccc <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2dc70:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2dc74:	68f9      	ldr	r1, [r7, #12]
   2dc76:	8a3a      	ldrh	r2, [r7, #16]
   2dc78:	9500      	str	r5, [sp, #0]
   2dc7a:	b2b3      	uxth	r3, r6
   2dc7c:	440a      	add	r2, r1
   2dc7e:	4649      	mov	r1, r9
   2dc80:	9803      	ldr	r0, [sp, #12]
   2dc82:	47a0      	blx	r4
		if (read < 0) {
   2dc84:	1e04      	subs	r4, r0, #0
   2dc86:	db55      	blt.n	2dd34 <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   2dc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2dc8a:	b12b      	cbz	r3, 2dc98 <att_chan_read+0x8c>
   2dc8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2dc8e:	4621      	mov	r1, r4
   2dc90:	4638      	mov	r0, r7
   2dc92:	4798      	blx	r3
   2dc94:	2800      	cmp	r0, #0
   2dc96:	d061      	beq.n	2dd5c <att_chan_read+0x150>
		net_buf_add(frag, read);
   2dc98:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2dc9a:	4621      	mov	r1, r4
   2dc9c:	f107 000c 	add.w	r0, r7, #12
   2dca0:	f001 f979 	bl	2ef96 <net_buf_simple_add>
		total += read;
   2dca4:	44a2      	add	sl, r4
		offset += read;
   2dca6:	442c      	add	r4, r5
   2dca8:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2dcaa:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   2dcae:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2dcb0:	2200      	movs	r2, #0
   2dcb2:	e048      	b.n	2dd46 <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dcb4:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   2dcb8:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2dcba:	2200      	movs	r2, #0
	while (buf) {
   2dcbc:	e002      	b.n	2dcc4 <att_chan_read+0xb8>
		bytes += buf->len;
   2dcbe:	8a19      	ldrh	r1, [r3, #16]
   2dcc0:	440a      	add	r2, r1
		buf = buf->frags;
   2dcc2:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2dcc4:	2b00      	cmp	r3, #0
   2dcc6:	d1fa      	bne.n	2dcbe <att_chan_read+0xb2>
   2dcc8:	1ab6      	subs	r6, r6, r2
   2dcca:	e7d0      	b.n	2dc6e <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2dccc:	9b02      	ldr	r3, [sp, #8]
   2dcce:	7a98      	ldrb	r0, [r3, #10]
   2dcd0:	f7f2 fffe 	bl	20cd0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2dcd4:	2200      	movs	r2, #0
   2dcd6:	2300      	movs	r3, #0
   2dcd8:	f001 f8d5 	bl	2ee86 <net_buf_alloc_fixed>
			if (!frag) {
   2dcdc:	4607      	mov	r7, r0
   2dcde:	b150      	cbz	r0, 2dcf6 <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   2dce0:	4601      	mov	r1, r0
   2dce2:	f8dd b008 	ldr.w	fp, [sp, #8]
   2dce6:	4658      	mov	r0, fp
   2dce8:	f001 f942 	bl	2ef70 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dcec:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   2dcf0:	4632      	mov	r2, r6
	while (buf) {
   2dcf2:	465b      	mov	r3, fp
   2dcf4:	e004      	b.n	2dd00 <att_chan_read+0xf4>
				return total;
   2dcf6:	4654      	mov	r4, sl
   2dcf8:	e79d      	b.n	2dc36 <att_chan_read+0x2a>
		bytes += buf->len;
   2dcfa:	8a19      	ldrh	r1, [r3, #16]
   2dcfc:	440a      	add	r2, r1
		buf = buf->frags;
   2dcfe:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2dd00:	2b00      	cmp	r3, #0
   2dd02:	d1fa      	bne.n	2dcfa <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dd04:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2dd06:	f107 0b0c 	add.w	fp, r7, #12
   2dd0a:	4658      	mov	r0, fp
   2dd0c:	f001 f97f 	bl	2f00e <net_buf_simple_tailroom>
   2dd10:	4284      	cmp	r4, r0
   2dd12:	d304      	bcc.n	2dd1e <att_chan_read+0x112>
   2dd14:	4658      	mov	r0, fp
   2dd16:	f001 f97a 	bl	2f00e <net_buf_simple_tailroom>
   2dd1a:	4606      	mov	r6, r0
   2dd1c:	e7a8      	b.n	2dc70 <att_chan_read+0x64>
   2dd1e:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   2dd22:	9b02      	ldr	r3, [sp, #8]
   2dd24:	e002      	b.n	2dd2c <att_chan_read+0x120>
		bytes += buf->len;
   2dd26:	8a1a      	ldrh	r2, [r3, #16]
   2dd28:	4416      	add	r6, r2
		buf = buf->frags;
   2dd2a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2dd2c:	2b00      	cmp	r3, #0
   2dd2e:	d1fa      	bne.n	2dd26 <att_chan_read+0x11a>
   2dd30:	1b8e      	subs	r6, r1, r6
   2dd32:	e79d      	b.n	2dc70 <att_chan_read+0x64>
			if (total) {
   2dd34:	f1ba 0f00 	cmp.w	sl, #0
   2dd38:	f43f af7d 	beq.w	2dc36 <att_chan_read+0x2a>
				return total;
   2dd3c:	4654      	mov	r4, sl
   2dd3e:	e77a      	b.n	2dc36 <att_chan_read+0x2a>
		bytes += buf->len;
   2dd40:	8a19      	ldrh	r1, [r3, #16]
   2dd42:	440a      	add	r2, r1
		buf = buf->frags;
   2dd44:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2dd46:	2b00      	cmp	r3, #0
   2dd48:	d1fa      	bne.n	2dd40 <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2dd4a:	4290      	cmp	r0, r2
   2dd4c:	d906      	bls.n	2dd5c <att_chan_read+0x150>
   2dd4e:	45b3      	cmp	fp, r6
   2dd50:	d104      	bne.n	2dd5c <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dd52:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2dd56:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2dd58:	2200      	movs	r2, #0
	while (buf) {
   2dd5a:	e77a      	b.n	2dc52 <att_chan_read+0x46>
	return total;
   2dd5c:	4654      	mov	r4, sl
   2dd5e:	e76a      	b.n	2dc36 <att_chan_read+0x2a>

0002dd60 <read_vl_cb>:
{
   2dd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dd64:	b082      	sub	sp, #8
   2dd66:	4606      	mov	r6, r0
   2dd68:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2dd6a:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2dd6c:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2dd6e:	2300      	movs	r3, #0
   2dd70:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2dd72:	2295      	movs	r2, #149	; 0x95
   2dd74:	4631      	mov	r1, r6
   2dd76:	f000 fe74 	bl	2ea62 <bt_gatt_check_perm>
   2dd7a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2dd7c:	b9f0      	cbnz	r0, 2ddbc <read_vl_cb+0x5c>
   2dd7e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2dd80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2dd82:	68a0      	ldr	r0, [r4, #8]
   2dd84:	8a02      	ldrh	r2, [r0, #16]
   2dd86:	1a9b      	subs	r3, r3, r2
   2dd88:	2b01      	cmp	r3, #1
   2dd8a:	dd18      	ble.n	2ddbe <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2dd8c:	2102      	movs	r1, #2
   2dd8e:	300c      	adds	r0, #12
   2dd90:	f001 f901 	bl	2ef96 <net_buf_simple_add>
   2dd94:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2dd96:	2300      	movs	r3, #0
   2dd98:	9301      	str	r3, [sp, #4]
   2dd9a:	9300      	str	r3, [sp, #0]
   2dd9c:	88a3      	ldrh	r3, [r4, #4]
   2dd9e:	68a2      	ldr	r2, [r4, #8]
   2dda0:	4631      	mov	r1, r6
   2dda2:	4638      	mov	r0, r7
   2dda4:	f7ff ff32 	bl	2dc0c <att_chan_read>
	if (read < 0) {
   2dda8:	2800      	cmp	r0, #0
   2ddaa:	db03      	blt.n	2ddb4 <read_vl_cb+0x54>
	rsp->len = read;
   2ddac:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   2ddb0:	2501      	movs	r5, #1
   2ddb2:	e004      	b.n	2ddbe <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   2ddb4:	f7ff fd17 	bl	2d7e6 <err_to_att>
   2ddb8:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2ddba:	e000      	b.n	2ddbe <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2ddbc:	2500      	movs	r5, #0
}
   2ddbe:	4628      	mov	r0, r5
   2ddc0:	b002      	add	sp, #8
   2ddc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ddc6 <read_cb>:
{
   2ddc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ddc8:	b083      	sub	sp, #12
   2ddca:	4606      	mov	r6, r0
   2ddcc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2ddce:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2ddd0:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2ddd2:	2300      	movs	r3, #0
   2ddd4:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2ddd6:	2295      	movs	r2, #149	; 0x95
   2ddd8:	4631      	mov	r1, r6
   2ddda:	f000 fe42 	bl	2ea62 <bt_gatt_check_perm>
   2ddde:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2dde0:	b118      	cbz	r0, 2ddea <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2dde2:	2500      	movs	r5, #0
}
   2dde4:	4628      	mov	r0, r5
   2dde6:	b003      	add	sp, #12
   2dde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ddea:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ddec:	2300      	movs	r3, #0
   2ddee:	9301      	str	r3, [sp, #4]
   2ddf0:	9300      	str	r3, [sp, #0]
   2ddf2:	88a3      	ldrh	r3, [r4, #4]
   2ddf4:	68a2      	ldr	r2, [r4, #8]
   2ddf6:	4631      	mov	r1, r6
   2ddf8:	4638      	mov	r0, r7
   2ddfa:	f7ff ff07 	bl	2dc0c <att_chan_read>
	if (ret < 0) {
   2ddfe:	2800      	cmp	r0, #0
   2de00:	db01      	blt.n	2de06 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2de02:	2501      	movs	r5, #1
   2de04:	e7ee      	b.n	2dde4 <read_cb+0x1e>
		data->err = err_to_att(ret);
   2de06:	f7ff fcee 	bl	2d7e6 <err_to_att>
   2de0a:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2de0c:	e7ea      	b.n	2dde4 <read_cb+0x1e>

0002de0e <find_info_cb>:
{
   2de0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2de12:	4606      	mov	r6, r0
   2de14:	460f      	mov	r7, r1
   2de16:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2de18:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2de1c:	6893      	ldr	r3, [r2, #8]
   2de1e:	b14b      	cbz	r3, 2de34 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2de20:	68a3      	ldr	r3, [r4, #8]
   2de22:	781d      	ldrb	r5, [r3, #0]
   2de24:	2d01      	cmp	r5, #1
   2de26:	d013      	beq.n	2de50 <find_info_cb+0x42>
   2de28:	2d02      	cmp	r5, #2
   2de2a:	d02d      	beq.n	2de88 <find_info_cb+0x7a>
   2de2c:	2500      	movs	r5, #0
}
   2de2e:	4628      	mov	r0, r5
   2de30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2de34:	6850      	ldr	r0, [r2, #4]
   2de36:	2101      	movs	r1, #1
   2de38:	300c      	adds	r0, #12
   2de3a:	f001 f8ac 	bl	2ef96 <net_buf_simple_add>
   2de3e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2de40:	6833      	ldr	r3, [r6, #0]
   2de42:	781b      	ldrb	r3, [r3, #0]
   2de44:	b913      	cbnz	r3, 2de4c <find_info_cb+0x3e>
   2de46:	2301      	movs	r3, #1
   2de48:	7003      	strb	r3, [r0, #0]
   2de4a:	e7e9      	b.n	2de20 <find_info_cb+0x12>
   2de4c:	2302      	movs	r3, #2
   2de4e:	e7fb      	b.n	2de48 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2de50:	6833      	ldr	r3, [r6, #0]
   2de52:	f893 9000 	ldrb.w	r9, [r3]
   2de56:	f1b9 0f00 	cmp.w	r9, #0
   2de5a:	d001      	beq.n	2de60 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2de5c:	2500      	movs	r5, #0
   2de5e:	e7e6      	b.n	2de2e <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2de60:	6860      	ldr	r0, [r4, #4]
   2de62:	2104      	movs	r1, #4
   2de64:	300c      	adds	r0, #12
   2de66:	f001 f896 	bl	2ef96 <net_buf_simple_add>
   2de6a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2de6c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2de6e:	6832      	ldr	r2, [r6, #0]
   2de70:	68e3      	ldr	r3, [r4, #12]
   2de72:	8852      	ldrh	r2, [r2, #2]
   2de74:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2de76:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2de7a:	6862      	ldr	r2, [r4, #4]
   2de7c:	8a12      	ldrh	r2, [r2, #16]
   2de7e:	1a9b      	subs	r3, r3, r2
   2de80:	2b04      	cmp	r3, #4
   2de82:	d8d4      	bhi.n	2de2e <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2de84:	464d      	mov	r5, r9
   2de86:	e7d2      	b.n	2de2e <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2de88:	6833      	ldr	r3, [r6, #0]
   2de8a:	781b      	ldrb	r3, [r3, #0]
   2de8c:	2b02      	cmp	r3, #2
   2de8e:	d001      	beq.n	2de94 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2de90:	2500      	movs	r5, #0
   2de92:	e7cc      	b.n	2de2e <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2de94:	6860      	ldr	r0, [r4, #4]
   2de96:	2112      	movs	r1, #18
   2de98:	300c      	adds	r0, #12
   2de9a:	f001 f87c 	bl	2ef96 <net_buf_simple_add>
   2de9e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2dea0:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2dea2:	68e0      	ldr	r0, [r4, #12]
   2dea4:	6831      	ldr	r1, [r6, #0]
   2dea6:	2210      	movs	r2, #16
   2dea8:	3101      	adds	r1, #1
   2deaa:	3002      	adds	r0, #2
   2deac:	f7fe fc9e 	bl	2c7ec <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2deb0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2deb4:	6862      	ldr	r2, [r4, #4]
   2deb6:	8a12      	ldrh	r2, [r2, #16]
   2deb8:	1a9b      	subs	r3, r3, r2
   2deba:	2b12      	cmp	r3, #18
   2debc:	d801      	bhi.n	2dec2 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2debe:	2500      	movs	r5, #0
   2dec0:	e7b5      	b.n	2de2e <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2dec2:	2501      	movs	r5, #1
   2dec4:	e7b3      	b.n	2de2e <find_info_cb+0x20>

0002dec6 <att_chan_mtu_updated>:
{
   2dec6:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2dec8:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2deca:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2decc:	b153      	cbz	r3, 2dee4 <att_chan_mtu_updated+0x1e>
   2dece:	3b88      	subs	r3, #136	; 0x88
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ded0:	f113 0488 	adds.w	r4, r3, #136	; 0x88
   2ded4:	d003      	beq.n	2dede <att_chan_mtu_updated+0x18>
	return node->next;
   2ded6:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
   2deda:	b104      	cbz	r4, 2dede <att_chan_mtu_updated+0x18>
   2dedc:	3c88      	subs	r4, #136	; 0x88
   2dede:	2200      	movs	r2, #0
   2dee0:	4611      	mov	r1, r2
   2dee2:	e004      	b.n	2deee <att_chan_mtu_updated+0x28>
   2dee4:	461c      	mov	r4, r3
   2dee6:	e7fa      	b.n	2dede <att_chan_mtu_updated+0x18>
   2dee8:	4625      	mov	r5, r4
   2deea:	4623      	mov	r3, r4
   2deec:	462c      	mov	r4, r5
   2deee:	b18b      	cbz	r3, 2df14 <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   2def0:	4283      	cmp	r3, r0
   2def2:	d007      	beq.n	2df04 <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2def4:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   2def6:	42a9      	cmp	r1, r5
   2def8:	bf38      	it	cc
   2defa:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2defc:	8b5b      	ldrh	r3, [r3, #26]
   2defe:	429a      	cmp	r2, r3
   2df00:	bf38      	it	cc
   2df02:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2df04:	2c00      	cmp	r4, #0
   2df06:	d0ef      	beq.n	2dee8 <att_chan_mtu_updated+0x22>
   2df08:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   2df0c:	2d00      	cmp	r5, #0
   2df0e:	d0ec      	beq.n	2deea <att_chan_mtu_updated+0x24>
   2df10:	3d88      	subs	r5, #136	; 0x88
   2df12:	e7ea      	b.n	2deea <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2df14:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2df16:	428b      	cmp	r3, r1
   2df18:	d802      	bhi.n	2df20 <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2df1a:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2df1c:	4294      	cmp	r4, r2
   2df1e:	d909      	bls.n	2df34 <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2df20:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2df22:	4282      	cmp	r2, r0
   2df24:	bf38      	it	cc
   2df26:	4602      	movcc	r2, r0
   2df28:	4299      	cmp	r1, r3
   2df2a:	bf38      	it	cc
   2df2c:	4619      	movcc	r1, r3
   2df2e:	6830      	ldr	r0, [r6, #0]
   2df30:	f7f2 fe32 	bl	20b98 <bt_gatt_att_max_mtu_changed>
}
   2df34:	bd70      	pop	{r4, r5, r6, pc}

0002df36 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2df36:	f001 021f 	and.w	r2, r1, #31
   2df3a:	2301      	movs	r3, #1
   2df3c:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2df3e:	0949      	lsrs	r1, r1, #5
   2df40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2df44:	f3bf 8f5b 	dmb	ish
   2df48:	e850 2f00 	ldrex	r2, [r0]
   2df4c:	ea42 0103 	orr.w	r1, r2, r3
   2df50:	e840 1c00 	strex	ip, r1, [r0]
   2df54:	f1bc 0f00 	cmp.w	ip, #0
   2df58:	d1f6      	bne.n	2df48 <atomic_test_and_set_bit+0x12>
   2df5a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2df5e:	4213      	tst	r3, r2
}
   2df60:	bf14      	ite	ne
   2df62:	2001      	movne	r0, #1
   2df64:	2000      	moveq	r0, #0
   2df66:	4770      	bx	lr

0002df68 <att_sent>:
{
   2df68:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   2df6a:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   2df6c:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   2df6e:	689b      	ldr	r3, [r3, #8]
   2df70:	699b      	ldr	r3, [r3, #24]
   2df72:	b103      	cbz	r3, 2df76 <att_sent+0xe>
		chan->ops->sent(chan);
   2df74:	4798      	blx	r3
}
   2df76:	bd08      	pop	{r3, pc}

0002df78 <att_unknown>:
{
   2df78:	b570      	push	{r4, r5, r6, lr}
   2df7a:	4604      	mov	r4, r0
   2df7c:	460d      	mov	r5, r1
	if (!err) {
   2df7e:	4616      	mov	r6, r2
   2df80:	b12a      	cbz	r2, 2df8e <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   2df82:	4632      	mov	r2, r6
   2df84:	4629      	mov	r1, r5
   2df86:	4620      	mov	r0, r4
   2df88:	f7ff fc81 	bl	2d88e <chan_unknown>
}
   2df8c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2df8e:	f7ff ffeb 	bl	2df68 <att_sent>
   2df92:	e7f6      	b.n	2df82 <att_unknown+0xa>

0002df94 <att_tx_complete>:
{
   2df94:	b570      	push	{r4, r5, r6, lr}
   2df96:	4604      	mov	r4, r0
   2df98:	460d      	mov	r5, r1
	if (!err) {
   2df9a:	4616      	mov	r6, r2
   2df9c:	b12a      	cbz	r2, 2dfaa <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   2df9e:	4632      	mov	r2, r6
   2dfa0:	4629      	mov	r1, r5
   2dfa2:	4620      	mov	r0, r4
   2dfa4:	f7ff fc78 	bl	2d898 <chan_tx_complete>
}
   2dfa8:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2dfaa:	f7ff ffdd 	bl	2df68 <att_sent>
   2dfae:	e7f6      	b.n	2df9e <att_tx_complete+0xa>

0002dfb0 <att_req_sent>:
{
   2dfb0:	b570      	push	{r4, r5, r6, lr}
   2dfb2:	4604      	mov	r4, r0
   2dfb4:	460d      	mov	r5, r1
	if (!err) {
   2dfb6:	4616      	mov	r6, r2
   2dfb8:	b12a      	cbz	r2, 2dfc6 <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   2dfba:	4632      	mov	r2, r6
   2dfbc:	4629      	mov	r1, r5
   2dfbe:	4620      	mov	r0, r4
   2dfc0:	f7ff fd1e 	bl	2da00 <chan_req_sent>
}
   2dfc4:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2dfc6:	f7ff ffcf 	bl	2df68 <att_sent>
   2dfca:	e7f6      	b.n	2dfba <att_req_sent+0xa>

0002dfcc <att_cfm_sent>:
{
   2dfcc:	b570      	push	{r4, r5, r6, lr}
   2dfce:	4604      	mov	r4, r0
   2dfd0:	460d      	mov	r5, r1
	if (!err) {
   2dfd2:	4616      	mov	r6, r2
   2dfd4:	b12a      	cbz	r2, 2dfe2 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   2dfd6:	4632      	mov	r2, r6
   2dfd8:	4629      	mov	r1, r5
   2dfda:	4620      	mov	r0, r4
   2dfdc:	f7ff fd1f 	bl	2da1e <chan_cfm_sent>
}
   2dfe0:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2dfe2:	f7ff ffc1 	bl	2df68 <att_sent>
   2dfe6:	e7f6      	b.n	2dfd6 <att_cfm_sent+0xa>

0002dfe8 <att_rsp_sent>:
{
   2dfe8:	b570      	push	{r4, r5, r6, lr}
   2dfea:	4604      	mov	r4, r0
   2dfec:	460d      	mov	r5, r1
	if (!err) {
   2dfee:	4616      	mov	r6, r2
   2dff0:	b12a      	cbz	r2, 2dffe <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   2dff2:	4632      	mov	r2, r6
   2dff4:	4629      	mov	r1, r5
   2dff6:	4620      	mov	r0, r4
   2dff8:	f7ff fd24 	bl	2da44 <chan_rsp_sent>
}
   2dffc:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2dffe:	f7ff ffb3 	bl	2df68 <att_sent>
   2e002:	e7f6      	b.n	2dff2 <att_rsp_sent+0xa>

0002e004 <send_err_rsp>:
	if (!req) {
   2e004:	b901      	cbnz	r1, 2e008 <send_err_rsp+0x4>
   2e006:	4770      	bx	lr
{
   2e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e00c:	4606      	mov	r6, r0
   2e00e:	4615      	mov	r5, r2
   2e010:	461c      	mov	r4, r3
   2e012:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e014:	2204      	movs	r2, #4
   2e016:	2101      	movs	r1, #1
   2e018:	f7f0 fe46 	bl	1eca8 <bt_att_chan_create_pdu>
	if (!buf) {
   2e01c:	4680      	mov	r8, r0
   2e01e:	b158      	cbz	r0, 2e038 <send_err_rsp+0x34>
   2e020:	2104      	movs	r1, #4
   2e022:	300c      	adds	r0, #12
   2e024:	f000 ffb7 	bl	2ef96 <net_buf_simple_add>
	rsp->request = req;
   2e028:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   2e02a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   2e02e:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2e030:	4641      	mov	r1, r8
   2e032:	4630      	mov	r0, r6
   2e034:	f7ff fddd 	bl	2dbf2 <bt_att_chan_send_rsp>
}
   2e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e03c <att_write_cmd>:
{
   2e03c:	b530      	push	{r4, r5, lr}
   2e03e:	b085      	sub	sp, #20
   2e040:	4605      	mov	r5, r0
   2e042:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2e044:	f101 000c 	add.w	r0, r1, #12
   2e048:	f000 ffd5 	bl	2eff6 <net_buf_simple_pull_le16>
   2e04c:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2e04e:	68e2      	ldr	r2, [r4, #12]
   2e050:	8a21      	ldrh	r1, [r4, #16]
   2e052:	9102      	str	r1, [sp, #8]
   2e054:	9201      	str	r2, [sp, #4]
   2e056:	2100      	movs	r1, #0
   2e058:	9100      	str	r1, [sp, #0]
   2e05a:	460a      	mov	r2, r1
   2e05c:	4628      	mov	r0, r5
   2e05e:	f7f1 f863 	bl	1f128 <att_write_rsp>
}
   2e062:	b005      	add	sp, #20
   2e064:	bd30      	pop	{r4, r5, pc}

0002e066 <att_write_req>:
{
   2e066:	b530      	push	{r4, r5, lr}
   2e068:	b085      	sub	sp, #20
   2e06a:	4605      	mov	r5, r0
   2e06c:	460c      	mov	r4, r1
   2e06e:	f101 000c 	add.w	r0, r1, #12
   2e072:	f000 ffc0 	bl	2eff6 <net_buf_simple_pull_le16>
   2e076:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2e078:	68e2      	ldr	r2, [r4, #12]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2e07a:	8a21      	ldrh	r1, [r4, #16]
   2e07c:	9102      	str	r1, [sp, #8]
   2e07e:	9201      	str	r2, [sp, #4]
   2e080:	2200      	movs	r2, #0
   2e082:	9200      	str	r2, [sp, #0]
   2e084:	2213      	movs	r2, #19
   2e086:	2112      	movs	r1, #18
   2e088:	4628      	mov	r0, r5
   2e08a:	f7f1 f84d 	bl	1f128 <att_write_rsp>
}
   2e08e:	b005      	add	sp, #20
   2e090:	bd30      	pop	{r4, r5, pc}

0002e092 <att_read_group_req>:
{
   2e092:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e094:	b089      	sub	sp, #36	; 0x24
   2e096:	4605      	mov	r5, r0
   2e098:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2e09a:	7c0c      	ldrb	r4, [r1, #16]
   2e09c:	3c04      	subs	r4, #4
   2e09e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2e0a0:	2c02      	cmp	r4, #2
   2e0a2:	d001      	beq.n	2e0a8 <att_read_group_req+0x16>
   2e0a4:	2c10      	cmp	r4, #16
   2e0a6:	d142      	bne.n	2e12e <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2e0a8:	2104      	movs	r1, #4
   2e0aa:	300c      	adds	r0, #12
   2e0ac:	f000 ff9b 	bl	2efe6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e0b0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e0b2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2e0b4:	4622      	mov	r2, r4
   2e0b6:	1d01      	adds	r1, r0, #4
   2e0b8:	a801      	add	r0, sp, #4
   2e0ba:	f7fe fc42 	bl	2c942 <bt_uuid_create>
   2e0be:	b3c8      	cbz	r0, 2e134 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e0c0:	f10d 0216 	add.w	r2, sp, #22
   2e0c4:	4639      	mov	r1, r7
   2e0c6:	4630      	mov	r0, r6
   2e0c8:	f7ff fb7e 	bl	2d7c8 <range_is_valid>
   2e0cc:	b1f0      	cbz	r0, 2e10c <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2e0ce:	2300      	movs	r3, #0
   2e0d0:	f88d 3018 	strb.w	r3, [sp, #24]
   2e0d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2e0d8:	f8ad 301a 	strh.w	r3, [sp, #26]
   2e0dc:	a906      	add	r1, sp, #24
   2e0de:	a801      	add	r0, sp, #4
   2e0e0:	f7fe fc11 	bl	2c906 <bt_uuid_cmp>
   2e0e4:	b158      	cbz	r0, 2e0fe <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2e0e6:	2300      	movs	r3, #0
   2e0e8:	f88d 301c 	strb.w	r3, [sp, #28]
   2e0ec:	f642 0301 	movw	r3, #10241	; 0x2801
   2e0f0:	f8ad 301e 	strh.w	r3, [sp, #30]
   2e0f4:	a907      	add	r1, sp, #28
   2e0f6:	a801      	add	r0, sp, #4
   2e0f8:	f7fe fc05 	bl	2c906 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2e0fc:	b978      	cbnz	r0, 2e11e <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2e0fe:	463b      	mov	r3, r7
   2e100:	4632      	mov	r2, r6
   2e102:	a901      	add	r1, sp, #4
   2e104:	4628      	mov	r0, r5
   2e106:	f7f1 f8f1 	bl	1f2ec <att_read_group_rsp>
   2e10a:	e011      	b.n	2e130 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2e10c:	2301      	movs	r3, #1
   2e10e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2e112:	2110      	movs	r1, #16
   2e114:	4628      	mov	r0, r5
   2e116:	f7ff ff75 	bl	2e004 <send_err_rsp>
		return 0;
   2e11a:	2000      	movs	r0, #0
   2e11c:	e008      	b.n	2e130 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2e11e:	2310      	movs	r3, #16
   2e120:	4632      	mov	r2, r6
   2e122:	4619      	mov	r1, r3
   2e124:	4628      	mov	r0, r5
   2e126:	f7ff ff6d 	bl	2e004 <send_err_rsp>
		return 0;
   2e12a:	2000      	movs	r0, #0
   2e12c:	e000      	b.n	2e130 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2e12e:	2004      	movs	r0, #4
}
   2e130:	b009      	add	sp, #36	; 0x24
   2e132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2e134:	200e      	movs	r0, #14
   2e136:	e7fb      	b.n	2e130 <att_read_group_req+0x9e>

0002e138 <att_read_blob_req>:
{
   2e138:	b500      	push	{lr}
   2e13a:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2e13c:	68ca      	ldr	r2, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   2e13e:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2e140:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2e142:	9200      	str	r2, [sp, #0]
   2e144:	220d      	movs	r2, #13
   2e146:	210c      	movs	r1, #12
   2e148:	f7f1 f9c4 	bl	1f4d4 <att_read_rsp>
}
   2e14c:	b003      	add	sp, #12
   2e14e:	f85d fb04 	ldr.w	pc, [sp], #4

0002e152 <att_read_req>:
{
   2e152:	b500      	push	{lr}
   2e154:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2e156:	68cb      	ldr	r3, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   2e158:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e15a:	2200      	movs	r2, #0
   2e15c:	9200      	str	r2, [sp, #0]
   2e15e:	220b      	movs	r2, #11
   2e160:	210a      	movs	r1, #10
   2e162:	f7f1 f9b7 	bl	1f4d4 <att_read_rsp>
}
   2e166:	b003      	add	sp, #12
   2e168:	f85d fb04 	ldr.w	pc, [sp], #4

0002e16c <att_read_type_req>:
{
   2e16c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e16e:	b087      	sub	sp, #28
   2e170:	4605      	mov	r5, r0
   2e172:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2e174:	7c0c      	ldrb	r4, [r1, #16]
   2e176:	3c04      	subs	r4, #4
   2e178:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2e17a:	2c02      	cmp	r4, #2
   2e17c:	d001      	beq.n	2e182 <att_read_type_req+0x16>
   2e17e:	2c10      	cmp	r4, #16
   2e180:	d123      	bne.n	2e1ca <att_read_type_req+0x5e>
   2e182:	2104      	movs	r1, #4
   2e184:	300c      	adds	r0, #12
   2e186:	f000 ff2e 	bl	2efe6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e18a:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e18c:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2e18e:	4622      	mov	r2, r4
   2e190:	1d01      	adds	r1, r0, #4
   2e192:	a801      	add	r0, sp, #4
   2e194:	f7fe fbd5 	bl	2c942 <bt_uuid_create>
   2e198:	b1c8      	cbz	r0, 2e1ce <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e19a:	f10d 0216 	add.w	r2, sp, #22
   2e19e:	4639      	mov	r1, r7
   2e1a0:	4630      	mov	r0, r6
   2e1a2:	f7ff fb11 	bl	2d7c8 <range_is_valid>
   2e1a6:	b138      	cbz	r0, 2e1b8 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2e1a8:	463b      	mov	r3, r7
   2e1aa:	4632      	mov	r2, r6
   2e1ac:	a901      	add	r1, sp, #4
   2e1ae:	4628      	mov	r0, r5
   2e1b0:	f7f1 f9ea 	bl	1f588 <att_read_type_rsp>
}
   2e1b4:	b007      	add	sp, #28
   2e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2e1b8:	2301      	movs	r3, #1
   2e1ba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2e1be:	2108      	movs	r1, #8
   2e1c0:	4628      	mov	r0, r5
   2e1c2:	f7ff ff1f 	bl	2e004 <send_err_rsp>
		return 0;
   2e1c6:	2000      	movs	r0, #0
   2e1c8:	e7f4      	b.n	2e1b4 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2e1ca:	2004      	movs	r0, #4
   2e1cc:	e7f2      	b.n	2e1b4 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2e1ce:	200e      	movs	r0, #14
   2e1d0:	e7f0      	b.n	2e1b4 <att_read_type_req+0x48>

0002e1d2 <att_find_type_req>:
{
   2e1d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e1d6:	b087      	sub	sp, #28
   2e1d8:	4607      	mov	r7, r0
   2e1da:	460c      	mov	r4, r1
   2e1dc:	2106      	movs	r1, #6
   2e1de:	f104 000c 	add.w	r0, r4, #12
   2e1e2:	f000 ff00 	bl	2efe6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e1e6:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e1e8:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2e1ea:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2e1ee:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e1f2:	f10d 020e 	add.w	r2, sp, #14
   2e1f6:	4631      	mov	r1, r6
   2e1f8:	4628      	mov	r0, r5
   2e1fa:	f7ff fae5 	bl	2d7c8 <range_is_valid>
   2e1fe:	b1d0      	cbz	r0, 2e236 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2e200:	2300      	movs	r3, #0
   2e202:	f88d 3010 	strb.w	r3, [sp, #16]
   2e206:	f8ad 8012 	strh.w	r8, [sp, #18]
   2e20a:	f88d 3014 	strb.w	r3, [sp, #20]
   2e20e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2e212:	f8ad 3016 	strh.w	r3, [sp, #22]
   2e216:	a905      	add	r1, sp, #20
   2e218:	a804      	add	r0, sp, #16
   2e21a:	f7fe fb74 	bl	2c906 <bt_uuid_cmp>
   2e21e:	b998      	cbnz	r0, 2e248 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2e220:	7c23      	ldrb	r3, [r4, #16]
   2e222:	9300      	str	r3, [sp, #0]
   2e224:	464b      	mov	r3, r9
   2e226:	4632      	mov	r2, r6
   2e228:	4629      	mov	r1, r5
   2e22a:	4638      	mov	r0, r7
   2e22c:	f7f1 f9f6 	bl	1f61c <att_find_type_rsp>
}
   2e230:	b007      	add	sp, #28
   2e232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2e236:	2301      	movs	r3, #1
   2e238:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2e23c:	2106      	movs	r1, #6
   2e23e:	4638      	mov	r0, r7
   2e240:	f7ff fee0 	bl	2e004 <send_err_rsp>
		return 0;
   2e244:	2000      	movs	r0, #0
   2e246:	e7f3      	b.n	2e230 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2e248:	230a      	movs	r3, #10
   2e24a:	462a      	mov	r2, r5
   2e24c:	2106      	movs	r1, #6
   2e24e:	4638      	mov	r0, r7
   2e250:	f7ff fed8 	bl	2e004 <send_err_rsp>
		return 0;
   2e254:	2000      	movs	r0, #0
   2e256:	e7eb      	b.n	2e230 <att_find_type_req+0x5e>

0002e258 <att_find_info_req>:
{
   2e258:	b570      	push	{r4, r5, r6, lr}
   2e25a:	b082      	sub	sp, #8
   2e25c:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2e25e:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e260:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e262:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e264:	f10d 0206 	add.w	r2, sp, #6
   2e268:	4631      	mov	r1, r6
   2e26a:	4628      	mov	r0, r5
   2e26c:	f7ff faac 	bl	2d7c8 <range_is_valid>
   2e270:	b130      	cbz	r0, 2e280 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2e272:	4632      	mov	r2, r6
   2e274:	4629      	mov	r1, r5
   2e276:	4620      	mov	r0, r4
   2e278:	f7f1 fa1a 	bl	1f6b0 <att_find_info_rsp>
}
   2e27c:	b002      	add	sp, #8
   2e27e:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2e280:	2301      	movs	r3, #1
   2e282:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2e286:	2104      	movs	r1, #4
   2e288:	4620      	mov	r0, r4
   2e28a:	f7ff febb 	bl	2e004 <send_err_rsp>
		return 0;
   2e28e:	2000      	movs	r0, #0
   2e290:	e7f4      	b.n	2e27c <att_find_info_req+0x24>

0002e292 <att_mtu_req>:
{
   2e292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e294:	4604      	mov	r4, r0
   2e296:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   2e298:	f850 3b34 	ldr.w	r3, [r0], #52
   2e29c:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e29e:	2103      	movs	r1, #3
   2e2a0:	f7ff fad4 	bl	2d84c <atomic_test_bit>
   2e2a4:	bb00      	cbnz	r0, 2e2e8 <att_mtu_req+0x56>
	req = (void *)buf->data;
   2e2a6:	68eb      	ldr	r3, [r5, #12]
	mtu_client = sys_le16_to_cpu(req->mtu);
   2e2a8:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2e2aa:	2e16      	cmp	r6, #22
   2e2ac:	d91e      	bls.n	2e2ec <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2e2ae:	2202      	movs	r2, #2
   2e2b0:	2103      	movs	r1, #3
   2e2b2:	4638      	mov	r0, r7
   2e2b4:	f7f0 ffa8 	bl	1f208 <bt_att_create_pdu>
	if (!pdu) {
   2e2b8:	4607      	mov	r7, r0
   2e2ba:	b1c8      	cbz	r0, 2e2f0 <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2e2bc:	2102      	movs	r1, #2
   2e2be:	300c      	adds	r0, #12
   2e2c0:	f000 fe69 	bl	2ef96 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e2c4:	2500      	movs	r5, #0
   2e2c6:	2317      	movs	r3, #23
   2e2c8:	7003      	strb	r3, [r0, #0]
   2e2ca:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2e2cc:	4639      	mov	r1, r7
   2e2ce:	4620      	mov	r0, r4
   2e2d0:	f7ff fc8f 	bl	2dbf2 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e2d4:	2e17      	cmp	r6, #23
   2e2d6:	bf28      	it	cs
   2e2d8:	2617      	movcs	r6, #23
   2e2da:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2e2dc:	8566      	strh	r6, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2e2de:	4620      	mov	r0, r4
   2e2e0:	f7ff fdf1 	bl	2dec6 <att_chan_mtu_updated>
	return 0;
   2e2e4:	4628      	mov	r0, r5
}
   2e2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2e2e8:	2006      	movs	r0, #6
   2e2ea:	e7fc      	b.n	2e2e6 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   2e2ec:	2004      	movs	r0, #4
   2e2ee:	e7fa      	b.n	2e2e6 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   2e2f0:	200e      	movs	r0, #14
   2e2f2:	e7f8      	b.n	2e2e6 <att_mtu_req+0x54>

0002e2f4 <att_confirm>:
{
   2e2f4:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2e2f6:	2300      	movs	r3, #0
   2e2f8:	8a0a      	ldrh	r2, [r1, #16]
   2e2fa:	68c9      	ldr	r1, [r1, #12]
   2e2fc:	f7f1 fa68 	bl	1f7d0 <att_handle_rsp>
}
   2e300:	bd08      	pop	{r3, pc}

0002e302 <att_chan_detach>:
{
   2e302:	b538      	push	{r3, r4, r5, lr}
   2e304:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2e306:	4601      	mov	r1, r0
   2e308:	f851 0b88 	ldr.w	r0, [r1], #136
   2e30c:	3024      	adds	r0, #36	; 0x24
   2e30e:	f7ff fa40 	bl	2d792 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2e312:	e005      	b.n	2e320 <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e314:	69a0      	ldr	r0, [r4, #24]
   2e316:	f7f0 f9f5 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(buf);
   2e31a:	4620      	mov	r0, r4
   2e31c:	f000 fdf0 	bl	2ef00 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2e320:	2200      	movs	r2, #0
   2e322:	2300      	movs	r3, #0
   2e324:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2e328:	f000 fdb4 	bl	2ee94 <net_buf_get>
   2e32c:	4604      	mov	r4, r0
   2e32e:	2800      	cmp	r0, #0
   2e330:	d1f0      	bne.n	2e314 <att_chan_detach+0x12>
	if (chan->req) {
   2e332:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2e334:	b12b      	cbz	r3, 2e342 <att_chan_detach+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2e336:	230e      	movs	r3, #14
   2e338:	2200      	movs	r2, #0
   2e33a:	4611      	mov	r1, r2
   2e33c:	4628      	mov	r0, r5
   2e33e:	f7f1 fa47 	bl	1f7d0 <att_handle_rsp>
	chan->att = NULL;
   2e342:	2300      	movs	r3, #0
   2e344:	f845 3b34 	str.w	r3, [r5], #52
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e348:	f3bf 8f5b 	dmb	ish
   2e34c:	e855 3f00 	ldrex	r3, [r5]
   2e350:	f023 0304 	bic.w	r3, r3, #4
   2e354:	e845 3200 	strex	r2, r3, [r5]
   2e358:	2a00      	cmp	r2, #0
   2e35a:	d1f7      	bne.n	2e34c <att_chan_detach+0x4a>
   2e35c:	f3bf 8f5b 	dmb	ish
}
   2e360:	bd38      	pop	{r3, r4, r5, pc}

0002e362 <bt_att_disconnected>:
{
   2e362:	b538      	push	{r3, r4, r5, lr}
   2e364:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2e366:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   2e36a:	b125      	cbz	r5, 2e376 <bt_att_disconnected+0x14>
   2e36c:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   2e36e:	f7ff ffc8 	bl	2e302 <att_chan_detach>
	return list->head;
   2e372:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   2e374:	b103      	cbz	r3, 2e378 <bt_att_disconnected+0x16>
}
   2e376:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2e378:	4628      	mov	r0, r5
   2e37a:	f7f1 fa81 	bl	1f880 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   2e37e:	6820      	ldr	r0, [r4, #0]
   2e380:	f7f2 fc26 	bl	20bd0 <bt_gatt_disconnected>
   2e384:	e7f7      	b.n	2e376 <bt_att_disconnected+0x14>

0002e386 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2e386:	b538      	push	{r3, r4, r5, lr}
   2e388:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2e38a:	f7f0 f825 	bl	1e3d8 <att_get>
	if (!att) {
   2e38e:	b148      	cbz	r0, 2e3a4 <bt_att_send+0x1e>
   2e390:	4605      	mov	r5, r0
		tx_meta_data_free(bt_att_tx_meta_data(buf));
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	net_buf_put(&att->tx_queue, buf);
   2e392:	4621      	mov	r1, r4
   2e394:	300c      	adds	r0, #12
   2e396:	f000 fdaf 	bl	2eef8 <net_buf_put>
	att_send_process(att);
   2e39a:	4628      	mov	r0, r5
   2e39c:	f7ff fbbf 	bl	2db1e <att_send_process>

	return 0;
   2e3a0:	2000      	movs	r0, #0
}
   2e3a2:	bd38      	pop	{r3, r4, r5, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e3a4:	69a0      	ldr	r0, [r4, #24]
   2e3a6:	f7f0 f9ad 	bl	1e704 <tx_meta_data_free>
		net_buf_unref(buf);
   2e3aa:	4620      	mov	r0, r4
   2e3ac:	f000 fda8 	bl	2ef00 <net_buf_unref>
		return -ENOTCONN;
   2e3b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e3b4:	e7f5      	b.n	2e3a2 <bt_att_send+0x1c>

0002e3b6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2e3b6:	b510      	push	{r4, lr}
   2e3b8:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2e3ba:	f7f0 f80d 	bl	1e3d8 <att_get>
	if (!att) {
   2e3be:	b170      	cbz	r0, 2e3de <bt_att_req_send+0x28>
   2e3c0:	4603      	mov	r3, r0
	parent->next = child;
   2e3c2:	2200      	movs	r2, #0
   2e3c4:	6022      	str	r2, [r4, #0]
	return list->tail;
   2e3c6:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2e3c8:	b132      	cbz	r2, 2e3d8 <bt_att_req_send+0x22>
	parent->next = child;
   2e3ca:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2e3cc:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2e3ce:	4618      	mov	r0, r3
   2e3d0:	f7ff fac8 	bl	2d964 <att_req_send_process>

	return 0;
   2e3d4:	2000      	movs	r0, #0
}
   2e3d6:	bd10      	pop	{r4, pc}
   2e3d8:	6084      	str	r4, [r0, #8]
	list->head = node;
   2e3da:	6044      	str	r4, [r0, #4]
}
   2e3dc:	e7f7      	b.n	2e3ce <bt_att_req_send+0x18>
		return -ENOTCONN;
   2e3de:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e3e2:	e7f8      	b.n	2e3d6 <bt_att_req_send+0x20>

0002e3e4 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2e3e4:	2001      	movs	r0, #1
   2e3e6:	4770      	bx	lr

0002e3e8 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2e3e8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2e3ea:	f7ef fff5 	bl	1e3d8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2e3ee:	b1b8      	cbz	r0, 2e420 <bt_att_clear_out_of_sync_sent+0x38>
	return list->head;
   2e3f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2e3f2:	b103      	cbz	r3, 2e3f6 <bt_att_clear_out_of_sync_sent+0xe>
   2e3f4:	3b88      	subs	r3, #136	; 0x88
   2e3f6:	b19b      	cbz	r3, 2e420 <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2e3f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
   2e3fc:	f3bf 8f5b 	dmb	ish
   2e400:	e852 0f00 	ldrex	r0, [r2]
   2e404:	f020 0020 	bic.w	r0, r0, #32
   2e408:	e842 0100 	strex	r1, r0, [r2]
   2e40c:	2900      	cmp	r1, #0
   2e40e:	d1f7      	bne.n	2e400 <bt_att_clear_out_of_sync_sent+0x18>
   2e410:	f3bf 8f5b 	dmb	ish
	return node->next;
   2e414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2e418:	2b00      	cmp	r3, #0
   2e41a:	d0ec      	beq.n	2e3f6 <bt_att_clear_out_of_sync_sent+0xe>
   2e41c:	3b88      	subs	r3, #136	; 0x88
   2e41e:	e7ea      	b.n	2e3f6 <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   2e420:	bd08      	pop	{r3, pc}

0002e422 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2e422:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2e424:	2104      	movs	r1, #4
   2e426:	f7ff f961 	bl	2d6ec <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2e42a:	b120      	cbz	r0, 2e436 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2e42c:	2105      	movs	r1, #5
   2e42e:	3030      	adds	r0, #48	; 0x30
   2e430:	f7ff fa0c 	bl	2d84c <atomic_test_bit>
}
   2e434:	bd08      	pop	{r3, pc}
		return false;
   2e436:	2000      	movs	r0, #0
   2e438:	e7fc      	b.n	2e434 <bt_att_out_of_sync_sent_on_fixed+0x12>

0002e43a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2e43a:	6980      	ldr	r0, [r0, #24]

	data->func = func;
   2e43c:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2e43e:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   2e440:	2201      	movs	r2, #1
   2e442:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2e444:	7403      	strb	r3, [r0, #16]
}
   2e446:	4770      	bx	lr

0002e448 <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2e448:	2300      	movs	r3, #0
   2e44a:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2e44e:	d210      	bcs.n	2e472 <sys_mem_swap+0x2a>
{
   2e450:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   2e452:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2e456:	1aca      	subs	r2, r1, r3
   2e458:	3a01      	subs	r2, #1
   2e45a:	f810 e002 	ldrb.w	lr, [r0, r2]
   2e45e:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2e462:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   2e466:	3301      	adds	r3, #1
   2e468:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2e46c:	d3f1      	bcc.n	2e452 <sys_mem_swap+0xa>
	}
}
   2e46e:	f85d fb04 	ldr.w	pc, [sp], #4
   2e472:	4770      	bx	lr

0002e474 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   2e474:	f8b0 c000 	ldrh.w	ip, [r0]
   2e478:	4562      	cmp	r2, ip
   2e47a:	d312      	bcc.n	2e4a2 <update_range+0x2e>
{
   2e47c:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   2e47e:	f8b1 e000 	ldrh.w	lr, [r1]
   2e482:	4573      	cmp	r3, lr
   2e484:	d908      	bls.n	2e498 <update_range+0x24>
	if (*start > new_start) {
   2e486:	4562      	cmp	r2, ip
   2e488:	d200      	bcs.n	2e48c <update_range+0x18>
		*start = new_start;
   2e48a:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2e48c:	880a      	ldrh	r2, [r1, #0]
   2e48e:	4293      	cmp	r3, r2
   2e490:	d904      	bls.n	2e49c <update_range+0x28>
		*end = new_end;
   2e492:	800b      	strh	r3, [r1, #0]
	return true;
   2e494:	2001      	movs	r0, #1
   2e496:	e002      	b.n	2e49e <update_range+0x2a>
		return false;
   2e498:	2000      	movs	r0, #0
   2e49a:	e000      	b.n	2e49e <update_range+0x2a>
	return true;
   2e49c:	2001      	movs	r0, #1
}
   2e49e:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   2e4a2:	4562      	cmp	r2, ip
   2e4a4:	d200      	bcs.n	2e4a8 <update_range+0x34>
		*start = new_start;
   2e4a6:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2e4a8:	880a      	ldrh	r2, [r1, #0]
   2e4aa:	4293      	cmp	r3, r2
   2e4ac:	d902      	bls.n	2e4b4 <update_range+0x40>
		*end = new_end;
   2e4ae:	800b      	strh	r3, [r1, #0]
	return true;
   2e4b0:	2001      	movs	r0, #1
   2e4b2:	4770      	bx	lr
   2e4b4:	2001      	movs	r0, #1
}
   2e4b6:	4770      	bx	lr

0002e4b8 <cf_set_value>:
{
   2e4b8:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2e4ba:	2300      	movs	r3, #0
   2e4bc:	e001      	b.n	2e4c2 <cf_set_value+0xa>
   2e4be:	3301      	adds	r3, #1
   2e4c0:	b29b      	uxth	r3, r3
   2e4c2:	2b02      	cmp	r3, #2
   2e4c4:	d819      	bhi.n	2e4fa <cf_set_value+0x42>
   2e4c6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   2e4ca:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2e4ce:	d912      	bls.n	2e4f6 <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2e4d0:	eb00 040c 	add.w	r4, r0, ip
   2e4d4:	7a24      	ldrb	r4, [r4, #8]
   2e4d6:	f003 0e07 	and.w	lr, r3, #7
   2e4da:	fa24 f40e 	lsr.w	r4, r4, lr
   2e4de:	f014 0f01 	tst.w	r4, #1
   2e4e2:	d0ec      	beq.n	2e4be <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2e4e4:	f811 400c 	ldrb.w	r4, [r1, ip]
   2e4e8:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2e4ec:	f014 0f01 	tst.w	r4, #1
   2e4f0:	d1e5      	bne.n	2e4be <cf_set_value+0x6>
			return false;
   2e4f2:	2000      	movs	r0, #0
   2e4f4:	e016      	b.n	2e524 <cf_set_value+0x6c>
   2e4f6:	2300      	movs	r3, #0
   2e4f8:	e000      	b.n	2e4fc <cf_set_value+0x44>
   2e4fa:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2e4fc:	4293      	cmp	r3, r2
   2e4fe:	d210      	bcs.n	2e522 <cf_set_value+0x6a>
   2e500:	b96b      	cbnz	r3, 2e51e <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2e502:	18c4      	adds	r4, r0, r3
   2e504:	f894 c008 	ldrb.w	ip, [r4, #8]
   2e508:	f811 e003 	ldrb.w	lr, [r1, r3]
   2e50c:	f00e 0e07 	and.w	lr, lr, #7
   2e510:	ea4c 0c0e 	orr.w	ip, ip, lr
   2e514:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2e518:	3301      	adds	r3, #1
   2e51a:	b29b      	uxth	r3, r3
   2e51c:	e7ee      	b.n	2e4fc <cf_set_value+0x44>
	return true;
   2e51e:	2001      	movs	r0, #1
   2e520:	e000      	b.n	2e524 <cf_set_value+0x6c>
   2e522:	2001      	movs	r0, #1
}
   2e524:	bd10      	pop	{r4, pc}

0002e526 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2e526:	6010      	str	r0, [r2, #0]
}
   2e528:	2000      	movs	r0, #0
   2e52a:	4770      	bx	lr

0002e52c <gatt_ccc_changed>:
{
   2e52c:	b508      	push	{r3, lr}
   2e52e:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2e530:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e532:	460b      	mov	r3, r1
   2e534:	b13b      	cbz	r3, 2e546 <gatt_ccc_changed+0x1a>
	if (value != ccc->value) {
   2e536:	8953      	ldrh	r3, [r2, #10]
   2e538:	4299      	cmp	r1, r3
   2e53a:	d003      	beq.n	2e544 <gatt_ccc_changed+0x18>
		ccc->value = value;
   2e53c:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2e53e:	68d3      	ldr	r3, [r2, #12]
   2e540:	b103      	cbz	r3, 2e544 <gatt_ccc_changed+0x18>
			ccc->cfg_changed(attr, value);
   2e542:	4798      	blx	r3
}
   2e544:	bd08      	pop	{r3, pc}
		if (ccc->cfg[i].value > value) {
   2e546:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2e54a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   2e54e:	f8bc c008 	ldrh.w	ip, [ip, #8]
   2e552:	458c      	cmp	ip, r1
   2e554:	d900      	bls.n	2e558 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2e556:	4661      	mov	r1, ip
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e558:	3301      	adds	r3, #1
   2e55a:	e7eb      	b.n	2e534 <gatt_ccc_changed+0x8>

0002e55c <gatt_indicate_rsp>:
{
   2e55c:	b510      	push	{r4, lr}
   2e55e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2e560:	68a3      	ldr	r3, [r4, #8]
   2e562:	b113      	cbz	r3, 2e56a <gatt_indicate_rsp+0xe>
   2e564:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2e566:	4621      	mov	r1, r4
   2e568:	4798      	blx	r3
	params->_ref--;
   2e56a:	7da3      	ldrb	r3, [r4, #22]
   2e56c:	3b01      	subs	r3, #1
   2e56e:	b2db      	uxtb	r3, r3
   2e570:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e572:	68e2      	ldr	r2, [r4, #12]
   2e574:	b112      	cbz	r2, 2e57c <gatt_indicate_rsp+0x20>
   2e576:	b90b      	cbnz	r3, 2e57c <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2e578:	4620      	mov	r0, r4
   2e57a:	4790      	blx	r2
}
   2e57c:	bd10      	pop	{r4, pc}

0002e57e <match_uuid>:
	data->attr = attr;
   2e57e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2e580:	8091      	strh	r1, [r2, #4]
}
   2e582:	2000      	movs	r0, #0
   2e584:	4770      	bx	lr

0002e586 <gen_hash_m>:
{
   2e586:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e588:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e58a:	6806      	ldr	r6, [r0, #0]
   2e58c:	7835      	ldrb	r5, [r6, #0]
   2e58e:	2d00      	cmp	r5, #0
   2e590:	d160      	bne.n	2e654 <gen_hash_m+0xce>
   2e592:	4607      	mov	r7, r0
   2e594:	4614      	mov	r4, r2
	switch (u16->val) {
   2e596:	8873      	ldrh	r3, [r6, #2]
   2e598:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2e59c:	d019      	beq.n	2e5d2 <gen_hash_m+0x4c>
   2e59e:	d913      	bls.n	2e5c8 <gen_hash_m+0x42>
   2e5a0:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2e5a4:	33ff      	adds	r3, #255	; 0xff
   2e5a6:	b29b      	uxth	r3, r3
   2e5a8:	2b04      	cmp	r3, #4
   2e5aa:	d859      	bhi.n	2e660 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   2e5ac:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e5b0:	2202      	movs	r2, #2
   2e5b2:	f10d 010a 	add.w	r1, sp, #10
   2e5b6:	4620      	mov	r0, r4
   2e5b8:	f7fd ff80 	bl	2c4bc <tc_cmac_update>
   2e5bc:	2800      	cmp	r0, #0
   2e5be:	d139      	bne.n	2e634 <gen_hash_m+0xae>
			state->err = -EINVAL;
   2e5c0:	f06f 0315 	mvn.w	r3, #21
   2e5c4:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e5c6:	e046      	b.n	2e656 <gen_hash_m+0xd0>
	switch (u16->val) {
   2e5c8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2e5cc:	b29b      	uxth	r3, r3
   2e5ce:	2b03      	cmp	r3, #3
   2e5d0:	d844      	bhi.n	2e65c <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   2e5d2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e5d6:	2202      	movs	r2, #2
   2e5d8:	f10d 010a 	add.w	r1, sp, #10
   2e5dc:	4620      	mov	r0, r4
   2e5de:	f7fd ff6d 	bl	2c4bc <tc_cmac_update>
   2e5e2:	b918      	cbnz	r0, 2e5ec <gen_hash_m+0x66>
			state->err = -EINVAL;
   2e5e4:	f06f 0315 	mvn.w	r3, #21
   2e5e8:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e5ea:	e034      	b.n	2e656 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2e5ec:	8873      	ldrh	r3, [r6, #2]
   2e5ee:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e5f2:	2202      	movs	r2, #2
   2e5f4:	f10d 010a 	add.w	r1, sp, #10
   2e5f8:	4620      	mov	r0, r4
   2e5fa:	f7fd ff5f 	bl	2c4bc <tc_cmac_update>
   2e5fe:	b178      	cbz	r0, 2e620 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2e600:	687e      	ldr	r6, [r7, #4]
   2e602:	2000      	movs	r0, #0
   2e604:	9000      	str	r0, [sp, #0]
   2e606:	2313      	movs	r3, #19
   2e608:	aa03      	add	r2, sp, #12
   2e60a:	4639      	mov	r1, r7
   2e60c:	47b0      	blx	r6
		if (len < 0) {
   2e60e:	1e02      	subs	r2, r0, #0
   2e610:	db0a      	blt.n	2e628 <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   2e612:	a903      	add	r1, sp, #12
   2e614:	4620      	mov	r0, r4
   2e616:	f7fd ff51 	bl	2c4bc <tc_cmac_update>
   2e61a:	b138      	cbz	r0, 2e62c <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2e61c:	2501      	movs	r5, #1
   2e61e:	e01a      	b.n	2e656 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2e620:	f06f 0315 	mvn.w	r3, #21
   2e624:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e626:	e016      	b.n	2e656 <gen_hash_m+0xd0>
			state->err = len;
   2e628:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e62a:	e014      	b.n	2e656 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2e62c:	f06f 0315 	mvn.w	r3, #21
   2e630:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e632:	e010      	b.n	2e656 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2e634:	8873      	ldrh	r3, [r6, #2]
   2e636:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e63a:	2202      	movs	r2, #2
   2e63c:	f10d 010a 	add.w	r1, sp, #10
   2e640:	4620      	mov	r0, r4
   2e642:	f7fd ff3b 	bl	2c4bc <tc_cmac_update>
   2e646:	b108      	cbz	r0, 2e64c <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   2e648:	2501      	movs	r5, #1
   2e64a:	e004      	b.n	2e656 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2e64c:	f06f 0315 	mvn.w	r3, #21
   2e650:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e652:	e000      	b.n	2e656 <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   2e654:	2501      	movs	r5, #1
}
   2e656:	4628      	mov	r0, r5
   2e658:	b009      	add	sp, #36	; 0x24
   2e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2e65c:	2501      	movs	r5, #1
   2e65e:	e7fa      	b.n	2e656 <gen_hash_m+0xd0>
   2e660:	2501      	movs	r5, #1
   2e662:	e7f8      	b.n	2e656 <gen_hash_m+0xd0>

0002e664 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e664:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e666:	f3bf 8f5b 	dmb	ish
   2e66a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2e66e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e672:	f001 011f 	and.w	r1, r1, #31
   2e676:	4108      	asrs	r0, r1
}
   2e678:	f000 0001 	and.w	r0, r0, #1
   2e67c:	4770      	bx	lr

0002e67e <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e67e:	f001 021f 	and.w	r2, r1, #31
   2e682:	2301      	movs	r3, #1
   2e684:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e686:	0949      	lsrs	r1, r1, #5
   2e688:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e68c:	f3bf 8f5b 	dmb	ish
   2e690:	e850 2f00 	ldrex	r2, [r0]
   2e694:	ea42 0103 	orr.w	r1, r2, r3
   2e698:	e840 1c00 	strex	ip, r1, [r0]
   2e69c:	f1bc 0f00 	cmp.w	ip, #0
   2e6a0:	d1f6      	bne.n	2e690 <atomic_test_and_set_bit+0x12>
   2e6a2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2e6a6:	4213      	tst	r3, r2
}
   2e6a8:	bf14      	ite	ne
   2e6aa:	2001      	movne	r0, #1
   2e6ac:	2000      	moveq	r0, #0
   2e6ae:	4770      	bx	lr

0002e6b0 <atomic_test_and_clear_bit>:
{
   2e6b0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e6b2:	f001 021f 	and.w	r2, r1, #31
   2e6b6:	2301      	movs	r3, #1
   2e6b8:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e6ba:	0949      	lsrs	r1, r1, #5
   2e6bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2e6c0:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e6c2:	f3bf 8f5b 	dmb	ish
   2e6c6:	e850 2f00 	ldrex	r2, [r0]
   2e6ca:	ea02 0c01 	and.w	ip, r2, r1
   2e6ce:	e840 ce00 	strex	lr, ip, [r0]
   2e6d2:	f1be 0f00 	cmp.w	lr, #0
   2e6d6:	d1f6      	bne.n	2e6c6 <atomic_test_and_clear_bit+0x16>
   2e6d8:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2e6dc:	4213      	tst	r3, r2
}
   2e6de:	bf14      	ite	ne
   2e6e0:	2001      	movne	r0, #1
   2e6e2:	2000      	moveq	r0, #0
   2e6e4:	f85d fb04 	ldr.w	pc, [sp], #4

0002e6e8 <set_change_aware_no_store>:
{
   2e6e8:	b508      	push	{r3, lr}
	if (aware) {
   2e6ea:	b139      	cbz	r1, 2e6fc <set_change_aware_no_store+0x14>
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2e6ec:	2100      	movs	r1, #0
   2e6ee:	300c      	adds	r0, #12
   2e6f0:	f7ff ffc5 	bl	2e67e <atomic_test_and_set_bit>
   2e6f4:	f080 0001 	eor.w	r0, r0, #1
   2e6f8:	b2c0      	uxtb	r0, r0
}
   2e6fa:	bd08      	pop	{r3, pc}
		changed = atomic_test_and_clear_bit(cfg->flags, CF_CHANGE_AWARE);
   2e6fc:	2100      	movs	r1, #0
   2e6fe:	300c      	adds	r0, #12
   2e700:	f7ff ffd6 	bl	2e6b0 <atomic_test_and_clear_bit>
   2e704:	e7f9      	b.n	2e6fa <set_change_aware_no_store+0x12>

0002e706 <set_change_aware>:
{
   2e706:	b508      	push	{r3, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   2e708:	f7ff ffee 	bl	2e6e8 <set_change_aware_no_store>
}
   2e70c:	bd08      	pop	{r3, pc}

0002e70e <clear_sc_cfg>:
{
   2e70e:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   2e710:	220c      	movs	r2, #12
   2e712:	2100      	movs	r1, #0
   2e714:	f7fe f899 	bl	2c84a <memset>
}
   2e718:	bd08      	pop	{r3, pc}

0002e71a <bt_gatt_clear_sc>:
{
   2e71a:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2e71c:	f7f1 f93c 	bl	1f998 <find_sc_cfg>
	if (!cfg) {
   2e720:	b108      	cbz	r0, 2e726 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2e722:	f7ff fff4 	bl	2e70e <clear_sc_cfg>
}
   2e726:	2000      	movs	r0, #0
   2e728:	bd08      	pop	{r3, pc}

0002e72a <sc_ccc_cfg_write>:
{
   2e72a:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2e72c:	2a02      	cmp	r2, #2
   2e72e:	d003      	beq.n	2e738 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2e730:	f7f1 fae6 	bl	1fd00 <sc_clear>
}
   2e734:	2002      	movs	r0, #2
   2e736:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2e738:	2300      	movs	r3, #0
   2e73a:	461a      	mov	r2, r3
   2e73c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2e740:	7a00      	ldrb	r0, [r0, #8]
   2e742:	f7f1 f999 	bl	1fa78 <sc_save>
   2e746:	e7f5      	b.n	2e734 <sc_ccc_cfg_write+0xa>

0002e748 <sc_reset>:
{
   2e748:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   2e74a:	2204      	movs	r2, #4
   2e74c:	2100      	movs	r1, #0
   2e74e:	3008      	adds	r0, #8
   2e750:	f7fe f87b 	bl	2c84a <memset>
}
   2e754:	bd08      	pop	{r3, pc}

0002e756 <sc_restore_rsp>:
{
   2e756:	b538      	push	{r3, r4, r5, lr}
   2e758:	4605      	mov	r5, r0
   2e75a:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   2e75c:	f7ff fe42 	bl	2e3e4 <bt_att_fixed_chan_only>
   2e760:	b908      	cbnz	r0, 2e766 <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2e762:	b16c      	cbz	r4, 2e780 <sc_restore_rsp+0x2a>
}
   2e764:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2e766:	4628      	mov	r0, r5
   2e768:	f7f1 f8f0 	bl	1f94c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2e76c:	2800      	cmp	r0, #0
   2e76e:	d0f8      	beq.n	2e762 <sc_restore_rsp+0xc>
   2e770:	7a02      	ldrb	r2, [r0, #8]
   2e772:	f012 0f01 	tst.w	r2, #1
   2e776:	d0f4      	beq.n	2e762 <sc_restore_rsp+0xc>
			set_change_aware(cfg, true);
   2e778:	2101      	movs	r1, #1
   2e77a:	f7ff ffc4 	bl	2e706 <set_change_aware>
   2e77e:	e7f0      	b.n	2e762 <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e780:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2e784:	7a28      	ldrb	r0, [r5, #8]
   2e786:	f7f1 f907 	bl	1f998 <find_sc_cfg>
		if (sc_cfg) {
   2e78a:	2800      	cmp	r0, #0
   2e78c:	d0ea      	beq.n	2e764 <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2e78e:	f7ff ffdb 	bl	2e748 <sc_reset>
}
   2e792:	e7e7      	b.n	2e764 <sc_restore_rsp+0xe>

0002e794 <gatt_foreach_iter>:
	if (handle > end_handle) {
   2e794:	4299      	cmp	r1, r3
   2e796:	d822      	bhi.n	2e7de <gatt_foreach_iter+0x4a>
{
   2e798:	b538      	push	{r3, r4, r5, lr}
   2e79a:	4605      	mov	r5, r0
   2e79c:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2e79e:	4291      	cmp	r1, r2
   2e7a0:	d31f      	bcc.n	2e7e2 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e7a2:	9b04      	ldr	r3, [sp, #16]
   2e7a4:	b123      	cbz	r3, 2e7b0 <gatt_foreach_iter+0x1c>
   2e7a6:	6801      	ldr	r1, [r0, #0]
   2e7a8:	4618      	mov	r0, r3
   2e7aa:	f7fe f8ac 	bl	2c906 <bt_uuid_cmp>
   2e7ae:	b9d0      	cbnz	r0, 2e7e6 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2e7b0:	9b05      	ldr	r3, [sp, #20]
   2e7b2:	b12b      	cbz	r3, 2e7c0 <gatt_foreach_iter+0x2c>
   2e7b4:	68eb      	ldr	r3, [r5, #12]
   2e7b6:	9a05      	ldr	r2, [sp, #20]
   2e7b8:	4293      	cmp	r3, r2
   2e7ba:	d001      	beq.n	2e7c0 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2e7bc:	2001      	movs	r0, #1
   2e7be:	e011      	b.n	2e7e4 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2e7c0:	9b06      	ldr	r3, [sp, #24]
   2e7c2:	881b      	ldrh	r3, [r3, #0]
   2e7c4:	3b01      	subs	r3, #1
   2e7c6:	9a06      	ldr	r2, [sp, #24]
   2e7c8:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2e7ca:	9a08      	ldr	r2, [sp, #32]
   2e7cc:	4621      	mov	r1, r4
   2e7ce:	4628      	mov	r0, r5
   2e7d0:	9b07      	ldr	r3, [sp, #28]
   2e7d2:	4798      	blx	r3
	if (!*num_matches) {
   2e7d4:	9b06      	ldr	r3, [sp, #24]
   2e7d6:	881b      	ldrh	r3, [r3, #0]
   2e7d8:	b923      	cbnz	r3, 2e7e4 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2e7da:	2000      	movs	r0, #0
   2e7dc:	e002      	b.n	2e7e4 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2e7de:	2000      	movs	r0, #0
}
   2e7e0:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2e7e2:	2001      	movs	r0, #1
}
   2e7e4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2e7e6:	2001      	movs	r0, #1
   2e7e8:	e7fc      	b.n	2e7e4 <gatt_foreach_iter+0x50>

0002e7ea <gatt_req_alloc>:
{
   2e7ea:	b538      	push	{r3, r4, r5, lr}
   2e7ec:	4605      	mov	r5, r0
   2e7ee:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e7f0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2e7f4:	2100      	movs	r1, #0
   2e7f6:	f7f0 ffaf 	bl	1f758 <bt_att_req_alloc>
	if (!req) {
   2e7fa:	4603      	mov	r3, r0
   2e7fc:	b108      	cbz	r0, 2e802 <gatt_req_alloc+0x18>
	req->func = func;
   2e7fe:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2e800:	60c4      	str	r4, [r0, #12]
}
   2e802:	4618      	mov	r0, r3
   2e804:	bd38      	pop	{r3, r4, r5, pc}

0002e806 <remove_cf_cfg>:
{
   2e806:	b570      	push	{r4, r5, r6, lr}
   2e808:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2e80a:	f7f1 f89f 	bl	1f94c <find_cf_cfg>
	if (!cfg) {
   2e80e:	b150      	cbz	r0, 2e826 <remove_cf_cfg+0x20>
   2e810:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e812:	f104 0588 	add.w	r5, r4, #136	; 0x88
   2e816:	4629      	mov	r1, r5
   2e818:	7a20      	ldrb	r0, [r4, #8]
   2e81a:	f7fe fa9d 	bl	2cd58 <bt_addr_le_is_bonded>
   2e81e:	b918      	cbnz	r0, 2e828 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2e820:	4630      	mov	r0, r6
   2e822:	f7f1 fb5d 	bl	1fee0 <clear_cf_cfg>
}
   2e826:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(dst, src, sizeof(*dst));
   2e828:	2207      	movs	r2, #7
   2e82a:	4629      	mov	r1, r5
   2e82c:	1c70      	adds	r0, r6, #1
   2e82e:	f7fd ffdd 	bl	2c7ec <memcpy>
}
   2e832:	e7f8      	b.n	2e826 <remove_cf_cfg+0x20>

0002e834 <bt_gatt_attr_read>:
{
   2e834:	b510      	push	{r4, lr}
   2e836:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2e83a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2e83e:	42a1      	cmp	r1, r4
   2e840:	d80c      	bhi.n	2e85c <bt_gatt_attr_read+0x28>
   2e842:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2e844:	1a64      	subs	r4, r4, r1
   2e846:	42a3      	cmp	r3, r4
   2e848:	bfa8      	it	ge
   2e84a:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2e84c:	b29c      	uxth	r4, r3
   2e84e:	4622      	mov	r2, r4
   2e850:	9b03      	ldr	r3, [sp, #12]
   2e852:	4419      	add	r1, r3
   2e854:	f7fd ffca 	bl	2c7ec <memcpy>
}
   2e858:	4620      	mov	r0, r4
   2e85a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e85c:	f06f 0406 	mvn.w	r4, #6
   2e860:	e7fa      	b.n	2e858 <bt_gatt_attr_read+0x24>

0002e862 <read_ppcp>:
{
   2e862:	b510      	push	{r4, lr}
   2e864:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2e866:	2418      	movs	r4, #24
   2e868:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2e86c:	2428      	movs	r4, #40	; 0x28
   2e86e:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2e872:	2400      	movs	r4, #0
   2e874:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2e878:	242a      	movs	r4, #42	; 0x2a
   2e87a:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2e87e:	2408      	movs	r4, #8
   2e880:	9402      	str	r4, [sp, #8]
   2e882:	ac04      	add	r4, sp, #16
   2e884:	9401      	str	r4, [sp, #4]
   2e886:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2e88a:	9400      	str	r4, [sp, #0]
   2e88c:	f7ff ffd2 	bl	2e834 <bt_gatt_attr_read>
}
   2e890:	b006      	add	sp, #24
   2e892:	bd10      	pop	{r4, pc}

0002e894 <read_appearance>:
{
   2e894:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e896:	b087      	sub	sp, #28
   2e898:	4604      	mov	r4, r0
   2e89a:	460d      	mov	r5, r1
   2e89c:	4616      	mov	r6, r2
   2e89e:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2e8a0:	f7fe fa58 	bl	2cd54 <bt_get_appearance>
   2e8a4:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2e8a8:	2302      	movs	r3, #2
   2e8aa:	9302      	str	r3, [sp, #8]
   2e8ac:	f10d 0316 	add.w	r3, sp, #22
   2e8b0:	9301      	str	r3, [sp, #4]
   2e8b2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2e8b6:	9300      	str	r3, [sp, #0]
   2e8b8:	463b      	mov	r3, r7
   2e8ba:	4632      	mov	r2, r6
   2e8bc:	4629      	mov	r1, r5
   2e8be:	4620      	mov	r0, r4
   2e8c0:	f7ff ffb8 	bl	2e834 <bt_gatt_attr_read>
}
   2e8c4:	b007      	add	sp, #28
   2e8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e8c8 <read_name>:
{
   2e8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e8cc:	b084      	sub	sp, #16
   2e8ce:	4604      	mov	r4, r0
   2e8d0:	460d      	mov	r5, r1
   2e8d2:	4616      	mov	r6, r2
   2e8d4:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2e8d6:	f7ed f9bf 	bl	1bc58 <bt_get_name>
   2e8da:	4680      	mov	r8, r0
				 strlen(name));
   2e8dc:	f7fd ff4e 	bl	2c77c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2e8e0:	b280      	uxth	r0, r0
   2e8e2:	9002      	str	r0, [sp, #8]
   2e8e4:	f8cd 8004 	str.w	r8, [sp, #4]
   2e8e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2e8ec:	9300      	str	r3, [sp, #0]
   2e8ee:	463b      	mov	r3, r7
   2e8f0:	4632      	mov	r2, r6
   2e8f2:	4629      	mov	r1, r5
   2e8f4:	4620      	mov	r0, r4
   2e8f6:	f7ff ff9d 	bl	2e834 <bt_gatt_attr_read>
}
   2e8fa:	b004      	add	sp, #16
   2e8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e900 <cf_read>:
{
   2e900:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e902:	b087      	sub	sp, #28
   2e904:	4604      	mov	r4, r0
   2e906:	460d      	mov	r5, r1
   2e908:	4616      	mov	r6, r2
   2e90a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2e90c:	2300      	movs	r3, #0
   2e90e:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2e912:	f7f1 f81b 	bl	1f94c <find_cf_cfg>
	if (cfg) {
   2e916:	b128      	cbz	r0, 2e924 <cf_read+0x24>
   2e918:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   2e91a:	2201      	movs	r2, #1
   2e91c:	3108      	adds	r1, #8
   2e91e:	a805      	add	r0, sp, #20
   2e920:	f7fd ff64 	bl	2c7ec <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2e924:	2301      	movs	r3, #1
   2e926:	9302      	str	r3, [sp, #8]
   2e928:	ab05      	add	r3, sp, #20
   2e92a:	9301      	str	r3, [sp, #4]
   2e92c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2e930:	9300      	str	r3, [sp, #0]
   2e932:	463b      	mov	r3, r7
   2e934:	4632      	mov	r2, r6
   2e936:	4629      	mov	r1, r5
   2e938:	4620      	mov	r0, r4
   2e93a:	f7ff ff7b 	bl	2e834 <bt_gatt_attr_read>
}
   2e93e:	b007      	add	sp, #28
   2e940:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e942 <bt_gatt_attr_read_service>:
{
   2e942:	b570      	push	{r4, r5, r6, lr}
   2e944:	b086      	sub	sp, #24
   2e946:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2e94a:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2e94c:	7826      	ldrb	r6, [r4, #0]
   2e94e:	b146      	cbz	r6, 2e962 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2e950:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e952:	2610      	movs	r6, #16
   2e954:	9602      	str	r6, [sp, #8]
   2e956:	9401      	str	r4, [sp, #4]
   2e958:	9500      	str	r5, [sp, #0]
   2e95a:	f7ff ff6b 	bl	2e834 <bt_gatt_attr_read>
}
   2e95e:	b006      	add	sp, #24
   2e960:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2e962:	8864      	ldrh	r4, [r4, #2]
   2e964:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e968:	2402      	movs	r4, #2
   2e96a:	9402      	str	r4, [sp, #8]
   2e96c:	f10d 0416 	add.w	r4, sp, #22
   2e970:	9401      	str	r4, [sp, #4]
   2e972:	9500      	str	r5, [sp, #0]
   2e974:	f7ff ff5e 	bl	2e834 <bt_gatt_attr_read>
   2e978:	e7f1      	b.n	2e95e <bt_gatt_attr_read_service+0x1c>

0002e97a <bt_gatt_attr_read_ccc>:
{
   2e97a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e97c:	b087      	sub	sp, #28
   2e97e:	4605      	mov	r5, r0
   2e980:	460c      	mov	r4, r1
   2e982:	4616      	mov	r6, r2
   2e984:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2e986:	68c9      	ldr	r1, [r1, #12]
   2e988:	f7f1 f82a 	bl	1f9e0 <find_ccc_cfg>
	if (cfg) {
   2e98c:	b190      	cbz	r0, 2e9b4 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2e98e:	8903      	ldrh	r3, [r0, #8]
   2e990:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2e994:	2302      	movs	r3, #2
   2e996:	9302      	str	r3, [sp, #8]
   2e998:	f10d 0316 	add.w	r3, sp, #22
   2e99c:	9301      	str	r3, [sp, #4]
   2e99e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2e9a2:	9300      	str	r3, [sp, #0]
   2e9a4:	463b      	mov	r3, r7
   2e9a6:	4632      	mov	r2, r6
   2e9a8:	4621      	mov	r1, r4
   2e9aa:	4628      	mov	r0, r5
   2e9ac:	f7ff ff42 	bl	2e834 <bt_gatt_attr_read>
}
   2e9b0:	b007      	add	sp, #28
   2e9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2e9b4:	2300      	movs	r3, #0
   2e9b6:	f8ad 3016 	strh.w	r3, [sp, #22]
   2e9ba:	e7eb      	b.n	2e994 <bt_gatt_attr_read_ccc+0x1a>

0002e9bc <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e9bc:	b1b8      	cbz	r0, 2e9ee <bt_gatt_attr_value_handle+0x32>
{
   2e9be:	b510      	push	{r4, lr}
   2e9c0:	b082      	sub	sp, #8
   2e9c2:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e9c4:	2300      	movs	r3, #0
   2e9c6:	f88d 3004 	strb.w	r3, [sp, #4]
   2e9ca:	f642 0303 	movw	r3, #10243	; 0x2803
   2e9ce:	f8ad 3006 	strh.w	r3, [sp, #6]
   2e9d2:	a901      	add	r1, sp, #4
   2e9d4:	6800      	ldr	r0, [r0, #0]
   2e9d6:	f7fd ff96 	bl	2c906 <bt_uuid_cmp>
   2e9da:	b950      	cbnz	r0, 2e9f2 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2e9dc:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2e9de:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2e9e0:	b940      	cbnz	r0, 2e9f4 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2e9e2:	4620      	mov	r0, r4
   2e9e4:	f7f1 facc 	bl	1ff80 <bt_gatt_attr_get_handle>
   2e9e8:	3001      	adds	r0, #1
   2e9ea:	b280      	uxth	r0, r0
   2e9ec:	e002      	b.n	2e9f4 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2e9ee:	2000      	movs	r0, #0
}
   2e9f0:	4770      	bx	lr
	uint16_t handle = 0;
   2e9f2:	2000      	movs	r0, #0
}
   2e9f4:	b002      	add	sp, #8
   2e9f6:	bd10      	pop	{r4, pc}

0002e9f8 <bt_gatt_attr_read_chrc>:
{
   2e9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e9fc:	b08a      	sub	sp, #40	; 0x28
   2e9fe:	4605      	mov	r5, r0
   2ea00:	460c      	mov	r4, r1
   2ea02:	4616      	mov	r6, r2
   2ea04:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2ea06:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2ea0a:	f898 3006 	ldrb.w	r3, [r8, #6]
   2ea0e:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2ea12:	4608      	mov	r0, r1
   2ea14:	f7ff ffd2 	bl	2e9bc <bt_gatt_attr_value_handle>
   2ea18:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2ea1c:	f8d8 1000 	ldr.w	r1, [r8]
   2ea20:	780b      	ldrb	r3, [r1, #0]
   2ea22:	b993      	cbnz	r3, 2ea4a <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2ea24:	884b      	ldrh	r3, [r1, #2]
   2ea26:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2ea2a:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2ea2c:	9302      	str	r3, [sp, #8]
   2ea2e:	ab05      	add	r3, sp, #20
   2ea30:	9301      	str	r3, [sp, #4]
   2ea32:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2ea36:	9300      	str	r3, [sp, #0]
   2ea38:	463b      	mov	r3, r7
   2ea3a:	4632      	mov	r2, r6
   2ea3c:	4621      	mov	r1, r4
   2ea3e:	4628      	mov	r0, r5
   2ea40:	f7ff fef8 	bl	2e834 <bt_gatt_attr_read>
}
   2ea44:	b00a      	add	sp, #40	; 0x28
   2ea46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2ea4a:	2210      	movs	r2, #16
   2ea4c:	3101      	adds	r1, #1
   2ea4e:	f10d 0017 	add.w	r0, sp, #23
   2ea52:	f7fd fecb 	bl	2c7ec <memcpy>
		value_len += 16U;
   2ea56:	2313      	movs	r3, #19
   2ea58:	e7e8      	b.n	2ea2c <bt_gatt_attr_read_chrc+0x34>

0002ea5a <db_hash_process>:
{
   2ea5a:	b508      	push	{r3, lr}
	do_db_hash();
   2ea5c:	f7f1 fbe2 	bl	20224 <do_db_hash>
}
   2ea60:	bd08      	pop	{r3, pc}

0002ea62 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2ea62:	f012 0f01 	tst.w	r2, #1
   2ea66:	d005      	beq.n	2ea74 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ea68:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2ea6a:	f013 0f95 	tst.w	r3, #149	; 0x95
   2ea6e:	d011      	beq.n	2ea94 <bt_gatt_check_perm+0x32>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ea70:	684b      	ldr	r3, [r1, #4]
   2ea72:	b18b      	cbz	r3, 2ea98 <bt_gatt_check_perm+0x36>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2ea74:	f012 0f02 	tst.w	r2, #2
   2ea78:	d005      	beq.n	2ea86 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2ea7a:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2ea7c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2ea80:	d00c      	beq.n	2ea9c <bt_gatt_check_perm+0x3a>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2ea82:	688b      	ldr	r3, [r1, #8]
   2ea84:	b163      	cbz	r3, 2eaa0 <bt_gatt_check_perm+0x3e>
	mask &= attr->perm;
   2ea86:	8a4b      	ldrh	r3, [r1, #18]
   2ea88:	4013      	ands	r3, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   2ea8a:	f013 0f3c 	tst.w	r3, #60	; 0x3c
   2ea8e:	d109      	bne.n	2eaa4 <bt_gatt_check_perm+0x42>
	return 0;
   2ea90:	2000      	movs	r0, #0
   2ea92:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ea94:	2002      	movs	r0, #2
   2ea96:	4770      	bx	lr
   2ea98:	2002      	movs	r0, #2
   2ea9a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ea9c:	2003      	movs	r0, #3
   2ea9e:	4770      	bx	lr
   2eaa0:	2003      	movs	r0, #3
   2eaa2:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
   2eaa4:	2005      	movs	r0, #5
}
   2eaa6:	4770      	bx	lr

0002eaa8 <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   2eaa8:	7a83      	ldrb	r3, [r0, #10]
   2eaaa:	2b07      	cmp	r3, #7
   2eaac:	d001      	beq.n	2eab2 <bt_gatt_is_subscribed+0xa>
		return false;
   2eaae:	2000      	movs	r0, #0
}
   2eab0:	4770      	bx	lr
{
   2eab2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eab4:	b089      	sub	sp, #36	; 0x24
   2eab6:	4605      	mov	r5, r0
   2eab8:	460c      	mov	r4, r1
   2eaba:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2eabc:	6808      	ldr	r0, [r1, #0]
   2eabe:	2300      	movs	r3, #0
   2eac0:	f88d 3004 	strb.w	r3, [sp, #4]
   2eac4:	f642 0303 	movw	r3, #10243	; 0x2803
   2eac8:	f8ad 3006 	strh.w	r3, [sp, #6]
   2eacc:	a901      	add	r1, sp, #4
   2eace:	f7fd ff1a 	bl	2c906 <bt_uuid_cmp>
   2ead2:	b950      	cbnz	r0, 2eaea <bt_gatt_is_subscribed+0x42>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2ead4:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   2ead6:	799b      	ldrb	r3, [r3, #6]
   2ead8:	f013 0f30 	tst.w	r3, #48	; 0x30
   2eadc:	d101      	bne.n	2eae2 <bt_gatt_is_subscribed+0x3a>
}
   2eade:	b009      	add	sp, #36	; 0x24
   2eae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   2eae2:	4620      	mov	r0, r4
   2eae4:	f7f1 fbc6 	bl	20274 <bt_gatt_attr_next>
   2eae8:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2eaea:	6820      	ldr	r0, [r4, #0]
   2eaec:	2300      	movs	r3, #0
   2eaee:	f88d 3008 	strb.w	r3, [sp, #8]
   2eaf2:	f642 1302 	movw	r3, #10498	; 0x2902
   2eaf6:	f8ad 300a 	strh.w	r3, [sp, #10]
   2eafa:	a902      	add	r1, sp, #8
   2eafc:	f7fd ff03 	bl	2c906 <bt_uuid_cmp>
   2eb00:	2800      	cmp	r0, #0
   2eb02:	d136      	bne.n	2eb72 <bt_gatt_is_subscribed+0xca>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2eb04:	6820      	ldr	r0, [r4, #0]
   2eb06:	2300      	movs	r3, #0
   2eb08:	f88d 300c 	strb.w	r3, [sp, #12]
   2eb0c:	f642 1302 	movw	r3, #10498	; 0x2902
   2eb10:	f8ad 300e 	strh.w	r3, [sp, #14]
   2eb14:	a903      	add	r1, sp, #12
   2eb16:	f7fd fef6 	bl	2c906 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2eb1a:	b378      	cbz	r0, 2eb7c <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2eb1c:	6820      	ldr	r0, [r4, #0]
   2eb1e:	2300      	movs	r3, #0
   2eb20:	f88d 3010 	strb.w	r3, [sp, #16]
   2eb24:	f642 0303 	movw	r3, #10243	; 0x2803
   2eb28:	f8ad 3012 	strh.w	r3, [sp, #18]
   2eb2c:	a904      	add	r1, sp, #16
   2eb2e:	f7fd feea 	bl	2c906 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2eb32:	b318      	cbz	r0, 2eb7c <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2eb34:	6820      	ldr	r0, [r4, #0]
   2eb36:	2300      	movs	r3, #0
   2eb38:	f88d 3014 	strb.w	r3, [sp, #20]
   2eb3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2eb40:	f8ad 3016 	strh.w	r3, [sp, #22]
   2eb44:	a905      	add	r1, sp, #20
   2eb46:	f7fd fede 	bl	2c906 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2eb4a:	b1b8      	cbz	r0, 2eb7c <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2eb4c:	6820      	ldr	r0, [r4, #0]
   2eb4e:	2300      	movs	r3, #0
   2eb50:	f88d 3018 	strb.w	r3, [sp, #24]
   2eb54:	f642 0301 	movw	r3, #10241	; 0x2801
   2eb58:	f8ad 301a 	strh.w	r3, [sp, #26]
   2eb5c:	a906      	add	r1, sp, #24
   2eb5e:	f7fd fed2 	bl	2c906 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2eb62:	b158      	cbz	r0, 2eb7c <bt_gatt_is_subscribed+0xd4>
		attr = bt_gatt_attr_next(attr);
   2eb64:	4620      	mov	r0, r4
   2eb66:	f7f1 fb85 	bl	20274 <bt_gatt_attr_next>
		if (!attr) {
   2eb6a:	4604      	mov	r4, r0
   2eb6c:	2800      	cmp	r0, #0
   2eb6e:	d1c9      	bne.n	2eb04 <bt_gatt_is_subscribed+0x5c>
   2eb70:	e7b5      	b.n	2eade <bt_gatt_is_subscribed+0x36>
		attr = bt_gatt_attr_next(attr);
   2eb72:	4620      	mov	r0, r4
   2eb74:	f7f1 fb7e 	bl	20274 <bt_gatt_attr_next>
   2eb78:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2eb7a:	e7c3      	b.n	2eb04 <bt_gatt_is_subscribed+0x5c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2eb7c:	6820      	ldr	r0, [r4, #0]
   2eb7e:	2300      	movs	r3, #0
   2eb80:	f88d 301c 	strb.w	r3, [sp, #28]
   2eb84:	f642 1302 	movw	r3, #10498	; 0x2902
   2eb88:	f8ad 301e 	strh.w	r3, [sp, #30]
   2eb8c:	a907      	add	r1, sp, #28
   2eb8e:	f7fd feba 	bl	2c906 <bt_uuid_cmp>
   2eb92:	b920      	cbnz	r0, 2eb9e <bt_gatt_is_subscribed+0xf6>
	ccc = attr->user_data;
   2eb94:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2eb96:	2400      	movs	r4, #0
   2eb98:	b11c      	cbz	r4, 2eba2 <bt_gatt_is_subscribed+0xfa>
	return false;
   2eb9a:	2000      	movs	r0, #0
   2eb9c:	e79f      	b.n	2eade <bt_gatt_is_subscribed+0x36>
		return false;
   2eb9e:	2000      	movs	r0, #0
   2eba0:	e79d      	b.n	2eade <bt_gatt_is_subscribed+0x36>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2eba2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2eba6:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   2ebaa:	3201      	adds	r2, #1
   2ebac:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   2ebb0:	4628      	mov	r0, r5
   2ebb2:	f7fe fca4 	bl	2d4fe <bt_conn_is_peer_addr_le>
   2ebb6:	b130      	cbz	r0, 2ebc6 <bt_gatt_is_subscribed+0x11e>
		    (ccc_type & ccc->cfg[i].value)) {
   2ebb8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2ebbc:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   2ebc0:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2ebc2:	4233      	tst	r3, r6
   2ebc4:	d18b      	bne.n	2eade <bt_gatt_is_subscribed+0x36>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2ebc6:	3401      	adds	r4, #1
   2ebc8:	e7e6      	b.n	2eb98 <bt_gatt_is_subscribed+0xf0>

0002ebca <bt_gatt_change_aware>:
{
   2ebca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ebce:	4607      	mov	r7, r0
   2ebd0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2ebd2:	f7f0 febb 	bl	1f94c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ebd6:	2800      	cmp	r0, #0
   2ebd8:	d042      	beq.n	2ec60 <bt_gatt_change_aware+0x96>
   2ebda:	4606      	mov	r6, r0
   2ebdc:	7a03      	ldrb	r3, [r0, #8]
   2ebde:	f013 0f01 	tst.w	r3, #1
   2ebe2:	d103      	bne.n	2ebec <bt_gatt_change_aware+0x22>
		return true;
   2ebe4:	2501      	movs	r5, #1
}
   2ebe6:	4628      	mov	r0, r5
   2ebe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2ebec:	f100 080c 	add.w	r8, r0, #12
   2ebf0:	2100      	movs	r1, #0
   2ebf2:	4640      	mov	r0, r8
   2ebf4:	f7ff fd36 	bl	2e664 <atomic_test_bit>
   2ebf8:	4605      	mov	r5, r0
   2ebfa:	2800      	cmp	r0, #0
   2ebfc:	d1f3      	bne.n	2ebe6 <bt_gatt_change_aware+0x1c>
	if (!req) {
   2ebfe:	b90c      	cbnz	r4, 2ec04 <bt_gatt_change_aware+0x3a>
		return false;
   2ec00:	4625      	mov	r5, r4
   2ec02:	e7f0      	b.n	2ebe6 <bt_gatt_change_aware+0x1c>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2ec04:	2101      	movs	r1, #1
   2ec06:	4640      	mov	r0, r8
   2ec08:	f7ff fd52 	bl	2e6b0 <atomic_test_and_clear_bit>
   2ec0c:	4605      	mov	r5, r0
   2ec0e:	b9f8      	cbnz	r0, 2ec50 <bt_gatt_change_aware+0x86>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2ec10:	4638      	mov	r0, r7
   2ec12:	f7ff fbe7 	bl	2e3e4 <bt_att_fixed_chan_only>
   2ec16:	4605      	mov	r5, r0
   2ec18:	2800      	cmp	r0, #0
   2ec1a:	d0e4      	beq.n	2ebe6 <bt_gatt_change_aware+0x1c>
   2ec1c:	4638      	mov	r0, r7
   2ec1e:	f7ff fc00 	bl	2e422 <bt_att_out_of_sync_sent_on_fixed>
   2ec22:	4605      	mov	r5, r0
   2ec24:	2800      	cmp	r0, #0
   2ec26:	d0de      	beq.n	2ebe6 <bt_gatt_change_aware+0x1c>
   2ec28:	f3bf 8f5b 	dmb	ish
   2ec2c:	e858 3f00 	ldrex	r3, [r8]
   2ec30:	f023 0302 	bic.w	r3, r3, #2
   2ec34:	e848 3200 	strex	r2, r3, [r8]
   2ec38:	2a00      	cmp	r2, #0
   2ec3a:	d1f7      	bne.n	2ec2c <bt_gatt_change_aware+0x62>
   2ec3c:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2ec40:	4638      	mov	r0, r7
   2ec42:	f7ff fbd1 	bl	2e3e8 <bt_att_clear_out_of_sync_sent>
		set_change_aware(cfg, true);
   2ec46:	2101      	movs	r1, #1
   2ec48:	4630      	mov	r0, r6
   2ec4a:	f7ff fd5c 	bl	2e706 <set_change_aware>
		return true;
   2ec4e:	e7ca      	b.n	2ebe6 <bt_gatt_change_aware+0x1c>
		bt_att_clear_out_of_sync_sent(conn);
   2ec50:	4638      	mov	r0, r7
   2ec52:	f7ff fbc9 	bl	2e3e8 <bt_att_clear_out_of_sync_sent>
		set_change_aware(cfg, true);
   2ec56:	2101      	movs	r1, #1
   2ec58:	4630      	mov	r0, r6
   2ec5a:	f7ff fd54 	bl	2e706 <set_change_aware>
		return true;
   2ec5e:	e7c2      	b.n	2ebe6 <bt_gatt_change_aware+0x1c>
		return true;
   2ec60:	2501      	movs	r5, #1
   2ec62:	e7c0      	b.n	2ebe6 <bt_gatt_change_aware+0x1c>

0002ec64 <bt_smp_recv>:
{
   2ec64:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ec66:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2ec68:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2ec6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ec6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ec72:	2100      	movs	r1, #0
   2ec74:	4608      	mov	r0, r1
   2ec76:	f7fe fced 	bl	2d654 <bt_l2cap_create_pdu_timeout>
   2ec7a:	4604      	mov	r4, r0
   2ec7c:	f100 060c 	add.w	r6, r0, #12
   2ec80:	2101      	movs	r1, #1
   2ec82:	4630      	mov	r0, r6
   2ec84:	f000 f987 	bl	2ef96 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2ec88:	2505      	movs	r5, #5
   2ec8a:	7005      	strb	r5, [r0, #0]
   2ec8c:	2101      	movs	r1, #1
   2ec8e:	4630      	mov	r0, r6
   2ec90:	f000 f981 	bl	2ef96 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2ec94:	7005      	strb	r5, [r0, #0]
   2ec96:	2300      	movs	r3, #0
   2ec98:	9300      	str	r3, [sp, #0]
   2ec9a:	4622      	mov	r2, r4
   2ec9c:	2106      	movs	r1, #6
   2ec9e:	4638      	mov	r0, r7
   2eca0:	f7fe fcdd 	bl	2d65e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2eca4:	b910      	cbnz	r0, 2ecac <bt_smp_recv+0x48>
}
   2eca6:	2000      	movs	r0, #0
   2eca8:	b003      	add	sp, #12
   2ecaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   2ecac:	4620      	mov	r0, r4
   2ecae:	f000 f927 	bl	2ef00 <net_buf_unref>
   2ecb2:	e7f8      	b.n	2eca6 <bt_smp_recv+0x42>

0002ecb4 <bt_smp_sign>:
}
   2ecb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ecb8:	4770      	bx	lr

0002ecba <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2ecba:	2000      	movs	r0, #0
   2ecbc:	4770      	bx	lr

0002ecbe <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   2ecbe:	b538      	push	{r3, r4, r5, lr}
   2ecc0:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2ecc2:	7f03      	ldrb	r3, [r0, #28]
   2ecc4:	331b      	adds	r3, #27
   2ecc6:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2ecca:	8b02      	ldrh	r2, [r0, #24]
   2eccc:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2ecce:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2ecd0:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   2ecd4:	f7f1 fff0 	bl	20cb8 <pool_id>
   2ecd8:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   2ecda:	7f23      	ldrb	r3, [r4, #28]
   2ecdc:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   2ecde:	4628      	mov	r0, r5
   2ece0:	bd38      	pop	{r3, r4, r5, pc}

0002ece2 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   2ece2:	4770      	bx	lr

0002ece4 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   2ece4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ece8:	4604      	mov	r4, r0
   2ecea:	460d      	mov	r5, r1
   2ecec:	4617      	mov	r7, r2
   2ecee:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ecf0:	7a80      	ldrb	r0, [r0, #10]
   2ecf2:	f7f1 ffed 	bl	20cd0 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   2ecf6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ecf8:	681b      	ldr	r3, [r3, #0]
   2ecfa:	f8d3 8000 	ldr.w	r8, [r3]
   2ecfe:	463a      	mov	r2, r7
   2ed00:	4633      	mov	r3, r6
   2ed02:	4629      	mov	r1, r5
   2ed04:	4620      	mov	r0, r4
   2ed06:	47c0      	blx	r8
}
   2ed08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ed0c <net_buf_destroy>:
{
   2ed0c:	b510      	push	{r4, lr}
   2ed0e:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ed10:	7a80      	ldrb	r0, [r0, #10]
   2ed12:	f7f1 ffdd 	bl	20cd0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2ed16:	4621      	mov	r1, r4
   2ed18:	f002 f833 	bl	30d82 <k_queue_prepend>
}
   2ed1c:	bd10      	pop	{r4, pc}

0002ed1e <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   2ed1e:	b538      	push	{r3, r4, r5, lr}
   2ed20:	4604      	mov	r4, r0
   2ed22:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ed24:	7a80      	ldrb	r0, [r0, #10]
   2ed26:	f7f1 ffd3 	bl	20cd0 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2ed2a:	7a63      	ldrb	r3, [r4, #9]
   2ed2c:	f013 0f01 	tst.w	r3, #1
   2ed30:	d105      	bne.n	2ed3e <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   2ed32:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ed34:	681b      	ldr	r3, [r3, #0]
   2ed36:	689b      	ldr	r3, [r3, #8]
   2ed38:	4629      	mov	r1, r5
   2ed3a:	4620      	mov	r0, r4
   2ed3c:	4798      	blx	r3
}
   2ed3e:	bd38      	pop	{r3, r4, r5, pc}

0002ed40 <net_buf_id>:
{
   2ed40:	b510      	push	{r4, lr}
   2ed42:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ed44:	7a80      	ldrb	r0, [r0, #10]
   2ed46:	f7f1 ffc3 	bl	20cd0 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2ed4a:	7f03      	ldrb	r3, [r0, #28]
   2ed4c:	331b      	adds	r3, #27
   2ed4e:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2ed52:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2ed54:	1aa4      	subs	r4, r4, r2
}
   2ed56:	fbb4 f0f3 	udiv	r0, r4, r3
   2ed5a:	bd10      	pop	{r4, pc}

0002ed5c <fixed_data_alloc>:
{
   2ed5c:	b570      	push	{r4, r5, r6, lr}
   2ed5e:	4604      	mov	r4, r0
   2ed60:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ed62:	7a80      	ldrb	r0, [r0, #10]
   2ed64:	f7f1 ffb4 	bl	20cd0 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2ed68:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ed6a:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2ed6c:	682a      	ldr	r2, [r5, #0]
   2ed6e:	6819      	ldr	r1, [r3, #0]
   2ed70:	428a      	cmp	r2, r1
   2ed72:	bf28      	it	cs
   2ed74:	460a      	movcs	r2, r1
   2ed76:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2ed78:	685d      	ldr	r5, [r3, #4]
   2ed7a:	681e      	ldr	r6, [r3, #0]
   2ed7c:	4620      	mov	r0, r4
   2ed7e:	f7ff ffdf 	bl	2ed40 <net_buf_id>
}
   2ed82:	fb00 5006 	mla	r0, r0, r6, r5
   2ed86:	bd70      	pop	{r4, r5, r6, pc}

0002ed88 <net_buf_reset>:
	buf->len  = 0U;
   2ed88:	2300      	movs	r3, #0
   2ed8a:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   2ed8c:	6943      	ldr	r3, [r0, #20]
   2ed8e:	60c3      	str	r3, [r0, #12]
}
   2ed90:	4770      	bx	lr

0002ed92 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2ed92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ed96:	b082      	sub	sp, #8
   2ed98:	4605      	mov	r5, r0
   2ed9a:	9101      	str	r1, [sp, #4]
   2ed9c:	4616      	mov	r6, r2
   2ed9e:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2eda0:	4610      	mov	r0, r2
   2eda2:	4619      	mov	r1, r3
   2eda4:	f002 fbaf 	bl	31506 <sys_clock_timeout_end_calc>
   2eda8:	4681      	mov	r9, r0
   2edaa:	468a      	mov	sl, r1
   2edac:	f04f 0240 	mov.w	r2, #64	; 0x40
   2edb0:	f3ef 8311 	mrs	r3, BASEPRI
   2edb4:	f382 8812 	msr	BASEPRI_MAX, r2
   2edb8:	f3bf 8f6f 	isb	sy
   2edbc:	461a      	mov	r2, r3
   2edbe:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2edc0:	8b6b      	ldrh	r3, [r5, #26]
   2edc2:	b393      	cbz	r3, 2ee2a <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2edc4:	8b2a      	ldrh	r2, [r5, #24]
   2edc6:	4293      	cmp	r3, r2
   2edc8:	d20b      	bcs.n	2ede2 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   2edca:	2200      	movs	r2, #0
   2edcc:	2300      	movs	r3, #0
   2edce:	4628      	mov	r0, r5
   2edd0:	f7f7 fa0e 	bl	261f0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   2edd4:	4604      	mov	r4, r0
   2edd6:	b120      	cbz	r0, 2ede2 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   2edd8:	f388 8811 	msr	BASEPRI, r8
   2eddc:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   2ede0:	e00a      	b.n	2edf8 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   2ede2:	8b69      	ldrh	r1, [r5, #26]
   2ede4:	1e4b      	subs	r3, r1, #1
   2ede6:	836b      	strh	r3, [r5, #26]
   2ede8:	f388 8811 	msr	BASEPRI, r8
   2edec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   2edf0:	4628      	mov	r0, r5
   2edf2:	f7ff ff64 	bl	2ecbe <pool_get_uninit>
   2edf6:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2edf8:	9b01      	ldr	r3, [sp, #4]
   2edfa:	b3a3      	cbz	r3, 2ee66 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2edfc:	ea56 0307 	orrs.w	r3, r6, r7
   2ee00:	d005      	beq.n	2ee0e <net_buf_alloc_len+0x7c>
   2ee02:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2ee06:	bf08      	it	eq
   2ee08:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   2ee0c:	d11a      	bne.n	2ee44 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2ee0e:	4632      	mov	r2, r6
   2ee10:	463b      	mov	r3, r7
   2ee12:	a901      	add	r1, sp, #4
   2ee14:	4620      	mov	r0, r4
   2ee16:	f7ff ff65 	bl	2ece4 <data_alloc>
   2ee1a:	4605      	mov	r5, r0
   2ee1c:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2ee1e:	bb20      	cbnz	r0, 2ee6a <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   2ee20:	4620      	mov	r0, r4
   2ee22:	f7ff ff73 	bl	2ed0c <net_buf_destroy>
			return NULL;
   2ee26:	462c      	mov	r4, r5
   2ee28:	e029      	b.n	2ee7e <net_buf_alloc_len+0xec>
   2ee2a:	f382 8811 	msr	BASEPRI, r2
   2ee2e:	f3bf 8f6f 	isb	sy
   2ee32:	4632      	mov	r2, r6
   2ee34:	463b      	mov	r3, r7
   2ee36:	4628      	mov	r0, r5
   2ee38:	f7f7 f9da 	bl	261f0 <z_impl_k_queue_get>
	if (!buf) {
   2ee3c:	4604      	mov	r4, r0
   2ee3e:	2800      	cmp	r0, #0
   2ee40:	d1da      	bne.n	2edf8 <net_buf_alloc_len+0x66>
   2ee42:	e01c      	b.n	2ee7e <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   2ee44:	f7f8 f93c 	bl	270c0 <sys_clock_tick_get>
   2ee48:	ebb9 0900 	subs.w	r9, r9, r0
   2ee4c:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   2ee50:	f1b9 0f01 	cmp.w	r9, #1
   2ee54:	f17a 0300 	sbcs.w	r3, sl, #0
   2ee58:	db02      	blt.n	2ee60 <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2ee5a:	464e      	mov	r6, r9
   2ee5c:	4657      	mov	r7, sl
   2ee5e:	e7d6      	b.n	2ee0e <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   2ee60:	2600      	movs	r6, #0
   2ee62:	4637      	mov	r7, r6
   2ee64:	e7d3      	b.n	2ee0e <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   2ee66:	2300      	movs	r3, #0
   2ee68:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   2ee6a:	2301      	movs	r3, #1
   2ee6c:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   2ee6e:	2300      	movs	r3, #0
   2ee70:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   2ee72:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   2ee74:	9b01      	ldr	r3, [sp, #4]
   2ee76:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   2ee78:	4620      	mov	r0, r4
   2ee7a:	f7ff ff85 	bl	2ed88 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2ee7e:	4620      	mov	r0, r4
   2ee80:	b002      	add	sp, #8
   2ee82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002ee86 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   2ee86:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2ee88:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2ee8a:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2ee8c:	6809      	ldr	r1, [r1, #0]
   2ee8e:	f7ff ff80 	bl	2ed92 <net_buf_alloc_len>
}
   2ee92:	bd08      	pop	{r3, pc}

0002ee94 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   2ee94:	b508      	push	{r3, lr}
   2ee96:	f7f7 f9ab 	bl	261f0 <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   2ee9a:	bd08      	pop	{r3, pc}

0002ee9c <net_buf_slist_put>:
	__asm__ volatile(
   2ee9c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2eea0:	f3ef 8311 	mrs	r3, BASEPRI
   2eea4:	f382 8812 	msr	BASEPRI_MAX, r2
   2eea8:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2eeac:	2200      	movs	r2, #0
   2eeae:	600a      	str	r2, [r1, #0]
	return list->tail;
   2eeb0:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2eeb2:	b132      	cbz	r2, 2eec2 <net_buf_slist_put+0x26>
	parent->next = child;
   2eeb4:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2eeb6:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   2eeb8:	f383 8811 	msr	BASEPRI, r3
   2eebc:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   2eec0:	4770      	bx	lr
   2eec2:	6041      	str	r1, [r0, #4]
	list->head = node;
   2eec4:	6001      	str	r1, [r0, #0]
}
   2eec6:	e7f7      	b.n	2eeb8 <net_buf_slist_put+0x1c>

0002eec8 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   2eec8:	4603      	mov	r3, r0
	__asm__ volatile(
   2eeca:	f04f 0140 	mov.w	r1, #64	; 0x40
   2eece:	f3ef 8211 	mrs	r2, BASEPRI
   2eed2:	f381 8812 	msr	BASEPRI_MAX, r1
   2eed6:	f3bf 8f6f 	isb	sy
	return list->head;
   2eeda:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2eedc:	b128      	cbz	r0, 2eeea <net_buf_slist_get+0x22>
	return node->next;
   2eede:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   2eee0:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2eee2:	f8d3 c004 	ldr.w	ip, [r3, #4]
   2eee6:	4560      	cmp	r0, ip
   2eee8:	d004      	beq.n	2eef4 <net_buf_slist_get+0x2c>
	__asm__ volatile(
   2eeea:	f382 8811 	msr	BASEPRI, r2
   2eeee:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   2eef2:	4770      	bx	lr
	list->tail = node;
   2eef4:	6059      	str	r1, [r3, #4]
}
   2eef6:	e7f8      	b.n	2eeea <net_buf_slist_get+0x22>

0002eef8 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2eef8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   2eefa:	f001 ff36 	bl	30d6a <k_queue_append>
}
   2eefe:	bd08      	pop	{r3, pc}

0002ef00 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2ef00:	b538      	push	{r3, r4, r5, lr}
   2ef02:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   2ef04:	e00a      	b.n	2ef1c <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   2ef06:	2300      	movs	r3, #0
   2ef08:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   2ef0a:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   2ef0c:	7aa0      	ldrb	r0, [r4, #10]
   2ef0e:	f7f1 fedf 	bl	20cd0 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2ef12:	6a03      	ldr	r3, [r0, #32]
   2ef14:	b193      	cbz	r3, 2ef3c <net_buf_unref+0x3c>
			pool->destroy(buf);
   2ef16:	4620      	mov	r0, r4
   2ef18:	4798      	blx	r3
{
   2ef1a:	462c      	mov	r4, r5
	while (buf) {
   2ef1c:	b194      	cbz	r4, 2ef44 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   2ef1e:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   2ef20:	7a23      	ldrb	r3, [r4, #8]
   2ef22:	3b01      	subs	r3, #1
   2ef24:	b2db      	uxtb	r3, r3
   2ef26:	7223      	strb	r3, [r4, #8]
   2ef28:	b963      	cbnz	r3, 2ef44 <net_buf_unref+0x44>
		if (buf->__buf) {
   2ef2a:	6961      	ldr	r1, [r4, #20]
   2ef2c:	2900      	cmp	r1, #0
   2ef2e:	d0ea      	beq.n	2ef06 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   2ef30:	4620      	mov	r0, r4
   2ef32:	f7ff fef4 	bl	2ed1e <data_unref>
			buf->__buf = NULL;
   2ef36:	2300      	movs	r3, #0
   2ef38:	6163      	str	r3, [r4, #20]
   2ef3a:	e7e4      	b.n	2ef06 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   2ef3c:	4620      	mov	r0, r4
   2ef3e:	f7ff fee5 	bl	2ed0c <net_buf_destroy>
   2ef42:	e7ea      	b.n	2ef1a <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   2ef44:	bd38      	pop	{r3, r4, r5, pc}

0002ef46 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2ef46:	7a02      	ldrb	r2, [r0, #8]
   2ef48:	3201      	adds	r2, #1
   2ef4a:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2ef4c:	4770      	bx	lr

0002ef4e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2ef4e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2ef50:	4618      	mov	r0, r3
   2ef52:	685b      	ldr	r3, [r3, #4]
   2ef54:	2b00      	cmp	r3, #0
   2ef56:	d1fb      	bne.n	2ef50 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2ef58:	4770      	bx	lr

0002ef5a <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2ef5a:	b570      	push	{r4, r5, r6, lr}
   2ef5c:	4604      	mov	r4, r0
   2ef5e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2ef60:	6846      	ldr	r6, [r0, #4]
   2ef62:	b11e      	cbz	r6, 2ef6c <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   2ef64:	4608      	mov	r0, r1
   2ef66:	f7ff fff2 	bl	2ef4e <net_buf_frag_last>
   2ef6a:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2ef6c:	6065      	str	r5, [r4, #4]
}
   2ef6e:	bd70      	pop	{r4, r5, r6, pc}

0002ef70 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2ef70:	b538      	push	{r3, r4, r5, lr}
   2ef72:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2ef74:	b138      	cbz	r0, 2ef86 <net_buf_frag_add+0x16>
   2ef76:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2ef78:	f7ff ffe9 	bl	2ef4e <net_buf_frag_last>
   2ef7c:	4629      	mov	r1, r5
   2ef7e:	f7ff ffec 	bl	2ef5a <net_buf_frag_insert>

	return head;
   2ef82:	4620      	mov	r0, r4
}
   2ef84:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   2ef86:	4608      	mov	r0, r1
   2ef88:	f7ff ffdd 	bl	2ef46 <net_buf_ref>
   2ef8c:	e7fa      	b.n	2ef84 <net_buf_frag_add+0x14>

0002ef8e <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2ef8e:	6883      	ldr	r3, [r0, #8]
   2ef90:	440b      	add	r3, r1
   2ef92:	6003      	str	r3, [r0, #0]
}
   2ef94:	4770      	bx	lr

0002ef96 <net_buf_simple_add>:
	return buf->data + buf->len;
   2ef96:	6802      	ldr	r2, [r0, #0]
   2ef98:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2ef9a:	4419      	add	r1, r3
   2ef9c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2ef9e:	18d0      	adds	r0, r2, r3
   2efa0:	4770      	bx	lr

0002efa2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2efa2:	b538      	push	{r3, r4, r5, lr}
   2efa4:	460d      	mov	r5, r1
   2efa6:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2efa8:	4611      	mov	r1, r2
   2efaa:	f7ff fff4 	bl	2ef96 <net_buf_simple_add>
   2efae:	4622      	mov	r2, r4
   2efb0:	4629      	mov	r1, r5
   2efb2:	f7fd fc1b 	bl	2c7ec <memcpy>
}
   2efb6:	bd38      	pop	{r3, r4, r5, pc}

0002efb8 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2efb8:	b510      	push	{r4, lr}
   2efba:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   2efbc:	2101      	movs	r1, #1
   2efbe:	f7ff ffea 	bl	2ef96 <net_buf_simple_add>
	*u8 = val;
   2efc2:	7004      	strb	r4, [r0, #0]

	return u8;
}
   2efc4:	bd10      	pop	{r4, pc}

0002efc6 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2efc6:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2efc8:	6800      	ldr	r0, [r0, #0]
   2efca:	1a40      	subs	r0, r0, r1
   2efcc:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2efce:	889a      	ldrh	r2, [r3, #4]
   2efd0:	440a      	add	r2, r1
   2efd2:	809a      	strh	r2, [r3, #4]
	return buf->data;
}
   2efd4:	4770      	bx	lr

0002efd6 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2efd6:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2efd8:	8882      	ldrh	r2, [r0, #4]
   2efda:	1a52      	subs	r2, r2, r1
   2efdc:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2efde:	6800      	ldr	r0, [r0, #0]
   2efe0:	4408      	add	r0, r1
   2efe2:	6018      	str	r0, [r3, #0]
}
   2efe4:	4770      	bx	lr

0002efe6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2efe6:	4603      	mov	r3, r0
	void *data = buf->data;
   2efe8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2efea:	889a      	ldrh	r2, [r3, #4]
   2efec:	1a52      	subs	r2, r2, r1
   2efee:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2eff0:	4401      	add	r1, r0
   2eff2:	6019      	str	r1, [r3, #0]

	return data;
}
   2eff4:	4770      	bx	lr

0002eff6 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2eff6:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2eff8:	6803      	ldr	r3, [r0, #0]
   2effa:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2effc:	2102      	movs	r1, #2
   2effe:	f7ff ffea 	bl	2efd6 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2f002:	4620      	mov	r0, r4
   2f004:	bd10      	pop	{r4, pc}

0002f006 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2f006:	6802      	ldr	r2, [r0, #0]
   2f008:	6880      	ldr	r0, [r0, #8]
}
   2f00a:	1a10      	subs	r0, r2, r0
   2f00c:	4770      	bx	lr

0002f00e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2f00e:	b538      	push	{r3, r4, r5, lr}
   2f010:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f012:	88c5      	ldrh	r5, [r0, #6]
   2f014:	f7ff fff7 	bl	2f006 <net_buf_simple_headroom>
   2f018:	1a2d      	subs	r5, r5, r0
   2f01a:	88a0      	ldrh	r0, [r4, #4]
}
   2f01c:	1a28      	subs	r0, r5, r0
   2f01e:	bd38      	pop	{r3, r4, r5, pc}

0002f020 <nrf_usbd_ep_amount_get>:

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   2f020:	f011 0f80 	tst.w	r1, #128	; 0x80
   2f024:	d105      	bne.n	2f032 <nrf_usbd_ep_amount_get+0x12>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   2f026:	f011 0f08 	tst.w	r1, #8
   2f02a:	d011      	beq.n	2f050 <nrf_usbd_ep_amount_get+0x30>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   2f02c:	f8d0 07a8 	ldr.w	r0, [r0, #1960]	; 0x7a8
   2f030:	4770      	bx	lr
        if (NRF_USBD_EPISO_CHECK(ep))
   2f032:	f011 0f08 	tst.w	r1, #8
   2f036:	d002      	beq.n	2f03e <nrf_usbd_ep_amount_get+0x1e>
            ret = p_reg->ISOIN.AMOUNT;
   2f038:	f8d0 06a8 	ldr.w	r0, [r0, #1704]	; 0x6a8
   2f03c:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2f03e:	f001 010f 	and.w	r1, r1, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
   2f042:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   2f046:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2f04a:	f8d0 0608 	ldr.w	r0, [r0, #1544]	; 0x608
   2f04e:	4770      	bx	lr
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2f050:	f001 010f 	and.w	r1, r1, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
   2f054:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   2f058:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2f05c:	f8d0 0708 	ldr.w	r0, [r0, #1800]	; 0x708
        }
    }

    return ret;
}
   2f060:	4770      	bx	lr

0002f062 <ep_is_valid>:
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   2f062:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2f066:	f010 0f80 	tst.w	r0, #128	; 0x80
   2f06a:	d106      	bne.n	2f07a <ep_is_valid+0x18>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   2f06c:	2b08      	cmp	r3, #8
   2f06e:	d00f      	beq.n	2f090 <ep_is_valid+0x2e>
			if (ep_num >= CFG_EPOUT_CNT) {
   2f070:	f010 0f78 	tst.w	r0, #120	; 0x78
   2f074:	d10e      	bne.n	2f094 <ep_is_valid+0x32>
	return true;
   2f076:	2001      	movs	r0, #1
   2f078:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   2f07a:	2b08      	cmp	r3, #8
   2f07c:	d004      	beq.n	2f088 <ep_is_valid+0x26>
			if (ep_num >= CFG_EPIN_CNT) {
   2f07e:	f010 0f78 	tst.w	r0, #120	; 0x78
   2f082:	d103      	bne.n	2f08c <ep_is_valid+0x2a>
	return true;
   2f084:	2001      	movs	r0, #1
   2f086:	4770      	bx	lr
   2f088:	2001      	movs	r0, #1
   2f08a:	4770      	bx	lr
				return false;
   2f08c:	2000      	movs	r0, #0
   2f08e:	4770      	bx	lr
	return true;
   2f090:	2001      	movs	r0, #1
   2f092:	4770      	bx	lr
				return false;
   2f094:	2000      	movs	r0, #0
}
   2f096:	4770      	bx	lr

0002f098 <in_endpoint_ctx>:
{
   2f098:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2f09a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   2f09e:	f7f1 fe1f 	bl	20ce0 <endpoint_ctx>
}
   2f0a2:	bd08      	pop	{r3, pc}

0002f0a4 <out_endpoint_ctx>:
{
   2f0a4:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   2f0a6:	f7f1 fe1b 	bl	20ce0 <endpoint_ctx>
}
   2f0aa:	bd08      	pop	{r3, pc}

0002f0ac <ep_ctx_reset>:
{
   2f0ac:	b510      	push	{r4, lr}
   2f0ae:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2f0b0:	6903      	ldr	r3, [r0, #16]
   2f0b2:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2f0b4:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   2f0b6:	2300      	movs	r3, #0
   2f0b8:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2f0ba:	7f83      	ldrb	r3, [r0, #30]
   2f0bc:	b933      	cbnz	r3, 2f0cc <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   2f0be:	2301      	movs	r3, #1
   2f0c0:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2f0c2:	2300      	movs	r3, #0
   2f0c4:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   2f0c6:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   2f0c8:	77e3      	strb	r3, [r4, #31]
}
   2f0ca:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2f0cc:	7a40      	ldrb	r0, [r0, #9]
   2f0ce:	f001 fc4a 	bl	30966 <nrfx_usbd_ep_abort>
   2f0d2:	e7f4      	b.n	2f0be <ep_ctx_reset+0x12>

0002f0d4 <onoff_cancel_or_release>:
 *
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
   2f0d4:	b510      	push	{r4, lr}
   2f0d6:	4604      	mov	r4, r0
	int rv = onoff_cancel(mgr, cli);
   2f0d8:	f7fb fda3 	bl	2ac22 <onoff_cancel>

	if (rv == -EALREADY) {
   2f0dc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2f0e0:	d000      	beq.n	2f0e4 <onoff_cancel_or_release+0x10>
		rv = onoff_release(mgr);
	}
	return rv;
}
   2f0e2:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   2f0e4:	4620      	mov	r0, r4
   2f0e6:	f7fb fd75 	bl	2abd4 <onoff_release>
	return rv;
   2f0ea:	e7fa      	b.n	2f0e2 <onoff_cancel_or_release+0xe>

0002f0ec <hfxo_stop>:
{
   2f0ec:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   2f0ee:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2f0f2:	2200      	movs	r2, #0
   2f0f4:	f3bf 8f5b 	dmb	ish
   2f0f8:	e853 1f00 	ldrex	r1, [r3]
   2f0fc:	2901      	cmp	r1, #1
   2f0fe:	d104      	bne.n	2f10a <hfxo_stop+0x1e>
   2f100:	e843 2c00 	strex	ip, r2, [r3]
   2f104:	f1bc 0f00 	cmp.w	ip, #0
   2f108:	d1f6      	bne.n	2f0f8 <hfxo_stop+0xc>
   2f10a:	f3bf 8f5b 	dmb	ish
   2f10e:	d105      	bne.n	2f11c <hfxo_stop+0x30>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2f110:	f100 010c 	add.w	r1, r0, #12
   2f114:	69c0      	ldr	r0, [r0, #28]
   2f116:	f7ff ffdd 	bl	2f0d4 <onoff_cancel_or_release>
}
   2f11a:	bd08      	pop	{r3, pc}
	return 0;
   2f11c:	2000      	movs	r0, #0
   2f11e:	e7fc      	b.n	2f11a <hfxo_stop+0x2e>

0002f120 <usbd_enable_endpoints>:
{
   2f120:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2f122:	2400      	movs	r4, #0
   2f124:	e000      	b.n	2f128 <usbd_enable_endpoints+0x8>
   2f126:	3401      	adds	r4, #1
   2f128:	2c07      	cmp	r4, #7
   2f12a:	dc09      	bgt.n	2f140 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   2f12c:	b2e0      	uxtb	r0, r4
   2f12e:	f7ff ffb3 	bl	2f098 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2f132:	7a03      	ldrb	r3, [r0, #8]
   2f134:	2b00      	cmp	r3, #0
   2f136:	d0f6      	beq.n	2f126 <usbd_enable_endpoints+0x6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2f138:	7a40      	ldrb	r0, [r0, #9]
   2f13a:	f7f6 fa8b 	bl	25654 <nrfx_usbd_ep_enable>
   2f13e:	e7f2      	b.n	2f126 <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   2f140:	2088      	movs	r0, #136	; 0x88
   2f142:	f7ff ffa9 	bl	2f098 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2f146:	7a03      	ldrb	r3, [r0, #8]
   2f148:	b90b      	cbnz	r3, 2f14e <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2f14a:	2400      	movs	r4, #0
   2f14c:	e004      	b.n	2f158 <usbd_enable_endpoints+0x38>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2f14e:	7a40      	ldrb	r0, [r0, #9]
   2f150:	f7f6 fa80 	bl	25654 <nrfx_usbd_ep_enable>
   2f154:	e7f9      	b.n	2f14a <usbd_enable_endpoints+0x2a>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   2f156:	3401      	adds	r4, #1
   2f158:	2c07      	cmp	r4, #7
   2f15a:	dc09      	bgt.n	2f170 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   2f15c:	b2e0      	uxtb	r0, r4
   2f15e:	f7ff ffa1 	bl	2f0a4 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2f162:	7a03      	ldrb	r3, [r0, #8]
   2f164:	2b00      	cmp	r3, #0
   2f166:	d0f6      	beq.n	2f156 <usbd_enable_endpoints+0x36>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2f168:	7a40      	ldrb	r0, [r0, #9]
   2f16a:	f7f6 fa73 	bl	25654 <nrfx_usbd_ep_enable>
   2f16e:	e7f2      	b.n	2f156 <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   2f170:	2008      	movs	r0, #8
   2f172:	f7ff ff97 	bl	2f0a4 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2f176:	7a03      	ldrb	r3, [r0, #8]
   2f178:	b903      	cbnz	r3, 2f17c <usbd_enable_endpoints+0x5c>
}
   2f17a:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2f17c:	7a40      	ldrb	r0, [r0, #9]
   2f17e:	f7f6 fa69 	bl	25654 <nrfx_usbd_ep_enable>
}
   2f182:	e7fa      	b.n	2f17a <usbd_enable_endpoints+0x5a>

0002f184 <hfxo_start>:
{
   2f184:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   2f186:	f100 0320 	add.w	r3, r0, #32
   2f18a:	2201      	movs	r2, #1
   2f18c:	f3bf 8f5b 	dmb	ish
   2f190:	e853 1f00 	ldrex	r1, [r3]
   2f194:	2900      	cmp	r1, #0
   2f196:	d104      	bne.n	2f1a2 <hfxo_start+0x1e>
   2f198:	e843 2c00 	strex	ip, r2, [r3]
   2f19c:	f1bc 0f00 	cmp.w	ip, #0
   2f1a0:	d1f6      	bne.n	2f190 <hfxo_start+0xc>
   2f1a2:	f3bf 8f5b 	dmb	ish
   2f1a6:	d10b      	bne.n	2f1c0 <hfxo_start+0x3c>
	*notify = (struct sys_notify){
   2f1a8:	2300      	movs	r3, #0
   2f1aa:	6103      	str	r3, [r0, #16]
   2f1ac:	6143      	str	r3, [r0, #20]
   2f1ae:	6183      	str	r3, [r0, #24]
   2f1b0:	2301      	movs	r3, #1
   2f1b2:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2f1b4:	f100 010c 	add.w	r1, r0, #12
   2f1b8:	69c0      	ldr	r0, [r0, #28]
   2f1ba:	f7fb fcaa 	bl	2ab12 <onoff_request>
}
   2f1be:	bd08      	pop	{r3, pc}
	return 0;
   2f1c0:	2000      	movs	r0, #0
   2f1c2:	e7fc      	b.n	2f1be <hfxo_start+0x3a>

0002f1c4 <usb_dc_ep_disable>:
{
   2f1c4:	b538      	push	{r3, r4, r5, lr}
   2f1c6:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   2f1c8:	f7f1 fd8a 	bl	20ce0 <endpoint_ctx>
	if (!ep_ctx) {
   2f1cc:	b168      	cbz	r0, 2f1ea <usb_dc_ep_disable+0x26>
   2f1ce:	4605      	mov	r5, r0
	if (!ep_ctx->cfg.en) {
   2f1d0:	7a03      	ldrb	r3, [r0, #8]
   2f1d2:	b16b      	cbz	r3, 2f1f0 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   2f1d4:	4620      	mov	r0, r4
   2f1d6:	f7f6 fa1f 	bl	25618 <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
   2f1da:	2400      	movs	r4, #0
   2f1dc:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   2f1de:	4628      	mov	r0, r5
   2f1e0:	f7ff ff64 	bl	2f0ac <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   2f1e4:	722c      	strb	r4, [r5, #8]
	return 0;
   2f1e6:	4620      	mov	r0, r4
}
   2f1e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2f1ea:	f06f 0015 	mvn.w	r0, #21
   2f1ee:	e7fb      	b.n	2f1e8 <usb_dc_ep_disable+0x24>
		return -EALREADY;
   2f1f0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f1f4:	e7f8      	b.n	2f1e8 <usb_dc_ep_disable+0x24>

0002f1f6 <usb_dc_ep_read>:
{
   2f1f6:	b570      	push	{r4, r5, r6, lr}
   2f1f8:	4605      	mov	r5, r0
   2f1fa:	460c      	mov	r4, r1
   2f1fc:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2f1fe:	f7f2 ff6d 	bl	220dc <usb_dc_ep_read_wait>
	if (ret) {
   2f202:	b918      	cbnz	r0, 2f20c <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   2f204:	b11c      	cbz	r4, 2f20e <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   2f206:	4628      	mov	r0, r5
   2f208:	f7f3 f812 	bl	22230 <usb_dc_ep_read_continue>
}
   2f20c:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   2f20e:	2e00      	cmp	r6, #0
   2f210:	d1f9      	bne.n	2f206 <usb_dc_ep_read+0x10>
   2f212:	e7fb      	b.n	2f20c <usb_dc_ep_read+0x16>

0002f214 <nrf_clock_is_running>:
    switch (domain)
   2f214:	b119      	cbz	r1, 2f21e <nrf_clock_is_running+0xa>
   2f216:	2901      	cmp	r1, #1
   2f218:	d00e      	beq.n	2f238 <nrf_clock_is_running+0x24>
   2f21a:	2000      	movs	r0, #0
   2f21c:	4770      	bx	lr
            if (p_clk_src != NULL)
   2f21e:	b122      	cbz	r2, 2f22a <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2f220:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2f224:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2f228:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2f22a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   2f22e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2f232:	d10e      	bne.n	2f252 <nrf_clock_is_running+0x3e>
    return false;
   2f234:	2000      	movs	r0, #0
   2f236:	4770      	bx	lr
            if (p_clk_src != NULL)
   2f238:	b122      	cbz	r2, 2f244 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2f23a:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2f23e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2f242:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2f244:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2f248:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2f24c:	d103      	bne.n	2f256 <nrf_clock_is_running+0x42>
    return false;
   2f24e:	2000      	movs	r0, #0
   2f250:	4770      	bx	lr
                return true;
   2f252:	2001      	movs	r0, #1
   2f254:	4770      	bx	lr
                return true;
   2f256:	2001      	movs	r0, #1
}
   2f258:	4770      	bx	lr

0002f25a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2f25a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2f25c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2f260:	0089      	lsls	r1, r1, #2
   2f262:	3138      	adds	r1, #56	; 0x38
}
   2f264:	4408      	add	r0, r1
   2f266:	4770      	bx	lr

0002f268 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2f268:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2f26a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2f26e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2f272:	4770      	bx	lr

0002f274 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2f274:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   2f276:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2f27a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2f27e:	4770      	bx	lr

0002f280 <get_status>:
{
   2f280:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2f282:	b2c9      	uxtb	r1, r1
   2f284:	f7ff ffe9 	bl	2f25a <get_sub_data>
   2f288:	6880      	ldr	r0, [r0, #8]
}
   2f28a:	f000 0007 	and.w	r0, r0, #7
   2f28e:	bd08      	pop	{r3, pc}

0002f290 <set_off_state>:
	__asm__ volatile(
   2f290:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f294:	f3ef 8211 	mrs	r2, BASEPRI
   2f298:	f383 8812 	msr	BASEPRI_MAX, r3
   2f29c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f2a0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2f2a2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2f2a6:	d001      	beq.n	2f2ac <set_off_state+0x1c>
   2f2a8:	428b      	cmp	r3, r1
   2f2aa:	d107      	bne.n	2f2bc <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2f2ac:	2301      	movs	r3, #1
   2f2ae:	6003      	str	r3, [r0, #0]
	int err = 0;
   2f2b0:	2000      	movs	r0, #0
	__asm__ volatile(
   2f2b2:	f382 8811 	msr	BASEPRI, r2
   2f2b6:	f3bf 8f6f 	isb	sy
}
   2f2ba:	4770      	bx	lr
		err = -EPERM;
   2f2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f2c0:	e7f7      	b.n	2f2b2 <set_off_state+0x22>

0002f2c2 <set_starting_state>:
	__asm__ volatile(
   2f2c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f2c6:	f3ef 8211 	mrs	r2, BASEPRI
   2f2ca:	f383 8812 	msr	BASEPRI_MAX, r3
   2f2ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f2d2:	6803      	ldr	r3, [r0, #0]
   2f2d4:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2f2d8:	f003 0307 	and.w	r3, r3, #7
   2f2dc:	2b01      	cmp	r3, #1
   2f2de:	d008      	beq.n	2f2f2 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2f2e0:	458c      	cmp	ip, r1
   2f2e2:	d009      	beq.n	2f2f8 <set_starting_state+0x36>
		err = -EPERM;
   2f2e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   2f2e8:	f382 8811 	msr	BASEPRI, r2
   2f2ec:	f3bf 8f6f 	isb	sy
}
   2f2f0:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2f2f2:	6001      	str	r1, [r0, #0]
	int err = 0;
   2f2f4:	2000      	movs	r0, #0
   2f2f6:	e7f7      	b.n	2f2e8 <set_starting_state+0x26>
		err = -EALREADY;
   2f2f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f2fc:	e7f4      	b.n	2f2e8 <set_starting_state+0x26>

0002f2fe <set_on_state>:
	__asm__ volatile(
   2f2fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f302:	f3ef 8211 	mrs	r2, BASEPRI
   2f306:	f383 8812 	msr	BASEPRI_MAX, r3
   2f30a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2f30e:	6803      	ldr	r3, [r0, #0]
   2f310:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f314:	f043 0302 	orr.w	r3, r3, #2
   2f318:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2f31a:	f382 8811 	msr	BASEPRI, r2
   2f31e:	f3bf 8f6f 	isb	sy
}
   2f322:	4770      	bx	lr

0002f324 <clkstarted_handle>:
{
   2f324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f326:	4606      	mov	r6, r0
   2f328:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2f32a:	f7ff ff96 	bl	2f25a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2f32e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2f330:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2f332:	2300      	movs	r3, #0
   2f334:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2f338:	f7ff ffe1 	bl	2f2fe <set_on_state>
	if (callback) {
   2f33c:	b11d      	cbz	r5, 2f346 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2f33e:	463a      	mov	r2, r7
   2f340:	4621      	mov	r1, r4
   2f342:	4630      	mov	r0, r6
   2f344:	47a8      	blx	r5
}
   2f346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f348 <stop>:
{
   2f348:	b570      	push	{r4, r5, r6, lr}
   2f34a:	4606      	mov	r6, r0
   2f34c:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2f34e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2f350:	4621      	mov	r1, r4
   2f352:	f7ff ff82 	bl	2f25a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   2f356:	4629      	mov	r1, r5
   2f358:	3008      	adds	r0, #8
   2f35a:	f7ff ff99 	bl	2f290 <set_off_state>
	if (err < 0) {
   2f35e:	2800      	cmp	r0, #0
   2f360:	db06      	blt.n	2f370 <stop+0x28>
	get_sub_config(dev, type)->stop();
   2f362:	4621      	mov	r1, r4
   2f364:	4630      	mov	r0, r6
   2f366:	f7ff ff7f 	bl	2f268 <get_sub_config>
   2f36a:	6843      	ldr	r3, [r0, #4]
   2f36c:	4798      	blx	r3
	return 0;
   2f36e:	2000      	movs	r0, #0
}
   2f370:	bd70      	pop	{r4, r5, r6, pc}

0002f372 <api_stop>:
{
   2f372:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2f374:	2280      	movs	r2, #128	; 0x80
   2f376:	f7ff ffe7 	bl	2f348 <stop>
}
   2f37a:	bd08      	pop	{r3, pc}

0002f37c <async_start>:
{
   2f37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f380:	4606      	mov	r6, r0
   2f382:	4690      	mov	r8, r2
   2f384:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2f386:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2f388:	4629      	mov	r1, r5
   2f38a:	f7ff ff66 	bl	2f25a <get_sub_data>
   2f38e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2f390:	9906      	ldr	r1, [sp, #24]
   2f392:	3008      	adds	r0, #8
   2f394:	f7ff ff95 	bl	2f2c2 <set_starting_state>
	if (err < 0) {
   2f398:	2800      	cmp	r0, #0
   2f39a:	db09      	blt.n	2f3b0 <async_start+0x34>
	subdata->cb = cb;
   2f39c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2f3a0:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2f3a2:	4629      	mov	r1, r5
   2f3a4:	4630      	mov	r0, r6
   2f3a6:	f7ff ff5f 	bl	2f268 <get_sub_config>
   2f3aa:	6803      	ldr	r3, [r0, #0]
   2f3ac:	4798      	blx	r3
	return 0;
   2f3ae:	2000      	movs	r0, #0
}
   2f3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f3b4 <api_start>:
{
   2f3b4:	b510      	push	{r4, lr}
   2f3b6:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2f3b8:	2480      	movs	r4, #128	; 0x80
   2f3ba:	9400      	str	r4, [sp, #0]
   2f3bc:	f7ff ffde 	bl	2f37c <async_start>
}
   2f3c0:	b002      	add	sp, #8
   2f3c2:	bd10      	pop	{r4, pc}

0002f3c4 <onoff_started_callback>:
{
   2f3c4:	b510      	push	{r4, lr}
   2f3c6:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2f3c8:	b2c9      	uxtb	r1, r1
   2f3ca:	f7ff ff53 	bl	2f274 <get_onoff_manager>
	notify(mgr, 0);
   2f3ce:	2100      	movs	r1, #0
   2f3d0:	47a0      	blx	r4
}
   2f3d2:	bd10      	pop	{r4, pc}

0002f3d4 <hfclk_start>:
{
   2f3d4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2f3d6:	2001      	movs	r0, #1
   2f3d8:	f7f4 fee6 	bl	241a8 <nrfx_clock_start>
}
   2f3dc:	bd08      	pop	{r3, pc}

0002f3de <lfclk_start>:
{
   2f3de:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2f3e0:	2000      	movs	r0, #0
   2f3e2:	f7f4 fee1 	bl	241a8 <nrfx_clock_start>
}
   2f3e6:	bd08      	pop	{r3, pc}

0002f3e8 <hfclk_stop>:
{
   2f3e8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2f3ea:	2001      	movs	r0, #1
   2f3ec:	f001 f881 	bl	304f2 <nrfx_clock_stop>
}
   2f3f0:	bd08      	pop	{r3, pc}

0002f3f2 <lfclk_stop>:
{
   2f3f2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2f3f4:	2000      	movs	r0, #0
   2f3f6:	f001 f87c 	bl	304f2 <nrfx_clock_stop>
}
   2f3fa:	bd08      	pop	{r3, pc}

0002f3fc <k_msleep>:
{
   2f3fc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2f3fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2f402:	17c1      	asrs	r1, r0, #31
   2f404:	03c9      	lsls	r1, r1, #15
   2f406:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2f40a:	03c0      	lsls	r0, r0, #15
   2f40c:	f240 33e7 	movw	r3, #999	; 0x3e7
   2f410:	18c0      	adds	r0, r0, r3
   2f412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f416:	f04f 0300 	mov.w	r3, #0
   2f41a:	f141 0100 	adc.w	r1, r1, #0
   2f41e:	f7d0 fe6f 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2f422:	f7f7 fc7b 	bl	26d1c <z_impl_k_sleep>
}
   2f426:	bd08      	pop	{r3, pc}

0002f428 <blocking_start_callback>:
{
   2f428:	b508      	push	{r3, lr}
   2f42a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2f42c:	f7f6 ff1e 	bl	2626c <z_impl_k_sem_give>
}
   2f430:	bd08      	pop	{r3, pc}

0002f432 <rng_pool_put>:
	uint8_t first = rngp->first_read;
   2f432:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2f434:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2f436:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2f43a:	1a9a      	subs	r2, r3, r2
   2f43c:	ea3c 0202 	bics.w	r2, ip, r2
   2f440:	d007      	beq.n	2f452 <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   2f442:	18c2      	adds	r2, r0, r3
   2f444:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2f446:	3301      	adds	r3, #1
   2f448:	ea03 030c 	and.w	r3, r3, ip
   2f44c:	7083      	strb	r3, [r0, #2]
	return 0;
   2f44e:	2000      	movs	r0, #0
   2f450:	4770      	bx	lr
		return -ENOBUFS;
   2f452:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2f456:	4770      	bx	lr

0002f458 <rng_pool_init>:
	rngp->first_alloc = 0U;
   2f458:	2300      	movs	r3, #0
   2f45a:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2f45c:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2f45e:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2f460:	3901      	subs	r1, #1
   2f462:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2f464:	7102      	strb	r2, [r0, #4]
}
   2f466:	4770      	bx	lr

0002f468 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2f468:	2000      	movs	r0, #0
   2f46a:	4770      	bx	lr

0002f46c <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2f46c:	b538      	push	{r3, r4, r5, lr}
   2f46e:	460c      	mov	r4, r1
   2f470:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2f472:	f7ec fbe5 	bl	1bc40 <bt_is_ready>
   2f476:	b120      	cbz	r0, 2f482 <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2f478:	4629      	mov	r1, r5
   2f47a:	4620      	mov	r0, r4
   2f47c:	f7eb fcfe 	bl	1ae7c <bt_hci_le_rand>
}
   2f480:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2f482:	f06f 000a 	mvn.w	r0, #10
   2f486:	e7fb      	b.n	2f480 <entropy_bt_get_entropy+0x14>

0002f488 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2f488:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f48a:	b083      	sub	sp, #12
   2f48c:	460f      	mov	r7, r1
   2f48e:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2f490:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2f494:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2f496:	e00a      	b.n	2f4ae <entropy_cc3xx_rng_get_entropy+0x26>
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2f498:	ab01      	add	r3, sp, #4
   2f49a:	462a      	mov	r2, r5
   2f49c:	1939      	adds	r1, r7, r4
   2f49e:	2000      	movs	r0, #0
   2f4a0:	f7f8 fb6e 	bl	27b80 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   2f4a4:	b970      	cbnz	r0, 2f4c4 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
		}

		if (olen != chunk_size) {
   2f4a6:	9b01      	ldr	r3, [sp, #4]
   2f4a8:	42ab      	cmp	r3, r5
   2f4aa:	d10f      	bne.n	2f4cc <entropy_cc3xx_rng_get_entropy+0x44>
			return -EINVAL;
		}

		offset += chunk_size;
   2f4ac:	442c      	add	r4, r5
	while (offset < length) {
   2f4ae:	42a6      	cmp	r6, r4
   2f4b0:	d905      	bls.n	2f4be <entropy_cc3xx_rng_get_entropy+0x36>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2f4b2:	1b33      	subs	r3, r6, r4
   2f4b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2f4b8:	d2ee      	bcs.n	2f498 <entropy_cc3xx_rng_get_entropy+0x10>
			chunk_size = length - offset;
   2f4ba:	461d      	mov	r5, r3
   2f4bc:	e7ec      	b.n	2f498 <entropy_cc3xx_rng_get_entropy+0x10>
	}

	if (offset == length) {
   2f4be:	d008      	beq.n	2f4d2 <entropy_cc3xx_rng_get_entropy+0x4a>
	int err = EINVAL;
   2f4c0:	2016      	movs	r0, #22
   2f4c2:	e001      	b.n	2f4c8 <entropy_cc3xx_rng_get_entropy+0x40>
			return -EINVAL;
   2f4c4:	f06f 0015 	mvn.w	r0, #21
		err = 0;
	}

	return err;
}
   2f4c8:	b003      	add	sp, #12
   2f4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
   2f4cc:	f06f 0015 	mvn.w	r0, #21
   2f4d0:	e7fa      	b.n	2f4c8 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   2f4d2:	2000      	movs	r0, #0
   2f4d4:	e7f8      	b.n	2f4c8 <entropy_cc3xx_rng_get_entropy+0x40>

0002f4d6 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2f4d6:	b508      	push	{r3, lr}
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2f4d8:	2200      	movs	r2, #0
   2f4da:	4611      	mov	r1, r2
   2f4dc:	4610      	mov	r0, r2
   2f4de:	f7f8 fb1f 	bl	27b20 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
   2f4e2:	b900      	cbnz	r0, 2f4e6 <entropy_cc3xx_rng_init+0x10>
		return -EINVAL;
	}

	return 0;
}
   2f4e4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2f4e6:	f06f 0015 	mvn.w	r0, #21
   2f4ea:	e7fb      	b.n	2f4e4 <entropy_cc3xx_rng_init+0xe>

0002f4ec <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2f4ec:	b510      	push	{r4, lr}
   2f4ee:	b084      	sub	sp, #16
   2f4f0:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2f4f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2f4f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
}
#endif /* defined(CONFIG_SOC_HFXO_CAP_INTERNAL) */

static inline void soc_secure_read_deviceid(uint32_t deviceid[2])
{
	deviceid[0] = nrf_ficr_deviceid_get(NRF_FICR, 0);
   2f4f8:	9200      	str	r2, [sp, #0]
   2f4fa:	6e59      	ldr	r1, [r3, #100]	; 0x64
	deviceid[1] = nrf_ficr_deviceid_get(NRF_FICR, 1);
   2f4fc:	9101      	str	r1, [sp, #4]
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   2f4fe:	0a0b      	lsrs	r3, r1, #8
   2f500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2f504:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   2f508:	ea4f 2c01 	mov.w	ip, r1, lsl #8
   2f50c:	f40c 0c7f 	and.w	ip, ip, #16711680	; 0xff0000
   2f510:	ea43 030c 	orr.w	r3, r3, ip
   2f514:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2f518:	9302      	str	r3, [sp, #8]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   2f51a:	0a13      	lsrs	r3, r2, #8
   2f51c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2f520:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2f524:	0211      	lsls	r1, r2, #8
   2f526:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2f52a:	430b      	orrs	r3, r1
   2f52c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2f530:	9303      	str	r3, [sp, #12]

	if (length > sizeof(dev_id.id)) {
   2f532:	2c08      	cmp	r4, #8
   2f534:	d900      	bls.n	2f538 <z_impl_hwinfo_get_device_id+0x4c>
		length = sizeof(dev_id.id);
   2f536:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   2f538:	4622      	mov	r2, r4
   2f53a:	a902      	add	r1, sp, #8
   2f53c:	f7fd f956 	bl	2c7ec <memcpy>

	return length;
}
   2f540:	4620      	mov	r0, r4
   2f542:	b004      	add	sp, #16
   2f544:	bd10      	pop	{r4, pc}

0002f546 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2f546:	b500      	push	{lr}
	*state = &config->states[0];
   2f548:	6843      	ldr	r3, [r0, #4]
   2f54a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2f54c:	e001      	b.n	2f552 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2f54e:	3308      	adds	r3, #8
   2f550:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2f552:	6813      	ldr	r3, [r2, #0]
   2f554:	f890 c008 	ldrb.w	ip, [r0, #8]
   2f558:	f8d0 e004 	ldr.w	lr, [r0, #4]
   2f55c:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   2f560:	4563      	cmp	r3, ip
   2f562:	d205      	bcs.n	2f570 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   2f564:	f893 c005 	ldrb.w	ip, [r3, #5]
   2f568:	458c      	cmp	ip, r1
   2f56a:	d1f0      	bne.n	2f54e <pinctrl_lookup_state+0x8>
			return 0;
   2f56c:	2000      	movs	r0, #0
   2f56e:	e001      	b.n	2f574 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   2f570:	f06f 0001 	mvn.w	r0, #1
}
   2f574:	f85d fb04 	ldr.w	pc, [sp], #4

0002f578 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   2f578:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f57a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2f57c:	f04f 0140 	mov.w	r1, #64	; 0x40
   2f580:	f3ef 8311 	mrs	r3, BASEPRI
   2f584:	f381 8812 	msr	BASEPRI_MAX, r1
   2f588:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f58c:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2f590:	b131      	cbz	r1, 2f5a0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f592:	2100      	movs	r1, #0
   2f594:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   2f598:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f59c:	2101      	movs	r1, #1
   2f59e:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   2f5a0:	f383 8811 	msr	BASEPRI, r3
   2f5a4:	f3bf 8f6f 	isb	sy
}
   2f5a8:	4770      	bx	lr

0002f5aa <uarte_nrfx_isr_int>:
{
   2f5aa:	b570      	push	{r4, r5, r6, lr}
   2f5ac:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   2f5ae:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   2f5b0:	6835      	ldr	r5, [r6, #0]
    return p_reg->INTENSET & mask;
   2f5b2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2f5b6:	f413 7f80 	tst.w	r3, #256	; 0x100
   2f5ba:	d003      	beq.n	2f5c4 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f5bc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   2f5c0:	2b00      	cmp	r3, #0
   2f5c2:	d138      	bne.n	2f636 <uarte_nrfx_isr_int+0x8c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f5c4:	6873      	ldr	r3, [r6, #4]
   2f5c6:	f013 0f10 	tst.w	r3, #16
   2f5ca:	d01a      	beq.n	2f602 <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
   2f5cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f5d0:	f3ef 8311 	mrs	r3, BASEPRI
   2f5d4:	f382 8812 	msr	BASEPRI_MAX, r2
   2f5d8:	f3bf 8f6f 	isb	sy
   2f5dc:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2f5e0:	b112      	cbz	r2, 2f5e8 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2f5e2:	2200      	movs	r2, #0
   2f5e4:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
		struct uarte_nrfx_data *data = dev->data;
   2f5e8:	6922      	ldr	r2, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2f5ea:	68d2      	ldr	r2, [r2, #12]
   2f5ec:	b10a      	cbz	r2, 2f5f2 <uarte_nrfx_isr_int+0x48>
   2f5ee:	6912      	ldr	r2, [r2, #16]
   2f5f0:	b91a      	cbnz	r2, 2f5fa <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
   2f5f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2f5f6:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   2f5fa:	f383 8811 	msr	BASEPRI, r3
   2f5fe:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   2f602:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   2f604:	68da      	ldr	r2, [r3, #12]
   2f606:	b1aa      	cbz	r2, 2f634 <uarte_nrfx_isr_int+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f608:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2f60c:	b121      	cbz	r1, 2f618 <uarte_nrfx_isr_int+0x6e>
		data->int_driven->fifo_fill_lock = 0;
   2f60e:	2100      	movs	r1, #0
   2f610:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2f612:	68da      	ldr	r2, [r3, #12]
   2f614:	7b92      	ldrb	r2, [r2, #14]
   2f616:	b98a      	cbnz	r2, 2f63c <uarte_nrfx_isr_int+0x92>
   2f618:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2f61c:	b122      	cbz	r2, 2f628 <uarte_nrfx_isr_int+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f61e:	2200      	movs	r2, #0
   2f620:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   2f624:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   2f628:	68da      	ldr	r2, [r3, #12]
   2f62a:	6813      	ldr	r3, [r2, #0]
   2f62c:	b113      	cbz	r3, 2f634 <uarte_nrfx_isr_int+0x8a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2f62e:	6851      	ldr	r1, [r2, #4]
   2f630:	4620      	mov	r0, r4
   2f632:	4798      	blx	r3
}
   2f634:	bd70      	pop	{r4, r5, r6, pc}
		endtx_isr(dev);
   2f636:	f7ff ff9f 	bl	2f578 <endtx_isr>
   2f63a:	e7c3      	b.n	2f5c4 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   2f63c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2f640:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2f644:	68db      	ldr	r3, [r3, #12]
   2f646:	7399      	strb	r1, [r3, #14]
			return;
   2f648:	e7f4      	b.n	2f634 <uarte_nrfx_isr_int+0x8a>

0002f64a <uarte_nrfx_configure>:
{
   2f64a:	b570      	push	{r4, r5, r6, lr}
   2f64c:	b082      	sub	sp, #8
   2f64e:	4606      	mov	r6, r0
   2f650:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   2f652:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   2f654:	794b      	ldrb	r3, [r1, #5]
   2f656:	2b01      	cmp	r3, #1
   2f658:	d006      	beq.n	2f668 <uarte_nrfx_configure+0x1e>
   2f65a:	2b03      	cmp	r3, #3
   2f65c:	d011      	beq.n	2f682 <uarte_nrfx_configure+0x38>
   2f65e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2f662:	4618      	mov	r0, r3
   2f664:	b002      	add	sp, #8
   2f666:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2f668:	2300      	movs	r3, #0
   2f66a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2f66e:	79a3      	ldrb	r3, [r4, #6]
   2f670:	2b03      	cmp	r3, #3
   2f672:	d137      	bne.n	2f6e4 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   2f674:	79e3      	ldrb	r3, [r4, #7]
   2f676:	b143      	cbz	r3, 2f68a <uarte_nrfx_configure+0x40>
   2f678:	2b01      	cmp	r3, #1
   2f67a:	d010      	beq.n	2f69e <uarte_nrfx_configure+0x54>
   2f67c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f680:	e7ef      	b.n	2f662 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2f682:	2310      	movs	r3, #16
   2f684:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   2f688:	e7f1      	b.n	2f66e <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2f68a:	2300      	movs	r3, #0
   2f68c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2f690:	7923      	ldrb	r3, [r4, #4]
   2f692:	b143      	cbz	r3, 2f6a6 <uarte_nrfx_configure+0x5c>
   2f694:	2b02      	cmp	r3, #2
   2f696:	d021      	beq.n	2f6dc <uarte_nrfx_configure+0x92>
   2f698:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f69c:	e7e1      	b.n	2f662 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2f69e:	2301      	movs	r3, #1
   2f6a0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2f6a4:	e7f4      	b.n	2f690 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2f6a6:	2300      	movs	r3, #0
   2f6a8:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2f6ac:	6821      	ldr	r1, [r4, #0]
   2f6ae:	4630      	mov	r0, r6
   2f6b0:	f7f3 fa22 	bl	22af8 <baudrate_set>
   2f6b4:	4603      	mov	r3, r0
   2f6b6:	b9c0      	cbnz	r0, 2f6ea <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   2f6b8:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   2f6ba:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2f6bc:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   2f6c0:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   2f6c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2f6c8:	4331      	orrs	r1, r6
   2f6ca:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2f6cc:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   2f6d0:	3504      	adds	r5, #4
   2f6d2:	e894 0003 	ldmia.w	r4, {r0, r1}
   2f6d6:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   2f6da:	e7c2      	b.n	2f662 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2f6dc:	230e      	movs	r3, #14
   2f6de:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2f6e2:	e7e3      	b.n	2f6ac <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   2f6e4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f6e8:	e7bb      	b.n	2f662 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   2f6ea:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f6ee:	e7b8      	b.n	2f662 <uarte_nrfx_configure+0x18>

0002f6f0 <uarte_nrfx_config_get>:
{
   2f6f0:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   2f6f2:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   2f6f4:	3304      	adds	r3, #4
   2f6f6:	e893 0003 	ldmia.w	r3, {r0, r1}
   2f6fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
   2f6fe:	2000      	movs	r0, #0
   2f700:	4770      	bx	lr

0002f702 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   2f702:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f704:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f706:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f70a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2f70e:	4770      	bx	lr

0002f710 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2f710:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f712:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2f714:	685b      	ldr	r3, [r3, #4]
   2f716:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f71a:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2f71e:	b929      	cbnz	r1, 2f72c <is_tx_ready+0x1c>
   2f720:	b933      	cbnz	r3, 2f730 <is_tx_ready+0x20>
   2f722:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2f726:	b92b      	cbnz	r3, 2f734 <is_tx_ready+0x24>
   2f728:	2000      	movs	r0, #0
   2f72a:	4770      	bx	lr
   2f72c:	2001      	movs	r0, #1
   2f72e:	4770      	bx	lr
   2f730:	2000      	movs	r0, #0
   2f732:	4770      	bx	lr
   2f734:	2001      	movs	r0, #1
}
   2f736:	4770      	bx	lr

0002f738 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f738:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f73a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f73c:	2208      	movs	r2, #8
   2f73e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2f742:	4770      	bx	lr

0002f744 <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f744:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f746:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2f748:	2200      	movs	r2, #0
   2f74a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2f74e:	4770      	bx	lr

0002f750 <uarte_nrfx_poll_in>:
{
   2f750:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   2f752:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2f754:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f756:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f758:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f75c:	b15a      	cbz	r2, 2f776 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   2f75e:	69a2      	ldr	r2, [r4, #24]
   2f760:	7812      	ldrb	r2, [r2, #0]
   2f762:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f764:	2000      	movs	r0, #0
   2f766:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2f76a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f76e:	2201      	movs	r2, #1
   2f770:	601a      	str	r2, [r3, #0]
}
   2f772:	bc10      	pop	{r4}
   2f774:	4770      	bx	lr
		return -1;
   2f776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f77a:	e7fa      	b.n	2f772 <uarte_nrfx_poll_in+0x22>

0002f77c <uarte_nrfx_fifo_read>:
	const struct uarte_nrfx_config *config = dev->config;
   2f77c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f77e:	681b      	ldr	r3, [r3, #0]
	const struct uarte_nrfx_data *data = dev->data;
   2f780:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f782:	2a00      	cmp	r2, #0
   2f784:	dd0d      	ble.n	2f7a2 <uarte_nrfx_fifo_read+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f786:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2f78a:	b162      	cbz	r2, 2f7a6 <uarte_nrfx_fifo_read+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f78c:	2200      	movs	r2, #0
   2f78e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2f792:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   2f796:	6982      	ldr	r2, [r0, #24]
   2f798:	7812      	ldrb	r2, [r2, #0]
   2f79a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f79c:	2001      	movs	r0, #1
   2f79e:	6018      	str	r0, [r3, #0]
}
   2f7a0:	4770      	bx	lr
	int num_rx = 0;
   2f7a2:	2000      	movs	r0, #0
   2f7a4:	4770      	bx	lr
   2f7a6:	2000      	movs	r0, #0
}
   2f7a8:	4770      	bx	lr

0002f7aa <uarte_nrfx_irq_tx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f7aa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f7ac:	681a      	ldr	r2, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   2f7ae:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   2f7b0:	f04f 0040 	mov.w	r0, #64	; 0x40
   2f7b4:	f3ef 8311 	mrs	r3, BASEPRI
   2f7b8:	f380 8812 	msr	BASEPRI_MAX, r0
   2f7bc:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2f7c0:	68c9      	ldr	r1, [r1, #12]
   2f7c2:	2000      	movs	r0, #0
   2f7c4:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2f7c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2f7ca:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2f7ce:	f383 8811 	msr	BASEPRI, r3
   2f7d2:	f3bf 8f6f 	isb	sy
}
   2f7d6:	4770      	bx	lr

0002f7d8 <uarte_nrfx_irq_tx_disable>:
	struct uarte_nrfx_data *data = dev->data;
   2f7d8:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   2f7da:	68db      	ldr	r3, [r3, #12]
   2f7dc:	2201      	movs	r2, #1
   2f7de:	739a      	strb	r2, [r3, #14]
}
   2f7e0:	4770      	bx	lr

0002f7e2 <uarte_nrfx_irq_tx_ready_complete>:
	const struct uarte_nrfx_config *config = dev->config;
   2f7e2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f7e4:	6819      	ldr	r1, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   2f7e6:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   2f7e8:	68db      	ldr	r3, [r3, #12]
   2f7ea:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2f7ec:	b95a      	cbnz	r2, 2f806 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f7ee:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2f7f2:	b152      	cbz	r2, 2f80a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2f7f4:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2f7f8:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   2f7fc:	d007      	beq.n	2f80e <uarte_nrfx_irq_tx_ready_complete+0x2c>
		data->int_driven->fifo_fill_lock = 0;
   2f7fe:	2200      	movs	r2, #0
   2f800:	611a      	str	r2, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2f802:	2001      	movs	r0, #1
   2f804:	4770      	bx	lr
   2f806:	2000      	movs	r0, #0
   2f808:	4770      	bx	lr
   2f80a:	2000      	movs	r0, #0
   2f80c:	4770      	bx	lr
   2f80e:	2000      	movs	r0, #0
}
   2f810:	4770      	bx	lr

0002f812 <uarte_nrfx_irq_rx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2f812:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f814:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f816:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2f81a:	3800      	subs	r0, #0
   2f81c:	bf18      	it	ne
   2f81e:	2001      	movne	r0, #1
   2f820:	4770      	bx	lr

0002f822 <uarte_nrfx_irq_rx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f822:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f824:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2f826:	2210      	movs	r2, #16
   2f828:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f82c:	4770      	bx	lr

0002f82e <uarte_nrfx_irq_rx_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f82e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f830:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2f832:	2210      	movs	r2, #16
   2f834:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2f838:	4770      	bx	lr

0002f83a <uarte_nrfx_irq_err_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f83a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f83c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2f83e:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f842:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f846:	4770      	bx	lr

0002f848 <uarte_nrfx_irq_err_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f848:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f84a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2f84c:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f850:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2f854:	4770      	bx	lr

0002f856 <uarte_nrfx_irq_is_pending>:
{
   2f856:	b538      	push	{r3, r4, r5, lr}
   2f858:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   2f85a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f85c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2f85e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2f862:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   2f866:	d106      	bne.n	2f876 <uarte_nrfx_irq_is_pending+0x20>
   2f868:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   2f86c:	f013 0f10 	tst.w	r3, #16
   2f870:	d107      	bne.n	2f882 <uarte_nrfx_irq_is_pending+0x2c>
   2f872:	2000      	movs	r0, #0
}
   2f874:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2f876:	f7ff ffb4 	bl	2f7e2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2f87a:	2800      	cmp	r0, #0
   2f87c:	d0f4      	beq.n	2f868 <uarte_nrfx_irq_is_pending+0x12>
		||
   2f87e:	2001      	movs	r0, #1
   2f880:	e7f8      	b.n	2f874 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   2f882:	4620      	mov	r0, r4
   2f884:	f7ff ffc5 	bl	2f812 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2f888:	2800      	cmp	r0, #0
   2f88a:	d0f3      	beq.n	2f874 <uarte_nrfx_irq_is_pending+0x1e>
		||
   2f88c:	2001      	movs	r0, #1
   2f88e:	e7f1      	b.n	2f874 <uarte_nrfx_irq_is_pending+0x1e>

0002f890 <uarte_nrfx_irq_update>:
}
   2f890:	2001      	movs	r0, #1
   2f892:	4770      	bx	lr

0002f894 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2f894:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   2f896:	68d8      	ldr	r0, [r3, #12]
   2f898:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   2f89a:	68db      	ldr	r3, [r3, #12]
   2f89c:	605a      	str	r2, [r3, #4]
}
   2f89e:	4770      	bx	lr

0002f8a0 <wait_for_tx_stopped>:
 * There are 2 configurations that must be handled:
 * - ENDTX->TXSTOPPED PPI enabled - just pend until TXSTOPPED event is set
 * - disable ENDTX interrupt and manually trigger STOPTX, pend for TXSTOPPED
 */
static void wait_for_tx_stopped(const struct device *dev)
{
   2f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2f8a2:	6842      	ldr	r2, [r0, #4]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2f8a4:	6857      	ldr	r7, [r2, #4]
	return config->uarte_regs;
   2f8a6:	6815      	ldr	r5, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	bool res;

	if (!ppi_endtx) {
   2f8a8:	f017 0702 	ands.w	r7, r7, #2
   2f8ac:	d118      	bne.n	2f8e0 <wait_for_tx_stopped+0x40>
   2f8ae:	4606      	mov	r6, r0
    p_reg->INTENCLR = mask;
   2f8b0:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f8b4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
		 * including the one that uarte interrupt will not preempt.
		 * Disable endtx interrupt to ensure that it will not be triggered
		 * (if in lower priority context) and stop TX if necessary.
		 */
		nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ENDTX_MASK);
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   2f8b8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2f8bc:	4630      	mov	r0, r6
   2f8be:	f7ff ff27 	bl	2f710 <is_tx_ready>
   2f8c2:	b920      	cbnz	r0, 2f8ce <wait_for_tx_stopped+0x2e>
   2f8c4:	2001      	movs	r0, #1
   2f8c6:	f000 feb6 	bl	30636 <nrfx_busy_wait>
   2f8ca:	3c01      	subs	r4, #1
   2f8cc:	d1f6      	bne.n	2f8bc <wait_for_tx_stopped+0x1c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f8ce:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2f8d2:	b92b      	cbnz	r3, 2f8e0 <wait_for_tx_stopped+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f8d4:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   2f8d8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f8dc:	2301      	movs	r3, #1
   2f8de:	60eb      	str	r3, [r5, #12]
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   2f8e0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f8e4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
		}
	}

	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED),
   2f8e8:	b923      	cbnz	r3, 2f8f4 <wait_for_tx_stopped+0x54>
   2f8ea:	2001      	movs	r0, #1
   2f8ec:	f000 fea3 	bl	30636 <nrfx_busy_wait>
   2f8f0:	3c01      	subs	r4, #1
   2f8f2:	d1f7      	bne.n	2f8e4 <wait_for_tx_stopped+0x44>
		      1000, 1, res);

	if (!ppi_endtx) {
   2f8f4:	b91f      	cbnz	r7, 2f8fe <wait_for_tx_stopped+0x5e>
    p_reg->INTENSET = mask;
   2f8f6:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f8fa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}
}
   2f8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f900 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2f900:	b510      	push	{r4, lr}
   2f902:	b082      	sub	sp, #8
   2f904:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2f906:	aa01      	add	r2, sp, #4
   2f908:	f7ff fe1d 	bl	2f546 <pinctrl_lookup_state>
	if (ret < 0) {
   2f90c:	2800      	cmp	r0, #0
   2f90e:	db05      	blt.n	2f91c <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2f910:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2f912:	6822      	ldr	r2, [r4, #0]
   2f914:	7919      	ldrb	r1, [r3, #4]
   2f916:	6818      	ldr	r0, [r3, #0]
   2f918:	f7f3 f87c 	bl	22a14 <pinctrl_configure_pins>
}
   2f91c:	b002      	add	sp, #8
   2f91e:	bd10      	pop	{r4, pc}

0002f920 <uarte_nrfx_pm_action>:


static int uarte_nrfx_pm_action(const struct device *dev,
				enum pm_device_action action)
{
   2f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2f922:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   2f924:	6834      	ldr	r4, [r6, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
#if defined(UARTE_ANY_ASYNC) || defined(UARTE_INTERRUPT_DRIVEN)
	struct uarte_nrfx_data *data = dev->data;
   2f926:	6907      	ldr	r7, [r0, #16]
#endif
	const struct uarte_nrfx_config *cfg = dev->config;
	int ret;

	switch (action) {
   2f928:	b319      	cbz	r1, 2f972 <uarte_nrfx_pm_action+0x52>
   2f92a:	2901      	cmp	r1, #1
   2f92c:	d15c      	bne.n	2f9e8 <uarte_nrfx_pm_action+0xc8>
	case PM_DEVICE_ACTION_RESUME:
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   2f92e:	6873      	ldr	r3, [r6, #4]
   2f930:	f013 0f01 	tst.w	r3, #1
   2f934:	d116      	bne.n	2f964 <uarte_nrfx_pm_action+0x44>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f936:	2308      	movs	r3, #8
   2f938:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			}

			return 0;
		}
#endif
		if (!cfg->disable_rx) {
   2f93c:	7a33      	ldrb	r3, [r6, #8]
   2f93e:	2b00      	cmp	r3, #0
   2f940:	d155      	bne.n	2f9ee <uarte_nrfx_pm_action+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f942:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2f946:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f94a:	2301      	movs	r3, #1
   2f94c:	6023      	str	r3, [r4, #0]

			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
#ifdef UARTE_INTERRUPT_DRIVEN
			if (data->int_driven &&
   2f94e:	68fb      	ldr	r3, [r7, #12]
   2f950:	2b00      	cmp	r3, #0
   2f952:	d04e      	beq.n	2f9f2 <uarte_nrfx_pm_action+0xd2>
			    data->int_driven->rx_irq_enabled) {
   2f954:	7bdb      	ldrb	r3, [r3, #15]
			if (data->int_driven &&
   2f956:	2b00      	cmp	r3, #0
   2f958:	d04d      	beq.n	2f9f6 <uarte_nrfx_pm_action+0xd6>
    p_reg->INTENSET = mask;
   2f95a:	2310      	movs	r3, #16
   2f95c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2f960:	2000      	movs	r0, #0
}
   2f962:	e043      	b.n	2f9ec <uarte_nrfx_pm_action+0xcc>
			ret = pinctrl_apply_state(cfg->pcfg,
   2f964:	2100      	movs	r1, #0
   2f966:	68f0      	ldr	r0, [r6, #12]
   2f968:	f7ff ffca 	bl	2f900 <pinctrl_apply_state>
			if (ret < 0) {
   2f96c:	2800      	cmp	r0, #0
   2f96e:	dae2      	bge.n	2f936 <uarte_nrfx_pm_action+0x16>
   2f970:	e03c      	b.n	2f9ec <uarte_nrfx_pm_action+0xcc>
   2f972:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f974:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2f978:	b313      	cbz	r3, 2f9c0 <uarte_nrfx_pm_action+0xa0>
			if (data->int_driven) {
   2f97a:	68fa      	ldr	r2, [r7, #12]
   2f97c:	b152      	cbz	r2, 2f994 <uarte_nrfx_pm_action+0x74>
    return p_reg->INTENSET & mask;
   2f97e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
					nrf_uarte_int_enable_check(uarte,
   2f982:	f3c3 1300 	ubfx	r3, r3, #4, #1
				data->int_driven->rx_irq_enabled =
   2f986:	73d3      	strb	r3, [r2, #15]
				if (data->int_driven->rx_irq_enabled) {
   2f988:	68fb      	ldr	r3, [r7, #12]
   2f98a:	7bdb      	ldrb	r3, [r3, #15]
   2f98c:	b113      	cbz	r3, 2f994 <uarte_nrfx_pm_action+0x74>
    p_reg->INTENCLR = mask;
   2f98e:	2310      	movs	r3, #16
   2f990:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f994:	2301      	movs	r3, #1
   2f996:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f998:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
						      NRF_UARTE_EVENT_RXTO) &&
   2f99c:	b91b      	cbnz	r3, 2f9a6 <uarte_nrfx_pm_action+0x86>
   2f99e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2f9a2:	2b00      	cmp	r3, #0
   2f9a4:	d0f8      	beq.n	2f998 <uarte_nrfx_pm_action+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f9a6:	2300      	movs	r3, #0
   2f9a8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2f9ac:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   2f9b0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   2f9b4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   2f9b8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2f9bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		wait_for_tx_stopped(dev);
   2f9c0:	4628      	mov	r0, r5
   2f9c2:	f7ff ff6d 	bl	2f8a0 <wait_for_tx_stopped>
		uart_disable(dev);
   2f9c6:	4628      	mov	r0, r5
   2f9c8:	f7ff febc 	bl	2f744 <uart_disable>
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   2f9cc:	6873      	ldr	r3, [r6, #4]
   2f9ce:	f013 0f01 	tst.w	r3, #1
   2f9d2:	d101      	bne.n	2f9d8 <uarte_nrfx_pm_action+0xb8>
	return 0;
   2f9d4:	2000      	movs	r0, #0
   2f9d6:	e009      	b.n	2f9ec <uarte_nrfx_pm_action+0xcc>
			ret = pinctrl_apply_state(cfg->pcfg,
   2f9d8:	2101      	movs	r1, #1
   2f9da:	68f0      	ldr	r0, [r6, #12]
   2f9dc:	f7ff ff90 	bl	2f900 <pinctrl_apply_state>
			if (ret < 0) {
   2f9e0:	2800      	cmp	r0, #0
   2f9e2:	db03      	blt.n	2f9ec <uarte_nrfx_pm_action+0xcc>
	return 0;
   2f9e4:	2000      	movs	r0, #0
   2f9e6:	e001      	b.n	2f9ec <uarte_nrfx_pm_action+0xcc>
	switch (action) {
   2f9e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2f9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   2f9ee:	2000      	movs	r0, #0
   2f9f0:	e7fc      	b.n	2f9ec <uarte_nrfx_pm_action+0xcc>
   2f9f2:	2000      	movs	r0, #0
   2f9f4:	e7fa      	b.n	2f9ec <uarte_nrfx_pm_action+0xcc>
   2f9f6:	2000      	movs	r0, #0
   2f9f8:	e7f8      	b.n	2f9ec <uarte_nrfx_pm_action+0xcc>

0002f9fa <tx_start>:
{
   2f9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f9fe:	b082      	sub	sp, #8
   2fa00:	4605      	mov	r5, r0
   2fa02:	460f      	mov	r7, r1
   2fa04:	4616      	mov	r6, r2
	const struct uarte_nrfx_config *config = dev->config;
   2fa06:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return config->uarte_regs;
   2fa0a:	f8d8 4000 	ldr.w	r4, [r8]
	(void)pm_device_state_get(dev, &state);
   2fa0e:	f10d 0107 	add.w	r1, sp, #7
   2fa12:	f7fc f8ee 	bl	2bbf2 <pm_device_state_get>
	if (state != PM_DEVICE_STATE_ACTIVE) {
   2fa16:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fa1a:	b993      	cbnz	r3, 2fa42 <tx_start+0x48>

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2fa1c:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2fa20:	f8c4 6548 	str.w	r6, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fa24:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2fa28:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   2fa2c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   2fa30:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fa34:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2fa38:	f013 0f10 	tst.w	r3, #16
   2fa3c:	d104      	bne.n	2fa48 <tx_start+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fa3e:	2301      	movs	r3, #1
   2fa40:	60a3      	str	r3, [r4, #8]
}
   2fa42:	b002      	add	sp, #8
   2fa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2fa48:	2101      	movs	r1, #1
   2fa4a:	4628      	mov	r0, r5
   2fa4c:	f7ff fe74 	bl	2f738 <uarte_enable>
    p_reg->INTENSET = mask;
   2fa50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2fa54:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2fa58:	e7f1      	b.n	2fa3e <tx_start+0x44>

0002fa5a <uarte_nrfx_fifo_fill>:
{
   2fa5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fa5c:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   2fa5e:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2fa60:	68fb      	ldr	r3, [r7, #12]
   2fa62:	899c      	ldrh	r4, [r3, #12]
   2fa64:	4294      	cmp	r4, r2
   2fa66:	bfa8      	it	ge
   2fa68:	4614      	movge	r4, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2fa6a:	3310      	adds	r3, #16
   2fa6c:	2201      	movs	r2, #1
   2fa6e:	f3bf 8f5b 	dmb	ish
   2fa72:	e853 0f00 	ldrex	r0, [r3]
   2fa76:	2800      	cmp	r0, #0
   2fa78:	d103      	bne.n	2fa82 <uarte_nrfx_fifo_fill+0x28>
   2fa7a:	e843 2500 	strex	r5, r2, [r3]
   2fa7e:	2d00      	cmp	r5, #0
   2fa80:	d1f7      	bne.n	2fa72 <uarte_nrfx_fifo_fill+0x18>
   2fa82:	f3bf 8f5b 	dmb	ish
   2fa86:	d120      	bne.n	2faca <uarte_nrfx_fifo_fill+0x70>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   2fa88:	68fb      	ldr	r3, [r7, #12]
   2fa8a:	4622      	mov	r2, r4
   2fa8c:	6898      	ldr	r0, [r3, #8]
   2fa8e:	f7fc fead 	bl	2c7ec <memcpy>
	__asm__ volatile(
   2fa92:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fa96:	f3ef 8511 	mrs	r5, BASEPRI
   2fa9a:	f383 8812 	msr	BASEPRI_MAX, r3
   2fa9e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2faa2:	4630      	mov	r0, r6
   2faa4:	f7ff fe34 	bl	2f710 <is_tx_ready>
   2faa8:	b940      	cbnz	r0, 2fabc <uarte_nrfx_fifo_fill+0x62>
		data->int_driven->fifo_fill_lock = 0;
   2faaa:	68fb      	ldr	r3, [r7, #12]
   2faac:	2400      	movs	r4, #0
   2faae:	611c      	str	r4, [r3, #16]
	__asm__ volatile(
   2fab0:	f385 8811 	msr	BASEPRI, r5
   2fab4:	f3bf 8f6f 	isb	sy
}
   2fab8:	4620      	mov	r0, r4
   2faba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2fabc:	68fb      	ldr	r3, [r7, #12]
   2fabe:	4622      	mov	r2, r4
   2fac0:	6899      	ldr	r1, [r3, #8]
   2fac2:	4630      	mov	r0, r6
   2fac4:	f7ff ff99 	bl	2f9fa <tx_start>
   2fac8:	e7f2      	b.n	2fab0 <uarte_nrfx_fifo_fill+0x56>
		return 0;
   2faca:	2400      	movs	r4, #0
   2facc:	e7f4      	b.n	2fab8 <uarte_nrfx_fifo_fill+0x5e>

0002face <k_msleep>:
{
   2face:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2fad0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2fad4:	17c1      	asrs	r1, r0, #31
   2fad6:	03c9      	lsls	r1, r1, #15
   2fad8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2fadc:	03c0      	lsls	r0, r0, #15
   2fade:	f240 33e7 	movw	r3, #999	; 0x3e7
   2fae2:	18c0      	adds	r0, r0, r3
   2fae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2fae8:	f04f 0300 	mov.w	r3, #0
   2faec:	f141 0100 	adc.w	r1, r1, #0
   2faf0:	f7d0 fb06 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2faf4:	f7f7 f912 	bl	26d1c <z_impl_k_sleep>
}
   2faf8:	bd08      	pop	{r3, pc}

0002fafa <wait_tx_ready>:
{
   2fafa:	b570      	push	{r4, r5, r6, lr}
   2fafc:	4606      	mov	r6, r0
   2fafe:	e013      	b.n	2fb28 <wait_tx_ready+0x2e>
		if (res) {
   2fb00:	b17d      	cbz	r5, 2fb22 <wait_tx_ready+0x28>
	__asm__ volatile(
   2fb02:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fb06:	f3ef 8411 	mrs	r4, BASEPRI
   2fb0a:	f383 8812 	msr	BASEPRI_MAX, r3
   2fb0e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2fb12:	4630      	mov	r0, r6
   2fb14:	f7ff fdfc 	bl	2f710 <is_tx_ready>
   2fb18:	b998      	cbnz	r0, 2fb42 <wait_tx_ready+0x48>
	__asm__ volatile(
   2fb1a:	f384 8811 	msr	BASEPRI, r4
   2fb1e:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   2fb22:	2001      	movs	r0, #1
   2fb24:	f7ff ffd3 	bl	2face <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2fb28:	2464      	movs	r4, #100	; 0x64
   2fb2a:	4630      	mov	r0, r6
   2fb2c:	f7ff fdf0 	bl	2f710 <is_tx_ready>
   2fb30:	4605      	mov	r5, r0
   2fb32:	2800      	cmp	r0, #0
   2fb34:	d1e4      	bne.n	2fb00 <wait_tx_ready+0x6>
   2fb36:	2001      	movs	r0, #1
   2fb38:	f000 fd7d 	bl	30636 <nrfx_busy_wait>
   2fb3c:	3c01      	subs	r4, #1
   2fb3e:	d1f4      	bne.n	2fb2a <wait_tx_ready+0x30>
   2fb40:	e7de      	b.n	2fb00 <wait_tx_ready+0x6>
}
   2fb42:	4620      	mov	r0, r4
   2fb44:	bd70      	pop	{r4, r5, r6, pc}

0002fb46 <uarte_instance_init>:
{
   2fb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fb4a:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   2fb4c:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2fb4e:	683e      	ldr	r6, [r7, #0]
	struct uarte_nrfx_data *data = dev->data;
   2fb50:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2fb54:	2100      	movs	r1, #0
   2fb56:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	data->dev = dev;
   2fb5a:	f8c8 0000 	str.w	r0, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2fb5e:	68f8      	ldr	r0, [r7, #12]
   2fb60:	f7ff fece 	bl	2f900 <pinctrl_apply_state>
	if (err < 0) {
   2fb64:	1e05      	subs	r5, r0, #0
   2fb66:	db35      	blt.n	2fbd4 <uarte_instance_init+0x8e>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   2fb68:	f108 0104 	add.w	r1, r8, #4
   2fb6c:	4620      	mov	r0, r4
   2fb6e:	f7ff fd6c 	bl	2f64a <uarte_nrfx_configure>
	if (err) {
   2fb72:	4605      	mov	r5, r0
   2fb74:	bb70      	cbnz	r0, 2fbd4 <uarte_instance_init+0x8e>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2fb76:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2fb78:	f013 0f02 	tst.w	r3, #2
   2fb7c:	d12d      	bne.n	2fbda <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2fb7e:	2308      	movs	r3, #8
   2fb80:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2fb84:	7a3b      	ldrb	r3, [r7, #8]
   2fb86:	b95b      	cbnz	r3, 2fba0 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fb88:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   2fb8c:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   2fb90:	f8d8 3018 	ldr.w	r3, [r8, #24]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fb94:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2fb98:	2301      	movs	r3, #1
   2fb9a:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fb9e:	6033      	str	r3, [r6, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2fba0:	687b      	ldr	r3, [r7, #4]
   2fba2:	f013 0f02 	tst.w	r3, #2
   2fba6:	d103      	bne.n	2fbb0 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   2fba8:	f44f 7380 	mov.w	r3, #256	; 0x100
   2fbac:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fbb0:	687b      	ldr	r3, [r7, #4]
   2fbb2:	f013 0f10 	tst.w	r3, #16
   2fbb6:	d003      	beq.n	2fbc0 <uarte_instance_init+0x7a>
   2fbb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2fbbc:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   2fbc0:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2fbc4:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2fbc8:	2300      	movs	r3, #0
   2fbca:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fbce:	2301      	movs	r3, #1
   2fbd0:	60b3      	str	r3, [r6, #8]
   2fbd2:	60f3      	str	r3, [r6, #12]
}
   2fbd4:	4628      	mov	r0, r5
   2fbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2fbda:	4641      	mov	r1, r8
   2fbdc:	4630      	mov	r0, r6
   2fbde:	f7f3 f861 	bl	22ca4 <endtx_stoptx_ppi_init>
		if (err < 0) {
   2fbe2:	2800      	cmp	r0, #0
   2fbe4:	dacb      	bge.n	2fb7e <uarte_instance_init+0x38>
			return err;
   2fbe6:	4605      	mov	r5, r0
   2fbe8:	e7f4      	b.n	2fbd4 <uarte_instance_init+0x8e>

0002fbea <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2fbea:	b510      	push	{r4, lr}
   2fbec:	4604      	mov	r4, r0
   2fbee:	2200      	movs	r2, #0
   2fbf0:	2101      	movs	r1, #1
   2fbf2:	2002      	movs	r0, #2
   2fbf4:	f7fc fd28 	bl	2c648 <z_arm_irq_priority_set>
   2fbf8:	2002      	movs	r0, #2
   2fbfa:	f7fc fd1b 	bl	2c634 <arch_irq_enable>
   2fbfe:	2101      	movs	r1, #1
   2fc00:	4620      	mov	r0, r4
   2fc02:	f7ff ffa0 	bl	2fb46 <uarte_instance_init>
   2fc06:	bd10      	pop	{r4, pc}

0002fc08 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2fc08:	4770      	bx	lr

0002fc0a <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2fc0a:	1a40      	subs	r0, r0, r1
}
   2fc0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2fc10:	4770      	bx	lr

0002fc12 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2fc12:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2fc16:	009b      	lsls	r3, r3, #2
   2fc18:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fc1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2fc1e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2fc22:	6818      	ldr	r0, [r3, #0]
}
   2fc24:	3800      	subs	r0, #0
   2fc26:	bf18      	it	ne
   2fc28:	2001      	movne	r0, #1
   2fc2a:	4770      	bx	lr

0002fc2c <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2fc2c:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2fc30:	009b      	lsls	r3, r3, #2
   2fc32:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2fc34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2fc38:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2fc3c:	2200      	movs	r2, #0
   2fc3e:	601a      	str	r2, [r3, #0]
   2fc40:	681b      	ldr	r3, [r3, #0]
}
   2fc42:	4770      	bx	lr

0002fc44 <absolute_time_to_cc>:
}
   2fc44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2fc48:	4770      	bx	lr

0002fc4a <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2fc4a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2fc4e:	b672      	cpsid	i
}
   2fc50:	4770      	bx	lr

0002fc52 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2fc52:	f380 8810 	msr	PRIMASK, r0
}
   2fc56:	4770      	bx	lr

0002fc58 <compare_set>:
{
   2fc58:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc5a:	b083      	sub	sp, #12
   2fc5c:	4604      	mov	r4, r0
   2fc5e:	4617      	mov	r7, r2
   2fc60:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2fc62:	f7f3 f8d1 	bl	22e08 <compare_int_lock>
   2fc66:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2fc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2fc6a:	9301      	str	r3, [sp, #4]
   2fc6c:	9b08      	ldr	r3, [sp, #32]
   2fc6e:	9300      	str	r3, [sp, #0]
   2fc70:	463a      	mov	r2, r7
   2fc72:	462b      	mov	r3, r5
   2fc74:	4620      	mov	r0, r4
   2fc76:	f7f3 f995 	bl	22fa4 <compare_set_nolocks>
   2fc7a:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2fc7c:	4631      	mov	r1, r6
   2fc7e:	4620      	mov	r0, r4
   2fc80:	f7f3 f918 	bl	22eb4 <compare_int_unlock>
}
   2fc84:	4628      	mov	r0, r5
   2fc86:	b003      	add	sp, #12
   2fc88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fc8a <sys_clock_cycle_get_32>:
{
   2fc8a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2fc8c:	f7f3 f96a 	bl	22f64 <z_nrf_rtc_timer_read>
}
   2fc90:	bd08      	pop	{r3, pc}

0002fc92 <event_packet_is_discardable>:
	switch (hdr->evt) {
   2fc92:	7803      	ldrb	r3, [r0, #0]
   2fc94:	2b3e      	cmp	r3, #62	; 0x3e
   2fc96:	d003      	beq.n	2fca0 <event_packet_is_discardable+0xe>
   2fc98:	2bff      	cmp	r3, #255	; 0xff
   2fc9a:	d008      	beq.n	2fcae <event_packet_is_discardable+0x1c>
   2fc9c:	2000      	movs	r0, #0
   2fc9e:	4770      	bx	lr
		switch (me->subevent) {
   2fca0:	7883      	ldrb	r3, [r0, #2]
   2fca2:	2b02      	cmp	r3, #2
   2fca4:	d001      	beq.n	2fcaa <event_packet_is_discardable+0x18>
			return false;
   2fca6:	2000      	movs	r0, #0
   2fca8:	4770      	bx	lr
			return true;
   2fcaa:	2001      	movs	r0, #1
   2fcac:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2fcae:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2fcb0:	2b80      	cmp	r3, #128	; 0x80
   2fcb2:	d001      	beq.n	2fcb8 <event_packet_is_discardable+0x26>
			return false;
   2fcb4:	2000      	movs	r0, #0
}
   2fcb6:	4770      	bx	lr
			return true;
   2fcb8:	2001      	movs	r0, #1
   2fcba:	4770      	bx	lr

0002fcbc <hci_driver_send>:
{
   2fcbc:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2fcbe:	8a03      	ldrh	r3, [r0, #16]
   2fcc0:	b183      	cbz	r3, 2fce4 <hci_driver_send+0x28>
   2fcc2:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2fcc4:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2fcc6:	b14b      	cbz	r3, 2fcdc <hci_driver_send+0x20>
   2fcc8:	2b02      	cmp	r3, #2
   2fcca:	d10e      	bne.n	2fcea <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2fccc:	f7f3 fc6c 	bl	235a8 <acl_handle>
   2fcd0:	4605      	mov	r5, r0
	if (!err) {
   2fcd2:	b965      	cbnz	r5, 2fcee <hci_driver_send+0x32>
		net_buf_unref(buf);
   2fcd4:	4620      	mov	r0, r4
   2fcd6:	f7ff f913 	bl	2ef00 <net_buf_unref>
   2fcda:	e008      	b.n	2fcee <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2fcdc:	f7f3 fc82 	bl	235e4 <cmd_handle>
   2fce0:	4605      	mov	r5, r0
		break;
   2fce2:	e7f6      	b.n	2fcd2 <hci_driver_send+0x16>
		return -EINVAL;
   2fce4:	f06f 0515 	mvn.w	r5, #21
   2fce8:	e001      	b.n	2fcee <hci_driver_send+0x32>
	switch (type) {
   2fcea:	f06f 0515 	mvn.w	r5, #21
}
   2fcee:	4628      	mov	r0, r5
   2fcf0:	bd38      	pop	{r3, r4, r5, pc}

0002fcf2 <hci_driver_close>:
{
   2fcf2:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2fcf4:	f7f4 f940 	bl	23f78 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2fcf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fcfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fd00:	f7f3 fa9e 	bl	23240 <multithreading_lock_acquire>
	if (err) {
   2fd04:	4604      	mov	r4, r0
   2fd06:	b108      	cbz	r0, 2fd0c <hci_driver_close+0x1a>
}
   2fd08:	4620      	mov	r0, r4
   2fd0a:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   2fd0c:	f7d0 fdce 	bl	8ac <sdc_disable>
	if (err) {
   2fd10:	4604      	mov	r4, r0
   2fd12:	b910      	cbnz	r0, 2fd1a <hci_driver_close+0x28>
	MULTITHREADING_LOCK_RELEASE();
   2fd14:	f7f3 fa9e 	bl	23254 <multithreading_lock_release>
	return err;
   2fd18:	e7f6      	b.n	2fd08 <hci_driver_close+0x16>
		MULTITHREADING_LOCK_RELEASE();
   2fd1a:	f7f3 fa9b 	bl	23254 <multithreading_lock_release>
		return err;
   2fd1e:	e7f3      	b.n	2fd08 <hci_driver_close+0x16>

0002fd20 <configure_supported_features>:
{
   2fd20:	b508      	push	{r3, lr}
		err = sdc_support_adv();
   2fd22:	f7d0 fe79 	bl	a18 <sdc_support_adv>
		if (err) {
   2fd26:	b960      	cbnz	r0, 2fd42 <configure_supported_features+0x22>
		err = sdc_support_peripheral();
   2fd28:	f7d0 fea6 	bl	a78 <sdc_support_peripheral>
		if (err) {
   2fd2c:	b960      	cbnz	r0, 2fd48 <configure_supported_features+0x28>
			err = sdc_support_dle_peripheral();
   2fd2e:	f7d0 fe83 	bl	a38 <sdc_support_dle_peripheral>
			if (err) {
   2fd32:	b960      	cbnz	r0, 2fd4e <configure_supported_features+0x2e>
		err = sdc_support_le_2m_phy();
   2fd34:	f7d0 fe90 	bl	a58 <sdc_support_le_2m_phy>
		if (err) {
   2fd38:	b960      	cbnz	r0, 2fd54 <configure_supported_features+0x34>
			err = sdc_support_phy_update_peripheral();
   2fd3a:	f7d0 fead 	bl	a98 <sdc_support_phy_update_peripheral>
			if (err) {
   2fd3e:	b960      	cbnz	r0, 2fd5a <configure_supported_features+0x3a>
}
   2fd40:	bd08      	pop	{r3, pc}
			return -ENOTSUP;
   2fd42:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fd46:	e7fb      	b.n	2fd40 <configure_supported_features+0x20>
			return -ENOTSUP;
   2fd48:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fd4c:	e7f8      	b.n	2fd40 <configure_supported_features+0x20>
				return -ENOTSUP;
   2fd4e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fd52:	e7f5      	b.n	2fd40 <configure_supported_features+0x20>
			return -ENOTSUP;
   2fd54:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fd58:	e7f2      	b.n	2fd40 <configure_supported_features+0x20>
				return -ENOTSUP;
   2fd5a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fd5e:	e7ef      	b.n	2fd40 <configure_supported_features+0x20>

0002fd60 <receive_work_handler>:
{
   2fd60:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2fd62:	f7f3 fe2f 	bl	239c4 <hci_driver_receive_process>
}
   2fd66:	bd08      	pop	{r3, pc}

0002fd68 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2fd68:	230f      	movs	r3, #15
   2fd6a:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2fd6c:	2304      	movs	r3, #4
   2fd6e:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2fd70:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2fd72:	2301      	movs	r3, #1
   2fd74:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2fd76:	8081      	strh	r1, [r0, #4]
}
   2fd78:	4770      	bx	lr

0002fd7a <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2fd7a:	f04f 0c0e 	mov.w	ip, #14
   2fd7e:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2fd82:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2fd84:	2201      	movs	r2, #1
   2fd86:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2fd88:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2fd8c:	7143      	strb	r3, [r0, #5]
}
   2fd8e:	4770      	bx	lr

0002fd90 <le_read_supported_states>:
	*buf = states1;
   2fd90:	238f      	movs	r3, #143	; 0x8f
   2fd92:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2fd94:	23c0      	movs	r3, #192	; 0xc0
   2fd96:	7103      	strb	r3, [r0, #4]
}
   2fd98:	4770      	bx	lr

0002fd9a <status_param_cmd_put>:
}
   2fd9a:	2001      	movs	r0, #1
   2fd9c:	4770      	bx	lr

0002fd9e <link_control_cmd_put>:
{
   2fd9e:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2fda0:	7842      	ldrb	r2, [r0, #1]
   2fda2:	f810 3b03 	ldrb.w	r3, [r0], #3
   2fda6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2fdaa:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2fdac:	f240 4206 	movw	r2, #1030	; 0x406
   2fdb0:	4293      	cmp	r3, r2
   2fdb2:	d005      	beq.n	2fdc0 <link_control_cmd_put+0x22>
   2fdb4:	f240 421d 	movw	r2, #1053	; 0x41d
   2fdb8:	4293      	cmp	r3, r2
   2fdba:	d004      	beq.n	2fdc6 <link_control_cmd_put+0x28>
   2fdbc:	2001      	movs	r0, #1
}
   2fdbe:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2fdc0:	f7dc ff68 	bl	cc94 <sdc_hci_cmd_lc_disconnect>
   2fdc4:	e7fb      	b.n	2fdbe <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2fdc6:	f7dc ff67 	bl	cc98 <sdc_hci_cmd_lc_read_remote_version_information>
   2fdca:	e7f8      	b.n	2fdbe <link_control_cmd_put+0x20>

0002fdcc <controller_and_baseband_cmd_put>:
{
   2fdcc:	b508      	push	{r3, lr}
   2fdce:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2fdd0:	3003      	adds	r0, #3
   2fdd2:	f893 c001 	ldrb.w	ip, [r3, #1]
   2fdd6:	781b      	ldrb	r3, [r3, #0]
   2fdd8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2fddc:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2fdde:	f640 4c63 	movw	ip, #3171	; 0xc63
   2fde2:	4563      	cmp	r3, ip
   2fde4:	d02c      	beq.n	2fe40 <controller_and_baseband_cmd_put+0x74>
   2fde6:	f101 0106 	add.w	r1, r1, #6
   2fdea:	dc16      	bgt.n	2fe1a <controller_and_baseband_cmd_put+0x4e>
   2fdec:	f640 4c03 	movw	ip, #3075	; 0xc03
   2fdf0:	4563      	cmp	r3, ip
   2fdf2:	d022      	beq.n	2fe3a <controller_and_baseband_cmd_put+0x6e>
   2fdf4:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   2fdf8:	4563      	cmp	r3, ip
   2fdfa:	d105      	bne.n	2fe08 <controller_and_baseband_cmd_put+0x3c>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2fdfc:	7813      	ldrb	r3, [r2, #0]
   2fdfe:	3303      	adds	r3, #3
   2fe00:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2fe02:	f7dc fec9 	bl	cb98 <sdc_hci_cmd_cb_read_transmit_power_level>
   2fe06:	e007      	b.n	2fe18 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2fe08:	f640 4201 	movw	r2, #3073	; 0xc01
   2fe0c:	4293      	cmp	r3, r2
   2fe0e:	d102      	bne.n	2fe16 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2fe10:	f7dc fec4 	bl	cb9c <sdc_hci_cmd_cb_set_event_mask>
   2fe14:	e000      	b.n	2fe18 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2fe16:	2001      	movs	r0, #1
}
   2fe18:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2fe1a:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   2fe1e:	4563      	cmp	r3, ip
   2fe20:	d011      	beq.n	2fe46 <controller_and_baseband_cmd_put+0x7a>
   2fe22:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   2fe26:	4563      	cmp	r3, ip
   2fe28:	d105      	bne.n	2fe36 <controller_and_baseband_cmd_put+0x6a>
		*param_length_out +=
   2fe2a:	7813      	ldrb	r3, [r2, #0]
   2fe2c:	3302      	adds	r3, #2
   2fe2e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2fe30:	f7dc febe 	bl	cbb0 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2fe34:	e7f0      	b.n	2fe18 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2fe36:	2001      	movs	r0, #1
   2fe38:	e7ee      	b.n	2fe18 <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_reset();
   2fe3a:	f7d0 ff85 	bl	d48 <sdc_hci_cmd_cb_reset>
   2fe3e:	e7eb      	b.n	2fe18 <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2fe40:	f7dc feb1 	bl	cba6 <sdc_hci_cmd_cb_set_event_mask_page_2>
   2fe44:	e7e8      	b.n	2fe18 <controller_and_baseband_cmd_put+0x4c>
		*param_length_out +=
   2fe46:	7813      	ldrb	r3, [r2, #0]
   2fe48:	3304      	adds	r3, #4
   2fe4a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2fe4c:	f7dc fea2 	bl	cb94 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2fe50:	e7e2      	b.n	2fe18 <controller_and_baseband_cmd_put+0x4c>

0002fe52 <supported_commands>:
{
   2fe52:	b510      	push	{r4, lr}
   2fe54:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2fe56:	2230      	movs	r2, #48	; 0x30
   2fe58:	2100      	movs	r1, #0
   2fe5a:	f7fc fcf6 	bl	2c84a <memset>
	cmds->hci_disconnect = 1;
   2fe5e:	7823      	ldrb	r3, [r4, #0]
   2fe60:	f043 0320 	orr.w	r3, r3, #32
   2fe64:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2fe66:	78a3      	ldrb	r3, [r4, #2]
   2fe68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fe6c:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2fe6e:	7963      	ldrb	r3, [r4, #5]
   2fe70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fe74:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2fe76:	b2db      	uxtb	r3, r3
   2fe78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fe7c:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2fe7e:	7aa3      	ldrb	r3, [r4, #10]
   2fe80:	f043 0304 	orr.w	r3, r3, #4
   2fe84:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2fe86:	7ba3      	ldrb	r3, [r4, #14]
   2fe88:	f043 0308 	orr.w	r3, r3, #8
   2fe8c:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2fe8e:	b2db      	uxtb	r3, r3
   2fe90:	f043 0320 	orr.w	r3, r3, #32
   2fe94:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2fe96:	7be3      	ldrb	r3, [r4, #15]
   2fe98:	f043 0302 	orr.w	r3, r3, #2
   2fe9c:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2fe9e:	7da3      	ldrb	r3, [r4, #22]
   2fea0:	f043 0304 	orr.w	r3, r3, #4
   2fea4:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2fea6:	7e63      	ldrb	r3, [r4, #25]
   2fea8:	f043 0301 	orr.w	r3, r3, #1
   2feac:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   2feae:	b2db      	uxtb	r3, r3
   2feb0:	f043 0302 	orr.w	r3, r3, #2
   2feb4:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2feb6:	b2db      	uxtb	r3, r3
   2feb8:	f043 0304 	orr.w	r3, r3, #4
   2febc:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2febe:	b2db      	uxtb	r3, r3
   2fec0:	f043 0310 	orr.w	r3, r3, #16
   2fec4:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_parameters = 1;
   2fec6:	b2db      	uxtb	r3, r3
   2fec8:	f043 0320 	orr.w	r3, r3, #32
   2fecc:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_advertising_physical_channel_tx_power = 1;
   2fece:	b2db      	uxtb	r3, r3
   2fed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fed4:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   2fed6:	b2db      	uxtb	r3, r3
   2fed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fedc:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   2fede:	7ea3      	ldrb	r3, [r4, #26]
   2fee0:	f043 0301 	orr.w	r3, r3, #1
   2fee4:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_advertising_enable = 1;
   2fee6:	b2db      	uxtb	r3, r3
   2fee8:	f043 0302 	orr.w	r3, r3, #2
   2feec:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_data_related_address_changes = 1;
   2feee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2fef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fef6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_read_filter_accept_list_size = 1;
   2fefa:	7ea3      	ldrb	r3, [r4, #26]
   2fefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ff00:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   2ff02:	b2db      	uxtb	r3, r3
   2ff04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ff08:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2ff0a:	7ee3      	ldrb	r3, [r4, #27]
   2ff0c:	f043 0301 	orr.w	r3, r3, #1
   2ff10:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   2ff12:	b2db      	uxtb	r3, r3
   2ff14:	f043 0302 	orr.w	r3, r3, #2
   2ff18:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2ff1a:	b2db      	uxtb	r3, r3
   2ff1c:	f043 0310 	orr.w	r3, r3, #16
   2ff20:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   2ff22:	b2db      	uxtb	r3, r3
   2ff24:	f043 0320 	orr.w	r3, r3, #32
   2ff28:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   2ff2a:	b2db      	uxtb	r3, r3
   2ff2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ff30:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2ff32:	b2db      	uxtb	r3, r3
   2ff34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ff38:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   2ff3a:	7f23      	ldrb	r3, [r4, #28]
   2ff3c:	f043 0302 	orr.w	r3, r3, #2
   2ff40:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_long_term_key_request_negative_reply = 1;
   2ff42:	b2db      	uxtb	r3, r3
   2ff44:	f043 0304 	orr.w	r3, r3, #4
   2ff48:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   2ff4a:	b2db      	uxtb	r3, r3
   2ff4c:	f043 0308 	orr.w	r3, r3, #8
   2ff50:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   2ff52:	b2db      	uxtb	r3, r3
   2ff54:	f043 0310 	orr.w	r3, r3, #16
   2ff58:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   2ff5a:	b2db      	uxtb	r3, r3
   2ff5c:	f043 0320 	orr.w	r3, r3, #32
   2ff60:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2ff62:	b2db      	uxtb	r3, r3
   2ff64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ff68:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2ff6a:	f894 3020 	ldrb.w	r3, [r4, #32]
   2ff6e:	f043 0310 	orr.w	r3, r3, #16
   2ff72:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2ff76:	b2db      	uxtb	r3, r3
   2ff78:	f043 0320 	orr.w	r3, r3, #32
   2ff7c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2ff80:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2ff84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ff88:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2ff8c:	b2db      	uxtb	r3, r3
   2ff8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ff92:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2ff96:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2ff9a:	f043 0301 	orr.w	r3, r3, #1
   2ff9e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2ffa2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2ffa6:	f043 0308 	orr.w	r3, r3, #8
   2ffaa:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2ffae:	b2db      	uxtb	r3, r3
   2ffb0:	f043 0310 	orr.w	r3, r3, #16
   2ffb4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   2ffb8:	b2db      	uxtb	r3, r3
   2ffba:	f043 0320 	orr.w	r3, r3, #32
   2ffbe:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2ffc2:	b2db      	uxtb	r3, r3
   2ffc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ffc8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2ffcc:	b2db      	uxtb	r3, r3
   2ffce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ffd2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2ffd6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2ffda:	f043 0301 	orr.w	r3, r3, #1
   2ffde:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2ffe2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2ffe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ffea:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2ffee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2fff2:	f043 0302 	orr.w	r3, r3, #2
   2fff6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   2fffa:	b2db      	uxtb	r3, r3
   2fffc:	f043 0304 	orr.w	r3, r3, #4
   30000:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   30004:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   30008:	f043 0304 	orr.w	r3, r3, #4
   3000c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   30010:	bd10      	pop	{r4, pc}

00030012 <supported_features>:
{
   30012:	b510      	push	{r4, lr}
   30014:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   30016:	2208      	movs	r2, #8
   30018:	2100      	movs	r1, #0
   3001a:	f7fc fc16 	bl	2c84a <memset>
	features->bdedr_not_supported = 1;
   3001e:	7923      	ldrb	r3, [r4, #4]
   30020:	f043 0320 	orr.w	r3, r3, #32
   30024:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   30026:	b2db      	uxtb	r3, r3
   30028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3002c:	7123      	strb	r3, [r4, #4]
}
   3002e:	bd10      	pop	{r4, pc}

00030030 <info_param_cmd_put>:
{
   30030:	b508      	push	{r3, lr}
   30032:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   30034:	1d88      	adds	r0, r1, #6
   30036:	f893 c001 	ldrb.w	ip, [r3, #1]
   3003a:	781b      	ldrb	r3, [r3, #0]
   3003c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   30040:	b21b      	sxth	r3, r3
	switch (opcode)	{
   30042:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   30046:	3b01      	subs	r3, #1
   30048:	2b08      	cmp	r3, #8
   3004a:	d820      	bhi.n	3008e <info_param_cmd_put+0x5e>
   3004c:	e8df f003 	tbb	[pc, r3]
   30050:	1f120b05 	.word	0x1f120b05
   30054:	1f1f1f1f 	.word	0x1f1f1f1f
   30058:	19          	.byte	0x19
   30059:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   3005a:	7813      	ldrb	r3, [r2, #0]
   3005c:	3308      	adds	r3, #8
   3005e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   30060:	f7dc fdd9 	bl	cc16 <sdc_hci_cmd_ip_read_local_version_information>
   30064:	e014      	b.n	30090 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   30066:	7813      	ldrb	r3, [r2, #0]
   30068:	3340      	adds	r3, #64	; 0x40
   3006a:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   3006c:	f7ff fef1 	bl	2fe52 <supported_commands>
		return 0;
   30070:	2000      	movs	r0, #0
   30072:	e00d      	b.n	30090 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   30074:	7813      	ldrb	r3, [r2, #0]
   30076:	3308      	adds	r3, #8
   30078:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   3007a:	f7ff ffca 	bl	30012 <supported_features>
		return 0;
   3007e:	2000      	movs	r0, #0
   30080:	e006      	b.n	30090 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   30082:	7813      	ldrb	r3, [r2, #0]
   30084:	3306      	adds	r3, #6
   30086:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   30088:	f7dc fdc3 	bl	cc12 <sdc_hci_cmd_ip_read_bd_addr>
   3008c:	e000      	b.n	30090 <info_param_cmd_put+0x60>
	switch (opcode)	{
   3008e:	2001      	movs	r0, #1
}
   30090:	bd08      	pop	{r3, pc}

00030092 <le_supported_features>:
{
   30092:	b510      	push	{r4, lr}
   30094:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   30096:	2208      	movs	r2, #8
   30098:	2100      	movs	r1, #0
   3009a:	f7fc fbd6 	bl	2c84a <memset>
	features->params.le_encryption = 1;
   3009e:	7823      	ldrb	r3, [r4, #0]
   300a0:	f043 0301 	orr.w	r3, r3, #1
   300a4:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   300a6:	b2db      	uxtb	r3, r3
   300a8:	f043 0304 	orr.w	r3, r3, #4
   300ac:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   300ae:	b2db      	uxtb	r3, r3
   300b0:	f043 0308 	orr.w	r3, r3, #8
   300b4:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   300b6:	b2db      	uxtb	r3, r3
   300b8:	f043 0310 	orr.w	r3, r3, #16
   300bc:	7023      	strb	r3, [r4, #0]
	features->params.le_data_packet_length_extension = 1;
   300be:	b2db      	uxtb	r3, r3
   300c0:	f043 0320 	orr.w	r3, r3, #32
   300c4:	7023      	strb	r3, [r4, #0]
	features->params.le_2m_phy = 1;
   300c6:	7863      	ldrb	r3, [r4, #1]
   300c8:	f043 0301 	orr.w	r3, r3, #1
   300cc:	7063      	strb	r3, [r4, #1]
	features->params.channel_selection_algorithm_2 = 1;
   300ce:	b2db      	uxtb	r3, r3
   300d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   300d4:	7063      	strb	r3, [r4, #1]
}
   300d6:	bd10      	pop	{r4, pc}

000300d8 <vs_zephyr_supported_commands>:
{
   300d8:	b510      	push	{r4, lr}
   300da:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   300dc:	2202      	movs	r2, #2
   300de:	2100      	movs	r1, #0
   300e0:	f7fc fbb3 	bl	2c84a <memset>
	cmds->read_version_info = 1;
   300e4:	7823      	ldrb	r3, [r4, #0]
   300e6:	f043 0301 	orr.w	r3, r3, #1
   300ea:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   300ec:	b2db      	uxtb	r3, r3
   300ee:	f043 0302 	orr.w	r3, r3, #2
   300f2:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   300f4:	b2db      	uxtb	r3, r3
   300f6:	f043 0320 	orr.w	r3, r3, #32
   300fa:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   300fc:	7863      	ldrb	r3, [r4, #1]
   300fe:	f043 0301 	orr.w	r3, r3, #1
   30102:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   30104:	b2db      	uxtb	r3, r3
   30106:	f043 0302 	orr.w	r3, r3, #2
   3010a:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   3010c:	b2db      	uxtb	r3, r3
   3010e:	f043 0304 	orr.w	r3, r3, #4
   30112:	7063      	strb	r3, [r4, #1]
}
   30114:	bd10      	pop	{r4, pc}

00030116 <vs_supported_commands>:
{
   30116:	b510      	push	{r4, lr}
   30118:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   3011a:	2202      	movs	r2, #2
   3011c:	2100      	movs	r1, #0
   3011e:	f7fc fb94 	bl	2c84a <memset>
	cmds->read_supported_vs_commands = 1;
   30122:	7823      	ldrb	r3, [r4, #0]
   30124:	f043 0301 	orr.w	r3, r3, #1
   30128:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   3012a:	b2db      	uxtb	r3, r3
   3012c:	f043 0302 	orr.w	r3, r3, #2
   30130:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   30132:	b2db      	uxtb	r3, r3
   30134:	f043 0304 	orr.w	r3, r3, #4
   30138:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   3013a:	b2db      	uxtb	r3, r3
   3013c:	f043 0308 	orr.w	r3, r3, #8
   30140:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   30142:	b2db      	uxtb	r3, r3
   30144:	f043 0310 	orr.w	r3, r3, #16
   30148:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   3014a:	b2db      	uxtb	r3, r3
   3014c:	f043 0320 	orr.w	r3, r3, #32
   30150:	7023      	strb	r3, [r4, #0]
}
   30152:	bd10      	pop	{r4, pc}

00030154 <le_controller_cmd_put>:
{
   30154:	b508      	push	{r3, lr}
   30156:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   30158:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   3015a:	3106      	adds	r1, #6
   3015c:	f893 c001 	ldrb.w	ip, [r3, #1]
   30160:	781b      	ldrb	r3, [r3, #0]
   30162:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   30166:	b21b      	sxth	r3, r3
	switch (opcode)	{
   30168:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   3016c:	3b01      	subs	r3, #1
   3016e:	2b7b      	cmp	r3, #123	; 0x7b
   30170:	f200 80d8 	bhi.w	30324 <le_controller_cmd_put+0x1d0>
   30174:	e8df f003 	tbb	[pc, r3]
   30178:	d648413e 	.word	0xd648413e
   3017c:	5d565350 	.word	0x5d565350
   30180:	d6d66360 	.word	0xd6d66360
   30184:	7069d6d6 	.word	0x7069d6d6
   30188:	d6d67673 	.word	0xd6d67673
   3018c:	88827f79 	.word	0x88827f79
   30190:	9b958fd6 	.word	0x9b958fd6
   30194:	d6d6d6d6 	.word	0xd6d6d6d6
   30198:	b0a9a3d6 	.word	0xb0a9a3d6
   3019c:	d6d6b6b3 	.word	0xd6d6b6b3
   301a0:	d6d6d6d6 	.word	0xd6d6d6d6
   301a4:	c3bcd6d6 	.word	0xc3bcd6d6
   301a8:	d6d6ccc9 	.word	0xd6d6ccc9
   301ac:	d6d6d6d6 	.word	0xd6d6d6d6
   301b0:	d6d6d6d6 	.word	0xd6d6d6d6
   301b4:	d6d6d6d6 	.word	0xd6d6d6d6
   301b8:	d6d6d6d6 	.word	0xd6d6d6d6
   301bc:	d6d6d6d6 	.word	0xd6d6d6d6
   301c0:	d6cfd6d6 	.word	0xd6cfd6d6
   301c4:	d6d6d6d6 	.word	0xd6d6d6d6
   301c8:	d6d6d6d6 	.word	0xd6d6d6d6
   301cc:	d6d6d6d6 	.word	0xd6d6d6d6
   301d0:	d6d6d6d6 	.word	0xd6d6d6d6
   301d4:	d6d6b9d6 	.word	0xd6d6b9d6
   301d8:	d6d6d6d6 	.word	0xd6d6d6d6
   301dc:	d6d6d6d6 	.word	0xd6d6d6d6
   301e0:	d6d6d6d6 	.word	0xd6d6d6d6
   301e4:	d6d6d6d6 	.word	0xd6d6d6d6
   301e8:	d6d6d6d6 	.word	0xd6d6d6d6
   301ec:	d6d6d6d6 	.word	0xd6d6d6d6
   301f0:	66d6d6d6 	.word	0x66d6d6d6
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   301f4:	f7dc fd41 	bl	cc7a <sdc_hci_cmd_le_set_event_mask>
   301f8:	e095      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   301fa:	7813      	ldrb	r3, [r2, #0]
   301fc:	3303      	adds	r3, #3
   301fe:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   30200:	4608      	mov	r0, r1
   30202:	f7dc fd1c 	bl	cc3e <sdc_hci_cmd_le_read_buffer_size>
   30206:	e08e      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   30208:	7813      	ldrb	r3, [r2, #0]
   3020a:	3308      	adds	r3, #8
   3020c:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   3020e:	4608      	mov	r0, r1
   30210:	f7ff ff3f 	bl	30092 <le_supported_features>
		return 0;
   30214:	2000      	movs	r0, #0
   30216:	e086      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   30218:	f7dc fd36 	bl	cc88 <sdc_hci_cmd_le_set_random_address>
   3021c:	e083      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   3021e:	f7dc fd24 	bl	cc6a <sdc_hci_cmd_le_set_adv_params>
   30222:	e080      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   30224:	7813      	ldrb	r3, [r2, #0]
   30226:	3301      	adds	r3, #1
   30228:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   3022a:	4608      	mov	r0, r1
   3022c:	f7dc fd05 	bl	cc3a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   30230:	e079      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   30232:	f7dc fd16 	bl	cc62 <sdc_hci_cmd_le_set_adv_data>
   30236:	e076      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   30238:	f7dc fd28 	bl	cc8c <sdc_hci_cmd_le_set_scan_response_data>
   3023c:	e073      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   3023e:	f7dc fd12 	bl	cc66 <sdc_hci_cmd_le_set_adv_enable>
   30242:	e070      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   30244:	f7dc fd15 	bl	cc72 <sdc_hci_cmd_le_set_data_related_address_changes>
   30248:	e06d      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   3024a:	7813      	ldrb	r3, [r2, #0]
   3024c:	3301      	adds	r3, #1
   3024e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   30250:	4608      	mov	r0, r1
   30252:	f7dc fcf8 	bl	cc46 <sdc_hci_cmd_le_read_filter_accept_list_size>
   30256:	e066      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   30258:	f7dc fce1 	bl	cc1e <sdc_hci_cmd_le_clear_filter_accept_list>
   3025c:	e063      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   3025e:	f7dc fcdc 	bl	cc1a <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   30262:	e060      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   30264:	f7dc fcfb 	bl	cc5e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   30268:	e05d      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   3026a:	7813      	ldrb	r3, [r2, #0]
   3026c:	3307      	adds	r3, #7
   3026e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   30270:	f7dc fce7 	bl	cc42 <sdc_hci_cmd_le_read_channel_map>
   30274:	e057      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   30276:	f7dc fcec 	bl	cc52 <sdc_hci_cmd_le_read_remote_features>
   3027a:	e054      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   3027c:	7813      	ldrb	r3, [r2, #0]
   3027e:	3310      	adds	r3, #16
   30280:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   30282:	f7dc fcce 	bl	cc22 <sdc_hci_cmd_le_encrypt>
   30286:	e04e      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   30288:	7813      	ldrb	r3, [r2, #0]
   3028a:	3308      	adds	r3, #8
   3028c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   3028e:	4608      	mov	r0, r1
   30290:	f7dc fcd1 	bl	cc36 <sdc_hci_cmd_le_rand>
   30294:	e047      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   30296:	7813      	ldrb	r3, [r2, #0]
   30298:	3302      	adds	r3, #2
   3029a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   3029c:	f7dc fcc7 	bl	cc2e <sdc_hci_cmd_le_long_term_key_request_reply>
   302a0:	e041      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   302a2:	7813      	ldrb	r3, [r2, #0]
   302a4:	3302      	adds	r3, #2
   302a6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   302a8:	f7dc fcbd 	bl	cc26 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   302ac:	e03b      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   302ae:	7813      	ldrb	r3, [r2, #0]
   302b0:	3308      	adds	r3, #8
   302b2:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   302b4:	4608      	mov	r0, r1
   302b6:	f7ff fd6b 	bl	2fd90 <le_read_supported_states>
		return 0;
   302ba:	2000      	movs	r0, #0
   302bc:	e033      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   302be:	7813      	ldrb	r3, [r2, #0]
   302c0:	3302      	adds	r3, #2
   302c2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   302c4:	f7dc fcd3 	bl	cc6e <sdc_hci_cmd_le_set_data_length>
   302c8:	e02d      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   302ca:	7813      	ldrb	r3, [r2, #0]
   302cc:	3304      	adds	r3, #4
   302ce:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   302d0:	4608      	mov	r0, r1
   302d2:	f7dc fcc0 	bl	cc56 <sdc_hci_cmd_le_read_suggested_default_data_length>
   302d6:	e026      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   302d8:	f7dc fcda 	bl	cc90 <sdc_hci_cmd_le_write_suggested_default_data_length>
   302dc:	e023      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_read_local_p256_public_key();
   302de:	f7f3 fe53 	bl	23f88 <hci_cmd_le_read_local_p256_public_key>
   302e2:	e020      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   302e4:	f000 f8a1 	bl	3042a <hci_cmd_le_generate_dhkey>
   302e8:	e01d      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   302ea:	f000 f8a3 	bl	30434 <hci_cmd_le_generate_dhkey_v2>
   302ee:	e01a      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   302f0:	7813      	ldrb	r3, [r2, #0]
   302f2:	3308      	adds	r3, #8
   302f4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   302f6:	4608      	mov	r0, r1
   302f8:	f7dc fca7 	bl	cc4a <sdc_hci_cmd_le_read_max_data_length>
   302fc:	e013      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   302fe:	7813      	ldrb	r3, [r2, #0]
   30300:	3304      	adds	r3, #4
   30302:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   30304:	f7dc fca3 	bl	cc4e <sdc_hci_cmd_le_read_phy>
   30308:	e00d      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   3030a:	f7dc fcb4 	bl	cc76 <sdc_hci_cmd_le_set_default_phy>
   3030e:	e00a      	b.n	30326 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   30310:	f7dc fcb8 	bl	cc84 <sdc_hci_cmd_le_set_phy>
   30314:	e007      	b.n	30326 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   30316:	7813      	ldrb	r3, [r2, #0]
   30318:	3302      	adds	r3, #2
   3031a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   3031c:	4608      	mov	r0, r1
   3031e:	f7dc fc9c 	bl	cc5a <sdc_hci_cmd_le_read_transmit_power>
   30322:	e000      	b.n	30326 <le_controller_cmd_put+0x1d2>
	switch (opcode)	{
   30324:	2001      	movs	r0, #1
}
   30326:	bd08      	pop	{r3, pc}

00030328 <vs_cmd_put>:
{
   30328:	b508      	push	{r3, lr}
   3032a:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   3032c:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   3032e:	3106      	adds	r1, #6
   30330:	f893 c001 	ldrb.w	ip, [r3, #1]
   30334:	781b      	ldrb	r3, [r3, #0]
   30336:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   3033a:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   3033e:	4563      	cmp	r3, ip
   30340:	d913      	bls.n	3036a <vs_cmd_put+0x42>
   30342:	f64f 5c0c 	movw	ip, #64780	; 0xfd0c
   30346:	4563      	cmp	r3, ip
   30348:	d86d      	bhi.n	30426 <vs_cmd_put+0xfe>
   3034a:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   3034e:	d31e      	bcc.n	3038e <vs_cmd_put+0x66>
   30350:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   30354:	2b0c      	cmp	r3, #12
   30356:	d862      	bhi.n	3041e <vs_cmd_put+0xf6>
   30358:	e8df f003 	tbb	[pc, r3]
   3035c:	524f4c44 	.word	0x524f4c44
   30360:	61615855 	.word	0x61615855
   30364:	61615b61 	.word	0x61615b61
   30368:	5e          	.byte	0x5e
   30369:	00          	.byte	0x00
   3036a:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   3036e:	d801      	bhi.n	30374 <vs_cmd_put+0x4c>
   30370:	2001      	movs	r0, #1
}
   30372:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   30374:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   30378:	3b01      	subs	r3, #1
   3037a:	2b0a      	cmp	r3, #10
   3037c:	d851      	bhi.n	30422 <vs_cmd_put+0xfa>
   3037e:	e8df f003 	tbb	[pc, r3]
   30382:	0f08      	.short	0x0f08
   30384:	27505050 	.word	0x27505050
   30388:	20175050 	.word	0x20175050
   3038c:	2a          	.byte	0x2a
   3038d:	00          	.byte	0x00
   3038e:	2001      	movs	r0, #1
   30390:	e7ef      	b.n	30372 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   30392:	7813      	ldrb	r3, [r2, #0]
   30394:	330c      	adds	r3, #12
   30396:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   30398:	4608      	mov	r0, r1
   3039a:	f7d0 fd7d 	bl	e98 <sdc_hci_cmd_vs_zephyr_read_version_info>
   3039e:	e7e8      	b.n	30372 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   303a0:	7813      	ldrb	r3, [r2, #0]
   303a2:	3340      	adds	r3, #64	; 0x40
   303a4:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   303a6:	4608      	mov	r0, r1
   303a8:	f7ff fe96 	bl	300d8 <vs_zephyr_supported_commands>
		return 0;
   303ac:	2000      	movs	r0, #0
   303ae:	e7e0      	b.n	30372 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   303b0:	7813      	ldrb	r3, [r2, #0]
   303b2:	1c58      	adds	r0, r3, #1
   303b4:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   303b6:	3317      	adds	r3, #23
   303b8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   303ba:	4608      	mov	r0, r1
   303bc:	f7d0 fd20 	bl	e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   303c0:	e7d7      	b.n	30372 <vs_cmd_put+0x4a>
		*param_length_out +=
   303c2:	7813      	ldrb	r3, [r2, #0]
   303c4:	3320      	adds	r3, #32
   303c6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   303c8:	4608      	mov	r0, r1
   303ca:	f7d0 fcd1 	bl	d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   303ce:	e7d0      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   303d0:	f7dc fc1d 	bl	cc0e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   303d4:	e7cd      	b.n	30372 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   303d6:	7813      	ldrb	r3, [r2, #0]
   303d8:	3301      	adds	r3, #1
   303da:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   303dc:	4608      	mov	r0, r1
   303de:	f7dc fc02 	bl	cbe6 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   303e2:	e7c6      	b.n	30372 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   303e4:	7813      	ldrb	r3, [r2, #0]
   303e6:	3340      	adds	r3, #64	; 0x40
   303e8:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   303ea:	4608      	mov	r0, r1
   303ec:	f7ff fe93 	bl	30116 <vs_supported_commands>
		return 0;
   303f0:	2000      	movs	r0, #0
   303f2:	e7be      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   303f4:	f7dc fbea 	bl	cbcc <sdc_hci_cmd_vs_llpm_mode_set>
   303f8:	e7bb      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   303fa:	f7dc fbe3 	bl	cbc4 <sdc_hci_cmd_vs_conn_update>
   303fe:	e7b8      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   30400:	f7dc fbd8 	bl	cbb4 <sdc_hci_cmd_vs_conn_event_extend>
   30404:	e7b5      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   30406:	f7dc fbe7 	bl	cbd8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   3040a:	e7b2      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   3040c:	f7dc fbdc 	bl	cbc8 <sdc_hci_cmd_vs_event_length_set>
   30410:	e7af      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   30412:	f7dc fbdd 	bl	cbd0 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   30416:	e7ac      	b.n	30372 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   30418:	f7dc fbe3 	bl	cbe2 <sdc_hci_cmd_vs_set_adv_randomness>
   3041c:	e7a9      	b.n	30372 <vs_cmd_put+0x4a>
	switch (opcode)	{
   3041e:	2001      	movs	r0, #1
   30420:	e7a7      	b.n	30372 <vs_cmd_put+0x4a>
   30422:	2001      	movs	r0, #1
   30424:	e7a5      	b.n	30372 <vs_cmd_put+0x4a>
   30426:	2001      	movs	r0, #1
   30428:	e7a3      	b.n	30372 <vs_cmd_put+0x4a>

0003042a <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   3042a:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   3042c:	2100      	movs	r1, #0
   3042e:	f7f3 fdc3 	bl	23fb8 <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   30432:	bd08      	pop	{r3, pc}

00030434 <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   30434:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   30438:	2901      	cmp	r1, #1
   3043a:	d803      	bhi.n	30444 <hci_cmd_le_generate_dhkey_v2+0x10>
{
   3043c:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   3043e:	f7f3 fdbb 	bl	23fb8 <cmd_le_generate_dhkey>
}
   30442:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   30444:	2012      	movs	r0, #18
}
   30446:	4770      	bx	lr

00030448 <m_config_clock_source_get>:
}
   30448:	2001      	movs	r0, #1
   3044a:	4770      	bx	lr

0003044c <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3044c:	4668      	mov	r0, sp
   3044e:	f020 0107 	bic.w	r1, r0, #7
   30452:	468d      	mov	sp, r1
   30454:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   30456:	f7da fd33 	bl	aec0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   3045a:	f7e7 f9d7 	bl	1780c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3045e:	f7e7 fad9 	bl	17a14 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   30462:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   30466:	4685      	mov	sp, r0
   30468:	4770      	bx	lr

0003046a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3046a:	4668      	mov	r0, sp
   3046c:	f020 0107 	bic.w	r1, r0, #7
   30470:	468d      	mov	sp, r1
   30472:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   30474:	f7da fcda 	bl	ae2c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   30478:	f7e7 f9c8 	bl	1780c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3047c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   30480:	4685      	mov	sp, r0
   30482:	4770      	bx	lr

00030484 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   30484:	4668      	mov	r0, sp
   30486:	f020 0107 	bic.w	r1, r0, #7
   3048a:	468d      	mov	sp, r1
   3048c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   3048e:	f7d8 f96d 	bl	876c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   30492:	f7e7 f9bb 	bl	1780c <_arch_isr_direct_pm>
   30496:	f7e7 fabd 	bl	17a14 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   3049a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3049e:	4685      	mov	sp, r0
   304a0:	4770      	bx	lr

000304a2 <mpsl_lib_init_sys>:
{
   304a2:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   304a4:	f7f3 fdc0 	bl	24028 <mpsl_lib_init_internal>
	if (err) {
   304a8:	4604      	mov	r4, r0
   304aa:	b108      	cbz	r0, 304b0 <mpsl_lib_init_sys+0xe>
}
   304ac:	4620      	mov	r0, r4
   304ae:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   304b0:	2201      	movs	r2, #1
   304b2:	2100      	movs	r1, #0
   304b4:	2008      	movs	r0, #8
   304b6:	f7fc f8c7 	bl	2c648 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   304ba:	2201      	movs	r2, #1
   304bc:	2100      	movs	r1, #0
   304be:	200b      	movs	r0, #11
   304c0:	f7fc f8c2 	bl	2c648 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   304c4:	2201      	movs	r2, #1
   304c6:	2100      	movs	r1, #0
   304c8:	4610      	mov	r0, r2
   304ca:	f7fc f8bd 	bl	2c648 <z_arm_irq_priority_set>
	return 0;
   304ce:	e7ed      	b.n	304ac <mpsl_lib_init_sys+0xa>

000304d0 <mpsl_low_prio_work_handler>:
{
   304d0:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   304d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   304d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   304da:	f7f2 feb1 	bl	23240 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   304de:	f7df ff4d 	bl	1037c <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   304e2:	f7f2 feb7 	bl	23254 <multithreading_lock_release>
}
   304e6:	bd08      	pop	{r3, pc}

000304e8 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   304e8:	b508      	push	{r3, lr}

	mpsl_fem_init();
   304ea:	f7e0 f91d 	bl	10728 <mpsl_fem_init>

	return 0;
}
   304ee:	2000      	movs	r0, #0
   304f0:	bd08      	pop	{r3, pc}

000304f2 <nrfx_clock_stop>:
	switch (domain) {
   304f2:	2801      	cmp	r0, #1
   304f4:	d000      	beq.n	304f8 <nrfx_clock_stop+0x6>
   304f6:	4770      	bx	lr
{
   304f8:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   304fa:	f7db fb75 	bl	bbe8 <mpsl_clock_hfclk_release>
}
   304fe:	bd08      	pop	{r3, pc}

00030500 <nrfx_clock_enable>:
}
   30500:	4770      	bx	lr

00030502 <nrfx_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   30502:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   30504:	f7db f97a 	bl	b7fc <MPSL_IRQ_CLOCK_Handler>
}
   30508:	bd08      	pop	{r3, pc}

0003050a <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(void)
{
   3050a:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   3050c:	f7f7 fab2 	bl	27a74 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   30510:	bd08      	pop	{r3, pc}

00030512 <hw_cc3xx_init>:

static int hw_cc3xx_init(void)
{
   30512:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   30514:	f7e6 feea 	bl	172ec <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   30518:	f7e6 ffe4 	bl	174e4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
   3051c:	f7ff fff5 	bl	3050a <hw_cc3xx_init_internal>
	return res;
}
   30520:	bd08      	pop	{r3, pc}

00030522 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   30522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30526:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3052a:	2b08      	cmp	r3, #8
   3052c:	d001      	beq.n	30532 <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   3052e:	2000      	movs	r0, #0
   30530:	4770      	bx	lr
                        return true;
   30532:	2001      	movs	r0, #1
    #endif
}
   30534:	4770      	bx	lr

00030536 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   30536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3053a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3053e:	2b08      	cmp	r3, #8
   30540:	d001      	beq.n	30546 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   30542:	2000      	movs	r0, #0
   30544:	4770      	bx	lr
                        return true;
   30546:	2001      	movs	r0, #1
    #endif
}
   30548:	4770      	bx	lr

0003054a <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3054a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3054e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   30552:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   30556:	2a08      	cmp	r2, #8
   30558:	d001      	beq.n	3055e <nrf52_errata_98+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   3055a:	2000      	movs	r0, #0
   3055c:	4770      	bx	lr
                switch(var2)
   3055e:	2b00      	cmp	r3, #0
   30560:	d804      	bhi.n	3056c <nrf52_errata_98+0x22>
   30562:	e8df f003 	tbb	[pc, r3]
   30566:	01          	.byte	0x01
   30567:	00          	.byte	0x00
   30568:	2001      	movs	r0, #1
   3056a:	4770      	bx	lr
                        return false;
   3056c:	2000      	movs	r0, #0
    #endif
}
   3056e:	4770      	bx	lr

00030570 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   30570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30574:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   30578:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3057c:	2a08      	cmp	r2, #8
   3057e:	d001      	beq.n	30584 <nrf52_errata_103+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   30580:	2000      	movs	r0, #0
   30582:	4770      	bx	lr
                switch(var2)
   30584:	2b00      	cmp	r3, #0
   30586:	d804      	bhi.n	30592 <nrf52_errata_103+0x22>
   30588:	e8df f003 	tbb	[pc, r3]
   3058c:	01          	.byte	0x01
   3058d:	00          	.byte	0x00
   3058e:	2001      	movs	r0, #1
   30590:	4770      	bx	lr
                        return false;
   30592:	2000      	movs	r0, #0
    #endif
}
   30594:	4770      	bx	lr

00030596 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   30596:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3059a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3059e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   305a2:	2a08      	cmp	r2, #8
   305a4:	d001      	beq.n	305aa <nrf52_errata_115+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   305a6:	2000      	movs	r0, #0
   305a8:	4770      	bx	lr
                switch(var2)
   305aa:	2b00      	cmp	r3, #0
   305ac:	d804      	bhi.n	305b8 <nrf52_errata_115+0x22>
   305ae:	e8df f003 	tbb	[pc, r3]
   305b2:	01          	.byte	0x01
   305b3:	00          	.byte	0x00
   305b4:	2001      	movs	r0, #1
   305b6:	4770      	bx	lr
                        return false;
   305b8:	2000      	movs	r0, #0
    #endif
}
   305ba:	4770      	bx	lr

000305bc <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   305bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   305c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   305c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   305c8:	2a08      	cmp	r2, #8
   305ca:	d001      	beq.n	305d0 <nrf52_errata_120+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   305cc:	2000      	movs	r0, #0
   305ce:	4770      	bx	lr
                switch(var2)
   305d0:	2b00      	cmp	r3, #0
   305d2:	d804      	bhi.n	305de <nrf52_errata_120+0x22>
   305d4:	e8df f003 	tbb	[pc, r3]
   305d8:	01          	.byte	0x01
   305d9:	00          	.byte	0x00
   305da:	2001      	movs	r0, #1
   305dc:	4770      	bx	lr
                        return false;
   305de:	2000      	movs	r0, #0
    #endif
}
   305e0:	4770      	bx	lr

000305e2 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   305e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   305e6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   305ea:	2b08      	cmp	r3, #8
   305ec:	d001      	beq.n	305f2 <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   305ee:	2000      	movs	r0, #0
   305f0:	4770      	bx	lr
                        return true;
   305f2:	2001      	movs	r0, #1
    #endif
}
   305f4:	4770      	bx	lr

000305f6 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   305f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   305fa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   305fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   30602:	2a08      	cmp	r2, #8
   30604:	d001      	beq.n	3060a <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   30606:	2000      	movs	r0, #0
   30608:	4770      	bx	lr
                switch(var2)
   3060a:	2b04      	cmp	r3, #4
   3060c:	d801      	bhi.n	30612 <nrf52_configuration_249+0x1c>
   3060e:	2000      	movs	r0, #0
   30610:	4770      	bx	lr
                        return true;
   30612:	2001      	movs	r0, #1
    #endif
}
   30614:	4770      	bx	lr

00030616 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   30616:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   30618:	f7ff ffed 	bl	305f6 <nrf52_configuration_249>
   3061c:	b138      	cbz	r0, 3062e <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   3061e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   30622:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   30626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3062a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   3062e:	bd08      	pop	{r3, pc}

00030630 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   30630:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   30632:	4780      	blx	r0
}
   30634:	bd08      	pop	{r3, pc}

00030636 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   30636:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   30638:	f000 ff5f 	bl	314fa <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   3063c:	bd08      	pop	{r3, pc}

0003063e <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3063e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30642:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   30646:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   3064a:	2a08      	cmp	r2, #8
   3064c:	d001      	beq.n	30652 <nrf52_errata_197+0x14>
        return false;
   3064e:	2000      	movs	r0, #0
   30650:	4770      	bx	lr
                switch(var2)
   30652:	2b02      	cmp	r3, #2
   30654:	d001      	beq.n	3065a <nrf52_errata_197+0x1c>
                        return false;
   30656:	2000      	movs	r0, #0
   30658:	4770      	bx	lr
                        return true;
   3065a:	2001      	movs	r0, #1
}
   3065c:	4770      	bx	lr

0003065e <nrf_power_dcdcen_vddh_set>:
{
   3065e:	b510      	push	{r4, lr}
   30660:	4604      	mov	r4, r0
    if (enable && nrf52_errata_197())
   30662:	b141      	cbz	r1, 30676 <nrf_power_dcdcen_vddh_set+0x18>
   30664:	f7ff ffeb 	bl	3063e <nrf52_errata_197>
   30668:	b148      	cbz	r0, 3067e <nrf_power_dcdcen_vddh_set+0x20>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   3066a:	2301      	movs	r3, #1
   3066c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   30670:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
   30674:	e000      	b.n	30678 <nrf_power_dcdcen_vddh_set+0x1a>
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   30676:	2300      	movs	r3, #0
   30678:	f8c4 3580 	str.w	r3, [r4, #1408]	; 0x580
}
   3067c:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3067e:	2301      	movs	r3, #1
   30680:	e7fa      	b.n	30678 <nrf_power_dcdcen_vddh_set+0x1a>

00030682 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   30682:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   30684:	2000      	movs	r0, #0
   30686:	f7e7 f8b3 	bl	177f0 <arch_irq_is_enabled>
   3068a:	b100      	cbz	r0, 3068e <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   3068c:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3068e:	f7fb ffd1 	bl	2c634 <arch_irq_enable>
}
   30692:	e7fb      	b.n	3068c <nrfx_power_clock_irq_init+0xa>

00030694 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   30694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   30698:	f44f 7260 	mov.w	r2, #896	; 0x380
   3069c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   306a0:	4770      	bx	lr

000306a2 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   306a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   306a6:	f44f 7260 	mov.w	r2, #896	; 0x380
   306aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   306ae:	4770      	bx	lr

000306b0 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   306b0:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   306b2:	f7f3 fed1 	bl	24458 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   306b6:	f7ff ff24 	bl	30502 <nrfx_clock_irq_handler>
}
   306ba:	bd08      	pop	{r3, pc}

000306bc <nrf_usbd_ep_disable>:
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   306bc:	f001 0c0f 	and.w	ip, r1, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   306c0:	f011 0f80 	tst.w	r1, #128	; 0x80
   306c4:	d109      	bne.n	306da <nrf_usbd_ep_disable+0x1e>
        p_reg->EPOUTEN &= ~(1UL << epnr);
   306c6:	f8d0 3514 	ldr.w	r3, [r0, #1300]	; 0x514
   306ca:	2201      	movs	r2, #1
   306cc:	fa02 f20c 	lsl.w	r2, r2, ip
   306d0:	ea23 0302 	bic.w	r3, r3, r2
   306d4:	f8c0 3514 	str.w	r3, [r0, #1300]	; 0x514
}
   306d8:	4770      	bx	lr
        p_reg->EPINEN &= ~(1UL << epnr);
   306da:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   306de:	2201      	movs	r2, #1
   306e0:	fa02 f20c 	lsl.w	r2, r2, ip
   306e4:	ea23 0302 	bic.w	r3, r3, r2
   306e8:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
   306ec:	4770      	bx	lr

000306ee <nrf_usbd_ep_easydma_set>:
    if (NRF_USBD_EPIN_CHECK(ep))
   306ee:	f011 0f80 	tst.w	r1, #128	; 0x80
   306f2:	d107      	bne.n	30704 <nrf_usbd_ep_easydma_set+0x16>
        if (NRF_USBD_EPISO_CHECK(ep))
   306f4:	f011 0f08 	tst.w	r1, #8
   306f8:	d017      	beq.n	3072a <nrf_usbd_ep_easydma_set+0x3c>
            p_reg->ISOOUT.PTR    = ptr;
   306fa:	f8c0 27a0 	str.w	r2, [r0, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   306fe:	f8c0 37a4 	str.w	r3, [r0, #1956]	; 0x7a4
   30702:	4770      	bx	lr
        if (NRF_USBD_EPISO_CHECK(ep))
   30704:	f011 0f08 	tst.w	r1, #8
   30708:	d004      	beq.n	30714 <nrf_usbd_ep_easydma_set+0x26>
            p_reg->ISOIN.PTR    = ptr;
   3070a:	f8c0 26a0 	str.w	r2, [r0, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   3070e:	f8c0 36a4 	str.w	r3, [r0, #1700]	; 0x6a4
   30712:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   30714:	f001 010f 	and.w	r1, r1, #15
            p_reg->EPIN[epnr].PTR    = ptr;
   30718:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
   3071c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   30720:	f8cc 2600 	str.w	r2, [ip, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   30724:	f8cc 3604 	str.w	r3, [ip, #1540]	; 0x604
   30728:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   3072a:	f001 010f 	and.w	r1, r1, #15
            p_reg->EPOUT[epnr].PTR    = ptr;
   3072e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
   30732:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   30736:	f8cc 2700 	str.w	r2, [ip, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   3073a:	f8cc 3704 	str.w	r3, [ip, #1796]	; 0x704
}
   3073e:	4770      	bx	lr

00030740 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   30740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30744:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   30748:	2b08      	cmp	r3, #8
   3074a:	d001      	beq.n	30750 <nrf52_errata_166+0x10>
        return false;
   3074c:	2000      	movs	r0, #0
   3074e:	4770      	bx	lr
                        return true;
   30750:	2001      	movs	r0, #1
}
   30752:	4770      	bx	lr

00030754 <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   30754:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30758:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   3075c:	2b08      	cmp	r3, #8
   3075e:	d001      	beq.n	30764 <nrf52_errata_171+0x10>
        return false;
   30760:	2000      	movs	r0, #0
   30762:	4770      	bx	lr
                        return true;
   30764:	2001      	movs	r0, #1
}
   30766:	4770      	bx	lr

00030768 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   30768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3076c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   30770:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   30774:	2a08      	cmp	r2, #8
   30776:	d001      	beq.n	3077c <nrf52_errata_187+0x14>
        return false;
   30778:	2000      	movs	r0, #0
   3077a:	4770      	bx	lr
                switch(var2)
   3077c:	2b00      	cmp	r3, #0
   3077e:	d804      	bhi.n	3078a <nrf52_errata_187+0x22>
   30780:	e8df f003 	tbb	[pc, r3]
   30784:	01          	.byte	0x01
   30785:	00          	.byte	0x00
   30786:	2000      	movs	r0, #0
   30788:	4770      	bx	lr
                        return true;
   3078a:	2001      	movs	r0, #1
}
   3078c:	4770      	bx	lr

0003078e <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3078e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30792:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   30796:	2b08      	cmp	r3, #8
   30798:	d001      	beq.n	3079e <nrf52_errata_199+0x10>
        return false;
   3079a:	2000      	movs	r0, #0
   3079c:	4770      	bx	lr
                        return true;
   3079e:	2001      	movs	r0, #1
}
   307a0:	4770      	bx	lr

000307a2 <nrf52_errata_223>:
}
   307a2:	2000      	movs	r0, #0
   307a4:	4770      	bx	lr

000307a6 <nrfx_usbd_consumer>:
{
   307a6:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   307a8:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   307aa:	429c      	cmp	r4, r3
   307ac:	d208      	bcs.n	307c0 <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   307ae:	2500      	movs	r5, #0
   307b0:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   307b2:	6809      	ldr	r1, [r1, #0]
   307b4:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   307b6:	429a      	cmp	r2, r3
   307b8:	d00b      	beq.n	307d2 <nrfx_usbd_consumer+0x2c>
   307ba:	2000      	movs	r0, #0
}
   307bc:	bc30      	pop	{r4, r5}
   307be:	4770      	bx	lr
        p_next->size = data_size;
   307c0:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   307c2:	680d      	ldr	r5, [r1, #0]
   307c4:	6005      	str	r5, [r0, #0]
        size -= data_size;
   307c6:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   307c8:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   307ca:	6808      	ldr	r0, [r1, #0]
   307cc:	4418      	add	r0, r3
   307ce:	6008      	str	r0, [r1, #0]
   307d0:	e7f1      	b.n	307b6 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   307d2:	b90c      	cbnz	r4, 307d8 <nrfx_usbd_consumer+0x32>
   307d4:	2000      	movs	r0, #0
   307d6:	e7f1      	b.n	307bc <nrfx_usbd_consumer+0x16>
   307d8:	2001      	movs	r0, #1
   307da:	e7ef      	b.n	307bc <nrfx_usbd_consumer+0x16>

000307dc <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   307dc:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   307de:	4293      	cmp	r3, r2
   307e0:	d800      	bhi.n	307e4 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   307e2:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   307e4:	680b      	ldr	r3, [r1, #0]
   307e6:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   307e8:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   307ea:	6848      	ldr	r0, [r1, #4]
   307ec:	1a80      	subs	r0, r0, r2
   307ee:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   307f0:	680b      	ldr	r3, [r1, #0]
   307f2:	4413      	add	r3, r2
   307f4:	600b      	str	r3, [r1, #0]
}
   307f6:	3800      	subs	r0, #0
   307f8:	bf18      	it	ne
   307fa:	2001      	movne	r0, #1
   307fc:	4770      	bx	lr

000307fe <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   307fe:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   30800:	4293      	cmp	r3, r2
   30802:	d800      	bhi.n	30806 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   30804:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   30806:	b162      	cbz	r2, 30822 <nrfx_usbd_feeder_ram_zlp+0x24>
   30808:	680b      	ldr	r3, [r1, #0]
   3080a:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   3080c:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   3080e:	684b      	ldr	r3, [r1, #4]
   30810:	1a9b      	subs	r3, r3, r2
   30812:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   30814:	680b      	ldr	r3, [r1, #0]
   30816:	4413      	add	r3, r2
   30818:	600b      	str	r3, [r1, #0]
}
   3081a:	1e10      	subs	r0, r2, #0
   3081c:	bf18      	it	ne
   3081e:	2001      	movne	r0, #1
   30820:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   30822:	2300      	movs	r3, #0
   30824:	e7f1      	b.n	3080a <nrfx_usbd_feeder_ram_zlp+0xc>

00030826 <ev_started_handler>:
}
   30826:	4770      	bx	lr

00030828 <usbd_dma_scheduler_algorithm>:
}
   30828:	fa90 f0a0 	rbit	r0, r0
   3082c:	fab0 f080 	clz	r0, r0
   30830:	4770      	bx	lr

00030832 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   30832:	b508      	push	{r3, lr}
   30834:	2087      	movs	r0, #135	; 0x87
   30836:	f7f3 ffeb 	bl	24810 <nrf_usbd_epin_dma_handler>
   3083a:	bd08      	pop	{r3, pc}

0003083c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   3083c:	b508      	push	{r3, lr}
   3083e:	2086      	movs	r0, #134	; 0x86
   30840:	f7f3 ffe6 	bl	24810 <nrf_usbd_epin_dma_handler>
   30844:	bd08      	pop	{r3, pc}

00030846 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   30846:	b508      	push	{r3, lr}
   30848:	2085      	movs	r0, #133	; 0x85
   3084a:	f7f3 ffe1 	bl	24810 <nrf_usbd_epin_dma_handler>
   3084e:	bd08      	pop	{r3, pc}

00030850 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   30850:	b508      	push	{r3, lr}
   30852:	2084      	movs	r0, #132	; 0x84
   30854:	f7f3 ffdc 	bl	24810 <nrf_usbd_epin_dma_handler>
   30858:	bd08      	pop	{r3, pc}

0003085a <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   3085a:	b508      	push	{r3, lr}
   3085c:	2083      	movs	r0, #131	; 0x83
   3085e:	f7f3 ffd7 	bl	24810 <nrf_usbd_epin_dma_handler>
   30862:	bd08      	pop	{r3, pc}

00030864 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   30864:	b508      	push	{r3, lr}
   30866:	2082      	movs	r0, #130	; 0x82
   30868:	f7f3 ffd2 	bl	24810 <nrf_usbd_epin_dma_handler>
   3086c:	bd08      	pop	{r3, pc}

0003086e <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   3086e:	b508      	push	{r3, lr}
   30870:	2081      	movs	r0, #129	; 0x81
   30872:	f7f3 ffcd 	bl	24810 <nrf_usbd_epin_dma_handler>
   30876:	bd08      	pop	{r3, pc}

00030878 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   30878:	b508      	push	{r3, lr}
   3087a:	f7f4 f80f 	bl	2489c <nrf_usbd_ep0in_dma_handler>
   3087e:	bd08      	pop	{r3, pc}

00030880 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   30880:	b508      	push	{r3, lr}
   30882:	2008      	movs	r0, #8
   30884:	f7f4 f896 	bl	249b4 <nrf_usbd_epoutiso_dma_handler>
   30888:	bd08      	pop	{r3, pc}

0003088a <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   3088a:	b508      	push	{r3, lr}
   3088c:	2088      	movs	r0, #136	; 0x88
   3088e:	f7f4 f8d1 	bl	24a34 <nrf_usbd_epiniso_dma_handler>
   30892:	bd08      	pop	{r3, pc}

00030894 <nrfx_usbd_feeder_flash>:
{
   30894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30898:	4606      	mov	r6, r0
   3089a:	460c      	mov	r4, r1
   3089c:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   3089e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   308a2:	f7f4 fad3 	bl	24e4c <nrfx_usbd_feeder_buffer_get>
   308a6:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   308a8:	45a8      	cmp	r8, r5
   308aa:	d800      	bhi.n	308ae <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   308ac:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   308ae:	462a      	mov	r2, r5
   308b0:	6821      	ldr	r1, [r4, #0]
   308b2:	4638      	mov	r0, r7
   308b4:	f7fb ff9a 	bl	2c7ec <memcpy>
    p_next->p_data.tx = p_buffer;
   308b8:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   308ba:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   308bc:	6860      	ldr	r0, [r4, #4]
   308be:	1b40      	subs	r0, r0, r5
   308c0:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   308c2:	6823      	ldr	r3, [r4, #0]
   308c4:	442b      	add	r3, r5
   308c6:	6023      	str	r3, [r4, #0]
}
   308c8:	3800      	subs	r0, #0
   308ca:	bf18      	it	ne
   308cc:	2001      	movne	r0, #1
   308ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000308d2 <nrfx_usbd_feeder_flash_zlp>:
{
   308d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   308d6:	4606      	mov	r6, r0
   308d8:	460d      	mov	r5, r1
   308da:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   308dc:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   308e0:	f7f4 fab4 	bl	24e4c <nrfx_usbd_feeder_buffer_get>
   308e4:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   308e6:	45a0      	cmp	r8, r4
   308e8:	d800      	bhi.n	308ec <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   308ea:	4644      	mov	r4, r8
    if (tx_size != 0)
   308ec:	b96c      	cbnz	r4, 3090a <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
   308ee:	2300      	movs	r3, #0
   308f0:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
   308f2:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   308f4:	686b      	ldr	r3, [r5, #4]
   308f6:	1b1b      	subs	r3, r3, r4
   308f8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   308fa:	682b      	ldr	r3, [r5, #0]
   308fc:	4423      	add	r3, r4
   308fe:	602b      	str	r3, [r5, #0]
}
   30900:	1e20      	subs	r0, r4, #0
   30902:	bf18      	it	ne
   30904:	2001      	movne	r0, #1
   30906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3090a:	4622      	mov	r2, r4
   3090c:	6829      	ldr	r1, [r5, #0]
   3090e:	4638      	mov	r0, r7
   30910:	f7fb ff6c 	bl	2c7ec <memcpy>
        p_next->p_data.tx = p_buffer;
   30914:	6037      	str	r7, [r6, #0]
   30916:	e7ec      	b.n	308f2 <nrfx_usbd_feeder_flash_zlp+0x20>

00030918 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   30918:	b508      	push	{r3, lr}
   3091a:	2007      	movs	r0, #7
   3091c:	f7f4 fbbe 	bl	2509c <nrf_usbd_epout_dma_handler>
   30920:	bd08      	pop	{r3, pc}

00030922 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   30922:	b508      	push	{r3, lr}
   30924:	2006      	movs	r0, #6
   30926:	f7f4 fbb9 	bl	2509c <nrf_usbd_epout_dma_handler>
   3092a:	bd08      	pop	{r3, pc}

0003092c <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   3092c:	b508      	push	{r3, lr}
   3092e:	2005      	movs	r0, #5
   30930:	f7f4 fbb4 	bl	2509c <nrf_usbd_epout_dma_handler>
   30934:	bd08      	pop	{r3, pc}

00030936 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   30936:	b508      	push	{r3, lr}
   30938:	2004      	movs	r0, #4
   3093a:	f7f4 fbaf 	bl	2509c <nrf_usbd_epout_dma_handler>
   3093e:	bd08      	pop	{r3, pc}

00030940 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   30940:	b508      	push	{r3, lr}
   30942:	2003      	movs	r0, #3
   30944:	f7f4 fbaa 	bl	2509c <nrf_usbd_epout_dma_handler>
   30948:	bd08      	pop	{r3, pc}

0003094a <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   3094a:	b508      	push	{r3, lr}
   3094c:	2002      	movs	r0, #2
   3094e:	f7f4 fba5 	bl	2509c <nrf_usbd_epout_dma_handler>
   30952:	bd08      	pop	{r3, pc}

00030954 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   30954:	b508      	push	{r3, lr}
   30956:	2001      	movs	r0, #1
   30958:	f7f4 fba0 	bl	2509c <nrf_usbd_epout_dma_handler>
   3095c:	bd08      	pop	{r3, pc}

0003095e <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   3095e:	b508      	push	{r3, lr}
   30960:	f7f4 fc5c 	bl	2521c <nrf_usbd_ep0out_dma_handler>
   30964:	bd08      	pop	{r3, pc}

00030966 <nrfx_usbd_ep_abort>:
{
   30966:	b508      	push	{r3, lr}
    usbd_ep_abort(ep);
   30968:	f7f4 fcdc 	bl	25324 <usbd_ep_abort>
}
   3096c:	bd08      	pop	{r3, pc}

0003096e <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   3096e:	b508      	push	{r3, lr}
  _DoInit();
   30970:	f7f4 fedc 	bl	2572c <_DoInit>
}
   30974:	bd08      	pop	{r3, pc}

00030976 <rtt_init>:
{
   30976:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   30978:	f7ff fff9 	bl	3096e <SEGGER_RTT_Init>
}
   3097c:	2000      	movs	r0, #0
   3097e:	bd08      	pop	{r3, pc}

00030980 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   30980:	b160      	cbz	r0, 3099c <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   30982:	68c3      	ldr	r3, [r0, #12]
   30984:	785a      	ldrb	r2, [r3, #1]
   30986:	f012 0f01 	tst.w	r2, #1
   3098a:	d003      	beq.n	30994 <z_device_is_ready+0x14>
   3098c:	781b      	ldrb	r3, [r3, #0]
   3098e:	b11b      	cbz	r3, 30998 <z_device_is_ready+0x18>
   30990:	2000      	movs	r0, #0
   30992:	4770      	bx	lr
   30994:	2000      	movs	r0, #0
   30996:	4770      	bx	lr
   30998:	2001      	movs	r0, #1
   3099a:	4770      	bx	lr
		return false;
   3099c:	2000      	movs	r0, #0
}
   3099e:	4770      	bx	lr

000309a0 <z_early_memset>:
{
   309a0:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   309a2:	f7fb ff52 	bl	2c84a <memset>
}
   309a6:	bd08      	pop	{r3, pc}

000309a8 <z_early_memcpy>:
{
   309a8:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   309aa:	f7fb ff1f 	bl	2c7ec <memcpy>
}
   309ae:	bd08      	pop	{r3, pc}

000309b0 <k_heap_init>:
{
   309b0:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   309b2:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   309b6:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   309b8:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   309ba:	f7f9 ff47 	bl	2a84c <sys_heap_init>
}
   309be:	bd10      	pop	{r4, pc}

000309c0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   309c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   309c4:	b085      	sub	sp, #20
   309c6:	4607      	mov	r7, r0
   309c8:	9103      	str	r1, [sp, #12]
   309ca:	4692      	mov	sl, r2
   309cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   309ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   309d0:	4628      	mov	r0, r5
   309d2:	4621      	mov	r1, r4
   309d4:	f000 fd97 	bl	31506 <sys_clock_timeout_end_calc>
   309d8:	4606      	mov	r6, r0
   309da:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   309dc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   309e0:	bf08      	it	eq
   309e2:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   309e6:	d00d      	beq.n	30a04 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   309e8:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   309ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   309f0:	f3ef 8511 	mrs	r5, BASEPRI
   309f4:	f383 8812 	msr	BASEPRI_MAX, r3
   309f8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   309fc:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   30a00:	4644      	mov	r4, r8

	while (ret == NULL) {
   30a02:	e014      	b.n	30a2e <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30a04:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   30a08:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   30a0c:	e7ec      	b.n	309e8 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30a0e:	9000      	str	r0, [sp, #0]
   30a10:	9101      	str	r1, [sp, #4]
   30a12:	f107 020c 	add.w	r2, r7, #12
   30a16:	4629      	mov	r1, r5
   30a18:	4658      	mov	r0, fp
   30a1a:	f7f5 ffdf 	bl	269dc <z_pend_curr>
   30a1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   30a22:	f3ef 8511 	mrs	r5, BASEPRI
   30a26:	f383 8812 	msr	BASEPRI_MAX, r3
   30a2a:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   30a2e:	b9ac      	cbnz	r4, 30a5c <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   30a30:	4652      	mov	r2, sl
   30a32:	9903      	ldr	r1, [sp, #12]
   30a34:	4638      	mov	r0, r7
   30a36:	f7f9 fe93 	bl	2a760 <sys_heap_aligned_alloc>
   30a3a:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   30a3c:	f7f6 fb40 	bl	270c0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   30a40:	b964      	cbnz	r4, 30a5c <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   30a42:	1a30      	subs	r0, r6, r0
   30a44:	eb69 0101 	sbc.w	r1, r9, r1
   30a48:	2801      	cmp	r0, #1
   30a4a:	f171 0300 	sbcs.w	r3, r1, #0
   30a4e:	db05      	blt.n	30a5c <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   30a50:	f1b8 0f00 	cmp.w	r8, #0
   30a54:	d1db      	bne.n	30a0e <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   30a56:	f04f 0801 	mov.w	r8, #1
   30a5a:	e7d8      	b.n	30a0e <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   30a5c:	f385 8811 	msr	BASEPRI, r5
   30a60:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   30a64:	4620      	mov	r0, r4
   30a66:	b005      	add	sp, #20
   30a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030a6c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   30a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30a6e:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30a70:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   30a74:	f04f 0340 	mov.w	r3, #64	; 0x40
   30a78:	f3ef 8511 	mrs	r5, BASEPRI
   30a7c:	f383 8812 	msr	BASEPRI_MAX, r3
   30a80:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   30a84:	f7f9 fe28 	bl	2a6d8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   30a88:	f104 000c 	add.w	r0, r4, #12
   30a8c:	f000 fc82 	bl	31394 <z_unpend_all>
   30a90:	b920      	cbnz	r0, 30a9c <k_heap_free+0x30>
	__asm__ volatile(
   30a92:	f385 8811 	msr	BASEPRI, r5
   30a96:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   30a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   30a9c:	4629      	mov	r1, r5
   30a9e:	4638      	mov	r0, r7
   30aa0:	f7f5 fe4e 	bl	26740 <z_reschedule>
   30aa4:	e7f9      	b.n	30a9a <k_heap_free+0x2e>

00030aa6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   30aa6:	68c2      	ldr	r2, [r0, #12]
   30aa8:	6903      	ldr	r3, [r0, #16]
   30aaa:	431a      	orrs	r2, r3
   30aac:	f012 0203 	ands.w	r2, r2, #3
   30ab0:	d10d      	bne.n	30ace <create_free_list+0x28>
	slab->free_list = NULL;
   30ab2:	2100      	movs	r1, #0
   30ab4:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30ab6:	e005      	b.n	30ac4 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   30ab8:	6941      	ldr	r1, [r0, #20]
   30aba:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   30abc:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   30abe:	68c1      	ldr	r1, [r0, #12]
   30ac0:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30ac2:	3201      	adds	r2, #1
   30ac4:	6881      	ldr	r1, [r0, #8]
   30ac6:	4291      	cmp	r1, r2
   30ac8:	d8f6      	bhi.n	30ab8 <create_free_list+0x12>
	return 0;
   30aca:	2000      	movs	r0, #0
   30acc:	4770      	bx	lr
		return -EINVAL;
   30ace:	f06f 0015 	mvn.w	r0, #21
}
   30ad2:	4770      	bx	lr

00030ad4 <k_mem_slab_init>:
{
   30ad4:	b510      	push	{r4, lr}
   30ad6:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   30ad8:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   30ada:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   30adc:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   30ade:	2300      	movs	r3, #0
   30ae0:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   30ae2:	f7ff ffe0 	bl	30aa6 <create_free_list>
	if (rc < 0) {
   30ae6:	2800      	cmp	r0, #0
   30ae8:	db01      	blt.n	30aee <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   30aea:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   30aec:	6064      	str	r4, [r4, #4]
}
   30aee:	bd10      	pop	{r4, pc}

00030af0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   30af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30af4:	4604      	mov	r4, r0
   30af6:	460d      	mov	r5, r1
	__asm__ volatile(
   30af8:	f04f 0340 	mov.w	r3, #64	; 0x40
   30afc:	f3ef 8611 	mrs	r6, BASEPRI
   30b00:	f383 8812 	msr	BASEPRI_MAX, r3
   30b04:	f3bf 8f6f 	isb	sy
   30b08:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   30b0a:	6943      	ldr	r3, [r0, #20]
   30b0c:	b16b      	cbz	r3, 30b2a <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   30b0e:	682b      	ldr	r3, [r5, #0]
   30b10:	6962      	ldr	r2, [r4, #20]
   30b12:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   30b14:	682b      	ldr	r3, [r5, #0]
   30b16:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   30b18:	69a3      	ldr	r3, [r4, #24]
   30b1a:	3b01      	subs	r3, #1
   30b1c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   30b1e:	f387 8811 	msr	BASEPRI, r7
   30b22:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   30b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30b2a:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   30b2e:	f000 fc0f 	bl	31350 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   30b32:	2800      	cmp	r0, #0
   30b34:	d0eb      	beq.n	30b0e <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   30b36:	682a      	ldr	r2, [r5, #0]
   30b38:	2100      	movs	r1, #0
   30b3a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   30b3e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   30b40:	f000 fb50 	bl	311e4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   30b44:	4631      	mov	r1, r6
   30b46:	4640      	mov	r0, r8
   30b48:	f7f5 fdfa 	bl	26740 <z_reschedule>
			return;
   30b4c:	e7eb      	b.n	30b26 <k_mem_slab_free+0x36>

00030b4e <setup_thread_stack>:
{
   30b4e:	b410      	push	{r4}
   30b50:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   30b52:	3207      	adds	r2, #7
   30b54:	f022 0207 	bic.w	r2, r2, #7
   30b58:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   30b5c:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   30b60:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   30b64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   30b68:	2200      	movs	r2, #0
   30b6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   30b6e:	4408      	add	r0, r1
   30b70:	bc10      	pop	{r4}
   30b72:	4770      	bx	lr

00030b74 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30b74:	f3ef 8005 	mrs	r0, IPSR
}
   30b78:	3800      	subs	r0, #0
   30b7a:	bf18      	it	ne
   30b7c:	2001      	movne	r0, #1
   30b7e:	4770      	bx	lr

00030b80 <k_thread_name_get>:
}
   30b80:	3078      	adds	r0, #120	; 0x78
   30b82:	4770      	bx	lr

00030b84 <z_impl_k_thread_start>:
{
   30b84:	b508      	push	{r3, lr}
	z_sched_start(thread);
   30b86:	f7f5 feef 	bl	26968 <z_sched_start>
}
   30b8a:	bd08      	pop	{r3, pc}

00030b8c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   30b8c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   30b8e:	2400      	movs	r4, #0
   30b90:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   30b92:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   30b94:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   30b96:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   30b98:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   30b9a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   30b9c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   30b9e:	bc10      	pop	{r4}
   30ba0:	4770      	bx	lr

00030ba2 <z_impl_k_thread_create>:
{
   30ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
   30ba4:	b087      	sub	sp, #28
   30ba6:	4604      	mov	r4, r0
   30ba8:	9e12      	ldr	r6, [sp, #72]	; 0x48
   30baa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   30bac:	2700      	movs	r7, #0
   30bae:	9705      	str	r7, [sp, #20]
   30bb0:	9f10      	ldr	r7, [sp, #64]	; 0x40
   30bb2:	9704      	str	r7, [sp, #16]
   30bb4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   30bb6:	9703      	str	r7, [sp, #12]
   30bb8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   30bba:	9702      	str	r7, [sp, #8]
   30bbc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   30bbe:	9701      	str	r7, [sp, #4]
   30bc0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   30bc2:	9700      	str	r7, [sp, #0]
   30bc4:	f7f5 f986 	bl	25ed4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   30bc8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   30bcc:	bf08      	it	eq
   30bce:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   30bd2:	d102      	bne.n	30bda <z_impl_k_thread_create+0x38>
}
   30bd4:	4620      	mov	r0, r4
   30bd6:	b007      	add	sp, #28
   30bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   30bda:	4632      	mov	r2, r6
   30bdc:	462b      	mov	r3, r5
   30bde:	4620      	mov	r0, r4
   30be0:	f7f5 f96a 	bl	25eb8 <schedule_new_thread>
   30be4:	e7f6      	b.n	30bd4 <z_impl_k_thread_create+0x32>

00030be6 <z_pm_save_idle_exit>:
{
   30be6:	b508      	push	{r3, lr}
	pm_system_resume();
   30be8:	f7e3 fef0 	bl	149cc <pm_system_resume>
	sys_clock_idle_exit();
   30bec:	f7ff f80c 	bl	2fc08 <sys_clock_idle_exit>
}
   30bf0:	bd08      	pop	{r3, pc}

00030bf2 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   30bf2:	4288      	cmp	r0, r1
   30bf4:	da00      	bge.n	30bf8 <new_prio_for_inheritance+0x6>
   30bf6:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   30bf8:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   30bfc:	db01      	blt.n	30c02 <new_prio_for_inheritance+0x10>
   30bfe:	4608      	mov	r0, r1
   30c00:	4770      	bx	lr
   30c02:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   30c06:	4770      	bx	lr

00030c08 <adjust_owner_prio>:
{
   30c08:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   30c0a:	6880      	ldr	r0, [r0, #8]
   30c0c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30c10:	428b      	cmp	r3, r1
   30c12:	d101      	bne.n	30c18 <adjust_owner_prio+0x10>
	return false;
   30c14:	2000      	movs	r0, #0
}
   30c16:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   30c18:	f7f5 fefc 	bl	26a14 <z_set_prio>
   30c1c:	e7fb      	b.n	30c16 <adjust_owner_prio+0xe>

00030c1e <z_impl_k_mutex_init>:
{
   30c1e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30c20:	2000      	movs	r0, #0
   30c22:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   30c24:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   30c26:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   30c28:	605b      	str	r3, [r3, #4]
}
   30c2a:	4770      	bx	lr

00030c2c <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30c2c:	680b      	ldr	r3, [r1, #0]
   30c2e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30c32:	600b      	str	r3, [r1, #0]
	return list->tail;
   30c34:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   30c36:	b132      	cbz	r2, 30c46 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30c38:	6813      	ldr	r3, [r2, #0]
   30c3a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30c3e:	430b      	orrs	r3, r1
   30c40:	6013      	str	r3, [r2, #0]
	list->tail = node;
   30c42:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   30c44:	4770      	bx	lr
	list->tail = node;
   30c46:	6041      	str	r1, [r0, #4]
	list->head = node;
   30c48:	6001      	str	r1, [r0, #0]
}
   30c4a:	4770      	bx	lr

00030c4c <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   30c4c:	b508      	push	{r3, lr}
   30c4e:	b191      	cbz	r1, 30c76 <sys_sflist_insert+0x2a>
   30c50:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30c52:	680b      	ldr	r3, [r1, #0]
   30c54:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   30c58:	2b03      	cmp	r3, #3
   30c5a:	d918      	bls.n	30c8e <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30c5c:	6813      	ldr	r3, [r2, #0]
   30c5e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30c62:	430b      	orrs	r3, r1
   30c64:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30c66:	f8dc 3000 	ldr.w	r3, [ip]
   30c6a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30c6e:	4313      	orrs	r3, r2
   30c70:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   30c74:	bd08      	pop	{r3, pc}
	return list->head;
   30c76:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30c78:	6813      	ldr	r3, [r2, #0]
   30c7a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30c7e:	430b      	orrs	r3, r1
   30c80:	6013      	str	r3, [r2, #0]
	list->head = node;
   30c82:	6002      	str	r2, [r0, #0]
	return list->tail;
   30c84:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   30c86:	2b00      	cmp	r3, #0
   30c88:	d1f4      	bne.n	30c74 <sys_sflist_insert+0x28>
	list->tail = node;
   30c8a:	6042      	str	r2, [r0, #4]
}
   30c8c:	e7f2      	b.n	30c74 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   30c8e:	4611      	mov	r1, r2
   30c90:	f7ff ffcc 	bl	30c2c <sys_sflist_append>
   30c94:	e7ee      	b.n	30c74 <sys_sflist_insert+0x28>

00030c96 <prepare_thread_to_run>:
{
   30c96:	b508      	push	{r3, lr}
   30c98:	2200      	movs	r2, #0
   30c9a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   30c9e:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   30ca0:	f000 faa0 	bl	311e4 <z_ready_thread>
}
   30ca4:	bd08      	pop	{r3, pc}

00030ca6 <queue_insert>:
{
   30ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30caa:	4604      	mov	r4, r0
   30cac:	460e      	mov	r6, r1
   30cae:	4615      	mov	r5, r2
   30cb0:	461f      	mov	r7, r3
   30cb2:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   30cb6:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   30cba:	f04f 0240 	mov.w	r2, #64	; 0x40
   30cbe:	f3ef 8911 	mrs	r9, BASEPRI
   30cc2:	f382 8812 	msr	BASEPRI_MAX, r2
   30cc6:	f3bf 8f6f 	isb	sy
   30cca:	46ca      	mov	sl, r9
	if (is_append) {
   30ccc:	b103      	cbz	r3, 30cd0 <queue_insert+0x2a>
	return list->tail;
   30cce:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   30cd0:	4640      	mov	r0, r8
   30cd2:	f000 fb3d 	bl	31350 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   30cd6:	b998      	cbnz	r0, 30d00 <queue_insert+0x5a>
	if (alloc) {
   30cd8:	b9df      	cbnz	r7, 30d12 <queue_insert+0x6c>
	node->next_and_flags = flags;
   30cda:	2300      	movs	r3, #0
   30cdc:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   30cde:	462a      	mov	r2, r5
   30ce0:	4631      	mov	r1, r6
   30ce2:	4620      	mov	r0, r4
   30ce4:	f7ff ffb2 	bl	30c4c <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   30ce8:	2104      	movs	r1, #4
   30cea:	f104 0010 	add.w	r0, r4, #16
   30cee:	f000 fdfe 	bl	318ee <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   30cf2:	4649      	mov	r1, r9
   30cf4:	4640      	mov	r0, r8
   30cf6:	f7f5 fd23 	bl	26740 <z_reschedule>
	return 0;
   30cfa:	2000      	movs	r0, #0
}
   30cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   30d00:	4629      	mov	r1, r5
   30d02:	f7ff ffc8 	bl	30c96 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   30d06:	4649      	mov	r1, r9
   30d08:	4640      	mov	r0, r8
   30d0a:	f7f5 fd19 	bl	26740 <z_reschedule>
		return 0;
   30d0e:	2000      	movs	r0, #0
   30d10:	e7f4      	b.n	30cfc <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   30d12:	2108      	movs	r1, #8
   30d14:	2000      	movs	r0, #0
   30d16:	f7f6 fb2b 	bl	27370 <z_thread_aligned_alloc>
		if (anode == NULL) {
   30d1a:	b120      	cbz	r0, 30d26 <queue_insert+0x80>
		anode->data = data;
   30d1c:	6045      	str	r5, [r0, #4]
   30d1e:	2201      	movs	r2, #1
   30d20:	6002      	str	r2, [r0, #0]
		data = anode;
   30d22:	4605      	mov	r5, r0
   30d24:	e7db      	b.n	30cde <queue_insert+0x38>
	__asm__ volatile(
   30d26:	f38a 8811 	msr	BASEPRI, sl
   30d2a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   30d2e:	f06f 000b 	mvn.w	r0, #11
   30d32:	e7e3      	b.n	30cfc <queue_insert+0x56>

00030d34 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30d34:	b160      	cbz	r0, 30d50 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30d36:	6803      	ldr	r3, [r0, #0]
   30d38:	f013 0f03 	tst.w	r3, #3
   30d3c:	d008      	beq.n	30d50 <z_queue_node_peek+0x1c>
{
   30d3e:	b510      	push	{r4, lr}
		ret = anode->data;
   30d40:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30d42:	b909      	cbnz	r1, 30d48 <z_queue_node_peek+0x14>
		ret = anode->data;
   30d44:	4620      	mov	r0, r4
}
   30d46:	bd10      	pop	{r4, pc}
			k_free(anode);
   30d48:	f000 fe01 	bl	3194e <k_free>
		ret = anode->data;
   30d4c:	4620      	mov	r0, r4
   30d4e:	e7fa      	b.n	30d46 <z_queue_node_peek+0x12>
}
   30d50:	4770      	bx	lr

00030d52 <z_impl_k_queue_init>:
	list->head = NULL;
   30d52:	2300      	movs	r3, #0
   30d54:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   30d56:	6043      	str	r3, [r0, #4]
   30d58:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   30d5c:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   30d5e:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   30d60:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   30d64:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   30d66:	6143      	str	r3, [r0, #20]
}
   30d68:	4770      	bx	lr

00030d6a <k_queue_append>:
{
   30d6a:	b500      	push	{lr}
   30d6c:	b083      	sub	sp, #12
   30d6e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   30d70:	2301      	movs	r3, #1
   30d72:	9300      	str	r3, [sp, #0]
   30d74:	2300      	movs	r3, #0
   30d76:	4619      	mov	r1, r3
   30d78:	f7ff ff95 	bl	30ca6 <queue_insert>
}
   30d7c:	b003      	add	sp, #12
   30d7e:	f85d fb04 	ldr.w	pc, [sp], #4

00030d82 <k_queue_prepend>:
{
   30d82:	b500      	push	{lr}
   30d84:	b083      	sub	sp, #12
   30d86:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   30d88:	2100      	movs	r1, #0
   30d8a:	9100      	str	r1, [sp, #0]
   30d8c:	460b      	mov	r3, r1
   30d8e:	f7ff ff8a 	bl	30ca6 <queue_insert>
}
   30d92:	b003      	add	sp, #12
   30d94:	f85d fb04 	ldr.w	pc, [sp], #4

00030d98 <z_impl_k_queue_peek_head>:

	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
   30d98:	b508      	push	{r3, lr}
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   30d9a:	2100      	movs	r1, #0
   30d9c:	6800      	ldr	r0, [r0, #0]
   30d9e:	f7ff ffc9 	bl	30d34 <z_queue_node_peek>

	SYS_PORT_TRACING_OBJ_FUNC(k_queue, peek_head, queue, ret);

	return ret;
}
   30da2:	bd08      	pop	{r3, pc}

00030da4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30da4:	b15a      	cbz	r2, 30dbe <z_impl_k_sem_init+0x1a>
   30da6:	428a      	cmp	r2, r1
   30da8:	d30c      	bcc.n	30dc4 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   30daa:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   30dac:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   30dae:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   30db0:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   30db2:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   30db6:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   30db8:	6143      	str	r3, [r0, #20]
	return 0;
   30dba:	2000      	movs	r0, #0
   30dbc:	4770      	bx	lr
		return -EINVAL;
   30dbe:	f06f 0015 	mvn.w	r0, #21
   30dc2:	4770      	bx	lr
   30dc4:	f06f 0015 	mvn.w	r0, #21
}
   30dc8:	4770      	bx	lr

00030dca <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   30dca:	460b      	mov	r3, r1
   30dcc:	b139      	cbz	r1, 30dde <sys_slist_remove+0x14>
	return node->next;
   30dce:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   30dd0:	6019      	str	r1, [r3, #0]
	return list->tail;
   30dd2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   30dd4:	428a      	cmp	r2, r1
   30dd6:	d009      	beq.n	30dec <sys_slist_remove+0x22>
	parent->next = child;
   30dd8:	2300      	movs	r3, #0
   30dda:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   30ddc:	4770      	bx	lr
	return node->next;
   30dde:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   30de0:	6003      	str	r3, [r0, #0]
	return list->tail;
   30de2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   30de4:	428a      	cmp	r2, r1
   30de6:	d1f7      	bne.n	30dd8 <sys_slist_remove+0xe>
	list->tail = node;
   30de8:	6043      	str	r3, [r0, #4]
}
   30dea:	e7f5      	b.n	30dd8 <sys_slist_remove+0xe>
	list->tail = node;
   30dec:	6043      	str	r3, [r0, #4]
}
   30dee:	e7f3      	b.n	30dd8 <sys_slist_remove+0xe>

00030df0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30df0:	b508      	push	{r3, lr}
   30df2:	460a      	mov	r2, r1
	return list->head;
   30df4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30df6:	2100      	movs	r1, #0
   30df8:	e001      	b.n	30dfe <sys_slist_find_and_remove+0xe>
   30dfa:	4619      	mov	r1, r3
   30dfc:	681b      	ldr	r3, [r3, #0]
   30dfe:	b12b      	cbz	r3, 30e0c <sys_slist_find_and_remove+0x1c>
   30e00:	4293      	cmp	r3, r2
   30e02:	d1fa      	bne.n	30dfa <sys_slist_find_and_remove+0xa>
   30e04:	f7ff ffe1 	bl	30dca <sys_slist_remove>
   30e08:	2001      	movs	r0, #1
   30e0a:	e000      	b.n	30e0e <sys_slist_find_and_remove+0x1e>
   30e0c:	2000      	movs	r0, #0
   30e0e:	bd08      	pop	{r3, pc}

00030e10 <queue_remove_locked>:
{
   30e10:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   30e12:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   30e14:	f023 0204 	bic.w	r2, r3, #4
   30e18:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   30e1a:	f013 0f04 	tst.w	r3, #4
   30e1e:	d100      	bne.n	30e22 <queue_remove_locked+0x12>
}
   30e20:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   30e22:	30b8      	adds	r0, #184	; 0xb8
   30e24:	f7ff ffe4 	bl	30df0 <sys_slist_find_and_remove>
}
   30e28:	e7fa      	b.n	30e20 <queue_remove_locked+0x10>

00030e2a <cancel_async_locked>:
{
   30e2a:	b510      	push	{r4, lr}
   30e2c:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   30e2e:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30e30:	f013 0f02 	tst.w	r3, #2
   30e34:	d009      	beq.n	30e4a <cancel_async_locked+0x20>
	return *flagp;
   30e36:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   30e38:	f013 000f 	ands.w	r0, r3, #15
   30e3c:	d004      	beq.n	30e48 <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   30e3e:	f043 0202 	orr.w	r2, r3, #2
   30e42:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   30e44:	f040 0002 	orr.w	r0, r0, #2
}
   30e48:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   30e4a:	4601      	mov	r1, r0
   30e4c:	6880      	ldr	r0, [r0, #8]
   30e4e:	f7ff ffdf 	bl	30e10 <queue_remove_locked>
   30e52:	e7f0      	b.n	30e36 <cancel_async_locked+0xc>

00030e54 <notify_queue_locked>:
	if (queue != NULL) {
   30e54:	b130      	cbz	r0, 30e64 <notify_queue_locked+0x10>
{
   30e56:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   30e58:	2200      	movs	r2, #0
   30e5a:	4611      	mov	r1, r2
   30e5c:	30c0      	adds	r0, #192	; 0xc0
   30e5e:	f000 faad 	bl	313bc <z_sched_wake>
}
   30e62:	bd08      	pop	{r3, pc}
	bool rv = false;
   30e64:	2000      	movs	r0, #0
}
   30e66:	4770      	bx	lr

00030e68 <submit_to_queue_locked>:
{
   30e68:	b570      	push	{r4, r5, r6, lr}
   30e6a:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   30e6c:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30e6e:	f013 0f02 	tst.w	r3, #2
   30e72:	d122      	bne.n	30eba <submit_to_queue_locked+0x52>
   30e74:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   30e76:	f013 0f04 	tst.w	r3, #4
   30e7a:	d123      	bne.n	30ec4 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   30e7c:	680b      	ldr	r3, [r1, #0]
   30e7e:	b1ab      	cbz	r3, 30eac <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   30e80:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   30e82:	f013 0f01 	tst.w	r3, #1
   30e86:	d014      	beq.n	30eb2 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   30e88:	68a3      	ldr	r3, [r4, #8]
   30e8a:	602b      	str	r3, [r5, #0]
			ret = 2;
   30e8c:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   30e8e:	4621      	mov	r1, r4
   30e90:	6828      	ldr	r0, [r5, #0]
   30e92:	f7f5 fa79 	bl	26388 <queue_submit_locked>
		if (rc < 0) {
   30e96:	2800      	cmp	r0, #0
   30e98:	db11      	blt.n	30ebe <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   30e9a:	68e3      	ldr	r3, [r4, #12]
   30e9c:	f043 0304 	orr.w	r3, r3, #4
   30ea0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   30ea2:	682b      	ldr	r3, [r5, #0]
   30ea4:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   30ea6:	b136      	cbz	r6, 30eb6 <submit_to_queue_locked+0x4e>
   30ea8:	4630      	mov	r0, r6
	return ret;
   30eaa:	e00a      	b.n	30ec2 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   30eac:	6883      	ldr	r3, [r0, #8]
   30eae:	600b      	str	r3, [r1, #0]
   30eb0:	e7e6      	b.n	30e80 <submit_to_queue_locked+0x18>
		ret = 1;
   30eb2:	2601      	movs	r6, #1
   30eb4:	e7eb      	b.n	30e8e <submit_to_queue_locked+0x26>
   30eb6:	4630      	mov	r0, r6
   30eb8:	e001      	b.n	30ebe <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   30eba:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   30ebe:	2300      	movs	r3, #0
   30ec0:	602b      	str	r3, [r5, #0]
}
   30ec2:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   30ec4:	2000      	movs	r0, #0
   30ec6:	e7fa      	b.n	30ebe <submit_to_queue_locked+0x56>

00030ec8 <work_timeout>:
{
   30ec8:	b510      	push	{r4, lr}
   30eca:	b082      	sub	sp, #8
   30ecc:	4603      	mov	r3, r0
	__asm__ volatile(
   30ece:	f04f 0240 	mov.w	r2, #64	; 0x40
   30ed2:	f3ef 8411 	mrs	r4, BASEPRI
   30ed6:	f382 8812 	msr	BASEPRI_MAX, r2
   30eda:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   30ede:	2200      	movs	r2, #0
   30ee0:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   30ee2:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   30ee6:	f022 0108 	bic.w	r1, r2, #8
   30eea:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   30eee:	f012 0f08 	tst.w	r2, #8
   30ef2:	d105      	bne.n	30f00 <work_timeout+0x38>
	__asm__ volatile(
   30ef4:	f384 8811 	msr	BASEPRI, r4
   30ef8:	f3bf 8f6f 	isb	sy
}
   30efc:	b002      	add	sp, #8
   30efe:	bd10      	pop	{r4, pc}
   30f00:	3810      	subs	r0, #16
		queue = dw->queue;
   30f02:	699b      	ldr	r3, [r3, #24]
   30f04:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   30f06:	a901      	add	r1, sp, #4
   30f08:	f7ff ffae 	bl	30e68 <submit_to_queue_locked>
   30f0c:	e7f2      	b.n	30ef4 <work_timeout+0x2c>

00030f0e <z_reschedule_unlocked>:
{
   30f0e:	b508      	push	{r3, lr}
	__asm__ volatile(
   30f10:	f04f 0340 	mov.w	r3, #64	; 0x40
   30f14:	f3ef 8011 	mrs	r0, BASEPRI
   30f18:	f383 8812 	msr	BASEPRI_MAX, r3
   30f1c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   30f20:	f000 f90b 	bl	3113a <z_reschedule_irqlock>
}
   30f24:	bd08      	pop	{r3, pc}

00030f26 <cancel_sync_locked>:
{
   30f26:	b510      	push	{r4, lr}
   30f28:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   30f2a:	68c4      	ldr	r4, [r0, #12]
   30f2c:	f014 0f02 	tst.w	r4, #2
   30f30:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   30f34:	d101      	bne.n	30f3a <cancel_sync_locked+0x14>
}
   30f36:	4620      	mov	r0, r4
   30f38:	bd10      	pop	{r4, pc}
   30f3a:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   30f3c:	4611      	mov	r1, r2
   30f3e:	f7f5 fa91 	bl	26464 <init_work_cancel>
   30f42:	e7f8      	b.n	30f36 <cancel_sync_locked+0x10>

00030f44 <unschedule_locked>:
{
   30f44:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   30f46:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   30f48:	f023 0208 	bic.w	r2, r3, #8
   30f4c:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30f4e:	f013 0f08 	tst.w	r3, #8
   30f52:	d101      	bne.n	30f58 <unschedule_locked+0x14>
	bool ret = false;
   30f54:	2000      	movs	r0, #0
}
   30f56:	bd08      	pop	{r3, pc}
		ret = z_abort_timeout(&dwork->timeout) == 0;
   30f58:	3010      	adds	r0, #16
   30f5a:	f000 fa91 	bl	31480 <z_abort_timeout>
   30f5e:	fab0 f080 	clz	r0, r0
   30f62:	0940      	lsrs	r0, r0, #5
   30f64:	e7f7      	b.n	30f56 <unschedule_locked+0x12>

00030f66 <cancel_delayable_async_locked>:
{
   30f66:	b510      	push	{r4, lr}
   30f68:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   30f6a:	f7ff ffeb 	bl	30f44 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   30f6e:	4620      	mov	r0, r4
   30f70:	f7ff ff5b 	bl	30e2a <cancel_async_locked>
}
   30f74:	bd10      	pop	{r4, pc}

00030f76 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   30f76:	2300      	movs	r3, #0
   30f78:	6003      	str	r3, [r0, #0]
   30f7a:	6043      	str	r3, [r0, #4]
   30f7c:	6083      	str	r3, [r0, #8]
   30f7e:	60c3      	str	r3, [r0, #12]
   30f80:	6041      	str	r1, [r0, #4]
}
   30f82:	4770      	bx	lr

00030f84 <z_work_submit_to_queue>:
{
   30f84:	b510      	push	{r4, lr}
   30f86:	b082      	sub	sp, #8
   30f88:	9001      	str	r0, [sp, #4]
   30f8a:	4608      	mov	r0, r1
   30f8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   30f90:	f3ef 8411 	mrs	r4, BASEPRI
   30f94:	f383 8812 	msr	BASEPRI_MAX, r3
   30f98:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   30f9c:	a901      	add	r1, sp, #4
   30f9e:	f7ff ff63 	bl	30e68 <submit_to_queue_locked>
	__asm__ volatile(
   30fa2:	f384 8811 	msr	BASEPRI, r4
   30fa6:	f3bf 8f6f 	isb	sy
}
   30faa:	b002      	add	sp, #8
   30fac:	bd10      	pop	{r4, pc}

00030fae <k_work_submit_to_queue>:
{
   30fae:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   30fb0:	f7ff ffe8 	bl	30f84 <z_work_submit_to_queue>
	if (ret > 0) {
   30fb4:	1e04      	subs	r4, r0, #0
   30fb6:	dc01      	bgt.n	30fbc <k_work_submit_to_queue+0xe>
}
   30fb8:	4620      	mov	r0, r4
   30fba:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   30fbc:	f7ff ffa7 	bl	30f0e <z_reschedule_unlocked>
	return ret;
   30fc0:	e7fa      	b.n	30fb8 <k_work_submit_to_queue+0xa>

00030fc2 <k_work_queue_init>:
{
   30fc2:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   30fc4:	22d8      	movs	r2, #216	; 0xd8
   30fc6:	2100      	movs	r1, #0
   30fc8:	f7fb fc3f 	bl	2c84a <memset>
}
   30fcc:	bd08      	pop	{r3, pc}

00030fce <k_work_init_delayable>:
{
   30fce:	b538      	push	{r3, r4, r5, lr}
   30fd0:	4604      	mov	r4, r0
   30fd2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   30fd4:	2230      	movs	r2, #48	; 0x30
   30fd6:	2100      	movs	r1, #0
   30fd8:	f7fb fc37 	bl	2c84a <memset>
   30fdc:	6065      	str	r5, [r4, #4]
   30fde:	f44f 7380 	mov.w	r3, #256	; 0x100
   30fe2:	60e3      	str	r3, [r4, #12]
}
   30fe4:	bd38      	pop	{r3, r4, r5, pc}

00030fe6 <k_work_delayable_busy_get>:
	__asm__ volatile(
   30fe6:	f04f 0240 	mov.w	r2, #64	; 0x40
   30fea:	f3ef 8311 	mrs	r3, BASEPRI
   30fee:	f382 8812 	msr	BASEPRI_MAX, r2
   30ff2:	f3bf 8f6f 	isb	sy
	return *flagp;
   30ff6:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   30ff8:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   30ffc:	f383 8811 	msr	BASEPRI, r3
   31000:	f3bf 8f6f 	isb	sy
}
   31004:	4770      	bx	lr

00031006 <k_work_schedule_for_queue>:
{
   31006:	b510      	push	{r4, lr}
   31008:	b082      	sub	sp, #8
   3100a:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   3100c:	f04f 0040 	mov.w	r0, #64	; 0x40
   31010:	f3ef 8411 	mrs	r4, BASEPRI
   31014:	f380 8812 	msr	BASEPRI_MAX, r0
   31018:	f3bf 8f6f 	isb	sy
	return *flagp;
   3101c:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   3101e:	f010 0f0e 	tst.w	r0, #14
   31022:	d006      	beq.n	31032 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   31024:	2000      	movs	r0, #0
	__asm__ volatile(
   31026:	f384 8811 	msr	BASEPRI, r4
   3102a:	f3bf 8f6f 	isb	sy
}
   3102e:	b002      	add	sp, #8
   31030:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   31032:	a801      	add	r0, sp, #4
   31034:	f7f5 faa6 	bl	26584 <schedule_for_queue_locked>
   31038:	e7f5      	b.n	31026 <k_work_schedule_for_queue+0x20>

0003103a <k_work_reschedule_for_queue>:
{
   3103a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3103c:	b083      	sub	sp, #12
   3103e:	9001      	str	r0, [sp, #4]
   31040:	460c      	mov	r4, r1
   31042:	4616      	mov	r6, r2
   31044:	461d      	mov	r5, r3
	__asm__ volatile(
   31046:	f04f 0340 	mov.w	r3, #64	; 0x40
   3104a:	f3ef 8711 	mrs	r7, BASEPRI
   3104e:	f383 8812 	msr	BASEPRI_MAX, r3
   31052:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   31056:	4608      	mov	r0, r1
   31058:	f7ff ff74 	bl	30f44 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   3105c:	4632      	mov	r2, r6
   3105e:	462b      	mov	r3, r5
   31060:	4621      	mov	r1, r4
   31062:	a801      	add	r0, sp, #4
   31064:	f7f5 fa8e 	bl	26584 <schedule_for_queue_locked>
	__asm__ volatile(
   31068:	f387 8811 	msr	BASEPRI, r7
   3106c:	f3bf 8f6f 	isb	sy
}
   31070:	b003      	add	sp, #12
   31072:	bdf0      	pop	{r4, r5, r6, r7, pc}

00031074 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   31074:	b510      	push	{r4, lr}
	__asm__ volatile(
   31076:	f04f 0340 	mov.w	r3, #64	; 0x40
   3107a:	f3ef 8411 	mrs	r4, BASEPRI
   3107e:	f383 8812 	msr	BASEPRI_MAX, r3
   31082:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   31086:	f7ff ff6e 	bl	30f66 <cancel_delayable_async_locked>
	__asm__ volatile(
   3108a:	f384 8811 	msr	BASEPRI, r4
   3108e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   31092:	bd10      	pop	{r4, pc}

00031094 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   31094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31096:	460d      	mov	r5, r1
	__asm__ volatile(
   31098:	f04f 0340 	mov.w	r3, #64	; 0x40
   3109c:	f3ef 8611 	mrs	r6, BASEPRI
   310a0:	f383 8812 	msr	BASEPRI_MAX, r3
   310a4:	f3bf 8f6f 	isb	sy
	return *flagp;
   310a8:	68c3      	ldr	r3, [r0, #12]
   310aa:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   310ae:	2b00      	cmp	r3, #0
   310b0:	bf14      	ite	ne
   310b2:	2701      	movne	r7, #1
   310b4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   310b6:	d107      	bne.n	310c8 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   310b8:	2000      	movs	r0, #0
	__asm__ volatile(
   310ba:	f386 8811 	msr	BASEPRI, r6
   310be:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   310c2:	b948      	cbnz	r0, 310d8 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   310c4:	4638      	mov	r0, r7
   310c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   310c8:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   310ca:	f7ff ff4c 	bl	30f66 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   310ce:	4629      	mov	r1, r5
   310d0:	4620      	mov	r0, r4
   310d2:	f7ff ff28 	bl	30f26 <cancel_sync_locked>
   310d6:	e7f0      	b.n	310ba <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   310d8:	f105 0008 	add.w	r0, r5, #8
	return z_impl_k_sem_take(sem, timeout);
   310dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   310e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   310e4:	f7f5 f8ea 	bl	262bc <z_impl_k_sem_take>
   310e8:	e7ec      	b.n	310c4 <k_work_cancel_delayable_sync+0x30>

000310ea <thread_active_elsewhere>:
}
   310ea:	2000      	movs	r0, #0
   310ec:	4770      	bx	lr

000310ee <pended_on_thread>:
}
   310ee:	6880      	ldr	r0, [r0, #8]
   310f0:	4770      	bx	lr

000310f2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   310f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   310f6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   310fa:	4283      	cmp	r3, r0
   310fc:	d001      	beq.n	31102 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   310fe:	1ac0      	subs	r0, r0, r3
   31100:	4770      	bx	lr
	return 0;
   31102:	2000      	movs	r0, #0
}
   31104:	4770      	bx	lr

00031106 <z_unpend_thread_no_timeout>:
{
   31106:	b538      	push	{r3, r4, r5, lr}
   31108:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   3110a:	2300      	movs	r3, #0
	__asm__ volatile(
   3110c:	f04f 0240 	mov.w	r2, #64	; 0x40
   31110:	f3ef 8511 	mrs	r5, BASEPRI
   31114:	f382 8812 	msr	BASEPRI_MAX, r2
   31118:	f3bf 8f6f 	isb	sy
   3111c:	e004      	b.n	31128 <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
   3111e:	f385 8811 	msr	BASEPRI, r5
   31122:	f3bf 8f6f 	isb	sy
   31126:	2301      	movs	r3, #1
   31128:	b933      	cbnz	r3, 31138 <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
   3112a:	68a3      	ldr	r3, [r4, #8]
   3112c:	2b00      	cmp	r3, #0
   3112e:	d0f6      	beq.n	3111e <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
   31130:	4620      	mov	r0, r4
   31132:	f000 f824 	bl	3117e <unpend_thread_no_timeout>
   31136:	e7f2      	b.n	3111e <z_unpend_thread_no_timeout+0x18>
}
   31138:	bd38      	pop	{r3, r4, r5, pc}

0003113a <z_reschedule_irqlock>:
{
   3113a:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3113c:	4603      	mov	r3, r0
   3113e:	b928      	cbnz	r0, 3114c <z_reschedule_irqlock+0x12>
   31140:	f3ef 8205 	mrs	r2, IPSR
   31144:	b912      	cbnz	r2, 3114c <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   31146:	f7e6 fb91 	bl	1786c <arch_swap>
	return ret;
   3114a:	e003      	b.n	31154 <z_reschedule_irqlock+0x1a>
   3114c:	f383 8811 	msr	BASEPRI, r3
   31150:	f3bf 8f6f 	isb	sy
}
   31154:	bd08      	pop	{r3, pc}

00031156 <z_reschedule_unlocked>:
{
   31156:	b508      	push	{r3, lr}
	__asm__ volatile(
   31158:	f04f 0340 	mov.w	r3, #64	; 0x40
   3115c:	f3ef 8011 	mrs	r0, BASEPRI
   31160:	f383 8812 	msr	BASEPRI_MAX, r3
   31164:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31168:	f7ff ffe7 	bl	3113a <z_reschedule_irqlock>
}
   3116c:	bd08      	pop	{r3, pc}

0003116e <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   3116e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   31170:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   31172:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   31174:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31176:	2300      	movs	r3, #0
   31178:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   3117a:	604b      	str	r3, [r1, #4]
}
   3117c:	4770      	bx	lr

0003117e <unpend_thread_no_timeout>:
{
   3117e:	b510      	push	{r4, lr}
   31180:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   31182:	f7ff ffb4 	bl	310ee <pended_on_thread>
   31186:	4621      	mov	r1, r4
   31188:	f7ff fff1 	bl	3116e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3118c:	7b63      	ldrb	r3, [r4, #13]
   3118e:	f023 0302 	bic.w	r3, r3, #2
   31192:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   31194:	2300      	movs	r3, #0
   31196:	60a3      	str	r3, [r4, #8]
}
   31198:	bd10      	pop	{r4, pc}

0003119a <z_unpend_thread>:
{
   3119a:	b538      	push	{r3, r4, r5, lr}
   3119c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   3119e:	2300      	movs	r3, #0
   311a0:	f04f 0240 	mov.w	r2, #64	; 0x40
   311a4:	f3ef 8511 	mrs	r5, BASEPRI
   311a8:	f382 8812 	msr	BASEPRI_MAX, r2
   311ac:	f3bf 8f6f 	isb	sy
   311b0:	e004      	b.n	311bc <z_unpend_thread+0x22>
	__asm__ volatile(
   311b2:	f385 8811 	msr	BASEPRI, r5
   311b6:	f3bf 8f6f 	isb	sy
   311ba:	2301      	movs	r3, #1
   311bc:	b933      	cbnz	r3, 311cc <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   311be:	68a3      	ldr	r3, [r4, #8]
   311c0:	2b00      	cmp	r3, #0
   311c2:	d0f6      	beq.n	311b2 <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   311c4:	4620      	mov	r0, r4
   311c6:	f7ff ffda 	bl	3117e <unpend_thread_no_timeout>
   311ca:	e7f2      	b.n	311b2 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   311cc:	f104 0018 	add.w	r0, r4, #24
   311d0:	f000 f956 	bl	31480 <z_abort_timeout>
}
   311d4:	bd38      	pop	{r3, r4, r5, pc}

000311d6 <z_priq_dumb_best>:
{
   311d6:	4603      	mov	r3, r0
	return list->head == list;
   311d8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   311da:	4283      	cmp	r3, r0
   311dc:	d000      	beq.n	311e0 <z_priq_dumb_best+0xa>
}
   311de:	4770      	bx	lr
	struct k_thread *thread = NULL;
   311e0:	2000      	movs	r0, #0
	return thread;
   311e2:	e7fc      	b.n	311de <z_priq_dumb_best+0x8>

000311e4 <z_ready_thread>:
{
   311e4:	b538      	push	{r3, r4, r5, lr}
   311e6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   311e8:	2300      	movs	r3, #0
	__asm__ volatile(
   311ea:	f04f 0240 	mov.w	r2, #64	; 0x40
   311ee:	f3ef 8511 	mrs	r5, BASEPRI
   311f2:	f382 8812 	msr	BASEPRI_MAX, r2
   311f6:	f3bf 8f6f 	isb	sy
   311fa:	e004      	b.n	31206 <z_ready_thread+0x22>
	__asm__ volatile(
   311fc:	f385 8811 	msr	BASEPRI, r5
   31200:	f3bf 8f6f 	isb	sy
   31204:	2301      	movs	r3, #1
   31206:	b943      	cbnz	r3, 3121a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   31208:	4620      	mov	r0, r4
   3120a:	f7ff ff6e 	bl	310ea <thread_active_elsewhere>
   3120e:	2800      	cmp	r0, #0
   31210:	d1f4      	bne.n	311fc <z_ready_thread+0x18>
			ready_thread(thread);
   31212:	4620      	mov	r0, r4
   31214:	f7f5 fb6c 	bl	268f0 <ready_thread>
   31218:	e7f0      	b.n	311fc <z_ready_thread+0x18>
}
   3121a:	bd38      	pop	{r3, r4, r5, pc}

0003121c <z_sched_wake_thread>:
{
   3121c:	b570      	push	{r4, r5, r6, lr}
   3121e:	4604      	mov	r4, r0
   31220:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   31222:	2300      	movs	r3, #0
	__asm__ volatile(
   31224:	f04f 0240 	mov.w	r2, #64	; 0x40
   31228:	f3ef 8511 	mrs	r5, BASEPRI
   3122c:	f382 8812 	msr	BASEPRI_MAX, r2
   31230:	f3bf 8f6f 	isb	sy
   31234:	e007      	b.n	31246 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   31236:	4620      	mov	r0, r4
   31238:	f7f5 fb5a 	bl	268f0 <ready_thread>
	__asm__ volatile(
   3123c:	f385 8811 	msr	BASEPRI, r5
   31240:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   31244:	2301      	movs	r3, #1
   31246:	b993      	cbnz	r3, 3126e <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   31248:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   3124a:	f013 0f28 	tst.w	r3, #40	; 0x28
   3124e:	d1f5      	bne.n	3123c <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   31250:	68a3      	ldr	r3, [r4, #8]
   31252:	b113      	cbz	r3, 3125a <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   31254:	4620      	mov	r0, r4
   31256:	f7ff ff92 	bl	3117e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3125a:	7b63      	ldrb	r3, [r4, #13]
   3125c:	f023 0204 	bic.w	r2, r3, #4
   31260:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   31262:	2e00      	cmp	r6, #0
   31264:	d0e7      	beq.n	31236 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31266:	f023 0314 	bic.w	r3, r3, #20
   3126a:	7363      	strb	r3, [r4, #13]
}
   3126c:	e7e3      	b.n	31236 <z_sched_wake_thread+0x1a>
}
   3126e:	bd70      	pop	{r4, r5, r6, pc}

00031270 <z_thread_timeout>:
{
   31270:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   31272:	2101      	movs	r1, #1
   31274:	3818      	subs	r0, #24
   31276:	f7ff ffd1 	bl	3121c <z_sched_wake_thread>
}
   3127a:	bd08      	pop	{r3, pc}

0003127c <unpend_all>:
{
   3127c:	b538      	push	{r3, r4, r5, lr}
   3127e:	4605      	mov	r5, r0
	return list->head == list;
   31280:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31282:	42a5      	cmp	r5, r4
   31284:	d00e      	beq.n	312a4 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   31286:	b16c      	cbz	r4, 312a4 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   31288:	4620      	mov	r0, r4
   3128a:	f7ff ff78 	bl	3117e <unpend_thread_no_timeout>
   3128e:	f104 0018 	add.w	r0, r4, #24
   31292:	f000 f8f5 	bl	31480 <z_abort_timeout>
   31296:	2300      	movs	r3, #0
   31298:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   3129c:	4620      	mov	r0, r4
   3129e:	f7f5 fb27 	bl	268f0 <ready_thread>
   312a2:	e7ed      	b.n	31280 <unpend_all+0x4>
}
   312a4:	bd38      	pop	{r3, r4, r5, pc}

000312a6 <add_to_waitq_locked>:
{
   312a6:	b570      	push	{r4, r5, r6, lr}
   312a8:	4605      	mov	r5, r0
   312aa:	460e      	mov	r6, r1
	unready_thread(thread);
   312ac:	f7f5 fb7a 	bl	269a4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   312b0:	7b6b      	ldrb	r3, [r5, #13]
   312b2:	f043 0302 	orr.w	r3, r3, #2
   312b6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   312b8:	b1fe      	cbz	r6, 312fa <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   312ba:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   312bc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   312be:	42a6      	cmp	r6, r4
   312c0:	d108      	bne.n	312d4 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   312c2:	2400      	movs	r4, #0
   312c4:	e006      	b.n	312d4 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   312c6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   312c8:	606b      	str	r3, [r5, #4]
	node->next = successor;
   312ca:	602c      	str	r4, [r5, #0]
	prev->next = node;
   312cc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   312ce:	6065      	str	r5, [r4, #4]
}
   312d0:	e013      	b.n	312fa <add_to_waitq_locked+0x54>
   312d2:	2400      	movs	r4, #0
   312d4:	b164      	cbz	r4, 312f0 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   312d6:	4621      	mov	r1, r4
   312d8:	4628      	mov	r0, r5
   312da:	f7ff ff0a 	bl	310f2 <z_sched_prio_cmp>
   312de:	2800      	cmp	r0, #0
   312e0:	dcf1      	bgt.n	312c6 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   312e2:	2c00      	cmp	r4, #0
   312e4:	d0f6      	beq.n	312d4 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   312e6:	6873      	ldr	r3, [r6, #4]
   312e8:	429c      	cmp	r4, r3
   312ea:	d0f2      	beq.n	312d2 <add_to_waitq_locked+0x2c>
   312ec:	6824      	ldr	r4, [r4, #0]
   312ee:	e7f1      	b.n	312d4 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   312f0:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   312f2:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   312f4:	606b      	str	r3, [r5, #4]
	tail->next = node;
   312f6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   312f8:	6075      	str	r5, [r6, #4]
}
   312fa:	bd70      	pop	{r4, r5, r6, pc}

000312fc <pend_locked>:
{
   312fc:	b570      	push	{r4, r5, r6, lr}
   312fe:	4604      	mov	r4, r0
   31300:	4616      	mov	r6, r2
   31302:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   31304:	f7ff ffcf 	bl	312a6 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   31308:	4632      	mov	r2, r6
   3130a:	462b      	mov	r3, r5
   3130c:	4620      	mov	r0, r4
   3130e:	f7f5 f9df 	bl	266d0 <add_thread_timeout>
}
   31312:	bd70      	pop	{r4, r5, r6, pc}

00031314 <z_unpend1_no_timeout>:
{
   31314:	b570      	push	{r4, r5, r6, lr}
   31316:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   31318:	2300      	movs	r3, #0
	__asm__ volatile(
   3131a:	f04f 0240 	mov.w	r2, #64	; 0x40
   3131e:	f3ef 8511 	mrs	r5, BASEPRI
   31322:	f382 8812 	msr	BASEPRI_MAX, r2
   31326:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   3132a:	461c      	mov	r4, r3
   3132c:	e004      	b.n	31338 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   3132e:	f385 8811 	msr	BASEPRI, r5
   31332:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   31336:	2301      	movs	r3, #1
   31338:	b943      	cbnz	r3, 3134c <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   3133a:	4630      	mov	r0, r6
   3133c:	f7ff ff4b 	bl	311d6 <z_priq_dumb_best>
		if (thread != NULL) {
   31340:	4604      	mov	r4, r0
   31342:	2800      	cmp	r0, #0
   31344:	d0f3      	beq.n	3132e <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   31346:	f7ff ff1a 	bl	3117e <unpend_thread_no_timeout>
   3134a:	e7f0      	b.n	3132e <z_unpend1_no_timeout+0x1a>
}
   3134c:	4620      	mov	r0, r4
   3134e:	bd70      	pop	{r4, r5, r6, pc}

00031350 <z_unpend_first_thread>:
{
   31350:	b570      	push	{r4, r5, r6, lr}
   31352:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   31354:	2300      	movs	r3, #0
	__asm__ volatile(
   31356:	f04f 0240 	mov.w	r2, #64	; 0x40
   3135a:	f3ef 8511 	mrs	r5, BASEPRI
   3135e:	f382 8812 	msr	BASEPRI_MAX, r2
   31362:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   31366:	461c      	mov	r4, r3
   31368:	e004      	b.n	31374 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   3136a:	f385 8811 	msr	BASEPRI, r5
   3136e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   31372:	2301      	movs	r3, #1
   31374:	b963      	cbnz	r3, 31390 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   31376:	4630      	mov	r0, r6
   31378:	f7ff ff2d 	bl	311d6 <z_priq_dumb_best>
		if (thread != NULL) {
   3137c:	4604      	mov	r4, r0
   3137e:	2800      	cmp	r0, #0
   31380:	d0f3      	beq.n	3136a <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   31382:	f7ff fefc 	bl	3117e <unpend_thread_no_timeout>
   31386:	f104 0018 	add.w	r0, r4, #24
   3138a:	f000 f879 	bl	31480 <z_abort_timeout>
   3138e:	e7ec      	b.n	3136a <z_unpend_first_thread+0x1a>
}
   31390:	4620      	mov	r0, r4
   31392:	bd70      	pop	{r4, r5, r6, pc}

00031394 <z_unpend_all>:
{
   31394:	b538      	push	{r3, r4, r5, lr}
   31396:	4605      	mov	r5, r0
	int need_sched = 0;
   31398:	2000      	movs	r0, #0
	return list->head == list;
   3139a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3139c:	42a5      	cmp	r5, r4
   3139e:	d008      	beq.n	313b2 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   313a0:	b13c      	cbz	r4, 313b2 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   313a2:	4620      	mov	r0, r4
   313a4:	f7ff fef9 	bl	3119a <z_unpend_thread>
		z_ready_thread(thread);
   313a8:	4620      	mov	r0, r4
   313aa:	f7ff ff1b 	bl	311e4 <z_ready_thread>
		need_sched = 1;
   313ae:	2001      	movs	r0, #1
   313b0:	e7f3      	b.n	3139a <z_unpend_all+0x6>
}
   313b2:	bd38      	pop	{r3, r4, r5, pc}

000313b4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   313b4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   313b6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   313b8:	6083      	str	r3, [r0, #8]
}
   313ba:	4770      	bx	lr

000313bc <z_sched_wake>:
{
   313bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   313c0:	4606      	mov	r6, r0
   313c2:	4688      	mov	r8, r1
   313c4:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   313c6:	2300      	movs	r3, #0
	__asm__ volatile(
   313c8:	f04f 0240 	mov.w	r2, #64	; 0x40
   313cc:	f3ef 8511 	mrs	r5, BASEPRI
   313d0:	f382 8812 	msr	BASEPRI_MAX, r2
   313d4:	f3bf 8f6f 	isb	sy
	bool ret = false;
   313d8:	4699      	mov	r9, r3
   313da:	e004      	b.n	313e6 <z_sched_wake+0x2a>
	__asm__ volatile(
   313dc:	f385 8811 	msr	BASEPRI, r5
   313e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   313e4:	2301      	movs	r3, #1
   313e6:	b9a3      	cbnz	r3, 31412 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   313e8:	4630      	mov	r0, r6
   313ea:	f7ff fef4 	bl	311d6 <z_priq_dumb_best>
		if (thread != NULL) {
   313ee:	4604      	mov	r4, r0
   313f0:	2800      	cmp	r0, #0
   313f2:	d0f3      	beq.n	313dc <z_sched_wake+0x20>
   313f4:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   313f8:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   313fa:	f7ff fec0 	bl	3117e <unpend_thread_no_timeout>
   313fe:	f104 0018 	add.w	r0, r4, #24
   31402:	f000 f83d 	bl	31480 <z_abort_timeout>
			ready_thread(thread);
   31406:	4620      	mov	r0, r4
   31408:	f7f5 fa72 	bl	268f0 <ready_thread>
			ret = true;
   3140c:	f04f 0901 	mov.w	r9, #1
   31410:	e7e4      	b.n	313dc <z_sched_wake+0x20>
}
   31412:	4648      	mov	r0, r9
   31414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00031418 <remove_timeout>:
{
   31418:	b510      	push	{r4, lr}
   3141a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   3141c:	f7f5 fd54 	bl	26ec8 <next>
   31420:	b148      	cbz	r0, 31436 <remove_timeout+0x1e>
   31422:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   31424:	6903      	ldr	r3, [r0, #16]
   31426:	6941      	ldr	r1, [r0, #20]
   31428:	6920      	ldr	r0, [r4, #16]
   3142a:	181b      	adds	r3, r3, r0
   3142c:	6960      	ldr	r0, [r4, #20]
   3142e:	eb41 0100 	adc.w	r1, r1, r0
   31432:	6113      	str	r3, [r2, #16]
   31434:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   31436:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   31438:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   3143a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3143c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3143e:	2300      	movs	r3, #0
   31440:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   31442:	6063      	str	r3, [r4, #4]
}
   31444:	bd10      	pop	{r4, pc}

00031446 <next_timeout>:
{
   31446:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   31448:	f7f5 fd34 	bl	26eb4 <first>
   3144c:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   3144e:	f7f5 fd47 	bl	26ee0 <elapsed>
	if ((to == NULL) ||
   31452:	b17c      	cbz	r4, 31474 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   31454:	6923      	ldr	r3, [r4, #16]
   31456:	6962      	ldr	r2, [r4, #20]
   31458:	1a1b      	subs	r3, r3, r0
   3145a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   3145e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   31462:	f172 0100 	sbcs.w	r1, r2, #0
   31466:	da08      	bge.n	3147a <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   31468:	2a00      	cmp	r2, #0
   3146a:	db01      	blt.n	31470 <next_timeout+0x2a>
   3146c:	4618      	mov	r0, r3
}
   3146e:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   31470:	2300      	movs	r3, #0
   31472:	e7fb      	b.n	3146c <next_timeout+0x26>
		ret = MAX_WAIT;
   31474:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   31478:	e7f9      	b.n	3146e <next_timeout+0x28>
   3147a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   3147e:	e7f6      	b.n	3146e <next_timeout+0x28>

00031480 <z_abort_timeout>:
{
   31480:	b570      	push	{r4, r5, r6, lr}
   31482:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   31484:	2300      	movs	r3, #0
	__asm__ volatile(
   31486:	f04f 0240 	mov.w	r2, #64	; 0x40
   3148a:	f3ef 8611 	mrs	r6, BASEPRI
   3148e:	f382 8812 	msr	BASEPRI_MAX, r2
   31492:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   31496:	f06f 0015 	mvn.w	r0, #21
   3149a:	e004      	b.n	314a6 <z_abort_timeout+0x26>
	__asm__ volatile(
   3149c:	f386 8811 	msr	BASEPRI, r6
   314a0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   314a4:	2301      	movs	r3, #1
   314a6:	461d      	mov	r5, r3
   314a8:	b93b      	cbnz	r3, 314ba <z_abort_timeout+0x3a>
	return node->next != NULL;
   314aa:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   314ac:	2b00      	cmp	r3, #0
   314ae:	d0f5      	beq.n	3149c <z_abort_timeout+0x1c>
			remove_timeout(to);
   314b0:	4620      	mov	r0, r4
   314b2:	f7ff ffb1 	bl	31418 <remove_timeout>
			ret = 0;
   314b6:	4628      	mov	r0, r5
   314b8:	e7f0      	b.n	3149c <z_abort_timeout+0x1c>
}
   314ba:	bd70      	pop	{r4, r5, r6, pc}

000314bc <z_get_next_timeout_expiry>:
{
   314bc:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   314be:	2300      	movs	r3, #0
	__asm__ volatile(
   314c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   314c4:	f3ef 8411 	mrs	r4, BASEPRI
   314c8:	f382 8812 	msr	BASEPRI_MAX, r2
   314cc:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   314d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   314d4:	e006      	b.n	314e4 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   314d6:	f7ff ffb6 	bl	31446 <next_timeout>
	__asm__ volatile(
   314da:	f384 8811 	msr	BASEPRI, r4
   314de:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   314e2:	2301      	movs	r3, #1
   314e4:	2b00      	cmp	r3, #0
   314e6:	d0f6      	beq.n	314d6 <z_get_next_timeout_expiry+0x1a>
}
   314e8:	bd10      	pop	{r4, pc}

000314ea <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   314ea:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   314ec:	f7f5 fde8 	bl	270c0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   314f0:	bd08      	pop	{r3, pc}

000314f2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   314f2:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   314f4:	f7f5 fde4 	bl	270c0 <sys_clock_tick_get>
}
   314f8:	bd08      	pop	{r3, pc}

000314fa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   314fa:	b900      	cbnz	r0, 314fe <z_impl_k_busy_wait+0x4>
   314fc:	4770      	bx	lr
{
   314fe:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   31500:	f7e7 fb74 	bl	18bec <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   31504:	bd08      	pop	{r3, pc}

00031506 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   31506:	b538      	push	{r3, r4, r5, lr}
   31508:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3150a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   3150e:	bf08      	it	eq
   31510:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   31514:	d020      	beq.n	31558 <sys_clock_timeout_end_calc+0x52>
   31516:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31518:	ea51 0300 	orrs.w	r3, r1, r0
   3151c:	d009      	beq.n	31532 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3151e:	f06f 0301 	mvn.w	r3, #1
   31522:	1a18      	subs	r0, r3, r0
   31524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31528:	eb63 0101 	sbc.w	r1, r3, r1
   3152c:	2900      	cmp	r1, #0
   3152e:	db03      	blt.n	31538 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   31530:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   31532:	f7f5 fdc5 	bl	270c0 <sys_clock_tick_get>
   31536:	e7fb      	b.n	31530 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   31538:	f7f5 fdc2 	bl	270c0 <sys_clock_tick_get>
   3153c:	4603      	mov	r3, r0
   3153e:	462a      	mov	r2, r5
   31540:	46a4      	mov	ip, r4
   31542:	2d01      	cmp	r5, #1
   31544:	f174 0400 	sbcs.w	r4, r4, #0
   31548:	da02      	bge.n	31550 <sys_clock_timeout_end_calc+0x4a>
   3154a:	2201      	movs	r2, #1
   3154c:	f04f 0c00 	mov.w	ip, #0
   31550:	1898      	adds	r0, r3, r2
   31552:	eb41 010c 	adc.w	r1, r1, ip
   31556:	e7eb      	b.n	31530 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   31558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3155c:	4601      	mov	r1, r0
   3155e:	e7e7      	b.n	31530 <sys_clock_timeout_end_calc+0x2a>

00031560 <z_reschedule_unlocked>:
{
   31560:	b508      	push	{r3, lr}
	__asm__ volatile(
   31562:	f04f 0340 	mov.w	r3, #64	; 0x40
   31566:	f3ef 8011 	mrs	r0, BASEPRI
   3156a:	f383 8812 	msr	BASEPRI_MAX, r3
   3156e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31572:	f7ff fde2 	bl	3113a <z_reschedule_irqlock>
}
   31576:	bd08      	pop	{r3, pc}

00031578 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   31578:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   3157a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   3157c:	2300      	movs	r3, #0
   3157e:	6303      	str	r3, [r0, #48]	; 0x30
   31580:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   31584:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   31586:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   31588:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3158a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   3158c:	6343      	str	r3, [r0, #52]	; 0x34
}
   3158e:	4770      	bx	lr

00031590 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   31590:	b510      	push	{r4, lr}
   31592:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   31594:	f7ff ff74 	bl	31480 <z_abort_timeout>

	if (inactive) {
   31598:	b960      	cbnz	r0, 315b4 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   3159a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3159c:	b10b      	cbz	r3, 315a2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3159e:	4620      	mov	r0, r4
   315a0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   315a2:	f104 0018 	add.w	r0, r4, #24
   315a6:	f7ff feb5 	bl	31314 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   315aa:	b118      	cbz	r0, 315b4 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   315ac:	f7ff fe1a 	bl	311e4 <z_ready_thread>
			z_reschedule_unlocked();
   315b0:	f7ff ffd6 	bl	31560 <z_reschedule_unlocked>
		}
	}
}
   315b4:	bd10      	pop	{r4, pc}

000315b6 <is_condition_met>:
	switch (event->type) {
   315b6:	7b43      	ldrb	r3, [r0, #13]
   315b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   315bc:	3b01      	subs	r3, #1
   315be:	2b07      	cmp	r3, #7
   315c0:	d826      	bhi.n	31610 <is_condition_met+0x5a>
   315c2:	e8df f003 	tbb	[pc, r3]
   315c6:	0414      	.short	0x0414
   315c8:	25250d25 	.word	0x25250d25
   315cc:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   315ce:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   315d0:	689b      	ldr	r3, [r3, #8]
   315d2:	b90b      	cbnz	r3, 315d8 <is_condition_met+0x22>
	return false;
   315d4:	2000      	movs	r0, #0
   315d6:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   315d8:	2302      	movs	r3, #2
   315da:	600b      	str	r3, [r1, #0]
			return true;
   315dc:	2001      	movs	r0, #1
   315de:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   315e0:	6903      	ldr	r3, [r0, #16]
	return list->head;
   315e2:	681b      	ldr	r3, [r3, #0]
   315e4:	b1b3      	cbz	r3, 31614 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   315e6:	2304      	movs	r3, #4
   315e8:	600b      	str	r3, [r1, #0]
			return true;
   315ea:	2001      	movs	r0, #1
   315ec:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   315ee:	6903      	ldr	r3, [r0, #16]
   315f0:	689b      	ldr	r3, [r3, #8]
   315f2:	b90b      	cbnz	r3, 315f8 <is_condition_met+0x42>
	return false;
   315f4:	2000      	movs	r0, #0
   315f6:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   315f8:	2001      	movs	r0, #1
   315fa:	6008      	str	r0, [r1, #0]
			return true;
   315fc:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   315fe:	6903      	ldr	r3, [r0, #16]
   31600:	6a1b      	ldr	r3, [r3, #32]
   31602:	b90b      	cbnz	r3, 31608 <is_condition_met+0x52>
	return false;
   31604:	2000      	movs	r0, #0
}
   31606:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   31608:	2310      	movs	r3, #16
   3160a:	600b      	str	r3, [r1, #0]
			return true;
   3160c:	2001      	movs	r0, #1
   3160e:	4770      	bx	lr
	switch (event->type) {
   31610:	2000      	movs	r0, #0
   31612:	4770      	bx	lr
	return false;
   31614:	2000      	movs	r0, #0
   31616:	4770      	bx	lr

00031618 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31618:	b108      	cbz	r0, 3161e <poller_thread+0x6>
   3161a:	3860      	subs	r0, #96	; 0x60
   3161c:	4770      	bx	lr
}
   3161e:	4770      	bx	lr

00031620 <clear_event_registration>:
	event->poller = NULL;
   31620:	2300      	movs	r3, #0
   31622:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   31624:	7b43      	ldrb	r3, [r0, #13]
   31626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3162a:	2b08      	cmp	r3, #8
   3162c:	d80e      	bhi.n	3164c <clear_event_registration+0x2c>
   3162e:	f44f 728b 	mov.w	r2, #278	; 0x116
   31632:	fa22 f303 	lsr.w	r3, r2, r3
   31636:	f013 0f01 	tst.w	r3, #1
   3163a:	d007      	beq.n	3164c <clear_event_registration+0x2c>
	return node->next != NULL;
   3163c:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   3163e:	b12b      	cbz	r3, 3164c <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   31640:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   31642:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   31644:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31646:	2300      	movs	r3, #0
   31648:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3164a:	6043      	str	r3, [r0, #4]
}
   3164c:	4770      	bx	lr

0003164e <clear_event_registrations>:
{
   3164e:	b570      	push	{r4, r5, r6, lr}
   31650:	4606      	mov	r6, r0
   31652:	4614      	mov	r4, r2
	while (num_events--) {
   31654:	e012      	b.n	3167c <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   31656:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   3165a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   3165e:	f7ff ffdf 	bl	31620 <clear_event_registration>
	__asm__ volatile(
   31662:	f384 8811 	msr	BASEPRI, r4
   31666:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3166a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3166e:	f3ef 8411 	mrs	r4, BASEPRI
   31672:	f383 8812 	msr	BASEPRI_MAX, r3
   31676:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   3167a:	4629      	mov	r1, r5
   3167c:	1e4d      	subs	r5, r1, #1
   3167e:	2900      	cmp	r1, #0
   31680:	d1e9      	bne.n	31656 <clear_event_registrations+0x8>
}
   31682:	bd70      	pop	{r4, r5, r6, pc}

00031684 <add_event>:
{
   31684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31688:	4605      	mov	r5, r0
   3168a:	460e      	mov	r6, r1
	return list->head == list;
   3168c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3168e:	4298      	cmp	r0, r3
   31690:	d015      	beq.n	316be <add_event+0x3a>
   31692:	4614      	mov	r4, r2
   31694:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   31696:	b193      	cbz	r3, 316be <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31698:	6898      	ldr	r0, [r3, #8]
   3169a:	f7ff ffbd 	bl	31618 <poller_thread>
   3169e:	4680      	mov	r8, r0
   316a0:	4620      	mov	r0, r4
   316a2:	f7ff ffb9 	bl	31618 <poller_thread>
   316a6:	4607      	mov	r7, r0
   316a8:	4601      	mov	r1, r0
   316aa:	4640      	mov	r0, r8
   316ac:	f7ff fd21 	bl	310f2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   316b0:	2800      	cmp	r0, #0
   316b2:	dc04      	bgt.n	316be <add_event+0x3a>
	return list->head == list;
   316b4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   316b6:	42a5      	cmp	r5, r4
   316b8:	d10f      	bne.n	316da <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   316ba:	2400      	movs	r4, #0
   316bc:	e00d      	b.n	316da <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   316be:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   316c0:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   316c2:	6073      	str	r3, [r6, #4]
	tail->next = node;
   316c4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   316c6:	606e      	str	r6, [r5, #4]
}
   316c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   316cc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   316ce:	6073      	str	r3, [r6, #4]
	node->next = successor;
   316d0:	6034      	str	r4, [r6, #0]
	prev->next = node;
   316d2:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   316d4:	6066      	str	r6, [r4, #4]
			return;
   316d6:	e7f7      	b.n	316c8 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   316d8:	2400      	movs	r4, #0
   316da:	b19c      	cbz	r4, 31704 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   316dc:	68a0      	ldr	r0, [r4, #8]
   316de:	f7ff ff9b 	bl	31618 <poller_thread>
   316e2:	4601      	mov	r1, r0
   316e4:	4638      	mov	r0, r7
   316e6:	f7ff fd04 	bl	310f2 <z_sched_prio_cmp>
   316ea:	2800      	cmp	r0, #0
   316ec:	dcee      	bgt.n	316cc <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   316ee:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   316f0:	686b      	ldr	r3, [r5, #4]
   316f2:	429c      	cmp	r4, r3
   316f4:	d0f0      	beq.n	316d8 <add_event+0x54>
   316f6:	6824      	ldr	r4, [r4, #0]
   316f8:	2c00      	cmp	r4, #0
   316fa:	d0ee      	beq.n	316da <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   316fc:	2a00      	cmp	r2, #0
   316fe:	d1ec      	bne.n	316da <add_event+0x56>
   31700:	4614      	mov	r4, r2
   31702:	e7ea      	b.n	316da <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   31704:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   31706:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   31708:	6073      	str	r3, [r6, #4]
	tail->next = node;
   3170a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   3170c:	606e      	str	r6, [r5, #4]
}
   3170e:	e7db      	b.n	316c8 <add_event+0x44>

00031710 <register_event>:
{
   31710:	b538      	push	{r3, r4, r5, lr}
   31712:	4604      	mov	r4, r0
   31714:	460d      	mov	r5, r1
	switch (event->type) {
   31716:	7b43      	ldrb	r3, [r0, #13]
   31718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3171c:	3b01      	subs	r3, #1
   3171e:	2b07      	cmp	r3, #7
   31720:	d80b      	bhi.n	3173a <register_event+0x2a>
   31722:	e8df f003 	tbb	[pc, r3]
   31726:	0413      	.short	0x0413
   31728:	0a0a0c0a 	.word	0x0a0a0c0a
   3172c:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   3172e:	6900      	ldr	r0, [r0, #16]
   31730:	460a      	mov	r2, r1
   31732:	4621      	mov	r1, r4
   31734:	3010      	adds	r0, #16
   31736:	f7ff ffa5 	bl	31684 <add_event>
	event->poller = poller;
   3173a:	60a5      	str	r5, [r4, #8]
}
   3173c:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   3173e:	6900      	ldr	r0, [r0, #16]
   31740:	460a      	mov	r2, r1
   31742:	4621      	mov	r1, r4
   31744:	3010      	adds	r0, #16
   31746:	f7ff ff9d 	bl	31684 <add_event>
		break;
   3174a:	e7f6      	b.n	3173a <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   3174c:	460a      	mov	r2, r1
   3174e:	4601      	mov	r1, r0
   31750:	6900      	ldr	r0, [r0, #16]
   31752:	f7ff ff97 	bl	31684 <add_event>
		break;
   31756:	e7f0      	b.n	3173a <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   31758:	6900      	ldr	r0, [r0, #16]
   3175a:	460a      	mov	r2, r1
   3175c:	4621      	mov	r1, r4
   3175e:	3024      	adds	r0, #36	; 0x24
   31760:	f7ff ff90 	bl	31684 <add_event>
		break;
   31764:	e7e9      	b.n	3173a <register_event+0x2a>

00031766 <register_events>:
{
   31766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3176a:	b083      	sub	sp, #12
   3176c:	4680      	mov	r8, r0
   3176e:	460f      	mov	r7, r1
   31770:	4691      	mov	r9, r2
   31772:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   31774:	2500      	movs	r5, #0
	int events_registered = 0;
   31776:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   31778:	e00a      	b.n	31790 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   3177a:	f1ba 0f00 	cmp.w	sl, #0
   3177e:	d102      	bne.n	31786 <register_events+0x20>
   31780:	f899 3000 	ldrb.w	r3, [r9]
   31784:	bb2b      	cbnz	r3, 317d2 <register_events+0x6c>
	__asm__ volatile(
   31786:	f386 8811 	msr	BASEPRI, r6
   3178a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3178e:	3501      	adds	r5, #1
   31790:	42bd      	cmp	r5, r7
   31792:	da25      	bge.n	317e0 <register_events+0x7a>
	__asm__ volatile(
   31794:	f04f 0340 	mov.w	r3, #64	; 0x40
   31798:	f3ef 8611 	mrs	r6, BASEPRI
   3179c:	f383 8812 	msr	BASEPRI_MAX, r3
   317a0:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   317a4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   317a8:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   317ac:	a901      	add	r1, sp, #4
   317ae:	4620      	mov	r0, r4
   317b0:	f7ff ff01 	bl	315b6 <is_condition_met>
   317b4:	2800      	cmp	r0, #0
   317b6:	d0e0      	beq.n	3177a <register_events+0x14>
	event->poller = NULL;
   317b8:	2100      	movs	r1, #0
   317ba:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   317bc:	68e3      	ldr	r3, [r4, #12]
   317be:	f3c3 3286 	ubfx	r2, r3, #14, #7
   317c2:	9801      	ldr	r0, [sp, #4]
   317c4:	4302      	orrs	r2, r0
   317c6:	f362 3394 	bfi	r3, r2, #14, #7
   317ca:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   317cc:	f889 1000 	strb.w	r1, [r9]
   317d0:	e7d9      	b.n	31786 <register_events+0x20>
			register_event(&events[ii], poller);
   317d2:	4649      	mov	r1, r9
   317d4:	4620      	mov	r0, r4
   317d6:	f7ff ff9b 	bl	31710 <register_event>
			events_registered += 1;
   317da:	f10b 0b01 	add.w	fp, fp, #1
   317de:	e7d2      	b.n	31786 <register_events+0x20>
}
   317e0:	4658      	mov	r0, fp
   317e2:	b003      	add	sp, #12
   317e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000317e8 <signal_poller>:
{
   317e8:	b538      	push	{r3, r4, r5, lr}
   317ea:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   317ec:	6880      	ldr	r0, [r0, #8]
   317ee:	f7ff ff13 	bl	31618 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   317f2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   317f4:	f013 0f02 	tst.w	r3, #2
   317f8:	d025      	beq.n	31846 <signal_poller+0x5e>
   317fa:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   317fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
   317fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   31800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   31804:	bf08      	it	eq
   31806:	f112 0f02 	cmneq.w	r2, #2
   3180a:	d01e      	beq.n	3184a <signal_poller+0x62>
	z_unpend_thread(thread);
   3180c:	f7ff fcc5 	bl	3119a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   31810:	2d08      	cmp	r5, #8
   31812:	d00a      	beq.n	3182a <signal_poller+0x42>
   31814:	2300      	movs	r3, #0
   31816:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   3181a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3181c:	f013 0f1f 	tst.w	r3, #31
   31820:	d108      	bne.n	31834 <signal_poller+0x4c>
	return node->next != NULL;
   31822:	69a3      	ldr	r3, [r4, #24]
   31824:	b123      	cbz	r3, 31830 <signal_poller+0x48>
   31826:	2300      	movs	r3, #0
   31828:	e005      	b.n	31836 <signal_poller+0x4e>
   3182a:	f06f 0303 	mvn.w	r3, #3
   3182e:	e7f2      	b.n	31816 <signal_poller+0x2e>
   31830:	2301      	movs	r3, #1
   31832:	e000      	b.n	31836 <signal_poller+0x4e>
   31834:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   31836:	b90b      	cbnz	r3, 3183c <signal_poller+0x54>
		return 0;
   31838:	2000      	movs	r0, #0
   3183a:	e005      	b.n	31848 <signal_poller+0x60>
	z_ready_thread(thread);
   3183c:	4620      	mov	r0, r4
   3183e:	f7ff fcd1 	bl	311e4 <z_ready_thread>
	return 0;
   31842:	2000      	movs	r0, #0
   31844:	e000      	b.n	31848 <signal_poller+0x60>
		return 0;
   31846:	2000      	movs	r0, #0
}
   31848:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   3184a:	f06f 000a 	mvn.w	r0, #10
   3184e:	e7fb      	b.n	31848 <signal_poller+0x60>

00031850 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   31850:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   31852:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   31854:	7823      	ldrb	r3, [r4, #0]
   31856:	b173      	cbz	r3, 31876 <signal_triggered_work+0x26>
   31858:	f854 5c04 	ldr.w	r5, [r4, #-4]
   3185c:	b15d      	cbz	r5, 31876 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   3185e:	f1a4 0614 	sub.w	r6, r4, #20
   31862:	f104 0014 	add.w	r0, r4, #20
   31866:	f7ff fe0b 	bl	31480 <z_abort_timeout>
		twork->poll_result = 0;
   3186a:	2300      	movs	r3, #0
   3186c:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   3186e:	4631      	mov	r1, r6
   31870:	4628      	mov	r0, r5
   31872:	f7ff fb87 	bl	30f84 <z_work_submit_to_queue>
	}

	return 0;
}
   31876:	2000      	movs	r0, #0
   31878:	bd70      	pop	{r4, r5, r6, pc}

0003187a <signal_poll_event>:
{
   3187a:	b570      	push	{r4, r5, r6, lr}
   3187c:	4604      	mov	r4, r0
   3187e:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   31880:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   31882:	b1d6      	cbz	r6, 318ba <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   31884:	7873      	ldrb	r3, [r6, #1]
   31886:	2b01      	cmp	r3, #1
   31888:	d00d      	beq.n	318a6 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   3188a:	2b02      	cmp	r3, #2
   3188c:	d012      	beq.n	318b4 <signal_poll_event+0x3a>
		poller->is_polling = false;
   3188e:	2000      	movs	r0, #0
   31890:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   31892:	2300      	movs	r3, #0
   31894:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   31896:	68e3      	ldr	r3, [r4, #12]
   31898:	f3c3 3286 	ubfx	r2, r3, #14, #7
   3189c:	432a      	orrs	r2, r5
   3189e:	f362 3394 	bfi	r3, r2, #14, #7
   318a2:	60e3      	str	r3, [r4, #12]
}
   318a4:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   318a6:	f7ff ff9f 	bl	317e8 <signal_poller>
		poller->is_polling = false;
   318aa:	2300      	movs	r3, #0
   318ac:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   318ae:	4298      	cmp	r0, r3
   318b0:	daef      	bge.n	31892 <signal_poll_event+0x18>
   318b2:	e7f7      	b.n	318a4 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   318b4:	f7ff ffcc 	bl	31850 <signal_triggered_work>
   318b8:	e7f7      	b.n	318aa <signal_poll_event+0x30>
	int retcode = 0;
   318ba:	2000      	movs	r0, #0
   318bc:	e7e9      	b.n	31892 <signal_poll_event+0x18>

000318be <k_poll_event_init>:
{
   318be:	b410      	push	{r4}
	event->poller = NULL;
   318c0:	2400      	movs	r4, #0
   318c2:	6084      	str	r4, [r0, #8]
	event->type = type;
   318c4:	f890 c00d 	ldrb.w	ip, [r0, #13]
   318c8:	f361 0c05 	bfi	ip, r1, #0, #6
   318cc:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   318d0:	68c1      	ldr	r1, [r0, #12]
   318d2:	f364 3194 	bfi	r1, r4, #14, #7
   318d6:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   318d8:	7b81      	ldrb	r1, [r0, #14]
   318da:	f362 1145 	bfi	r1, r2, #5, #1
   318de:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   318e0:	89c2      	ldrh	r2, [r0, #14]
   318e2:	f364 128f 	bfi	r2, r4, #6, #10
   318e6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   318e8:	6103      	str	r3, [r0, #16]
}
   318ea:	bc10      	pop	{r4}
   318ec:	4770      	bx	lr

000318ee <z_handle_obj_poll_events>:
{
   318ee:	b508      	push	{r3, lr}
   318f0:	4603      	mov	r3, r0
	return list->head == list;
   318f2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   318f4:	4283      	cmp	r3, r0
   318f6:	d008      	beq.n	3190a <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   318f8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   318fa:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   318fc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   318fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31900:	2300      	movs	r3, #0
   31902:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   31904:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   31906:	f7ff ffb8 	bl	3187a <signal_poll_event>
}
   3190a:	bd08      	pop	{r3, pc}

0003190c <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   3190c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   3190e:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   31910:	2300      	movs	r3, #0
   31912:	6083      	str	r3, [r0, #8]
}
   31914:	4770      	bx	lr

00031916 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   31916:	2300      	movs	r3, #0
   31918:	6083      	str	r3, [r0, #8]
}
   3191a:	4770      	bx	lr

0003191c <z_heap_aligned_alloc>:
{
   3191c:	b5d0      	push	{r4, r6, r7, lr}
   3191e:	b082      	sub	sp, #8
   31920:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   31922:	2300      	movs	r3, #0
   31924:	3204      	adds	r2, #4
   31926:	d20e      	bcs.n	31946 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   31928:	b97b      	cbnz	r3, 3194a <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   3192a:	2600      	movs	r6, #0
   3192c:	2700      	movs	r7, #0
   3192e:	e9cd 6700 	strd	r6, r7, [sp]
   31932:	f041 0104 	orr.w	r1, r1, #4
   31936:	4620      	mov	r0, r4
   31938:	f7ff f842 	bl	309c0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   3193c:	b108      	cbz	r0, 31942 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   3193e:	f840 4b04 	str.w	r4, [r0], #4
}
   31942:	b002      	add	sp, #8
   31944:	bdd0      	pop	{r4, r6, r7, pc}
   31946:	2301      	movs	r3, #1
   31948:	e7ee      	b.n	31928 <z_heap_aligned_alloc+0xc>
		return NULL;
   3194a:	2000      	movs	r0, #0
   3194c:	e7f9      	b.n	31942 <z_heap_aligned_alloc+0x26>

0003194e <k_free>:
	if (ptr != NULL) {
   3194e:	b130      	cbz	r0, 3195e <k_free+0x10>
{
   31950:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   31952:	1f01      	subs	r1, r0, #4
   31954:	f850 0c04 	ldr.w	r0, [r0, #-4]
   31958:	f7ff f888 	bl	30a6c <k_heap_free>
}
   3195c:	bd08      	pop	{r3, pc}
   3195e:	4770      	bx	lr

00031960 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   31960:	4770      	bx	lr
	...
